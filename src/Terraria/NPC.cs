using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using System;
using System.Collections.Generic;
using Terraria.DataStructures;
using Terraria.GameContent;
using Terraria.GameContent.Achievements;
using Terraria.GameContent.Events;
using Terraria.GameContent.Tile_Entities;
using Terraria.GameContent.UI;
using Terraria.ID;
using Terraria.Localization;

namespace Terraria
{
	public class NPC : Entity
	{
		public const int MaxMoonLordCountdown = 3600;

		public const int maxBuffs = 5;

		public const int breathMax = 200;

		public string name = "";

		public static readonly int[,,,] MoonLordAttacksArray = InitializeMoonLordAttacks();

		public static readonly int[,] MoonLordAttacksArray2 = InitializeMoonLordAttacks2();

		public static int MoonLordCountdown = 0;

		public int teleportStyle;

		public float teleportTime;

		public static int immuneTime = 20;

		public static int maxAI = 4;

		public int netSpam;

		public static int goldCritterChance = 150;

		public static int[] killCount = new int[540];

		public static float waveKills = 0f;

		public static int waveCount = 0;

		public bool dripping;

		public bool drippingSlime;

		public short catchItem;

		public short releaseOwner = 255;

		public int rarity;

		public static bool taxCollector = false;

		public bool[] playerInteraction = new bool[17];

		public int lastInteraction = 16;

		public float takenDamageMultiplier = 1f;

		private static int spawnSpaceX = 3;

		private static int spawnSpaceY = 3;

		public float gfxOffY;

		public float stepSpeed;

		private static float gravity = 0.3f;

		public bool teleporting;

		private static int maxAttack = 20;

		private static int[] attackNPC = new int[maxAttack];

		public bool stairFall;

		public static int fireFlyFriendly = 0;

		public static int fireFlyChance = 0;

		public static int fireFlyMultiple = 0;

		public static int butterflyChance = 0;

		private byte netStream;

		private byte[] streamPlayer = new byte[16];

		private byte npcNameLookup;

		public Vector2[] oldPos = new Vector2[10];

		public float[] oldRot = new float[10];

		public bool setFrameSize;

		public static int golemBoss = -1;

		public static int plantBoss = -1;

		public static int crimsonBoss = -1;

		public int netSkip;

		public bool netAlways;

		public int realLife = -1;

		public static int sWidth = 1920;

		public static int sHeight = 1080;

		private static int spawnRangeX = (int)((double)(sWidth / 16) * 0.7);

		private static int spawnRangeY = (int)((double)(sHeight / 16) * 0.7);

		public static int safeRangeX = (int)((double)(sWidth / 16) * 0.52);

		public static int safeRangeY = (int)((double)(sHeight / 16) * 0.52);

		private static int activeRangeX = (int)((double)sWidth * 2.1);

		private static int activeRangeY = (int)((double)sHeight * 2.1);

		private static int townRangeX = sWidth;

		private static int townRangeY = sHeight;

		public float npcSlots = 1f;

		private static bool noSpawnCycle = false;

		private static int activeTime = 750;

		private static int defaultSpawnRate = 600;

		private static int defaultMaxSpawns = 5;

		public bool dontCountMe;

		public int[] buffType = new int[5];

		public int[] buffTime = new int[5];

		public bool[] buffImmune = new bool[191];

		public bool midas;

		public bool ichor;

		public bool onFire;

		public bool onFire2;

		public bool onFrostBurn;

		public bool poisoned;

		public bool venom;

		public bool shadowFlame;

		public bool soulDrain;

		public int lifeRegen;

		public int lifeRegenCount;

		public bool confused;

		public bool loveStruck;

		public bool stinky;

		public bool dryadWard;

		public bool immortal;

		public bool chaseable = true;

		public bool canGhostHeal = true;

		public bool javelined;

		public bool celled;

		public bool dryadBane;

		public bool daybreak;

		public static bool savedTaxCollector = false;

		public static bool savedGoblin = false;

		public static bool savedWizard = false;

		public static bool savedMech = false;

		public static bool savedAngler = false;

		public static bool savedStylist = false;

		public static bool downedBoss1 = false;

		public static bool downedBoss2 = false;

		public static bool downedBoss3 = false;

		public static bool downedQueenBee = false;

		public static bool downedSlimeKing = false;

		public static bool downedGoblins = false;

		public static bool downedFrost = false;

		public static bool downedPirates = false;

		public static bool downedClown = false;

		public static bool downedPlantBoss = false;

		public static bool downedGolemBoss = false;

		public static bool downedMartians = false;

		public static bool downedFishron = false;

		public static bool downedHalloweenTree = false;

		public static bool downedHalloweenKing = false;

		public static bool downedChristmasIceQueen = false;

		public static bool downedChristmasTree = false;

		public static bool downedChristmasSantank = false;

		public static bool downedAncientCultist = false;

		public static bool downedMoonlord = false;

		public static bool downedTowerSolar = false;

		public static bool downedTowerVortex = false;

		public static bool downedTowerNebula = false;

		public static bool downedTowerStardust = false;

		public static int ShieldStrengthTowerSolar = 0;

		public static int ShieldStrengthTowerVortex = 0;

		public static int ShieldStrengthTowerNebula = 0;

		public static int ShieldStrengthTowerStardust = 0;

		public static int LunarShieldPowerNormal = 100;

		public static int LunarShieldPowerExpert = 150;

		public static bool TowerActiveSolar = false;

		public static bool TowerActiveVortex = false;

		public static bool TowerActiveNebula = false;

		public static bool TowerActiveStardust = false;

		public static bool LunarApocalypseIsUp = false;

		public static bool downedMechBossAny = false;

		public static bool downedMechBoss1 = false;

		public static bool downedMechBoss2 = false;

		public static bool downedMechBoss3 = false;

		private static int spawnRate = defaultSpawnRate;

		private static int maxSpawns = defaultMaxSpawns;

		public int soundDelay;

		public int[] immune = new int[17];

		public int directionY = 1;

		public int type;

		public float[] ai = new float[maxAI];

		public float[] localAI = new float[maxAI];

		public int aiAction;

		public int aiStyle;

		public bool justHit;

		public int timeLeft;

		public int target = -1;

		public int damage;

		public int defense;

		public int defDamage;

		public int defDefense;

		public bool coldDamage;

		public bool trapImmune;

		public int soundHit;

		public int soundKilled;

		public int life;

		public int lifeMax;

		public Rectangle targetRect;

		public double frameCounter;

		public Rectangle frame;

		private string _givenName = "";

		public Color color;

		public int alpha;

		public bool hide;

		public float scale = 1f;

		public float knockBackResist = 1f;

		public new int oldDirection;

		public int oldDirectionY;

		public int oldTarget;

		public float rotation;

		public bool noGravity;

		public bool noTileCollide;

		public bool netUpdate;

		public bool netUpdate2;

		public bool collideX;

		public bool collideY;

		public bool boss;

		public int spriteDirection = -1;

		public bool behindTiles;

		public bool lavaImmune;

		public float value;

		public float extraValue;

		public bool dontTakeDamage;

		public int netID;

		public bool townNPC;

		public static bool travelNPC = false;

		public bool homeless;

		public int homeTileX = -1;

		public int homeTileY = -1;

		public bool oldHomeless;

		public int oldHomeTileX = -1;

		public int oldHomeTileY = -1;

		public bool friendly;

		public bool closeDoor;

		public int doorX;

		public int doorY;

		public int friendlyRegen;

		public int breath;

		public int breathCounter;

		public bool reflectingProjectiles;

		public int lastPortalColorIndex;

		public static int[,] cavernMonsterType = new int[2, 3];

		private static int ignorePlayerInteractions = 0;

		public static bool downedTowers
		{
			get
			{
				if (downedTowerSolar && downedTowerVortex && downedTowerNebula)
				{
					return downedTowerStardust;
				}
				return false;
			}
		}

		public static int ShieldStrengthTowerMax
		{
			get
			{
				if (!Main.expertMode)
				{
					return LunarShieldPowerNormal;
				}
				return LunarShieldPowerExpert;
			}
		}

		public static bool TowersDefeated
		{
			get
			{
				if (TowerActiveSolar && TowerActiveVortex && TowerActiveNebula)
				{
					return TowerActiveStardust;
				}
				return false;
			}
		}

		public string TypeName => Lang.GetNPCNameValue(netID);

		public string FullName
		{
			get
			{
				if (!HasGivenName)
				{
					return TypeName;
				}
				return Language.GetTextValue("Game.NPCTitle", _givenName, TypeName);
			}
		}

		public bool HasGivenName => _givenName.Length != 0;

		public string GivenOrTypeName
		{
			get
			{
				if (!HasGivenName)
				{
					return TypeName;
				}
				return _givenName;
			}
		}

		public string GivenName
		{
			get
			{
				return _givenName;
			}
			set
			{
				_givenName = (value ?? "");
			}
		}

		public float Opacity
		{
			get
			{
				return 1f - (float)alpha / 255f;
			}
			set
			{
				alpha = (int)MathHelper.Clamp((1f - value) * 255f, 0f, 255f);
			}
		}

		public bool CanTalk
		{
			get
			{
				if ((townNPC || type == 453) && aiStyle == 7)
				{
					return velocity.Y == 0f;
				}
				return false;
			}
		}

		public bool HasValidTarget
		{
			get
			{
				if (target >= 0 && target < 16 && Main.player[target].active)
				{
					return !Main.player[target].dead;
				}
				return false;
			}
		}

		public static int[,,,] InitializeMoonLordAttacks()
		{
			int[,,,] array = null;
			if (MoonLordAttacksArray != null)
			{
				array = MoonLordAttacksArray;
				for (int i = 0; i < array.GetLength(0); i++)
				{
					for (int j = 0; j < array.GetLength(1); j++)
					{
						for (int k = 0; k < array.GetLength(2); k++)
						{
							for (int l = 0; l < array.GetLength(3); l++)
							{
								array[i, j, k, l] = 0;
							}
						}
					}
				}
			}
			else
			{
				array = new int[3, 3, 2, 5];
			}
			array[0, 0, 0, 0] = 0;
			array[0, 0, 1, 0] = 60;
			array[0, 0, 0, 1] = 1;
			array[0, 0, 1, 1] = 70;
			array[0, 0, 0, 2] = 2;
			array[0, 0, 1, 2] = 330;
			array[0, 0, 0, 3] = 0;
			array[0, 0, 1, 3] = 60;
			array[0, 0, 0, 4] = 3;
			array[0, 0, 1, 4] = 90;
			array[0, 1, 0, 0] = 1;
			array[0, 1, 1, 0] = 70;
			array[0, 1, 0, 1] = 0;
			array[0, 1, 1, 1] = 120;
			array[0, 1, 0, 2] = 3;
			array[0, 1, 1, 2] = 90;
			array[0, 1, 0, 3] = 0;
			array[0, 1, 1, 3] = 120;
			array[0, 1, 0, 4] = 2;
			array[0, 1, 1, 4] = 390;
			array[0, 2, 0, 0] = 3;
			array[0, 2, 1, 0] = 90;
			array[0, 2, 0, 1] = 0;
			array[0, 2, 1, 1] = 120;
			array[0, 2, 0, 2] = 2;
			array[0, 2, 1, 2] = 435;
			array[0, 2, 0, 3] = 0;
			array[0, 2, 1, 3] = 120;
			array[0, 2, 0, 4] = 1;
			array[0, 2, 1, 4] = 375;
			array[1, 0, 0, 0] = 0;
			array[1, 0, 1, 0] = 0;
			array[1, 0, 0, 1] = 0;
			array[1, 0, 1, 1] = 0;
			array[1, 0, 0, 2] = 0;
			array[1, 0, 1, 2] = 0;
			array[1, 0, 0, 3] = 0;
			array[1, 0, 1, 3] = 0;
			array[1, 0, 0, 4] = 0;
			array[1, 0, 1, 4] = 0;
			array[1, 1, 0, 0] = 0;
			array[1, 1, 1, 0] = 0;
			array[1, 1, 0, 1] = 0;
			array[1, 1, 1, 1] = 0;
			array[1, 1, 0, 2] = 0;
			array[1, 1, 1, 2] = 0;
			array[1, 1, 0, 3] = 0;
			array[1, 1, 1, 3] = 0;
			array[1, 1, 0, 4] = 0;
			array[1, 1, 1, 4] = 0;
			array[1, 2, 0, 0] = 0;
			array[1, 2, 1, 0] = 0;
			array[1, 2, 0, 1] = 0;
			array[1, 2, 1, 1] = 0;
			array[1, 2, 0, 2] = 0;
			array[1, 2, 1, 2] = 0;
			array[1, 2, 0, 3] = 0;
			array[1, 2, 1, 3] = 0;
			array[1, 2, 0, 4] = 0;
			array[1, 2, 1, 4] = 0;
			array[2, 0, 0, 0] = 0;
			array[2, 0, 1, 0] = 0;
			array[2, 0, 0, 1] = 0;
			array[2, 0, 1, 1] = 0;
			array[2, 0, 0, 2] = 0;
			array[2, 0, 1, 2] = 0;
			array[2, 0, 0, 3] = 0;
			array[2, 0, 1, 3] = 0;
			array[2, 0, 0, 4] = 0;
			array[2, 0, 1, 4] = 0;
			array[2, 1, 0, 0] = 0;
			array[2, 1, 1, 0] = 0;
			array[2, 1, 0, 1] = 0;
			array[2, 1, 1, 1] = 0;
			array[2, 1, 0, 2] = 0;
			array[2, 1, 1, 2] = 0;
			array[2, 1, 0, 3] = 0;
			array[2, 1, 1, 3] = 0;
			array[2, 1, 0, 4] = 0;
			array[2, 1, 1, 4] = 0;
			array[2, 2, 0, 0] = 0;
			array[2, 2, 1, 0] = 0;
			array[2, 2, 0, 1] = 0;
			array[2, 2, 1, 1] = 0;
			array[2, 2, 0, 2] = 0;
			array[2, 2, 1, 2] = 0;
			array[2, 2, 0, 3] = 0;
			array[2, 2, 1, 3] = 0;
			array[2, 2, 0, 4] = 0;
			array[2, 2, 1, 4] = 0;
			InitializeMoonLordAttacks2();
			return array;
		}

		public static string GetFirstNPCNameOrNull(int npcType)
		{
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type == npcType)
				{
					return Main.npc[i].GivenOrTypeName;
				}
			}
			return null;
		}

		public static bool GetNPCLocation(int i, bool seekHead, bool averageDirection, out int index, out Vector2 pos)
		{
			int num = Main.npc[i].type;
			int num2 = -1;
			int num3 = -1;
			switch (num)
			{
			case 13:
				num3 = 15;
				num2 = 0;
				break;
			case 14:
			case 15:
				num3 = 13;
				num2 = 1;
				break;
			case 134:
				num3 = 136;
				num2 = 0;
				break;
			case 135:
			case 136:
				num3 = 134;
				num2 = 1;
				break;
			case 454:
				num3 = 459;
				num2 = 0;
				break;
			case 455:
			case 456:
			case 457:
			case 458:
			case 459:
				num3 = 454;
				num2 = 1;
				break;
			case 98:
				num3 = 100;
				num2 = 0;
				break;
			case 99:
			case 100:
				num3 = 98;
				num2 = 1;
				break;
			case 39:
				num3 = 41;
				num2 = 0;
				break;
			case 40:
			case 41:
				num3 = 39;
				num2 = 1;
				break;
			case 510:
				num3 = 512;
				num2 = 0;
				break;
			case 511:
			case 512:
				num3 = 510;
				num2 = 1;
				break;
			case 513:
				num3 = 515;
				num2 = 0;
				break;
			case 514:
			case 515:
				num3 = 513;
				num2 = 1;
				break;
			case 87:
				num3 = 92;
				num2 = 0;
				break;
			case 88:
			case 89:
			case 90:
			case 91:
			case 92:
				num3 = 87;
				num2 = 1;
				break;
			case 117:
				num3 = 119;
				num2 = 0;
				break;
			case 118:
			case 119:
				num3 = 117;
				num2 = 1;
				break;
			case 7:
				num3 = 9;
				num2 = 0;
				break;
			case 8:
			case 9:
				num3 = 7;
				num2 = 1;
				break;
			case 95:
				num3 = 97;
				num2 = 0;
				break;
			case 96:
			case 97:
				num3 = 95;
				num2 = 1;
				break;
			case 10:
				num3 = 12;
				num2 = 0;
				break;
			case 11:
			case 12:
				num3 = 10;
				num2 = 1;
				break;
			}
			if (num2 != -1)
			{
				if (seekHead && num2 == 1)
				{
					index = -1;
					pos = Vector2.Zero;
					return false;
				}
				Vector2 center = Main.npc[i].Center;
				int num4 = -1;
				float num5 = -1f;
				int num6 = -1;
				Vector2 center2 = Main.player[Main.myPlayer].Center;
				int num7 = (int)Main.npc[i].ai[num2];
				int num8 = 0;
				while (num7 >= 0 && num7 < 200 && ++num8 < 100 && Main.npc[num7].active)
				{
					if (!averageDirection && (num6 == -1 || Main.npc[num7].Distance(center2) < num5))
					{
						num5 = Main.npc[num7].Distance(center2);
						num6 = num7;
					}
					if (Main.npc[num7].type == num3)
					{
						num4 = num7;
						break;
					}
					num7 = (int)Main.npc[num7].ai[num2];
				}
				if (num4 >= 0)
				{
					if (!averageDirection)
					{
						pos = Main.npc[num6].Center;
						index = num6;
					}
					else
					{
						center += Main.npc[num4].Center;
						pos = center / 2f;
						index = num4;
					}
					return true;
				}
				pos = Vector2.Zero;
				index = -1;
				return false;
			}
			pos = Main.npc[i].Center;
			index = i;
			return true;
		}

		public static int[,] InitializeMoonLordAttacks2()
		{
			int[,] array = null;
			if (MoonLordAttacksArray2 != null)
			{
				array = MoonLordAttacksArray2;
				for (int i = 0; i < array.GetLength(0); i++)
				{
					for (int j = 0; j < array.GetLength(1); j++)
					{
						array[i, j] = 0;
					}
				}
			}
			else
			{
				array = new int[2, 10];
			}
			array[0, 0] = 0;
			array[1, 0] = 90;
			array[0, 1] = 1;
			array[1, 1] = 90;
			array[0, 2] = 0;
			array[1, 2] = 90;
			array[0, 3] = 2;
			array[1, 3] = 135;
			array[0, 4] = 0;
			array[1, 4] = 90;
			array[0, 5] = 3;
			array[1, 5] = 200;
			array[0, 6] = 0;
			array[1, 6] = 90;
			array[0, 7] = 4;
			array[1, 7] = 375;
			array[0, 8] = 0;
			array[1, 8] = 90;
			array[0, 9] = 2;
			array[1, 9] = 135;
			return array;
		}

		public static string getNewNPCName(int npcType)
		{
			if (WorldGen.genRand == null)
			{
				WorldGen.genRand = new Random();
			}
			switch (npcType)
			{
			case 17:
				switch (WorldGen.genRand.Next(23))
				{
				case 0:
					return "Alfred";
				case 1:
					return "Barney";
				case 2:
					return "Calvin";
				case 3:
					return "Edmund";
				case 4:
					return "Edwin";
				case 5:
					return "Eugene";
				case 6:
					return "Frank";
				case 7:
					return "Frederick";
				case 8:
					return "Gilbert";
				case 9:
					return "Gus";
				case 10:
					return "Wilbur";
				case 11:
					return "Seymour";
				case 12:
					return "Louis";
				case 13:
					return "Humphrey";
				case 14:
					return "Harold";
				case 15:
					return "Milton";
				case 16:
					return "Mortimer";
				case 17:
					return "Howard";
				case 18:
					return "Walter";
				case 19:
					return "Finn";
				case 20:
					return "Isaac";
				case 21:
					return "Joseph";
				default:
					return "Ralph";
				}
			case 18:
				switch (WorldGen.genRand.Next(24))
				{
				case 0:
					return "Molly";
				case 1:
					return "Amy";
				case 2:
					return "Claire";
				case 3:
					return "Emily";
				case 4:
					return "Katie";
				case 5:
					return "Madeline";
				case 6:
					return "Katelyn";
				case 7:
					return "Emma";
				case 8:
					return "Abigail";
				case 9:
					return "Carly";
				case 10:
					return "Jenna";
				case 11:
					return "Heather";
				case 12:
					return "Katherine";
				case 13:
					return "Caitlin";
				case 14:
					return "Kaitlin";
				case 15:
					return "Holly";
				case 16:
					return "Kaitlyn";
				case 17:
					return "Hannah";
				case 18:
					return "Kathryn";
				case 19:
					return "Lorraine";
				case 20:
					return "Helen";
				case 21:
					return "Kayla";
				case 22:
					return "Lisa";
				default:
					return "Allison";
				}
			case 19:
				switch (WorldGen.genRand.Next(24))
				{
				case 0:
					return "DeShawn";
				case 1:
					return "DeAndre";
				case 2:
					return "Marquis";
				case 3:
					return "Darnell";
				case 4:
					return "Terrell";
				case 5:
					return "Malik";
				case 6:
					return "Trevon";
				case 7:
					return "Tyrone";
				case 8:
					return "Willie";
				case 9:
					return "Dominique";
				case 10:
					return "Demetrius";
				case 11:
					return "Reginald";
				case 12:
					return "Jamal";
				case 13:
					return "Maurice";
				case 14:
					return "Jalen";
				case 15:
					return "Darius";
				case 16:
					return "Xavier";
				case 17:
					return "Terrance";
				case 18:
					return "Andre";
				case 19:
					return "Dante";
				case 20:
					return "Brimst";
				case 21:
					return "Bronson";
				case 22:
					return "Tony";
				default:
					return "Darryl";
				}
			case 20:
				switch (WorldGen.genRand.Next(22))
				{
				case 0:
					return "Alalia";
				case 1:
					return "Alalia";
				case 2:
					return "Alura";
				case 3:
					return "Ariella";
				case 4:
					return "Caelia";
				case 5:
					return "Calista";
				case 6:
					return "Chryseis";
				case 7:
					return "Emerenta";
				case 8:
					return "Elysia";
				case 9:
					return "Evvie";
				case 10:
					return "Faye";
				case 11:
					return "Felicitae";
				case 12:
					return "Lunette";
				case 13:
					return "Nata";
				case 14:
					return "Nissa";
				case 15:
					return "Tatiana";
				case 16:
					return "Rosalva";
				case 17:
					return "Shea";
				case 18:
					return "Tania";
				case 19:
					return "Isis";
				case 20:
					return "Celestia";
				default:
					return "Xylia";
				}
			case 22:
				switch (WorldGen.genRand.Next(35))
				{
				case 0:
					return "Joe";
				case 1:
					return "Connor";
				case 2:
					return "Tanner";
				case 3:
					return "Wyatt";
				case 4:
					return "Cody";
				case 5:
					return "Levi";
				case 6:
					return "Luke";
				case 7:
					return "Jack";
				case 8:
					return "Scott";
				case 9:
					return "Logan";
				case 10:
					return "Cole";
				case 11:
					return "Asher";
				case 12:
					return "Bradley";
				case 13:
					return "Jacob";
				case 14:
					return "Garrett";
				case 15:
					return "Dylan";
				case 16:
					return "Maxwell";
				case 17:
					return "Steve";
				case 18:
					return "Brett";
				case 19:
					return "Andrew";
				case 20:
					return "Harley";
				case 21:
					return "Kyle";
				case 22:
					return "Jake";
				case 23:
					return "Ryan";
				case 24:
					return "Jeffrey";
				case 25:
					return "Seth";
				case 26:
					return "Marty";
				case 27:
					return "Brandon";
				case 28:
					return "Zach";
				case 29:
					return "Jeff";
				case 30:
					return "Daniel";
				case 31:
					return "Trent";
				case 32:
					return "Kevin";
				case 33:
					return "Brian";
				default:
					return "Colin";
				}
			case 38:
				switch (WorldGen.genRand.Next(22))
				{
				case 0:
					return "Dolbere";
				case 1:
					return "Bazdin";
				case 2:
					return "Durim";
				case 3:
					return "Tordak";
				case 4:
					return "Garval";
				case 5:
					return "Morthal";
				case 6:
					return "Oten";
				case 7:
					return "Dolgen";
				case 8:
					return "Gimli";
				case 9:
					return "Gimut";
				case 10:
					return "Duerthen";
				case 11:
					return "Beldin";
				case 12:
					return "Jarut";
				case 13:
					return "Ovbere";
				case 14:
					return "Norkas";
				case 15:
					return "Dolgrim";
				case 16:
					return "Boften";
				case 17:
					return "Norsun";
				case 18:
					return "Dias";
				case 19:
					return "Fikod";
				case 20:
					return "Urist";
				default:
					return "Darur";
				}
			case 54:
				switch (WorldGen.genRand.Next(25))
				{
				case 0:
					return "Sebastian";
				case 1:
					return "Rupert";
				case 2:
					return "Clive";
				case 3:
					return "Nigel";
				case 4:
					return "Mervyn";
				case 5:
					return "Cedric";
				case 6:
					return "Pip";
				case 7:
					return "Cyril";
				case 8:
					return "Fitz";
				case 9:
					return "Lloyd";
				case 10:
					return "Arthur";
				case 11:
					return "Rodney";
				case 12:
					return "Graham";
				case 13:
					return "Edward";
				case 14:
					return "Alfred";
				case 15:
					return "Edmund";
				case 16:
					return "Henry";
				case 17:
					return "Herald";
				case 18:
					return "Roland";
				case 19:
					return "Lincoln";
				case 20:
					return "Lloyd";
				case 21:
					return "Edgar";
				case 22:
					return "Eustace";
				case 23:
					return "Benjamin";
				default:
					return "Rodrick";
				}
			case 107:
				switch (WorldGen.genRand.Next(25))
				{
				case 0:
					return "Grodax";
				case 1:
					return "Sarx";
				case 2:
					return "Xon";
				case 3:
					return "Mrunok";
				case 4:
					return "Nuxatk";
				case 5:
					return "Tgerd";
				case 6:
					return "Darz";
				case 7:
					return "Smador";
				case 8:
					return "Stazen";
				case 9:
					return "Mobart";
				case 10:
					return "Knogs";
				case 11:
					return "Tkanus";
				case 12:
					return "Negurk";
				case 13:
					return "Nort";
				case 14:
					return "Durnok";
				case 15:
					return "Trogem";
				case 16:
					return "Stezom";
				case 17:
					return "Gnudar";
				case 18:
					return "Ragz";
				case 19:
					return "Fahd";
				case 20:
					return "Xanos";
				case 21:
					return "Arback";
				case 22:
					return "Fjell";
				case 23:
					return "Dalek";
				default:
					return "Knub";
				}
			case 108:
				switch (WorldGen.genRand.Next(21))
				{
				case 0:
					return "Dalamar";
				case 1:
					return "Dulais";
				case 2:
					return "Elric";
				case 3:
					return "Arddun";
				case 4:
					return "Maelor";
				case 5:
					return "Leomund";
				case 6:
					return "Hirael";
				case 7:
					return "Gwentor";
				case 8:
					return "Greum";
				case 9:
					return "Gearroid";
				case 10:
					return "Fizban";
				case 11:
					return "Ningauble";
				case 12:
					return "Seonag";
				case 13:
					return "Sargon";
				case 14:
					return "Merlyn";
				case 15:
					return "Magius";
				case 16:
					return "Berwyn";
				case 17:
					return "Arwyn";
				case 18:
					return "Alasdair";
				case 19:
					return "Tagar";
				default:
					return "Xanadu";
				}
			case 124:
				switch (WorldGen.genRand.Next(24))
				{
				case 0:
					return "Shayna";
				case 1:
					return "Korrie";
				case 2:
					return "Ginger";
				case 3:
					return "Brooke";
				case 4:
					return "Jenny";
				case 5:
					return "Autumn";
				case 6:
					return "Nancy";
				case 7:
					return "Ella";
				case 8:
					return "Kayla";
				case 9:
					return "Selah";
				case 10:
					return "Sophia";
				case 11:
					return "Marshanna";
				case 12:
					return "Lauren";
				case 13:
					return "Trisha";
				case 14:
					return "Shirlena";
				case 15:
					return "Sheena";
				case 16:
					return "Ellen";
				case 17:
					return "Amy";
				case 18:
					return "Dawn";
				case 19:
					return "Susana";
				case 20:
					return "Meredith";
				case 21:
					return "Selene";
				case 22:
					return "Terra";
				default:
					return "Sally";
				}
			case 160:
				switch (WorldGen.genRand.Next(12))
				{
				case 0:
					return "Reishi";
				case 1:
					return "Maitake";
				case 2:
					return "Chanterelle";
				case 3:
					return "Porcini";
				case 4:
					return "Shimeji";
				case 5:
					return "Amanita";
				case 6:
					return "Muscaria";
				case 7:
					return "Agaric";
				case 8:
					return "Cremini";
				case 9:
					return "Morel";
				case 10:
					return "Enoki";
				default:
					return "Shiitake";
				}
			case 178:
				switch (WorldGen.genRand.Next(20))
				{
				case 0:
					return "Whitney";
				case 1:
					return "Verity";
				case 2:
					return "Ada";
				case 3:
					return "Cornelia";
				case 4:
					return "Lydia";
				case 5:
					return "Leila";
				case 6:
					return "Minerva";
				case 7:
					return "Emeline";
				case 8:
					return "Cynthia";
				case 9:
					return "Fidelia";
				case 10:
					return "Lilly";
				case 11:
					return "Phoebe";
				case 12:
					return "Zylphia";
				case 13:
					return "Zelda";
				case 14:
					return "Selina";
				case 15:
					return "Hope";
				case 16:
					return "Isabella";
				case 17:
					return "Judith";
				case 18:
					return "Savannah";
				default:
					return "Vivian";
				}
			case 207:
				switch (WorldGen.genRand.Next(16))
				{
				case 0:
					return "Abdosir";
				case 1:
					return "Akbar";
				case 2:
					return "Bodashtart";
				case 3:
					return "Danel";
				case 4:
					return "Hanno";
				case 5:
					return "Hiram";
				case 6:
					return "Kanmi";
				case 7:
					return "Philosir";
				case 8:
					return "Tabnit";
				case 9:
					return "Yutpan";
				case 10:
					return "Ahirom";
				case 11:
					return "Batnoam";
				case 12:
					return "Sikarbaal";
				case 13:
					return "Hannibal";
				case 14:
					return "Yehomilk";
				default:
					return "Ahinadab";
				}
			case 208:
				switch (WorldGen.genRand.Next(17))
				{
				case 0:
					return "Candy";
				case 1:
					return "Isis";
				case 2:
					return "Trixy";
				case 3:
					return "Destiny";
				case 4:
					return "Lexus";
				case 5:
					return "Bambi";
				case 6:
					return "Bailey";
				case 7:
					return "Glitter";
				case 8:
					return "Sparkle";
				case 9:
					return "Paris";
				case 10:
					return "Dazzle";
				case 11:
					return "Fantasy";
				case 12:
					return "Bunny";
				case 13:
					return "Sugar";
				case 14:
					return "Fantasia";
				case 15:
					return "Star";
				default:
					return "Cherry";
				}
			case 209:
				switch (WorldGen.genRand.Next(23))
				{
				case 0:
					return "Alpha";
				case 1:
					return "Beta";
				case 2:
					return "Delta";
				case 3:
					return "Omega";
				case 4:
					return "Gamma";
				case 5:
					return "Theta";
				case 6:
					return "Kappa";
				case 7:
					return "Omicron";
				case 8:
					return "Sigma";
				case 9:
					return "Upsilon";
				case 10:
					return "Phi";
				case 11:
					return "Zeta";
				case 12:
					return "Lambda";
				case 13:
					return "Nu";
				case 14:
					return "Ci";
				case 15:
					return "Rho";
				case 16:
					return "Phi";
				case 17:
					return "Fender";
				case 18:
					return "T-3E0";
				case 19:
					return "Niner-7";
				case 20:
					return "A.N.D.Y";
				case 21:
					return "Syn-X";
				default:
					return "Mu";
				}
			case 227:
				switch (WorldGen.genRand.Next(17))
				{
				case 0:
					return "Marco";
				case 1:
					return "Guido";
				case 2:
					return "Enzo";
				case 3:
					return "Martino";
				case 4:
					return "Mauro";
				case 5:
					return "Lorenzo";
				case 6:
					return "Ludo";
				case 7:
					return "Luciano";
				case 8:
					return "Carlo";
				case 9:
					return "Bruno";
				case 10:
					return "Mario";
				case 11:
					return "Leonardo";
				case 12:
					return "Raphael";
				case 13:
					return "Luigi";
				case 14:
					return "Luca";
				case 15:
					return "Darren";
				default:
					return "Stefano";
				}
			case 228:
				switch (WorldGen.genRand.Next(10))
				{
				case 0:
					return "Abibe";
				case 1:
					return "Jamundi";
				case 2:
					return "U'wa";
				case 3:
					return "Tairona";
				case 4:
					return "Xirigua";
				case 5:
					return "Zop'a";
				case 6:
					return "Opuni";
				case 7:
					return "Kogi-ghi";
				case 8:
					return "Konah";
				default:
					return "Gboto";
				}
			case 229:
				switch (WorldGen.genRand.Next(11))
				{
				case 0:
					return "David";
				case 1:
					return "Red Beard";
				case 2:
					return "Jack";
				case 3:
					return "Black Beard";
				case 4:
					return "Captain Morgan";
				case 5:
					return "Wet Beard";
				case 6:
					return "James T. Beard";
				case 7:
					return "Gunpowder Garry";
				case 8:
					return "Captain Stoney Dirt";
				case 9:
					return "Jake";
				default:
					return "Captain Bullywort";
				}
			case 353:
				switch (WorldGen.genRand.Next(20))
				{
				case 0:
					return "Bri";
				case 1:
					return "Brianne";
				case 2:
					return "Flora";
				case 3:
					return "Iris";
				case 4:
					return "Scarlett";
				case 5:
					return "Lola";
				case 6:
					return "Hazel";
				case 7:
					return "Stella";
				case 8:
					return "Pearl";
				case 9:
					return "Tallulah";
				case 10:
					return "Ruby";
				case 11:
					return "Esmeralda";
				case 12:
					return "Kylie";
				case 13:
					return "Kati";
				case 14:
					return "Biah";
				case 15:
					return "Meliyah";
				case 16:
					return "Petra";
				case 17:
					return "Rox";
				case 18:
					return "Roxanne";
				default:
					return "Annabel";
				}
			case 368:
				switch (WorldGen.genRand.Next(13))
				{
				case 0:
					return "Abraham";
				case 1:
					return "Bohemas";
				case 2:
					return "Eladon";
				case 3:
					return "Aphraim";
				case 4:
					return "Gallius";
				case 5:
					return "Llewellyn";
				case 6:
					return "Riley";
				case 7:
					return "Rawleigh";
				case 8:
					return "Shipton";
				case 9:
					return "Romeo";
				case 10:
					return "Aedan";
				case 11:
					return "Mercer";
				default:
					return "Willy";
				}
			case 369:
				switch (WorldGen.genRand.Next(22))
				{
				case 0:
					return "Bobby";
				case 1:
					return "Sammy";
				case 2:
					return "Jimmy";
				case 3:
					return "Danny";
				case 4:
					return "Timmy";
				case 5:
					return "Simon";
				case 6:
					return "Johnny";
				case 7:
					return "Billy";
				case 8:
					return "Matty";
				case 9:
					return "Bart";
				case 10:
					return "Phillip";
				case 11:
					return "Spencer";
				case 12:
					return "Nathan";
				case 13:
					return "Grayson";
				case 14:
					return "Bryce";
				case 15:
					return "Miles";
				case 16:
					return "Charles";
				case 17:
					return "Adam";
				case 18:
					return "Tyler";
				case 19:
					return "Jey";
				case 20:
					return "Ivan";
				default:
					return "Izzy";
				}
			case 453:
				switch (WorldGen.genRand.Next(8))
				{
				case 0:
					return "Skellington";
				case 1:
					return "Bones McGee";
				case 2:
					return "Gloomy Mays";
				case 3:
					return "Jack Sellington";
				case 4:
					return "Billy Marrows";
				case 5:
					return "Tom";
				case 6:
					return "Rattles Magoo";
				case 7:
					return "Mandible Calavera";
				default:
					return "No-Eyed Wiley";
				}
			case 441:
				switch (WorldGen.genRand.Next(20))
				{
				case 0:
					return "McKinly";
				case 1:
					return "Millard";
				case 2:
					return "Fillmore";
				case 3:
					return "Rutherford";
				case 4:
					return "Chester";
				case 5:
					return "Grover";
				case 6:
					return "Cleveland";
				case 7:
					return "Theodore";
				case 8:
					return "Herbert";
				case 9:
					return "Warren";
				case 10:
					return "Lyndon";
				case 11:
					return "Ronald";
				case 12:
					return "Harrison";
				case 13:
					return "Woodrow";
				case 14:
					return "Tweed";
				case 15:
					return "Blanton";
				case 16:
					return "Dwyer";
				case 17:
					return "Carroll";
				default:
					return "Agnew";
				}
			default:
				return "";
			}
		}

		public static void setNPCName(string newName, int npcType, bool resetExtras = false)
		{
			bool flag = false;
			for (int i = 0; i < 200; i++)
			{
				if (!Main.npc[i].active || Main.npc[i].type != npcType)
				{
					continue;
				}
				if (flag)
				{
					Main.npc[i].GivenName = getNewNPCName(npcType);
					continue;
				}
				Main.npc[i].GivenName = newName;
				if (!resetExtras)
				{
					break;
				}
				flag = true;
			}
		}

		public static string firstNPCName(int npcType)
		{
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type == npcType)
				{
					return Main.npc[i].GivenOrTypeName;
				}
			}
			return getNewNPCName(npcType);
		}

		public static bool MechSpawn(float x, float y, int type)
		{
			int num = 0;
			int num2 = 0;
			int num3 = 0;
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type == type)
				{
					num++;
					Vector2 vector = new Vector2(x, y);
					float num4 = Main.npc[i].position.X - vector.X;
					float num5 = Main.npc[i].position.Y - vector.Y;
					float num6 = (float)Math.Sqrt(num4 * num4 + num5 * num5);
					if (num6 < 200f)
					{
						num2++;
					}
					if (num6 < 600f)
					{
						num3++;
					}
				}
			}
			if (num2 >= 3 || num3 >= 6 || num >= 10)
			{
				return false;
			}
			return true;
		}

		public static int TypeToNum(int type)
		{
			switch (type)
			{
			case 17:
				return 2;
			case 18:
				return 3;
			case 19:
				return 6;
			case 20:
				return 5;
			case 22:
				return 1;
			case 38:
				return 4;
			case 54:
				return 7;
			case 107:
				return 9;
			case 108:
				return 10;
			case 124:
				return 8;
			case 142:
				return 11;
			case 160:
				return 12;
			case 178:
				return 13;
			case 207:
				return 14;
			case 208:
				return 15;
			case 209:
				return 16;
			case 227:
				return 17;
			case 228:
				return 18;
			case 229:
				return 19;
			case 353:
				return 20;
			case 368:
				return 21;
			case 369:
				return 22;
			case 441:
				return 23;
			default:
				return -1;
			}
		}

		public static int NumToType(int type)
		{
			switch (type)
			{
			case 2:
				return 17;
			case 3:
				return 18;
			case 6:
				return 19;
			case 5:
				return 20;
			case 1:
				return 22;
			case 4:
				return 38;
			case 7:
				return 54;
			case 9:
				return 107;
			case 10:
				return 108;
			case 8:
				return 124;
			case 11:
				return 142;
			case 12:
				return 160;
			case 13:
				return 178;
			case 14:
				return 207;
			case 15:
				return 208;
			case 16:
				return 209;
			case 17:
				return 227;
			case 18:
				return 228;
			case 19:
				return 229;
			case 20:
				return 353;
			case 21:
				return 368;
			case 22:
				return 369;
			case 23:
				return 441;
			default:
				return -1;
			}
		}

		public int GetBossHeadTextureIndex()
		{
			int result = NPCID.Sets.BossHeadTextures[type];
			switch (type)
			{
			case 4:
				if (ai[0] >= 2f)
				{
					result = 1;
				}
				break;
			case 262:
				if (life <= lifeMax / 2)
				{
					result = 12;
				}
				break;
			case 125:
				if (ai[0] >= 3f)
				{
					result = 20;
				}
				break;
			case 126:
				if (ai[0] >= 3f)
				{
					result = 21;
				}
				break;
			case 439:
				if (ai[0] == 5f && alpha == 255)
				{
					result = -1;
				}
				break;
			case 440:
				if (ai[0] != 5f || alpha == 255)
				{
					result = -1;
				}
				break;
			}
			return result;
		}

		public float GetBossHeadRotation()
		{
			float result = 0f;
			switch (type)
			{
			case 68:
			case 262:
				result = rotation;
				break;
			case 35:
			case 127:
				if (ai[1] == 1f || ai[1] == 2f)
				{
					result = rotation;
				}
				break;
			case 345:
				if (ai[0] == 2f)
				{
					result = rotation;
				}
				break;
			}
			return result;
		}

		public SpriteEffects GetBossHeadSpriteEffects()
		{
			SpriteEffects result = SpriteEffects.None;
			int num = type;
			if (num == 491 && spriteDirection == 1)
			{
				result = SpriteEffects.FlipHorizontally;
			}
			return result;
		}

		public int BannerID()
		{
			if (netID >= -10)
			{
				return netID;
			}
			return type;
		}

		public void netDefaults(int type)
		{
			if (type < 0)
			{
				switch (type)
				{
				case -1:
					SetDefaults("Slimeling");
					break;
				case -2:
					SetDefaults("Slimer2");
					break;
				case -3:
					SetDefaults("Green Slime");
					break;
				case -4:
					SetDefaults("Pinky");
					break;
				case -5:
					SetDefaults("Baby Slime");
					break;
				case -6:
					SetDefaults("Black Slime");
					break;
				case -7:
					SetDefaults("Purple Slime");
					break;
				case -8:
					SetDefaults("Red Slime");
					break;
				case -9:
					SetDefaults("Yellow Slime");
					break;
				case -10:
					SetDefaults("Jungle Slime");
					break;
				case -11:
					SetDefaults("Little Eater");
					break;
				case -12:
					SetDefaults("Big Eater");
					break;
				case -13:
					SetDefaults("Short Bones");
					break;
				case -14:
					SetDefaults("Big Boned");
					break;
				case -15:
					SetDefaults("Heavy Skeleton");
					break;
				case -16:
					SetDefaults("Little Stinger");
					break;
				case -17:
					SetDefaults("Big Stinger");
					break;
				case -18:
					SetDefaults("Tiny Moss Hornet");
					break;
				case -19:
					SetDefaults("Little Moss Hornet");
					break;
				case -20:
					SetDefaults("Big Moss Hornet");
					break;
				case -21:
					SetDefaults("Giant Moss Hornet");
					break;
				case -22:
					SetDefaults("Little Crimera");
					break;
				case -23:
					SetDefaults("Big Crimera");
					break;
				case -24:
					SetDefaults("Little Crimslime");
					break;
				case -25:
					SetDefaults("Big Crimslime");
					break;
				case -26:
					SetDefaults("Small Zombie");
					break;
				case -27:
					SetDefaults("Big Zombie");
					break;
				case -28:
					SetDefaults("Small Bald Zombie");
					break;
				case -29:
					SetDefaults("Big Bald Zombie");
					break;
				case -30:
					SetDefaults("Small Pincushion Zombie");
					break;
				case -31:
					SetDefaults("Big Pincushion Zombie");
					break;
				case -32:
					SetDefaults("Small Slimed Zombie");
					break;
				case -33:
					SetDefaults("Big Slimed Zombie");
					break;
				case -34:
					SetDefaults("Small Swamp Zombie");
					break;
				case -35:
					SetDefaults("Big Swamp Zombie");
					break;
				case -36:
					SetDefaults("Small Twiggy Zombie");
					break;
				case -37:
					SetDefaults("Big Twiggy Zombie");
					break;
				case -38:
					SetDefaults("Cataract Eye 2");
					break;
				case -39:
					SetDefaults("Sleepy Eye 2");
					break;
				case -40:
					SetDefaults("Dialated Eye 2");
					break;
				case -41:
					SetDefaults("Green Eye 2");
					break;
				case -42:
					SetDefaults("Purple Eye 2");
					break;
				case -43:
					SetDefaults("Demon Eye 2");
					break;
				case -44:
					SetDefaults("Small Female Zombie");
					break;
				case -45:
					SetDefaults("Big Female Zombie");
					break;
				case -46:
					SetDefaults("Small Skeleton");
					break;
				case -47:
					SetDefaults("Big Skeleton");
					break;
				case -48:
					SetDefaults("Small Headache Skeleton");
					break;
				case -49:
					SetDefaults("Big Headache Skeleton");
					break;
				case -50:
					SetDefaults("Small Misassembled Skeleton");
					break;
				case -51:
					SetDefaults("Big Misassembled Skeleton");
					break;
				case -52:
					SetDefaults("Small Pantless Skeleton");
					break;
				case -53:
					SetDefaults("Big Pantless Skeleton");
					break;
				case -54:
					SetDefaults("Small Rain Zombie");
					break;
				case -55:
					SetDefaults("Big Rain Zombie");
					break;
				case -56:
					SetDefaults("Little Hornet Fatty");
					break;
				case -57:
					SetDefaults("Big Hornet Fatty");
					break;
				case -58:
					SetDefaults("Little Hornet Honey");
					break;
				case -59:
					SetDefaults("Big Hornet Honey");
					break;
				case -60:
					SetDefaults("Little Hornet Leafy");
					break;
				case -61:
					SetDefaults("Big Hornet Leafy");
					break;
				case -62:
					SetDefaults("Little Hornet Spikey");
					break;
				case -63:
					SetDefaults("Big Hornet Spikey");
					break;
				case -64:
					SetDefaults("Little Hornet Stingy");
					break;
				case -65:
					SetDefaults("Big Hornet Stingy");
					break;
				}
			}
			else
			{
				SetDefaults(type);
			}
		}

		public void SetDefaults(string Name)
		{
			bool flag = false;
			SetDefaults(0);
			switch (Name)
			{
			case "Slimeling":
				SetDefaults(81, 0.6f);
				name = Name;
				damage = 45;
				defense = 10;
				life = 90;
				knockBackResist *= 1.2f;
				value = 100f;
				netID = -1;
				flag = true;
				break;
			case "Slimer2":
				SetDefaults(81, 0.9f);
				name = Name;
				damage = 45;
				defense = 20;
				life = 90;
				knockBackResist *= 1.2f;
				value = 100f;
				netID = -2;
				flag = true;
				break;
			case "Green Slime":
				SetDefaults(1, 0.9f);
				name = Name;
				damage = 6;
				defense = 0;
				life = 14;
				knockBackResist *= 1.2f;
				color = new Color(0, 220, 40, 100);
				value = 3f;
				netID = -3;
				flag = true;
				break;
			case "Pinky":
				SetDefaults(1, 0.6f);
				name = Name;
				damage = 5;
				defense = 5;
				life = 150;
				knockBackResist *= 1.4f;
				color = new Color(250, 30, 90, 90);
				value = 10000f;
				netID = -4;
				flag = true;
				rarity = 1;
				break;
			case "Baby Slime":
				SetDefaults(1, 0.9f);
				name = Name;
				damage = 13;
				defense = 4;
				life = 30;
				knockBackResist *= 0.95f;
				alpha = 120;
				color = new Color(0, 0, 0, 50);
				value = 10f;
				netID = -5;
				flag = true;
				break;
			case "Black Slime":
				SetDefaults(1, 1.05f);
				name = Name;
				damage = 15;
				defense = 4;
				life = 45;
				color = new Color(0, 0, 0, 50);
				value = 20f;
				netID = -6;
				flag = true;
				break;
			case "Purple Slime":
				SetDefaults(1, 1.2f);
				name = Name;
				damage = 12;
				defense = 6;
				life = 40;
				knockBackResist *= 0.9f;
				color = new Color(200, 0, 255, 150);
				value = 10f;
				netID = -7;
				flag = true;
				break;
			case "Red Slime":
				SetDefaults(1, 1.025f);
				name = Name;
				damage = 12;
				defense = 4;
				life = 35;
				color = new Color(255, 30, 0, 100);
				value = 8f;
				netID = -8;
				flag = true;
				break;
			case "Yellow Slime":
				SetDefaults(1, 1.2f);
				name = Name;
				damage = 15;
				defense = 7;
				life = 45;
				color = new Color(255, 255, 0, 100);
				value = 10f;
				netID = -9;
				flag = true;
				break;
			case "Jungle Slime":
				SetDefaults(1, 1.1f);
				name = Name;
				damage = 18;
				defense = 6;
				life = 60;
				color = new Color(143, 215, 93, 100);
				value = 500f;
				netID = -10;
				flag = true;
				break;
			case "Little Eater":
				SetDefaults(6, 0.85f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -11;
				break;
			case "Big Eater":
				SetDefaults(6, 1.15f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -12;
				break;
			case "Short Bones":
				SetDefaults(31, 0.9f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				netID = -13;
				break;
			case "Big Boned":
				SetDefaults(31, 1.15f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((double)((float)damage * scale) * 1.1);
				life = (int)((double)((float)life * scale) * 1.1);
				value = (int)(value * scale);
				npcSlots = 2f;
				knockBackResist *= 2f - scale;
				netID = -14;
				break;
			case "Heavy Skeleton":
				SetDefaults(77, 1.15f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((double)((float)damage * scale) * 1.1);
				life = 400;
				value = (int)(value * scale);
				npcSlots = 2f;
				knockBackResist *= 2f - scale;
				height = 44;
				netID = -15;
				break;
			case "Little Stinger":
				SetDefaults(42, 0.85f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -16;
				break;
			case "Big Stinger":
				SetDefaults(42, 1.2f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -17;
				break;
			case "Tiny Moss Hornet":
				SetDefaults(176, 0.8f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -18;
				break;
			case "Little Moss Hornet":
				SetDefaults(176, 0.9f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -19;
				break;
			case "Big Moss Hornet":
				SetDefaults(176, 1.1f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -20;
				break;
			case "Giant Moss Hornet":
				SetDefaults(176, 1.2f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -21;
				break;
			case "Little Crimera":
				SetDefaults(173, 0.85f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -22;
				break;
			case "Big Crimera":
				SetDefaults(173, 1.15f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -23;
				break;
			case "Little Crimslime":
				SetDefaults(183, 0.85f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -24;
				break;
			case "Big Crimslime":
				SetDefaults(183, 1.15f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -25;
				break;
			case "Small Zombie":
				SetDefaults(3, 0.9f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -26;
				break;
			case "Big Zombie":
				SetDefaults(3, 1.1f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -27;
				break;
			case "Small Bald Zombie":
				SetDefaults(132, 0.85f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -28;
				break;
			case "Big Bald Zombie":
				SetDefaults(132, 1.15f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -29;
				break;
			case "Small Pincushion Zombie":
				SetDefaults(186, 0.93f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -30;
				break;
			case "Big Pincushion Zombie":
				SetDefaults(186, 1.13f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -31;
				break;
			case "Small Slimed Zombie":
				SetDefaults(187, 0.89f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -32;
				break;
			case "Big Slimed Zombie":
				SetDefaults(187, 1.11f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -33;
				break;
			case "Small Swamp Zombie":
				SetDefaults(188, 0.87f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -34;
				break;
			case "Big Swamp Zombie":
				SetDefaults(188, 1.13f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -35;
				break;
			case "Small Twiggy Zombie":
				SetDefaults(189, 0.92f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -36;
				break;
			case "Big Twiggy Zombie":
				SetDefaults(189, 1.08f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -37;
				break;
			case "Cataract Eye 2":
				SetDefaults(190, 1.15f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -38;
				break;
			case "Sleepy Eye 2":
				SetDefaults(191, 1.1f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -39;
				break;
			case "Dialated Eye 2":
				SetDefaults(192, 0.9f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -40;
				break;
			case "Green Eye 2":
				SetDefaults(193, 0.85f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -41;
				break;
			case "Purple Eye 2":
				SetDefaults(194, 1.1f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -42;
				break;
			case "Demon Eye 2":
				SetDefaults(2, 1.15f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -43;
				break;
			case "Small Female Zombie":
				SetDefaults(200, 0.87f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -44;
				break;
			case "Big Female Zombie":
				SetDefaults(200, 1.05f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -45;
				break;
			case "Small Skeleton":
				SetDefaults(21, 0.9f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -46;
				break;
			case "Big Skeleton":
				SetDefaults(21, 1.1f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -47;
				break;
			case "Small Headache Skeleton":
				SetDefaults(201, 0.93f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -48;
				break;
			case "Big Headache Skeleton":
				SetDefaults(201, 1.07f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -49;
				break;
			case "Small Misassembled Skeleton":
				SetDefaults(202, 0.87f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -50;
				break;
			case "Big Misassembled Skeleton":
				SetDefaults(202, 1.13f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -51;
				break;
			case "Small Pantless Skeleton":
				SetDefaults(203, 0.85f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -52;
				break;
			case "Big Pantless Skeleton":
				SetDefaults(203, 1.15f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -53;
				break;
			case "Small Rain Zombie":
				SetDefaults(223, 0.9f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -54;
				break;
			case "Big Rain Zombie":
				SetDefaults(223, 1.1f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -55;
				break;
			case "Little Hornet Fatty":
				SetDefaults(231, 0.85f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -56;
				break;
			case "Big Hornet Fatty":
				SetDefaults(231, 1.25f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -57;
				break;
			case "Little Hornet Honey":
				SetDefaults(232, 0.8f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -58;
				break;
			case "Big Hornet Honey":
				SetDefaults(232, 1.15f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -59;
				break;
			case "Little Hornet Leafy":
				SetDefaults(233, 0.92f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -60;
				break;
			case "Big Hornet Leafy":
				SetDefaults(233, 1.1f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -61;
				break;
			case "Little Hornet Spikey":
				SetDefaults(234, 0.78f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -62;
				break;
			case "Big Hornet Spikey":
				SetDefaults(234, 1.16f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -63;
				break;
			case "Little Hornet Stingy":
				SetDefaults(235, 0.87f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -64;
				break;
			case "Big Hornet Stingy":
				SetDefaults(235, 1.21f);
				name = Name;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				netID = -65;
				break;
			default:
				if (Name != "")
				{
					for (int i = 1; i < 540; i++)
					{
						if (Main.npcName[i] == Name)
						{
							SetDefaults(i);
							return;
						}
					}
					SetDefaults(0);
					active = false;
				}
				else
				{
					active = false;
				}
				break;
			}
			lifeMax = life;
			defDamage = damage;
			defDefense = defense;
			if (Main.expertMode && flag)
			{
				scaleStats();
			}
		}

		public void SetDefaultsKeepPlayerInteraction(int Type)
		{
			bool[] array = new bool[playerInteraction.Length];
			for (int i = 0; i < playerInteraction.Length; i++)
			{
				array[i] = playerInteraction[i];
			}
			SetDefaults(Type);
			for (int j = 0; j < playerInteraction.Length; j++)
			{
				playerInteraction[j] = array[j];
			}
		}

		public void SetDefaults(int Type, float scaleOverride = -1f)
		{
			takenDamageMultiplier = 1f;
			extraValue = 0f;
			for (int i = 0; i < playerInteraction.Length; i++)
			{
				playerInteraction[i] = false;
			}
			rarity = 0;
			dontCountMe = false;
			releaseOwner = 255;
			catchItem = 0;
			npcNameLookup = 0;
			netStream = 32;
			bool flag = false;
			netID = 0;
			netAlways = false;
			netSpam = 0;
			int num = 10;
			if (Type >= 0)
			{
				num = NPCID.Sets.TrailCacheLength[Type];
			}
			if (num != oldPos.Length)
			{
				Array.Resize(ref oldPos, num);
				Array.Resize(ref oldRot, num);
			}
			for (int j = 0; j < oldPos.Length; j++)
			{
				oldRot[j] = 0f;
				oldPos[j].X = 0f;
				oldPos[j].Y = 0f;
			}
			for (int k = 0; k < 5; k++)
			{
				buffTime[k] = 0;
				buffType[k] = 0;
			}
			for (int l = 0; l < 191; l++)
			{
				buffImmune[l] = false;
			}
			setFrameSize = false;
			buffImmune[31] = true;
			netSkip = -2;
			realLife = -1;
			lifeRegen = 0;
			lifeRegenCount = 0;
			poisoned = false;
			soulDrain = false;
			venom = false;
			shadowFlame = false;
			onFire = false;
			midas = false;
			ichor = false;
			onFrostBurn = false;
			confused = false;
			loveStruck = false;
			stinky = false;
			dryadWard = false;
			onFire2 = false;
			justHit = false;
			dontTakeDamage = false;
			npcSlots = 1f;
			lavaImmune = false;
			lavaWet = false;
			wetCount = 0;
			wet = false;
			townNPC = false;
			homeless = false;
			homeTileX = -1;
			homeTileY = -1;
			friendly = false;
			behindTiles = false;
			boss = false;
			noTileCollide = false;
			rotation = 0f;
			active = true;
			alpha = 0;
			color = default(Color);
			collideX = false;
			collideY = false;
			direction = 0;
			oldDirection = direction;
			frameCounter = 0.0;
			netUpdate = true;
			netUpdate2 = false;
			knockBackResist = 1f;
			GivenName = "";
			name = "";
			noGravity = false;
			scale = 1f;
			soundHit = 0;
			soundKilled = 0;
			spriteDirection = -1;
			target = 16;
			oldTarget = target;
			targetRect = default(Rectangle);
			timeLeft = activeTime;
			type = Type;
			value = 0f;
			coldDamage = false;
			trapImmune = false;
			hide = false;
			immortal = false;
			chaseable = true;
			breath = 200;
			breathCounter = 0;
			reflectingProjectiles = false;
			canGhostHeal = true;
			javelined = false;
			daybreak = false;
			celled = false;
			dryadBane = false;
			for (int m = 0; m < maxAI; m++)
			{
				ai[m] = 0f;
			}
			for (int n = 0; n < maxAI; n++)
			{
				localAI[n] = 0f;
			}
			if (type == 1)
			{
				name = "Blue Slime";
				width = 24;
				height = 18;
				aiStyle = 1;
				damage = 7;
				defense = 2;
				lifeMax = 25;
				soundHit = 1;
				soundKilled = 1;
				alpha = 175;
				color = new Color(0, 80, 255, 100);
				value = 25f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 2)
			{
				name = "Demon Eye";
				width = 30;
				height = 32;
				aiStyle = 2;
				damage = 18;
				defense = 2;
				lifeMax = 60;
				soundHit = 1;
				knockBackResist = 0.8f;
				soundKilled = 1;
				value = 75f;
				buffImmune[31] = false;
			}
			else if (type == 3)
			{
				name = "Zombie";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 14;
				defense = 6;
				lifeMax = 45;
				soundHit = 1;
				soundKilled = 2;
				knockBackResist = 0.5f;
				value = 60f;
				buffImmune[31] = false;
			}
			else if (type == 430)
			{
				name = "Zombie";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 14;
				defense = 6;
				lifeMax = 45;
				soundHit = 1;
				soundKilled = 2;
				knockBackResist = 0.5f;
				value = 60f;
				buffImmune[31] = false;
			}
			else if (type == 431)
			{
				name = "Zombie Eskimo";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 16;
				defense = 8;
				lifeMax = 50;
				soundHit = 1;
				soundKilled = 2;
				knockBackResist = 0.45f;
				value = 80f;
				buffImmune[31] = false;
			}
			else if (type == 432)
			{
				name = "Pincushion Zombie";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 16;
				defense = 8;
				lifeMax = 50;
				soundHit = 1;
				soundKilled = 2;
				knockBackResist = 0.45f;
				value = 65f;
				buffImmune[31] = false;
			}
			else if (type == 433)
			{
				name = "Slimed Zombie";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 13;
				defense = 6;
				lifeMax = 40;
				soundHit = 1;
				soundKilled = 2;
				knockBackResist = 0.55f;
				value = 55f;
				buffImmune[31] = false;
			}
			else if (type == 434)
			{
				name = "Swamp Zombie";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 13;
				defense = 8;
				lifeMax = 45;
				soundHit = 1;
				soundKilled = 2;
				knockBackResist = 0.45f;
				value = 80f;
				buffImmune[31] = false;
			}
			else if (type == 435)
			{
				name = "Twiggy Zombie";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 16;
				defense = 4;
				lifeMax = 45;
				soundHit = 1;
				soundKilled = 2;
				knockBackResist = 0.55f;
				value = 70f;
				buffImmune[31] = false;
			}
			else if (type == 436)
			{
				name = "Female Zombie";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 12;
				defense = 4;
				lifeMax = 38;
				soundHit = 1;
				soundKilled = 2;
				knockBackResist = 0.6f;
				value = 65f;
				buffImmune[31] = false;
			}
			else if (type == 4)
			{
				name = "Eye of Cthulhu";
				width = 100;
				height = 110;
				aiStyle = 4;
				damage = 15;
				defense = 12;
				lifeMax = 2800;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				timeLeft = activeTime * 30;
				boss = true;
				value = 30000f;
				npcSlots = 5f;
			}
			else if (type == 5)
			{
				name = "Servant of Cthulhu";
				width = 20;
				height = 20;
				aiStyle = 5;
				damage = 12;
				defense = 0;
				lifeMax = 8;
				soundHit = 1;
				soundKilled = 1;
				noGravity = true;
				noTileCollide = true;
			}
			else if (type == 6)
			{
				npcSlots = 1f;
				name = "Eater of Souls";
				width = 30;
				height = 30;
				aiStyle = 5;
				damage = 22;
				defense = 8;
				lifeMax = 40;
				soundHit = 1;
				soundKilled = 1;
				noGravity = true;
				knockBackResist = 0.5f;
				value = 90f;
			}
			else if (type == 7)
			{
				npcSlots = 3.5f;
				name = "Devourer Head";
				width = 22;
				height = 22;
				aiStyle = 6;
				damage = 31;
				defense = 2;
				lifeMax = 100;
				soundHit = 1;
				soundKilled = 1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 140f;
				netAlways = true;
			}
			else if (type == 8)
			{
				name = "Devourer Body";
				width = 22;
				height = 22;
				aiStyle = 6;
				netAlways = true;
				damage = 16;
				defense = 6;
				lifeMax = 100;
				soundHit = 1;
				soundKilled = 1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 140f;
				dontCountMe = true;
			}
			else if (type == 9)
			{
				name = "Devourer Tail";
				width = 22;
				height = 22;
				aiStyle = 6;
				netAlways = true;
				damage = 13;
				defense = 10;
				lifeMax = 100;
				soundHit = 1;
				soundKilled = 1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 140f;
				dontCountMe = true;
			}
			else if (type == 10)
			{
				name = "Giant Worm Head";
				width = 14;
				height = 14;
				aiStyle = 6;
				netAlways = true;
				damage = 8;
				defense = 0;
				lifeMax = 30;
				soundHit = 1;
				soundKilled = 1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 40f;
			}
			else if (type == 11)
			{
				name = "Giant Worm Body";
				width = 14;
				height = 14;
				aiStyle = 6;
				netAlways = true;
				damage = 4;
				defense = 4;
				lifeMax = 30;
				soundHit = 1;
				soundKilled = 1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 40f;
				dontCountMe = true;
			}
			else if (type == 12)
			{
				name = "Giant Worm Tail";
				width = 14;
				height = 14;
				aiStyle = 6;
				netAlways = true;
				damage = 4;
				defense = 6;
				lifeMax = 30;
				soundHit = 1;
				soundKilled = 1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 40f;
				dontCountMe = true;
			}
			else if (type == 13)
			{
				npcSlots = 5f;
				name = "Eater of Worlds Head";
				width = 38;
				height = 38;
				aiStyle = 6;
				netAlways = true;
				damage = 22;
				defense = 2;
				lifeMax = 65;
				soundHit = 1;
				soundKilled = 1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 300f;
				scale = 1f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
			}
			else if (type == 14)
			{
				name = "Eater of Worlds Body";
				width = 38;
				height = 38;
				aiStyle = 6;
				netAlways = true;
				damage = 13;
				defense = 4;
				lifeMax = 150;
				soundHit = 1;
				soundKilled = 1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 300f;
				scale = 1f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				dontCountMe = true;
			}
			else if (type == 15)
			{
				name = "Eater of Worlds Tail";
				width = 38;
				height = 38;
				aiStyle = 6;
				netAlways = true;
				damage = 11;
				defense = 8;
				lifeMax = 220;
				soundHit = 1;
				soundKilled = 1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 300f;
				scale = 1f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				dontCountMe = true;
			}
			else if (type == 16)
			{
				npcSlots = 2f;
				name = "Mother Slime";
				width = 36;
				height = 24;
				aiStyle = 1;
				damage = 20;
				defense = 7;
				lifeMax = 90;
				soundHit = 1;
				soundKilled = 1;
				alpha = 120;
				color = new Color(0, 0, 0, 50);
				value = 75f;
				scale = 1.25f;
				knockBackResist = 0.6f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 17)
			{
				townNPC = true;
				friendly = true;
				name = "Merchant";
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.5f;
			}
			else if (type == 18)
			{
				townNPC = true;
				friendly = true;
				name = "Nurse";
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.5f;
			}
			else if (type == 19)
			{
				townNPC = true;
				friendly = true;
				name = "Arms Dealer";
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.5f;
			}
			else if (type == 20)
			{
				townNPC = true;
				friendly = true;
				name = "Dryad";
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.5f;
			}
			else if (type == 21)
			{
				name = "Skeleton";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 20;
				defense = 8;
				lifeMax = 60;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.5f;
				value = 100f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 22)
			{
				townNPC = true;
				friendly = true;
				name = "Guide";
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.5f;
			}
			else if (type == 23)
			{
				name = "Meteor Head";
				width = 22;
				height = 22;
				aiStyle = 5;
				damage = 40;
				defense = 6;
				lifeMax = 26;
				soundHit = 3;
				soundKilled = 3;
				noGravity = true;
				noTileCollide = true;
				value = 80f;
				knockBackResist = 0.4f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
			}
			else if (type == 24)
			{
				npcSlots = 3f;
				name = "Fire Imp";
				width = 18;
				height = 40;
				aiStyle = 8;
				damage = 30;
				defense = 16;
				lifeMax = 70;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.5f;
				lavaImmune = true;
				value = 350f;
				buffImmune[24] = true;
				buffImmune[39] = true;
			}
			else if (type == 25)
			{
				name = "Burning Sphere";
				width = 16;
				height = 16;
				aiStyle = 9;
				damage = 30;
				defense = 0;
				lifeMax = 1;
				soundHit = 3;
				soundKilled = 3;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				alpha = 100;
			}
			else if (type == 31)
			{
				name = "Angry Bones";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 26;
				defense = 8;
				lifeMax = 80;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.8f;
				value = 130f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 32)
			{
				name = "Dark Caster";
				width = 18;
				height = 40;
				aiStyle = 8;
				damage = 20;
				defense = 2;
				lifeMax = 50;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.6f;
				value = 140f;
				npcSlots = 2f;
				buffImmune[20] = true;
			}
			else if (type == 33)
			{
				name = "Water Sphere";
				width = 16;
				height = 16;
				aiStyle = 9;
				damage = 20;
				defense = 0;
				lifeMax = 1;
				soundHit = 3;
				soundKilled = 3;
				noGravity = true;
				noTileCollide = true;
				alpha = 255;
				knockBackResist = 0f;
			}
			else if (type == 34)
			{
				name = "Cursed Skull";
				width = 26;
				height = 28;
				aiStyle = 10;
				damage = 35;
				defense = 6;
				lifeMax = 40;
				soundHit = 2;
				soundKilled = 2;
				noGravity = true;
				noTileCollide = true;
				value = 150f;
				knockBackResist = 0.2f;
				npcSlots = 0.75f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
			}
			else if (type == 35)
			{
				name = "Skeletron Head";
				width = 80;
				height = 102;
				aiStyle = 11;
				damage = 32;
				defense = 10;
				lifeMax = 4400;
				soundHit = 2;
				soundKilled = 2;
				noGravity = true;
				noTileCollide = true;
				value = 50000f;
				knockBackResist = 0f;
				boss = true;
				npcSlots = 6f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				bool[] array = buffImmune;
				bool flag2;
				buffImmune[169] = (flag2 = (buffImmune[183] = true));
				array[189] = flag2;
			}
			else if (type == 36)
			{
				name = "Skeletron Hand";
				width = 52;
				height = 52;
				aiStyle = 12;
				damage = 20;
				defense = 14;
				lifeMax = 600;
				soundHit = 2;
				soundKilled = 2;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
			}
			else if (type == 37)
			{
				townNPC = true;
				friendly = true;
				name = "Old Man";
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.5f;
			}
			else if (type == 38)
			{
				townNPC = true;
				friendly = true;
				name = "Demolitionist";
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.5f;
			}
			else if (type == 39)
			{
				npcSlots = 6f;
				name = "Bone Serpent Head";
				width = 22;
				height = 22;
				aiStyle = 6;
				netAlways = true;
				damage = 30;
				defense = 10;
				lifeMax = 250;
				soundHit = 2;
				soundKilled = 5;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 1200f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
			}
			else if (type == 40)
			{
				name = "Bone Serpent Body";
				width = 22;
				height = 22;
				aiStyle = 6;
				netAlways = true;
				damage = 15;
				defense = 12;
				lifeMax = 250;
				soundHit = 2;
				soundKilled = 5;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 1200f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				dontCountMe = true;
			}
			else if (type == 41)
			{
				name = "Bone Serpent Tail";
				width = 22;
				height = 22;
				aiStyle = 6;
				netAlways = true;
				damage = 10;
				defense = 18;
				lifeMax = 250;
				soundHit = 2;
				soundKilled = 5;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 1200f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				dontCountMe = true;
			}
			else if (type == 42)
			{
				name = "Hornet";
				width = 34;
				height = 32;
				aiStyle = 5;
				damage = 26;
				defense = 12;
				lifeMax = 48;
				soundHit = 1;
				knockBackResist = 0.5f;
				soundKilled = 1;
				value = 200f;
				noGravity = true;
				buffImmune[20] = true;
			}
			else if (type == 43)
			{
				noGravity = true;
				noTileCollide = true;
				name = "Man Eater";
				width = 30;
				height = 30;
				aiStyle = 13;
				damage = 34;
				defense = 10;
				lifeMax = 110;
				soundHit = 1;
				knockBackResist = 0f;
				soundKilled = 1;
				value = 350f;
				buffImmune[20] = true;
			}
			else if (type == 44)
			{
				name = "Undead Miner";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 22;
				defense = 9;
				lifeMax = 70;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.5f;
				value = 250f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 45)
			{
				name = "Tim";
				width = 18;
				height = 40;
				aiStyle = 8;
				damage = 20;
				defense = 4;
				lifeMax = 200;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.6f;
				value = 5000f;
				buffImmune[20] = true;
				rarity = 4;
			}
			else if (type == 46 || type == 303 || type == 337)
			{
				name = "Bunny";
				width = 18;
				height = 20;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				soundHit = 1;
				soundKilled = 1;
				catchItem = 2019;
			}
			else if (type == 47)
			{
				name = "Corrupt Bunny";
				width = 18;
				height = 20;
				aiStyle = 3;
				damage = 20;
				defense = 4;
				lifeMax = 70;
				soundHit = 1;
				soundKilled = 1;
				value = 500f;
				buffImmune[31] = false;
			}
			else if (type == 48)
			{
				name = "Harpy";
				width = 24;
				height = 34;
				aiStyle = 14;
				damage = 25;
				defense = 8;
				lifeMax = 100;
				soundHit = 1;
				knockBackResist = 0.6f;
				soundKilled = 1;
				value = 300f;
			}
			else if (type == 49)
			{
				npcSlots = 0.5f;
				name = "Cave Bat";
				width = 22;
				height = 18;
				aiStyle = 14;
				damage = 13;
				defense = 2;
				lifeMax = 16;
				soundHit = 1;
				knockBackResist = 0.8f;
				soundKilled = 4;
				value = 90f;
				buffImmune[31] = false;
			}
			else if (type == 50)
			{
				boss = true;
				name = "King Slime";
				width = 98;
				height = 92;
				aiStyle = 15;
				damage = 40;
				defense = 10;
				lifeMax = 2000;
				knockBackResist = 0f;
				soundHit = 1;
				soundKilled = 1;
				alpha = 30;
				value = 10000f;
				scale = 1.25f;
				buffImmune[20] = true;
				timeLeft = activeTime * 30;
			}
			else if (type == 51)
			{
				npcSlots = 0.5f;
				name = "Jungle Bat";
				width = 22;
				height = 18;
				aiStyle = 14;
				damage = 20;
				defense = 4;
				lifeMax = 34;
				soundHit = 1;
				knockBackResist = 0.8f;
				soundKilled = 4;
				value = 80f;
				buffImmune[31] = false;
			}
			else if (type == 52)
			{
				name = "Doctor Bones";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 20;
				defense = 10;
				lifeMax = 500;
				soundHit = 1;
				soundKilled = 2;
				knockBackResist = 0.5f;
				value = 1000f;
				buffImmune[31] = false;
				rarity = 2;
			}
			else if (type == 53)
			{
				name = "The Groom";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 14;
				defense = 8;
				lifeMax = 200;
				soundHit = 1;
				soundKilled = 2;
				knockBackResist = 0.5f;
				value = 1000f;
				buffImmune[31] = false;
				rarity = 2;
			}
			else if (type == 54)
			{
				townNPC = true;
				friendly = true;
				name = "Clothier";
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.5f;
			}
			else if (type == 55)
			{
				noGravity = true;
				name = "Goldfish";
				width = 20;
				height = 18;
				aiStyle = 16;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.5f;
				catchItem = 261;
			}
			else if (type == 56)
			{
				noTileCollide = true;
				noGravity = true;
				name = "Snatcher";
				width = 30;
				height = 30;
				aiStyle = 13;
				damage = 25;
				defense = 10;
				lifeMax = 60;
				soundHit = 1;
				knockBackResist = 0f;
				soundKilled = 1;
				value = 90f;
				buffImmune[20] = true;
			}
			else if (type == 57)
			{
				noGravity = true;
				name = "Corrupt Goldfish";
				width = 18;
				height = 20;
				aiStyle = 16;
				damage = 30;
				defense = 6;
				lifeMax = 100;
				soundHit = 1;
				soundKilled = 1;
				value = 500f;
			}
			else if (type == 58)
			{
				npcSlots = 0.5f;
				noGravity = true;
				name = "Piranha";
				width = 18;
				height = 20;
				aiStyle = 16;
				damage = 25;
				defense = 2;
				lifeMax = 30;
				soundHit = 1;
				soundKilled = 1;
				value = 50f;
			}
			else if (type == 59)
			{
				name = "Lava Slime";
				width = 24;
				height = 18;
				aiStyle = 1;
				damage = 15;
				defense = 10;
				lifeMax = 50;
				soundHit = 1;
				soundKilled = 1;
				scale = 1.1f;
				alpha = 50;
				lavaImmune = true;
				value = 120f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				buffImmune[31] = false;
			}
			else if (type == 60)
			{
				npcSlots = 0.5f;
				name = "Hellbat";
				width = 22;
				height = 18;
				aiStyle = 14;
				damage = 35;
				defense = 8;
				lifeMax = 46;
				soundHit = 1;
				knockBackResist = 0.8f;
				soundKilled = 4;
				value = 120f;
				scale = 1.1f;
				lavaImmune = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				buffImmune[31] = false;
			}
			else if (type == 61)
			{
				name = "Vulture";
				width = 36;
				height = 36;
				aiStyle = 17;
				damage = 15;
				defense = 4;
				lifeMax = 40;
				knockBackResist = 0.8f;
				soundHit = 28;
				soundKilled = 31;
				value = 60f;
			}
			else if (type == 62)
			{
				npcSlots = 2f;
				name = "Demon";
				width = 28;
				height = 48;
				aiStyle = 14;
				damage = 32;
				defense = 8;
				lifeMax = 120;
				soundHit = 21;
				knockBackResist = 0.8f;
				soundKilled = 24;
				value = 300f;
				lavaImmune = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
			}
			else if (type == 63)
			{
				noGravity = true;
				name = "Blue Jellyfish";
				width = 26;
				height = 26;
				aiStyle = 18;
				damage = 25;
				defense = 4;
				lifeMax = 34;
				soundHit = 25;
				soundKilled = 28;
				value = 100f;
				alpha = 20;
			}
			else if (type == 64)
			{
				noGravity = true;
				name = "Pink Jellyfish";
				width = 26;
				height = 26;
				aiStyle = 18;
				damage = 30;
				defense = 6;
				lifeMax = 70;
				soundHit = 25;
				soundKilled = 28;
				value = 100f;
				alpha = 20;
			}
			else if (type == 65)
			{
				noGravity = true;
				name = "Shark";
				width = 100;
				height = 24;
				aiStyle = 16;
				damage = 40;
				defense = 2;
				lifeMax = 300;
				soundHit = 1;
				soundKilled = 1;
				value = 400f;
				knockBackResist = 0.7f;
			}
			else if (type == 66)
			{
				npcSlots = 2f;
				name = "Voodoo Demon";
				width = 28;
				height = 48;
				aiStyle = 14;
				damage = 32;
				defense = 8;
				lifeMax = 140;
				soundHit = 1;
				knockBackResist = 0.8f;
				soundKilled = 1;
				value = 1000f;
				lavaImmune = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
			}
			else if (type == 67)
			{
				name = "Crab";
				width = 28;
				height = 20;
				aiStyle = 3;
				damage = 20;
				defense = 10;
				lifeMax = 40;
				soundHit = 1;
				soundKilled = 1;
				value = 60f;
			}
			else if (type == 68)
			{
				name = "Dungeon Guardian";
				width = 80;
				height = 102;
				aiStyle = 11;
				damage = 1000;
				defense = 9999;
				lifeMax = 9999;
				soundHit = 2;
				soundKilled = 2;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				bool[] array2 = buffImmune;
				bool flag3;
				buffImmune[169] = (flag3 = (buffImmune[183] = true));
				array2[189] = flag3;
			}
			else if (type == 69)
			{
				name = "Antlion";
				width = 24;
				height = 24;
				aiStyle = 19;
				damage = 10;
				defense = 6;
				lifeMax = 45;
				soundHit = 31;
				soundKilled = 34;
				knockBackResist = 0f;
				value = 60f;
				behindTiles = true;
			}
			else if (type == 70)
			{
				npcSlots = 0.3f;
				name = "Spike Ball";
				width = 34;
				height = 34;
				aiStyle = 20;
				damage = 32;
				defense = 100;
				lifeMax = 100;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				dontTakeDamage = true;
				scale = 1.5f;
			}
			else if (type == 71)
			{
				npcSlots = 2f;
				name = "Dungeon Slime";
				width = 36;
				height = 24;
				aiStyle = 1;
				damage = 30;
				defense = 7;
				lifeMax = 150;
				soundHit = 1;
				soundKilled = 1;
				alpha = 60;
				value = 150f;
				scale = 1.25f;
				knockBackResist = 0.6f;
				buffImmune[20] = true;
				buffImmune[31] = false;
				rarity = 1;
			}
			else if (type == 72)
			{
				npcSlots = 0.3f;
				name = "Blazing Wheel";
				width = 34;
				height = 34;
				aiStyle = 21;
				damage = 24;
				defense = 100;
				lifeMax = 100;
				alpha = 100;
				behindTiles = true;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0f;
				noGravity = true;
				dontTakeDamage = true;
				scale = 1.2f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
			}
			else if (type == 73)
			{
				name = "Goblin Scout";
				scale = 0.95f;
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 20;
				defense = 6;
				lifeMax = 80;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.7f;
				value = 200f;
				buffImmune[31] = false;
				rarity = 1;
			}
			else if (type == 74 || type == 297 || type == 298)
			{
				name = "Bird";
				width = 14;
				height = 14;
				aiStyle = 24;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				soundHit = 1;
				knockBackResist = 0.8f;
				soundKilled = 1;
				if (type == 74)
				{
					catchItem = 2015;
				}
				if (type == 297)
				{
					catchItem = 2016;
				}
				if (type == 298)
				{
					catchItem = 2017;
				}
				npcSlots = 0.4f;
			}
			else if (type == 75)
			{
				noGravity = true;
				name = "Pixie";
				width = 20;
				height = 20;
				aiStyle = 22;
				damage = 55;
				defense = 20;
				lifeMax = 150;
				soundHit = 5;
				knockBackResist = 0.6f;
				soundKilled = 7;
				value = 350f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				buffImmune[31] = false;
			}
			else if (type == 77)
			{
				name = "Armored Skeleton";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 40;
				defense = 28;
				lifeMax = 260;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.4f;
				value = 400f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 78)
			{
				name = "Mummy";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 50;
				defense = 16;
				lifeMax = 130;
				soundHit = 1;
				soundKilled = 6;
				knockBackResist = 0.6f;
				value = 600f;
				buffImmune[31] = false;
			}
			else if (type == 79)
			{
				name = "Dark Mummy";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 60;
				defense = 18;
				lifeMax = 180;
				soundHit = 1;
				soundKilled = 6;
				knockBackResist = 0.5f;
				value = 700f;
				buffImmune[31] = false;
			}
			else if (type == 80)
			{
				name = "Light Mummy";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 55;
				defense = 18;
				lifeMax = 200;
				soundHit = 1;
				soundKilled = 6;
				knockBackResist = 0.55f;
				value = 700f;
				buffImmune[31] = false;
			}
			else if (type == 81)
			{
				name = "Corrupt Slime";
				width = 40;
				height = 30;
				aiStyle = 1;
				damage = 55;
				defense = 20;
				lifeMax = 170;
				soundHit = 1;
				soundKilled = 1;
				alpha = 55;
				value = 400f;
				scale = 1.1f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 82)
			{
				noGravity = true;
				noTileCollide = true;
				name = "Wraith";
				width = 24;
				height = 44;
				aiStyle = 22;
				damage = 65;
				defense = 16;
				lifeMax = 160;
				soundHit = 54;
				soundKilled = 52;
				alpha = 100;
				value = 500f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				knockBackResist = 0.7f;
			}
			else if (type == 83)
			{
				name = "Cursed Hammer";
				width = 40;
				height = 40;
				aiStyle = 23;
				damage = 80;
				defense = 18;
				lifeMax = 200;
				soundHit = 4;
				soundKilled = 6;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				knockBackResist = 0.4f;
			}
			else if (type == 84)
			{
				name = "Enchanted Sword";
				width = 40;
				height = 40;
				aiStyle = 23;
				damage = 80;
				defense = 18;
				lifeMax = 200;
				soundHit = 4;
				soundKilled = 6;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				knockBackResist = 0.4f;
			}
			else if (type == 85)
			{
				name = "Mimic";
				width = 24;
				height = 24;
				aiStyle = 25;
				damage = 80;
				defense = 30;
				lifeMax = 500;
				soundHit = 4;
				soundKilled = 6;
				value = 100000f;
				knockBackResist = 0.3f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				rarity = 4;
			}
			else if (type == 86)
			{
				name = "Unicorn";
				width = 46;
				height = 42;
				aiStyle = 26;
				damage = 65;
				defense = 30;
				lifeMax = 400;
				soundHit = 12;
				soundKilled = 18;
				knockBackResist = 0.3f;
				value = 1000f;
				buffImmune[31] = false;
			}
			else if (type == 87)
			{
				noTileCollide = true;
				npcSlots = 5f;
				name = "Wyvern Head";
				width = 32;
				height = 32;
				aiStyle = 6;
				netAlways = true;
				damage = 80;
				defense = 10;
				lifeMax = 4000;
				soundHit = 7;
				soundKilled = 8;
				noGravity = true;
				knockBackResist = 0f;
				value = 10000f;
				scale = 1f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
			}
			else if (type == 88)
			{
				noTileCollide = true;
				name = "Wyvern Legs";
				width = 32;
				height = 32;
				aiStyle = 6;
				netAlways = true;
				damage = 40;
				defense = 20;
				lifeMax = 4000;
				soundHit = 7;
				soundKilled = 8;
				noGravity = true;
				knockBackResist = 0f;
				value = 10000f;
				scale = 1f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				dontCountMe = true;
			}
			else if (type == 89)
			{
				noTileCollide = true;
				name = "Wyvern Body";
				width = 32;
				height = 32;
				aiStyle = 6;
				netAlways = true;
				damage = 40;
				defense = 20;
				lifeMax = 4000;
				soundHit = 7;
				soundKilled = 8;
				noGravity = true;
				knockBackResist = 0f;
				value = 2000f;
				scale = 1f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				dontCountMe = true;
			}
			else if (type == 90)
			{
				noTileCollide = true;
				name = "Wyvern Body 2";
				width = 32;
				height = 32;
				aiStyle = 6;
				netAlways = true;
				damage = 40;
				defense = 20;
				lifeMax = 4000;
				soundHit = 7;
				soundKilled = 8;
				noGravity = true;
				knockBackResist = 0f;
				value = 10000f;
				scale = 1f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				dontCountMe = true;
			}
			else if (type == 91)
			{
				noTileCollide = true;
				name = "Wyvern Body 3";
				width = 32;
				height = 32;
				aiStyle = 6;
				netAlways = true;
				damage = 40;
				defense = 20;
				lifeMax = 4000;
				soundHit = 7;
				soundKilled = 8;
				noGravity = true;
				knockBackResist = 0f;
				value = 10000f;
				scale = 1f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				dontCountMe = true;
			}
			else if (type == 92)
			{
				noTileCollide = true;
				name = "Wyvern Tail";
				width = 32;
				height = 32;
				aiStyle = 6;
				netAlways = true;
				damage = 40;
				defense = 20;
				lifeMax = 4000;
				soundHit = 7;
				soundKilled = 8;
				noGravity = true;
				knockBackResist = 0f;
				value = 10000f;
				scale = 1f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				dontCountMe = true;
			}
			else if (type == 93)
			{
				npcSlots = 0.5f;
				name = "Giant Bat";
				width = 26;
				height = 20;
				aiStyle = 14;
				damage = 45;
				defense = 16;
				lifeMax = 100;
				soundHit = 1;
				knockBackResist = 0.75f;
				soundKilled = 4;
				value = 400f;
				buffImmune[31] = false;
			}
			else if (type == 94)
			{
				npcSlots = 1f;
				name = "Corruptor";
				width = 44;
				height = 44;
				aiStyle = 5;
				damage = 60;
				defense = 32;
				lifeMax = 230;
				soundHit = 1;
				soundKilled = 1;
				noGravity = true;
				knockBackResist = 0.55f;
				value = 500f;
			}
			else if (type == 95)
			{
				name = "Digger Head";
				width = 22;
				height = 22;
				aiStyle = 6;
				netAlways = true;
				damage = 45;
				defense = 10;
				lifeMax = 200;
				soundHit = 1;
				soundKilled = 1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				scale = 0.9f;
				value = 300f;
			}
			else if (type == 96)
			{
				name = "Digger Body";
				width = 22;
				height = 22;
				aiStyle = 6;
				netAlways = true;
				damage = 28;
				defense = 20;
				lifeMax = 200;
				soundHit = 1;
				soundKilled = 1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				scale = 0.9f;
				value = 300f;
				dontCountMe = true;
			}
			else if (type == 97)
			{
				name = "Digger Tail";
				width = 22;
				height = 22;
				aiStyle = 6;
				netAlways = true;
				damage = 26;
				defense = 30;
				lifeMax = 200;
				soundHit = 1;
				soundKilled = 1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				scale = 0.9f;
				value = 300f;
				dontCountMe = true;
			}
			else if (type == 98)
			{
				npcSlots = 3.5f;
				name = "Seeker Head";
				width = 22;
				height = 22;
				aiStyle = 6;
				netAlways = true;
				damage = 70;
				defense = 36;
				lifeMax = 500;
				soundHit = 1;
				soundKilled = 1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 700f;
			}
			else if (type == 99)
			{
				name = "Seeker Body";
				width = 22;
				height = 22;
				aiStyle = 6;
				netAlways = true;
				damage = 55;
				defense = 40;
				lifeMax = 500;
				soundHit = 1;
				soundKilled = 1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 700f;
				dontCountMe = true;
			}
			else if (type == 100)
			{
				name = "Seeker Tail";
				width = 22;
				height = 22;
				aiStyle = 6;
				netAlways = true;
				damage = 40;
				defense = 44;
				lifeMax = 500;
				soundHit = 1;
				soundKilled = 1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 700f;
				dontCountMe = true;
			}
			else if (type == 101)
			{
				noGravity = true;
				noTileCollide = true;
				behindTiles = true;
				name = "Clinger";
				width = 30;
				height = 30;
				aiStyle = 13;
				damage = 70;
				defense = 30;
				lifeMax = 320;
				soundHit = 1;
				knockBackResist = 0.2f;
				soundKilled = 1;
				value = 600f;
			}
			else if (type == 102)
			{
				npcSlots = 0.5f;
				noGravity = true;
				name = "Angler Fish";
				width = 18;
				height = 20;
				aiStyle = 16;
				damage = 80;
				defense = 22;
				lifeMax = 90;
				soundHit = 1;
				soundKilled = 1;
				value = 500f;
			}
			else if (type == 103)
			{
				noGravity = true;
				name = "Green Jellyfish";
				width = 26;
				height = 26;
				aiStyle = 18;
				damage = 80;
				defense = 30;
				lifeMax = 120;
				soundHit = 25;
				soundKilled = 28;
				value = 800f;
				alpha = 20;
			}
			else if (type == 104)
			{
				name = "Werewolf";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 70;
				defense = 38;
				lifeMax = 350;
				soundHit = 6;
				soundKilled = 1;
				knockBackResist = 0.4f;
				value = 1000f;
				buffImmune[31] = false;
			}
			else if (type == 105)
			{
				friendly = true;
				name = "Bound Goblin";
				width = 18;
				height = 34;
				aiStyle = 0;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.5f;
				scale = 0.9f;
				rarity = 1;
			}
			else if (type == 106)
			{
				friendly = true;
				name = "Bound Wizard";
				width = 18;
				height = 40;
				aiStyle = 0;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.5f;
				rarity = 1;
			}
			else if (type == 107)
			{
				townNPC = true;
				friendly = true;
				name = "Goblin Tinkerer";
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.5f;
			}
			else if (type == 108)
			{
				townNPC = true;
				friendly = true;
				name = "Wizard";
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.5f;
			}
			else if (type == 109)
			{
				name = "Clown";
				width = 34;
				height = 78;
				aiStyle = 3;
				damage = 50;
				defense = 20;
				lifeMax = 400;
				soundHit = 1;
				soundKilled = 2;
				knockBackResist = 0.4f;
				value = 8000f;
			}
			else if (type == 110)
			{
				name = "Skeleton Archer";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 45;
				defense = 14;
				lifeMax = 210;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.55f;
				value = 400f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 112)
			{
				name = "Vile Spit";
				width = 16;
				height = 16;
				aiStyle = 9;
				damage = 65;
				defense = 0;
				lifeMax = 1;
				soundHit = 0;
				soundKilled = 9;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				scale = 0.9f;
				alpha = 80;
			}
			else if (type == 113)
			{
				npcSlots = 10f;
				name = "Wall of Flesh";
				width = 100;
				height = 100;
				aiStyle = 27;
				damage = 50;
				defense = 12;
				lifeMax = 8000;
				soundHit = 8;
				soundKilled = 10;
				noGravity = true;
				noTileCollide = true;
				behindTiles = true;
				knockBackResist = 0f;
				scale = 1.2f;
				boss = true;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				value = 80000f;
			}
			else if (type == 114)
			{
				name = "Wall of Flesh Eye";
				width = 100;
				height = 100;
				aiStyle = 28;
				damage = 50;
				defense = 0;
				lifeMax = 8000;
				soundHit = 8;
				soundKilled = 10;
				noGravity = true;
				noTileCollide = true;
				behindTiles = true;
				knockBackResist = 0f;
				scale = 1.2f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				value = 80000f;
			}
			else if (type == 115)
			{
				name = "The Hungry";
				width = 30;
				height = 30;
				aiStyle = 29;
				damage = 30;
				defense = 10;
				lifeMax = 240;
				soundHit = 9;
				soundKilled = 11;
				noGravity = true;
				behindTiles = true;
				noTileCollide = true;
				knockBackResist = 1.1f;
			}
			else if (type == 116)
			{
				name = "The Hungry II";
				width = 30;
				height = 32;
				aiStyle = 2;
				damage = 30;
				defense = 6;
				lifeMax = 80;
				soundHit = 9;
				knockBackResist = 0.8f;
				soundKilled = 12;
			}
			else if (type == 117)
			{
				name = "Leech Head";
				width = 14;
				height = 14;
				aiStyle = 6;
				netAlways = true;
				damage = 26;
				defense = 2;
				lifeMax = 60;
				soundHit = 9;
				soundKilled = 12;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
			}
			else if (type == 118)
			{
				name = "Leech Body";
				width = 14;
				height = 14;
				aiStyle = 6;
				netAlways = true;
				damage = 22;
				defense = 6;
				lifeMax = 60;
				soundHit = 9;
				soundKilled = 12;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
			}
			else if (type == 119)
			{
				name = "Leech Tail";
				width = 14;
				height = 14;
				aiStyle = 6;
				netAlways = true;
				damage = 18;
				defense = 10;
				lifeMax = 60;
				soundHit = 9;
				soundKilled = 12;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
			}
			else if (type == 120)
			{
				name = "Chaos Elemental";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 40;
				defense = 30;
				lifeMax = 370;
				soundHit = 1;
				soundKilled = 6;
				knockBackResist = 0.4f;
				value = 600f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				buffImmune[31] = false;
			}
			else if (type == 121)
			{
				name = "Slimer";
				width = 40;
				height = 30;
				aiStyle = 14;
				damage = 45;
				defense = 20;
				lifeMax = 60;
				soundHit = 1;
				alpha = 55;
				knockBackResist = 0.8f;
				scale = 1.1f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 122)
			{
				noGravity = true;
				name = "Gastropod";
				width = 20;
				height = 20;
				aiStyle = 22;
				damage = 60;
				defense = 22;
				lifeMax = 220;
				soundHit = 1;
				knockBackResist = 0.8f;
				soundKilled = 1;
				value = 600f;
				buffImmune[20] = true;
			}
			else if (type == 123)
			{
				friendly = true;
				name = "Bound Mechanic";
				width = 18;
				height = 34;
				aiStyle = 0;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.5f;
				scale = 0.9f;
				rarity = 1;
			}
			else if (type == 124)
			{
				townNPC = true;
				friendly = true;
				name = "Mechanic";
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.5f;
			}
			else if (type == 125)
			{
				name = "Retinazer";
				width = 100;
				height = 110;
				aiStyle = 30;
				defense = 10;
				damage = 45;
				lifeMax = 20000;
				soundHit = 1;
				soundKilled = 14;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				timeLeft = activeTime * 30;
				boss = true;
				value = 120000f;
				npcSlots = 5f;
			}
			else if (type == 126)
			{
				name = "Spazmatism";
				width = 100;
				height = 110;
				aiStyle = 31;
				defense = 10;
				damage = 50;
				lifeMax = 23000;
				soundHit = 1;
				soundKilled = 14;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				timeLeft = activeTime * 30;
				boss = true;
				value = 120000f;
				npcSlots = 5f;
			}
			else if (type == 127)
			{
				name = "Skeletron Prime";
				width = 80;
				height = 102;
				aiStyle = 32;
				damage = 47;
				defense = 24;
				lifeMax = 28000;
				soundHit = 4;
				soundKilled = 14;
				noGravity = true;
				noTileCollide = true;
				value = 120000f;
				knockBackResist = 0f;
				boss = true;
				npcSlots = 6f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				bool[] array3 = buffImmune;
				bool flag4;
				buffImmune[169] = (flag4 = (buffImmune[183] = true));
				array3[189] = flag4;
				boss = true;
			}
			else if (type == 128)
			{
				name = "Prime Cannon";
				width = 52;
				height = 52;
				aiStyle = 35;
				damage = 30;
				defense = 23;
				lifeMax = 7000;
				soundHit = 4;
				soundKilled = 14;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				netAlways = true;
			}
			else if (type == 129)
			{
				name = "Prime Saw";
				width = 52;
				height = 52;
				aiStyle = 33;
				damage = 56;
				defense = 38;
				lifeMax = 9000;
				soundHit = 4;
				soundKilled = 14;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				netAlways = true;
			}
			else if (type == 130)
			{
				name = "Prime Vice";
				width = 52;
				height = 52;
				aiStyle = 34;
				damage = 52;
				defense = 34;
				lifeMax = 9000;
				soundHit = 4;
				soundKilled = 14;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				netAlways = true;
			}
			else if (type == 131)
			{
				name = "Prime Laser";
				width = 52;
				height = 52;
				aiStyle = 36;
				damage = 29;
				defense = 20;
				lifeMax = 6000;
				soundHit = 4;
				soundKilled = 14;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				netAlways = true;
			}
			else if (type == 132)
			{
				name = "Bald Zombie";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 15;
				defense = 5;
				lifeMax = 40;
				soundHit = 1;
				soundKilled = 2;
				knockBackResist = 0.5f;
				value = 65f;
				buffImmune[31] = false;
			}
			else if (type == 133)
			{
				name = "Wandering Eye";
				width = 30;
				height = 32;
				aiStyle = 2;
				damage = 40;
				defense = 20;
				lifeMax = 300;
				soundHit = 1;
				knockBackResist = 0.8f;
				soundKilled = 1;
				value = 500f;
				buffImmune[31] = false;
			}
			else if (type == 134)
			{
				npcSlots = 5f;
				name = "The Destroyer";
				width = 38;
				height = 38;
				aiStyle = 37;
				defense = 0;
				damage = 70;
				lifeMax = 80000;
				soundHit = 4;
				soundKilled = 14;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 120000f;
				scale = 1.25f;
				boss = true;
				netAlways = true;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				flag = true;
				alpha = 255;
			}
			else if (type == 135)
			{
				npcSlots = 5f;
				name = "The Destroyer Body";
				width = 38;
				height = 38;
				aiStyle = 37;
				damage = 55;
				defense = 30;
				lifeMax = 80000;
				soundHit = 4;
				soundKilled = 14;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				netAlways = true;
				scale = 1.25f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				flag = true;
				dontCountMe = true;
				alpha = 255;
			}
			else if (type == 136)
			{
				npcSlots = 5f;
				name = "The Destroyer Tail";
				width = 38;
				height = 38;
				aiStyle = 37;
				damage = 40;
				defense = 35;
				lifeMax = 80000;
				soundHit = 4;
				soundKilled = 14;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				scale = 1.25f;
				netAlways = true;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				flag = true;
				dontCountMe = true;
				alpha = 255;
			}
			else if (type == 139)
			{
				npcSlots = 1f;
				name = "Probe";
				width = 30;
				height = 30;
				aiStyle = 5;
				damage = 50;
				defense = 20;
				lifeMax = 200;
				soundHit = 4;
				soundKilled = 14;
				noGravity = true;
				knockBackResist = 0.8f;
				noTileCollide = true;
				flag = true;
			}
			else if (type == 137)
			{
				name = "Illuminant Bat";
				width = 26;
				height = 20;
				aiStyle = 14;
				damage = 75;
				defense = 30;
				lifeMax = 200;
				soundHit = 1;
				knockBackResist = 0.75f;
				soundKilled = 6;
				value = 500f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				buffImmune[31] = false;
			}
			else if (type == 138)
			{
				name = "Illuminant Slime";
				width = 24;
				height = 18;
				aiStyle = 1;
				damage = 70;
				defense = 30;
				lifeMax = 180;
				soundHit = 1;
				soundKilled = 6;
				alpha = 100;
				value = 400f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				knockBackResist = 0.85f;
				scale = 1.05f;
				buffImmune[31] = false;
			}
			else if (type == 140)
			{
				name = "Possessed Armor";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 55;
				defense = 28;
				lifeMax = 260;
				soundHit = 4;
				soundKilled = 6;
				knockBackResist = 0.4f;
				value = 400f;
				buffImmune[20] = true;
				buffImmune[31] = false;
				buffImmune[24] = true;
			}
			else if (type == 141)
			{
				name = "Toxic Sludge";
				width = 34;
				height = 28;
				aiStyle = 1;
				damage = 50;
				defense = 18;
				lifeMax = 150;
				soundHit = 1;
				soundKilled = 1;
				alpha = 55;
				value = 400f;
				scale = 1.1f;
				buffImmune[20] = true;
				buffImmune[31] = false;
				knockBackResist = 0.8f;
			}
			else if (type == 142)
			{
				townNPC = true;
				friendly = true;
				name = "Santa Claus";
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.5f;
			}
			else if (type == 143)
			{
				name = "Snowman Gangsta";
				width = 26;
				height = 40;
				aiStyle = 38;
				damage = 50;
				defense = 20;
				lifeMax = 200;
				soundHit = 11;
				soundKilled = 15;
				knockBackResist = 0.6f;
				value = 400f;
				buffImmune[20] = true;
				buffImmune[31] = false;
				buffImmune[24] = true;
				buffImmune[39] = true;
			}
			else if (type == 144)
			{
				name = "Mister Stabby";
				width = 26;
				height = 40;
				aiStyle = 38;
				damage = 65;
				defense = 26;
				lifeMax = 240;
				soundHit = 11;
				soundKilled = 15;
				knockBackResist = 0.6f;
				value = 400f;
				buffImmune[20] = true;
				buffImmune[31] = false;
				buffImmune[24] = true;
				buffImmune[39] = true;
				coldDamage = true;
			}
			else if (type == 145)
			{
				name = "Snow Balla";
				width = 26;
				height = 40;
				aiStyle = 38;
				damage = 55;
				defense = 22;
				lifeMax = 220;
				soundHit = 11;
				soundKilled = 15;
				knockBackResist = 0.6f;
				value = 400f;
				buffImmune[20] = true;
				buffImmune[31] = false;
				buffImmune[24] = true;
				buffImmune[39] = true;
				coldDamage = true;
			}
			else if (type == 147)
			{
				name = "Ice Slime";
				width = 24;
				height = 18;
				aiStyle = 1;
				damage = 8;
				defense = 4;
				lifeMax = 30;
				soundHit = 1;
				soundKilled = 1;
				alpha = 50;
				value = 50f;
				buffImmune[20] = true;
				buffImmune[31] = false;
				coldDamage = true;
			}
			else if (type == 148)
			{
				name = "Penguin";
				width = 16;
				height = 34;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				soundHit = 1;
				soundKilled = 1;
				catchItem = 2205;
			}
			else if (type == 149)
			{
				name = "Penguin";
				width = 16;
				height = 34;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				soundHit = 1;
				soundKilled = 1;
				catchItem = 2205;
			}
			else if (type == 150)
			{
				npcSlots = 0.5f;
				name = "Ice Bat";
				width = 22;
				height = 22;
				aiStyle = 14;
				damage = 18;
				defense = 6;
				lifeMax = 30;
				soundHit = 1;
				knockBackResist = 0.8f;
				soundKilled = 4;
				value = 250f;
				buffImmune[31] = false;
			}
			else if (type == 151)
			{
				npcSlots = 0.5f;
				name = "Lava bat";
				width = 22;
				height = 22;
				aiStyle = 14;
				damage = 50;
				defense = 16;
				lifeMax = 160;
				soundHit = 1;
				knockBackResist = 0.6f;
				soundKilled = 4;
				value = 400f;
				scale = 1.15f;
				lavaImmune = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				buffImmune[31] = false;
			}
			else if (type == 152)
			{
				npcSlots = 0.5f;
				name = "Giant Flying Fox";
				width = 38;
				height = 34;
				aiStyle = 14;
				damage = 80;
				defense = 24;
				lifeMax = 220;
				soundHit = 1;
				knockBackResist = 0.65f;
				soundKilled = 4;
				value = 400f;
				buffImmune[31] = false;
			}
			else if (type == 153)
			{
				npcSlots = 2f;
				name = "Giant Tortoise";
				width = 46;
				height = 32;
				aiStyle = 39;
				damage = 80;
				defense = 30;
				lifeMax = 470;
				soundHit = 24;
				knockBackResist = 0.3f;
				soundKilled = 27;
				value = 500f;
				noGravity = false;
				buffImmune[31] = false;
			}
			else if (type == 154)
			{
				npcSlots = 1.5f;
				name = "Ice Tortoise";
				width = 46;
				height = 32;
				aiStyle = 39;
				damage = 55;
				defense = 28;
				lifeMax = 400;
				soundHit = 24;
				knockBackResist = 0.3f;
				soundKilled = 27;
				value = 450f;
				noGravity = false;
				buffImmune[31] = false;
			}
			else if (type == 155)
			{
				name = "Wolf";
				width = 46;
				height = 30;
				aiStyle = 26;
				damage = 65;
				defense = 30;
				lifeMax = 300;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.3f;
				value = 1000f;
				buffImmune[31] = false;
			}
			else if (type == 156)
			{
				npcSlots = 2f;
				name = "Red Devil";
				width = 28;
				height = 48;
				aiStyle = 14;
				damage = 50;
				defense = 40;
				lifeMax = 600;
				soundHit = 21;
				knockBackResist = 0.5f;
				soundKilled = 24;
				value = 1200f;
				lavaImmune = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
			}
			else if (type == 157)
			{
				npcSlots = 0.5f;
				noGravity = true;
				name = "Arapaima";
				width = 74;
				height = 20;
				aiStyle = 16;
				damage = 75;
				defense = 30;
				lifeMax = 200;
				soundHit = 1;
				soundKilled = 1;
				value = 500f;
			}
			else if (type == 160)
			{
				townNPC = true;
				friendly = true;
				name = "Truffle";
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.5f;
			}
			else if (type == 161)
			{
				name = "Zombie Eskimo";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 16;
				defense = 8;
				lifeMax = 50;
				soundHit = 1;
				soundKilled = 2;
				knockBackResist = 0.45f;
				value = 80f;
				buffImmune[31] = false;
			}
			else if (type == 163)
			{
				name = "Black Recluse";
				width = 50;
				height = 20;
				aiStyle = 3;
				damage = 90;
				defense = 40;
				lifeMax = 350;
				soundHit = 29;
				soundKilled = 31;
				knockBackResist = 0.25f;
				value = 500f;
				buffImmune[20] = true;
				buffImmune[31] = false;
				npcSlots = 0.5f;
				timeLeft = activeTime * 2;
			}
			else if (type == 238)
			{
				noGravity = true;
				name = "Black Recluse";
				width = 36;
				height = 36;
				aiStyle = 40;
				damage = 100;
				defense = 40;
				lifeMax = 350;
				soundHit = 29;
				soundKilled = 31;
				knockBackResist = 0.25f;
				value = 500f;
				timeLeft = activeTime * 2;
				npcSlots = 0.5f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 164)
			{
				name = "Wall Creeper";
				width = 50;
				height = 20;
				aiStyle = 3;
				damage = 30;
				defense = 10;
				lifeMax = 80;
				soundHit = 29;
				soundKilled = 31;
				knockBackResist = 0.25f;
				value = 100f;
				timeLeft = activeTime * 2;
				npcSlots = 0.5f;
				buffImmune[20] = true;
			}
			else if (type == 165)
			{
				noGravity = true;
				name = "Wall Creeper";
				width = 36;
				height = 36;
				aiStyle = 40;
				damage = 30;
				defense = 10;
				lifeMax = 80;
				soundHit = 29;
				soundKilled = 31;
				knockBackResist = 0.25f;
				value = 100f;
				timeLeft = activeTime * 2;
				npcSlots = 0.5f;
				buffImmune[20] = true;
			}
			else if (type == 167)
			{
				name = "Undead Viking";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 24;
				defense = 10;
				lifeMax = 70;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.5f;
				value = 200f;
				buffImmune[31] = false;
				buffImmune[20] = true;
			}
			else if (type == 168)
			{
				name = "Corrupt Penguin";
				width = 16;
				height = 34;
				aiStyle = 3;
				damage = 20;
				defense = 4;
				lifeMax = 70;
				soundHit = 1;
				soundKilled = 1;
				value = 500f;
				buffImmune[31] = false;
			}
			else if (type == 169)
			{
				noGravity = true;
				name = "Ice Elemental";
				width = 18;
				height = 40;
				aiStyle = 22;
				damage = 55;
				defense = 20;
				lifeMax = 200;
				soundHit = 5;
				knockBackResist = 0.6f;
				soundKilled = 7;
				value = 1500f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				buffImmune[31] = false;
				buffImmune[44] = true;
				coldDamage = true;
			}
			else if (type == 170)
			{
				name = "Pigron";
				width = 44;
				height = 36;
				aiStyle = 2;
				damage = 70;
				defense = 16;
				lifeMax = 210;
				soundHit = 27;
				soundKilled = 30;
				knockBackResist = 0.5f;
				value = 2000f;
				buffImmune[31] = false;
			}
			else if (type == 171)
			{
				name = "Pigron";
				width = 44;
				height = 36;
				aiStyle = 2;
				damage = 70;
				defense = 16;
				lifeMax = 210;
				soundHit = 27;
				soundKilled = 30;
				knockBackResist = 0.5f;
				value = 2000f;
				buffImmune[31] = false;
			}
			else if (type == 172)
			{
				name = "Rune Wizard";
				width = 18;
				height = 40;
				aiStyle = 8;
				damage = 200;
				defense = 30;
				lifeMax = 600;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.3f;
				value = 5000f;
				buffImmune[20] = true;
				rarity = 2;
			}
			else if (type == 173)
			{
				npcSlots = 1f;
				name = "Crimera";
				width = 30;
				height = 30;
				aiStyle = 5;
				damage = 22;
				defense = 8;
				lifeMax = 40;
				soundHit = 1;
				soundKilled = 1;
				noGravity = true;
				knockBackResist = 0.5f;
				value = 90f;
			}
			else if (type == 174)
			{
				npcSlots = 1f;
				name = "Herpling";
				width = 52;
				height = 26;
				aiStyle = 41;
				damage = 65;
				defense = 26;
				lifeMax = 220;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.3f;
				value = 450f;
			}
			else if (type == 175)
			{
				noGravity = true;
				noTileCollide = true;
				name = "Angry Trapper";
				width = 30;
				height = 30;
				aiStyle = 13;
				damage = 100;
				defense = 30;
				lifeMax = 300;
				soundHit = 1;
				knockBackResist = 0.25f;
				soundKilled = 1;
				value = 650f;
				buffImmune[20] = true;
			}
			else if (type == 176)
			{
				name = "Moss Hornet";
				width = 34;
				height = 32;
				aiStyle = 5;
				damage = 70;
				defense = 22;
				lifeMax = 220;
				soundHit = 1;
				knockBackResist = 0.5f;
				soundKilled = 1;
				value = 600f;
				noGravity = true;
				buffImmune[20] = true;
				npcSlots = 1.5f;
			}
			else if (type == 177)
			{
				npcSlots = 1f;
				name = "Derpling";
				width = 58;
				height = 44;
				aiStyle = 41;
				damage = 80;
				defense = 26;
				lifeMax = 300;
				soundHit = 22;
				soundKilled = 25;
				knockBackResist = 0.5f;
				value = 500f;
			}
			else if (type == 178)
			{
				townNPC = true;
				friendly = true;
				name = "Steampunker";
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.5f;
			}
			else if (type == 179)
			{
				name = "Crimson Axe";
				width = 40;
				height = 40;
				aiStyle = 23;
				damage = 80;
				defense = 18;
				lifeMax = 200;
				soundHit = 4;
				soundKilled = 6;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				knockBackResist = 0.4f;
			}
			else if (type == 180)
			{
				name = "Pigron";
				width = 44;
				height = 36;
				aiStyle = 2;
				damage = 70;
				defense = 16;
				lifeMax = 210;
				soundHit = 27;
				soundKilled = 30;
				knockBackResist = 0.5f;
				value = 4000f;
				buffImmune[31] = false;
			}
			else if (type == 181)
			{
				name = "Face Monster";
				width = 18;
				height = 44;
				aiStyle = 3;
				damage = 25;
				defense = 10;
				lifeMax = 70;
				soundHit = 1;
				soundKilled = 2;
				knockBackResist = 0.4f;
				value = 200f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 182)
			{
				noGravity = true;
				noTileCollide = true;
				name = "Floaty Gross";
				width = 24;
				height = 62;
				aiStyle = 22;
				damage = 65;
				defense = 18;
				lifeMax = 240;
				soundHit = 1;
				soundKilled = 2;
				alpha = 100;
				value = 500f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				knockBackResist = 0.7f;
			}
			else if (type == 183)
			{
				name = "Crimslime";
				width = 40;
				height = 30;
				aiStyle = 1;
				damage = 60;
				defense = 26;
				lifeMax = 200;
				soundHit = 1;
				soundKilled = 1;
				alpha = 55;
				value = 400f;
				scale = 1.1f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 184)
			{
				name = "Spiked Ice Slime";
				width = 24;
				height = 18;
				aiStyle = 1;
				damage = 12;
				defense = 8;
				lifeMax = 60;
				scale = 1.1f;
				soundHit = 1;
				soundKilled = 1;
				alpha = 50;
				value = 200f;
				buffImmune[20] = true;
				buffImmune[31] = false;
				coldDamage = true;
			}
			else if (type == 185)
			{
				name = "Snow Flinx";
				width = 28;
				height = 28;
				aiStyle = 3;
				damage = 26;
				defense = 12;
				lifeMax = 70;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 1.1f;
				value = 200f;
				buffImmune[20] = true;
				buffImmune[31] = false;
				coldDamage = true;
			}
			else if (type == 186)
			{
				name = "Pincushion Zombie";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 16;
				defense = 8;
				lifeMax = 50;
				soundHit = 1;
				soundKilled = 2;
				knockBackResist = 0.45f;
				value = 65f;
				buffImmune[31] = false;
			}
			else if (type == 187)
			{
				name = "Slimed Zombie";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 13;
				defense = 6;
				lifeMax = 40;
				soundHit = 1;
				soundKilled = 2;
				knockBackResist = 0.55f;
				value = 55f;
				buffImmune[31] = false;
			}
			else if (type == 188)
			{
				name = "Swamp Zombie";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 13;
				defense = 8;
				lifeMax = 45;
				soundHit = 1;
				soundKilled = 2;
				knockBackResist = 0.45f;
				value = 80f;
				buffImmune[31] = false;
			}
			else if (type == 189)
			{
				name = "Twiggy Zombie";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 16;
				defense = 4;
				lifeMax = 45;
				soundHit = 1;
				soundKilled = 2;
				knockBackResist = 0.55f;
				value = 70f;
				buffImmune[31] = false;
			}
			else if (type == 190)
			{
				name = "Cataract Eye";
				width = 30;
				height = 32;
				aiStyle = 2;
				damage = 18;
				defense = 4;
				lifeMax = 65;
				soundHit = 1;
				knockBackResist = 0.7f;
				soundKilled = 1;
				value = 75f;
				buffImmune[31] = false;
			}
			else if (type == 191)
			{
				name = "Sleepy Eye";
				width = 30;
				height = 32;
				aiStyle = 2;
				damage = 16;
				defense = 2;
				lifeMax = 60;
				soundHit = 1;
				knockBackResist = 0.85f;
				soundKilled = 1;
				value = 75f;
				buffImmune[31] = false;
			}
			else if (type == 192)
			{
				name = "Dialated Eye";
				width = 30;
				height = 32;
				aiStyle = 2;
				damage = 18;
				defense = 2;
				lifeMax = 50;
				soundHit = 1;
				knockBackResist = 0.8f;
				soundKilled = 1;
				value = 75f;
				buffImmune[31] = false;
			}
			else if (type == 193)
			{
				name = "Green Eye";
				width = 30;
				height = 32;
				aiStyle = 2;
				damage = 20;
				defense = 0;
				lifeMax = 60;
				soundHit = 1;
				knockBackResist = 0.8f;
				soundKilled = 1;
				value = 75f;
				buffImmune[31] = false;
			}
			else if (type == 194)
			{
				name = "Purple Eye";
				width = 30;
				height = 32;
				aiStyle = 2;
				damage = 14;
				defense = 4;
				lifeMax = 60;
				soundHit = 1;
				knockBackResist = 0.8f;
				soundKilled = 1;
				value = 75f;
				buffImmune[31] = false;
			}
			else if (type == 195)
			{
				name = "Lost Girl";
				width = 18;
				height = 40;
				aiStyle = 42;
				damage = 10;
				defense = 30;
				lifeMax = 250;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.5f;
				rarity = 1;
			}
			else if (type == 196)
			{
				name = "Nymph";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 35;
				defense = 16;
				lifeMax = 300;
				soundHit = 1;
				soundKilled = 2;
				knockBackResist = 0.4f;
				value = 10000f;
				buffImmune[31] = false;
				rarity = 1;
			}
			else if (type == 197)
			{
				name = "Armored Viking";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 50;
				defense = 28;
				lifeMax = 280;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.45f;
				value = 500f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 198)
			{
				name = "Lihzahrd";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 38;
				defense = 20;
				lifeMax = 400;
				soundHit = 26;
				soundKilled = 29;
				knockBackResist = 0.4f;
				value = 650f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 199)
			{
				name = "Lihzahrd";
				width = 42;
				height = 30;
				aiStyle = 3;
				damage = 60;
				defense = 30;
				lifeMax = 400;
				soundHit = 26;
				soundKilled = 29;
				knockBackResist = 0f;
				value = 650f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 200)
			{
				name = "Female Zombie";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 12;
				defense = 4;
				lifeMax = 38;
				soundHit = 1;
				soundKilled = 2;
				knockBackResist = 0.6f;
				value = 65f;
				buffImmune[31] = false;
			}
			else if (type == 201)
			{
				name = "Headache Skeleton";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 20;
				defense = 12;
				lifeMax = 55;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.5f;
				value = 130f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 202)
			{
				name = "Misassembled Skeleton";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 18;
				defense = 8;
				lifeMax = 65;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.5f;
				value = 120f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 203)
			{
				name = "Pantless Skeleton";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 22;
				defense = 8;
				lifeMax = 60;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.5f;
				value = 110f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 204)
			{
				name = "Spiked Jungle Slime";
				width = 24;
				height = 18;
				aiStyle = 1;
				damage = 28;
				defense = 8;
				lifeMax = 65;
				scale = 1.15f;
				soundHit = 1;
				soundKilled = 1;
				alpha = 50;
				value = 300f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 205)
			{
				name = "Moth";
				width = 40;
				height = 40;
				aiStyle = 5;
				damage = 70;
				defense = 28;
				lifeMax = 1000;
				soundHit = 1;
				knockBackResist = 0.4f;
				soundKilled = 1;
				value = 600f;
				noGravity = true;
				buffImmune[20] = true;
				rarity = 2;
			}
			else if (type == 206)
			{
				name = "Icy Merman";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 60;
				defense = 30;
				lifeMax = 280;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.5f;
				value = 500f;
				buffImmune[31] = false;
				coldDamage = true;
			}
			else if (type == 207)
			{
				townNPC = true;
				friendly = true;
				name = "Dye Trader";
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.5f;
			}
			else if (type == 208)
			{
				townNPC = true;
				friendly = true;
				name = "Party Girl";
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.5f;
			}
			else if (type == 209)
			{
				townNPC = true;
				friendly = true;
				name = "Cyborg";
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.5f;
			}
			else if (type == 210)
			{
				name = "Bee";
				width = 12;
				height = 12;
				aiStyle = 5;
				damage = 20;
				defense = 5;
				lifeMax = 20;
				soundHit = 1;
				knockBackResist = 0.5f;
				soundKilled = 1;
				noGravity = true;
				buffImmune[20] = true;
			}
			else if (type == 211)
			{
				name = "Bee";
				width = 8;
				height = 8;
				aiStyle = 5;
				damage = 15;
				defense = 2;
				lifeMax = 10;
				soundHit = 1;
				knockBackResist = 0.5f;
				soundKilled = 1;
				noGravity = true;
				buffImmune[20] = true;
			}
			else if (type == 212)
			{
				name = "Pirate Deckhand";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 35;
				defense = 17;
				lifeMax = 300;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.4f;
				value = 700f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 213)
			{
				name = "Pirate Corsair";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 50;
				defense = 22;
				lifeMax = 450;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.2f;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 214)
			{
				name = "Pirate Deadeye";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 30;
				defense = 14;
				lifeMax = 225;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.3f;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 215)
			{
				name = "Pirate Crossbower";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 35;
				defense = 20;
				lifeMax = 350;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.35f;
				value = 1500f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 216)
			{
				name = "Pirate Captain";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 70;
				defense = 30;
				lifeMax = 3000;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0f;
				value = 50000f;
				buffImmune[20] = true;
				buffImmune[31] = true;
			}
			else if (type == 217)
			{
				name = "Cochineal Beetle";
				width = 28;
				height = 20;
				aiStyle = 3;
				damage = 20;
				defense = 10;
				lifeMax = 40;
				soundHit = 1;
				soundKilled = 16;
				value = 60f;
			}
			else if (type == 218)
			{
				name = "Cyan Beetle";
				width = 28;
				height = 20;
				aiStyle = 3;
				damage = 20;
				defense = 10;
				lifeMax = 40;
				soundHit = 1;
				soundKilled = 16;
				value = 60f;
			}
			else if (type == 219)
			{
				name = "Lac Beetle";
				width = 28;
				height = 20;
				aiStyle = 3;
				damage = 20;
				defense = 10;
				lifeMax = 40;
				soundHit = 1;
				soundKilled = 16;
				value = 60f;
			}
			else if (type == 220)
			{
				name = "Sea Snail";
				width = 28;
				height = 20;
				aiStyle = 3;
				damage = 20;
				defense = 10;
				lifeMax = 40;
				soundHit = 1;
				soundKilled = 1;
				value = 60f;
			}
			else if (type == 221)
			{
				noGravity = true;
				name = "Squid";
				width = 26;
				height = 26;
				aiStyle = 18;
				damage = 20;
				defense = 2;
				lifeMax = 30;
				soundHit = 1;
				soundKilled = 1;
				value = 100f;
				alpha = 20;
			}
			else if (type == 222)
			{
				name = "Queen Bee";
				width = 66;
				height = 66;
				aiStyle = 43;
				damage = 30;
				defense = 8;
				lifeMax = 3400;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				timeLeft = activeTime * 30;
				boss = true;
				value = 100000f;
				npcSlots = 7f;
			}
			else if (type == 223)
			{
				name = "Zombie";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 16;
				defense = 8;
				lifeMax = 50;
				soundHit = 1;
				soundKilled = 2;
				knockBackResist = 0.45f;
				value = 70f;
				buffImmune[31] = false;
			}
			else if (type == 224)
			{
				name = "Flying Fish";
				width = 32;
				height = 18;
				aiStyle = 44;
				damage = 9;
				defense = 4;
				lifeMax = 20;
				soundHit = 1;
				knockBackResist = 0.8f;
				soundKilled = 1;
				value = 90f;
				buffImmune[31] = false;
			}
			if (type == 225)
			{
				name = "Umbrella Slime";
				width = 38;
				height = 26;
				aiStyle = 1;
				damage = 10;
				defense = 5;
				lifeMax = 35;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.75f;
				value = 25f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 226)
			{
				npcSlots = 0.5f;
				name = "Flying Snake";
				width = 34;
				height = 50;
				aiStyle = 14;
				damage = 85;
				defense = 28;
				lifeMax = 260;
				soundHit = 23;
				knockBackResist = 0.65f;
				soundKilled = 26;
				value = 400f;
				buffImmune[31] = false;
			}
			else if (type == 227)
			{
				townNPC = true;
				friendly = true;
				name = "Painter";
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.5f;
			}
			else if (type == 228)
			{
				townNPC = true;
				friendly = true;
				name = "Witch Doctor";
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.5f;
			}
			else if (type == 229)
			{
				townNPC = true;
				friendly = true;
				name = "Pirate";
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.5f;
			}
			else if (type == 230)
			{
				name = "Goldfish";
				width = 18;
				height = 20;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				soundHit = 1;
				soundKilled = 1;
				catchItem = 261;
			}
			else if (type == 231)
			{
				name = "Hornet Fatty";
				width = 34;
				height = 32;
				aiStyle = 5;
				damage = 22;
				defense = 16;
				lifeMax = 50;
				soundHit = 1;
				knockBackResist = 0.3f;
				soundKilled = 1;
				value = 200f;
				noGravity = true;
				buffImmune[20] = true;
			}
			else if (type == 232)
			{
				name = "Hornet Honey";
				width = 34;
				height = 32;
				aiStyle = 5;
				damage = 28;
				defense = 12;
				lifeMax = 42;
				soundHit = 1;
				knockBackResist = 0.6f;
				soundKilled = 1;
				value = 200f;
				noGravity = true;
				buffImmune[20] = true;
			}
			else if (type == 233)
			{
				name = "Hornet Leafy";
				width = 34;
				height = 32;
				aiStyle = 5;
				damage = 30;
				defense = 14;
				lifeMax = 38;
				soundHit = 1;
				knockBackResist = 0.45f;
				soundKilled = 1;
				value = 200f;
				noGravity = true;
				buffImmune[20] = true;
			}
			else if (type == 234)
			{
				name = "Hornet Spikey";
				width = 34;
				height = 32;
				aiStyle = 5;
				damage = 32;
				defense = 6;
				lifeMax = 42;
				soundHit = 1;
				knockBackResist = 0.55f;
				soundKilled = 1;
				value = 200f;
				noGravity = true;
				buffImmune[20] = true;
			}
			else if (type == 235)
			{
				name = "Hornet Stingy";
				width = 34;
				height = 32;
				aiStyle = 5;
				damage = 34;
				defense = 4;
				lifeMax = 38;
				soundHit = 1;
				knockBackResist = 0.6f;
				soundKilled = 1;
				value = 200f;
				noGravity = true;
				buffImmune[20] = true;
			}
			else if (type == 236)
			{
				name = "Jungle Creeper";
				width = 50;
				height = 20;
				aiStyle = 3;
				damage = 50;
				defense = 14;
				lifeMax = 120;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.25f;
				value = 1000f;
				timeLeft = activeTime * 2;
				npcSlots = 0.75f;
				buffImmune[20] = true;
			}
			else if (type == 237)
			{
				noGravity = true;
				name = "Jungle Creeper";
				width = 36;
				height = 36;
				aiStyle = 40;
				damage = 50;
				defense = 14;
				lifeMax = 120;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.25f;
				value = 1000f;
				timeLeft = activeTime * 2;
				npcSlots = 0.75f;
				buffImmune[20] = true;
			}
			else if (type == 239)
			{
				name = "Blood Crawler";
				width = 50;
				height = 20;
				aiStyle = 3;
				damage = 30;
				defense = 8;
				lifeMax = 60;
				soundHit = 20;
				soundKilled = 23;
				knockBackResist = 0.5f;
				value = 130f;
				timeLeft = activeTime * 2;
				buffImmune[20] = true;
			}
			else if (type == 240)
			{
				noGravity = true;
				name = "Blood Crawler";
				width = 50;
				height = 20;
				aiStyle = 40;
				damage = 30;
				defense = 8;
				lifeMax = 60;
				soundHit = 20;
				soundKilled = 23;
				knockBackResist = 0.5f;
				value = 130f;
				timeLeft = activeTime * 2;
				buffImmune[20] = true;
			}
			else if (type == 241)
			{
				npcSlots = 0.5f;
				noGravity = true;
				name = "Blood Feeder";
				width = 18;
				height = 20;
				aiStyle = 16;
				damage = 30;
				defense = 4;
				lifeMax = 20;
				soundHit = 13;
				soundKilled = 19;
				value = 350f;
			}
			else if (type == 242)
			{
				noGravity = true;
				name = "Blood Jelly";
				width = 26;
				height = 26;
				aiStyle = 18;
				damage = 75;
				defense = 20;
				lifeMax = 150;
				soundHit = 13;
				soundKilled = 19;
				value = 800f;
				alpha = 20;
			}
			else if (type == 243)
			{
				name = "Ice Golem";
				width = 30;
				height = 114;
				aiStyle = 3;
				damage = 60;
				defense = 32;
				lifeMax = 4000;
				soundHit = 5;
				soundKilled = 7;
				knockBackResist = 0.05f;
				value = Item.buyPrice(0, 1, 50);
				buffImmune[20] = true;
				buffImmune[44] = true;
				coldDamage = true;
				rarity = 2;
			}
			else if (type == 244)
			{
				name = "Rainbow Slime";
				width = 60;
				height = 42;
				aiStyle = 1;
				damage = 85;
				defense = 26;
				lifeMax = 400;
				soundHit = 1;
				soundKilled = 1;
				alpha = 175;
				value = Item.buyPrice(0, 0, 20);
				knockBackResist = 0.3f;
				buffImmune[20] = true;
				buffImmune[31] = false;
				rarity = 1;
			}
			else if (type == 245)
			{
				name = "Golem";
				width = 140;
				height = 140;
				aiStyle = 45;
				damage = 72;
				defense = 26;
				lifeMax = 9000;
				soundHit = 4;
				soundKilled = 14;
				knockBackResist = 0f;
				value = Item.buyPrice(0, 15);
				alpha = 255;
				boss = true;
				buffImmune[20] = true;
				buffImmune[24] = true;
			}
			else if (type == 246)
			{
				noGravity = true;
				name = "Golem Head";
				width = 70;
				height = 70;
				aiStyle = 46;
				damage = 64;
				defense = 20;
				lifeMax = 16000;
				soundHit = 4;
				soundKilled = 0;
				knockBackResist = 0f;
				alpha = 255;
				buffImmune[20] = true;
				buffImmune[24] = true;
			}
			else if (type == 247 || type == 248)
			{
				noGravity = true;
				name = "Golem Fist";
				width = 40;
				height = 30;
				aiStyle = 47;
				damage = 59;
				defense = 28;
				lifeMax = 7000;
				soundHit = 4;
				soundKilled = 14;
				alpha = 255;
				buffImmune[20] = true;
				buffImmune[24] = true;
			}
			else if (type == 249)
			{
				noGravity = true;
				name = "Golem Head";
				width = 70;
				height = 70;
				aiStyle = 48;
				damage = 80;
				defense = 32;
				lifeMax = 11000;
				soundHit = 4;
				soundKilled = 14;
				knockBackResist = 0f;
				dontTakeDamage = true;
				buffImmune[20] = true;
				buffImmune[24] = true;
			}
			else if (type == 250)
			{
				name = "Angry Nimbus";
				width = 34;
				height = 26;
				aiStyle = 49;
				damage = 50;
				defense = 24;
				lifeMax = 300;
				soundHit = 30;
				soundKilled = 33;
				knockBackResist = 0.3f;
				value = 300f;
				buffImmune[20] = true;
			}
			else if (type == 251)
			{
				name = "Eyezor";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 50;
				defense = 30;
				lifeMax = 1000;
				soundHit = 1;
				soundKilled = 2;
				knockBackResist = 0.3f;
				value = Item.buyPrice(0, 0, 50);
				buffImmune[31] = false;
			}
			else if (type == 252)
			{
				noGravity = true;
				npcSlots = 0.5f;
				name = "Parrot";
				width = 32;
				height = 32;
				aiStyle = 5;
				damage = 80;
				defense = 12;
				lifeMax = 100;
				soundHit = 46;
				knockBackResist = 0.7f;
				soundKilled = 48;
				value = 500f;
				buffImmune[31] = false;
			}
			else if (type == 254)
			{
				name = "Spore Zombie";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 40;
				defense = 10;
				lifeMax = 180;
				soundHit = 1;
				soundKilled = 6;
				knockBackResist = 0.4f;
				value = 1000f;
				buffImmune[31] = false;
			}
			else if (type == 255)
			{
				name = "Spore Zombie";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 38;
				defense = 16;
				lifeMax = 220;
				soundHit = 1;
				soundKilled = 6;
				knockBackResist = 0.3f;
				value = 1200f;
				buffImmune[31] = false;
			}
			else if (type == 256)
			{
				noGravity = true;
				name = "Fungo Fish";
				width = 26;
				height = 26;
				aiStyle = 18;
				damage = 90;
				defense = 20;
				lifeMax = 140;
				soundHit = 1;
				soundKilled = 6;
				value = 1200f;
				alpha = 20;
				npcSlots = 0.3f;
			}
			else if (type == 257)
			{
				name = "Anomura Fungus";
				width = 44;
				height = 34;
				aiStyle = 3;
				damage = 38;
				defense = 24;
				lifeMax = 230;
				soundHit = 1;
				soundKilled = 6;
				knockBackResist = 0.3f;
				value = 1300f;
				buffImmune[31] = false;
				npcSlots = 0.3f;
			}
			else if (type == 258)
			{
				name = "Mushi Ladybug";
				width = 30;
				height = 24;
				aiStyle = 3;
				damage = 60;
				defense = 16;
				lifeMax = 220;
				soundHit = 45;
				soundKilled = 47;
				knockBackResist = 0.3f;
				value = 1500f;
				buffImmune[31] = false;
				npcSlots = 0.3f;
			}
			else if (type == 259)
			{
				noGravity = true;
				noTileCollide = true;
				name = "Fungi Bulb";
				width = 20;
				height = 20;
				aiStyle = 13;
				damage = 24;
				defense = 4;
				lifeMax = 90;
				soundHit = 1;
				knockBackResist = 0f;
				soundKilled = 1;
				value = 350f;
				buffImmune[20] = true;
				npcSlots = 0.3f;
			}
			else if (type == 260)
			{
				noGravity = true;
				noTileCollide = true;
				name = "Giant Fungi Bulb";
				width = 36;
				height = 36;
				aiStyle = 13;
				damage = 70;
				defense = 20;
				lifeMax = 300;
				soundHit = 1;
				knockBackResist = 0f;
				soundKilled = 1;
				value = 1250f;
				buffImmune[20] = true;
				npcSlots = 0.3f;
			}
			else if (type == 261)
			{
				name = "Fungi Spore";
				width = 12;
				height = 12;
				aiStyle = 50;
				damage = 80;
				defense = 0;
				lifeMax = 1;
				soundHit = 1;
				soundKilled = 1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				npcSlots = 0f;
			}
			else if (type == 262)
			{
				noTileCollide = true;
				name = "Plantera";
				width = 86;
				height = 86;
				aiStyle = 51;
				damage = 50;
				defense = 14;
				lifeMax = 30000;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0f;
				value = Item.buyPrice(0, 15);
				noGravity = true;
				boss = true;
				npcSlots = 16f;
				buffImmune[20] = true;
			}
			else if (type == 263)
			{
				noTileCollide = true;
				noGravity = true;
				name = "Plantera's Hook";
				width = 40;
				height = 40;
				aiStyle = 52;
				damage = 60;
				defense = 24;
				lifeMax = 4000;
				dontTakeDamage = true;
				soundHit = 1;
				soundKilled = 1;
				buffImmune[20] = true;
			}
			else if (type == 264)
			{
				name = "Plantera's Tentacle";
				width = 24;
				height = 24;
				aiStyle = 53;
				damage = 60;
				defense = 20;
				lifeMax = 1000;
				soundHit = 1;
				soundKilled = 1;
				noGravity = true;
				noTileCollide = true;
				buffImmune[20] = true;
			}
			else if (type == 265)
			{
				name = "Spore";
				width = 18;
				height = 18;
				aiStyle = 50;
				damage = 70;
				defense = 0;
				lifeMax = 1;
				soundHit = 1;
				soundKilled = 1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				npcSlots = 0f;
			}
			else if (type == 266)
			{
				name = "Brain of Cthulhu";
				dontTakeDamage = true;
				width = 160;
				height = 110;
				aiStyle = 54;
				damage = 30;
				defense = 14;
				lifeMax = 1000;
				soundHit = 9;
				soundKilled = 11;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				timeLeft = activeTime * 30;
				boss = true;
				value = 50000f;
				npcSlots = 6f;
			}
			else if (type == 267)
			{
				name = "Creeper";
				width = 30;
				height = 30;
				aiStyle = 55;
				damage = 20;
				defense = 10;
				lifeMax = 100;
				soundHit = 9;
				soundKilled = 11;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0.8f;
			}
			else if (type == 268)
			{
				noGravity = true;
				name = "Ichor Sticker";
				width = 28;
				height = 56;
				aiStyle = 22;
				damage = 55;
				defense = 20;
				lifeMax = 340;
				soundHit = 13;
				soundKilled = 19;
				knockBackResist = 0.6f;
				value = 450f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 269)
			{
				name = "Rusty Armored Bones";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 70;
				defense = 34;
				lifeMax = 550;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.3f;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 270)
			{
				name = "Rusty Armored Bones";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 55;
				defense = 50;
				lifeMax = 400;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.2f;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 271)
			{
				name = "Rusty Armored Bones";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 70;
				defense = 40;
				lifeMax = 450;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.25f;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 272)
			{
				name = "Rusty Armored Bones";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 75;
				defense = 28;
				lifeMax = 400;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.35f;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 273)
			{
				name = "Blue Armored Bones";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 45;
				defense = 50;
				lifeMax = 500;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.15f;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 274)
			{
				name = "Blue Armored Bones";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 65;
				defense = 34;
				lifeMax = 350;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.4f;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 275)
			{
				name = "Blue Armored Bones";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 45;
				defense = 50;
				lifeMax = 550;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.15f;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 276)
			{
				name = "Blue Armored Bones";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 85;
				defense = 54;
				lifeMax = 500;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.2f;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 277)
			{
				name = "Hell Armored Bones";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 70;
				defense = 32;
				lifeMax = 400;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.4f;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[31] = false;
			}
			else if (type == 278)
			{
				name = "Hell Armored Bones";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 65;
				defense = 48;
				lifeMax = 450;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.3f;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[31] = false;
			}
			else if (type == 279)
			{
				name = "Hell Armored Bones";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 40;
				defense = 54;
				lifeMax = 500;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.2f;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[31] = false;
			}
			else if (type == 280)
			{
				name = "Hell Armored Bones";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 75;
				defense = 34;
				lifeMax = 500;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.4f;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[31] = false;
			}
			else if (type == 281)
			{
				name = "Ragged Caster";
				width = 18;
				height = 40;
				aiStyle = 8;
				damage = 40;
				defense = 20;
				lifeMax = 400;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.6f;
				value = 1500f;
				npcSlots = 2f;
				buffImmune[20] = true;
			}
			else if (type == 282)
			{
				name = "Ragged Caster";
				width = 18;
				height = 40;
				aiStyle = 8;
				damage = 35;
				defense = 28;
				lifeMax = 450;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.5f;
				value = 1500f;
				npcSlots = 2f;
				buffImmune[20] = true;
			}
			else if (type == 283)
			{
				name = "Necromancer";
				width = 18;
				height = 40;
				aiStyle = 8;
				damage = 50;
				defense = 18;
				lifeMax = 300;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.55f;
				value = 1500f;
				npcSlots = 2f;
				buffImmune[20] = true;
			}
			else if (type == 284)
			{
				name = "Necromancer";
				width = 18;
				height = 40;
				aiStyle = 8;
				damage = 35;
				defense = 24;
				lifeMax = 450;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.5f;
				value = 1500f;
				npcSlots = 2f;
				buffImmune[20] = true;
			}
			else if (type == 285)
			{
				name = "Diabolist";
				width = 18;
				height = 40;
				aiStyle = 8;
				damage = 50;
				defense = 12;
				lifeMax = 200;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.7f;
				value = 1500f;
				npcSlots = 2f;
				buffImmune[20] = true;
			}
			else if (type == 286)
			{
				name = "Diabolist";
				width = 18;
				height = 40;
				aiStyle = 8;
				damage = 60;
				defense = 10;
				lifeMax = 250;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.65f;
				value = 1500f;
				npcSlots = 2f;
				buffImmune[20] = true;
			}
			else if (type == 287)
			{
				name = "Bone Lee";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 90;
				defense = 42;
				lifeMax = 1000;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.3f;
				value = 2000f;
				buffImmune[20] = true;
				buffImmune[31] = false;
				rarity = 1;
			}
			else if (type == 288)
			{
				name = "Dungeon Spirit";
				width = 20;
				height = 20;
				aiStyle = 56;
				damage = 70;
				defense = 30;
				lifeMax = 200;
				knockBackResist = 0.2f;
				soundHit = 36;
				soundKilled = 39;
				value = 500f;
				noTileCollide = true;
				noGravity = true;
				flag = true;
			}
			else if (type == 289)
			{
				name = "Giant Cursed Skull";
				width = 44;
				height = 44;
				aiStyle = 10;
				damage = 60;
				defense = 20;
				lifeMax = 400;
				soundHit = 2;
				soundKilled = 2;
				noGravity = true;
				noTileCollide = true;
				value = 150f;
				knockBackResist = 0.2f;
				npcSlots = 0.75f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
			}
			else if (type == 290)
			{
				name = "Paladin";
				width = 34;
				height = 62;
				aiStyle = 3;
				damage = 100;
				defense = 50;
				lifeMax = 5000;
				soundHit = 4;
				soundKilled = 6;
				knockBackResist = 0f;
				value = 50000f;
				buffImmune[20] = true;
				buffImmune[31] = true;
				rarity = 1;
			}
			else if (type == 291)
			{
				name = "Skeleton Sniper";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 60;
				defense = 28;
				lifeMax = 400;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.4f;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[31] = false;
				rarity = 2;
			}
			else if (type == 292)
			{
				name = "Tactical Skeleton";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 60;
				defense = 28;
				lifeMax = 400;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.4f;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[31] = false;
				rarity = 2;
			}
			else if (type == 293)
			{
				name = "Skeleton Commando";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 60;
				defense = 28;
				lifeMax = 400;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.4f;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[31] = false;
				rarity = 2;
			}
			else if (type == 294)
			{
				name = "Angry Bones";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 34;
				defense = 6;
				lifeMax = 70;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.9f;
				value = 130f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 295)
			{
				name = "Angry Bones";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 28;
				defense = 12;
				lifeMax = 70;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.7f;
				value = 130f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 296)
			{
				name = "Angry Bones";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 24;
				defense = 14;
				lifeMax = 120;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.6f;
				value = 130f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 299)
			{
				name = "Squirrel";
				width = 18;
				height = 20;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				soundHit = 1;
				soundKilled = 1;
				catchItem = 2018;
			}
			else if (type == 300)
			{
				name = "Mouse";
				width = 14;
				height = 12;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				soundHit = 1;
				soundKilled = 4;
				npcSlots = 0.25f;
				catchItem = 2003;
			}
			else if (type == 301)
			{
				name = "Raven";
				width = 36;
				height = 26;
				aiStyle = 17;
				damage = 12;
				defense = 2;
				lifeMax = 35;
				soundHit = 1;
				knockBackResist = 0.85f;
				soundKilled = 1;
				value = 50f;
			}
			if (type == 302)
			{
				name = "Slime";
				width = 24;
				height = 18;
				aiStyle = 1;
				damage = 7;
				defense = 2;
				lifeMax = 25;
				soundHit = 1;
				soundKilled = 1;
				value = 25f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 304)
			{
				name = "Hoppin' Jack";
				width = 34;
				height = 28;
				aiStyle = 1;
				damage = 80;
				defense = 20;
				lifeMax = 175;
				soundHit = 1;
				soundKilled = 1;
				value = 500f;
				scale = 1.1f;
				buffImmune[20] = true;
				buffImmune[31] = false;
				knockBackResist = 0.5f;
				npcSlots = 0.3f;
			}
			else if (type >= 305 && type <= 314)
			{
				name = "Scarecrow";
				width = 18;
				height = 40;
				aiStyle = 3;
				soundHit = 1;
				soundKilled = 6;
				value = 1200f;
				buffImmune[31] = false;
				npcSlots = 0.5f;
				if (type == 305 || type == 310)
				{
					damage = 60;
					defense = 18;
					lifeMax = 500;
					knockBackResist = 0.4f;
				}
				else if (type == 306 || type == 311)
				{
					damage = 52;
					defense = 14;
					lifeMax = 400;
					knockBackResist = 0.2f;
					scale = 1.05f;
				}
				else if (type == 307 || type == 312)
				{
					damage = 78;
					defense = 16;
					lifeMax = 600;
					knockBackResist = 0.25f;
					scale = 0.9f;
				}
				else if (type == 308 || type == 313)
				{
					damage = 66;
					defense = 14;
					lifeMax = 650;
					knockBackResist = 0.35f;
					scale = 0.95f;
				}
				else if (type == 309 || type == 314)
				{
					damage = 52;
					defense = 26;
					lifeMax = 450;
					knockBackResist = 0.5f;
					scale = 1.1f;
				}
			}
			else if (type == 315)
			{
				name = "Headless Horseman";
				width = 74;
				height = 70;
				aiStyle = 26;
				damage = 130;
				defense = 40;
				lifeMax = 10000;
				soundHit = 12;
				soundKilled = 18;
				knockBackResist = 0f;
				value = 10000f;
				flag = true;
			}
			else if (type == 316)
			{
				noGravity = true;
				noTileCollide = true;
				name = "Ghost";
				width = 24;
				height = 44;
				aiStyle = 22;
				damage = 40;
				defense = 14;
				lifeMax = 100;
				soundHit = 1;
				soundKilled = 6;
				alpha = 100;
				value = 700f;
				flag = true;
				knockBackResist = 0.7f;
			}
			else if (type == 317)
			{
				name = "Demon Eye";
				width = 30;
				height = 32;
				aiStyle = 2;
				damage = 16;
				defense = 6;
				lifeMax = 75;
				soundHit = 1;
				knockBackResist = 0.7f;
				soundKilled = 1;
				value = 100f;
				buffImmune[31] = false;
			}
			else if (type == 318)
			{
				name = "Demon Eye";
				width = 30;
				height = 32;
				aiStyle = 2;
				damage = 20;
				defense = 4;
				lifeMax = 60;
				soundHit = 1;
				knockBackResist = 0.65f;
				soundKilled = 1;
				value = 100f;
				buffImmune[31] = false;
			}
			else if (type == 319)
			{
				name = "Zombie";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 20;
				defense = 6;
				lifeMax = 40;
				soundHit = 1;
				soundKilled = 2;
				knockBackResist = 0.6f;
				value = 85f;
				buffImmune[31] = false;
				scale = 0.9f;
			}
			else if (type == 320)
			{
				name = "Zombie";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 15;
				defense = 8;
				lifeMax = 60;
				soundHit = 1;
				soundKilled = 2;
				knockBackResist = 0.5f;
				value = 105f;
				buffImmune[31] = false;
				scale = 1.05f;
			}
			else if (type == 321)
			{
				name = "Zombie";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 20;
				defense = 14;
				lifeMax = 34;
				soundHit = 1;
				soundKilled = 2;
				knockBackResist = 0.3f;
				value = 120f;
				buffImmune[31] = false;
				scale = 1.1f;
			}
			else if (type == 322)
			{
				name = "Skeleton";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 23;
				defense = 0;
				lifeMax = 115;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.65f;
				value = 130f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 323)
			{
				name = "Skeleton";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 18;
				defense = 10;
				lifeMax = 65;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.5f;
				value = 120f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 324)
			{
				name = "Skeleton";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 22;
				defense = 10;
				lifeMax = 70;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.4f;
				value = 130f;
				buffImmune[20] = true;
				buffImmune[31] = false;
				scale = 1.05f;
			}
			else if (type == 325)
			{
				name = "Mourning Wood";
				width = 164;
				height = 154;
				aiStyle = 57;
				damage = 120;
				defense = 28;
				lifeMax = 12000;
				soundHit = 7;
				soundKilled = 5;
				knockBackResist = 0f;
				value = 10000f;
				flag = true;
			}
			else if (type == 326)
			{
				name = "Splinterling";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 100;
				defense = 32;
				lifeMax = 900;
				soundHit = 7;
				soundKilled = 6;
				knockBackResist = 0.2f;
				value = 2000f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 327)
			{
				name = "Pumpking";
				width = 100;
				height = 100;
				aiStyle = 58;
				damage = 50;
				defense = 36;
				lifeMax = 22000;
				soundHit = 1;
				soundKilled = 1;
				noGravity = true;
				noTileCollide = true;
				value = 50000f;
				knockBackResist = 0f;
				flag = true;
			}
			else if (type == 328)
			{
				name = "Pumpking";
				width = 80;
				height = 80;
				aiStyle = 59;
				damage = 65;
				defense = 14;
				lifeMax = 5000;
				soundHit = 1;
				soundKilled = 1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				flag = true;
				dontTakeDamage = true;
				npcSlots = 0f;
			}
			else if (type == 329)
			{
				name = "Hellhound";
				width = 46;
				height = 30;
				aiStyle = 26;
				damage = 80;
				defense = 38;
				lifeMax = 1200;
				soundHit = 1;
				soundKilled = 5;
				knockBackResist = 0.3f;
				value = 3000f;
				flag = true;
			}
			else if (type == 330)
			{
				noGravity = true;
				noTileCollide = true;
				name = "Poltergeist";
				width = 24;
				height = 44;
				aiStyle = 22;
				damage = 90;
				defense = 44;
				lifeMax = 2000;
				soundHit = 1;
				soundKilled = 6;
				alpha = 100;
				value = 4500f;
				flag = true;
				knockBackResist = 0.4f;
			}
			else if (type == 331)
			{
				name = "Zombie";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 14;
				defense = 6;
				lifeMax = 45;
				soundHit = 1;
				soundKilled = 2;
				knockBackResist = 0.5f;
				value = 60f;
				buffImmune[31] = false;
			}
			else if (type == 332)
			{
				name = "Zombie";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 14;
				defense = 6;
				lifeMax = 45;
				soundHit = 1;
				soundKilled = 2;
				knockBackResist = 0.5f;
				value = 60f;
				buffImmune[31] = false;
			}
			if (type == 333)
			{
				name = "Slime";
				width = 24;
				height = 18;
				aiStyle = 1;
				damage = 7;
				defense = 2;
				lifeMax = 25;
				soundHit = 1;
				soundKilled = 1;
				value = 25f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			if (type == 334)
			{
				name = "Slime";
				width = 24;
				height = 18;
				aiStyle = 1;
				damage = 6;
				defense = 2;
				lifeMax = 23;
				soundHit = 1;
				soundKilled = 1;
				scale = 0.9f;
				value = 25f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			if (type == 335)
			{
				name = "Slime";
				width = 24;
				height = 18;
				aiStyle = 1;
				damage = 8;
				defense = 3;
				lifeMax = 29;
				scale = 1.05f;
				soundHit = 1;
				soundKilled = 1;
				value = 25f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			if (type == 336)
			{
				name = "Slime";
				width = 24;
				height = 18;
				aiStyle = 1;
				damage = 5;
				defense = 1;
				lifeMax = 22;
				scale = 0.85f;
				soundHit = 1;
				soundKilled = 1;
				value = 25f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type >= 338 && type <= 340)
			{
				name = "Zombie Elf";
				width = 18;
				height = 40;
				aiStyle = 3;
				soundHit = 1;
				soundKilled = 1;
				value = 1200f;
				buffImmune[31] = false;
				npcSlots = 0.5f;
				if (type == 338)
				{
					damage = 65;
					defense = 18;
					lifeMax = 600;
					knockBackResist = 0.4f;
				}
				else if (type == 339)
				{
					damage = 52;
					defense = 24;
					lifeMax = 700;
					knockBackResist = 0.2f;
					scale = 1.05f;
				}
				else if (type == 340)
				{
					damage = 78;
					defense = 14;
					lifeMax = 500;
					knockBackResist = 0.25f;
					scale = 0.9f;
				}
			}
			else if (type == 341)
			{
				name = "Present Mimic";
				width = 24;
				height = 24;
				aiStyle = 25;
				damage = 100;
				defense = 32;
				lifeMax = 900;
				soundHit = 4;
				soundKilled = 6;
				value = Item.buyPrice(0, 0, 20);
				knockBackResist = 0.25f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
			}
			else if (type == 342)
			{
				name = "Gingerbread Man";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 90;
				defense = 26;
				lifeMax = 750;
				soundHit = 7;
				soundKilled = 6;
				knockBackResist = 0.2f;
				value = 1800f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 343)
			{
				name = "Yeti";
				width = 38;
				height = 78;
				aiStyle = 3;
				damage = 140;
				defense = 50;
				lifeMax = 3500;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0f;
				value = 3000f;
				buffImmune[31] = false;
				npcSlots = 2f;
			}
			else if (type == 344)
			{
				name = "Everscream";
				width = 172;
				height = 130;
				aiStyle = 57;
				damage = 110;
				defense = 38;
				lifeMax = 13000;
				soundHit = 7;
				soundKilled = 5;
				knockBackResist = 0f;
				value = 10000f;
				buffImmune[20] = true;
				npcSlots = 3f;
			}
			else if (type == 345)
			{
				name = "Ice Queen";
				width = 130;
				height = 140;
				aiStyle = 60;
				damage = 120;
				defense = 38;
				lifeMax = 34000;
				soundHit = 7;
				soundKilled = 5;
				knockBackResist = 0f;
				value = 10000f;
				buffImmune[20] = true;
				noTileCollide = true;
				noGravity = true;
				npcSlots = 5f;
				coldDamage = true;
			}
			else if (type == 346)
			{
				name = "Santa-NK1";
				width = 112;
				height = 140;
				aiStyle = 61;
				damage = 120;
				defense = 56;
				lifeMax = 18000;
				soundHit = 4;
				soundKilled = 14;
				knockBackResist = 0f;
				value = 10000f;
				buffImmune[20] = true;
				npcSlots = 4f;
			}
			else if (type == 347)
			{
				name = "Elf Copter";
				width = 50;
				height = 50;
				aiStyle = 62;
				damage = 60;
				defense = 28;
				lifeMax = 1200;
				soundHit = 4;
				knockBackResist = 0.4f;
				soundKilled = 14;
				value = 1000f;
				noTileCollide = true;
				noGravity = true;
				npcSlots = 1.5f;
			}
			else if (type == 348)
			{
				name = "Nutcracker";
				width = 28;
				height = 76;
				aiStyle = 3;
				damage = 80;
				defense = 26;
				lifeMax = 1800;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.4f;
				value = 1500f;
				buffImmune[31] = false;
				npcSlots = 1.5f;
			}
			else if (type == 349)
			{
				name = "Nutcracker";
				width = 28;
				height = 76;
				aiStyle = 3;
				damage = 100;
				defense = 42;
				lifeMax = 1800;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.1f;
				value = 1500f;
				buffImmune[31] = false;
				npcSlots = 1.5f;
			}
			else if (type == 350)
			{
				name = "Elf Archer";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 70;
				defense = 30;
				lifeMax = 900;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.45f;
				value = 900f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 351)
			{
				name = "Krampus";
				width = 18;
				height = 90;
				aiStyle = 3;
				damage = 100;
				defense = 40;
				lifeMax = 2500;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.1f;
				value = 3000f;
				buffImmune[20] = true;
				buffImmune[31] = false;
				npcSlots = 1.75f;
			}
			else if (type == 352)
			{
				name = "Flocko";
				width = 54;
				height = 54;
				aiStyle = 63;
				damage = 75;
				defense = 8;
				lifeMax = 450;
				soundHit = 1;
				soundKilled = 6;
				value = 500f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				knockBackResist = 0.4f;
				noGravity = true;
				noTileCollide = true;
				npcSlots = 2f;
				coldDamage = true;
			}
			else if (type == 353)
			{
				townNPC = true;
				friendly = true;
				name = "Stylist";
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.5f;
			}
			else if (type == 354)
			{
				friendly = true;
				name = "Webbed Stylist";
				width = 18;
				height = 34;
				aiStyle = 0;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.5f;
				scale = 0.9f;
				rarity = 1;
			}
			else if (type == 355)
			{
				name = "Firefly";
				width = 10;
				height = 10;
				aiStyle = 64;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				soundHit = 1;
				soundKilled = 1;
				npcSlots = 0.2f;
				noGravity = true;
				catchItem = 1992;
			}
			else if (type == 356)
			{
				name = "Butterfly";
				width = 10;
				height = 10;
				aiStyle = 65;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				soundHit = 1;
				soundKilled = 1;
				npcSlots = 0.25f;
				noGravity = true;
				catchItem = 1994;
			}
			else if (type == 357)
			{
				name = "Worm";
				width = 10;
				height = 4;
				aiStyle = 66;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				soundHit = 1;
				soundKilled = 1;
				npcSlots = 0.1f;
				catchItem = 2002;
				friendly = true;
			}
			else if (type == 358)
			{
				name = "Lightning Bug";
				width = 12;
				height = 12;
				aiStyle = 64;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				soundHit = 1;
				soundKilled = 1;
				npcSlots = 0.2f;
				noGravity = true;
				catchItem = 2004;
			}
			else if (type == 359)
			{
				name = "Snail";
				width = 12;
				height = 12;
				aiStyle = 67;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				soundHit = 1;
				soundKilled = 1;
				npcSlots = 0.5f;
				noGravity = true;
				catchItem = 2006;
			}
			else if (type == 360)
			{
				name = "Glowing Snail";
				width = 14;
				height = 14;
				aiStyle = 67;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				soundHit = 1;
				soundKilled = 1;
				npcSlots = 0.5f;
				noGravity = true;
				catchItem = 2007;
			}
			else if (type == 361)
			{
				name = "Frog";
				width = 18;
				height = 20;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				soundHit = 1;
				soundKilled = 1;
				catchItem = 2121;
			}
			else if (type == 362)
			{
				name = "Duck";
				width = 22;
				height = 26;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				soundHit = 1;
				soundKilled = 1;
				catchItem = 2122;
			}
			else if (type == 363)
			{
				name = "Duck";
				width = 28;
				height = 22;
				aiStyle = 68;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				soundHit = 1;
				soundKilled = 1;
				catchItem = 2122;
			}
			else if (type == 364)
			{
				name = "Duck";
				width = 22;
				height = 26;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				soundHit = 1;
				soundKilled = 1;
				catchItem = 2123;
			}
			else if (type == 365)
			{
				name = "Duck";
				width = 28;
				height = 22;
				aiStyle = 68;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				soundHit = 1;
				soundKilled = 1;
				catchItem = 2123;
			}
			else if (type == 366 || type == 367)
			{
				name = "Scorpion";
				width = 26;
				height = 18;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				soundHit = 1;
				soundKilled = 1;
				catchItem = (short)(2156 + type - 366);
			}
			else if (type == 368)
			{
				townNPC = true;
				friendly = true;
				name = "Travelling Merchant";
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.5f;
			}
			else if (type == 369)
			{
				townNPC = true;
				friendly = true;
				name = "Angler";
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				soundHit = 1;
				soundKilled = 6;
				knockBackResist = 0.5f;
			}
			else if (type == 370)
			{
				name = "Duke Fishron";
				width = 150;
				height = 100;
				aiStyle = 69;
				damage = 100;
				defense = 50;
				lifeMax = 50000;
				knockBackResist = 0f;
				noTileCollide = true;
				noGravity = true;
				npcSlots = 10f;
				soundHit = 14;
				soundKilled = 20;
				value = 10000f;
				boss = true;
				netAlways = true;
				timeLeft = activeTime * 30;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[31] = true;
				buffImmune[44] = true;
			}
			else if (type == 371)
			{
				name = "Detonating Bubble";
				width = 36;
				height = 36;
				aiStyle = 70;
				damage = 100;
				defense = 0;
				lifeMax = 1;
				soundHit = 3;
				soundKilled = 3;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				alpha = 255;
			}
			else if (type == 372)
			{
				noGravity = true;
				name = "Sharkron";
				width = 120;
				height = 24;
				aiStyle = 71;
				damage = 100;
				defense = 100;
				lifeMax = 100;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0f;
				alpha = 255;
			}
			else if (type == 373)
			{
				noGravity = true;
				name = "Sharkron2";
				width = 100;
				height = 24;
				aiStyle = 71;
				damage = 120;
				defense = 100;
				lifeMax = 100;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0f;
				alpha = 255;
			}
			else if (type == 374)
			{
				name = "Truffle Worm";
				width = 20;
				height = 10;
				aiStyle = 66;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				soundHit = 1;
				soundKilled = 1;
				npcSlots = 0.15f;
				catchItem = 2673;
				rarity = 4;
			}
			else if (type == 375)
			{
				name = "Truffle Worm Digger";
				width = 10;
				height = 10;
				aiStyle = 6;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				soundHit = 1;
				soundKilled = 1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				npcSlots = 0.15f;
				catchItem = 2673;
			}
			else if (type == 376)
			{
				friendly = true;
				name = "Sleeping Angler";
				width = 34;
				height = 8;
				aiStyle = 0;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				soundHit = 1;
				soundKilled = 6;
				knockBackResist = 0.5f;
				scale = 0.9f;
			}
			else if (type == 377)
			{
				name = "Grasshopper";
				width = 14;
				height = 12;
				aiStyle = 1;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				soundHit = 1;
				soundKilled = 1;
				friendly = true;
				catchItem = 2740;
				npcSlots = 0.1f;
			}
			else if (type == 378)
			{
				npcSlots = 1f;
				name = "Chattering Teeth Bomb";
				width = 20;
				height = 26;
				aiStyle = 41;
				damage = 80;
				defense = 30;
				lifeMax = 200;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.5f;
				value = 450f;
			}
			else if (type >= 379 && type <= 380)
			{
				name = "Lunatic Cultist Archer";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 45;
				defense = 14;
				lifeMax = 210;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.55f;
				value = 1000f;
				npcSlots = 0f;
				lavaImmune = true;
				netAlways = true;
				chaseable = false;
			}
			else if (type >= 381 && type <= 382)
			{
				name = "Martian Ranger";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 50;
				defense = 25;
				lifeMax = 350;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.35f;
				value = 1000f;
			}
			else if (type == 383)
			{
				name = "Martian Officer";
				lifeMax = 300;
				defense = 50;
				damage = 75;
				width = 18;
				height = 40;
				aiStyle = 3;
				soundHit = 43;
				soundKilled = 45;
				value = 1200f;
				knockBackResist = 0.25f;
				buffImmune[31] = false;
			}
			else if (type == 384)
			{
				name = "Bubble Shield";
				lifeMax = 1000;
				width = 18;
				defense = 20;
				height = 40;
				aiStyle = 72;
				soundHit = 1;
				soundKilled = 1;
				flag = true;
				npcSlots = 0f;
				noTileCollide = true;
				canGhostHeal = false;
			}
			else if (type == 385)
			{
				name = "Martian Grunty";
				lifeMax = 750;
				defense = 30;
				damage = 80;
				width = 18;
				height = 40;
				aiStyle = 3;
				soundHit = 43;
				soundKilled = 45;
				value = 600f;
				knockBackResist = 0f;
				npcSlots = 0.75f;
			}
			else if (type == 386)
			{
				name = "Martian Engineer";
				lifeMax = 400;
				defense = 34;
				damage = 40;
				width = 18;
				height = 40;
				aiStyle = 3;
				soundHit = 43;
				soundKilled = 45;
				value = 1200f;
				knockBackResist = 0.4f;
			}
			else if (type == 387)
			{
				name = "Tesla Turret";
				width = 20;
				height = 50;
				aiStyle = 73;
				damage = 10;
				defense = 40;
				lifeMax = 200;
				soundHit = 53;
				soundKilled = 56;
				knockBackResist = 0f;
				buffImmune[31] = true;
				canGhostHeal = false;
			}
			else if (type == 388)
			{
				name = "Martian Drone";
				width = 40;
				height = 30;
				aiStyle = 74;
				damage = 60;
				defense = 16;
				lifeMax = 300;
				soundHit = 42;
				knockBackResist = 0.4f;
				soundKilled = 44;
				value = 1000f;
				noTileCollide = true;
				noGravity = true;
				npcSlots = 1.5f;
				canGhostHeal = false;
			}
			else if (type == 389)
			{
				name = "Gigazapper";
				lifeMax = 600;
				defense = 38;
				damage = 75;
				width = 18;
				height = 40;
				aiStyle = 3;
				soundHit = 39;
				soundKilled = 57;
				value = 1200f;
				npcSlots = 0.5f;
				knockBackResist = 0.3f;
			}
			else if (type == 390)
			{
				name = "Scutlix Gunner";
				damage = 65;
				defense = 30;
				lifeMax = 350;
				width = 18;
				height = 40;
				aiStyle = 75;
				soundHit = 1;
				soundKilled = 1;
				value = 1200f;
				npcSlots = 0.5f;
			}
			else if (type == 391)
			{
				name = "Scutlix";
				lifeMax = 600;
				defense = 30;
				damage = 85;
				width = 60;
				height = 40;
				aiStyle = 3;
				soundHit = 51;
				soundKilled = 54;
				value = 1200f;
				npcSlots = 0.5f;
				knockBackResist = 0.1f;
			}
			else if (type == 392)
			{
				name = "Martian Saucer";
				lifeMax = 100;
				defense = 100;
				damage = 50;
				width = 150;
				height = 80;
				aiStyle = 75;
				soundHit = 4;
				soundKilled = 14;
				value = 0f;
				npcSlots = 0f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				dontTakeDamage = true;
				flag = true;
				netAlways = true;
			}
			else if (type == 393)
			{
				name = "Saucer Turret";
				lifeMax = 5000;
				defense = 20;
				damage = 60;
				width = 40;
				height = 16;
				aiStyle = 75;
				soundHit = 4;
				soundKilled = 14;
				value = 0f;
				npcSlots = 1f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				flag = true;
				netAlways = true;
			}
			else if (type == 394)
			{
				name = "Saucer Cannon";
				lifeMax = 3500;
				defense = 20;
				damage = 60;
				width = 46;
				height = 36;
				aiStyle = 75;
				soundHit = 4;
				soundKilled = 14;
				value = 0f;
				npcSlots = 1f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				flag = true;
				netAlways = true;
			}
			else if (type == 395)
			{
				name = "Saucer Core";
				lifeMax = 10000;
				defense = 0;
				damage = 80;
				width = 46;
				height = 36;
				aiStyle = 76;
				soundHit = 4;
				soundKilled = 14;
				value = 0f;
				npcSlots = 6f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				dontTakeDamage = true;
				boss = true;
				flag = true;
				netAlways = true;
			}
			else if (type == 399)
			{
				name = "Martian Probe";
				defense = 5;
				damage = 5;
				lifeMax = 500;
				aiStyle = 80;
				width = 42;
				height = 72;
				value = 0f;
				knockBackResist = 0f;
				soundHit = 4;
				soundKilled = 14;
				npcSlots = 0f;
				noGravity = true;
				timeLeft = activeTime * 30;
				chaseable = false;
				netAlways = true;
				rarity = 1;
			}
			else if (type == 396)
			{
				name = "Moon Lord Head";
				lifeMax = 45000;
				defense = 50;
				damage = 0;
				width = 38;
				height = 56;
				aiStyle = 79;
				soundHit = 57;
				soundKilled = 62;
				value = 0f;
				npcSlots = 6f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				boss = true;
				hide = true;
				netAlways = true;
			}
			else if (type == 397)
			{
				name = "Moon Lord Hand";
				lifeMax = 25000;
				defense = 40;
				damage = 0;
				width = 46;
				height = 66;
				aiStyle = 78;
				soundHit = 57;
				soundKilled = 62;
				value = 0f;
				npcSlots = 6f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				boss = true;
				hide = true;
				netAlways = true;
			}
			else if (type == 398)
			{
				name = "Moon Lord Core";
				lifeMax = 50000;
				defense = 70;
				damage = 0;
				width = 46;
				height = 66;
				aiStyle = 77;
				soundHit = 57;
				soundKilled = 0;
				value = 0f;
				npcSlots = 6f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				dontTakeDamage = true;
				boss = true;
				behindTiles = true;
				hide = true;
				netAlways = true;
			}
			else if (type == 400)
			{
				name = "True Eye of Cthulhu";
				defense = 0;
				damage = 60;
				lifeMax = 100;
				aiStyle = 81;
				width = 60;
				height = 60;
				value = 0f;
				knockBackResist = 0f;
				soundHit = 1;
				soundKilled = 1;
				npcSlots = 0f;
				noGravity = true;
				dontTakeDamage = true;
				noTileCollide = true;
				netAlways = true;
			}
			else if (type == 401)
			{
				name = "Moon Leech Clot";
				lifeMax = 400;
				defense = 0;
				damage = 0;
				width = 30;
				height = 30;
				aiStyle = 82;
				soundHit = 57;
				soundKilled = 62;
				value = 0f;
				npcSlots = 0f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				hide = true;
			}
			else if (type == 437)
			{
				name = "Lunar Tablet";
				lifeMax = 400;
				defense = 0;
				damage = 0;
				width = 54;
				height = 54;
				aiStyle = 83;
				soundHit = 4;
				soundKilled = 14;
				value = 0f;
				npcSlots = 0f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				dontTakeDamage = true;
				netAlways = true;
			}
			else if (type == 438)
			{
				name = "Lunar Devote";
				lifeMax = 400;
				defense = 0;
				damage = 0;
				width = 22;
				height = 40;
				aiStyle = 83;
				soundHit = 1;
				soundKilled = 1;
				value = 0f;
				npcSlots = 0f;
				knockBackResist = 0f;
				lavaImmune = true;
				netAlways = true;
				chaseable = false;
			}
			else if (type == 439)
			{
				name = "Ancient Cultist";
				width = 24;
				height = 50;
				aiStyle = 84;
				damage = 50;
				defense = 42;
				lifeMax = 32000;
				knockBackResist = 0f;
				noTileCollide = true;
				noGravity = true;
				npcSlots = 10f;
				soundHit = 55;
				soundKilled = 59;
				value = 10000f;
				boss = true;
				netAlways = true;
				timeLeft = activeTime * 30;
				flag = true;
			}
			else if (type == 440)
			{
				name = "Ancient Cultist";
				width = 24;
				height = 50;
				aiStyle = 84;
				damage = 0;
				defense = 35;
				lifeMax = 10000;
				knockBackResist = 0f;
				noTileCollide = true;
				noGravity = true;
				npcSlots = 0f;
				soundHit = 2;
				soundKilled = 2;
				netAlways = true;
				timeLeft = activeTime * 30;
				flag = true;
				chaseable = false;
			}
			else if (type == 442)
			{
				name = "Gold Bird";
				width = 14;
				height = 14;
				aiStyle = 24;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				soundHit = 1;
				knockBackResist = 0.8f;
				soundKilled = 1;
				catchItem = 2889;
				npcSlots = 0.4f;
				rarity = 3;
			}
			else if (type == 443)
			{
				name = "Gold Bunny";
				width = 18;
				height = 20;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				soundHit = 1;
				soundKilled = 1;
				catchItem = 2890;
				rarity = 3;
			}
			else if (type == 444)
			{
				name = "Gold Butterfly";
				width = 10;
				height = 10;
				aiStyle = 65;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				soundHit = 1;
				soundKilled = 1;
				npcSlots = 0.25f;
				noGravity = true;
				catchItem = 2891;
				rarity = 3;
			}
			else if (type == 445)
			{
				name = "Gold Frog";
				width = 18;
				height = 20;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				soundHit = 1;
				soundKilled = 1;
				catchItem = 2892;
				rarity = 3;
			}
			else if (type == 446)
			{
				name = "Gold Grasshopper";
				width = 14;
				height = 12;
				aiStyle = 1;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				soundHit = 1;
				soundKilled = 1;
				friendly = true;
				catchItem = 2893;
				npcSlots = 0.1f;
				rarity = 3;
			}
			else if (type == 447)
			{
				name = "Gold Mouse";
				width = 14;
				height = 12;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				soundHit = 1;
				soundKilled = 4;
				npcSlots = 0.25f;
				catchItem = 2894;
				rarity = 3;
			}
			else if (type == 448)
			{
				name = "Gold Worm";
				width = 10;
				height = 4;
				aiStyle = 66;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				soundHit = 1;
				soundKilled = 1;
				npcSlots = 0.1f;
				catchItem = 2895;
				friendly = true;
				rarity = 3;
			}
			else if (type == 449)
			{
				name = "Skeleton";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 20;
				defense = 8;
				lifeMax = 60;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.5f;
				value = 100f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 450)
			{
				name = "Headache Skeleton";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 20;
				defense = 12;
				lifeMax = 55;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.5f;
				value = 130f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 451)
			{
				name = "Misassembled Skeleton";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 18;
				defense = 8;
				lifeMax = 65;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.5f;
				value = 120f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 452)
			{
				name = "Pantless Skeleton";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 22;
				defense = 8;
				lifeMax = 60;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.5f;
				value = 110f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 453)
			{
				friendly = true;
				name = "Skeleton Merchant";
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 30;
				lifeMax = 250;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.5f;
				npcSlots = 7f;
			}
			else if (type == 454)
			{
				noTileCollide = true;
				npcSlots = 5f;
				name = "Phantasm Dragon Head";
				width = 32;
				height = 32;
				aiStyle = 6;
				netAlways = true;
				damage = 80;
				defense = 10;
				lifeMax = 4000;
				soundHit = 56;
				soundKilled = 60;
				noGravity = true;
				knockBackResist = 0f;
				value = 0f;
				scale = 1f;
				flag = true;
				alpha = 255;
			}
			else if (type == 459)
			{
				noTileCollide = true;
				name = "Phantasm Dragon Tail";
				width = 32;
				height = 32;
				aiStyle = 6;
				netAlways = true;
				damage = 40;
				defense = 20;
				lifeMax = 4000;
				soundHit = 56;
				soundKilled = 60;
				noGravity = true;
				knockBackResist = 0f;
				value = 0f;
				scale = 1f;
				flag = true;
				alpha = 255;
				dontCountMe = true;
			}
			else if (type == 455 || type == 456 || type == 457 || type == 458)
			{
				noTileCollide = true;
				name = "Phantasm Dragon Body";
				width = 32;
				height = 32;
				aiStyle = 6;
				netAlways = true;
				damage = 40;
				defense = 20;
				lifeMax = 4000;
				soundHit = 56;
				soundKilled = 60;
				noGravity = true;
				knockBackResist = 0f;
				value = 0f;
				scale = 1f;
				flag = true;
				alpha = 255;
				dontCountMe = true;
			}
			else if (type == 464)
			{
				name = "Crimson Bunny";
				width = 18;
				height = 20;
				aiStyle = 3;
				damage = 21;
				defense = 5;
				lifeMax = 75;
				soundHit = 1;
				soundKilled = 1;
				value = 500f;
				buffImmune[31] = false;
			}
			else if (type == 465)
			{
				noGravity = true;
				name = "Crimson Goldfish";
				width = 18;
				height = 20;
				aiStyle = 16;
				damage = 31;
				defense = 7;
				lifeMax = 110;
				soundHit = 1;
				soundKilled = 1;
				value = 500f;
			}
			else if (type == 470)
			{
				name = "Crimtane Penguin";
				width = 16;
				height = 34;
				aiStyle = 3;
				damage = 21;
				defense = 5;
				lifeMax = 75;
				soundHit = 1;
				soundKilled = 1;
				value = 500f;
				buffImmune[31] = false;
			}
			else if (type == 473 || type == 474 || type == 475 || type == 476)
			{
				name = "Big Mimic";
				width = 28;
				height = 44;
				aiStyle = 87;
				damage = 90;
				defense = 34;
				lifeMax = 3500;
				soundHit = 4;
				soundKilled = 6;
				value = 30000f;
				knockBackResist = 0.1f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				rarity = 2;
			}
			else if (type == 480)
			{
				name = "Medusa";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 30;
				defense = 10;
				lifeMax = 200;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.15f;
				value = 1000f;
			}
			else if (type == 481)
			{
				name = "Hoplite";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 24;
				defense = 12;
				lifeMax = 80;
				soundHit = 2;
				soundKilled = 2;
				knockBackResist = 0.4f;
				value = 300f;
				buffImmune[31] = false;
				buffImmune[20] = true;
			}
			else if (type == 482)
			{
				name = "Grolem";
				width = 28;
				height = 48;
				aiStyle = 3;
				damage = 30;
				defense = 18;
				lifeMax = 110;
				soundHit = 41;
				soundKilled = 44;
				knockBackResist = 0.35f;
				value = 500f;
				buffImmune[20] = true;
				buffImmune[24] = true;
			}
			else if (type == 483)
			{
				npcSlots = 0.5f;
				name = "Grelimental";
				width = 20;
				height = 30;
				aiStyle = 91;
				damage = 28;
				defense = 16;
				lifeMax = 50;
				soundHit = 7;
				knockBackResist = 0.6f;
				soundKilled = 6;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[24] = true;
			}
			else if (type >= 484 && type <= 487)
			{
				name = "Grub";
				width = 10;
				height = 4;
				aiStyle = 66;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				soundHit = 1;
				soundKilled = 1;
				npcSlots = 0.1f;
				catchItem = (short)(3191 + type - 484);
				friendly = true;
			}
			else if (type == 488)
			{
				name = "Target Dummy";
				width = 18;
				height = 40;
				aiStyle = 92;
				damage = 0;
				defense = 0;
				lifeMax = 1000;
				soundHit = 15;
				soundKilled = 2;
				knockBackResist = 0f;
				value = 0f;
				immortal = true;
				netAlways = true;
			}
			else if (type == 489)
			{
				name = "Blood Zombie";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 20;
				defense = 8;
				lifeMax = 75;
				soundHit = 18;
				soundKilled = 21;
				knockBackResist = 0.4f;
				value = 150f;
				buffImmune[31] = false;
			}
			else if (type == 490)
			{
				noGravity = true;
				name = "Drippler";
				width = 28;
				height = 30;
				aiStyle = 22;
				damage = 28;
				defense = 14;
				lifeMax = 50;
				soundHit = 19;
				knockBackResist = 0.6f;
				soundKilled = 22;
				value = 150f;
				buffImmune[31] = false;
			}
			else if (type == 491)
			{
				noGravity = true;
				name = "Flying Dutchman";
				width = 350;
				height = 120;
				aiStyle = 93;
				damage = 0;
				defense = 100;
				lifeMax = 50;
				soundHit = 19;
				knockBackResist = 0f;
				soundKilled = 22;
				value = 0f;
				flag = true;
				dontTakeDamage = true;
				netAlways = true;
			}
			else if (type == 492)
			{
				name = "Dutchman Cannon";
				lifeMax = 2000;
				defense = 20;
				damage = 30;
				width = 30;
				height = 30;
				aiStyle = 75;
				soundHit = 4;
				soundKilled = 14;
				value = 0f;
				npcSlots = 1f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				flag = true;
				hide = true;
				netAlways = true;
			}
			else if (type >= 494 && type <= 495)
			{
				name = "Crawdad";
				width = 28;
				height = 22;
				aiStyle = 3;
				damage = 28;
				defense = 6;
				lifeMax = 50;
				soundHit = 33;
				soundKilled = 36;
				value = 120f;
			}
			else if (type >= 496 && type <= 497)
			{
				name = "Giant Shelly";
				width = 28;
				height = 22;
				aiStyle = 39;
				damage = 16;
				defense = 12;
				lifeMax = 50;
				soundHit = 38;
				soundKilled = 41;
				knockBackResist = 0.75f;
				value = 120f;
			}
			else if (type >= 498 && type <= 506)
			{
				name = "Salamander";
				width = 24;
				height = 44;
				aiStyle = 3;
				damage = 18;
				defense = 10;
				lifeMax = 65;
				soundHit = 50;
				soundKilled = 53;
				knockBackResist = 0.45f;
				value = 120f;
				buffImmune[31] = false;
			}
			else if (type == 441)
			{
				townNPC = true;
				friendly = true;
				name = "Tax Collector";
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.5f;
			}
			else if (type == 513)
			{
				npcSlots = 4f;
				name = "Tomb Crawler Head";
				width = 22;
				height = 22;
				aiStyle = 6;
				damage = 34;
				defense = 0;
				lifeMax = 80;
				soundHit = 1;
				soundKilled = 1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 140f;
			}
			else if (type == 514)
			{
				name = "Tomb Crawler Body";
				width = 22;
				height = 22;
				aiStyle = 6;
				netAlways = true;
				damage = 18;
				defense = 12;
				lifeMax = 80;
				soundHit = 1;
				soundKilled = 1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 140f;
				dontCountMe = true;
				npcSlots = 0f;
			}
			else if (type == 515)
			{
				name = "Tomb Crawler Tail";
				width = 22;
				height = 22;
				aiStyle = 6;
				netAlways = true;
				damage = 16;
				defense = 20;
				lifeMax = 80;
				soundHit = 1;
				soundKilled = 1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 140f;
				dontCountMe = true;
				npcSlots = 0f;
			}
			else if (type == 510)
			{
				npcSlots = 5f;
				name = "Dune Splicer Head";
				width = 34;
				height = 34;
				aiStyle = 6;
				damage = 58;
				defense = 0;
				lifeMax = 400;
				soundHit = 1;
				soundKilled = 1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 700f;
			}
			else if (type == 511)
			{
				name = "Dune Splicer Body";
				width = 34;
				height = 34;
				aiStyle = 6;
				netAlways = true;
				damage = 54;
				defense = 20;
				lifeMax = 400;
				soundHit = 1;
				soundKilled = 1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 700f;
				dontCountMe = true;
				npcSlots = 0f;
			}
			else if (type == 512)
			{
				name = "Dune Splicer Tail";
				width = 34;
				height = 34;
				aiStyle = 6;
				netAlways = true;
				damage = 50;
				defense = 30;
				lifeMax = 400;
				soundHit = 1;
				soundKilled = 1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 700f;
				dontCountMe = true;
				npcSlots = 0f;
			}
			else if (type == 508)
			{
				name = "Antlion Charger";
				width = 33;
				height = 31;
				aiStyle = 3;
				damage = 24;
				defense = 16;
				lifeMax = 70;
				soundHit = 31;
				soundKilled = 34;
				knockBackResist = 0.2f;
				value = 80f;
				buffImmune[31] = false;
				npcSlots = 0.8f;
			}
			else if (type == 509)
			{
				name = "Antlion Swarmer";
				width = 40;
				height = 31;
				aiStyle = 44;
				damage = 30;
				defense = 12;
				lifeMax = 50;
				knockBackResist = 0.6f;
				soundHit = 32;
				soundKilled = 35;
				value = 90f;
				buffImmune[31] = false;
				npcSlots = 0.8f;
			}
			else if (type >= 524 && type <= 527)
			{
				name = "Ghoul";
				width = 24;
				height = 44;
				aiStyle = 3;
				damage = 50;
				defense = 26;
				lifeMax = 180;
				soundHit = 37;
				soundKilled = 40;
				knockBackResist = 0.6f;
				value = 500f;
				buffImmune[31] = false;
				npcSlots = 0.5f;
				switch (type)
				{
				case 525:
					lifeMax += 70;
					defense += 4;
					damage += 10;
					knockBackResist -= 0.1f;
					value += 150f;
					break;
				case 526:
					lifeMax += 40;
					defense += 6;
					damage += 14;
					knockBackResist -= 0.1f;
					value += 150f;
					break;
				case 527:
					lifeMax += 120;
					defense += 6;
					damage += 4;
					knockBackResist -= 0.2f;
					value += 250f;
					break;
				}
			}
			else if (type >= 528 && type <= 529)
			{
				name = "Lamia";
				width = 24;
				height = 44;
				aiStyle = 3;
				damage = 52;
				defense = 28;
				lifeMax = 350;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.35f;
				value = 600f;
				buffImmune[31] = false;
			}
			else if (type == 530)
			{
				name = "Ravager Scorpion";
				width = 50;
				height = 20;
				aiStyle = 3;
				damage = 66;
				defense = 24;
				lifeMax = 320;
				soundHit = 13;
				soundKilled = 19;
				knockBackResist = 0.5f;
				value = 600f;
				timeLeft = activeTime * 2;
				buffImmune[20] = true;
				buffImmune[70] = true;
			}
			else if (type == 531)
			{
				noGravity = true;
				name = "Ravager Scorpion";
				width = 36;
				height = 36;
				aiStyle = 40;
				damage = 66;
				defense = 24;
				lifeMax = 320;
				soundHit = 13;
				soundKilled = 19;
				knockBackResist = 0.5f;
				value = 600f;
				timeLeft = activeTime * 2;
				buffImmune[20] = true;
				buffImmune[70] = true;
			}
			else if (type == 532)
			{
				name = "Basilisk";
				width = 32;
				height = 31;
				aiStyle = 3;
				damage = 65;
				defense = 34;
				lifeMax = 270;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.3f;
				value = 800f;
				buffImmune[31] = false;
				npcSlots = 0.75f;
			}
			else if (type == 533)
			{
				name = "Desert Spirit";
				width = 18;
				height = 40;
				aiStyle = 8;
				damage = 40;
				defense = 20;
				lifeMax = 220;
				soundHit = 1;
				soundKilled = 6;
				knockBackResist = 0f;
				value = 1200f;
				npcSlots = 2f;
				flag = true;
			}
			else if (type == 493)
			{
				name = "Stardust Tower";
				lifeMax = 20000;
				defense = 20;
				damage = 0;
				width = 130;
				height = 270;
				aiStyle = 94;
				soundHit = 1;
				soundKilled = 1;
				value = 0f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				flag = true;
				npcSlots = 0f;
			}
			else if (type == 402)
			{
				noTileCollide = true;
				npcSlots = 1f;
				name = "Milkyway Weaver";
				width = 32;
				height = 32;
				aiStyle = 6;
				netAlways = true;
				damage = 80;
				defense = 10;
				lifeMax = 1200;
				soundHit = 1;
				soundKilled = 1;
				noGravity = true;
				knockBackResist = 0f;
				value = 0f;
				scale = 1f;
				flag = true;
			}
			else if (type == 405)
			{
				name = "Star Cell";
				width = 44;
				height = 44;
				aiStyle = 85;
				damage = 120;
				defense = 50;
				lifeMax = 300;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.5f;
				noGravity = true;
				buffImmune[31] = true;
				npcSlots = 2f;
			}
			else if (type == 406)
			{
				name = "Star Cell";
				width = 22;
				height = 22;
				aiStyle = 95;
				damage = 70;
				defense = 0;
				lifeMax = 300;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.4f;
				noGravity = true;
				buffImmune[31] = true;
			}
			else if (type == 411)
			{
				name = "Stardust Soldier";
				width = 22;
				height = 56;
				aiStyle = 3;
				damage = 80;
				defense = 34;
				lifeMax = 700;
				soundHit = 6;
				soundKilled = 1;
				knockBackResist = 0.4f;
				buffImmune[31] = false;
			}
			else if (type == 409)
			{
				name = "Twinkle Popper";
				width = 34;
				height = 42;
				aiStyle = 3;
				damage = 70;
				defense = 40;
				lifeMax = 800;
				soundHit = 6;
				soundKilled = 1;
				knockBackResist = 0.4f;
				buffImmune[31] = false;
				npcSlots = 3f;
			}
			else if (type == 410)
			{
				name = "Twinkle";
				width = 22;
				height = 22;
				aiStyle = 26;
				damage = 80;
				defense = 10;
				lifeMax = 200;
				soundHit = 1;
				soundKilled = 5;
				knockBackResist = 0.3f;
				buffImmune[31] = false;
				npcSlots = 0.5f;
			}
			else if (type == 407)
			{
				name = "Flow Invader";
				width = 40;
				height = 60;
				aiStyle = 96;
				damage = 70;
				defense = 38;
				lifeMax = 1500;
				soundHit = 1;
				soundKilled = 1;
				noGravity = true;
				knockBackResist = 0.03f;
				buffImmune[31] = true;
				npcSlots = 3f;
			}
			else if (type == 507)
			{
				name = "Nebula Tower";
				lifeMax = 20000;
				defense = 20;
				damage = 0;
				width = 130;
				height = 270;
				aiStyle = 94;
				soundHit = 1;
				soundKilled = 1;
				value = 0f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				flag = true;
				npcSlots = 0f;
			}
			else if (type == 423)
			{
				name = "Nebula Beast";
				width = 50;
				height = 44;
				aiStyle = 26;
				damage = 90;
				defense = 46;
				lifeMax = 850;
				soundHit = 6;
				soundKilled = 1;
				knockBackResist = 0.2f;
				flag = true;
				npcSlots = 1f;
			}
			else if (type == 421)
			{
				name = "Nebula Headcrab";
				width = 44;
				height = 44;
				aiStyle = 85;
				damage = 70;
				defense = 34;
				lifeMax = 330;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.5f;
				noGravity = true;
				buffImmune[31] = true;
				npcSlots = 1f;
			}
			else if (type == 424)
			{
				name = "Nebula Soldier";
				width = 22;
				height = 56;
				aiStyle = 3;
				damage = 80;
				defense = 30;
				lifeMax = 700;
				soundHit = 1;
				soundKilled = 5;
				knockBackResist = 0.6f;
				buffImmune[31] = false;
				npcSlots = 2f;
			}
			else if (type == 420)
			{
				name = "Nebula Floater";
				width = 40;
				height = 40;
				aiStyle = 97;
				damage = 75;
				defense = 20;
				lifeMax = 1300;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.5f;
				noTileCollide = true;
				noGravity = true;
				npcSlots = 3f;
			}
			else if (type == 422)
			{
				name = "Vortex Tower";
				lifeMax = 20000;
				defense = 20;
				damage = 0;
				width = 130;
				height = 270;
				aiStyle = 94;
				soundHit = 1;
				soundKilled = 1;
				value = 0f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				flag = true;
				npcSlots = 0f;
			}
			else if (type == 425)
			{
				name = "Vortex Rifleman";
				width = 30;
				height = 56;
				aiStyle = 3;
				damage = 100;
				defense = 40;
				lifeMax = 800;
				soundHit = 1;
				soundKilled = 6;
				knockBackResist = 0.4f;
				buffImmune[31] = false;
			}
			else if (type == 429)
			{
				name = "Vortex Soldier";
				width = 22;
				height = 56;
				aiStyle = 3;
				damage = 90;
				defense = 34;
				lifeMax = 700;
				soundHit = 1;
				soundKilled = 5;
				knockBackResist = 0.6f;
				buffImmune[31] = false;
				npcSlots = 2f;
			}
			else if (type == 428)
			{
				name = "Alien Larva";
				width = 24;
				height = 26;
				aiStyle = 3;
				damage = 50;
				defense = 6;
				lifeMax = 200;
				soundHit = 1;
				soundKilled = 1;
			}
			else if (type == 427)
			{
				name = "Alien Hornet";
				width = 40;
				height = 28;
				aiStyle = 3;
				damage = 75;
				defense = 20;
				lifeMax = 500;
				soundHit = 1;
				soundKilled = 6;
				knockBackResist = 0.5f;
				buffImmune[31] = false;
				npcSlots = 0.5f;
			}
			else if (type == 426)
			{
				name = "Alien Queen";
				width = 50;
				height = 62;
				aiStyle = 3;
				damage = 100;
				defense = 44;
				lifeMax = 1000;
				soundHit = 1;
				soundKilled = 6;
				knockBackResist = 0.3f;
				buffImmune[31] = false;
			}
			else if (type == 517)
			{
				name = "Solar Tower";
				lifeMax = 20000;
				defense = 20;
				damage = 0;
				width = 130;
				height = 270;
				aiStyle = 94;
				soundHit = 1;
				soundKilled = 1;
				value = 0f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				flag = true;
				npcSlots = 0f;
			}
			else if (type == 412)
			{
				name = "Crawltipede";
				width = 20;
				height = 20;
				aiStyle = 6;
				netAlways = true;
				damage = 150;
				defense = 1000;
				lifeMax = 10000;
				soundHit = 11;
				soundKilled = 22;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				dontTakeDamage = true;
				npcSlots = 2f;
			}
			else if (type == 413)
			{
				name = "Crawltipede";
				width = 20;
				height = 20;
				aiStyle = 6;
				netAlways = true;
				damage = 100;
				defense = 1000;
				lifeMax = 10000;
				soundHit = 11;
				soundKilled = 22;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				dontCountMe = true;
				dontTakeDamage = true;
				npcSlots = 0f;
			}
			else if (type == 414)
			{
				name = "Crawltipede";
				width = 20;
				height = 20;
				aiStyle = 6;
				netAlways = true;
				damage = 50;
				defense = 0;
				lifeMax = 10000;
				soundHit = 8;
				soundKilled = 22;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				dontCountMe = true;
				takenDamageMultiplier = 10f;
				npcSlots = 0f;
			}
			else if (type == 415)
			{
				name = "Drakomire";
				lifeMax = 800;
				defense = 32;
				damage = 55;
				width = 60;
				height = 40;
				aiStyle = 3;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.2f;
			}
			else if (type == 416)
			{
				name = "Drakomire Rider";
				damage = 80;
				defense = 28;
				lifeMax = 800;
				width = 18;
				height = 40;
				aiStyle = 75;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.2f;
			}
			else if (type == 518)
			{
				name = "Solar Spearman";
				lifeMax = 1000;
				defense = 28;
				damage = 80;
				width = 22;
				height = 56;
				aiStyle = 3;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.4f;
			}
			else if (type == 417)
			{
				npcSlots = 2f;
				name = "Sroller";
				width = 46;
				height = 32;
				aiStyle = 39;
				damage = 80;
				defense = 34;
				lifeMax = 700;
				soundHit = 7;
				knockBackResist = 0f;
				soundKilled = 5;
			}
			else if (type == 418)
			{
				name = "Corite";
				width = 38;
				height = 38;
				aiStyle = 74;
				damage = 70;
				defense = 26;
				lifeMax = 600;
				soundHit = 3;
				soundKilled = 3;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0.2f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
			}
			else if (type == 419)
			{
				name = "Solar Solenian";
				lifeMax = 800;
				defense = 30;
				damage = 90;
				width = 22;
				height = 56;
				aiStyle = 3;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.4f;
			}
			else if (type == 516)
			{
				name = "Solar Flare";
				width = 26;
				height = 26;
				aiStyle = 9;
				damage = 100;
				defense = 0;
				lifeMax = 1;
				soundHit = 0;
				soundKilled = 0;
				noGravity = true;
				noTileCollide = false;
				alpha = 0;
				knockBackResist = 0f;
			}
			else if (type == 519)
			{
				name = "Solar Goop";
				width = 26;
				height = 26;
				aiStyle = 99;
				damage = 120;
				defense = 0;
				lifeMax = 1;
				soundHit = 0;
				soundKilled = 0;
				noGravity = true;
				noTileCollide = false;
				alpha = 0;
				knockBackResist = 0f;
			}
			else if (type == 162)
			{
				name = "Frankenstein";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 65;
				defense = 18;
				lifeMax = 350;
				soundHit = 1;
				soundKilled = 2;
				knockBackResist = 0.3f;
				value = 600f;
				buffImmune[31] = false;
			}
			else if (type == 166)
			{
				name = "Swamp Thing";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 70;
				defense = 26;
				lifeMax = 450;
				soundHit = 1;
				soundKilled = 2;
				knockBackResist = 0.2f;
				value = 1000f;
				buffImmune[31] = false;
				buffImmune[20] = true;
			}
			else if (type == 253)
			{
				noGravity = true;
				noTileCollide = true;
				name = "Reaper";
				width = 24;
				height = 44;
				aiStyle = 22;
				damage = 80;
				defense = 22;
				lifeMax = 700;
				soundHit = 49;
				soundKilled = 51;
				alpha = 100;
				value = 1500f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				knockBackResist = 0.6f;
			}
			else if (type == 158)
			{
				npcSlots = 2f;
				name = "Vampire";
				width = 22;
				height = 22;
				aiStyle = 14;
				damage = 60;
				defense = 32;
				lifeMax = 750;
				soundHit = 1;
				knockBackResist = 0.75f;
				soundKilled = 6;
				value = 5000f;
				buffImmune[31] = false;
			}
			else if (type == 159)
			{
				npcSlots = 2f;
				name = "Vampire";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 80;
				defense = 24;
				lifeMax = 750;
				soundHit = 1;
				soundKilled = 6;
				knockBackResist = 0.4f;
				value = 5000f;
				buffImmune[31] = false;
			}
			else if (type == 460)
			{
				name = "Butcher";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 70;
				defense = 30;
				lifeMax = 700;
				soundHit = 7;
				soundKilled = 17;
				knockBackResist = 0.25f;
				value = 1000f;
				buffImmune[31] = false;
			}
			else if (type == 461)
			{
				name = "Creature from the Deep";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 60;
				defense = 22;
				lifeMax = 400;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.3f;
				value = 1000f;
			}
			else if (type == 462)
			{
				name = "Fritz";
				width = 20;
				height = 24;
				aiStyle = 3;
				damage = 70;
				defense = 14;
				lifeMax = 270;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.7f;
				value = 600f;
				buffImmune[31] = false;
				npcSlots = 0.5f;
			}
			else if (type == 463)
			{
				name = "Nailhead";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 100;
				defense = 34;
				lifeMax = 4000;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.1f;
				value = 3000f;
			}
			else if (type == 466)
			{
				name = "Psycho";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 70;
				defense = 40;
				lifeMax = 550;
				soundHit = 48;
				soundKilled = 50;
				knockBackResist = 0.5f;
				value = 1500f;
			}
			else if (type == 467)
			{
				name = "Deadly Sphere";
				width = 22;
				height = 22;
				aiStyle = 85;
				damage = 100;
				defense = 80;
				lifeMax = 350;
				soundHit = 34;
				soundKilled = 37;
				value = 900f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				knockBackResist = 0.7f;
				noGravity = true;
			}
			else if (type == 469)
			{
				name = "The Possessed";
				width = 38;
				height = 26;
				aiStyle = 3;
				damage = 68;
				defense = 28;
				lifeMax = 600;
				soundHit = 47;
				soundKilled = 49;
				knockBackResist = 0.35f;
				value = 1300f;
			}
			else if (type == 468)
			{
				name = "Dr. Man Fly";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 65;
				defense = 24;
				lifeMax = 500;
				soundHit = 35;
				soundKilled = 38;
				knockBackResist = 0.6f;
				value = 1300f;
			}
			else if (type == 477)
			{
				noGravity = true;
				name = "Mothron";
				width = 80;
				height = 50;
				aiStyle = 88;
				damage = 80;
				defense = 30;
				lifeMax = 6000;
				soundHit = 44;
				soundKilled = 46;
				value = 50000f;
				knockBackResist = 0.2f;
				buffImmune[20] = true;
			}
			else if (type == 478)
			{
				name = "Mothron Egg";
				width = 34;
				height = 34;
				aiStyle = 89;
				damage = 0;
				defense = 30;
				lifeMax = 200;
				soundHit = 1;
				soundKilled = 1;
				value = 0f;
				knockBackResist = 0.7f;
				flag = true;
				npcSlots = 0f;
			}
			else if (type == 479)
			{
				name = "Mothron Spawn";
				width = 46;
				height = 30;
				aiStyle = 90;
				damage = 50;
				defense = 14;
				lifeMax = 700;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.3f;
				value = 0f;
				npcSlots = 0.1f;
			}
			else if (type == 26)
			{
				name = "Goblin Peon";
				scale = 0.9f;
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 12;
				defense = 4;
				lifeMax = 60;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.8f;
				value = 100f;
				buffImmune[31] = false;
			}
			else if (type == 27)
			{
				name = "Goblin Thief";
				scale = 0.95f;
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 20;
				defense = 6;
				lifeMax = 80;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.7f;
				value = 200f;
				buffImmune[31] = false;
			}
			else if (type == 28)
			{
				name = "Goblin Warrior";
				scale = 1.1f;
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 25;
				defense = 8;
				lifeMax = 110;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.5f;
				value = 150f;
				buffImmune[31] = false;
			}
			else if (type == 29)
			{
				name = "Goblin Sorcerer";
				width = 18;
				height = 40;
				aiStyle = 8;
				damage = 20;
				defense = 2;
				lifeMax = 40;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.6f;
				value = 200f;
			}
			else if (type == 30)
			{
				name = "Chaos Ball";
				width = 16;
				height = 16;
				aiStyle = 9;
				damage = 20;
				defense = 0;
				lifeMax = 1;
				soundHit = 3;
				soundKilled = 3;
				noGravity = true;
				noTileCollide = true;
				alpha = 100;
				knockBackResist = 0f;
			}
			else if (type == 111)
			{
				name = "Goblin Archer";
				scale = 0.95f;
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 20;
				defense = 6;
				lifeMax = 80;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.7f;
				value = 200f;
				buffImmune[31] = false;
			}
			else if (type == 471)
			{
				name = "Goblin Summoner";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 80;
				defense = 26;
				lifeMax = 2000;
				soundHit = 40;
				soundKilled = 42;
				knockBackResist = 0.15f;
				value = 5000f;
				flag = true;
			}
			else if (type == 472)
			{
				name = "Shadowflame Apparition";
				width = 40;
				height = 24;
				aiStyle = 86;
				damage = 50;
				defense = 18;
				lifeMax = 180;
				soundHit = 52;
				soundKilled = 55;
				knockBackResist = 0f;
				value = 0f;
				flag = true;
				npcSlots = 0.1f;
			}
			else if (type == 520)
			{
				name = "Martian Walker";
				width = 34;
				height = 110;
				aiStyle = 3;
				damage = 60;
				defense = 40;
				lifeMax = 2000;
				soundHit = 4;
				soundKilled = 14;
				knockBackResist = 0f;
				buffImmune[20] = true;
				buffImmune[24] = true;
			}
			else if (type == 521)
			{
				name = "Ancient Vision";
				width = 60;
				height = 60;
				aiStyle = 86;
				damage = 90;
				defense = 30;
				lifeMax = 2000;
				soundHit = 1;
				soundKilled = 6;
				knockBackResist = 0f;
				flag = true;
			}
			else if (type == 522)
			{
				name = "Ancient Light";
				width = 26;
				height = 26;
				aiStyle = 100;
				damage = 120;
				defense = 0;
				lifeMax = 1;
				soundHit = 0;
				soundKilled = 0;
				noGravity = true;
				noTileCollide = true;
				alpha = 0;
				knockBackResist = 0f;
				chaseable = false;
			}
			else if (type == 523)
			{
				name = "Ending's Prophecy";
				width = 42;
				height = 42;
				aiStyle = 101;
				damage = 30;
				defense = 0;
				lifeMax = 500;
				soundHit = 1;
				soundKilled = 6;
				noGravity = true;
				noTileCollide = true;
				alpha = 0;
				knockBackResist = 0f;
				chaseable = false;
				alpha = 255;
				canGhostHeal = false;
			}
			else if (type == 534)
			{
				name = "Tortured Soul";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 14;
				defense = 20;
				lifeMax = 400;
				soundHit = 1;
				soundKilled = 1;
				knockBackResist = 0.3f;
				value = 0f;
				buffImmune[31] = false;
				lavaImmune = true;
				netAlways = true;
				rarity = 1;
			}
			else if (type == 535)
			{
				name = "Spiked Slime";
				width = 24;
				height = 18;
				aiStyle = 1;
				damage = 14;
				defense = 5;
				lifeMax = 50;
				scale = 1.1f;
				soundHit = 1;
				soundKilled = 1;
				alpha = 0;
				value = 40f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 536)
			{
				name = "The Bride";
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 14;
				defense = 8;
				lifeMax = 200;
				soundHit = 1;
				soundKilled = 2;
				knockBackResist = 0.5f;
				value = 1000f;
				buffImmune[31] = false;
				rarity = 2;
			}
			else if (type == 537)
			{
				npcSlots = 2f;
				name = "Sand Slime";
				width = 30;
				height = 24;
				aiStyle = 1;
				damage = 18;
				defense = 5;
				lifeMax = 60;
				soundHit = 1;
				soundKilled = 1;
				alpha = 50;
				color = new Color(255, 250, 0, 0) * 0.2f;
				value = 75f;
				knockBackResist = 0.6f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 538)
			{
				name = "Squirrel";
				width = 18;
				height = 20;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				soundHit = 1;
				soundKilled = 1;
				catchItem = 3563;
			}
			else if (type == 539)
			{
				name = "Squirrel";
				width = 18;
				height = 20;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				soundHit = 1;
				soundKilled = 1;
				catchItem = 3564;
				rarity = 3;
			}
			if (flag)
			{
				for (int num2 = 0; num2 < 191; num2++)
				{
					buffImmune[num2] = true;
				}
			}
			if (Main.dedServ)
			{
				frame = default(Rectangle);
			}
			else if (Main.NPCLoaded[type])
			{
				frame = new Rectangle(0, 0, Main.npcTexture[type].Width, Main.npcTexture[type].Height / Main.npcFrameCount[type]);
			}
			else
			{
				setFrameSize = true;
			}
			if (scaleOverride > 0f)
			{
				int num3 = (int)((float)width * scale);
				int num4 = (int)((float)height * scale);
				position.X += num3 / 2;
				position.Y += num4;
				scale = scaleOverride;
				width = (int)((float)width * scale);
				height = (int)((float)height * scale);
				if (height == 16 || height == 32)
				{
					height++;
				}
				position.X -= width / 2;
				position.Y -= height;
			}
			else
			{
				width = (int)((float)width * scale);
				height = (int)((float)height * scale);
			}
			if (buffImmune[20])
			{
				buffImmune[70] = true;
			}
			if (buffImmune[39])
			{
				buffImmune[153] = true;
			}
			life = lifeMax;
			defDamage = damage;
			defDefense = defense;
			netID = type;
			if (Main.expertMode)
			{
				scaleStats();
			}
		}

		public static void setWorldMonsters()
		{
			Random random = new Random(Main.worldID);
			int num = random.Next(3);
			int num2 = random.Next(3);
			while (num == num2)
			{
				num = random.Next(3);
			}
			for (int i = 0; i < 2; i++)
			{
				int num3 = num;
				if (i == 1)
				{
					num3 = num2;
				}
				for (int j = 0; j < 3; j++)
				{
					switch (num3)
					{
					case 0:
						cavernMonsterType[i, j] = random.Next(494, 496);
						break;
					case 1:
						cavernMonsterType[i, j] = random.Next(496, 498);
						break;
					default:
						cavernMonsterType[i, j] = random.Next(498, 507);
						break;
					}
				}
			}
		}

		public void scaleStats()
		{
			if (!Main.expertMode)
			{
				return;
			}
			if (friendly)
			{
				int life2 = life;
				int num7 = 250;
			}
			if ((type < 0 || !NPCID.Sets.NeedsExpertScaling[type]) && (life <= 5 || damage == 0 || friendly || townNPC))
			{
				return;
			}
			bool flag = type >= 0 && NPCID.Sets.ProjectileNPC[type];
			if (type != 5 && (type < 13 || type > 15) && type != 267 && (type < 113 || type > 119) && Main.hardMode && !boss && lifeMax < 1000)
			{
				int num = damage + defense + lifeMax / 4;
				int num2 = 80;
				if (downedPlantBoss)
				{
					num2 += 20;
				}
				if (num < num2)
				{
					float num3 = num2 / num;
					damage = (int)((double)((float)damage * num3) * 0.9);
					if (!flag)
					{
						defense = (int)((float)defense * num3);
						lifeMax = (int)((double)((float)lifeMax * num3) * 1.1);
						value = (int)((double)(value * num3) * 0.8);
					}
				}
			}
			if (!flag)
			{
				value = (int)((double)value * 2.5);
				lifeMax = (int)((float)lifeMax * Main.expertLife);
			}
			damage = (int)((float)damage * Main.expertDamage);
			knockBackResist *= Main.expertKnockBack;
			int num4 = 0;
			float num5 = 1f;
			float num6 = 0.35f;
			if (Main.netMode != 0)
			{
				for (int i = 0; i < 16; i++)
				{
					if (Main.player[i].active)
					{
						num4++;
					}
				}
				for (int j = 1; j < num4; j++)
				{
					num5 += num6;
					num6 += (1f - num6) / 3f;
				}
			}
			if (num5 > 8f)
			{
				num5 = (num5 * 2f + 8f) / 3f;
			}
			if (num5 > 1000f)
			{
				num5 = 1000f;
			}
			if (type == 5)
			{
				lifeMax = (int)((float)lifeMax * 0.75f);
			}
			if (type == 4)
			{
				lifeMax = (int)((double)lifeMax * 0.65 * (double)num5);
			}
			if (type >= 13 && type <= 15)
			{
				lifeMax = (int)((double)lifeMax * 0.7 * (double)num5);
				if (type == 13)
				{
					damage = (int)((double)damage * 1.1);
				}
				if (type == 14)
				{
					damage = (int)((double)damage * 0.8);
				}
				if (type == 15)
				{
					damage = (int)((double)damage * 0.8);
				}
				scale *= 1.2f;
				defense += 2;
			}
			if (type == 266)
			{
				lifeMax = (int)((double)lifeMax * 0.85 * (double)num5);
				damage = (int)((double)damage * 0.9);
				scale *= 1.05f;
			}
			if (type == 50)
			{
				lifeMax = (int)((double)lifeMax * 0.7 * (double)num5);
				damage = (int)((double)damage * 0.8);
			}
			if (type == 471)
			{
				lifeMax = (int)((double)lifeMax * 0.85 * (double)(num5 * 2f + 1f) / 3.0);
			}
			if (type == 472)
			{
				lifeMax = (int)((double)lifeMax * 0.85 * (double)(num5 + 1f) / 2.0);
				damage = (int)((double)damage * 0.8);
			}
			if (type == 222)
			{
				lifeMax = (int)((double)lifeMax * 0.7 * (double)num5);
				damage = (int)((double)damage * 0.9);
			}
			if (type == 210 || type == 211)
			{
				lifeMax = (int)((double)lifeMax * 0.75);
			}
			if (type == 35)
			{
				lifeMax = (int)((float)lifeMax * num5);
				damage = (int)((double)damage * 1.1);
			}
			else if (type == 36)
			{
				lifeMax = (int)((double)lifeMax * 1.3 * (double)num5);
				damage = (int)((double)damage * 1.1);
			}
			if (type == 113 || type == 114)
			{
				defense += 6;
				lifeMax = (int)((double)lifeMax * 0.7 * (double)num5);
				damage = (int)((double)damage * 1.5);
			}
			else if (type == 115)
			{
				lifeMax = (int)((double)lifeMax * 0.7 * (double)num5);
				if (num4 > 1)
				{
					knockBackResist *= 1f - num6;
				}
				defense += 6;
			}
			else if (type == 116)
			{
				lifeMax = (int)((double)lifeMax * 0.7 * (double)num5);
				if (num4 > 1)
				{
					knockBackResist *= 1f - num6;
				}
			}
			else if (type == 117 || type == 118 || type == 119)
			{
				lifeMax = (int)((double)lifeMax * 0.8);
			}
			if (type >= 134 && type <= 136)
			{
				lifeMax = (int)((double)lifeMax * 0.75 * (double)num5);
				if (type == 134)
				{
					damage *= 2;
				}
				if (type == 135)
				{
					damage = (int)((double)damage * 0.85);
				}
				if (type == 136)
				{
					damage = (int)((double)damage * 0.85);
				}
				scale *= 1.05f;
			}
			else if (type == 139)
			{
				lifeMax = (int)((double)lifeMax * 0.75 * (double)(num5 * 2f + 1f) / 3.0);
				damage = (int)((double)damage * 0.8);
				scale *= 1.05f;
			}
			if (type >= 127 && type <= 131)
			{
				lifeMax = (int)((double)lifeMax * 0.75 * (double)num5);
				damage = (int)((double)damage * 0.85);
			}
			if (type >= 125 && type <= 126)
			{
				lifeMax = (int)((double)lifeMax * 0.75 * (double)num5);
				damage = (int)((double)damage * 0.85);
			}
			if (type >= 262 && type <= 262)
			{
				lifeMax = (int)((double)lifeMax * 0.7 * (double)num5);
				damage = (int)((double)damage * 1.15);
			}
			if (type >= 245 && type <= 249)
			{
				lifeMax = (int)((double)lifeMax * 0.75 * (double)num5);
				damage = (int)((double)damage * 0.8);
			}
			if (type == 370)
			{
				lifeMax = (int)((double)lifeMax * 0.6 * (double)num5);
				damage = (int)((double)damage * 0.7);
			}
			else if (type == 371 || type == 372 || type == 373)
			{
				lifeMax = (int)((double)lifeMax * 0.75);
				damage = (int)((double)damage * 0.75);
			}
			if (type == 439 || type == 440 || (type >= 454 && type <= 459) || type == 522 || type == 523)
			{
				lifeMax = (int)((float)lifeMax * 0.625f * num5);
				damage = (int)((double)damage * 0.75);
			}
			if (type == 397 || type == 396 || type == 398)
			{
				lifeMax = (int)((double)lifeMax * 0.75 * (double)num5);
				damage = (int)((double)damage * 0.75);
			}
			switch (type)
			{
			case 305:
			case 306:
			case 307:
			case 308:
			case 309:
			case 310:
			case 311:
			case 312:
			case 313:
			case 314:
			case 315:
			case 326:
			case 329:
			case 330:
				lifeMax = (int)((double)lifeMax * 0.75);
				damage = (int)((double)damage * 0.75);
				break;
			case 325:
			case 327:
				lifeMax = (int)((double)lifeMax * 0.65);
				damage = (int)((double)damage * 0.75);
				break;
			}
			switch (type)
			{
			case 338:
			case 339:
			case 340:
			case 341:
			case 342:
			case 343:
			case 347:
			case 348:
			case 349:
			case 350:
				lifeMax = (int)((double)lifeMax * 0.75);
				damage = (int)((double)damage * 0.75);
				break;
			case 344:
			case 345:
			case 346:
				lifeMax = (int)((double)lifeMax * 0.65);
				damage = (int)((double)damage * 0.75);
				break;
			}
			defDefense = defense;
			defDamage = damage;
			life = lifeMax;
		}

		public void AI()
		{
			if (aiStyle == 0)
			{
				for (int i = 0; i < 16; i++)
				{
					if (Main.player[i].active && Main.player[i].talkNPC == base.whoAmI)
					{
						if (type == 105)
						{
							Transform(107);
							return;
						}
						if (type == 106)
						{
							Transform(108);
							return;
						}
						if (type == 123)
						{
							Transform(124);
							return;
						}
						if (type == 354)
						{
							Transform(353);
							return;
						}
						if (type == 376)
						{
							Transform(369);
							return;
						}
					}
				}
				if (type != 376)
				{
					TargetClosest();
					spriteDirection = base.direction;
				}
				if (type == 376)
				{
					if (wet || Main.tile[(int)(base.Center.X / 16f), (int)(base.position.Y - 4f) / 16].liquid > 0)
					{
						base.velocity.Y = -0.4f;
						int num = 1;
						if (base.Center.X / 16f > (float)(Main.maxTilesX / 2))
						{
							num = -1;
						}
						int num2 = 12;
						int num3 = (int)base.Center.X / 16;
						int j = (int)base.Center.Y / 16;
						bool flag = false;
						if (num > 0)
						{
							for (int k = num3; k < num3 + num2; k++)
							{
								if (WorldGen.SolidTile(k, j))
								{
									flag = true;
								}
							}
						}
						else
						{
							for (int num4 = num3; num4 > num3 - num2; num4--)
							{
								if (WorldGen.SolidTile(num4, j))
								{
									flag = true;
								}
							}
						}
						if (flag)
						{
							base.velocity.X *= 0.99f;
							if ((double)base.velocity.X > -0.01 && (double)base.velocity.X < 0.01)
							{
								base.velocity.X = 0f;
							}
							return;
						}
						base.velocity.X += (float)num * 0.01f;
						if (base.velocity.X > 0.2f)
						{
							base.velocity.X *= 0.95f;
						}
						if (base.velocity.X < -0.2f)
						{
							base.velocity.X *= 0.95f;
						}
					}
					else
					{
						base.velocity.X *= 0.93f;
						if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
						{
							base.velocity.X = 0f;
						}
					}
				}
				else
				{
					base.velocity.X *= 0.93f;
					if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
					{
						base.velocity.X = 0f;
					}
				}
			}
			else if (aiStyle == 1)
			{
				if (type == 1 && (this.ai[1] == 1f || this.ai[1] == 2f || this.ai[1] == 3f))
				{
					this.ai[1] = -1f;
				}
				if (type == 1 && this.ai[1] == 0f && Main.netMode != 1 && this.value > 0f)
				{
					this.ai[1] = -1f;
					if (Main.rand.Next(20) == 0)
					{
						int num5;
						switch (Main.rand.Next(4))
						{
						case 0:
							switch (Main.rand.Next(7))
							{
							case 0:
								num5 = 290;
								break;
							case 1:
								num5 = 292;
								break;
							case 2:
								num5 = 296;
								break;
							case 3:
								num5 = 2322;
								break;
							default:
								num5 = ((Main.netMode == 0 || Main.rand.Next(2) != 0) ? 2350 : 2997);
								break;
							}
							break;
						case 1:
							switch (Main.rand.Next(4))
							{
							case 0:
								num5 = 8;
								break;
							case 1:
								num5 = 166;
								break;
							case 2:
								num5 = 965;
								break;
							default:
								num5 = 58;
								break;
							}
							break;
						case 2:
							num5 = ((Main.rand.Next(2) != 0) ? Main.rand.Next(699, 703) : Main.rand.Next(11, 15));
							break;
						default:
							switch (Main.rand.Next(3))
							{
							case 0:
								num5 = 71;
								break;
							case 1:
								num5 = 72;
								break;
							default:
								num5 = 73;
								break;
							}
							break;
						}
						this.ai[1] = num5;
						netUpdate = true;
					}
				}
				if (type == 244)
				{
					float num6 = (float)Main.DiscoR / 255f;
					float num7 = (float)Main.DiscoG / 255f;
					float num8 = (float)Main.DiscoB / 255f;
					num6 *= 1f;
					num7 *= 1f;
					num8 *= 1f;
					Lighting.AddLight((int)((base.position.X + (float)(width / 2)) / 16f), (int)((base.position.Y + (float)(height / 2)) / 16f), num6, num7, num8);
					color.R = (byte)Main.DiscoR;
					color.G = (byte)Main.DiscoG;
					color.B = (byte)Main.DiscoB;
					color.A = 100;
					alpha = 175;
				}
				bool flag2 = false;
				if (!Main.dayTime || life != lifeMax || (double)base.position.Y > Main.worldSurface * 16.0 || Main.slimeRain)
				{
					flag2 = true;
				}
				if (type == 81)
				{
					flag2 = true;
					if (Main.rand.Next(30) == 0)
					{
						int num9 = Dust.NewDust(base.position, width, height, 14, 0f, 0f, alpha, color);
						Main.dust[num9].velocity *= 0.3f;
					}
				}
				if ((type == 377 || type == 446) && target != 16 && !Main.player[target].dead && Vector2.Distance(base.Center, Main.player[target].Center) <= 200f)
				{
					flag2 = true;
				}
				if (type == 183)
				{
					flag2 = true;
				}
				if (type == 304)
				{
					flag2 = true;
				}
				if (type == 147 && Main.rand.Next(10) == 0)
				{
					int num10 = Dust.NewDust(base.position, width, height, 76);
					Main.dust[num10].noGravity = true;
					Main.dust[num10].velocity *= 0.1f;
				}
				if (type == 244)
				{
					flag2 = true;
					this.ai[0] += 2f;
				}
				if (type == 184)
				{
					if (Main.rand.Next(8) == 0)
					{
						int num11 = Dust.NewDust(base.position - base.velocity, width, height, 76);
						Main.dust[num11].noGravity = true;
						Main.dust[num11].velocity *= 0.15f;
					}
					flag2 = true;
					if (localAI[0] > 0f)
					{
						localAI[0] -= 1f;
					}
					if (!wet && !Main.player[target].npcTypeNoAggro[type])
					{
						Vector2 vector = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						float num12 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector.X;
						float num13 = Main.player[target].position.Y - vector.Y;
						float num14 = (float)Math.Sqrt(num12 * num12 + num13 * num13);
						if (Main.expertMode && num14 < 120f && Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height) && base.velocity.Y == 0f)
						{
							this.ai[0] = -40f;
							if (base.velocity.Y == 0f)
							{
								base.velocity.X *= 0.9f;
							}
							if (Main.netMode != 1 && localAI[0] == 0f)
							{
								for (int l = 0; l < 5; l++)
								{
									Vector2 vector2 = new Vector2(l - 2, -4f);
									vector2.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.005f;
									vector2.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.005f;
									vector2.Normalize();
									vector2 *= 4f + (float)Main.rand.Next(-50, 51) * 0.01f;
									Projectile.NewProjectile(vector.X, vector.Y, vector2.X, vector2.Y, 174, 9, 0f, Main.myPlayer);
									localAI[0] = 30f;
								}
							}
						}
						else if (num14 < 200f && Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height) && base.velocity.Y == 0f)
						{
							this.ai[0] = -40f;
							if (base.velocity.Y == 0f)
							{
								base.velocity.X *= 0.9f;
							}
							if (Main.netMode != 1 && localAI[0] == 0f)
							{
								num13 = Main.player[target].position.Y - vector.Y - (float)Main.rand.Next(0, 200);
								num14 = (float)Math.Sqrt(num12 * num12 + num13 * num13);
								num14 = 4.5f / num14;
								num12 *= num14;
								num13 *= num14;
								localAI[0] = 50f;
								Projectile.NewProjectile(vector.X, vector.Y, num12, num13, 174, 9, 0f, Main.myPlayer);
							}
						}
					}
				}
				if (type == 535)
				{
					flag2 = true;
					if (localAI[0] > 0f)
					{
						localAI[0] -= 1f;
					}
					if (!wet && !Main.player[target].npcTypeNoAggro[type])
					{
						Vector2 vector3 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						float num15 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector3.X;
						float num16 = Main.player[target].position.Y - vector3.Y;
						float num17 = (float)Math.Sqrt(num15 * num15 + num16 * num16);
						if (Main.expertMode && num17 < 120f && Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height) && base.velocity.Y == 0f)
						{
							this.ai[0] = -40f;
							if (base.velocity.Y == 0f)
							{
								base.velocity.X *= 0.9f;
							}
							if (Main.netMode != 1 && localAI[0] == 0f)
							{
								for (int m = 0; m < 5; m++)
								{
									Vector2 vector4 = new Vector2(m - 2, -4f);
									vector4.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.005f;
									vector4.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.005f;
									vector4.Normalize();
									vector4 *= 4f + (float)Main.rand.Next(-50, 51) * 0.01f;
									Projectile.NewProjectile(vector3.X, vector3.Y, vector4.X, vector4.Y, 605, 9, 0f, Main.myPlayer);
									localAI[0] = 30f;
								}
							}
						}
						else if (num17 < 200f && Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height) && base.velocity.Y == 0f)
						{
							this.ai[0] = -40f;
							if (base.velocity.Y == 0f)
							{
								base.velocity.X *= 0.9f;
							}
							if (Main.netMode != 1 && localAI[0] == 0f)
							{
								num16 = Main.player[target].position.Y - vector3.Y - (float)Main.rand.Next(0, 200);
								num17 = (float)Math.Sqrt(num15 * num15 + num16 * num16);
								num17 = 4.5f / num17;
								num15 *= num17;
								num16 *= num17;
								localAI[0] = 50f;
								Projectile.NewProjectile(vector3.X, vector3.Y, num15, num16, 605, 9, 0f, Main.myPlayer);
							}
						}
					}
				}
				if (type == 204)
				{
					flag2 = true;
					if (localAI[0] > 0f)
					{
						localAI[0] -= 1f;
					}
					if (!wet && !Main.player[target].npcTypeNoAggro[type])
					{
						Vector2 vector5 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						float num18 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector5.X;
						float num19 = Main.player[target].position.Y - vector5.Y;
						float num20 = (float)Math.Sqrt(num18 * num18 + num19 * num19);
						if (Main.expertMode && num20 < 200f && Collision.CanHit(new Vector2(base.position.X, base.position.Y - 20f), width, height + 20, Main.player[target].position, Main.player[target].width, Main.player[target].height) && base.velocity.Y == 0f)
						{
							this.ai[0] = -40f;
							if (base.velocity.Y == 0f)
							{
								base.velocity.X *= 0.9f;
							}
							if (Main.netMode != 1 && localAI[0] == 0f)
							{
								for (int n = 0; n < 5; n++)
								{
									Vector2 vector6 = new Vector2(n - 2, -2f);
									vector6.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.02f;
									vector6.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.02f;
									vector6.Normalize();
									vector6 *= 3f + (float)Main.rand.Next(-50, 51) * 0.01f;
									Projectile.NewProjectile(vector5.X, vector5.Y, vector6.X, vector6.Y, 176, 13, 0f, Main.myPlayer);
									localAI[0] = 80f;
								}
							}
						}
						if (num20 < 400f && Collision.CanHit(new Vector2(base.position.X, base.position.Y - 20f), width, height + 20, Main.player[target].position, Main.player[target].width, Main.player[target].height) && base.velocity.Y == 0f)
						{
							this.ai[0] = -80f;
							if (base.velocity.Y == 0f)
							{
								base.velocity.X *= 0.9f;
							}
							if (Main.netMode != 1 && localAI[0] == 0f)
							{
								num19 = Main.player[target].position.Y - vector5.Y - (float)Main.rand.Next(-30, 20);
								num19 -= num20 * 0.05f;
								num18 = Main.player[target].position.X - vector5.X - (float)Main.rand.Next(-20, 20);
								num20 = (float)Math.Sqrt(num18 * num18 + num19 * num19);
								num20 = 7f / num20;
								num18 *= num20;
								num19 *= num20;
								localAI[0] = 65f;
								Projectile.NewProjectile(vector5.X, vector5.Y, num18, num19, 176, 13, 0f, Main.myPlayer);
							}
						}
					}
				}
				if (type == 377 || type == 446)
				{
					if (localAI[2] < 90f)
					{
						localAI[2] += 1f;
					}
					else
					{
						friendly = false;
					}
				}
				if (type == 59)
				{
					Lighting.AddLight((int)((base.position.X + (float)(width / 2)) / 16f), (int)((base.position.Y + (float)(height / 2)) / 16f), 1f, 0.3f, 0.1f);
					int num21 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100, default(Color), 1.7f);
					Main.dust[num21].noGravity = true;
				}
				if (this.ai[2] > 1f)
				{
					this.ai[2] -= 1f;
				}
				if (wet)
				{
					if (collideY)
					{
						base.velocity.Y = -2f;
					}
					if (base.velocity.Y < 0f && this.ai[3] == base.position.X)
					{
						base.direction *= -1;
						this.ai[2] = 200f;
					}
					if (base.velocity.Y > 0f)
					{
						this.ai[3] = base.position.X;
					}
					if (type == 59)
					{
						if (base.velocity.Y > 2f)
						{
							base.velocity.Y *= 0.9f;
						}
						else if (directionY < 0)
						{
							base.velocity.Y -= 0.8f;
						}
						base.velocity.Y -= 0.5f;
						if (base.velocity.Y < -10f)
						{
							base.velocity.Y = -10f;
						}
					}
					else
					{
						if (base.velocity.Y > 2f)
						{
							base.velocity.Y *= 0.9f;
						}
						base.velocity.Y -= 0.5f;
						if (base.velocity.Y < -4f)
						{
							base.velocity.Y = -4f;
						}
					}
					if (this.ai[2] == 1f && flag2)
					{
						TargetClosest();
					}
				}
				aiAction = 0;
				if (this.ai[2] == 0f)
				{
					this.ai[0] = -100f;
					this.ai[2] = 1f;
					TargetClosest();
				}
				if (base.velocity.Y == 0f)
				{
					if (this.ai[3] == base.position.X)
					{
						base.direction *= -1;
						this.ai[2] = 200f;
					}
					this.ai[3] = 0f;
					base.velocity.X *= 0.8f;
					if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
					{
						base.velocity.X = 0f;
					}
					if (flag2)
					{
						this.ai[0] += 1f;
					}
					this.ai[0] += 1f;
					if (type == 59)
					{
						this.ai[0] += 2f;
					}
					if (type == 71)
					{
						this.ai[0] += 3f;
					}
					if (type == 138)
					{
						this.ai[0] += 2f;
					}
					if (type == 183)
					{
						this.ai[0] += 1f;
					}
					if (type == 304)
					{
						float num22 = (1 - life / lifeMax) * 10;
						this.ai[0] += num22;
					}
					if (type == 377 || type == 446)
					{
						this.ai[0] += 3f;
					}
					if (type == 81)
					{
						if (scale >= 0f)
						{
							this.ai[0] += 4f;
						}
						else
						{
							this.ai[0] += 1f;
						}
					}
					int num23 = 0;
					if (this.ai[0] >= 0f)
					{
						num23 = 1;
					}
					if (this.ai[0] >= -1000f && this.ai[0] <= -500f)
					{
						num23 = 2;
					}
					if (this.ai[0] >= -2000f && this.ai[0] <= -1500f)
					{
						num23 = 3;
					}
					if (num23 > 0)
					{
						netUpdate = true;
						if (flag2 && this.ai[2] == 1f)
						{
							TargetClosest();
						}
						if (num23 == 3)
						{
							base.velocity.Y = -8f;
							if (type == 59)
							{
								base.velocity.Y -= 2f;
							}
							base.velocity.X += 3 * base.direction;
							if (type == 59)
							{
								base.velocity.X += 0.5f * (float)base.direction;
							}
							this.ai[0] = -200f;
							this.ai[3] = base.position.X;
						}
						else
						{
							base.velocity.Y = -6f;
							base.velocity.X += 2 * base.direction;
							if (type == 59)
							{
								base.velocity.X += 2 * base.direction;
							}
							this.ai[0] = -120f;
							if (num23 == 1)
							{
								this.ai[0] -= 1000f;
							}
							else
							{
								this.ai[0] -= 2000f;
							}
						}
						if (type == 141)
						{
							base.velocity.Y *= 1.3f;
							base.velocity.X *= 1.2f;
						}
						if (type == 377 || type == 446)
						{
							base.velocity.Y *= 0.9f;
							base.velocity.X *= 0.6f;
							if (flag2)
							{
								base.direction = -base.direction;
								base.velocity.X *= -1f;
							}
						}
					}
					else if (this.ai[0] >= -30f)
					{
						aiAction = 1;
					}
				}
				else if (target < 16 && ((base.direction == 1 && base.velocity.X < 3f) || (base.direction == -1 && base.velocity.X > -3f)))
				{
					if ((base.direction == -1 && (double)base.velocity.X < 0.1) || (base.direction == 1 && (double)base.velocity.X > -0.1))
					{
						base.velocity.X += 0.2f * (float)base.direction;
					}
					else
					{
						base.velocity.X *= 0.93f;
					}
				}
			}
			else if (aiStyle == 2)
			{
				if ((type == 170 || type == 171 || type == 180) && Main.rand.Next(1000) == 0)
				{
					Main.PlaySound(29, (int)base.position.X, (int)base.position.Y, 9);
				}
				noGravity = true;
				if (!noTileCollide)
				{
					if (collideX)
					{
						base.velocity.X = oldVelocity.X * -0.5f;
						if (base.direction == -1 && base.velocity.X > 0f && base.velocity.X < 2f)
						{
							base.velocity.X = 2f;
						}
						if (base.direction == 1 && base.velocity.X < 0f && base.velocity.X > -2f)
						{
							base.velocity.X = -2f;
						}
					}
					if (collideY)
					{
						base.velocity.Y = oldVelocity.Y * -0.5f;
						if (base.velocity.Y > 0f && base.velocity.Y < 1f)
						{
							base.velocity.Y = 1f;
						}
						if (base.velocity.Y < 0f && base.velocity.Y > -1f)
						{
							base.velocity.Y = -1f;
						}
					}
				}
				if (Main.dayTime && (double)base.position.Y <= Main.worldSurface * 16.0 && (type == 2 || type == 133 || type == 190 || type == 191 || type == 192 || type == 193 || type == 194 || type == 317 || type == 318))
				{
					if (timeLeft > 10)
					{
						timeLeft = 10;
					}
					directionY = -1;
					if (base.velocity.Y > 0f)
					{
						base.direction = 1;
					}
					base.direction = -1;
					if (base.velocity.X > 0f)
					{
						base.direction = 1;
					}
				}
				else
				{
					TargetClosest();
				}
				if (type == 170 || type == 171 || type == 180)
				{
					if (Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						if (this.ai[1] > 0f && !Collision.SolidCollision(base.position, width, height))
						{
							this.ai[1] = 0f;
							this.ai[0] = 0f;
							netUpdate = true;
						}
					}
					else if (this.ai[1] == 0f)
					{
						this.ai[0] += 1f;
					}
					if (this.ai[0] >= 300f)
					{
						this.ai[1] = 1f;
						this.ai[0] = 0f;
						netUpdate = true;
					}
					if (this.ai[1] == 0f)
					{
						alpha = 0;
						noTileCollide = false;
					}
					else
					{
						wet = false;
						alpha = 200;
						noTileCollide = true;
					}
					rotation = base.velocity.Y * 0.1f * (float)base.direction;
					TargetClosest();
					if (base.direction == -1 && base.velocity.X > -4f && base.position.X > Main.player[target].position.X + (float)Main.player[target].width)
					{
						base.velocity.X -= 0.08f;
						if (base.velocity.X > 4f)
						{
							base.velocity.X -= 0.04f;
						}
						else if (base.velocity.X > 0f)
						{
							base.velocity.X -= 0.2f;
						}
						if (base.velocity.X < -4f)
						{
							base.velocity.X = -4f;
						}
					}
					else if (base.direction == 1 && base.velocity.X < 4f && base.position.X + (float)width < Main.player[target].position.X)
					{
						base.velocity.X += 0.08f;
						if (base.velocity.X < -4f)
						{
							base.velocity.X += 0.04f;
						}
						else if (base.velocity.X < 0f)
						{
							base.velocity.X += 0.2f;
						}
						if (base.velocity.X > 4f)
						{
							base.velocity.X = 4f;
						}
					}
					if (directionY == -1 && (double)base.velocity.Y > -2.5 && base.position.Y > Main.player[target].position.Y + (float)Main.player[target].height)
					{
						base.velocity.Y -= 0.1f;
						if ((double)base.velocity.Y > 2.5)
						{
							base.velocity.Y -= 0.05f;
						}
						else if (base.velocity.Y > 0f)
						{
							base.velocity.Y -= 0.15f;
						}
						if ((double)base.velocity.Y < -2.5)
						{
							base.velocity.Y = -2.5f;
						}
					}
					else if (directionY == 1 && (double)base.velocity.Y < 2.5 && base.position.Y + (float)height < Main.player[target].position.Y)
					{
						base.velocity.Y += 0.1f;
						if ((double)base.velocity.Y < -2.5)
						{
							base.velocity.Y += 0.05f;
						}
						else if (base.velocity.Y < 0f)
						{
							base.velocity.Y += 0.15f;
						}
						if ((double)base.velocity.Y > 2.5)
						{
							base.velocity.Y = 2.5f;
						}
					}
				}
				else if (type == 116)
				{
					TargetClosest();
					Lighting.AddLight((int)(base.position.X + (float)(width / 2)) / 16, (int)(base.position.Y + (float)(height / 2)) / 16, 0.3f, 0.2f, 0.1f);
					if (base.direction == -1 && base.velocity.X > -6f)
					{
						base.velocity.X -= 0.1f;
						if (base.velocity.X > 6f)
						{
							base.velocity.X -= 0.1f;
						}
						else if (base.velocity.X > 0f)
						{
							base.velocity.X -= 0.2f;
						}
						if (base.velocity.X < -6f)
						{
							base.velocity.X = -6f;
						}
					}
					else if (base.direction == 1 && base.velocity.X < 6f)
					{
						base.velocity.X += 0.1f;
						if (base.velocity.X < -6f)
						{
							base.velocity.X += 0.1f;
						}
						else if (base.velocity.X < 0f)
						{
							base.velocity.X += 0.2f;
						}
						if (base.velocity.X > 6f)
						{
							base.velocity.X = 6f;
						}
					}
					if (directionY == -1 && (double)base.velocity.Y > -2.5)
					{
						base.velocity.Y -= 0.04f;
						if ((double)base.velocity.Y > 2.5)
						{
							base.velocity.Y -= 0.05f;
						}
						else if (base.velocity.Y > 0f)
						{
							base.velocity.Y -= 0.15f;
						}
						if ((double)base.velocity.Y < -2.5)
						{
							base.velocity.Y = -2.5f;
						}
					}
					else if (directionY == 1 && (double)base.velocity.Y < 1.5)
					{
						base.velocity.Y += 0.04f;
						if ((double)base.velocity.Y < -2.5)
						{
							base.velocity.Y += 0.05f;
						}
						else if (base.velocity.Y < 0f)
						{
							base.velocity.Y += 0.15f;
						}
						if ((double)base.velocity.Y > 2.5)
						{
							base.velocity.Y = 2.5f;
						}
					}
					if (Main.rand.Next(40) == 0)
					{
						int num24 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + (float)height * 0.25f), width, (int)((float)height * 0.5f), 5, base.velocity.X, 2f);
						Main.dust[num24].velocity.X *= 0.5f;
						Main.dust[num24].velocity.Y *= 0.1f;
					}
				}
				else if (type == 133)
				{
					if ((double)life < (double)lifeMax * 0.5)
					{
						if (base.direction == -1 && base.velocity.X > -6f)
						{
							base.velocity.X -= 0.1f;
							if (base.velocity.X > 6f)
							{
								base.velocity.X -= 0.1f;
							}
							else if (base.velocity.X > 0f)
							{
								base.velocity.X += 0.05f;
							}
							if (base.velocity.X < -6f)
							{
								base.velocity.X = -6f;
							}
						}
						else if (base.direction == 1 && base.velocity.X < 6f)
						{
							base.velocity.X += 0.1f;
							if (base.velocity.X < -6f)
							{
								base.velocity.X += 0.1f;
							}
							else if (base.velocity.X < 0f)
							{
								base.velocity.X -= 0.05f;
							}
							if (base.velocity.X > 6f)
							{
								base.velocity.X = 6f;
							}
						}
						if (directionY == -1 && base.velocity.Y > -4f)
						{
							base.velocity.Y -= 0.1f;
							if (base.velocity.Y > 4f)
							{
								base.velocity.Y -= 0.1f;
							}
							else if (base.velocity.Y > 0f)
							{
								base.velocity.Y += 0.05f;
							}
							if (base.velocity.Y < -4f)
							{
								base.velocity.Y = -4f;
							}
						}
						else if (directionY == 1 && base.velocity.Y < 4f)
						{
							base.velocity.Y += 0.1f;
							if (base.velocity.Y < -4f)
							{
								base.velocity.Y += 0.1f;
							}
							else if (base.velocity.Y < 0f)
							{
								base.velocity.Y -= 0.05f;
							}
							if (base.velocity.Y > 4f)
							{
								base.velocity.Y = 4f;
							}
						}
					}
					else
					{
						if (base.direction == -1 && base.velocity.X > -4f)
						{
							base.velocity.X -= 0.1f;
							if (base.velocity.X > 4f)
							{
								base.velocity.X -= 0.1f;
							}
							else if (base.velocity.X > 0f)
							{
								base.velocity.X += 0.05f;
							}
							if (base.velocity.X < -4f)
							{
								base.velocity.X = -4f;
							}
						}
						else if (base.direction == 1 && base.velocity.X < 4f)
						{
							base.velocity.X += 0.1f;
							if (base.velocity.X < -4f)
							{
								base.velocity.X += 0.1f;
							}
							else if (base.velocity.X < 0f)
							{
								base.velocity.X -= 0.05f;
							}
							if (base.velocity.X > 4f)
							{
								base.velocity.X = 4f;
							}
						}
						if (directionY == -1 && (double)base.velocity.Y > -1.5)
						{
							base.velocity.Y -= 0.04f;
							if ((double)base.velocity.Y > 1.5)
							{
								base.velocity.Y -= 0.05f;
							}
							else if (base.velocity.Y > 0f)
							{
								base.velocity.Y += 0.03f;
							}
							if ((double)base.velocity.Y < -1.5)
							{
								base.velocity.Y = -1.5f;
							}
						}
						else if (directionY == 1 && (double)base.velocity.Y < 1.5)
						{
							base.velocity.Y += 0.04f;
							if ((double)base.velocity.Y < -1.5)
							{
								base.velocity.Y += 0.05f;
							}
							else if (base.velocity.Y < 0f)
							{
								base.velocity.Y -= 0.03f;
							}
							if ((double)base.velocity.Y > 1.5)
							{
								base.velocity.Y = 1.5f;
							}
						}
					}
				}
				else
				{
					float num25 = 4f;
					float num26 = 1.5f;
					num25 *= 1f + (1f - scale);
					num26 *= 1f + (1f - scale);
					if (base.direction == -1 && base.velocity.X > 0f - num25)
					{
						base.velocity.X -= 0.1f;
						if (base.velocity.X > num25)
						{
							base.velocity.X -= 0.1f;
						}
						else if (base.velocity.X > 0f)
						{
							base.velocity.X += 0.05f;
						}
						if (base.velocity.X < 0f - num25)
						{
							base.velocity.X = 0f - num25;
						}
					}
					else if (base.direction == 1 && base.velocity.X < num25)
					{
						base.velocity.X += 0.1f;
						if (base.velocity.X < 0f - num25)
						{
							base.velocity.X += 0.1f;
						}
						else if (base.velocity.X < 0f)
						{
							base.velocity.X -= 0.05f;
						}
						if (base.velocity.X > num25)
						{
							base.velocity.X = num25;
						}
					}
					if (directionY == -1 && base.velocity.Y > 0f - num26)
					{
						base.velocity.Y -= 0.04f;
						if (base.velocity.Y > num26)
						{
							base.velocity.Y -= 0.05f;
						}
						else if (base.velocity.Y > 0f)
						{
							base.velocity.Y += 0.03f;
						}
						if (base.velocity.Y < 0f - num26)
						{
							base.velocity.Y = 0f - num26;
						}
					}
					else if (directionY == 1 && base.velocity.Y < num26)
					{
						base.velocity.Y += 0.04f;
						if (base.velocity.Y < 0f - num26)
						{
							base.velocity.Y += 0.05f;
						}
						else if (base.velocity.Y < 0f)
						{
							base.velocity.Y -= 0.03f;
						}
						if (base.velocity.Y > num26)
						{
							base.velocity.Y = num26;
						}
					}
				}
				if ((type == 2 || type == 133 || type == 190 || type == 191 || type == 192 || type == 193 || type == 194) && Main.rand.Next(40) == 0)
				{
					int num27 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + (float)height * 0.25f), width, (int)((float)height * 0.5f), 5, base.velocity.X, 2f);
					Main.dust[num27].velocity.X *= 0.5f;
					Main.dust[num27].velocity.Y *= 0.1f;
				}
				if (wet && type != 170 && type != 171 && type != 172)
				{
					if (base.velocity.Y > 0f)
					{
						base.velocity.Y *= 0.95f;
					}
					base.velocity.Y -= 0.5f;
					if (base.velocity.Y < -4f)
					{
						base.velocity.Y = -4f;
					}
					TargetClosest();
				}
			}
			else if (aiStyle == 3)
			{
				if (type == 466)
				{
					int num28 = 200;
					if (this.ai[2] == 0f)
					{
						alpha = num28;
						TargetClosest();
						if (!Main.player[target].dead && (Main.player[target].Center - base.Center).Length() < 170f)
						{
							this.ai[2] = -16f;
						}
						if (base.velocity.X != 0f || base.velocity.Y < 0f || base.velocity.Y > 2f || justHit)
						{
							this.ai[2] = -16f;
						}
						return;
					}
					if (this.ai[2] < 0f)
					{
						if (alpha > 0)
						{
							alpha -= num28 / 16;
							if (alpha < 0)
							{
								alpha = 0;
							}
						}
						this.ai[2] += 1f;
						if (this.ai[2] == 0f)
						{
							this.ai[2] = 1f;
							base.velocity.X = base.direction * 2;
						}
						return;
					}
					alpha = 0;
				}
				if (type == 166)
				{
					if (Main.netMode != 1 && Main.rand.Next(240) == 0)
					{
						this.ai[2] = Main.rand.Next(-480, -60);
						netUpdate = true;
					}
					if (this.ai[2] < 0f)
					{
						TargetClosest();
						if (justHit)
						{
							this.ai[2] = 0f;
						}
						if (Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
						{
							this.ai[2] = 0f;
						}
					}
					if (this.ai[2] < 0f)
					{
						base.velocity.X *= 0.9f;
						if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
						{
							base.velocity.X = 0f;
						}
						this.ai[2] += 1f;
						if (this.ai[2] == 0f)
						{
							base.velocity.X = (float)base.direction * 0.1f;
						}
						return;
					}
				}
				if (type == 461)
				{
					if (wet)
					{
						knockBackResist = 0f;
						this.ai[3] = -0.10101f;
						noGravity = true;
						Vector2 center = base.Center;
						width = 34;
						height = 24;
						base.position.X = center.X - (float)(width / 2);
						base.position.Y = center.Y - (float)(height / 2);
						TargetClosest();
						if (collideX)
						{
							base.velocity.X = 0f - oldVelocity.X;
						}
						if (base.velocity.X < 0f)
						{
							base.direction = -1;
						}
						if (base.velocity.X > 0f)
						{
							base.direction = 1;
						}
						if (Collision.CanHit(base.position, width, height, Main.player[target].Center, 1, 1))
						{
							Vector2 value = Main.player[target].Center - base.Center;
							value.Normalize();
							value *= 5f;
							base.velocity = (base.velocity * 19f + value) / 20f;
							return;
						}
						float num29 = 5f;
						if (base.velocity.Y > 0f)
						{
							num29 = 3f;
						}
						if (base.velocity.Y < 0f)
						{
							num29 = 8f;
						}
						Vector2 value2 = new Vector2(base.direction, -1f);
						value2.Normalize();
						value2 *= num29;
						if (num29 < 5f)
						{
							base.velocity = (base.velocity * 24f + value2) / 25f;
						}
						else
						{
							base.velocity = (base.velocity * 9f + value2) / 10f;
						}
						return;
					}
					knockBackResist = 0.4f * Main.knockBackMultiplier;
					noGravity = false;
					Vector2 center2 = base.Center;
					width = 18;
					height = 40;
					base.position.X = center2.X - (float)(width / 2);
					base.position.Y = center2.Y - (float)(height / 2);
					if (this.ai[3] == -0.10101f)
					{
						this.ai[3] = 0f;
						float num30 = base.velocity.Length();
						num30 *= 2f;
						if (num30 > 10f)
						{
							num30 = 10f;
						}
						base.velocity.Normalize();
						base.velocity *= num30;
						if (base.velocity.X < 0f)
						{
							base.direction = -1;
						}
						if (base.velocity.X > 0f)
						{
							base.direction = 1;
						}
						spriteDirection = base.direction;
					}
				}
				if (type == 379 || type == 380)
				{
					if (this.ai[3] < 0f)
					{
						damage = 0;
						base.velocity.X *= 0.93f;
						if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
						{
							base.velocity.X = 0f;
						}
						int num31 = (int)(0f - this.ai[3] - 1f);
						int num32 = Math.Sign(Main.npc[num31].Center.X - base.Center.X);
						if (num32 != base.direction)
						{
							base.velocity.X = 0f;
							base.direction = num32;
							netUpdate = true;
						}
						if (justHit && Main.netMode != 1 && Main.npc[num31].localAI[0] == 0f)
						{
							Main.npc[num31].localAI[0] = 1f;
						}
						if (this.ai[0] < 1000f)
						{
							this.ai[0] = 1000f;
						}
						if ((this.ai[0] += 1f) >= 1300f)
						{
							this.ai[0] = 1000f;
							netUpdate = true;
						}
						return;
					}
					if (this.ai[0] >= 1000f)
					{
						this.ai[0] = 0f;
					}
					damage = defDamage;
				}
				if (type == 383 && this.ai[2] == 0f && localAI[0] == 0f && Main.netMode != 1)
				{
					int num33 = NewNPC((int)base.Center.X, (int)base.Center.Y, 384, base.whoAmI);
					this.ai[2] = num33 + 1;
					localAI[0] = -1f;
					netUpdate = true;
					Main.npc[num33].ai[0] = base.whoAmI;
					Main.npc[num33].netUpdate = true;
				}
				if (type == 383)
				{
					int num34 = (int)this.ai[2] - 1;
					if (num34 != -1 && Main.npc[num34].active && Main.npc[num34].type == 384)
					{
						dontTakeDamage = true;
					}
					else
					{
						dontTakeDamage = false;
						this.ai[2] = 0f;
						if (localAI[0] == -1f)
						{
							localAI[0] = 180f;
						}
						if (localAI[0] > 0f)
						{
							localAI[0] -= 1f;
						}
					}
				}
				if (type == 482)
				{
					int num35 = 300;
					int num36 = 120;
					dontTakeDamage = false;
					if (this.ai[2] < 0f)
					{
						dontTakeDamage = true;
						this.ai[2] += 1f;
						base.velocity.X *= 0.9f;
						if ((double)Math.Abs(base.velocity.X) < 0.001)
						{
							base.velocity.X = 0.001f * (float)base.direction;
						}
						if (Math.Abs(base.velocity.Y) > 1f)
						{
							this.ai[2] += 10f;
						}
						if (this.ai[2] >= 0f)
						{
							netUpdate = true;
							base.velocity.X += (float)base.direction * 0.3f;
						}
						return;
					}
					if (this.ai[2] < (float)num35)
					{
						if (justHit)
						{
							this.ai[2] += 15f;
						}
						this.ai[2] += 1f;
					}
					else if (base.velocity.Y == 0f)
					{
						this.ai[2] = -num36;
						netUpdate = true;
					}
				}
				if (type == 480)
				{
					int num37 = 180;
					int num38 = 300;
					int num39 = 180;
					int num40 = 60;
					int num41 = 20;
					if (life < lifeMax / 3)
					{
						num37 = 120;
						num38 = 240;
						num39 = 240;
						num40 = 90;
					}
					if (this.ai[2] > 0f)
					{
						this.ai[2] -= 1f;
					}
					else if (this.ai[2] == 0f)
					{
						if (((Main.player[target].Center.X < base.Center.X && base.direction < 0) || (Main.player[target].Center.X > base.Center.X && base.direction > 0)) && base.velocity.Y == 0f && Distance(Main.player[target].Center) < 900f && Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
						{
							this.ai[2] = -num39 - num41;
							netUpdate = true;
						}
					}
					else
					{
						if (this.ai[2] < 0f && this.ai[2] < (float)(-num39))
						{
							base.velocity.X *= 0.9f;
							if (base.velocity.Y < -2f || base.velocity.Y > 4f || justHit)
							{
								this.ai[2] = num37;
							}
							else
							{
								this.ai[2] += 1f;
								if (this.ai[2] == 0f)
								{
									this.ai[2] = num38;
								}
							}
							float num42 = this.ai[2] + (float)num39 + (float)num41;
							if (num42 == 1f)
							{
								Main.PlaySound(4, (int)base.position.X, (int)base.position.Y, 17);
							}
							if (num42 < (float)num41)
							{
								Vector2 vector7 = base.Top + new Vector2(spriteDirection * 6, 6f);
								float scaleFactor = MathHelper.Lerp(20f, 30f, (num42 * 3f + 50f) / 182f);
								Main.rand.NextFloat();
								for (float num43 = 0f; num43 < 2f; num43 += 1f)
								{
									Vector2 vector8 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (Main.rand.NextFloat() * 0.5f + 0.5f);
									Dust dust = Main.dust[Dust.NewDust(vector7, 0, 0, 228)];
									dust.position = vector7 + vector8 * scaleFactor;
									dust.noGravity = true;
									dust.velocity = vector8 * 2f;
									dust.scale = 0.5f + Main.rand.NextFloat() * 0.5f;
								}
							}
							Lighting.AddLight(base.Center, 0.9f, 0.75f, 0.1f);
							return;
						}
						if (this.ai[2] < 0f && this.ai[2] >= (float)(-num39))
						{
							Lighting.AddLight(base.Center, 0.9f, 0.75f, 0.1f);
							base.velocity.X *= 0.9f;
							if (base.velocity.Y < -2f || base.velocity.Y > 4f || justHit)
							{
								this.ai[2] = num37;
							}
							else
							{
								this.ai[2] += 1f;
								if (this.ai[2] == 0f)
								{
									this.ai[2] = num38;
								}
							}
							float num44 = this.ai[2] + (float)num39;
							if (num44 < 180f && (Main.rand.Next(3) == 0 || this.ai[2] % 3f == 0f))
							{
								Vector2 vector9 = base.Top + new Vector2(spriteDirection * 10, 10f);
								float scaleFactor2 = MathHelper.Lerp(20f, 30f, (num44 * 3f + 50f) / 182f);
								Main.rand.NextFloat();
								for (float num45 = 0f; num45 < 1f; num45 += 1f)
								{
									Vector2 vector10 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (Main.rand.NextFloat() * 0.5f + 0.5f);
									Dust dust2 = Main.dust[Dust.NewDust(vector9, 0, 0, 228)];
									dust2.position = vector9 + vector10 * scaleFactor2;
									dust2.noGravity = true;
									dust2.velocity = vector10 * 4f;
									dust2.scale = 0.5f + Main.rand.NextFloat();
								}
							}
							if (Main.netMode != 2)
							{
								Player player = Main.player[Main.myPlayer];
								int myPlayer2 = Main.myPlayer;
								if (!player.dead && player.active && player.HasBuff(156) == -1 && (player.Center - base.Center).Length() < 700f && ((player.Center.X < base.Center.X && base.direction < 0 && player.direction > 0) || (player.Center.X > base.Center.X && base.direction > 0 && player.direction < 0)) && (Collision.CanHitLine(base.Center, 1, 1, player.Center, 1, 1) || Collision.CanHitLine(base.Center - Vector2.UnitY * 16f, 1, 1, player.Center, 1, 1) || Collision.CanHitLine(base.Center + Vector2.UnitY * 8f, 1, 1, player.Center, 1, 1)))
								{
									player.AddBuff(156, num40 + (int)this.ai[2] * -1);
								}
							}
							return;
						}
					}
				}
				if (type == 471)
				{
					if (this.ai[3] < 0f)
					{
						knockBackResist = 0f;
						defense = (int)((double)defDefense * 1.1);
						noGravity = true;
						noTileCollide = true;
						if (base.velocity.X < 0f)
						{
							base.direction = -1;
						}
						else if (base.velocity.X > 0f)
						{
							base.direction = 1;
						}
						rotation = base.velocity.X * 0.1f;
						if (Main.netMode != 1)
						{
							localAI[3] += 1f;
							if (localAI[3] > (float)Main.rand.Next(20, 180))
							{
								localAI[3] = 0f;
								Vector2 center3 = base.Center;
								center3 += base.velocity;
								NewNPC((int)center3.X, (int)center3.Y, 30);
							}
						}
					}
					else
					{
						localAI[3] = 0f;
						knockBackResist = 0.35f * Main.knockBackMultiplier;
						rotation *= 0.9f;
						defense = defDefense;
						noGravity = false;
						noTileCollide = false;
					}
					if (this.ai[3] == 1f)
					{
						knockBackResist = 0f;
						defense += 10;
					}
					if (this.ai[3] == -1f)
					{
						TargetClosest();
						float num46 = 8f;
						float num47 = 40f;
						Vector2 value3 = Main.player[target].Center - base.Center;
						float num48 = value3.Length();
						num46 += num48 / 200f;
						value3.Normalize();
						value3 *= num46;
						base.velocity = (base.velocity * (num47 - 1f) + value3) / num47;
						if (num48 < 500f && !Collision.SolidCollision(base.position, width, height))
						{
							this.ai[3] = 0f;
							this.ai[2] = 0f;
						}
						return;
					}
					if (this.ai[3] == -2f)
					{
						base.velocity.Y -= 0.2f;
						if (base.velocity.Y < -10f)
						{
							base.velocity.Y = -10f;
						}
						if (Main.player[target].Center.Y - base.Center.Y > 200f)
						{
							TargetClosest();
							this.ai[3] = -3f;
							if (Main.player[target].Center.X > base.Center.X)
							{
								this.ai[2] = 1f;
							}
							else
							{
								this.ai[2] = -1f;
							}
						}
						base.velocity.X *= 0.99f;
						return;
					}
					if (this.ai[3] == -3f)
					{
						if (base.direction == 0)
						{
							TargetClosest();
						}
						if (this.ai[2] == 0f)
						{
							this.ai[2] = base.direction;
						}
						base.velocity.Y *= 0.9f;
						base.velocity.X += this.ai[2] * 0.3f;
						if (base.velocity.X > 10f)
						{
							base.velocity.X = 10f;
						}
						if (base.velocity.X < -10f)
						{
							base.velocity.X = -10f;
						}
						float num49 = Main.player[target].Center.X - base.Center.X;
						if ((this.ai[2] < 0f && num49 > 300f) || (this.ai[2] > 0f && num49 < -300f))
						{
							this.ai[3] = -4f;
							this.ai[2] = 0f;
						}
						else if (Math.Abs(num49) > 800f)
						{
							this.ai[3] = -1f;
							this.ai[2] = 0f;
						}
						return;
					}
					if (this.ai[3] == -4f)
					{
						this.ai[2] += 1f;
						base.velocity.Y += 0.1f;
						if (base.velocity.Length() > 4f)
						{
							base.velocity *= 0.9f;
						}
						int num50 = (int)base.Center.X / 16;
						int num51 = (int)(base.position.Y + (float)height + 12f) / 16;
						bool flag3 = false;
						for (int num52 = num50 - 1; num52 <= num50 + 1; num52++)
						{
							if (Main.tile[num52, num51] == null)
							{
								Main.tile[num50, num51] = new Tile();
							}
							if (Main.tile[num52, num51].active() && Main.tileSolid[Main.tile[num52, num51].type])
							{
								flag3 = true;
							}
						}
						if (flag3 && !Collision.SolidCollision(base.position, width, height))
						{
							this.ai[3] = 0f;
							this.ai[2] = 0f;
						}
						else if (this.ai[2] > 300f || base.Center.Y > Main.player[target].Center.Y + 200f)
						{
							this.ai[3] = -1f;
							this.ai[2] = 0f;
						}
					}
					else
					{
						if (this.ai[3] == 1f)
						{
							Vector2 center4 = base.Center;
							center4.Y -= 70f;
							base.velocity.X *= 0.8f;
							this.ai[2] += 1f;
							if (this.ai[2] == 60f)
							{
								if (Main.netMode != 1)
								{
									NewNPC((int)center4.X, (int)center4.Y + 18, 472);
								}
							}
							else if (this.ai[2] >= 90f)
							{
								this.ai[3] = -2f;
								this.ai[2] = 0f;
							}
							for (int num53 = 0; num53 < 2; num53++)
							{
								Vector2 position = center4;
								Vector2 vector11 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
								vector11.Normalize();
								vector11 *= (float)Main.rand.Next(0, 100) * 0.1f;
								position += vector11;
								vector11.Normalize();
								vector11 *= (float)Main.rand.Next(50, 90) * 0.1f;
								int num54 = Dust.NewDust(position, 1, 1, 27);
								Main.dust[num54].velocity = -vector11 * 0.3f;
								Main.dust[num54].alpha = 100;
								if (Main.rand.Next(2) == 0)
								{
									Main.dust[num54].noGravity = true;
									Main.dust[num54].scale += 0.3f;
								}
							}
							return;
						}
						this.ai[2] += 1f;
						int num55 = 10;
						if (base.velocity.Y == 0f && CountNPCS(472) < num55)
						{
							if (this.ai[2] >= 180f)
							{
								this.ai[2] = 0f;
								this.ai[3] = 1f;
							}
						}
						else
						{
							if (CountNPCS(472) >= num55)
							{
								this.ai[2] += 1f;
							}
							if (this.ai[2] >= 360f)
							{
								this.ai[2] = 0f;
								this.ai[3] = -2f;
								base.velocity.Y -= 3f;
							}
						}
						if (target >= 0 && !Main.player[target].dead && (Main.player[target].Center - base.Center).Length() > 800f)
						{
							this.ai[3] = -1f;
							this.ai[2] = 0f;
						}
					}
					if (Main.player[target].dead)
					{
						TargetClosest();
						if (Main.player[target].dead && timeLeft > 1)
						{
							timeLeft = 1;
						}
					}
				}
				if (type == 419)
				{
					reflectingProjectiles = false;
					takenDamageMultiplier = 1f;
					int num56 = 6;
					int num57 = 10;
					float scaleFactor3 = 16f;
					if (this.ai[2] > 0f)
					{
						this.ai[2] -= 1f;
					}
					if (this.ai[2] == 0f)
					{
						if (((Main.player[target].Center.X < base.Center.X && base.direction < 0) || (Main.player[target].Center.X > base.Center.X && base.direction > 0)) && Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
						{
							this.ai[2] = -1f;
							netUpdate = true;
							TargetClosest();
						}
					}
					else
					{
						if (this.ai[2] < 0f && this.ai[2] > (float)(-num56))
						{
							this.ai[2] -= 1f;
							base.velocity.X *= 0.9f;
							return;
						}
						if (this.ai[2] == (float)(-num56))
						{
							this.ai[2] -= 1f;
							TargetClosest();
							Vector2 vec = DirectionTo(Main.player[target].Top + new Vector2(0f, -30f));
							if (vec.HasNaNs())
							{
								vec = Vector2.Normalize(new Vector2(spriteDirection, -1f));
							}
							base.velocity = vec * scaleFactor3;
							netUpdate = true;
							return;
						}
						if (this.ai[2] < (float)(-num56))
						{
							this.ai[2] -= 1f;
							if (base.velocity.Y == 0f)
							{
								this.ai[2] = 60f;
							}
							else if (this.ai[2] < (float)(-num56 - num57))
							{
								base.velocity.Y += 0.15f;
								if (base.velocity.Y > 24f)
								{
									base.velocity.Y = 24f;
								}
							}
							reflectingProjectiles = true;
							takenDamageMultiplier = 3f;
							if (justHit)
							{
								this.ai[2] = 60f;
								netUpdate = true;
							}
							return;
						}
					}
				}
				if (type == 415)
				{
					int num58 = 42;
					int num59 = 18;
					if (justHit)
					{
						this.ai[2] = 120f;
						netUpdate = true;
					}
					if (this.ai[2] > 0f)
					{
						this.ai[2] -= 1f;
					}
					if (this.ai[2] == 0f)
					{
						int num60 = 0;
						for (int num61 = 0; num61 < 200; num61++)
						{
							if (Main.npc[num61].active && Main.npc[num61].type == 516)
							{
								num60++;
							}
						}
						if (num60 > 6)
						{
							this.ai[2] = 90f;
						}
						else if (((Main.player[target].Center.X < base.Center.X && base.direction < 0) || (Main.player[target].Center.X > base.Center.X && base.direction > 0)) && Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
						{
							this.ai[2] = -1f;
							netUpdate = true;
							TargetClosest();
						}
					}
					else if (this.ai[2] < 0f && this.ai[2] > (float)(-num58))
					{
						this.ai[2] -= 1f;
						if (this.ai[2] == (float)(-num58))
						{
							this.ai[2] = 180 + 30 * Main.rand.Next(10);
						}
						base.velocity.X *= 0.8f;
						if (this.ai[2] == (float)(-num59) || this.ai[2] == (float)(-num59 - 8) || this.ai[2] == (float)(-num59 - 16))
						{
							for (int num62 = 0; num62 < 20; num62++)
							{
								Vector2 vector12 = base.Center + Vector2.UnitX * spriteDirection * 40f;
								Dust dust3 = Main.dust[Dust.NewDust(vector12, 0, 0, 259)];
								Vector2 vector13 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
								dust3.position = vector12 + vector13 * 4f;
								dust3.velocity = vector13 * 2f + Vector2.UnitX * Main.rand.NextFloat() * spriteDirection * 3f;
								dust3.scale = 0.3f + vector13.X * (float)(-spriteDirection);
								dust3.fadeIn = 0.7f;
								dust3.noGravity = true;
							}
							if (base.velocity.X > -0.5f && base.velocity.X < 0.5f)
							{
								base.velocity.X = 0f;
							}
							if (Main.netMode != 1)
							{
								NewNPC((int)base.Center.X + spriteDirection * 45, (int)base.Center.Y + 8, 516, 0, 0f, 0f, 0f, 0f, target);
							}
						}
						return;
					}
				}
				if (type == 428)
				{
					localAI[0] += 1f;
					if (localAI[0] >= 300f)
					{
						int num63 = (int)base.Center.X / 16 - 1;
						int num64 = (int)base.Center.Y / 16 - 1;
						if (!Collision.SolidTiles(num63, num63 + 2, num64, num64 + 1) && Main.netMode != 1)
						{
							Transform(427);
							life = lifeMax;
							localAI[0] = 0f;
							return;
						}
					}
					int num65 = 0;
					num65 = ((localAI[0] < 60f) ? 16 : ((localAI[0] < 120f) ? 8 : ((localAI[0] < 180f) ? 4 : ((localAI[0] < 240f) ? 2 : ((!(localAI[0] < 300f)) ? 1 : 1)))));
					if (Main.rand.Next(num65) == 0)
					{
						Dust dust4 = Main.dust[Dust.NewDust(base.position, width, height, 229)];
						dust4.noGravity = true;
						dust4.scale = 1f;
						dust4.noLight = true;
						dust4.velocity = DirectionFrom(dust4.position) * dust4.velocity.Length();
						dust4.position -= dust4.velocity * 5f;
						dust4.position.X += base.direction * 6;
						dust4.position.Y += 4f;
					}
				}
				if (type == 427)
				{
					localAI[0] += 1f;
					localAI[0] += Math.Abs(base.velocity.X) / 2f;
					if (localAI[0] >= 1200f && Main.netMode != 1)
					{
						int num66 = (int)base.Center.X / 16 - 2;
						int num67 = (int)base.Center.Y / 16 - 3;
						if (!Collision.SolidTiles(num66, num66 + 4, num67, num67 + 4))
						{
							Transform(426);
							life = lifeMax;
							localAI[0] = 0f;
							return;
						}
					}
					int num68 = 0;
					num68 = ((localAI[0] < 360f) ? 32 : ((localAI[0] < 720f) ? 16 : ((localAI[0] < 1080f) ? 6 : ((localAI[0] < 1440f) ? 2 : ((!(localAI[0] < 1800f)) ? 1 : 1)))));
					if (Main.rand.Next(num68) == 0)
					{
						Dust dust5 = Main.dust[Dust.NewDust(base.position, width, height, 229)];
						dust5.noGravity = true;
						dust5.scale = 1f;
						dust5.noLight = true;
					}
				}
				bool flag4 = false;
				if (base.velocity.X == 0f)
				{
					flag4 = true;
				}
				if (justHit)
				{
					flag4 = false;
				}
				if (Main.netMode != 1 && type == 198 && (double)life <= (double)lifeMax * 0.55)
				{
					Transform(199);
				}
				if (Main.netMode != 1 && type == 348 && (double)life <= (double)lifeMax * 0.55)
				{
					Transform(349);
				}
				int num69 = 60;
				if (type == 120)
				{
					num69 = 180;
					if (this.ai[3] == -120f)
					{
						base.velocity *= 0f;
						this.ai[3] = 0f;
						Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 8);
						Vector2 vector14 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						float num70 = oldPos[2].X + (float)width * 0.5f - vector14.X;
						float num71 = oldPos[2].Y + (float)height * 0.5f - vector14.Y;
						float num72 = (float)Math.Sqrt(num70 * num70 + num71 * num71);
						num72 = 2f / num72;
						num70 *= num72;
						num71 *= num72;
						for (int num73 = 0; num73 < 20; num73++)
						{
							int num74 = Dust.NewDust(base.position, width, height, 71, num70, num71, 200, default(Color), 2f);
							Main.dust[num74].noGravity = true;
							Main.dust[num74].velocity.X *= 2f;
						}
						for (int num75 = 0; num75 < 20; num75++)
						{
							int num76 = Dust.NewDust(oldPos[2], width, height, 71, 0f - num70, 0f - num71, 200, default(Color), 2f);
							Main.dust[num76].noGravity = true;
							Main.dust[num76].velocity.X *= 2f;
						}
					}
				}
				bool flag5 = false;
				bool flag6 = true;
				if (type == 343 || type == 47 || type == 67 || type == 109 || type == 110 || type == 111 || type == 120 || type == 163 || type == 164 || type == 239 || type == 168 || type == 199 || type == 206 || type == 214 || type == 215 || type == 216 || type == 217 || type == 218 || type == 219 || type == 220 || type == 226 || type == 243 || type == 251 || type == 257 || type == 258 || type == 290 || type == 291 || type == 292 || type == 293 || type == 305 || type == 306 || type == 307 || type == 308 || type == 309 || type == 348 || type == 349 || type == 350 || type == 351 || type == 379 || (type >= 430 && type <= 436) || type == 380 || type == 381 || type == 382 || type == 383 || type == 386 || type == 391 || (type >= 449 && type <= 452) || type == 466 || type == 464 || type == 166 || type == 469 || type == 468 || type == 471 || type == 470 || type == 480 || type == 481 || type == 482 || type == 411 || type == 424 || type == 409 || (type >= 494 && type <= 506) || type == 425 || type == 427 || type == 426 || type == 428 || type == 508 || type == 415 || type == 419 || type == 520 || (type >= 524 && type <= 527) || type == 528 || type == 529 || type == 530 || type == 532)
				{
					flag6 = false;
				}
				bool flag7 = false;
				int num77 = type;
				if (num77 == 425 || num77 == 471)
				{
					flag7 = true;
				}
				bool flag8 = true;
				switch (type)
				{
				case 110:
				case 111:
				case 206:
				case 214:
				case 215:
				case 216:
				case 291:
				case 292:
				case 293:
				case 350:
				case 379:
				case 380:
				case 381:
				case 382:
				case 409:
				case 411:
				case 424:
				case 426:
				case 466:
				case 498:
				case 499:
				case 500:
				case 501:
				case 502:
				case 503:
				case 504:
				case 505:
				case 506:
				case 520:
					if (this.ai[2] > 0f)
					{
						flag8 = false;
					}
					break;
				}
				if (!flag7 && flag8)
				{
					if (base.velocity.Y == 0f && ((base.velocity.X > 0f && base.direction < 0) || (base.velocity.X < 0f && base.direction > 0)))
					{
						flag5 = true;
					}
					if (base.position.X == oldPosition.X || this.ai[3] >= (float)num69 || flag5)
					{
						this.ai[3] += 1f;
					}
					else if ((double)Math.Abs(base.velocity.X) > 0.9 && this.ai[3] > 0f)
					{
						this.ai[3] -= 1f;
					}
					if (this.ai[3] > (float)(num69 * 10))
					{
						this.ai[3] = 0f;
					}
					if (justHit)
					{
						this.ai[3] = 0f;
					}
					if (this.ai[3] == (float)num69)
					{
						netUpdate = true;
					}
				}
				if (type == 463 && Main.netMode != 1)
				{
					if (localAI[3] > 0f)
					{
						localAI[3] -= 1f;
					}
					if (justHit && localAI[3] <= 0f && Main.rand.Next(3) == 0)
					{
						localAI[3] = 30f;
						int num78 = Main.rand.Next(3, 6);
						int[] array = new int[num78];
						int num79 = 0;
						for (int num80 = 0; num80 < 16; num80++)
						{
							if (Main.player[num80].active && !Main.player[num80].dead && Collision.CanHitLine(base.position, width, height, Main.player[num80].position, Main.player[num80].width, Main.player[num80].height))
							{
								array[num79] = num80;
								num79++;
								if (num79 == num78)
								{
									break;
								}
							}
						}
						if (num79 > 1)
						{
							for (int num81 = 0; num81 < 100; num81++)
							{
								int num82 = Main.rand.Next(num79);
								int num83;
								for (num83 = num82; num83 == num82; num83 = Main.rand.Next(num79))
								{
								}
								int num84 = array[num82];
								array[num82] = array[num83];
								array[num83] = num84;
							}
						}
						Vector2 vector15 = new Vector2(-1f, -1f);
						for (int num85 = 0; num85 < num79; num85++)
						{
							Vector2 vector16 = Main.npc[array[num85]].Center - base.Center;
							vector16.Normalize();
							vector15 += vector16;
						}
						vector15.Normalize();
						for (int num86 = 0; num86 < num78; num86++)
						{
							float num87 = Main.rand.Next(8, 13);
							Vector2 vector17 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
							vector17.Normalize();
							if (num79 > 0)
							{
								vector17 += vector15;
								vector17.Normalize();
							}
							vector17 *= num87;
							if (num79 > 0)
							{
								num79--;
								vector17 = Main.player[array[num79]].Center - base.Center;
								vector17.Normalize();
								vector17 *= num87;
							}
							Projectile.NewProjectile(base.Center.X, base.position.Y + (float)(width / 4), vector17.X, vector17.Y, 498, (int)((double)damage * 0.15), 1f);
						}
					}
				}
				if (type == 460)
				{
					if (base.velocity.Y < 0f - gravity || base.velocity.Y > gravity)
					{
						knockBackResist = 0f;
					}
					else
					{
						knockBackResist = 0.25f * Main.knockBackMultiplier;
					}
				}
				if (type == 469)
				{
					knockBackResist = 0.45f * Main.knockBackMultiplier;
					if (this.ai[2] == 1f)
					{
						knockBackResist = 0f;
					}
					bool flag9 = false;
					int num88 = (int)base.Center.X / 16;
					int num89 = (int)base.Center.Y / 16;
					for (int num90 = num88 - 1; num90 <= num88 + 1; num90++)
					{
						for (int num91 = num89 - 1; num91 <= num89 + 1; num91++)
						{
							if (Main.tile[num90, num91] != null && Main.tile[num90, num91].wall > 0)
							{
								flag9 = true;
								break;
							}
						}
						if (flag9)
						{
							break;
						}
					}
					if (this.ai[2] == 0f && flag9)
					{
						if (base.velocity.Y == 0f)
						{
							base.velocity.Y = -4.6f;
							base.velocity.X *= 1.3f;
						}
						else if (base.velocity.Y > 0f)
						{
							this.ai[2] = 1f;
						}
					}
					if (flag9 && this.ai[2] == 1f && Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						Vector2 value4 = Main.player[target].Center - base.Center;
						float num92 = value4.Length();
						value4.Normalize();
						value4 *= 4.5f + num92 / 300f;
						base.velocity = (base.velocity * 29f + value4) / 30f;
						noGravity = true;
						this.ai[2] = 1f;
						return;
					}
					noGravity = false;
					this.ai[2] = 0f;
				}
				if (type == 462 && base.velocity.Y == 0f && (Main.player[target].Center - base.Center).Length() < 150f && Math.Abs(base.velocity.X) > 3f && ((base.velocity.X < 0f && base.Center.X > Main.player[target].Center.X) || (base.velocity.X > 0f && base.Center.X < Main.player[target].Center.X)))
				{
					base.velocity.X *= 1.75f;
					base.velocity.Y -= 4.5f;
					if (base.Center.Y - Main.player[target].Center.Y > 20f)
					{
						base.velocity.Y -= 0.5f;
					}
					if (base.Center.Y - Main.player[target].Center.Y > 40f)
					{
						base.velocity.Y -= 1f;
					}
					if (base.Center.Y - Main.player[target].Center.Y > 80f)
					{
						base.velocity.Y -= 1.5f;
					}
					if (base.Center.Y - Main.player[target].Center.Y > 100f)
					{
						base.velocity.Y -= 1.5f;
					}
					if (Math.Abs(base.velocity.X) > 7f)
					{
						if (base.velocity.X < 0f)
						{
							base.velocity.X = -7f;
						}
						else
						{
							base.velocity.X = 7f;
						}
					}
				}
				if (this.ai[3] < (float)num69 && (Main.eclipse || !Main.dayTime || (double)base.position.Y > Main.worldSurface * 16.0 || (Main.invasionType == 1 && (type == 343 || type == 350)) || (Main.invasionType == 1 && (type == 26 || type == 27 || type == 28 || type == 111 || type == 471)) || type == 73 || (Main.invasionType == 3 && type >= 212 && type <= 216) || (Main.invasionType == 4 && (type == 381 || type == 382 || type == 383 || type == 385 || type == 386 || type == 389 || type == 391 || type == 520)) || type == 31 || type == 294 || type == 295 || type == 296 || type == 47 || type == 67 || type == 77 || type == 78 || type == 79 || type == 80 || type == 110 || type == 120 || type == 168 || type == 181 || type == 185 || type == 198 || type == 199 || type == 206 || type == 217 || type == 218 || type == 219 || type == 220 || type == 239 || type == 243 || type == 254 || type == 255 || type == 257 || type == 258 || type == 291 || type == 292 || type == 293 || type == 379 || type == 380 || type == 464 || type == 470 || type == 424 || (type == 411 && (this.ai[1] >= 180f || this.ai[1] < 90f)) || type == 409 || type == 425 || type == 429 || type == 427 || type == 428 || type == 508 || type == 415 || type == 419 || (type >= 524 && type <= 527) || type == 528 || type == 529 || type == 530 || type == 532))
				{
					if ((type == 3 || type == 331 || type == 332 || type == 21 || (type >= 449 && type <= 452) || type == 31 || type == 294 || type == 295 || type == 296 || type == 77 || type == 110 || type == 132 || type == 167 || type == 161 || type == 162 || type == 186 || type == 187 || type == 188 || type == 189 || type == 197 || type == 200 || type == 201 || type == 202 || type == 203 || type == 223 || type == 291 || type == 292 || type == 293 || type == 320 || type == 321 || type == 319 || type == 481) && Main.rand.Next(1000) == 0)
					{
						Main.PlaySound(14, (int)base.position.X, (int)base.position.Y);
					}
					if (type == 489 && Main.rand.Next(800) == 0)
					{
						Main.PlaySound(14, (int)base.position.X, (int)base.position.Y, type);
					}
					if ((type == 78 || type == 79 || type == 80) && Main.rand.Next(500) == 0)
					{
						Main.PlaySound(26, (int)base.position.X, (int)base.position.Y);
					}
					if (type == 159 && Main.rand.Next(500) == 0)
					{
						Main.PlaySound(29, (int)base.position.X, (int)base.position.Y, 7);
					}
					if (type == 162 && Main.rand.Next(500) == 0)
					{
						Main.PlaySound(29, (int)base.position.X, (int)base.position.Y, 6);
					}
					if (type == 181 && Main.rand.Next(500) == 0)
					{
						Main.PlaySound(29, (int)base.position.X, (int)base.position.Y, 8);
					}
					if (type >= 269 && type <= 280 && Main.rand.Next(1000) == 0)
					{
						Main.PlaySound(14, (int)base.position.X, (int)base.position.Y);
					}
					TargetClosest();
				}
				else if (!(this.ai[2] > 0f) || (type != 110 && type != 111 && type != 206 && type != 216 && type != 214 && type != 215 && type != 291 && type != 292 && type != 293 && type != 350 && type != 381 && type != 382 && type != 383 && type != 385 && type != 386 && type != 389 && type != 391 && type != 469 && type != 166 && type != 466 && type != 471 && type != 411 && type != 409 && type != 424 && type != 425 && type != 426 && type != 415 && type != 419 && type != 520))
				{
					if (Main.dayTime && (double)(base.position.Y / 16f) < Main.worldSurface && timeLeft > 10)
					{
						timeLeft = 10;
					}
					if (base.velocity.X == 0f)
					{
						if (base.velocity.Y == 0f)
						{
							this.ai[0] += 1f;
							if (this.ai[0] >= 2f)
							{
								base.direction *= -1;
								spriteDirection = base.direction;
								this.ai[0] = 0f;
							}
						}
					}
					else
					{
						this.ai[0] = 0f;
					}
					if (base.direction == 0)
					{
						base.direction = 1;
					}
				}
				if (type == 159 || type == 349)
				{
					if (type == 159 && ((base.velocity.X > 0f && base.direction < 0) || (base.velocity.X < 0f && base.direction > 0)))
					{
						base.velocity.X *= 0.95f;
					}
					if (base.velocity.X < -6f || base.velocity.X > 6f)
					{
						if (base.velocity.Y == 0f)
						{
							base.velocity *= 0.8f;
						}
					}
					else if (base.velocity.X < 6f && base.direction == 1)
					{
						if (base.velocity.Y == 0f && base.velocity.X < 0f)
						{
							base.velocity.X *= 0.99f;
						}
						base.velocity.X += 0.07f;
						if (base.velocity.X > 6f)
						{
							base.velocity.X = 6f;
						}
					}
					else if (base.velocity.X > -6f && base.direction == -1)
					{
						if (base.velocity.Y == 0f && base.velocity.X > 0f)
						{
							base.velocity.X *= 0.99f;
						}
						base.velocity.X -= 0.07f;
						if (base.velocity.X < -6f)
						{
							base.velocity.X = -6f;
						}
					}
				}
				else if (type == 199)
				{
					if (base.velocity.X < -4f || base.velocity.X > 4f)
					{
						if (base.velocity.Y == 0f)
						{
							base.velocity *= 0.8f;
						}
					}
					else if (base.velocity.X < 4f && base.direction == 1)
					{
						if (base.velocity.Y == 0f && base.velocity.X < 0f)
						{
							base.velocity.X *= 0.8f;
						}
						base.velocity.X += 0.1f;
						if (base.velocity.X > 4f)
						{
							base.velocity.X = 4f;
						}
					}
					else if (base.velocity.X > -4f && base.direction == -1)
					{
						if (base.velocity.Y == 0f && base.velocity.X > 0f)
						{
							base.velocity.X *= 0.8f;
						}
						base.velocity.X -= 0.1f;
						if (base.velocity.X < -4f)
						{
							base.velocity.X = -4f;
						}
					}
				}
				else if (type == 120 || type == 166 || type == 213 || type == 258 || type == 528 || type == 529)
				{
					if (base.velocity.X < -3f || base.velocity.X > 3f)
					{
						if (base.velocity.Y == 0f)
						{
							base.velocity *= 0.8f;
						}
					}
					else if (base.velocity.X < 3f && base.direction == 1)
					{
						if (base.velocity.Y == 0f && base.velocity.X < 0f)
						{
							base.velocity.X *= 0.99f;
						}
						base.velocity.X += 0.07f;
						if (base.velocity.X > 3f)
						{
							base.velocity.X = 3f;
						}
					}
					else if (base.velocity.X > -3f && base.direction == -1)
					{
						if (base.velocity.Y == 0f && base.velocity.X > 0f)
						{
							base.velocity.X *= 0.99f;
						}
						base.velocity.X -= 0.07f;
						if (base.velocity.X < -3f)
						{
							base.velocity.X = -3f;
						}
					}
				}
				else if (type == 461 || type == 27 || type == 77 || type == 104 || type == 163 || type == 162 || type == 196 || type == 197 || type == 212 || type == 257 || type == 326 || type == 343 || type == 348 || type == 351 || (type >= 524 && type <= 527) || type == 530)
				{
					if (base.velocity.X < -2f || base.velocity.X > 2f)
					{
						if (base.velocity.Y == 0f)
						{
							base.velocity *= 0.8f;
						}
					}
					else if (base.velocity.X < 2f && base.direction == 1)
					{
						base.velocity.X += 0.07f;
						if (base.velocity.X > 2f)
						{
							base.velocity.X = 2f;
						}
					}
					else if (base.velocity.X > -2f && base.direction == -1)
					{
						base.velocity.X -= 0.07f;
						if (base.velocity.X < -2f)
						{
							base.velocity.X = -2f;
						}
					}
				}
				else if (type == 109)
				{
					if (base.velocity.X < -2f || base.velocity.X > 2f)
					{
						if (base.velocity.Y == 0f)
						{
							base.velocity *= 0.8f;
						}
					}
					else if (base.velocity.X < 2f && base.direction == 1)
					{
						base.velocity.X += 0.04f;
						if (base.velocity.X > 2f)
						{
							base.velocity.X = 2f;
						}
					}
					else if (base.velocity.X > -2f && base.direction == -1)
					{
						base.velocity.X -= 0.04f;
						if (base.velocity.X < -2f)
						{
							base.velocity.X = -2f;
						}
					}
				}
				else if (type == 21 || type == 26 || type == 31 || type == 294 || type == 295 || type == 296 || type == 47 || type == 73 || type == 140 || type == 164 || type == 239 || type == 167 || type == 168 || type == 185 || type == 198 || type == 201 || type == 202 || type == 203 || type == 217 || type == 218 || type == 219 || type == 226 || type == 181 || type == 254 || type == 338 || type == 339 || type == 340 || type == 342 || type == 385 || type == 389 || type == 462 || type == 463 || type == 466 || type == 464 || type == 469 || type == 470 || type == 480 || type == 482 || type == 425 || type == 429)
				{
					float num93 = 1.5f;
					if (type == 294)
					{
						num93 = 2f;
					}
					else if (type == 295)
					{
						num93 = 1.75f;
					}
					else if (type == 296)
					{
						num93 = 1.25f;
					}
					else if (type == 201)
					{
						num93 = 1.1f;
					}
					else if (type == 202)
					{
						num93 = 0.9f;
					}
					else if (type == 203)
					{
						num93 = 1.2f;
					}
					else if (type == 338)
					{
						num93 = 1.75f;
					}
					else if (type == 339)
					{
						num93 = 1.25f;
					}
					else if (type == 340)
					{
						num93 = 2f;
					}
					else if (type == 385)
					{
						num93 = 1.8f;
					}
					else if (type == 389)
					{
						num93 = 2.25f;
					}
					else if (type == 462)
					{
						num93 = 4f;
					}
					else if (type == 463)
					{
						num93 = 0.75f;
					}
					else if (type == 466)
					{
						num93 = 3.75f;
					}
					else if (type == 469)
					{
						num93 = 3.25f;
					}
					else if (type == 480)
					{
						num93 = 1.5f + (1f - (float)life / (float)lifeMax) * 2f;
					}
					else if (type == 425)
					{
						num93 = 6f;
					}
					else if (type == 429)
					{
						num93 = 4f;
					}
					if (type == 21 || type == 201 || type == 202 || type == 203 || type == 342)
					{
						num93 *= 1f + (1f - scale);
					}
					if (base.velocity.X < 0f - num93 || base.velocity.X > num93)
					{
						if (base.velocity.Y == 0f)
						{
							base.velocity *= 0.8f;
						}
					}
					else if (base.velocity.X < num93 && base.direction == 1)
					{
						if (type == 466 && base.velocity.X < -2f)
						{
							base.velocity.X *= 0.9f;
						}
						base.velocity.X += 0.07f;
						if (base.velocity.X > num93)
						{
							base.velocity.X = num93;
						}
					}
					else if (base.velocity.X > 0f - num93 && base.direction == -1)
					{
						if (type == 466 && base.velocity.X > 2f)
						{
							base.velocity.X *= 0.9f;
						}
						base.velocity.X -= 0.07f;
						if (base.velocity.X < 0f - num93)
						{
							base.velocity.X = 0f - num93;
						}
					}
					if (base.velocity.Y == 0f && type == 462 && ((base.direction > 0 && base.velocity.X < 0f) || (base.direction < 0 && base.velocity.X > 0f)))
					{
						base.velocity.X *= 0.9f;
					}
				}
				else if (type >= 269 && type <= 280)
				{
					float num94 = 1.5f;
					if (type == 269)
					{
						num94 = 2f;
					}
					if (type == 270)
					{
						num94 = 1f;
					}
					if (type == 271)
					{
						num94 = 1.5f;
					}
					if (type == 272)
					{
						num94 = 3f;
					}
					if (type == 273)
					{
						num94 = 1.25f;
					}
					if (type == 274)
					{
						num94 = 3f;
					}
					if (type == 275)
					{
						num94 = 3.25f;
					}
					if (type == 276)
					{
						num94 = 2f;
					}
					if (type == 277)
					{
						num94 = 2.75f;
					}
					if (type == 278)
					{
						num94 = 1.8f;
					}
					if (type == 279)
					{
						num94 = 1.3f;
					}
					if (type == 280)
					{
						num94 = 2.5f;
					}
					num94 *= 1f + (1f - scale);
					if (base.velocity.X < 0f - num94 || base.velocity.X > num94)
					{
						if (base.velocity.Y == 0f)
						{
							base.velocity *= 0.8f;
						}
					}
					else if (base.velocity.X < num94 && base.direction == 1)
					{
						base.velocity.X += 0.07f;
						if (base.velocity.X > num94)
						{
							base.velocity.X = num94;
						}
					}
					else if (base.velocity.X > 0f - num94 && base.direction == -1)
					{
						base.velocity.X -= 0.07f;
						if (base.velocity.X < 0f - num94)
						{
							base.velocity.X = 0f - num94;
						}
					}
				}
				else if (type >= 305 && type <= 314)
				{
					float num95 = 1.5f;
					if (type == 305 || type == 310)
					{
						num95 = 2f;
					}
					if (type == 306 || type == 311)
					{
						num95 = 1.25f;
					}
					if (type == 307 || type == 312)
					{
						num95 = 2.25f;
					}
					if (type == 308 || type == 313)
					{
						num95 = 1.5f;
					}
					if (type == 309 || type == 314)
					{
						num95 = 1f;
					}
					if (type < 310)
					{
						if (base.velocity.Y == 0f)
						{
							base.velocity.X *= 0.85f;
							if ((double)base.velocity.X > -0.3 && (double)base.velocity.X < 0.3)
							{
								base.velocity.Y = -7f;
								base.velocity.X = num95 * (float)base.direction;
							}
						}
						else if (spriteDirection == base.direction)
						{
							base.velocity.X = (base.velocity.X * 10f + num95 * (float)base.direction) / 11f;
						}
					}
					else if (base.velocity.X < 0f - num95 || base.velocity.X > num95)
					{
						if (base.velocity.Y == 0f)
						{
							base.velocity *= 0.8f;
						}
					}
					else if (base.velocity.X < num95 && base.direction == 1)
					{
						base.velocity.X += 0.07f;
						if (base.velocity.X > num95)
						{
							base.velocity.X = num95;
						}
					}
					else if (base.velocity.X > 0f - num95 && base.direction == -1)
					{
						base.velocity.X -= 0.07f;
						if (base.velocity.X < 0f - num95)
						{
							base.velocity.X = 0f - num95;
						}
					}
				}
				else if (type == 67 || type == 220 || type == 428)
				{
					if (base.velocity.X < -0.5f || base.velocity.X > 0.5f)
					{
						if (base.velocity.Y == 0f)
						{
							base.velocity *= 0.7f;
						}
					}
					else if (base.velocity.X < 0.5f && base.direction == 1)
					{
						base.velocity.X += 0.03f;
						if (base.velocity.X > 0.5f)
						{
							base.velocity.X = 0.5f;
						}
					}
					else if (base.velocity.X > -0.5f && base.direction == -1)
					{
						base.velocity.X -= 0.03f;
						if (base.velocity.X < -0.5f)
						{
							base.velocity.X = -0.5f;
						}
					}
				}
				else if (type == 78 || type == 79 || type == 80)
				{
					float num96 = 1f;
					float num97 = 0.05f;
					if (life < lifeMax / 2)
					{
						num96 = 2f;
						num97 = 0.1f;
					}
					if (type == 79)
					{
						num96 *= 1.5f;
					}
					if (base.velocity.X < 0f - num96 || base.velocity.X > num96)
					{
						if (base.velocity.Y == 0f)
						{
							base.velocity *= 0.7f;
						}
					}
					else if (base.velocity.X < num96 && base.direction == 1)
					{
						base.velocity.X += num97;
						if (base.velocity.X > num96)
						{
							base.velocity.X = num96;
						}
					}
					else if (base.velocity.X > 0f - num96 && base.direction == -1)
					{
						base.velocity.X -= num97;
						if (base.velocity.X < 0f - num96)
						{
							base.velocity.X = 0f - num96;
						}
					}
				}
				else if (type == 287)
				{
					float num98 = 5f;
					float num99 = 0.2f;
					if (base.velocity.X < 0f - num98 || base.velocity.X > num98)
					{
						if (base.velocity.Y == 0f)
						{
							base.velocity *= 0.7f;
						}
					}
					else if (base.velocity.X < num98 && base.direction == 1)
					{
						base.velocity.X += num99;
						if (base.velocity.X > num98)
						{
							base.velocity.X = num98;
						}
					}
					else if (base.velocity.X > 0f - num98 && base.direction == -1)
					{
						base.velocity.X -= num99;
						if (base.velocity.X < 0f - num98)
						{
							base.velocity.X = 0f - num98;
						}
					}
				}
				else if (type == 243)
				{
					float num100 = 1f;
					float num101 = 0.07f;
					num100 += (1f - (float)life / (float)lifeMax) * 1.5f;
					num101 += (1f - (float)life / (float)lifeMax) * 0.15f;
					if (base.velocity.X < 0f - num100 || base.velocity.X > num100)
					{
						if (base.velocity.Y == 0f)
						{
							base.velocity *= 0.7f;
						}
					}
					else if (base.velocity.X < num100 && base.direction == 1)
					{
						base.velocity.X += num101;
						if (base.velocity.X > num100)
						{
							base.velocity.X = num100;
						}
					}
					else if (base.velocity.X > 0f - num100 && base.direction == -1)
					{
						base.velocity.X -= num101;
						if (base.velocity.X < 0f - num100)
						{
							base.velocity.X = 0f - num100;
						}
					}
				}
				else if (type == 251)
				{
					float num102 = 1f;
					float num103 = 0.08f;
					num102 += (1f - (float)life / (float)lifeMax) * 2f;
					num103 += (1f - (float)life / (float)lifeMax) * 0.2f;
					if (base.velocity.X < 0f - num102 || base.velocity.X > num102)
					{
						if (base.velocity.Y == 0f)
						{
							base.velocity *= 0.7f;
						}
					}
					else if (base.velocity.X < num102 && base.direction == 1)
					{
						base.velocity.X += num103;
						if (base.velocity.X > num102)
						{
							base.velocity.X = num102;
						}
					}
					else if (base.velocity.X > 0f - num102 && base.direction == -1)
					{
						base.velocity.X -= num103;
						if (base.velocity.X < 0f - num102)
						{
							base.velocity.X = 0f - num102;
						}
					}
				}
				else if (type == 386)
				{
					if (this.ai[2] > 0f)
					{
						if (base.velocity.Y == 0f)
						{
							base.velocity.X *= 0.8f;
						}
					}
					else
					{
						float num104 = 0.15f;
						float num105 = 1.5f;
						if (base.velocity.X < 0f - num105 || base.velocity.X > num105)
						{
							if (base.velocity.Y == 0f)
							{
								base.velocity *= 0.7f;
							}
						}
						else if (base.velocity.X < num105 && base.direction == 1)
						{
							base.velocity.X += num104;
							if (base.velocity.X > num105)
							{
								base.velocity.X = num105;
							}
						}
						else if (base.velocity.X > 0f - num105 && base.direction == -1)
						{
							base.velocity.X -= num104;
							if (base.velocity.X < 0f - num105)
							{
								base.velocity.X = 0f - num105;
							}
						}
					}
				}
				else if (type == 460)
				{
					float num106 = 3f;
					float num107 = 0.1f;
					if (Math.Abs(base.velocity.X) > 2f)
					{
						num107 *= 0.8f;
					}
					if ((double)Math.Abs(base.velocity.X) > 2.5)
					{
						num107 *= 0.8f;
					}
					if (Math.Abs(base.velocity.X) > 3f)
					{
						num107 *= 0.8f;
					}
					if ((double)Math.Abs(base.velocity.X) > 3.5)
					{
						num107 *= 0.8f;
					}
					if (Math.Abs(base.velocity.X) > 4f)
					{
						num107 *= 0.8f;
					}
					if ((double)Math.Abs(base.velocity.X) > 4.5)
					{
						num107 *= 0.8f;
					}
					if (Math.Abs(base.velocity.X) > 5f)
					{
						num107 *= 0.8f;
					}
					if ((double)Math.Abs(base.velocity.X) > 5.5)
					{
						num107 *= 0.8f;
					}
					num106 += (1f - (float)life / (float)lifeMax) * 3f;
					if (base.velocity.X < 0f - num106 || base.velocity.X > num106)
					{
						if (base.velocity.Y == 0f)
						{
							base.velocity *= 0.7f;
						}
					}
					else if (base.velocity.X < num106 && base.direction == 1)
					{
						if (base.velocity.X < 0f)
						{
							base.velocity.X *= 0.93f;
						}
						base.velocity.X += num107;
						if (base.velocity.X > num106)
						{
							base.velocity.X = num106;
						}
					}
					else if (base.velocity.X > 0f - num106 && base.direction == -1)
					{
						if (base.velocity.X > 0f)
						{
							base.velocity.X *= 0.93f;
						}
						base.velocity.X -= num107;
						if (base.velocity.X < 0f - num106)
						{
							base.velocity.X = 0f - num106;
						}
					}
				}
				else if (type == 508)
				{
					float num108 = 2.5f;
					float num109 = 40f;
					float num110 = Math.Abs(base.velocity.X);
					if (num110 > 2.75f)
					{
						num108 = 3.5f;
						num109 += 80f;
					}
					else if ((double)num110 > 2.25)
					{
						num108 = 3f;
						num109 += 60f;
					}
					if ((double)Math.Abs(base.velocity.Y) < 0.5)
					{
						if (base.velocity.X > 0f && base.direction < 0)
						{
							base.velocity *= 0.9f;
						}
						if (base.velocity.X < 0f && base.direction > 0)
						{
							base.velocity *= 0.9f;
						}
					}
					if (Math.Abs(base.velocity.Y) > gravity)
					{
						num109 *= 3f;
					}
					if (base.velocity.X <= 0f && base.direction < 0)
					{
						base.velocity.X = (base.velocity.X * num109 - num108) / (num109 + 1f);
					}
					else if (base.velocity.X >= 0f && base.direction > 0)
					{
						base.velocity.X = (base.velocity.X * num109 + num108) / (num109 + 1f);
					}
					else if (Math.Abs(base.Center.X - Main.player[target].Center.X) > 20f && Math.Abs(base.velocity.Y) <= gravity)
					{
						base.velocity.X *= 0.99f;
						base.velocity.X += (float)base.direction * 0.025f;
					}
				}
				else if (type == 391 || type == 427 || type == 415 || type == 419 || type == 518 || type == 532)
				{
					float num111 = 5f;
					float num112 = 0.25f;
					float num113 = 0.7f;
					if (type == 427)
					{
						num111 = 6f;
						num112 = 0.2f;
						num113 = 0.8f;
					}
					else if (type == 415)
					{
						num111 = 4f;
						num112 = 0.1f;
						num113 = 0.95f;
					}
					else if (type == 419)
					{
						num111 = 6f;
						num112 = 0.15f;
						num113 = 0.85f;
					}
					else if (type == 518)
					{
						num111 = 5f;
						num112 = 0.1f;
						num113 = 0.95f;
					}
					else if (type == 532)
					{
						num111 = 5f;
						num112 = 0.15f;
						num113 = 0.98f;
					}
					if (base.velocity.X < 0f - num111 || base.velocity.X > num111)
					{
						if (base.velocity.Y == 0f)
						{
							base.velocity *= num113;
						}
					}
					else if (base.velocity.X < num111 && base.direction == 1)
					{
						base.velocity.X += num112;
						if (base.velocity.X > num111)
						{
							base.velocity.X = num111;
						}
					}
					else if (base.velocity.X > 0f - num111 && base.direction == -1)
					{
						base.velocity.X -= num112;
						if (base.velocity.X < 0f - num111)
						{
							base.velocity.X = 0f - num111;
						}
					}
				}
				else if ((type >= 430 && type <= 436) || type == 494 || type == 495)
				{
					if (this.ai[2] == 0f)
					{
						damage = defDamage;
						float num114 = 1f;
						num114 *= 1f + (1f - scale);
						if (base.velocity.X < 0f - num114 || base.velocity.X > num114)
						{
							if (base.velocity.Y == 0f)
							{
								base.velocity *= 0.8f;
							}
						}
						else if (base.velocity.X < num114 && base.direction == 1)
						{
							base.velocity.X += 0.07f;
							if (base.velocity.X > num114)
							{
								base.velocity.X = num114;
							}
						}
						else if (base.velocity.X > 0f - num114 && base.direction == -1)
						{
							base.velocity.X -= 0.07f;
							if (base.velocity.X < 0f - num114)
							{
								base.velocity.X = 0f - num114;
							}
						}
						if (base.velocity.Y == 0f && (!Main.dayTime || (double)base.position.Y > Main.worldSurface * 16.0) && !Main.player[target].dead)
						{
							Vector2 vector18 = base.Center - Main.player[target].Center;
							int num115 = 50;
							if (type >= 494 && type <= 495)
							{
								num115 = 42;
							}
							if (vector18.Length() < (float)num115 && Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
							{
								base.velocity.X *= 0.7f;
								this.ai[2] = 1f;
							}
						}
					}
					else
					{
						damage = (int)((double)defDamage * 1.5);
						this.ai[3] = 1f;
						base.velocity.X *= 0.9f;
						if ((double)Math.Abs(base.velocity.X) < 0.1)
						{
							base.velocity.X = 0f;
						}
						this.ai[2] += 1f;
						if (this.ai[2] >= 20f || base.velocity.Y != 0f || (Main.dayTime && (double)base.position.Y < Main.worldSurface * 16.0))
						{
							this.ai[2] = 0f;
						}
					}
				}
				else if (type != 110 && type != 111 && type != 206 && type != 214 && type != 215 && type != 216 && type != 290 && type != 291 && type != 292 && type != 293 && type != 350 && type != 379 && type != 380 && type != 381 && type != 382 && (type < 449 || type > 452) && type != 468 && type != 481 && type != 411 && type != 409 && (type < 498 || type > 506) && type != 424 && type != 426 && type != 520)
				{
					float num116 = 1f;
					if (type == 186)
					{
						num116 = 1.1f;
					}
					if (type == 187)
					{
						num116 = 0.9f;
					}
					if (type == 188)
					{
						num116 = 1.2f;
					}
					if (type == 189)
					{
						num116 = 0.8f;
					}
					if (type == 132)
					{
						num116 = 0.95f;
					}
					if (type == 200)
					{
						num116 = 0.87f;
					}
					if (type == 223)
					{
						num116 = 1.05f;
					}
					if (type == 489)
					{
						float num117 = (Main.player[target].Center - base.Center).Length();
						num117 *= 0.0025f;
						if ((double)num117 > 1.5)
						{
							num117 = 1.5f;
						}
						num116 = ((!Main.expertMode) ? (2.5f - num117) : (3f - num117));
						num116 *= 0.8f;
					}
					if (type == 489 || type == 3 || type == 132 || type == 186 || type == 187 || type == 188 || type == 189 || type == 200 || type == 223 || type == 331 || type == 332)
					{
						num116 *= 1f + (1f - scale);
					}
					if (base.velocity.X < 0f - num116 || base.velocity.X > num116)
					{
						if (base.velocity.Y == 0f)
						{
							base.velocity *= 0.8f;
						}
					}
					else if (base.velocity.X < num116 && base.direction == 1)
					{
						base.velocity.X += 0.07f;
						if (base.velocity.X > num116)
						{
							base.velocity.X = num116;
						}
					}
					else if (base.velocity.X > 0f - num116 && base.direction == -1)
					{
						base.velocity.X -= 0.07f;
						if (base.velocity.X < 0f - num116)
						{
							base.velocity.X = 0f - num116;
						}
					}
				}
				if (type >= 277 && type <= 280)
				{
					Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.2f, 0.1f, 0f);
				}
				else if (type == 520)
				{
					Lighting.AddLight(base.Top + new Vector2(0f, 20f), 0.3f, 0.3f, 0.7f);
				}
				else if (type == 525)
				{
					Vector3 rgb = new Vector3(0.7f, 1f, 0.2f) * 0.5f;
					Lighting.AddLight(base.Top + new Vector2(0f, 15f), rgb);
				}
				else if (type == 526)
				{
					Vector3 rgb2 = new Vector3(1f, 1f, 0.5f) * 0.4f;
					Lighting.AddLight(base.Top + new Vector2(0f, 15f), rgb2);
				}
				else if (type == 527)
				{
					Vector3 rgb3 = new Vector3(0.6f, 0.3f, 1f) * 0.4f;
					Lighting.AddLight(base.Top + new Vector2(0f, 15f), rgb3);
				}
				else if (type == 415)
				{
					hide = false;
					for (int num118 = 0; num118 < 200; num118++)
					{
						if (Main.npc[num118].active && Main.npc[num118].type == 416 && Main.npc[num118].ai[0] == (float)base.whoAmI)
						{
							hide = true;
							break;
						}
					}
				}
				else if (type == 258)
				{
					if (base.velocity.Y != 0f)
					{
						TargetClosest();
						spriteDirection = base.direction;
						if (Main.player[target].Center.X < base.position.X && base.velocity.X > 0f)
						{
							base.velocity.X *= 0.95f;
						}
						else if (Main.player[target].Center.X > base.position.X + (float)width && base.velocity.X < 0f)
						{
							base.velocity.X *= 0.95f;
						}
						if (Main.player[target].Center.X < base.position.X && base.velocity.X > -5f)
						{
							base.velocity.X -= 0.1f;
						}
						else if (Main.player[target].Center.X > base.position.X + (float)width && base.velocity.X < 5f)
						{
							base.velocity.X += 0.1f;
						}
					}
					else if (Main.player[target].Center.Y + 50f < base.position.Y && Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						base.velocity.Y = -7f;
					}
				}
				else if (type == 425)
				{
					if (base.velocity.Y == 0f)
					{
						this.ai[2] = 0f;
					}
					if (base.velocity.Y != 0f && this.ai[2] == 1f)
					{
						TargetClosest();
						spriteDirection = -base.direction;
						if (Collision.CanHit(base.Center, 0, 0, Main.player[target].Center, 0, 0))
						{
							float num119 = Main.player[target].Center.X - (float)(base.direction * 400) - base.Center.X;
							float num120 = Main.player[target].Bottom.Y - base.Bottom.Y;
							if (num119 < 0f && base.velocity.X > 0f)
							{
								base.velocity.X *= 0.9f;
							}
							else if (num119 > 0f && base.velocity.X < 0f)
							{
								base.velocity.X *= 0.9f;
							}
							if (num119 < 0f && base.velocity.X > -5f)
							{
								base.velocity.X -= 0.1f;
							}
							else if (num119 > 0f && base.velocity.X < 5f)
							{
								base.velocity.X += 0.1f;
							}
							if (base.velocity.X > 6f)
							{
								base.velocity.X = 6f;
							}
							if (base.velocity.X < -6f)
							{
								base.velocity.X = -6f;
							}
							if (num120 < -20f && base.velocity.Y > 0f)
							{
								base.velocity.Y *= 0.8f;
							}
							else if (num120 > 20f && base.velocity.Y < 0f)
							{
								base.velocity.Y *= 0.8f;
							}
							if (num120 < -20f && base.velocity.Y > -5f)
							{
								base.velocity.Y -= 0.3f;
							}
							else if (num120 > 20f && base.velocity.Y < 5f)
							{
								base.velocity.Y += 0.3f;
							}
						}
						if (Main.rand.Next(3) == 0)
						{
							Vector2 position2 = base.Center + new Vector2(base.direction * -14, -8f) - Vector2.One * 4f;
							Vector2 velocity = new Vector2(base.direction * -6, 12f) * 0.2f + Utils.RandomVector2(Main.rand, -1f, 1f) * 0.1f;
							Dust dust6 = Main.dust[Dust.NewDust(position2, 8, 8, 229, velocity.X, velocity.Y, 100, Color.Transparent, 1f + Main.rand.NextFloat() * 0.5f)];
							dust6.noGravity = true;
							dust6.velocity = velocity;
							dust6.customData = this;
						}
						for (int num121 = 0; num121 < 200; num121++)
						{
							if (num121 != base.whoAmI && Main.npc[num121].active && Main.npc[num121].type == type && Math.Abs(base.position.X - Main.npc[num121].position.X) + Math.Abs(base.position.Y - Main.npc[num121].position.Y) < (float)width)
							{
								if (base.position.X < Main.npc[num121].position.X)
								{
									base.velocity.X -= 0.05f;
								}
								else
								{
									base.velocity.X += 0.05f;
								}
								if (base.position.Y < Main.npc[num121].position.Y)
								{
									base.velocity.Y -= 0.05f;
								}
								else
								{
									base.velocity.Y += 0.05f;
								}
							}
						}
					}
					else if (Main.player[target].Center.Y + 100f < base.position.Y && Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						base.velocity.Y = -5f;
						this.ai[2] = 1f;
					}
					if (Main.netMode != 1)
					{
						localAI[2] += 1f;
						if (localAI[2] >= (float)(360 + Main.rand.Next(360)) && Distance(Main.player[target].Center) < 400f && Math.Abs(DirectionTo(Main.player[target].Center).Y) < 0.5f && Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0))
						{
							localAI[2] = 0f;
							Vector2 vector19 = base.Center + new Vector2(base.direction * 30, 2f);
							Vector2 vector20 = DirectionTo(Main.player[target].Center) * 7f;
							if (vector20.HasNaNs())
							{
								vector20 = new Vector2(base.direction * 8, 0f);
							}
							int num122 = Main.expertMode ? 50 : 75;
							for (int num123 = 0; num123 < 4; num123++)
							{
								Vector2 vector21 = vector20 + Utils.RandomVector2(Main.rand, -0.8f, 0.8f);
								Projectile.NewProjectile(vector19.X, vector19.Y, vector21.X, vector21.Y, 577, num122, 1f, Main.myPlayer);
							}
						}
					}
				}
				else if (type == 427)
				{
					if (base.velocity.Y == 0f)
					{
						this.ai[2] = 0f;
						rotation = 0f;
					}
					else
					{
						rotation = base.velocity.X * 0.1f;
					}
					if (base.velocity.Y != 0f && this.ai[2] == 1f)
					{
						TargetClosest();
						spriteDirection = -base.direction;
						if (Collision.CanHit(base.Center, 0, 0, Main.player[target].Center, 0, 0))
						{
							float num124 = Main.player[target].Center.X - base.Center.X;
							float num125 = Main.player[target].Center.Y - base.Center.Y;
							if (num124 < 0f && base.velocity.X > 0f)
							{
								base.velocity.X *= 0.98f;
							}
							else if (num124 > 0f && base.velocity.X < 0f)
							{
								base.velocity.X *= 0.98f;
							}
							if (num124 < -20f && base.velocity.X > -6f)
							{
								base.velocity.X -= 0.015f;
							}
							else if (num124 > 20f && base.velocity.X < 6f)
							{
								base.velocity.X += 0.015f;
							}
							if (base.velocity.X > 6f)
							{
								base.velocity.X = 6f;
							}
							if (base.velocity.X < -6f)
							{
								base.velocity.X = -6f;
							}
							if (num125 < -20f && base.velocity.Y > 0f)
							{
								base.velocity.Y *= 0.98f;
							}
							else if (num125 > 20f && base.velocity.Y < 0f)
							{
								base.velocity.Y *= 0.98f;
							}
							if (num125 < -20f && base.velocity.Y > -6f)
							{
								base.velocity.Y -= 0.15f;
							}
							else if (num125 > 20f && base.velocity.Y < 6f)
							{
								base.velocity.Y += 0.15f;
							}
						}
						for (int num126 = 0; num126 < 200; num126++)
						{
							if (num126 != base.whoAmI && Main.npc[num126].active && Main.npc[num126].type == type && Math.Abs(base.position.X - Main.npc[num126].position.X) + Math.Abs(base.position.Y - Main.npc[num126].position.Y) < (float)width)
							{
								if (base.position.X < Main.npc[num126].position.X)
								{
									base.velocity.X -= 0.05f;
								}
								else
								{
									base.velocity.X += 0.05f;
								}
								if (base.position.Y < Main.npc[num126].position.Y)
								{
									base.velocity.Y -= 0.05f;
								}
								else
								{
									base.velocity.Y += 0.05f;
								}
							}
						}
					}
					else if (Main.player[target].Center.Y + 100f < base.position.Y && Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						base.velocity.Y = -5f;
						this.ai[2] = 1f;
					}
				}
				else if (type == 426)
				{
					if (this.ai[1] > 0f && base.velocity.Y > 0f)
					{
						base.velocity.Y *= 0.85f;
						if (base.velocity.Y == 0f)
						{
							base.velocity.Y = -0.4f;
						}
					}
					if (base.velocity.Y != 0f)
					{
						TargetClosest();
						spriteDirection = base.direction;
						if (Collision.CanHit(base.Center, 0, 0, Main.player[target].Center, 0, 0))
						{
							float num127 = Main.player[target].Center.X - (float)(base.direction * 300) - base.Center.X;
							if (num127 < 40f && base.velocity.X > 0f)
							{
								base.velocity.X *= 0.98f;
							}
							else if (num127 > 40f && base.velocity.X < 0f)
							{
								base.velocity.X *= 0.98f;
							}
							if (num127 < 40f && base.velocity.X > -5f)
							{
								base.velocity.X -= 0.2f;
							}
							else if (num127 > 40f && base.velocity.X < 5f)
							{
								base.velocity.X += 0.2f;
							}
							if (base.velocity.X > 6f)
							{
								base.velocity.X = 6f;
							}
							if (base.velocity.X < -6f)
							{
								base.velocity.X = -6f;
							}
						}
					}
					else if (Main.player[target].Center.Y + 100f < base.position.Y && Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						base.velocity.Y = -6f;
					}
					for (int num128 = 0; num128 < 200; num128++)
					{
						if (num128 != base.whoAmI && Main.npc[num128].active && Main.npc[num128].type == type && Math.Abs(base.position.X - Main.npc[num128].position.X) + Math.Abs(base.position.Y - Main.npc[num128].position.Y) < (float)width)
						{
							if (base.position.X < Main.npc[num128].position.X)
							{
								base.velocity.X -= 0.1f;
							}
							else
							{
								base.velocity.X += 0.1f;
							}
							if (base.position.Y < Main.npc[num128].position.Y)
							{
								base.velocity.Y -= 0.1f;
							}
							else
							{
								base.velocity.Y += 0.1f;
							}
						}
					}
					if (Main.rand.Next(6) == 0 && this.ai[1] <= 20f)
					{
						Dust dust7 = Main.dust[Dust.NewDust(base.Center + new Vector2((spriteDirection == 1) ? 8 : (-20), -20f), 8, 8, 229, base.velocity.X, base.velocity.Y, 100)];
						dust7.velocity = dust7.velocity / 4f + base.velocity / 2f;
						dust7.scale = 0.6f;
						dust7.noLight = true;
					}
					if (this.ai[1] >= 57f)
					{
						int num129 = Utils.SelectRandom<int>(Main.rand, 161, 229);
						Dust dust8 = Main.dust[Dust.NewDust(base.Center + new Vector2((spriteDirection == 1) ? 8 : (-20), -20f), 8, 8, num129, base.velocity.X, base.velocity.Y, 100)];
						dust8.velocity = dust8.velocity / 4f + DirectionTo(Main.player[target].Top);
						dust8.scale = 1.2f;
						dust8.noLight = true;
					}
					if (Main.rand.Next(6) == 0)
					{
						Dust dust9 = Main.dust[Dust.NewDust(base.Center, 2, 2, 229)];
						dust9.position = base.Center + new Vector2((spriteDirection == 1) ? 26 : (-26), 24f);
						dust9.velocity.X = 0f;
						if (dust9.velocity.Y < 0f)
						{
							dust9.velocity.Y = 0f;
						}
						dust9.noGravity = true;
						dust9.scale = 1f;
						dust9.noLight = true;
					}
				}
				else if (type == 185)
				{
					if (base.velocity.Y == 0f)
					{
						rotation = 0f;
						localAI[0] = 0f;
					}
					else if (localAI[0] == 1f)
					{
						rotation += base.velocity.X * 0.05f;
					}
				}
				else if (type == 428)
				{
					if (base.velocity.Y == 0f)
					{
						rotation = 0f;
					}
					else
					{
						rotation += base.velocity.X * 0.08f;
					}
				}
				if (type == 159 && Main.netMode != 1)
				{
					Vector2 vector22 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num130 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector22.X;
					float num131 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector22.Y;
					float num132 = (float)Math.Sqrt(num130 * num130 + num131 * num131);
					if (num132 > 300f)
					{
						Transform(158);
					}
				}
				if (type == 164 && Main.netMode != 1 && base.velocity.Y == 0f)
				{
					int num133 = (int)base.Center.X / 16;
					int num134 = (int)base.Center.Y / 16;
					bool flag10 = false;
					for (int num135 = num133 - 1; num135 <= num133 + 1; num135++)
					{
						for (int num136 = num134 - 1; num136 <= num134 + 1; num136++)
						{
							if (Main.tile[num135, num136].wall > 0)
							{
								flag10 = true;
							}
						}
					}
					if (flag10)
					{
						Transform(165);
					}
				}
				if (type == 239 && Main.netMode != 1 && base.velocity.Y == 0f)
				{
					int num137 = (int)base.Center.X / 16;
					int num138 = (int)base.Center.Y / 16;
					bool flag11 = false;
					for (int num139 = num137 - 1; num139 <= num137 + 1; num139++)
					{
						for (int num140 = num138 - 1; num140 <= num138 + 1; num140++)
						{
							if (Main.tile[num139, num140].wall > 0)
							{
								flag11 = true;
							}
						}
					}
					if (flag11)
					{
						Transform(240);
					}
				}
				if (type == 530 && Main.netMode != 1 && base.velocity.Y == 0f)
				{
					int num141 = (int)base.Center.X / 16;
					int num142 = (int)base.Center.Y / 16;
					bool flag12 = false;
					for (int num143 = num141 - 1; num143 <= num141 + 1; num143++)
					{
						for (int num144 = num142 - 1; num144 <= num142 + 1; num144++)
						{
							if (Main.tile[num143, num144].wall > 0)
							{
								flag12 = true;
							}
						}
					}
					if (flag12)
					{
						Transform(531);
					}
				}
				if (Main.netMode != 1 && Main.expertMode && target >= 0 && (type == 163 || type == 238) && Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
				{
					localAI[0] += 1f;
					if (justHit)
					{
						localAI[0] -= Main.rand.Next(20, 60);
						if (localAI[0] < 0f)
						{
							localAI[0] = 0f;
						}
					}
					if (localAI[0] > (float)Main.rand.Next(180, 900))
					{
						localAI[0] = 0f;
						Vector2 vector23 = Main.player[target].Center - base.Center;
						vector23.Normalize();
						vector23 *= 8f;
						Projectile.NewProjectile(base.Center.X, base.Center.Y, vector23.X, vector23.Y, 472, 18, 0f, Main.myPlayer);
					}
				}
				if (type == 163 && Main.netMode != 1 && base.velocity.Y == 0f)
				{
					int num145 = (int)base.Center.X / 16;
					int num146 = (int)base.Center.Y / 16;
					bool flag13 = false;
					for (int num147 = num145 - 1; num147 <= num145 + 1; num147++)
					{
						for (int num148 = num146 - 1; num148 <= num146 + 1; num148++)
						{
							if (Main.tile[num147, num148].wall > 0)
							{
								flag13 = true;
							}
						}
					}
					if (flag13)
					{
						Transform(238);
					}
				}
				if (type == 236 && Main.netMode != 1 && base.velocity.Y == 0f)
				{
					int num149 = (int)base.Center.X / 16;
					int num150 = (int)base.Center.Y / 16;
					bool flag14 = false;
					for (int num151 = num149 - 1; num151 <= num149 + 1; num151++)
					{
						for (int num152 = num150 - 1; num152 <= num150 + 1; num152++)
						{
							if (Main.tile[num151, num152].wall > 0)
							{
								flag14 = true;
							}
						}
					}
					if (flag14)
					{
						Transform(237);
					}
				}
				if (type == 243)
				{
					if (justHit && Main.rand.Next(3) == 0)
					{
						this.ai[2] -= Main.rand.Next(30);
					}
					if (this.ai[2] < 0f)
					{
						this.ai[2] = 0f;
					}
					if (confused)
					{
						this.ai[2] = 0f;
					}
					this.ai[2] += 1f;
					float num153 = Main.rand.Next(30, 900);
					num153 *= (float)life / (float)lifeMax;
					num153 += 30f;
					if (Main.netMode != 1 && this.ai[2] >= num153 && base.velocity.Y == 0f && !Main.player[target].dead && !Main.player[target].frozen && ((base.direction > 0 && base.Center.X < Main.player[target].Center.X) || (base.direction < 0 && base.Center.X > Main.player[target].Center.X)) && Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						float num154 = 15f;
						Vector2 vector24 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + 20f);
						vector24.X += 10 * base.direction;
						float num155 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector24.X;
						float num156 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector24.Y;
						num155 += (float)Main.rand.Next(-40, 41);
						num156 += (float)Main.rand.Next(-40, 41);
						float num157 = (float)Math.Sqrt(num155 * num155 + num156 * num156);
						netUpdate = true;
						num157 = num154 / num157;
						num155 *= num157;
						num156 *= num157;
						int num158 = 32;
						int num159 = 257;
						vector24.X += num155 * 3f;
						vector24.Y += num156 * 3f;
						Projectile.NewProjectile(vector24.X, vector24.Y, num155, num156, num159, num158, 0f, Main.myPlayer);
						this.ai[2] = 0f;
					}
				}
				if (type == 251)
				{
					if (justHit)
					{
						this.ai[2] -= Main.rand.Next(30);
					}
					if (this.ai[2] < 0f)
					{
						this.ai[2] = 0f;
					}
					if (confused)
					{
						this.ai[2] = 0f;
					}
					this.ai[2] += 1f;
					float num160 = Main.rand.Next(60, 1800);
					num160 *= (float)life / (float)lifeMax;
					num160 += 15f;
					if (Main.netMode != 1 && this.ai[2] >= num160 && base.velocity.Y == 0f && !Main.player[target].dead && !Main.player[target].frozen && ((base.direction > 0 && base.Center.X < Main.player[target].Center.X) || (base.direction < 0 && base.Center.X > Main.player[target].Center.X)) && Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						float num161 = 15f;
						Vector2 vector25 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + 12f);
						vector25.X += 6 * base.direction;
						float num162 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector25.X;
						float num163 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector25.Y;
						num162 += (float)Main.rand.Next(-40, 41);
						num163 += (float)Main.rand.Next(-30, 0);
						float num164 = (float)Math.Sqrt(num162 * num162 + num163 * num163);
						netUpdate = true;
						num164 = num161 / num164;
						num162 *= num164;
						num163 *= num164;
						int num165 = 30;
						int num166 = 83;
						vector25.X += num162 * 3f;
						vector25.Y += num163 * 3f;
						Projectile.NewProjectile(vector25.X, vector25.Y, num162, num163, num166, num165, 0f, Main.myPlayer);
						this.ai[2] = 0f;
					}
				}
				if (type == 386)
				{
					if (confused)
					{
						this.ai[2] = -60f;
					}
					else
					{
						if (this.ai[2] < 60f)
						{
							this.ai[2] += 1f;
						}
						if (this.ai[2] > 0f && CountNPCS(387) >= 4 * CountNPCS(386))
						{
							this.ai[2] = 0f;
						}
						if (justHit)
						{
							this.ai[2] = -30f;
						}
						if (this.ai[2] == 30f)
						{
							int num167 = (int)base.position.X / 16;
							int num168 = (int)base.position.Y / 16;
							int num169 = (int)base.position.X / 16;
							int num170 = (int)base.position.Y / 16;
							int num171 = 5;
							int num172 = 0;
							bool flag15 = false;
							int num173 = 2;
							int num174 = 0;
							while (!flag15 && num172 < 100)
							{
								num172++;
								int num175 = Main.rand.Next(num167 - num171, num167 + num171);
								int num176 = Main.rand.Next(num168 - num171, num168 + num171);
								for (int num177 = num176; num177 < num168 + num171; num177++)
								{
									if ((num177 < num168 - num173 || num177 > num168 + num173 || num175 < num167 - num173 || num175 > num167 + num173) && (num177 < num170 - num174 || num177 > num170 + num174 || num175 < num169 - num174 || num175 > num169 + num174) && Main.tile[num175, num177].nactive())
									{
										bool flag16 = true;
										if (Main.tile[num175, num177 - 1].lava())
										{
											flag16 = false;
										}
										if (flag16 && Main.tileSolid[Main.tile[num175, num177].type] && !Collision.SolidTiles(num175 - 1, num175 + 1, num177 - 4, num177 - 1))
										{
											int num178 = NewNPC(num175 * 16 - width / 2, num177 * 16, 387);
											Main.npc[num178].position.Y = num177 * 16 - Main.npc[num178].height;
											flag15 = true;
											netUpdate = true;
											break;
										}
									}
								}
							}
						}
						if (this.ai[2] == 60f)
						{
							this.ai[2] = -120f;
						}
					}
				}
				if (type == 389)
				{
					if (confused)
					{
						this.ai[2] = -60f;
					}
					else
					{
						if (this.ai[2] < 20f)
						{
							this.ai[2] += 1f;
						}
						if (justHit)
						{
							this.ai[2] = -30f;
						}
						if (this.ai[2] == 20f && Main.netMode != 1)
						{
							this.ai[2] = -10 + Main.rand.Next(3) * -10;
							Projectile.NewProjectile(base.Center.X, base.Center.Y + 8f, base.direction * 6, 0f, 437, 25, 1f, Main.myPlayer);
						}
					}
				}
				if (type == 110 || type == 111 || type == 206 || type == 214 || type == 215 || type == 216 || type == 290 || type == 291 || type == 292 || type == 293 || type == 350 || type == 379 || type == 380 || type == 381 || type == 382 || (type >= 449 && type <= 452) || type == 468 || type == 481 || type == 411 || type == 409 || (type >= 498 && type <= 506) || type == 424 || type == 426 || type == 520)
				{
					bool flag17 = type == 381 || type == 382 || type == 520;
					bool flag18 = type == 426;
					bool flag19 = true;
					int num179 = -1;
					int num180 = -1;
					if (type == 411)
					{
						flag17 = true;
						num179 = 90;
						num180 = 90;
						if (this.ai[1] <= 150f)
						{
							flag19 = false;
						}
					}
					if (confused)
					{
						this.ai[2] = 0f;
					}
					else
					{
						if (this.ai[1] > 0f)
						{
							this.ai[1] -= 1f;
						}
						if (justHit)
						{
							this.ai[1] = 30f;
							this.ai[2] = 0f;
						}
						int num181 = 70;
						if (type == 379 || type == 380)
						{
							num181 = 80;
						}
						if (type == 381 || type == 382)
						{
							num181 = 80;
						}
						if (type == 520)
						{
							num181 = 15;
						}
						if (type == 350)
						{
							num181 = 110;
						}
						if (type == 291)
						{
							num181 = 200;
						}
						if (type == 292)
						{
							num181 = 120;
						}
						if (type == 293)
						{
							num181 = 90;
						}
						if (type == 111)
						{
							num181 = 180;
						}
						if (type == 206)
						{
							num181 = 50;
						}
						if (type == 214)
						{
							num181 = 40;
						}
						if (type == 215)
						{
							num181 = 80;
						}
						if (type == 290)
						{
							num181 = 30;
						}
						if (type == 411)
						{
							num181 = 300;
						}
						if (type == 409)
						{
							num181 = 60;
						}
						if (type == 424)
						{
							num181 = 180;
						}
						if (type == 426)
						{
							num181 = 60;
						}
						bool flag20 = false;
						if (type == 216)
						{
							if (localAI[2] >= 20f)
							{
								flag20 = true;
							}
							num181 = ((!flag20) ? 8 : 60);
						}
						int num182 = num181 / 2;
						if (type == 424)
						{
							num182 = num181 - 1;
						}
						if (type == 426)
						{
							num182 = num181 - 1;
						}
						if (this.ai[2] > 0f)
						{
							if (flag19)
							{
								TargetClosest();
							}
							if (this.ai[1] == (float)num182)
							{
								if (type == 216)
								{
									localAI[2] += 1f;
								}
								float num183 = 11f;
								if (type == 111)
								{
									num183 = 9f;
								}
								if (type == 206)
								{
									num183 = 7f;
								}
								if (type == 290)
								{
									num183 = 9f;
								}
								if (type == 293)
								{
									num183 = 4f;
								}
								if (type == 214)
								{
									num183 = 14f;
								}
								if (type == 215)
								{
									num183 = 16f;
								}
								if (type == 382)
								{
									num183 = 7f;
								}
								if (type == 520)
								{
									num183 = 8f;
								}
								if (type == 409)
								{
									num183 = 4f;
								}
								if (type >= 449 && type <= 452)
								{
									num183 = 7f;
								}
								if (type == 481)
								{
									num183 = 9f;
								}
								if (type == 468)
								{
									num183 = 7.5f;
								}
								if (type == 411)
								{
									num183 = 1f;
								}
								if (type >= 498 && type <= 506)
								{
									num183 = 7f;
								}
								Vector2 vector26 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
								if (type == 481)
								{
									vector26.Y -= 14f;
								}
								if (type == 206)
								{
									vector26.Y -= 10f;
								}
								if (type == 290)
								{
									vector26.Y -= 10f;
								}
								if (type == 381 || type == 382)
								{
									vector26.Y += 6f;
								}
								if (type == 520)
								{
									vector26.Y = base.position.Y + 20f;
								}
								if (type >= 498 && type <= 506)
								{
									vector26.Y -= 8f;
								}
								if (type == 426)
								{
									vector26 += new Vector2(spriteDirection * 2, -12f);
								}
								float num184 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector26.X;
								float num185 = Math.Abs(num184) * 0.1f;
								if (type == 291 || type == 292)
								{
									num185 = 0f;
								}
								if (type == 215)
								{
									num185 = Math.Abs(num184) * 0.08f;
								}
								if (type == 214 || (type == 216 && !flag20))
								{
									num185 = 0f;
								}
								if (type == 381 || type == 382 || type == 520)
								{
									num185 = 0f;
								}
								if (type >= 449 && type <= 452)
								{
									num185 = Math.Abs(num184) * (float)Main.rand.Next(10, 50) * 0.01f;
								}
								if (type == 468)
								{
									num185 = Math.Abs(num184) * (float)Main.rand.Next(10, 50) * 0.01f;
								}
								if (type == 481)
								{
									num185 = Math.Abs(num184) * (float)Main.rand.Next(-10, 11) * 0.0025f;
								}
								if (type >= 498 && type <= 506)
								{
									num185 = Math.Abs(num184) * (float)Main.rand.Next(1, 11) * 0.0025f;
								}
								float num186 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector26.Y - num185;
								if (type == 291)
								{
									num184 += (float)Main.rand.Next(-40, 41) * 0.2f;
									num186 += (float)Main.rand.Next(-40, 41) * 0.2f;
								}
								else if (type == 381 || type == 382 || type == 520)
								{
									num184 += (float)Main.rand.Next(-100, 101) * 0.4f;
									num186 += (float)Main.rand.Next(-100, 101) * 0.4f;
									num184 *= (float)Main.rand.Next(85, 116) * 0.01f;
									num186 *= (float)Main.rand.Next(85, 116) * 0.01f;
									if (type == 520)
									{
										num184 += (float)Main.rand.Next(-100, 101) * 0.6f;
										num186 += (float)Main.rand.Next(-100, 101) * 0.6f;
										num184 *= (float)Main.rand.Next(85, 116) * 0.015f;
										num186 *= (float)Main.rand.Next(85, 116) * 0.015f;
									}
								}
								else if (type == 481)
								{
									num184 += (float)Main.rand.Next(-40, 41) * 0.4f;
									num186 += (float)Main.rand.Next(-40, 41) * 0.4f;
								}
								else if (type >= 498 && type <= 506)
								{
									num184 += (float)Main.rand.Next(-40, 41) * 0.3f;
									num186 += (float)Main.rand.Next(-40, 41) * 0.3f;
								}
								else if (type != 292)
								{
									num184 += (float)Main.rand.Next(-40, 41);
									num186 += (float)Main.rand.Next(-40, 41);
								}
								float num187 = (float)Math.Sqrt(num184 * num184 + num186 * num186);
								netUpdate = true;
								num187 = num183 / num187;
								num184 *= num187;
								num186 *= num187;
								int num188 = 35;
								int num189 = 82;
								if (type == 111)
								{
									num188 = 11;
								}
								if (type == 206)
								{
									num188 = 37;
								}
								if (type == 379 || type == 380)
								{
									num188 = 40;
								}
								if (type == 350)
								{
									num188 = 45;
								}
								if (type == 468)
								{
									num188 = 50;
								}
								if (type == 111)
								{
									num189 = 81;
								}
								if (type == 379 || type == 380)
								{
									num189 = 81;
								}
								if (type == 381)
								{
									num189 = 436;
									num188 = 24;
								}
								if (type == 382)
								{
									num189 = 438;
									num188 = 30;
								}
								if (type == 520)
								{
									num189 = 592;
									num188 = 35;
								}
								if (type >= 449 && type <= 452)
								{
									num189 = 471;
									num188 = 20;
								}
								if (type >= 498 && type <= 506)
								{
									num189 = 572;
									num188 = 14;
								}
								if (type == 481)
								{
									num189 = 508;
									num188 = 24;
								}
								if (type == 206)
								{
									num189 = 177;
								}
								if (type == 468)
								{
									num189 = 501;
								}
								if (type == 411)
								{
									num189 = 537;
									num188 = (Main.expertMode ? 45 : 60);
								}
								if (type == 424)
								{
									num189 = 573;
									num188 = (Main.expertMode ? 45 : 60);
								}
								if (type == 426)
								{
									num189 = 581;
									num188 = (Main.expertMode ? 45 : 60);
								}
								if (type == 291)
								{
									num189 = 302;
									num188 = 100;
								}
								if (type == 290)
								{
									num189 = 300;
									num188 = 60;
								}
								if (type == 293)
								{
									num189 = 303;
									num188 = 60;
								}
								if (type == 214)
								{
									num189 = 180;
									num188 = 25;
								}
								if (type == 215)
								{
									num189 = 82;
									num188 = 40;
								}
								if (type == 292)
								{
									num188 = 50;
									num189 = 180;
								}
								if (type == 216)
								{
									num189 = 180;
									num188 = 30;
									if (flag20)
									{
										num188 = 100;
										num189 = 240;
										localAI[2] = 0f;
									}
								}
								vector26.X += num184;
								vector26.Y += num186;
								if (Main.expertMode && type == 290)
								{
									num188 = (int)((double)num188 * 0.75);
								}
								if (Main.expertMode && type >= 381 && type <= 392)
								{
									num188 = (int)((double)num188 * 0.8);
								}
								if (Main.netMode != 1)
								{
									if (type == 292)
									{
										for (int num190 = 0; num190 < 4; num190++)
										{
											num184 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector26.X;
											num186 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector26.Y;
											num187 = (float)Math.Sqrt(num184 * num184 + num186 * num186);
											num187 = 12f / num187;
											num184 = (num184 += (float)Main.rand.Next(-40, 41));
											num186 = (num186 += (float)Main.rand.Next(-40, 41));
											num184 *= num187;
											num186 *= num187;
											Projectile.NewProjectile(vector26.X, vector26.Y, num184, num186, num189, num188, 0f, Main.myPlayer);
										}
									}
									else if (type == 411)
									{
										Projectile.NewProjectile(vector26.X, vector26.Y, num184, num186, num189, num188, 0f, Main.myPlayer, 0f, base.whoAmI);
									}
									else if (type == 424)
									{
										for (int num191 = 0; num191 < 4; num191++)
										{
											Projectile.NewProjectile(base.Center.X - (float)(spriteDirection * 4), base.Center.Y + 6f, (float)(-3 + 2 * num191) * 0.15f, (float)(-Main.rand.Next(0, 3)) * 0.2f - 0.1f, num189, num188, 0f, Main.myPlayer, 0f, base.whoAmI);
										}
									}
									else if (type == 409)
									{
										int num192 = NewNPC((int)base.Center.X, (int)base.Center.Y, 410, base.whoAmI);
										Main.npc[num192].velocity = new Vector2(num184, -6f + num186);
									}
									else
									{
										Projectile.NewProjectile(vector26.X, vector26.Y, num184, num186, num189, num188, 0f, Main.myPlayer);
									}
								}
								if (Math.Abs(num186) > Math.Abs(num184) * 2f)
								{
									if (num186 > 0f)
									{
										this.ai[2] = 1f;
									}
									else
									{
										this.ai[2] = 5f;
									}
								}
								else if (Math.Abs(num184) > Math.Abs(num186) * 2f)
								{
									this.ai[2] = 3f;
								}
								else if (num186 > 0f)
								{
									this.ai[2] = 2f;
								}
								else
								{
									this.ai[2] = 4f;
								}
							}
							if ((base.velocity.Y != 0f && !flag18) || this.ai[1] <= 0f)
							{
								this.ai[2] = 0f;
								this.ai[1] = 0f;
							}
							else if (!flag17 || (num179 != -1 && this.ai[1] >= (float)num179 && this.ai[1] < (float)(num179 + num180) && (!flag18 || base.velocity.Y == 0f)))
							{
								base.velocity.X *= 0.9f;
								spriteDirection = base.direction;
							}
						}
						if (type == 468 && !Main.eclipse)
						{
							flag17 = true;
						}
						else if ((this.ai[2] <= 0f || flag17) && (base.velocity.Y == 0f || flag18) && this.ai[1] <= 0f && !Main.player[target].dead)
						{
							bool flag21 = Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height);
							if (type == 520)
							{
								flag21 = Collision.CanHitLine(base.Top + new Vector2(0f, 20f), 0, 0, Main.player[target].position, Main.player[target].width, Main.player[target].height);
							}
							if (Main.player[target].stealth == 0f && Main.player[target].itemAnimation == 0)
							{
								flag21 = false;
							}
							if (flag21)
							{
								float num193 = 10f;
								Vector2 vector27 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
								float num194 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector27.X;
								float num195 = Math.Abs(num194) * 0.1f;
								float num196 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector27.Y - num195;
								num194 += (float)Main.rand.Next(-40, 41);
								num196 += (float)Main.rand.Next(-40, 41);
								float num197 = (float)Math.Sqrt(num194 * num194 + num196 * num196);
								float num198 = 700f;
								if (type == 214)
								{
									num198 = 550f;
								}
								if (type == 215)
								{
									num198 = 800f;
								}
								if (type >= 498 && type <= 506)
								{
									num198 = 190f;
								}
								if (type >= 449 && type <= 452)
								{
									num198 = 200f;
								}
								if (type == 481)
								{
									num198 = 400f;
								}
								if (type == 468)
								{
									num198 = 400f;
								}
								if (num197 < num198)
								{
									netUpdate = true;
									base.velocity.X *= 0.5f;
									num197 = num193 / num197;
									num194 *= num197;
									num196 *= num197;
									this.ai[2] = 3f;
									this.ai[1] = num181;
									if (Math.Abs(num196) > Math.Abs(num194) * 2f)
									{
										if (num196 > 0f)
										{
											this.ai[2] = 1f;
										}
										else
										{
											this.ai[2] = 5f;
										}
									}
									else if (Math.Abs(num194) > Math.Abs(num196) * 2f)
									{
										this.ai[2] = 3f;
									}
									else if (num196 > 0f)
									{
										this.ai[2] = 2f;
									}
									else
									{
										this.ai[2] = 4f;
									}
								}
							}
						}
						if (this.ai[2] <= 0f || (flag17 && (num179 == -1 || !(this.ai[1] >= (float)num179) || !(this.ai[1] < (float)(num179 + num180)))))
						{
							float num199 = 1f;
							float num200 = 0.07f;
							float num201 = 0.8f;
							if (type == 214)
							{
								num199 = 2f;
								num200 = 0.09f;
							}
							else if (type == 215)
							{
								num199 = 1.5f;
								num200 = 0.08f;
							}
							else if (type == 381 || type == 382)
							{
								num199 = 2f;
								num200 = 0.5f;
							}
							else if (type == 520)
							{
								num199 = 4f;
								num200 = 1f;
								num201 = 0.7f;
							}
							else if (type == 411)
							{
								num199 = 2f;
								num200 = 0.5f;
							}
							else if (type == 409)
							{
								num199 = 2f;
								num200 = 0.5f;
							}
							bool flag22 = false;
							if ((type == 381 || type == 382) && Vector2.Distance(base.Center, Main.player[target].Center) < 300f && Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0))
							{
								flag22 = true;
								this.ai[3] = 0f;
							}
							if (type == 520 && Vector2.Distance(base.Center, Main.player[target].Center) < 400f && Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0))
							{
								flag22 = true;
								this.ai[3] = 0f;
							}
							if (base.velocity.X < 0f - num199 || base.velocity.X > num199 || flag22)
							{
								if (base.velocity.Y == 0f)
								{
									base.velocity *= num201;
								}
							}
							else if (base.velocity.X < num199 && base.direction == 1)
							{
								base.velocity.X += num200;
								if (base.velocity.X > num199)
								{
									base.velocity.X = num199;
								}
							}
							else if (base.velocity.X > 0f - num199 && base.direction == -1)
							{
								base.velocity.X -= num200;
								if (base.velocity.X < 0f - num199)
								{
									base.velocity.X = 0f - num199;
								}
							}
						}
						if (type == 520)
						{
							localAI[2] += 1f;
							if (localAI[2] >= 6f)
							{
								localAI[2] = 0f;
								localAI[3] = Main.player[target].DirectionFrom(base.Top + new Vector2(0f, 20f)).ToRotation();
							}
						}
					}
				}
				if (type == 109 && Main.netMode != 1 && !Main.player[target].dead)
				{
					if (justHit)
					{
						this.ai[2] = 0f;
					}
					this.ai[2] += 1f;
					if (this.ai[2] > 450f)
					{
						Vector2 vector28 = new Vector2(base.position.X + (float)width * 0.5f - (float)(base.direction * 24), base.position.Y + 4f);
						int num202 = 3 * base.direction;
						int num203 = -5;
						int num204 = Projectile.NewProjectile(vector28.X, vector28.Y, num202, num203, 75, 0, 0f, Main.myPlayer);
						Main.projectile[num204].timeLeft = 300;
						this.ai[2] = 0f;
					}
				}
				bool flag23 = false;
				if (base.velocity.Y == 0f)
				{
					int num205 = (int)(base.position.Y + (float)height + 7f) / 16;
					int num206 = (int)base.position.X / 16;
					int num207 = (int)(base.position.X + (float)width) / 16;
					for (int num208 = num206; num208 <= num207; num208++)
					{
						if (Main.tile[num208, num205] == null)
						{
							return;
						}
						if (Main.tile[num208, num205].nactive() && Main.tileSolid[Main.tile[num208, num205].type])
						{
							flag23 = true;
							break;
						}
					}
				}
				if (type == 428)
				{
					flag23 = false;
				}
				if (base.velocity.Y >= 0f)
				{
					int num209 = 0;
					if (base.velocity.X < 0f)
					{
						num209 = -1;
					}
					if (base.velocity.X > 0f)
					{
						num209 = 1;
					}
					Vector2 position3 = base.position;
					position3.X += base.velocity.X;
					int num210 = (int)((position3.X + (float)(width / 2) + (float)((width / 2 + 1) * num209)) / 16f);
					int num211 = (int)((position3.Y + (float)height - 1f) / 16f);
					if (Main.tile[num210, num211] == null)
					{
						Main.tile[num210, num211] = new Tile();
					}
					if (Main.tile[num210, num211 - 1] == null)
					{
						Main.tile[num210, num211 - 1] = new Tile();
					}
					if (Main.tile[num210, num211 - 2] == null)
					{
						Main.tile[num210, num211 - 2] = new Tile();
					}
					if (Main.tile[num210, num211 - 3] == null)
					{
						Main.tile[num210, num211 - 3] = new Tile();
					}
					if (Main.tile[num210, num211 + 1] == null)
					{
						Main.tile[num210, num211 + 1] = new Tile();
					}
					if (Main.tile[num210 - num209, num211 - 3] == null)
					{
						Main.tile[num210 - num209, num211 - 3] = new Tile();
					}
					if ((float)(num210 * 16) < position3.X + (float)width && (float)(num210 * 16 + 16) > position3.X && ((Main.tile[num210, num211].nactive() && !Main.tile[num210, num211].topSlope() && !Main.tile[num210, num211 - 1].topSlope() && Main.tileSolid[Main.tile[num210, num211].type] && !Main.tileSolidTop[Main.tile[num210, num211].type]) || (Main.tile[num210, num211 - 1].halfBrick() && Main.tile[num210, num211 - 1].nactive())) && (!Main.tile[num210, num211 - 1].nactive() || !Main.tileSolid[Main.tile[num210, num211 - 1].type] || Main.tileSolidTop[Main.tile[num210, num211 - 1].type] || (Main.tile[num210, num211 - 1].halfBrick() && (!Main.tile[num210, num211 - 4].nactive() || !Main.tileSolid[Main.tile[num210, num211 - 4].type] || Main.tileSolidTop[Main.tile[num210, num211 - 4].type]))) && (!Main.tile[num210, num211 - 2].nactive() || !Main.tileSolid[Main.tile[num210, num211 - 2].type] || Main.tileSolidTop[Main.tile[num210, num211 - 2].type]) && (!Main.tile[num210, num211 - 3].nactive() || !Main.tileSolid[Main.tile[num210, num211 - 3].type] || Main.tileSolidTop[Main.tile[num210, num211 - 3].type]) && (!Main.tile[num210 - num209, num211 - 3].nactive() || !Main.tileSolid[Main.tile[num210 - num209, num211 - 3].type]))
					{
						float num212 = num211 * 16;
						if (Main.tile[num210, num211].halfBrick())
						{
							num212 += 8f;
						}
						if (Main.tile[num210, num211 - 1].halfBrick())
						{
							num212 -= 8f;
						}
						if (num212 < position3.Y + (float)height)
						{
							float num213 = position3.Y + (float)height - num212;
							float num214 = 16.1f;
							if (type == 163 || type == 164 || type == 236 || type == 239 || type == 530)
							{
								num214 += 8f;
							}
							if (num213 <= num214)
							{
								gfxOffY += base.position.Y + (float)height - num212;
								base.position.Y = num212 - (float)height;
								if (num213 < 9f)
								{
									stepSpeed = 1f;
								}
								else
								{
									stepSpeed = 2f;
								}
							}
						}
					}
				}
				if (flag23)
				{
					int num215 = (int)((base.position.X + (float)(width / 2) + (float)(15 * base.direction)) / 16f);
					int num216 = (int)((base.position.Y + (float)height - 15f) / 16f);
					if (type == 109 || type == 163 || type == 164 || type == 199 || type == 236 || type == 239 || type == 257 || type == 258 || type == 290 || type == 391 || type == 425 || type == 427 || type == 426 || type == 508 || type == 415 || type == 530 || type == 532)
					{
						num215 = (int)((base.position.X + (float)(width / 2) + (float)((width / 2 + 16) * base.direction)) / 16f);
					}
					if (Main.tile[num215, num216] == null)
					{
						Main.tile[num215, num216] = new Tile();
					}
					if (Main.tile[num215, num216 - 1] == null)
					{
						Main.tile[num215, num216 - 1] = new Tile();
					}
					if (Main.tile[num215, num216 - 2] == null)
					{
						Main.tile[num215, num216 - 2] = new Tile();
					}
					if (Main.tile[num215, num216 - 3] == null)
					{
						Main.tile[num215, num216 - 3] = new Tile();
					}
					if (Main.tile[num215, num216 + 1] == null)
					{
						Main.tile[num215, num216 + 1] = new Tile();
					}
					if (Main.tile[num215 + base.direction, num216 - 1] == null)
					{
						Main.tile[num215 + base.direction, num216 - 1] = new Tile();
					}
					if (Main.tile[num215 + base.direction, num216 + 1] == null)
					{
						Main.tile[num215 + base.direction, num216 + 1] = new Tile();
					}
					if (Main.tile[num215 - base.direction, num216 + 1] == null)
					{
						Main.tile[num215 - base.direction, num216 + 1] = new Tile();
					}
					Main.tile[num215, num216 + 1].halfBrick();
					if (Main.tile[num215, num216 - 1].nactive() && (Main.tile[num215, num216 - 1].type == 10 || Main.tile[num215, num216 - 1].type == 388) && flag6)
					{
						this.ai[2] += 1f;
						this.ai[3] = 0f;
						if (this.ai[2] >= 60f)
						{
							if (!Main.bloodMoon && (type == 3 || type == 331 || type == 332 || type == 132 || type == 161 || type == 186 || type == 187 || type == 188 || type == 189 || type == 200 || type == 223 || type == 320 || type == 321 || type == 319))
							{
								this.ai[1] = 0f;
							}
							base.velocity.X = 0.5f * (float)(-base.direction);
							int num217 = 5;
							if (Main.tile[num215, num216 - 1].type == 388)
							{
								num217 = 2;
							}
							this.ai[1] += num217;
							if (type == 27)
							{
								this.ai[1] += 1f;
							}
							if (type == 31 || type == 294 || type == 295 || type == 296)
							{
								this.ai[1] += 6f;
							}
							this.ai[2] = 0f;
							bool flag24 = false;
							if (this.ai[1] >= 10f)
							{
								flag24 = true;
								this.ai[1] = 10f;
							}
							if (type == 460)
							{
								flag24 = true;
							}
							WorldGen.KillTile(num215, num216 - 1, true);
							if ((Main.netMode != 1 || !flag24) && flag24 && Main.netMode != 1)
							{
								if (type == 26)
								{
									WorldGen.KillTile(num215, num216 - 1);
									if (Main.netMode == 2)
									{
										NetMessage.SendData(17, -1, -1, "", 0, num215, num216 - 1);
									}
								}
								else
								{
									if (Main.tile[num215, num216 - 1].type == 10)
									{
										bool flag25 = WorldGen.OpenDoor(num215, num216 - 1, base.direction);
										if (!flag25)
										{
											this.ai[3] = num69;
											netUpdate = true;
										}
										if (Main.netMode == 2 && flag25)
										{
											NetMessage.SendData(19, -1, -1, "", 0, num215, num216 - 1, base.direction);
										}
									}
									if (Main.tile[num215, num216 - 1].type == 388)
									{
										bool flag26 = WorldGen.ShiftTallGate(num215, num216 - 1, false);
										if (!flag26)
										{
											this.ai[3] = num69;
											netUpdate = true;
										}
										if (Main.netMode == 2 && flag26)
										{
											NetMessage.SendData(19, -1, -1, "", 4, num215, num216 - 1);
										}
									}
								}
							}
						}
					}
					else
					{
						int num218 = spriteDirection;
						if (type == 425)
						{
							num218 *= -1;
						}
						if ((base.velocity.X < 0f && num218 == -1) || (base.velocity.X > 0f && num218 == 1))
						{
							if (height >= 32 && Main.tile[num215, num216 - 2].nactive() && Main.tileSolid[Main.tile[num215, num216 - 2].type])
							{
								if (Main.tile[num215, num216 - 3].nactive() && Main.tileSolid[Main.tile[num215, num216 - 3].type])
								{
									base.velocity.Y = -8f;
									netUpdate = true;
								}
								else
								{
									base.velocity.Y = -7f;
									netUpdate = true;
								}
							}
							else if (Main.tile[num215, num216 - 1].nactive() && Main.tileSolid[Main.tile[num215, num216 - 1].type])
							{
								base.velocity.Y = -6f;
								netUpdate = true;
							}
							else if (base.position.Y + (float)height - (float)(num216 * 16) > 20f && Main.tile[num215, num216].nactive() && !Main.tile[num215, num216].topSlope() && Main.tileSolid[Main.tile[num215, num216].type])
							{
								base.velocity.Y = -5f;
								netUpdate = true;
							}
							else if (directionY < 0 && type != 67 && (!Main.tile[num215, num216 + 1].nactive() || !Main.tileSolid[Main.tile[num215, num216 + 1].type]) && (!Main.tile[num215 + base.direction, num216 + 1].nactive() || !Main.tileSolid[Main.tile[num215 + base.direction, num216 + 1].type]))
							{
								base.velocity.Y = -8f;
								base.velocity.X *= 1.5f;
								netUpdate = true;
							}
							else if (flag6)
							{
								this.ai[1] = 0f;
								this.ai[2] = 0f;
							}
							if (base.velocity.Y == 0f && flag4 && this.ai[3] == 1f)
							{
								base.velocity.Y = -5f;
							}
						}
						if ((type == 31 || type == 294 || type == 295 || type == 296 || type == 47 || type == 77 || type == 104 || type == 168 || type == 196 || type == 385 || type == 389 || type == 464 || type == 470 || (type >= 524 && type <= 527)) && base.velocity.Y == 0f && Math.Abs(base.position.X + (float)(width / 2) - (Main.player[target].position.X + (float)(Main.player[target].width / 2))) < 100f && Math.Abs(base.position.Y + (float)(height / 2) - (Main.player[target].position.Y + (float)(Main.player[target].height / 2))) < 50f && ((base.direction > 0 && base.velocity.X >= 1f) || (base.direction < 0 && base.velocity.X <= -1f)))
						{
							base.velocity.X *= 2f;
							if (base.velocity.X > 3f)
							{
								base.velocity.X = 3f;
							}
							if (base.velocity.X < -3f)
							{
								base.velocity.X = -3f;
							}
							base.velocity.Y = -4f;
							netUpdate = true;
						}
						if (type == 120 && base.velocity.Y < 0f)
						{
							base.velocity.Y *= 1.1f;
						}
						if (type == 287 && base.velocity.Y == 0f && Math.Abs(base.position.X + (float)(width / 2) - (Main.player[target].position.X + (float)(Main.player[target].width / 2))) < 150f && Math.Abs(base.position.Y + (float)(height / 2) - (Main.player[target].position.Y + (float)(Main.player[target].height / 2))) < 50f && ((base.direction > 0 && base.velocity.X >= 1f) || (base.direction < 0 && base.velocity.X <= -1f)))
						{
							base.velocity.X = 8 * base.direction;
							base.velocity.Y = -4f;
							netUpdate = true;
						}
						if (type == 287 && base.velocity.Y < 0f)
						{
							base.velocity.X *= 1.2f;
							base.velocity.Y *= 1.1f;
						}
						if (type == 460 && base.velocity.Y < 0f)
						{
							base.velocity.X *= 1.3f;
							base.velocity.Y *= 1.1f;
						}
					}
				}
				else if (flag6)
				{
					this.ai[1] = 0f;
					this.ai[2] = 0f;
				}
				if (Main.netMode == 1 || type != 120 || !(this.ai[3] >= (float)num69))
				{
					return;
				}
				int num219 = (int)Main.player[target].position.X / 16;
				int num220 = (int)Main.player[target].position.Y / 16;
				int num221 = (int)base.position.X / 16;
				int num222 = (int)base.position.Y / 16;
				int num223 = 20;
				int num224 = 0;
				bool flag27 = false;
				if (Math.Abs(base.position.X - Main.player[target].position.X) + Math.Abs(base.position.Y - Main.player[target].position.Y) > 2000f)
				{
					num224 = 100;
					flag27 = true;
				}
				while (!flag27 && num224 < 100)
				{
					num224++;
					int num225 = Main.rand.Next(num219 - num223, num219 + num223);
					int num226 = Main.rand.Next(num220 - num223, num220 + num223);
					for (int num227 = num226; num227 < num220 + num223; num227++)
					{
						if ((num227 < num220 - 4 || num227 > num220 + 4 || num225 < num219 - 4 || num225 > num219 + 4) && (num227 < num222 - 1 || num227 > num222 + 1 || num225 < num221 - 1 || num225 > num221 + 1) && Main.tile[num225, num227].nactive())
						{
							bool flag28 = true;
							if (type == 32 && Main.tile[num225, num227 - 1].wall == 0)
							{
								flag28 = false;
							}
							else if (Main.tile[num225, num227 - 1].lava())
							{
								flag28 = false;
							}
							if (flag28 && Main.tileSolid[Main.tile[num225, num227].type] && !Collision.SolidTiles(num225 - 1, num225 + 1, num227 - 4, num227 - 1))
							{
								base.position.X = num225 * 16 - width / 2;
								base.position.Y = num227 * 16 - height;
								netUpdate = true;
								this.ai[3] = -120f;
							}
						}
					}
				}
			}
			else if (aiStyle == 4)
			{
				bool flag29 = false;
				if (Main.expertMode && (double)life < (double)lifeMax * 0.12)
				{
					flag29 = true;
				}
				bool flag30 = false;
				if (Main.expertMode && (double)life < (double)lifeMax * 0.04)
				{
					flag30 = true;
				}
				float num228 = 20f;
				if (flag30)
				{
					num228 = 10f;
				}
				if (target < 0 || target == 16 || Main.player[target].dead || !Main.player[target].active)
				{
					TargetClosest();
				}
				bool dead = Main.player[target].dead;
				float num229 = base.position.X + (float)(width / 2) - Main.player[target].position.X - (float)(Main.player[target].width / 2);
				float num230 = base.position.Y + (float)height - 59f - Main.player[target].position.Y - (float)(Main.player[target].height / 2);
				float num231 = (float)Math.Atan2(num230, num229) + 1.57f;
				if (num231 < 0f)
				{
					num231 += 6.283f;
				}
				else if ((double)num231 > 6.283)
				{
					num231 -= 6.283f;
				}
				float num232 = 0f;
				if (this.ai[0] == 0f && this.ai[1] == 0f)
				{
					num232 = 0.02f;
				}
				if (this.ai[0] == 0f && this.ai[1] == 2f && this.ai[2] > 40f)
				{
					num232 = 0.05f;
				}
				if (this.ai[0] == 3f && this.ai[1] == 0f)
				{
					num232 = 0.05f;
				}
				if (this.ai[0] == 3f && this.ai[1] == 2f && this.ai[2] > 40f)
				{
					num232 = 0.08f;
				}
				if (this.ai[0] == 3f && this.ai[1] == 4f && this.ai[2] > num228)
				{
					num232 = 0.15f;
				}
				if (this.ai[0] == 3f && this.ai[1] == 5f)
				{
					num232 = 0.05f;
				}
				if (Main.expertMode)
				{
					num232 *= 1.5f;
				}
				if (flag30 && Main.expertMode)
				{
					num232 = 0f;
				}
				if (rotation < num231)
				{
					if ((double)(num231 - rotation) > 3.1415)
					{
						rotation -= num232;
					}
					else
					{
						rotation += num232;
					}
				}
				else if (rotation > num231)
				{
					if ((double)(rotation - num231) > 3.1415)
					{
						rotation += num232;
					}
					else
					{
						rotation -= num232;
					}
				}
				if (rotation > num231 - num232 && rotation < num231 + num232)
				{
					rotation = num231;
				}
				if (rotation < 0f)
				{
					rotation += 6.283f;
				}
				else if ((double)rotation > 6.283)
				{
					rotation -= 6.283f;
				}
				if (rotation > num231 - num232 && rotation < num231 + num232)
				{
					rotation = num231;
				}
				if (Main.rand.Next(5) == 0)
				{
					int num233 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + (float)height * 0.25f), width, (int)((float)height * 0.5f), 5, base.velocity.X, 2f);
					Main.dust[num233].velocity.X *= 0.5f;
					Main.dust[num233].velocity.Y *= 0.1f;
				}
				if (Main.dayTime || dead)
				{
					base.velocity.Y -= 0.04f;
					if (timeLeft > 10)
					{
						timeLeft = 10;
					}
					return;
				}
				if (this.ai[0] == 0f)
				{
					if (this.ai[1] == 0f)
					{
						float num234 = 5f;
						float num235 = 0.04f;
						if (Main.expertMode)
						{
							num235 = 0.15f;
							num234 = 7f;
						}
						Vector2 vector29 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						float num236 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector29.X;
						float num237 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - 200f - vector29.Y;
						float num238 = (float)Math.Sqrt(num236 * num236 + num237 * num237);
						float num239 = num238;
						num238 = num234 / num238;
						num236 *= num238;
						num237 *= num238;
						if (base.velocity.X < num236)
						{
							base.velocity.X += num235;
							if (base.velocity.X < 0f && num236 > 0f)
							{
								base.velocity.X += num235;
							}
						}
						else if (base.velocity.X > num236)
						{
							base.velocity.X -= num235;
							if (base.velocity.X > 0f && num236 < 0f)
							{
								base.velocity.X -= num235;
							}
						}
						if (base.velocity.Y < num237)
						{
							base.velocity.Y += num235;
							if (base.velocity.Y < 0f && num237 > 0f)
							{
								base.velocity.Y += num235;
							}
						}
						else if (base.velocity.Y > num237)
						{
							base.velocity.Y -= num235;
							if (base.velocity.Y > 0f && num237 < 0f)
							{
								base.velocity.Y -= num235;
							}
						}
						this.ai[2] += 1f;
						float num240 = 600f;
						if (Main.expertMode)
						{
							num240 *= 0.35f;
						}
						if (this.ai[2] >= num240)
						{
							this.ai[1] = 1f;
							this.ai[2] = 0f;
							this.ai[3] = 0f;
							target = 16;
							netUpdate = true;
						}
						else if ((base.position.Y + (float)height < Main.player[target].position.Y && num239 < 500f) || (Main.expertMode && num239 < 500f))
						{
							if (!Main.player[target].dead)
							{
								this.ai[3] += 1f;
							}
							float num241 = 110f;
							if (Main.expertMode)
							{
								num241 *= 0.4f;
							}
							if (this.ai[3] >= num241)
							{
								this.ai[3] = 0f;
								rotation = num231;
								float num242 = 5f;
								if (Main.expertMode)
								{
									num242 = 6f;
								}
								float num243 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector29.X;
								float num244 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector29.Y;
								float num245 = (float)Math.Sqrt(num243 * num243 + num244 * num244);
								num245 = num242 / num245;
								Vector2 position4 = vector29;
								Vector2 vector30 = default(Vector2);
								vector30.X = num243 * num245;
								vector30.Y = num244 * num245;
								position4.X += vector30.X * 10f;
								position4.Y += vector30.Y * 10f;
								if (Main.netMode != 1)
								{
									int num246 = NewNPC((int)position4.X, (int)position4.Y, 5);
									Main.npc[num246].velocity.X = vector30.X;
									Main.npc[num246].velocity.Y = vector30.Y;
									if (Main.netMode == 2 && num246 < 200)
									{
										NetMessage.SendData(23, -1, -1, "", num246);
									}
								}
								Main.PlaySound(3, (int)position4.X, (int)position4.Y);
								for (int num247 = 0; num247 < 10; num247++)
								{
									Dust.NewDust(position4, 20, 20, 5, vector30.X * 0.4f, vector30.Y * 0.4f);
								}
							}
						}
					}
					else if (this.ai[1] == 1f)
					{
						rotation = num231;
						float num248 = 6f;
						if (Main.expertMode)
						{
							num248 = 7f;
						}
						Vector2 vector31 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						float num249 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector31.X;
						float num250 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector31.Y;
						float num251 = (float)Math.Sqrt(num249 * num249 + num250 * num250);
						num251 = num248 / num251;
						base.velocity.X = num249 * num251;
						base.velocity.Y = num250 * num251;
						this.ai[1] = 2f;
						netUpdate = true;
						if (netSpam > 10)
						{
							netSpam = 10;
						}
					}
					else if (this.ai[1] == 2f)
					{
						this.ai[2] += 1f;
						if (this.ai[2] >= 40f)
						{
							base.velocity *= 0.98f;
							if (Main.expertMode)
							{
								base.velocity *= 0.985f;
							}
							if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
							{
								base.velocity.X = 0f;
							}
							if ((double)base.velocity.Y > -0.1 && (double)base.velocity.Y < 0.1)
							{
								base.velocity.Y = 0f;
							}
						}
						else
						{
							rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) - 1.57f;
						}
						int num252 = 150;
						if (Main.expertMode)
						{
							num252 = 100;
						}
						if (this.ai[2] >= (float)num252)
						{
							this.ai[3] += 1f;
							this.ai[2] = 0f;
							target = 16;
							rotation = num231;
							if (this.ai[3] >= 3f)
							{
								this.ai[1] = 0f;
								this.ai[3] = 0f;
							}
							else
							{
								this.ai[1] = 1f;
							}
						}
					}
					float num253 = 0.5f;
					if (Main.expertMode)
					{
						num253 = 0.65f;
					}
					if ((float)life < (float)lifeMax * num253)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
						if (netSpam > 10)
						{
							netSpam = 10;
						}
					}
					return;
				}
				if (this.ai[0] == 1f || this.ai[0] == 2f)
				{
					if (this.ai[0] == 1f)
					{
						this.ai[2] += 0.005f;
						if ((double)this.ai[2] > 0.5)
						{
							this.ai[2] = 0.5f;
						}
					}
					else
					{
						this.ai[2] -= 0.005f;
						if (this.ai[2] < 0f)
						{
							this.ai[2] = 0f;
						}
					}
					rotation += this.ai[2];
					this.ai[1] += 1f;
					if (Main.expertMode && this.ai[1] % 20f == 0f)
					{
						float num254 = 5f;
						Vector2 vector32 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						float num255 = Main.rand.Next(-200, 200);
						float num256 = Main.rand.Next(-200, 200);
						float num257 = (float)Math.Sqrt(num255 * num255 + num256 * num256);
						num257 = num254 / num257;
						Vector2 position5 = vector32;
						Vector2 vector33 = default(Vector2);
						vector33.X = num255 * num257;
						vector33.Y = num256 * num257;
						position5.X += vector33.X * 10f;
						position5.Y += vector33.Y * 10f;
						if (Main.netMode != 1)
						{
							int num258 = NewNPC((int)position5.X, (int)position5.Y, 5);
							Main.npc[num258].velocity.X = vector33.X;
							Main.npc[num258].velocity.Y = vector33.Y;
							if (Main.netMode == 2 && num258 < 200)
							{
								NetMessage.SendData(23, -1, -1, "", num258);
							}
						}
						for (int num259 = 0; num259 < 10; num259++)
						{
							Dust.NewDust(position5, 20, 20, 5, vector33.X * 0.4f, vector33.Y * 0.4f);
						}
					}
					if (this.ai[1] == 100f)
					{
						this.ai[0] += 1f;
						this.ai[1] = 0f;
						if (this.ai[0] == 3f)
						{
							this.ai[2] = 0f;
						}
						else
						{
							Main.PlaySound(3, (int)base.position.X, (int)base.position.Y);
							for (int num260 = 0; num260 < 2; num260++)
							{
								Gore.NewGore(base.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 8);
								Gore.NewGore(base.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 7);
								Gore.NewGore(base.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 6);
							}
							for (int num261 = 0; num261 < 20; num261++)
							{
								Dust.NewDust(base.position, width, height, 5, (float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f);
							}
							Main.PlaySound(15, (int)base.position.X, (int)base.position.Y, 0);
						}
					}
					Dust.NewDust(base.position, width, height, 5, (float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f);
					base.velocity.X *= 0.98f;
					base.velocity.Y *= 0.98f;
					if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
					{
						base.velocity.X = 0f;
					}
					if ((double)base.velocity.Y > -0.1 && (double)base.velocity.Y < 0.1)
					{
						base.velocity.Y = 0f;
					}
					return;
				}
				defense = 0;
				damage = 23;
				if (Main.expertMode)
				{
					if (flag29)
					{
						defense = -15;
					}
					if (flag30)
					{
						damage = (int)(20f * Main.expertDamage);
						defense = -30;
					}
					else
					{
						damage = (int)(18f * Main.expertDamage);
					}
				}
				if (this.ai[1] == 0f && flag29)
				{
					this.ai[1] = 5f;
				}
				if (this.ai[1] == 0f)
				{
					float num262 = 6f;
					float num263 = 0.07f;
					Vector2 vector34 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num264 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector34.X;
					float num265 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - 120f - vector34.Y;
					float num266 = (float)Math.Sqrt(num264 * num264 + num265 * num265);
					if (num266 > 400f && Main.expertMode)
					{
						num262 += 1f;
						num263 += 0.05f;
						if (num266 > 600f)
						{
							num262 += 1f;
							num263 += 0.05f;
							if (num266 > 800f)
							{
								num262 += 1f;
								num263 += 0.05f;
							}
						}
					}
					num266 = num262 / num266;
					num264 *= num266;
					num265 *= num266;
					if (base.velocity.X < num264)
					{
						base.velocity.X += num263;
						if (base.velocity.X < 0f && num264 > 0f)
						{
							base.velocity.X += num263;
						}
					}
					else if (base.velocity.X > num264)
					{
						base.velocity.X -= num263;
						if (base.velocity.X > 0f && num264 < 0f)
						{
							base.velocity.X -= num263;
						}
					}
					if (base.velocity.Y < num265)
					{
						base.velocity.Y += num263;
						if (base.velocity.Y < 0f && num265 > 0f)
						{
							base.velocity.Y += num263;
						}
					}
					else if (base.velocity.Y > num265)
					{
						base.velocity.Y -= num263;
						if (base.velocity.Y > 0f && num265 < 0f)
						{
							base.velocity.Y -= num263;
						}
					}
					this.ai[2] += 1f;
					if (this.ai[2] >= 200f)
					{
						this.ai[1] = 1f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						if (Main.expertMode && (double)life < (double)lifeMax * 0.35)
						{
							this.ai[1] = 3f;
						}
						target = 16;
						netUpdate = true;
					}
					if (Main.expertMode && flag30)
					{
						TargetClosest();
						netUpdate = true;
						this.ai[1] = 3f;
						this.ai[2] = 0f;
						this.ai[3] -= 1000f;
					}
				}
				else if (this.ai[1] == 1f)
				{
					Main.PlaySound(36, (int)base.position.X, (int)base.position.Y, 0);
					rotation = num231;
					float num267 = 6.8f;
					if (Main.expertMode && this.ai[3] == 1f)
					{
						num267 *= 1.15f;
					}
					if (Main.expertMode && this.ai[3] == 2f)
					{
						num267 *= 1.3f;
					}
					Vector2 vector35 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num268 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector35.X;
					float num269 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector35.Y;
					float num270 = (float)Math.Sqrt(num268 * num268 + num269 * num269);
					num270 = num267 / num270;
					base.velocity.X = num268 * num270;
					base.velocity.Y = num269 * num270;
					this.ai[1] = 2f;
					netUpdate = true;
					if (netSpam > 10)
					{
						netSpam = 10;
					}
				}
				else if (this.ai[1] == 2f)
				{
					float num271 = 40f;
					this.ai[2] += 1f;
					if (Main.expertMode)
					{
						num271 = 50f;
					}
					if (this.ai[2] >= num271)
					{
						base.velocity *= 0.97f;
						if (Main.expertMode)
						{
							base.velocity *= 0.98f;
						}
						if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
						{
							base.velocity.X = 0f;
						}
						if ((double)base.velocity.Y > -0.1 && (double)base.velocity.Y < 0.1)
						{
							base.velocity.Y = 0f;
						}
					}
					else
					{
						rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) - 1.57f;
					}
					int num272 = 130;
					if (Main.expertMode)
					{
						num272 = 90;
					}
					if (this.ai[2] >= (float)num272)
					{
						this.ai[3] += 1f;
						this.ai[2] = 0f;
						target = 16;
						rotation = num231;
						if (this.ai[3] >= 3f)
						{
							this.ai[1] = 0f;
							this.ai[3] = 0f;
							if (Main.expertMode && Main.netMode != 1 && (double)life < (double)lifeMax * 0.5)
							{
								this.ai[1] = 3f;
								this.ai[3] += Main.rand.Next(1, 4);
							}
							netUpdate = true;
							if (netSpam > 10)
							{
								netSpam = 10;
							}
						}
						else
						{
							this.ai[1] = 1f;
						}
					}
				}
				else if (this.ai[1] == 3f)
				{
					if (this.ai[3] == 4f && flag29 && base.Center.Y > Main.player[target].Center.Y)
					{
						TargetClosest();
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
						if (netSpam > 10)
						{
							netSpam = 10;
						}
					}
					else if (Main.netMode != 1)
					{
						TargetClosest();
						float num273 = 20f;
						Vector2 vector36 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						float num274 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector36.X;
						float num275 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector36.Y;
						float num276 = Math.Abs(Main.player[target].velocity.X) + Math.Abs(Main.player[target].velocity.Y) / 4f;
						num276 += 10f - num276;
						if (num276 < 5f)
						{
							num276 = 5f;
						}
						if (num276 > 15f)
						{
							num276 = 15f;
						}
						if (this.ai[2] == -1f && !flag30)
						{
							num276 *= 4f;
							num273 *= 1.3f;
						}
						if (flag30)
						{
							num276 *= 2f;
						}
						num274 -= Main.player[target].velocity.X * num276;
						num275 -= Main.player[target].velocity.Y * num276 / 4f;
						num274 *= 1f + (float)Main.rand.Next(-10, 11) * 0.01f;
						num275 *= 1f + (float)Main.rand.Next(-10, 11) * 0.01f;
						if (flag30)
						{
							num274 *= 1f + (float)Main.rand.Next(-10, 11) * 0.01f;
							num275 *= 1f + (float)Main.rand.Next(-10, 11) * 0.01f;
						}
						float num277 = (float)Math.Sqrt(num274 * num274 + num275 * num275);
						float num278 = num277;
						num277 = num273 / num277;
						base.velocity.X = num274 * num277;
						base.velocity.Y = num275 * num277;
						base.velocity.X += (float)Main.rand.Next(-20, 21) * 0.1f;
						base.velocity.Y += (float)Main.rand.Next(-20, 21) * 0.1f;
						if (flag30)
						{
							base.velocity.X += (float)Main.rand.Next(-50, 51) * 0.1f;
							base.velocity.Y += (float)Main.rand.Next(-50, 51) * 0.1f;
							float num279 = Math.Abs(base.velocity.X);
							float num280 = Math.Abs(base.velocity.Y);
							if (base.Center.X > Main.player[target].Center.X)
							{
								num280 *= -1f;
							}
							if (base.Center.Y > Main.player[target].Center.Y)
							{
								num279 *= -1f;
							}
							base.velocity.X = num280 + base.velocity.X;
							base.velocity.Y = num279 + base.velocity.Y;
							base.velocity.Normalize();
							base.velocity *= num273;
							base.velocity.X += (float)Main.rand.Next(-20, 21) * 0.1f;
							base.velocity.Y += (float)Main.rand.Next(-20, 21) * 0.1f;
						}
						else if (num278 < 100f)
						{
							if (Math.Abs(base.velocity.X) > Math.Abs(base.velocity.Y))
							{
								float num281 = Math.Abs(base.velocity.X);
								float num282 = Math.Abs(base.velocity.Y);
								if (base.Center.X > Main.player[target].Center.X)
								{
									num282 *= -1f;
								}
								if (base.Center.Y > Main.player[target].Center.Y)
								{
									num281 *= -1f;
								}
								base.velocity.X = num282;
								base.velocity.Y = num281;
							}
						}
						else if (Math.Abs(base.velocity.X) > Math.Abs(base.velocity.Y))
						{
							float num283 = (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) / 2f;
							float num284 = num283;
							if (base.Center.X > Main.player[target].Center.X)
							{
								num284 *= -1f;
							}
							if (base.Center.Y > Main.player[target].Center.Y)
							{
								num283 *= -1f;
							}
							base.velocity.X = num284;
							base.velocity.Y = num283;
						}
						this.ai[1] = 4f;
						netUpdate = true;
						if (netSpam > 10)
						{
							netSpam = 10;
						}
					}
				}
				else if (this.ai[1] == 4f)
				{
					if (this.ai[2] == 0f)
					{
						Main.PlaySound(36, (int)base.position.X, (int)base.position.Y, -1);
					}
					float num285 = num228;
					this.ai[2] += 1f;
					if (this.ai[2] == num285 && Vector2.Distance(base.position, Main.player[target].position) < 200f)
					{
						this.ai[2] -= 1f;
					}
					if (this.ai[2] >= num285)
					{
						base.velocity *= 0.95f;
						if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
						{
							base.velocity.X = 0f;
						}
						if ((double)base.velocity.Y > -0.1 && (double)base.velocity.Y < 0.1)
						{
							base.velocity.Y = 0f;
						}
					}
					else
					{
						rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) - 1.57f;
					}
					float num286 = num285 + 13f;
					if (this.ai[2] >= num286)
					{
						netUpdate = true;
						if (netSpam > 10)
						{
							netSpam = 10;
						}
						this.ai[3] += 1f;
						this.ai[2] = 0f;
						if (this.ai[3] >= 5f)
						{
							this.ai[1] = 0f;
							this.ai[3] = 0f;
						}
						else
						{
							this.ai[1] = 3f;
						}
					}
				}
				else if (this.ai[1] == 5f)
				{
					float num287 = 600f;
					float num288 = 9f;
					float num289 = 0.3f;
					Vector2 vector37 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num290 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector37.X;
					float num291 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) + num287 - vector37.Y;
					float num292 = (float)Math.Sqrt(num290 * num290 + num291 * num291);
					num292 = num288 / num292;
					num290 *= num292;
					num291 *= num292;
					if (base.velocity.X < num290)
					{
						base.velocity.X += num289;
						if (base.velocity.X < 0f && num290 > 0f)
						{
							base.velocity.X += num289;
						}
					}
					else if (base.velocity.X > num290)
					{
						base.velocity.X -= num289;
						if (base.velocity.X > 0f && num290 < 0f)
						{
							base.velocity.X -= num289;
						}
					}
					if (base.velocity.Y < num291)
					{
						base.velocity.Y += num289;
						if (base.velocity.Y < 0f && num291 > 0f)
						{
							base.velocity.Y += num289;
						}
					}
					else if (base.velocity.Y > num291)
					{
						base.velocity.Y -= num289;
						if (base.velocity.Y > 0f && num291 < 0f)
						{
							base.velocity.Y -= num289;
						}
					}
					this.ai[2] += 1f;
					if (this.ai[2] >= 70f)
					{
						TargetClosest();
						this.ai[1] = 3f;
						this.ai[2] = -1f;
						this.ai[3] = Main.rand.Next(-3, 1);
						netUpdate = true;
					}
				}
				if (flag30 && this.ai[1] == 5f)
				{
					this.ai[1] = 3f;
				}
			}
			else if (aiStyle == 5)
			{
				if (target < 0 || target == 16 || Main.player[target].dead)
				{
					TargetClosest();
				}
				float num293 = 6f;
				float num294 = 0.05f;
				if (type == 6 || type == 173)
				{
					num293 = 4f;
					num294 = 0.02f;
					if (type == 6 && Main.expertMode)
					{
						num294 = 0.035f;
					}
				}
				else if (type == 94)
				{
					num293 = 4.2f;
					num294 = 0.022f;
				}
				else if (type == 252)
				{
					if (Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						num293 = 6f;
						num294 = 0.1f;
					}
					else
					{
						num294 = 0.01f;
						num293 = 2f;
					}
				}
				else if (type == 42 || (type >= 231 && type <= 235))
				{
					num293 = 3.5f;
					num294 = 0.021f;
					if (type == 231)
					{
						num293 = 3f;
						num294 = 0.017f;
					}
					num293 *= 1f - scale;
					num294 *= 1f - scale;
				}
				else if (type == 205)
				{
					num293 = 3.25f;
					num294 = 0.018f;
				}
				else if (type == 176)
				{
					num293 = 4f;
					num294 = 0.017f;
				}
				else if (type == 23)
				{
					num293 = 1f;
					num294 = 0.03f;
				}
				else if (type == 5)
				{
					num293 = 5f;
					num294 = 0.03f;
				}
				else if (type == 210 || type == 211)
				{
					localAI[0] += 1f;
					float num295 = (localAI[0] - 60f) / 60f;
					if (num295 > 1f)
					{
						num295 = 1f;
					}
					else
					{
						if (base.velocity.X > 6f)
						{
							base.velocity.X = 6f;
						}
						if (base.velocity.X < -6f)
						{
							base.velocity.X = -6f;
						}
						if (base.velocity.Y > 6f)
						{
							base.velocity.Y = 6f;
						}
						if (base.velocity.Y < -6f)
						{
							base.velocity.Y = -6f;
						}
					}
					num293 = 5f;
					num294 = 0.1f;
					num294 *= num295;
				}
				Vector2 vector38 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num296 = Main.player[target].position.X + (float)(Main.player[target].width / 2);
				float num297 = Main.player[target].position.Y + (float)(Main.player[target].height / 2);
				num296 = (int)(num296 / 8f) * 8;
				num297 = (int)(num297 / 8f) * 8;
				vector38.X = (int)(vector38.X / 8f) * 8;
				vector38.Y = (int)(vector38.Y / 8f) * 8;
				num296 -= vector38.X;
				num297 -= vector38.Y;
				float num298 = (float)Math.Sqrt(num296 * num296 + num297 * num297);
				float num299 = num298;
				bool flag31 = false;
				if (num298 > 600f)
				{
					flag31 = true;
				}
				if (num298 == 0f)
				{
					num296 = base.velocity.X;
					num297 = base.velocity.Y;
				}
				else
				{
					num298 = num293 / num298;
					num296 *= num298;
					num297 *= num298;
				}
				if (type == 6 || type == 42 || type == 94 || type == 139 || type == 173 || type == 176 || type == 205 || type == 210 || type == 211 || (type >= 231 && type <= 235))
				{
					if (num299 > 100f || type == 42 || type == 94 || type == 176 || type == 210 || type == 211 || (type >= 231 && type <= 235))
					{
						this.ai[0] += 1f;
						if (this.ai[0] > 0f)
						{
							base.velocity.Y += 0.023f;
						}
						else
						{
							base.velocity.Y -= 0.023f;
						}
						if (this.ai[0] < -100f || this.ai[0] > 100f)
						{
							base.velocity.X += 0.023f;
						}
						else
						{
							base.velocity.X -= 0.023f;
						}
						if (this.ai[0] > 200f)
						{
							this.ai[0] = -200f;
						}
					}
					if (num299 < 150f && (type == 6 || type == 94 || type == 173))
					{
						base.velocity.X += num296 * 0.007f;
						base.velocity.Y += num297 * 0.007f;
					}
				}
				if (Main.player[target].dead)
				{
					num296 = (float)base.direction * num293 / 2f;
					num297 = (0f - num293) / 2f;
				}
				if (base.velocity.X < num296)
				{
					base.velocity.X += num294;
					if (type != 173 && type != 6 && type != 42 && (type < 231 || type > 235) && type != 94 && type != 139 && base.velocity.X < 0f && num296 > 0f)
					{
						base.velocity.X += num294;
					}
				}
				else if (base.velocity.X > num296)
				{
					base.velocity.X -= num294;
					if (type != 173 && type != 6 && type != 42 && (type < 231 || type > 235) && type != 94 && type != 139 && base.velocity.X > 0f && num296 < 0f)
					{
						base.velocity.X -= num294;
					}
				}
				if (base.velocity.Y < num297)
				{
					base.velocity.Y += num294;
					if (type != 173 && type != 6 && type != 42 && (type < 231 || type > 235) && type != 94 && type != 139 && base.velocity.Y < 0f && num297 > 0f)
					{
						base.velocity.Y += num294;
					}
				}
				else if (base.velocity.Y > num297)
				{
					base.velocity.Y -= num294;
					if (type != 173 && type != 6 && type != 42 && (type < 231 || type > 235) && type != 94 && type != 139 && base.velocity.Y > 0f && num297 < 0f)
					{
						base.velocity.Y -= num294;
					}
				}
				if (type == 23)
				{
					if (num296 > 0f)
					{
						spriteDirection = 1;
						rotation = (float)Math.Atan2(num297, num296);
					}
					else if (num296 < 0f)
					{
						spriteDirection = -1;
						rotation = (float)Math.Atan2(num297, num296) + 3.14f;
					}
				}
				else if (type == 139)
				{
					localAI[0] += 1f;
					if (justHit)
					{
						localAI[0] = 0f;
					}
					if (Main.netMode != 1 && localAI[0] >= 120f)
					{
						localAI[0] = 0f;
						if (Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
						{
							int num300 = 25;
							if (Main.expertMode)
							{
								num300 = 22;
							}
							int num301 = 84;
							Projectile.NewProjectile(vector38.X, vector38.Y, num296, num297, num301, num300, 0f, Main.myPlayer);
						}
					}
					int num302 = (int)base.position.X + width / 2;
					int num303 = (int)base.position.Y + height / 2;
					num302 /= 16;
					num303 /= 16;
					if (!WorldGen.SolidTile(num302, num303))
					{
						Lighting.AddLight((int)((base.position.X + (float)(width / 2)) / 16f), (int)((base.position.Y + (float)(height / 2)) / 16f), 0.3f, 0.1f, 0.05f);
					}
					if (num296 > 0f)
					{
						spriteDirection = 1;
						rotation = (float)Math.Atan2(num297, num296);
					}
					if (num296 < 0f)
					{
						spriteDirection = -1;
						rotation = (float)Math.Atan2(num297, num296) + 3.14f;
					}
				}
				else if (type == 6 || type == 94 || type == 173)
				{
					rotation = (float)Math.Atan2(num297, num296) - 1.57f;
				}
				else if (type == 42 || type == 176 || type == 205 || (type >= 231 && type <= 235))
				{
					if (base.velocity.X > 0f)
					{
						spriteDirection = 1;
					}
					if (base.velocity.X < 0f)
					{
						spriteDirection = -1;
					}
					rotation = base.velocity.X * 0.1f;
				}
				else
				{
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) - 1.57f;
				}
				if (type == 6 || type == 23 || type == 42 || type == 94 || type == 139 || type == 173 || type == 176 || type == 205 || type == 210 || type == 211 || (type >= 231 && type <= 235))
				{
					float num304 = 0.7f;
					if (type == 6 || type == 173)
					{
						num304 = 0.4f;
					}
					if (collideX)
					{
						netUpdate = true;
						base.velocity.X = oldVelocity.X * (0f - num304);
						if (base.direction == -1 && base.velocity.X > 0f && base.velocity.X < 2f)
						{
							base.velocity.X = 2f;
						}
						if (base.direction == 1 && base.velocity.X < 0f && base.velocity.X > -2f)
						{
							base.velocity.X = -2f;
						}
					}
					if (collideY)
					{
						netUpdate = true;
						base.velocity.Y = oldVelocity.Y * (0f - num304);
						if (base.velocity.Y > 0f && (double)base.velocity.Y < 1.5)
						{
							base.velocity.Y = 2f;
						}
						if (base.velocity.Y < 0f && (double)base.velocity.Y > -1.5)
						{
							base.velocity.Y = -2f;
						}
					}
					if (type == 23)
					{
						int num305 = Dust.NewDust(new Vector2(base.position.X - base.velocity.X, base.position.Y - base.velocity.Y), width, height, 6, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100, default(Color), 2f);
						Main.dust[num305].noGravity = true;
						Main.dust[num305].velocity.X *= 0.3f;
						Main.dust[num305].velocity.Y *= 0.3f;
					}
					else if (type != 42 && type != 139 && type != 176 && type != 205 && type != 210 && type != 211 && type != 252 && (type < 231 || type > 235) && Main.rand.Next(20) == 0)
					{
						int num306 = 18;
						if (type == 173)
						{
							num306 = 5;
						}
						int num307 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + (float)height * 0.25f), width, (int)((float)height * 0.5f), num306, base.velocity.X, 2f, 75, color, scale);
						Main.dust[num307].velocity.X *= 0.5f;
						Main.dust[num307].velocity.Y *= 0.1f;
					}
				}
				else if (type != 252 && Main.rand.Next(40) == 0)
				{
					int num308 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + (float)height * 0.25f), width, (int)((float)height * 0.5f), 5, base.velocity.X, 2f);
					Main.dust[num308].velocity.X *= 0.5f;
					Main.dust[num308].velocity.Y *= 0.1f;
				}
				if ((type == 6 || type == 94 || type == 173) && wet)
				{
					if (base.velocity.Y > 0f)
					{
						base.velocity.Y *= 0.95f;
					}
					base.velocity.Y -= 0.3f;
					if (base.velocity.Y < -2f)
					{
						base.velocity.Y = -2f;
					}
				}
				if (type == 205 && wet)
				{
					if (base.velocity.Y > 0f)
					{
						base.velocity.Y *= 0.95f;
					}
					base.velocity.Y -= 0.5f;
					if (base.velocity.Y < -4f)
					{
						base.velocity.Y = -4f;
					}
					TargetClosest();
				}
				if (type == 42 || type == 176 || (type >= 231 && type <= 235))
				{
					if (wet)
					{
						if (base.velocity.Y > 0f)
						{
							base.velocity.Y *= 0.95f;
						}
						base.velocity.Y -= 0.5f;
						if (base.velocity.Y < -4f)
						{
							base.velocity.Y = -4f;
						}
						TargetClosest();
					}
					if (this.ai[1] == 101f)
					{
						Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 17);
						this.ai[1] = 0f;
					}
					if (Main.netMode != 1)
					{
						this.ai[1] += (float)Main.rand.Next(5, 20) * 0.1f * scale;
						if (type == 176)
						{
							this.ai[1] += (float)Main.rand.Next(5, 20) * 0.1f * scale;
						}
						if (Main.player[target].stealth == 0f && Main.player[target].itemAnimation == 0)
						{
							this.ai[1] = 0f;
						}
						if (this.ai[1] >= 130f)
						{
							if (Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
							{
								float num309 = 8f;
								Vector2 vector39 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)(height / 2));
								float num310 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector39.X + (float)Main.rand.Next(-20, 21);
								float num311 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector39.Y + (float)Main.rand.Next(-20, 21);
								if ((num310 < 0f && base.velocity.X < 0f) || (num310 > 0f && base.velocity.X > 0f))
								{
									float num312 = (float)Math.Sqrt(num310 * num310 + num311 * num311);
									num312 = num309 / num312;
									num310 *= num312;
									num311 *= num312;
									int num313 = (int)(10f * scale);
									if (type == 176)
									{
										num313 = (int)(30f * scale);
									}
									int num314 = 55;
									int num315 = Projectile.NewProjectile(vector39.X, vector39.Y, num310, num311, num314, num313, 0f, Main.myPlayer);
									Main.projectile[num315].timeLeft = 300;
									this.ai[1] = 101f;
									netUpdate = true;
								}
								else
								{
									this.ai[1] = 0f;
								}
							}
							else
							{
								this.ai[1] = 0f;
							}
						}
					}
				}
				if (type == 139 && flag31)
				{
					if ((base.velocity.X > 0f && num296 > 0f) || (base.velocity.X < 0f && num296 < 0f))
					{
						if (Math.Abs(base.velocity.X) < 12f)
						{
							base.velocity.X *= 1.05f;
						}
					}
					else
					{
						base.velocity.X *= 0.9f;
					}
				}
				if (Main.netMode != 1 && type == 94 && !Main.player[target].dead)
				{
					if (justHit)
					{
						localAI[0] = 0f;
					}
					localAI[0] += 1f;
					if (localAI[0] == 180f)
					{
						if (Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
						{
							NewNPC((int)(base.position.X + (float)(width / 2) + base.velocity.X), (int)(base.position.Y + (float)(height / 2) + base.velocity.Y), 112);
						}
						localAI[0] = 0f;
					}
				}
				if ((Main.dayTime && type != 173 && type != 6 && type != 23 && type != 42 && type != 94 && type != 176 && type != 205 && type != 210 && type != 211 && type != 252 && (type < 231 || type > 235)) || Main.player[target].dead)
				{
					base.velocity.Y -= num294 * 2f;
					if (timeLeft > 10)
					{
						timeLeft = 10;
					}
				}
				if (((base.velocity.X > 0f && oldVelocity.X < 0f) || (base.velocity.X < 0f && oldVelocity.X > 0f) || (base.velocity.Y > 0f && oldVelocity.Y < 0f) || (base.velocity.Y < 0f && oldVelocity.Y > 0f)) && !justHit)
				{
					netUpdate = true;
				}
			}
			else if (aiStyle == 6)
			{
				if (type == 117 && localAI[1] == 0f)
				{
					localAI[1] = 1f;
					Main.PlaySound(4, (int)base.position.X, (int)base.position.Y, 13);
					int num316 = 1;
					if (base.velocity.X < 0f)
					{
						num316 = -1;
					}
					for (int num317 = 0; num317 < 20; num317++)
					{
						Dust.NewDust(new Vector2(base.position.X - 20f, base.position.Y - 20f), width + 40, height + 40, 5, num316 * 8, -1f);
					}
				}
				if (type == 454 && localAI[3] == 0f)
				{
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 119);
					localAI[3] = 1f;
				}
				if (type >= 454 && type <= 459)
				{
					dontTakeDamage = (alpha > 0);
					if (type == 454 || (type != 454 && Main.npc[(int)this.ai[1]].alpha < 85))
					{
						if (dontTakeDamage)
						{
							for (int num318 = 0; num318 < 2; num318++)
							{
								int num319 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 228, 0f, 0f, 100, default(Color), 2f);
								Main.dust[num319].noGravity = true;
								Main.dust[num319].noLight = true;
							}
						}
						alpha -= 42;
						if (alpha < 0)
						{
							alpha = 0;
						}
					}
				}
				else if (type == 402 && this.ai[1] == 0f)
				{
					this.ai[1] = Main.rand.Next(-2, 0);
					netUpdate = true;
				}
				if (Main.netMode != 1 && Main.expertMode)
				{
					if (type == 14 && (double)(base.position.Y / 16f) < Main.worldSurface)
					{
						if (Main.rand.Next(900) == 0)
						{
							TargetClosest();
							if (Collision.CanHitLine(base.Center, 1, 1, Main.player[target].Center, 1, 1))
							{
								NewNPC((int)(base.position.X + (float)(width / 2) + base.velocity.X), (int)(base.position.Y + (float)(height / 2) + base.velocity.Y), 112, 0, 0f, 1f);
							}
						}
					}
					else if (type == 13)
					{
						int num320 = 90;
						num320 += (int)((float)life / (float)lifeMax * 60f * 5f);
						if (Main.rand.Next(num320) == 0)
						{
							TargetClosest();
							if (Collision.CanHitLine(base.Center, 1, 1, Main.player[target].Center, 1, 1))
							{
								NewNPC((int)(base.position.X + (float)(width / 2) + base.velocity.X), (int)(base.position.Y + (float)(height / 2) + base.velocity.Y), 112, 0, 0f, 1f);
							}
						}
					}
				}
				if (type >= 13 && type <= 15)
				{
					realLife = -1;
				}
				else if (this.ai[3] > 0f)
				{
					realLife = (int)this.ai[3];
				}
				if (target < 0 || target == 16 || Main.player[target].dead)
				{
					TargetClosest();
				}
				if (Main.player[target].dead && timeLeft > 300)
				{
					timeLeft = 300;
				}
				if (Main.netMode != 1)
				{
					if (type == 87 && this.ai[0] == 0f)
					{
						this.ai[3] = base.whoAmI;
						realLife = base.whoAmI;
						int num321 = 0;
						int num322 = base.whoAmI;
						for (int num323 = 0; num323 < 14; num323++)
						{
							int num324 = 89;
							switch (num323)
							{
							case 1:
							case 8:
								num324 = 88;
								break;
							case 11:
								num324 = 90;
								break;
							case 12:
								num324 = 91;
								break;
							case 13:
								num324 = 92;
								break;
							}
							num321 = NewNPC((int)(base.position.X + (float)(width / 2)), (int)(base.position.Y + (float)height), num324, base.whoAmI);
							Main.npc[num321].ai[3] = base.whoAmI;
							Main.npc[num321].realLife = base.whoAmI;
							Main.npc[num321].ai[1] = num322;
							Main.npc[num322].ai[0] = num321;
							NetMessage.SendData(23, -1, -1, "", num321);
							num322 = num321;
						}
					}
					if (type == 454 && this.ai[0] == 0f)
					{
						this.ai[3] = base.whoAmI;
						realLife = base.whoAmI;
						int num325 = 0;
						int num326 = base.whoAmI;
						for (int num327 = 0; num327 < 30; num327++)
						{
							int num328 = 456;
							if ((num327 - 2) % 4 == 0 && num327 < 26)
							{
								num328 = 455;
							}
							else
							{
								switch (num327)
								{
								case 27:
									num328 = 457;
									break;
								case 28:
									num328 = 458;
									break;
								case 29:
									num328 = 459;
									break;
								}
							}
							num325 = NewNPC((int)(base.position.X + (float)(width / 2)), (int)(base.position.Y + (float)height), num328, base.whoAmI);
							Main.npc[num325].ai[3] = base.whoAmI;
							Main.npc[num325].realLife = base.whoAmI;
							Main.npc[num325].ai[1] = num326;
							Main.npc[num326].ai[0] = num325;
							NetMessage.SendData(23, -1, -1, "", num325);
							num326 = num325;
						}
					}
					if (type == 513 && this.ai[0] == 0f)
					{
						this.ai[3] = base.whoAmI;
						realLife = base.whoAmI;
						int num329 = 0;
						int num330 = base.whoAmI;
						int num331 = Main.rand.Next(6, 10);
						for (int num332 = 0; num332 < num331; num332++)
						{
							int num333 = 514;
							if (num332 == num331 - 1)
							{
								num333 = 515;
							}
							num329 = NewNPC((int)(base.position.X + (float)(width / 2)), (int)(base.position.Y + (float)height), num333, base.whoAmI);
							Main.npc[num329].ai[3] = base.whoAmI;
							Main.npc[num329].realLife = base.whoAmI;
							Main.npc[num329].ai[1] = num330;
							Main.npc[num330].ai[0] = num329;
							NetMessage.SendData(23, -1, -1, "", num329);
							num330 = num329;
						}
					}
					if (type == 510 && this.ai[0] == 0f)
					{
						this.ai[3] = base.whoAmI;
						realLife = base.whoAmI;
						int num334 = 0;
						int num335 = base.whoAmI;
						int num336 = Main.rand.Next(12, 21);
						for (int num337 = 0; num337 < num336; num337++)
						{
							int num338 = 511;
							if (num337 == num336 - 1)
							{
								num338 = 512;
							}
							num334 = NewNPC((int)(base.position.X + (float)(width / 2)), (int)(base.position.Y + (float)height), num338, base.whoAmI);
							Main.npc[num334].ai[3] = base.whoAmI;
							Main.npc[num334].realLife = base.whoAmI;
							Main.npc[num334].ai[1] = num335;
							Main.npc[num335].ai[0] = num334;
							NetMessage.SendData(23, -1, -1, "", num334);
							num335 = num334;
						}
					}
					else if ((type == 7 || type == 8 || type == 10 || type == 11 || type == 13 || type == 14 || type == 39 || type == 40 || type == 95 || type == 96 || type == 98 || type == 99 || type == 117 || type == 118) && this.ai[0] == 0f)
					{
						if (type == 7 || type == 10 || type == 13 || type == 39 || type == 95 || type == 98 || type == 117)
						{
							if (type < 13 || type > 15)
							{
								this.ai[3] = base.whoAmI;
								realLife = base.whoAmI;
							}
							this.ai[2] = Main.rand.Next(8, 13);
							if (type == 10)
							{
								this.ai[2] = Main.rand.Next(4, 7);
							}
							if (type == 13)
							{
								this.ai[2] = Main.rand.Next(45, 56);
								if (Main.expertMode)
								{
									this.ai[2] = (int)(this.ai[2] * 1.1f);
								}
							}
							if (type == 39)
							{
								this.ai[2] = Main.rand.Next(12, 19);
							}
							if (type == 95)
							{
								this.ai[2] = Main.rand.Next(6, 12);
							}
							if (type == 98)
							{
								this.ai[2] = Main.rand.Next(20, 26);
							}
							if (type == 117)
							{
								this.ai[2] = Main.rand.Next(3, 6);
							}
							this.ai[0] = NewNPC((int)(base.position.X + (float)(width / 2)), (int)(base.position.Y + (float)height), type + 1, base.whoAmI);
						}
						else if ((type == 8 || type == 11 || type == 14 || type == 40 || type == 96 || type == 99 || type == 118) && this.ai[2] > 0f)
						{
							this.ai[0] = NewNPC((int)(base.position.X + (float)(width / 2)), (int)(base.position.Y + (float)height), type, base.whoAmI);
						}
						else
						{
							this.ai[0] = NewNPC((int)(base.position.X + (float)(width / 2)), (int)(base.position.Y + (float)height), type + 1, base.whoAmI);
						}
						if (type < 13 || type > 15)
						{
							Main.npc[(int)this.ai[0]].ai[3] = this.ai[3];
							Main.npc[(int)this.ai[0]].realLife = realLife;
						}
						Main.npc[(int)this.ai[0]].ai[1] = base.whoAmI;
						Main.npc[(int)this.ai[0]].ai[2] = this.ai[2] - 1f;
						netUpdate = true;
					}
					if (type == 412 && this.ai[0] == 0f)
					{
						this.ai[3] = base.whoAmI;
						realLife = base.whoAmI;
						int num339 = 0;
						int num340 = base.whoAmI;
						int num341 = 30;
						for (int num342 = 0; num342 < num341; num342++)
						{
							int num343 = 413;
							if (num342 == num341 - 1)
							{
								num343 = 414;
							}
							num339 = NewNPC((int)(base.position.X + (float)(width / 2)), (int)(base.position.Y + (float)height), num343, base.whoAmI);
							Main.npc[num339].ai[3] = base.whoAmI;
							Main.npc[num339].realLife = base.whoAmI;
							Main.npc[num339].ai[1] = num340;
							Main.npc[num340].ai[0] = num339;
							NetMessage.SendData(23, -1, -1, "", num339);
							num340 = num339;
						}
					}
					switch (type)
					{
					case 8:
					case 9:
					case 11:
					case 12:
					case 40:
					case 41:
					case 88:
					case 89:
					case 90:
					case 91:
					case 92:
					case 96:
					case 97:
					case 99:
					case 100:
					case 118:
					case 119:
					case 413:
					case 414:
					case 455:
					case 456:
					case 457:
					case 458:
					case 459:
					case 511:
					case 512:
					case 514:
					case 515:
						if (!Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].aiStyle != aiStyle)
						{
							life = 0;
							HitEffect();
							active = false;
							NetMessage.SendData(28, -1, -1, "", base.whoAmI, -1f);
						}
						break;
					}
					switch (type)
					{
					case 7:
					case 8:
					case 10:
					case 11:
					case 39:
					case 40:
					case 87:
					case 88:
					case 89:
					case 90:
					case 91:
					case 95:
					case 96:
					case 98:
					case 99:
					case 117:
					case 118:
					case 412:
					case 413:
					case 454:
					case 455:
					case 456:
					case 457:
					case 458:
					case 510:
					case 511:
					case 513:
					case 514:
						if (!Main.npc[(int)this.ai[0]].active || Main.npc[(int)this.ai[0]].aiStyle != aiStyle)
						{
							life = 0;
							HitEffect();
							active = false;
							NetMessage.SendData(28, -1, -1, "", base.whoAmI, -1f);
						}
						break;
					}
					if (type == 13 || type == 14 || type == 15)
					{
						if (!Main.npc[(int)this.ai[1]].active && !Main.npc[(int)this.ai[0]].active)
						{
							life = 0;
							HitEffect();
							checkDead();
							active = false;
							NetMessage.SendData(28, -1, -1, "", base.whoAmI, -1f);
						}
						if (type == 13 && !Main.npc[(int)this.ai[0]].active)
						{
							life = 0;
							HitEffect();
							checkDead();
							active = false;
							NetMessage.SendData(28, -1, -1, "", base.whoAmI, -1f);
						}
						if (type == 15 && !Main.npc[(int)this.ai[1]].active)
						{
							life = 0;
							HitEffect();
							checkDead();
							active = false;
							NetMessage.SendData(28, -1, -1, "", base.whoAmI, -1f);
						}
						if (type == 14 && (!Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].aiStyle != aiStyle))
						{
							type = 13;
							int whoAmI = base.whoAmI;
							float num344 = (float)life / (float)lifeMax;
							float num345 = this.ai[0];
							SetDefaultsKeepPlayerInteraction(type);
							life = (int)((float)lifeMax * num344);
							this.ai[0] = num345;
							TargetClosest();
							netUpdate = true;
							base.whoAmI = whoAmI;
						}
						if (type == 14 && (!Main.npc[(int)this.ai[0]].active || Main.npc[(int)this.ai[0]].aiStyle != aiStyle))
						{
							int whoAmI2 = base.whoAmI;
							float num346 = (float)life / (float)lifeMax;
							float num347 = this.ai[1];
							SetDefaultsKeepPlayerInteraction(type);
							life = (int)((float)lifeMax * num346);
							this.ai[1] = num347;
							TargetClosest();
							netUpdate = true;
							base.whoAmI = whoAmI2;
						}
					}
					if (!active && Main.netMode == 2)
					{
						NetMessage.SendData(28, -1, -1, "", base.whoAmI, -1f);
					}
				}
				int num348 = (int)(base.position.X / 16f) - 1;
				int num349 = (int)((base.position.X + (float)width) / 16f) + 2;
				int num350 = (int)(base.position.Y / 16f) - 1;
				int num351 = (int)((base.position.Y + (float)height) / 16f) + 2;
				if (num348 < 0)
				{
					num348 = 0;
				}
				if (num349 > Main.maxTilesX)
				{
					num349 = Main.maxTilesX;
				}
				if (num350 < 0)
				{
					num350 = 0;
				}
				if (num351 > Main.maxTilesY)
				{
					num351 = Main.maxTilesY;
				}
				bool flag32 = false;
				if (type >= 87 && type <= 92)
				{
					flag32 = true;
				}
				if (type >= 454 && type <= 459)
				{
					flag32 = true;
				}
				if (type == 402 && this.ai[1] == -1f)
				{
					flag32 = true;
				}
				if (type >= 412 && type <= 414)
				{
					flag32 = true;
				}
				if (!flag32)
				{
					Vector2 vector40 = default(Vector2);
					for (int num352 = num348; num352 < num349; num352++)
					{
						for (int num353 = num350; num353 < num351; num353++)
						{
							if (Main.tile[num352, num353] == null || ((!Main.tile[num352, num353].nactive() || (!Main.tileSolid[Main.tile[num352, num353].type] && (!Main.tileSolidTop[Main.tile[num352, num353].type] || Main.tile[num352, num353].frameY != 0))) && Main.tile[num352, num353].liquid <= 64))
							{
								continue;
							}
							vector40.X = num352 * 16;
							vector40.Y = num353 * 16;
							if (base.position.X + (float)width > vector40.X && base.position.X < vector40.X + 16f && base.position.Y + (float)height > vector40.Y && base.position.Y < vector40.Y + 16f)
							{
								flag32 = true;
								if (Main.rand.Next(100) == 0 && type != 117 && Main.tile[num352, num353].nactive())
								{
									WorldGen.KillTile(num352, num353, true, true);
								}
							}
						}
					}
				}
				if (!flag32 && (type == 7 || type == 10 || type == 13 || type == 39 || type == 95 || type == 98 || type == 117 || type == 375 || type == 454 || type == 510 || type == 513))
				{
					Rectangle rectangle = new Rectangle((int)base.position.X, (int)base.position.Y, width, height);
					int num354 = 1000;
					bool flag33 = true;
					for (int num355 = 0; num355 < 16; num355++)
					{
						if (Main.player[num355].active)
						{
							Rectangle rectangle2 = new Rectangle((int)Main.player[num355].position.X - num354, (int)Main.player[num355].position.Y - num354, num354 * 2, num354 * 2);
							if (rectangle.Intersects(rectangle2))
							{
								flag33 = false;
								break;
							}
						}
					}
					if (flag33)
					{
						flag32 = true;
					}
				}
				if ((type >= 87 && type <= 92) || (type >= 454 && type <= 459))
				{
					if (base.velocity.X < 0f)
					{
						spriteDirection = 1;
					}
					else if (base.velocity.X > 0f)
					{
						spriteDirection = -1;
					}
				}
				if (type == 414)
				{
					if (justHit)
					{
						localAI[3] = 3f;
					}
					if (localAI[2] > 0f)
					{
						localAI[2] -= 16f;
						if (localAI[2] == 0f)
						{
							localAI[2] = -128f;
						}
					}
					else if (localAI[2] < 0f)
					{
						localAI[2] += 16f;
					}
					else if (localAI[3] > 0f)
					{
						localAI[2] = 128f;
						localAI[3] -= 1f;
					}
				}
				if (type == 412)
				{
					Vector2 value5 = base.Center + (rotation - (float)Math.PI / 2f).ToRotationVector2() * 8f;
					Vector2 value6 = rotation.ToRotationVector2() * 16f;
					Dust dust10 = Main.dust[Dust.NewDust(value5 + value6, 0, 0, 6, base.velocity.X, base.velocity.Y, 100, Color.Transparent, 1f + Main.rand.NextFloat() * 3f)];
					dust10.noGravity = true;
					dust10.noLight = true;
					dust10.position -= new Vector2(4f);
					dust10.fadeIn = 1f;
					dust10.velocity = Vector2.Zero;
					dust10 = Main.dust[Dust.NewDust(value5 - value6, 0, 0, 6, base.velocity.X, base.velocity.Y, 100, Color.Transparent, 1f + Main.rand.NextFloat() * 3f)];
					dust10.noGravity = true;
					dust10.noLight = true;
					dust10.position -= new Vector2(4f);
					dust10.fadeIn = 1f;
					dust10.velocity = Vector2.Zero;
				}
				float num356 = 8f;
				float num357 = 0.07f;
				if (type == 95)
				{
					num356 = 5.5f;
					num357 = 0.045f;
				}
				if (type == 10)
				{
					num356 = 6f;
					num357 = 0.05f;
				}
				if (type == 513)
				{
					num356 = 7f;
					num357 = 0.03f;
				}
				if (type == 13)
				{
					num356 = 10f;
					num357 = 0.07f;
					if (Main.expertMode)
					{
						num356 = 12f;
						num357 = 0.15f;
					}
				}
				if (type == 510)
				{
					num356 = 10f;
					num357 = 0.25f;
				}
				if (type == 87)
				{
					num356 = 11f;
					num357 = 0.25f;
				}
				if (type == 375)
				{
					num356 = 6f;
					num357 = 0.15f;
				}
				if (type == 454)
				{
					num356 = 20f;
					num357 = 0.55f;
				}
				if (type == 402)
				{
					num356 = 6f;
					num357 = 0.2f;
				}
				if (type == 117 && Main.wof >= 0)
				{
					float num358 = (float)Main.npc[Main.wof].life / (float)Main.npc[Main.wof].lifeMax;
					if ((double)num358 < 0.5)
					{
						num356 += 1f;
						num357 += 0.1f;
					}
					if ((double)num358 < 0.25)
					{
						num356 += 1f;
						num357 += 0.1f;
					}
					if ((double)num358 < 0.1)
					{
						num356 += 2f;
						num357 += 0.1f;
					}
				}
				Vector2 vector41 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num359 = Main.player[target].position.X + (float)(Main.player[target].width / 2);
				float num360 = Main.player[target].position.Y + (float)(Main.player[target].height / 2);
				if (type == 412)
				{
					num356 = 10f;
					num357 = 0.3f;
					int num361 = -1;
					int num362 = (int)(Main.player[target].Center.X / 16f);
					int num363 = (int)(Main.player[target].Center.Y / 16f);
					for (int num364 = num362 - 2; num364 <= num362 + 2; num364++)
					{
						for (int num365 = num363; num365 <= num363 + 15; num365++)
						{
							if (WorldGen.SolidTile2(num364, num365))
							{
								num361 = num365;
								break;
							}
						}
						if (num361 > 0)
						{
							break;
						}
					}
					if (num361 > 0)
					{
						num361 *= 16;
						float num366 = num361 - 800;
						if (Main.player[target].position.Y > num366)
						{
							num360 = num366;
							if (Math.Abs(base.Center.X - Main.player[target].Center.X) < 500f)
							{
								num359 = ((!(base.velocity.X > 0f)) ? (Main.player[target].Center.X - 600f) : (Main.player[target].Center.X + 600f));
							}
						}
					}
					else
					{
						num356 = 14f;
						num357 = 0.5f;
					}
					float num367 = num356 * 1.3f;
					float num368 = num356 * 0.7f;
					float num369 = base.velocity.Length();
					if (num369 > 0f)
					{
						if (num369 > num367)
						{
							base.velocity.Normalize();
							base.velocity *= num367;
						}
						else if (num369 < num368)
						{
							base.velocity.Normalize();
							base.velocity *= num368;
						}
					}
					if (num361 > 0)
					{
						for (int num370 = 0; num370 < 200; num370++)
						{
							if (Main.npc[num370].active && Main.npc[num370].type == type && num370 != base.whoAmI)
							{
								Vector2 vector42 = Main.npc[num370].Center - base.Center;
								if (vector42.Length() < 400f)
								{
									vector42.Normalize();
									vector42 *= 1000f;
									num359 -= vector42.X;
									num360 -= vector42.Y;
								}
							}
						}
					}
					else
					{
						for (int num371 = 0; num371 < 200; num371++)
						{
							if (Main.npc[num371].active && Main.npc[num371].type == type && num371 != base.whoAmI)
							{
								Vector2 vector43 = Main.npc[num371].Center - base.Center;
								if (vector43.Length() < 60f)
								{
									vector43.Normalize();
									vector43 *= 200f;
									num359 -= vector43.X;
									num360 -= vector43.Y;
								}
							}
						}
					}
				}
				num359 = (int)(num359 / 16f) * 16;
				num360 = (int)(num360 / 16f) * 16;
				vector41.X = (int)(vector41.X / 16f) * 16;
				vector41.Y = (int)(vector41.Y / 16f) * 16;
				num359 -= vector41.X;
				num360 -= vector41.Y;
				if (type == 375)
				{
					num359 *= -1f;
					num360 *= -1f;
				}
				float num372 = (float)Math.Sqrt(num359 * num359 + num360 * num360);
				if (this.ai[1] > 0f && this.ai[1] < (float)Main.npc.Length)
				{
					try
					{
						vector41 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						num359 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - vector41.X;
						num360 = Main.npc[(int)this.ai[1]].position.Y + (float)(Main.npc[(int)this.ai[1]].height / 2) - vector41.Y;
					}
					catch
					{
					}
					rotation = (float)Math.Atan2(num360, num359) + 1.57f;
					num372 = (float)Math.Sqrt(num359 * num359 + num360 * num360);
					int num373 = width;
					if (type >= 87 && type <= 92)
					{
						num373 = 42;
					}
					if (type >= 454 && type <= 459)
					{
						num373 = 36;
					}
					if (type >= 13 && type <= 15)
					{
						num373 = (int)((float)num373 * scale);
					}
					if (type >= 412 && type <= 414)
					{
						num373 += 6;
					}
					num372 = (num372 - (float)num373) / num372;
					num359 *= num372;
					num360 *= num372;
					base.velocity = Vector2.Zero;
					base.position.X += num359;
					base.position.Y += num360;
					if (type >= 87 && type <= 92)
					{
						if (num359 < 0f)
						{
							spriteDirection = 1;
						}
						else if (num359 > 0f)
						{
							spriteDirection = -1;
						}
					}
					if (type >= 454 && type <= 459)
					{
						if (num359 < 0f)
						{
							spriteDirection = 1;
						}
						else if (num359 > 0f)
						{
							spriteDirection = -1;
						}
					}
					return;
				}
				if (!flag32)
				{
					TargetClosest();
					base.velocity.Y += 0.11f;
					if (base.velocity.Y > num356)
					{
						base.velocity.Y = num356;
					}
					if ((double)(Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) < (double)num356 * 0.4)
					{
						if (base.velocity.X < 0f)
						{
							base.velocity.X -= num357 * 1.1f;
						}
						else
						{
							base.velocity.X += num357 * 1.1f;
						}
					}
					else if (base.velocity.Y == num356)
					{
						if (base.velocity.X < num359)
						{
							base.velocity.X += num357;
						}
						else if (base.velocity.X > num359)
						{
							base.velocity.X -= num357;
						}
					}
					else if (base.velocity.Y > 4f)
					{
						if (base.velocity.X < 0f)
						{
							base.velocity.X += num357 * 0.9f;
						}
						else
						{
							base.velocity.X -= num357 * 0.9f;
						}
					}
				}
				else
				{
					if (type != 87 && type != 117 && type != 454 && type != 412 && soundDelay == 0)
					{
						float num374 = num372 / 40f;
						if (num374 < 10f)
						{
							num374 = 10f;
						}
						if (num374 > 20f)
						{
							num374 = 20f;
						}
						soundDelay = (int)num374;
						Main.PlaySound(15, (int)base.position.X, (int)base.position.Y);
					}
					num372 = (float)Math.Sqrt(num359 * num359 + num360 * num360);
					float num375 = Math.Abs(num359);
					float num376 = Math.Abs(num360);
					float num377 = num356 / num372;
					num359 *= num377;
					num360 *= num377;
					bool flag34 = false;
					if ((type == 7 || type == 13) && !Main.player[target].ZoneCorrupt && !Main.player[target].ZoneCrimson)
					{
						flag34 = true;
					}
					if (type == 513 && (double)Main.player[target].position.Y < Main.worldSurface * 16.0)
					{
						flag34 = true;
					}
					if (type == 510 && (double)Main.player[target].position.Y < Main.worldSurface * 16.0)
					{
						flag34 = true;
					}
					if (flag34)
					{
						bool flag35 = true;
						for (int num378 = 0; num378 < 16; num378++)
						{
							if (Main.player[num378].active && !Main.player[num378].dead && Main.player[num378].ZoneCorrupt)
							{
								flag35 = false;
							}
						}
						if (flag35)
						{
							if (Main.netMode != 1 && (double)(base.position.Y / 16f) > (Main.rockLayer + (double)Main.maxTilesY) / 2.0)
							{
								active = false;
								int num379 = (int)this.ai[0];
								while (num379 > 0 && num379 < 200 && Main.npc[num379].active && Main.npc[num379].aiStyle == aiStyle)
								{
									int num380 = (int)Main.npc[num379].ai[0];
									Main.npc[num379].active = false;
									life = 0;
									if (Main.netMode == 2)
									{
										NetMessage.SendData(23, -1, -1, "", num379);
									}
									num379 = num380;
								}
								if (Main.netMode == 2)
								{
									NetMessage.SendData(23, -1, -1, "", base.whoAmI);
								}
							}
							num359 = 0f;
							num360 = num356;
						}
					}
					bool flag36 = false;
					if (type == 87)
					{
						if (((base.velocity.X > 0f && num359 < 0f) || (base.velocity.X < 0f && num359 > 0f) || (base.velocity.Y > 0f && num360 < 0f) || (base.velocity.Y < 0f && num360 > 0f)) && Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y) > num357 / 2f && num372 < 300f)
						{
							flag36 = true;
							if (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y) < num356)
							{
								base.velocity *= 1.1f;
							}
						}
						if (base.position.Y > Main.player[target].position.Y || (double)(Main.player[target].position.Y / 16f) > Main.worldSurface || Main.player[target].dead)
						{
							flag36 = true;
							if (Math.Abs(base.velocity.X) < num356 / 2f)
							{
								if (base.velocity.X == 0f)
								{
									base.velocity.X -= base.direction;
								}
								base.velocity.X *= 1.1f;
							}
							else if (base.velocity.Y > 0f - num356)
							{
								base.velocity.Y -= num357;
							}
						}
					}
					if (type == 454)
					{
						if (((base.velocity.X > 0f && num359 < 0f) || (base.velocity.X < 0f && num359 > 0f) || (base.velocity.Y > 0f && num360 < 0f) || (base.velocity.Y < 0f && num360 > 0f)) && Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y) > num357 / 2f && num372 < 300f)
						{
							flag36 = true;
							if (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y) < num356)
							{
								base.velocity *= 1.1f;
							}
						}
						if (base.position.Y > Main.player[target].position.Y || Main.player[target].dead)
						{
							flag36 = true;
							if (Math.Abs(base.velocity.X) < num356 / 2f)
							{
								if (base.velocity.X == 0f)
								{
									base.velocity.X -= base.direction;
								}
								base.velocity.X *= 1.1f;
							}
							else if (base.velocity.Y > 0f - num356)
							{
								base.velocity.Y -= num357;
							}
						}
					}
					if (!flag36)
					{
						if ((base.velocity.X > 0f && num359 > 0f) || (base.velocity.X < 0f && num359 < 0f) || (base.velocity.Y > 0f && num360 > 0f) || (base.velocity.Y < 0f && num360 < 0f))
						{
							if (base.velocity.X < num359)
							{
								base.velocity.X += num357;
							}
							else if (base.velocity.X > num359)
							{
								base.velocity.X -= num357;
							}
							if (base.velocity.Y < num360)
							{
								base.velocity.Y += num357;
							}
							else if (base.velocity.Y > num360)
							{
								base.velocity.Y -= num357;
							}
							if ((double)Math.Abs(num360) < (double)num356 * 0.2 && ((base.velocity.X > 0f && num359 < 0f) || (base.velocity.X < 0f && num359 > 0f)))
							{
								if (base.velocity.Y > 0f)
								{
									base.velocity.Y += num357 * 2f;
								}
								else
								{
									base.velocity.Y -= num357 * 2f;
								}
							}
							if ((double)Math.Abs(num359) < (double)num356 * 0.2 && ((base.velocity.Y > 0f && num360 < 0f) || (base.velocity.Y < 0f && num360 > 0f)))
							{
								if (base.velocity.X > 0f)
								{
									base.velocity.X += num357 * 2f;
								}
								else
								{
									base.velocity.X -= num357 * 2f;
								}
							}
						}
						else if (num375 > num376)
						{
							if (base.velocity.X < num359)
							{
								base.velocity.X += num357 * 1.1f;
							}
							else if (base.velocity.X > num359)
							{
								base.velocity.X -= num357 * 1.1f;
							}
							if ((double)(Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) < (double)num356 * 0.5)
							{
								if (base.velocity.Y > 0f)
								{
									base.velocity.Y += num357;
								}
								else
								{
									base.velocity.Y -= num357;
								}
							}
						}
						else
						{
							if (base.velocity.Y < num360)
							{
								base.velocity.Y += num357 * 1.1f;
							}
							else if (base.velocity.Y > num360)
							{
								base.velocity.Y -= num357 * 1.1f;
							}
							if ((double)(Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) < (double)num356 * 0.5)
							{
								if (base.velocity.X > 0f)
								{
									base.velocity.X += num357;
								}
								else
								{
									base.velocity.X -= num357;
								}
							}
						}
					}
				}
				rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
				if (type == 7 || type == 10 || type == 13 || type == 39 || type == 95 || type == 98 || type == 117 || type == 510 || type == 513)
				{
					if (flag32)
					{
						if (localAI[0] != 1f)
						{
							netUpdate = true;
						}
						localAI[0] = 1f;
					}
					else
					{
						if (localAI[0] != 0f)
						{
							netUpdate = true;
						}
						localAI[0] = 0f;
					}
					if (((base.velocity.X > 0f && oldVelocity.X < 0f) || (base.velocity.X < 0f && oldVelocity.X > 0f) || (base.velocity.Y > 0f && oldVelocity.Y < 0f) || (base.velocity.Y < 0f && oldVelocity.Y > 0f)) && !justHit)
					{
						netUpdate = true;
					}
				}
				if (type == 454)
				{
					float num381 = Vector2.Distance(Main.player[target].Center, base.Center);
					int num382 = 0;
					if (Vector2.Normalize(Main.player[target].Center - base.Center).ToRotation().AngleTowards(base.velocity.ToRotation(), (float)Math.PI / 2f) == base.velocity.ToRotation() && num381 < 350f)
					{
						num382 = 4;
					}
					if ((double)num382 > frameCounter)
					{
						frameCounter += 1.0;
					}
					if ((double)num382 < frameCounter)
					{
						frameCounter -= 1.0;
					}
					if (frameCounter < 0.0)
					{
						frameCounter = 0.0;
					}
					if (frameCounter > 4.0)
					{
						frameCounter = 4.0;
					}
				}
			}
			else if (aiStyle == 7)
			{
				bool flag37 = Main.raining;
				if (!Main.dayTime)
				{
					flag37 = true;
				}
				if (Main.eclipse)
				{
					flag37 = true;
				}
				if (Main.slimeRain)
				{
					flag37 = true;
				}
				float num383 = 1f;
				if (Main.expertMode)
				{
					defense = (dryadWard ? (defDefense + 10) : defDefense);
				}
				else
				{
					defense = (dryadWard ? (defDefense + 6) : defDefense);
				}
				if (townNPC || type == 453)
				{
					if (downedBoss1)
					{
						num383 += 0.1f;
						defense += 3;
					}
					if (downedBoss2)
					{
						num383 += 0.1f;
						defense += 3;
					}
					if (downedBoss3)
					{
						num383 += 0.1f;
						defense += 3;
					}
					if (downedQueenBee)
					{
						num383 += 0.1f;
						defense += 3;
					}
					if (Main.hardMode)
					{
						num383 += 0.4f;
						defense += 12;
					}
					if (downedMechBoss1)
					{
						num383 += 0.15f;
						defense += 6;
					}
					if (downedMechBoss2)
					{
						num383 += 0.15f;
						defense += 6;
					}
					if (downedMechBoss3)
					{
						num383 += 0.15f;
						defense += 6;
					}
					if (downedPlantBoss)
					{
						num383 += 0.15f;
						defense += 8;
					}
					if (downedGolemBoss)
					{
						num383 += 0.15f;
						defense += 8;
					}
					if (downedAncientCultist)
					{
						num383 += 0.15f;
						defense += 8;
					}
				}
				if (type == 142 && Main.netMode != 1 && !Main.xMas)
				{
					StrikeNPCNoInteraction(9999, 0f, 0);
					if (Main.netMode == 2)
					{
						NetMessage.SendData(28, -1, -1, "", base.whoAmI, 9999f);
					}
				}
				if ((type == 148 || type == 149) && localAI[0] == 0f)
				{
					localAI[0] = Main.rand.Next(1, 5);
				}
				if (type == 124)
				{
					bool flag38 = false;
					for (int num384 = 0; num384 < 1000; num384++)
					{
						if (Main.projectile[num384].active && Main.projectile[num384].type == 582 && Main.projectile[num384].ai[1] == (float)base.whoAmI)
						{
							flag38 = true;
							break;
						}
					}
					localAI[0] = flag38.ToInt();
				}
				if ((type == 362 || type == 364) && Main.netMode != 1 && (base.velocity.Y > 4f || base.velocity.Y < -4f || wet))
				{
					int direction = base.direction;
					Transform(type + 1);
					TargetClosest();
					base.direction = direction;
					netUpdate = true;
					return;
				}
				switch (type)
				{
				case 441:
					savedTaxCollector = true;
					break;
				case 107:
					savedGoblin = true;
					break;
				case 108:
					savedWizard = true;
					break;
				case 124:
					savedMech = true;
					break;
				case 353:
					savedStylist = true;
					break;
				case 369:
					savedAngler = true;
					break;
				}
				if (type >= 0 && type < 540 && NPCID.Sets.TownCritter[type] && target == 16)
				{
					TargetClosest();
					if (base.position.X < Main.player[target].position.X)
					{
						base.direction = 1;
						spriteDirection = base.direction;
					}
					if (base.position.X > Main.player[target].position.X)
					{
						base.direction = -1;
						spriteDirection = base.direction;
					}
					if (homeTileX == -1)
					{
						homeTileX = (int)((base.position.X + (float)(width / 2)) / 16f);
					}
				}
				else if (homeTileX == -1 && homeTileY == -1 && base.velocity.Y == 0f)
				{
					homeTileX = (int)base.Center.X / 16;
					homeTileY = (int)(base.position.Y + (float)height + 4f) / 16;
				}
				bool flag39 = false;
				int num385 = homeTileY;
				if (type == 441)
				{
					taxCollector = true;
				}
				directionY = -1;
				if (base.direction == 0)
				{
					base.direction = 1;
				}
				for (int num386 = 0; num386 < 16; num386++)
				{
					if (Main.player[num386].active && Main.player[num386].talkNPC == base.whoAmI)
					{
						flag39 = true;
						if (this.ai[0] != 0f)
						{
							netUpdate = true;
						}
						this.ai[0] = 0f;
						this.ai[1] = 300f;
						localAI[3] = 100f;
						if (Main.player[num386].position.X + (float)(Main.player[num386].width / 2) < base.position.X + (float)(width / 2))
						{
							base.direction = -1;
						}
						else
						{
							base.direction = 1;
						}
					}
				}
				if (this.ai[3] == 1f)
				{
					life = -1;
					HitEffect();
					active = false;
					netUpdate = true;
					if (type == 37)
					{
						Main.PlaySound(15, (int)base.position.X, (int)base.position.Y, 0);
					}
					return;
				}
				if (type == 37 && Main.netMode != 1)
				{
					homeless = false;
					homeTileX = Main.dungeonX;
					homeTileY = Main.dungeonY;
					if (downedBoss3)
					{
						this.ai[3] = 1f;
						netUpdate = true;
					}
				}
				if (Main.netMode != 1 && homeTileY > 0)
				{
					for (; !WorldGen.SolidTile(homeTileX, num385) && num385 < Main.maxTilesY - 20; num385++)
					{
					}
				}
				if (type == 368)
				{
					homeless = true;
					if (!Main.dayTime)
					{
						homeTileX = (int)(base.Center.X / 16f);
						homeTileY = (int)(base.position.Y + (float)height + 2f) / 16;
						if (!flag39)
						{
							this.ai[0] = 1f;
							this.ai[1] = 200f;
						}
						flag37 = false;
					}
				}
				if (type == 369 && homeless && wet)
				{
					if (base.Center.X / 16f < 380f || base.Center.X / 16f > (float)(Main.maxTilesX - 380))
					{
						homeTileX = Main.spawnTileX;
						homeTileY = Main.spawnTileY;
						this.ai[0] = 1f;
						this.ai[1] = 200f;
					}
					if (base.position.X / 16f < 200f)
					{
						base.direction = 1;
					}
					else if (base.position.X / 16f > (float)(Main.maxTilesX - 200))
					{
						base.direction = -1;
					}
				}
				int num387 = (int)(base.position.X + (float)(width / 2)) / 16;
				int num388 = (int)(base.position.Y + (float)height + 1f) / 16;
				if (!WorldGen.InWorld(num387, num388) || Main.tile[num387, num388] == null)
				{
					return;
				}
				if (!homeless && Main.netMode != 1 && townNPC && (flag37 || Main.tileDungeon[Main.tile[num387, num388].type]) && (num387 != homeTileX || num388 != num385))
				{
					bool flag40 = true;
					for (int num389 = 0; num389 < 2; num389++)
					{
						Rectangle rectangle3 = new Rectangle((int)(base.position.X + (float)(width / 2) - (float)(sWidth / 2) - (float)safeRangeX), (int)(base.position.Y + (float)(height / 2) - (float)(sHeight / 2) - (float)safeRangeY), sWidth + safeRangeX * 2, sHeight + safeRangeY * 2);
						if (num389 == 1)
						{
							rectangle3 = new Rectangle(homeTileX * 16 + 8 - sWidth / 2 - safeRangeX, num385 * 16 + 8 - sHeight / 2 - safeRangeY, sWidth + safeRangeX * 2, sHeight + safeRangeY * 2);
						}
						for (int num390 = 0; num390 < 16; num390++)
						{
							if (Main.player[num390].active && new Rectangle((int)Main.player[num390].position.X, (int)Main.player[num390].position.Y, Main.player[num390].width, Main.player[num390].height).Intersects(rectangle3))
							{
								flag40 = false;
								break;
							}
							if (!flag40)
							{
								break;
							}
						}
					}
					if (flag40)
					{
						if (type == 37 || !Collision.SolidTiles(homeTileX - 1, homeTileX + 1, num385 - 3, num385 - 1))
						{
							base.velocity.X = 0f;
							base.velocity.Y = 0f;
							base.position.X = homeTileX * 16 + 8 - width / 2;
							base.position.Y = (float)(num385 * 16 - height) - 0.1f;
							netUpdate = true;
						}
						else
						{
							homeless = true;
							WorldGen.QuickFindHome(base.whoAmI);
						}
					}
				}
				bool flag41 = type == 300 || type == 447;
				float num391 = 200f;
				if (NPCID.Sets.DangerDetectRange[type] != -1)
				{
					num391 = NPCID.Sets.DangerDetectRange[type];
				}
				bool flag42 = false;
				bool flag43 = false;
				float num392 = -1f;
				float num393 = -1f;
				int num394 = 0;
				int num395 = -1;
				int num396 = -1;
				if (Main.netMode != 1 && !flag39)
				{
					for (int num397 = 0; num397 < 200; num397++)
					{
						if (Main.npc[num397].active && !Main.npc[num397].friendly && Main.npc[num397].damage > 0 && Main.npc[num397].Distance(base.Center) < num391 && (type != 453 || !NPCID.Sets.Skeletons.Contains(Main.npc[num397].netID)))
						{
							flag42 = true;
							float num398 = Main.npc[num397].Center.X - base.Center.X;
							if (num398 < 0f && (num392 == -1f || num398 > num392))
							{
								num392 = num398;
								num395 = num397;
							}
							if (num398 > 0f && (num393 == -1f || num398 < num393))
							{
								num393 = num398;
								num396 = num397;
							}
						}
					}
					if (flag42)
					{
						num394 = ((num392 == -1f) ? 1 : ((num393 != -1f) ? (num393 < 0f - num392).ToDirectionInt() : (-1)));
						float num399 = 0f;
						if (num392 != -1f)
						{
							num399 = 0f - num392;
						}
						if (num399 == 0f || (num393 < num399 && num393 > 0f))
						{
							num399 = num393;
						}
						if (this.ai[0] == 8f)
						{
							if (base.direction == -num394)
							{
								this.ai[0] = 1f;
								this.ai[1] = 300 + Main.rand.Next(300);
								this.ai[2] = 0f;
								localAI[3] = 0f;
								netUpdate = true;
							}
						}
						else if (this.ai[0] != 10f && this.ai[0] != 12f && this.ai[0] != 13f && this.ai[0] != 14f && this.ai[0] != 15f)
						{
							if (NPCID.Sets.PrettySafe[type] != -1 && (float)NPCID.Sets.PrettySafe[type] < num399)
							{
								flag42 = false;
								flag43 = true;
							}
							else if (this.ai[0] != 1f)
							{
								if (this.ai[0] == 3f || this.ai[0] == 4f || this.ai[0] == 16f || this.ai[0] == 17f)
								{
									NPC nPC = Main.npc[(int)this.ai[2]];
									if (nPC.active)
									{
										nPC.ai[0] = 1f;
										nPC.ai[1] = 120 + Main.rand.Next(120);
										nPC.ai[2] = 0f;
										nPC.localAI[3] = 0f;
										nPC.direction = -num394;
										nPC.netUpdate = true;
									}
								}
								this.ai[0] = 1f;
								this.ai[1] = 120 + Main.rand.Next(120);
								this.ai[2] = 0f;
								localAI[3] = 0f;
								base.direction = -num394;
								netUpdate = true;
							}
							else if (this.ai[0] == 1f && base.direction != -num394)
							{
								base.direction = -num394;
								netUpdate = true;
							}
						}
					}
				}
				if (this.ai[0] == 0f)
				{
					if (localAI[3] > 0f)
					{
						localAI[3] -= 1f;
					}
					if (flag37 && !flag39 && !NPCID.Sets.TownCritter[type])
					{
						if (Main.netMode != 1)
						{
							if (num387 == homeTileX && num388 == num385)
							{
								if (base.velocity.X != 0f)
								{
									netUpdate = true;
								}
								if (base.velocity.X > 0.1f)
								{
									base.velocity.X -= 0.1f;
								}
								else if (base.velocity.X < -0.1f)
								{
									base.velocity.X += 0.1f;
								}
								else
								{
									base.velocity.X = 0f;
								}
							}
							else
							{
								if (num387 > homeTileX)
								{
									base.direction = -1;
								}
								else
								{
									base.direction = 1;
								}
								this.ai[0] = 1f;
								this.ai[1] = 200 + Main.rand.Next(200);
								this.ai[2] = 0f;
								localAI[3] = 0f;
								netUpdate = true;
							}
						}
					}
					else
					{
						if (flag41)
						{
							base.velocity.X *= 0.5f;
						}
						if (base.velocity.X > 0.1f)
						{
							base.velocity.X -= 0.1f;
						}
						else if (base.velocity.X < -0.1f)
						{
							base.velocity.X += 0.1f;
						}
						else
						{
							base.velocity.X = 0f;
						}
						if (Main.netMode != 1)
						{
							if (this.ai[1] > 0f)
							{
								this.ai[1] -= 1f;
							}
							if (this.ai[1] <= 0f)
							{
								this.ai[0] = 1f;
								this.ai[1] = 200 + Main.rand.Next(300);
								this.ai[2] = 0f;
								if (NPCID.Sets.TownCritter[type])
								{
									this.ai[1] += Main.rand.Next(200, 400);
								}
								localAI[3] = 0f;
								netUpdate = true;
							}
						}
					}
					if (Main.netMode != 1 && (!flag37 || (num387 == homeTileX && num388 == num385)))
					{
						if (num387 < homeTileX - 25 || num387 > homeTileX + 25)
						{
							if (localAI[3] == 0f)
							{
								if (num387 < homeTileX - 50 && base.direction == -1)
								{
									base.direction = 1;
									netUpdate = true;
								}
								else if (num387 > homeTileX + 50 && base.direction == 1)
								{
									base.direction = -1;
									netUpdate = true;
								}
							}
						}
						else if (Main.rand.Next(80) == 0 && localAI[3] == 0f)
						{
							localAI[3] = 200f;
							base.direction *= -1;
							netUpdate = true;
						}
					}
				}
				else if (this.ai[0] == 1f)
				{
					if (Main.netMode != 1 && flag37 && num387 == homeTileX && num388 == homeTileY && !NPCID.Sets.TownCritter[type])
					{
						this.ai[0] = 0f;
						this.ai[1] = 200 + Main.rand.Next(200);
						localAI[3] = 60f;
						netUpdate = true;
					}
					else
					{
						bool flag44 = Collision.DrownCollision(base.position, width, height, 1f);
						if (!flag44)
						{
							if (Main.netMode != 1 && !homeless && !Main.tileDungeon[Main.tile[num387, num388].type] && (num387 < homeTileX - 35 || num387 > homeTileX + 35))
							{
								if (base.position.X < (float)(homeTileX * 16) && base.direction == -1)
								{
									this.ai[1] -= 5f;
								}
								else if (base.position.X > (float)(homeTileX * 16) && base.direction == 1)
								{
									this.ai[1] -= 5f;
								}
							}
							this.ai[1] -= 1f;
						}
						if (this.ai[1] <= 0f)
						{
							this.ai[0] = 0f;
							this.ai[1] = 300 + Main.rand.Next(300);
							this.ai[2] = 0f;
							if (NPCID.Sets.TownCritter[type])
							{
								this.ai[1] -= Main.rand.Next(100);
							}
							else
							{
								this.ai[1] += Main.rand.Next(900);
							}
							localAI[3] = 60f;
							netUpdate = true;
						}
						if (closeDoor && ((base.position.X + (float)(width / 2)) / 16f > (float)(doorX + 2) || (base.position.X + (float)(width / 2)) / 16f < (float)(doorX - 2)))
						{
							Tile tileSafely = Framing.GetTileSafely(doorX, doorY);
							if (tileSafely.type == 11)
							{
								if (WorldGen.CloseDoor(doorX, doorY))
								{
									closeDoor = false;
									NetMessage.SendData(19, -1, -1, "", 1, doorX, doorY, base.direction);
								}
								if ((base.position.X + (float)(width / 2)) / 16f > (float)(doorX + 4) || (base.position.X + (float)(width / 2)) / 16f < (float)(doorX - 4) || (base.position.Y + (float)(height / 2)) / 16f > (float)(doorY + 4) || (base.position.Y + (float)(height / 2)) / 16f < (float)(doorY - 4))
								{
									closeDoor = false;
								}
							}
							else if (tileSafely.type == 389)
							{
								if (WorldGen.ShiftTallGate(doorX, doorY, true))
								{
									closeDoor = false;
									NetMessage.SendData(19, -1, -1, "", 5, doorX, doorY);
								}
								if ((base.position.X + (float)(width / 2)) / 16f > (float)(doorX + 4) || (base.position.X + (float)(width / 2)) / 16f < (float)(doorX - 4) || (base.position.Y + (float)(height / 2)) / 16f > (float)(doorY + 4) || (base.position.Y + (float)(height / 2)) / 16f < (float)(doorY - 4))
								{
									closeDoor = false;
								}
							}
							else
							{
								closeDoor = false;
							}
						}
						float num400 = 1f;
						float num401 = 0.07f;
						if (type == 299 || type == 539 || type == 538)
						{
							num400 = 1.5f;
						}
						if (flag41)
						{
							num400 = 2f;
							num401 = 1f;
						}
						if (friendly && (flag42 || flag44))
						{
							num400 = 1.5f;
							float num402 = 1f - (float)life / (float)lifeMax;
							num400 += num402 * 0.9f;
							num401 = 0.1f;
						}
						if (base.velocity.X < 0f - num400 || base.velocity.X > num400)
						{
							if (base.velocity.Y == 0f)
							{
								base.velocity *= 0.8f;
							}
						}
						else if (base.velocity.X < num400 && base.direction == 1)
						{
							base.velocity.X += num401;
							if (base.velocity.X > num400)
							{
								base.velocity.X = num400;
							}
						}
						else if (base.velocity.X > 0f - num400 && base.direction == -1)
						{
							base.velocity.X -= num401;
							if (base.velocity.X > num400)
							{
								base.velocity.X = num400;
							}
						}
						bool holdsMatching = true;
						if ((float)(homeTileY * 16 - 32) > base.position.Y)
						{
							holdsMatching = false;
						}
						if ((base.direction == 1 && base.position.Y + (float)(width / 2) > (float)(homeTileX * 16)) || (base.direction == -1 && base.position.Y + (float)(width / 2) < (float)(homeTileX * 16)))
						{
							holdsMatching = true;
						}
						if (base.velocity.Y == 0f)
						{
							Collision.StepDown(ref base.position, ref base.velocity, width, height, ref stepSpeed, ref gfxOffY);
						}
						if (base.velocity.Y >= 0f)
						{
							Collision.StepUp(ref base.position, ref base.velocity, width, height, ref stepSpeed, ref gfxOffY, 1, holdsMatching, 1);
						}
						if (base.velocity.Y == 0f)
						{
							int num403 = (int)((base.position.X + (float)(width / 2) + (float)(15 * base.direction)) / 16f);
							int num404 = (int)((base.position.Y + (float)height - 16f) / 16f);
							bool flag45 = false;
							bool flag46 = true;
							if (townNPC && this.ai[1] < 30f)
							{
								flag45 = !Utils.PlotTileLine(base.Top, base.Bottom, width, DelegateMethods.SearchAvoidedByNPCs);
								if (!flag45)
								{
									Rectangle hitbox = base.Hitbox;
									hitbox.X -= 20;
									hitbox.Width += 40;
									for (int num405 = 0; num405 < 200; num405++)
									{
										if (Main.npc[num405].active && Main.npc[num405].friendly && num405 != base.whoAmI && Main.npc[num405].velocity.X == 0f && hitbox.Intersects(Main.npc[num405].Hitbox))
										{
											flag45 = true;
											break;
										}
									}
								}
							}
							if (!flag45 && flag44)
							{
								flag45 = true;
							}
							if (flag46 && (NPCID.Sets.TownCritter[type] || num387 < homeTileX - 35 || num387 > homeTileX + 35))
							{
								flag46 = false;
							}
							if (flag46)
							{
								int num406 = 0;
								for (int num407 = -1; num407 <= 4; num407++)
								{
									Tile tileSafely2 = Framing.GetTileSafely(num403 - base.direction * num406, num404 + num407);
									if (tileSafely2.lava() && tileSafely2.liquid > 0)
									{
										flag46 = true;
										break;
									}
									if (tileSafely2.nactive() && Main.tileSolid[tileSafely2.type])
									{
										flag46 = false;
									}
								}
							}
							if (!flag46 && wet)
							{
								bool flag47 = flag44;
								bool flag48 = false;
								if (!flag47)
								{
									flag48 = Collision.DrownCollision(base.position + new Vector2(width * base.direction, 0f), width, height, 1f);
								}
								if ((flag48 || Collision.DrownCollision(base.position + new Vector2(width * base.direction, height * 2 - 16 - (flag47 ? 16 : 0)), width, 16 + (flag47 ? 16 : 0), 1f)) && localAI[3] <= 0f)
								{
									flag46 = true;
									localAI[3] = 600f;
								}
							}
							if (base.position.X == localAI[3])
							{
								base.direction *= -1;
								netUpdate = true;
								localAI[3] = 600f;
							}
							if (flag44)
							{
								if (localAI[3] > 0f)
								{
									localAI[3] -= 1f;
								}
							}
							else
							{
								localAI[3] = -1f;
							}
							Tile tileSafely3 = Framing.GetTileSafely(num403, num404);
							Tile tileSafely4 = Framing.GetTileSafely(num403, num404 - 1);
							Tile tileSafely5 = Framing.GetTileSafely(num403, num404 - 2);
							if (townNPC && tileSafely5.nactive() && (tileSafely5.type == 10 || tileSafely5.type == 388) && (Main.rand.Next(10) == 0 || flag37))
							{
								if (Main.netMode != 1)
								{
									if (WorldGen.OpenDoor(num403, num404 - 2, base.direction))
									{
										closeDoor = true;
										doorX = num403;
										doorY = num404 - 2;
										NetMessage.SendData(19, -1, -1, "", 0, num403, num404 - 2, base.direction);
										netUpdate = true;
										this.ai[1] += 80f;
									}
									else if (WorldGen.OpenDoor(num403, num404 - 2, -base.direction))
									{
										closeDoor = true;
										doorX = num403;
										doorY = num404 - 2;
										NetMessage.SendData(19, -1, -1, "", 0, num403, num404 - 2, -base.direction);
										netUpdate = true;
										this.ai[1] += 80f;
									}
									else if (WorldGen.ShiftTallGate(num403, num404 - 2, false))
									{
										closeDoor = true;
										doorX = num403;
										doorY = num404 - 2;
										NetMessage.SendData(19, -1, -1, "", 4, num403, num404 - 2);
										netUpdate = true;
										this.ai[1] += 80f;
									}
									else
									{
										base.direction *= -1;
										netUpdate = true;
									}
								}
							}
							else
							{
								if ((base.velocity.X < 0f && spriteDirection == -1) || (base.velocity.X > 0f && spriteDirection == 1))
								{
									if (tileSafely5.nactive() && Main.tileSolid[tileSafely5.type] && !Main.tileSolidTop[tileSafely5.type])
									{
										if (!Collision.SolidTilesVersatile(num403 - base.direction * 2, num403 - base.direction, num404 - 5, num404 - 1) && !Collision.SolidTiles(num403, num403, num404 - 5, num404 - 3))
										{
											base.velocity.Y = -6f;
											netUpdate = true;
										}
										else if (flag41)
										{
											if (WorldGen.SolidTile((int)(base.Center.X / 16f) + base.direction, (int)(base.Center.Y / 16f)))
											{
												base.direction *= -1;
												base.velocity.X *= 0f;
												netUpdate = true;
											}
										}
										else if (flag42)
										{
											flag45 = false;
											base.velocity.X = 0f;
											base.direction *= -1;
											netUpdate = true;
											this.ai[0] = 8f;
											this.ai[1] = 240f;
										}
										else
										{
											base.direction *= -1;
											netUpdate = true;
										}
									}
									else if (tileSafely4.nactive() && Main.tileSolid[tileSafely4.type] && !Main.tileSolidTop[tileSafely4.type])
									{
										if (!Collision.SolidTilesVersatile(num403 - base.direction * 2, num403 - base.direction, num404 - 4, num404 - 1) && !Collision.SolidTiles(num403, num403, num404 - 4, num404 - 2))
										{
											base.velocity.Y = -5f;
											netUpdate = true;
										}
										else if (flag42)
										{
											flag45 = false;
											base.velocity.X = 0f;
											base.direction *= -1;
											netUpdate = true;
											this.ai[0] = 8f;
											this.ai[1] = 240f;
										}
										else
										{
											base.direction *= -1;
											netUpdate = true;
										}
									}
									else if (base.position.Y + (float)height - (float)(num404 * 16) > 20f && tileSafely3.nactive() && Main.tileSolid[tileSafely3.type] && !tileSafely3.topSlope())
									{
										if (!Collision.SolidTilesVersatile(num403 - base.direction * 2, num403, num404 - 3, num404 - 1))
										{
											base.velocity.Y = -4.4f;
											netUpdate = true;
										}
										else if (flag42)
										{
											flag45 = false;
											base.velocity.X = 0f;
											base.direction *= -1;
											netUpdate = true;
											this.ai[0] = 8f;
											this.ai[1] = 240f;
										}
										else
										{
											base.direction *= -1;
											netUpdate = true;
										}
									}
									else if (flag46)
									{
										base.direction *= -1;
										base.velocity.X *= -1f;
										netUpdate = true;
										if (flag42)
										{
											flag45 = false;
											base.velocity.X = 0f;
											this.ai[0] = 8f;
											this.ai[1] = 240f;
										}
									}
									if (flag45)
									{
										this.ai[1] = 90f;
										netUpdate = true;
									}
									if (base.velocity.Y < 0f)
									{
										localAI[3] = base.position.X;
									}
								}
								if (base.velocity.Y < 0f && wet)
								{
									base.velocity.Y *= 1.2f;
								}
								if (base.velocity.Y < 0f && NPCID.Sets.TownCritter[type] && !flag41)
								{
									base.velocity.Y *= 1.2f;
								}
							}
						}
					}
				}
				else if (this.ai[0] == 2f || this.ai[0] == 11f)
				{
					if (Main.netMode != 1)
					{
						localAI[3] -= 1f;
						if (Main.rand.Next(60) == 0 && localAI[3] == 0f)
						{
							localAI[3] = 60f;
							base.direction *= -1;
							netUpdate = true;
						}
					}
					this.ai[1] -= 1f;
					base.velocity.X *= 0.8f;
					if (this.ai[1] <= 0f)
					{
						localAI[3] = 40f;
						this.ai[0] = 0f;
						this.ai[1] = 60 + Main.rand.Next(60);
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 3f || this.ai[0] == 4f || this.ai[0] == 5f || this.ai[0] == 8f || this.ai[0] == 9f || this.ai[0] == 16f || this.ai[0] == 17f)
				{
					base.velocity.X *= 0.8f;
					this.ai[1] -= 1f;
					if (this.ai[0] == 8f && this.ai[1] < 60f && flag42)
					{
						this.ai[1] = 180f;
						netUpdate = true;
					}
					if (this.ai[0] == 5f)
					{
						Point point = base.Center.ToTileCoordinates();
						Tile tile = Main.tile[point.X, point.Y];
						if (tile.type != 15)
						{
							this.ai[1] = 0f;
						}
					}
					if (this.ai[1] <= 0f)
					{
						this.ai[0] = 0f;
						this.ai[1] = 60 + Main.rand.Next(60);
						this.ai[2] = 0f;
						localAI[3] = 30 + Main.rand.Next(60);
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 6f || this.ai[0] == 7f)
				{
					base.velocity.X *= 0.8f;
					this.ai[1] -= 1f;
					int num408 = (int)this.ai[2];
					if (num408 < 0 || num408 > 16 || !Main.player[num408].active || Main.player[num408].dead || Main.player[num408].Distance(base.Center) > 200f || !Collision.CanHitLine(base.Top, 0, 0, Main.player[num408].Top, 0, 0))
					{
						this.ai[1] = 0f;
					}
					if (this.ai[1] > 0f)
					{
						int num409 = (base.Center.X < Main.player[num408].Center.X) ? 1 : (-1);
						if (num409 != base.direction)
						{
							netUpdate = true;
						}
						base.direction = num409;
					}
					else
					{
						this.ai[0] = 0f;
						this.ai[1] = 60 + Main.rand.Next(60);
						this.ai[2] = 0f;
						localAI[3] = 30 + Main.rand.Next(60);
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 10f)
				{
					int num410 = 0;
					int num411 = 0;
					float knockBack = 0f;
					float num412 = 0f;
					int num413 = 0;
					int num414 = 0;
					int maxValue = 0;
					float num415 = 0f;
					float num416 = NPCID.Sets.DangerDetectRange[type];
					float num417 = 0f;
					if ((float)NPCID.Sets.AttackTime[type] == this.ai[1])
					{
						frameCounter = 0.0;
						localAI[3] = 0f;
					}
					if (type == 38)
					{
						num410 = 30;
						num412 = 6f;
						num411 = 20;
						num413 = 10;
						num414 = 180;
						maxValue = 120;
						num415 = 16f;
						knockBack = 7f;
					}
					else if (type == 208)
					{
						num410 = 588;
						num412 = 6f;
						num411 = 30;
						num413 = 10;
						num414 = 60;
						maxValue = 120;
						num415 = 16f;
						knockBack = 6f;
					}
					else if (type == 17)
					{
						num410 = 48;
						num412 = 9f;
						num411 = 12;
						num413 = 10;
						num414 = 60;
						maxValue = 60;
						num415 = 16f;
						knockBack = 1.5f;
					}
					else if (type == 369)
					{
						num410 = 520;
						num412 = 12f;
						num411 = 10;
						num413 = 10;
						num414 = 0;
						maxValue = 1;
						num415 = 16f;
						knockBack = 3f;
					}
					else if (type == 453)
					{
						num410 = 21;
						num412 = 14f;
						num411 = 14;
						num413 = 10;
						num414 = 0;
						maxValue = 1;
						num415 = 16f;
						knockBack = 3f;
					}
					else if (type == 107)
					{
						num410 = 24;
						num412 = 5f;
						num411 = 15;
						num413 = 10;
						num414 = 60;
						maxValue = 60;
						num415 = 16f;
						knockBack = 1f;
					}
					else if (type == 124)
					{
						num410 = 582;
						num412 = 10f;
						num411 = 11;
						num413 = 1;
						num414 = 30;
						maxValue = 30;
						knockBack = 3.5f;
					}
					else if (type == 18)
					{
						num410 = 583;
						num412 = 8f;
						num411 = 8;
						num413 = 1;
						num414 = 15;
						maxValue = 10;
						knockBack = 2f;
						num415 = 10f;
					}
					else if (type == 142)
					{
						num410 = 589;
						num412 = 7f;
						num411 = 22;
						num413 = 1;
						num414 = 10;
						maxValue = 1;
						knockBack = 2f;
						num415 = 10f;
					}
					if (Main.expertMode)
					{
						num411 = (int)((float)num411 * Main.expertNPCDamage);
					}
					num411 = (int)((float)num411 * num383);
					base.velocity.X *= 0.8f;
					this.ai[1] -= 1f;
					localAI[3] += 1f;
					if (localAI[3] == (float)num413 && Main.netMode != 1)
					{
						Vector2 vec2 = -Vector2.UnitY;
						if (num394 == 1 && spriteDirection == 1 && num396 != -1)
						{
							vec2 = DirectionTo(Main.npc[num396].Center + new Vector2(0f, (0f - num415) * MathHelper.Clamp(Distance(Main.npc[num396].Center) / num416, 0f, 1f)));
						}
						if (num394 == -1 && spriteDirection == -1 && num395 != -1)
						{
							vec2 = DirectionTo(Main.npc[num395].Center + new Vector2(0f, (0f - num415) * MathHelper.Clamp(Distance(Main.npc[num395].Center) / num416, 0f, 1f)));
						}
						if (vec2.HasNaNs() || Math.Sign(vec2.X) != spriteDirection)
						{
							vec2 = new Vector2(spriteDirection, -1f);
						}
						vec2 *= num412;
						vec2 += Utils.RandomVector2(Main.rand, 0f - num417, num417);
						int num418 = 1000;
						num418 = ((type == 124) ? Projectile.NewProjectile(base.Center.X + (float)(spriteDirection * 16), base.Center.Y - 2f, vec2.X, vec2.Y, num410, num411, knockBack, Main.myPlayer, 0f, base.whoAmI) : ((type != 142) ? Projectile.NewProjectile(base.Center.X + (float)(spriteDirection * 16), base.Center.Y - 2f, vec2.X, vec2.Y, num410, num411, knockBack, Main.myPlayer) : Projectile.NewProjectile(base.Center.X + (float)(spriteDirection * 16), base.Center.Y - 2f, vec2.X, vec2.Y, num410, num411, knockBack, Main.myPlayer, 0f, Main.rand.Next(5))));
						Main.projectile[num418].npcProj = true;
						Main.projectile[num418].noDropItem = true;
					}
					if (this.ai[1] <= 0f && 0 == 0)
					{
						this.ai[0] = ((localAI[2] == 8f && flag42) ? 8 : 0);
						this.ai[1] = num414 + Main.rand.Next(maxValue);
						this.ai[2] = 0f;
						localAI[1] = (localAI[3] = num414 / 2 + Main.rand.Next(maxValue));
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 12f)
				{
					int num419 = 0;
					int num420 = 0;
					float num421 = 0f;
					int num422 = 0;
					int num423 = 0;
					int maxValue2 = 0;
					float knockBack2 = 0f;
					int num424 = 0;
					bool flag49 = false;
					float num425 = 0f;
					if ((float)NPCID.Sets.AttackTime[type] == this.ai[1])
					{
						frameCounter = 0.0;
						localAI[3] = 0f;
					}
					int num426 = -1;
					if (num394 == 1 && spriteDirection == 1)
					{
						num426 = num396;
					}
					if (num394 == -1 && spriteDirection == -1)
					{
						num426 = num395;
					}
					if (type == 19)
					{
						num419 = 14;
						num421 = 13f;
						num420 = 24;
						num423 = 14;
						maxValue2 = 4;
						knockBack2 = 3f;
						num422 = 1;
						num425 = 0.5f;
						if ((float)NPCID.Sets.AttackTime[type] == this.ai[1])
						{
							frameCounter = 0.0;
							localAI[3] = 0f;
						}
						if (Main.hardMode)
						{
							num420 = 15;
							if (localAI[3] > (float)num422)
							{
								num422 = 10;
								flag49 = true;
							}
							if (localAI[3] > (float)num422)
							{
								num422 = 20;
								flag49 = true;
							}
							if (localAI[3] > (float)num422)
							{
								num422 = 30;
								flag49 = true;
							}
						}
					}
					else if (type == 227)
					{
						num419 = 587;
						num421 = 10f;
						num420 = 8;
						num423 = 10;
						maxValue2 = 1;
						knockBack2 = 1.75f;
						num422 = 1;
						num425 = 0.5f;
						if (localAI[3] > (float)num422)
						{
							num422 = 12;
							flag49 = true;
						}
						if (localAI[3] > (float)num422)
						{
							num422 = 24;
							flag49 = true;
						}
						if (Main.hardMode)
						{
							num420 += 2;
						}
					}
					else if (type == 368)
					{
						num419 = 14;
						num421 = 13f;
						num420 = 24;
						num423 = 12;
						maxValue2 = 5;
						knockBack2 = 2f;
						num422 = 1;
						num425 = 0.2f;
						if (Main.hardMode)
						{
							num420 = 30;
							num419 = 357;
						}
					}
					else if (type == 22)
					{
						num421 = 10f;
						num420 = 8;
						num422 = 1;
						if (Main.hardMode)
						{
							num419 = 2;
							num423 = 15;
							maxValue2 = 10;
							num420 += 6;
						}
						else
						{
							num419 = 1;
							num423 = 30;
							maxValue2 = 20;
						}
						knockBack2 = 2.75f;
						num424 = 4;
						num425 = 0.7f;
					}
					else if (type == 228)
					{
						num419 = 267;
						num421 = 14f;
						num420 = 20;
						num422 = 1;
						num423 = 10;
						maxValue2 = 1;
						knockBack2 = 3f;
						num424 = 6;
						num425 = 0.4f;
					}
					else if (type == 178)
					{
						num419 = 242;
						num421 = 13f;
						num420 = 15;
						num423 = 10;
						maxValue2 = 1;
						knockBack2 = 2f;
						num422 = 1;
						if (localAI[3] > (float)num422)
						{
							num422 = 8;
							flag49 = true;
						}
						if (localAI[3] > (float)num422)
						{
							num422 = 16;
							flag49 = true;
						}
						num425 = 0.3f;
					}
					else if (type == 229)
					{
						num419 = 14;
						num421 = 14f;
						num420 = 24;
						num423 = 10;
						maxValue2 = 1;
						knockBack2 = 2f;
						num422 = 1;
						num425 = 0.7f;
						if (localAI[3] > (float)num422)
						{
							num422 = 16;
							flag49 = true;
						}
						if (localAI[3] > (float)num422)
						{
							num422 = 24;
							flag49 = true;
						}
						if (localAI[3] > (float)num422)
						{
							num422 = 32;
							flag49 = true;
						}
						if (localAI[3] > (float)num422)
						{
							num422 = 40;
							flag49 = true;
						}
						if (localAI[3] > (float)num422)
						{
							num422 = 48;
							flag49 = true;
						}
						if (localAI[3] == 0f && num426 != -1 && Distance(Main.npc[num426].Center) < (float)NPCID.Sets.PrettySafe[type])
						{
							num425 = 0.1f;
							num419 = 162;
							num420 = 50;
							knockBack2 = 10f;
							num421 = 24f;
						}
					}
					else if (type == 209)
					{
						int num427 = Utils.SelectRandom<int>(Main.rand, 134, 133, 135);
						num419 = num427;
						num422 = 1;
						switch (num419)
						{
						case 135:
							num421 = 12f;
							num420 = 30;
							num423 = 30;
							maxValue2 = 10;
							knockBack2 = 7f;
							num425 = 0.2f;
							break;
						case 133:
							num421 = 10f;
							num420 = 25;
							num423 = 10;
							maxValue2 = 1;
							knockBack2 = 6f;
							num425 = 0.2f;
							break;
						case 134:
							num421 = 13f;
							num420 = 20;
							num423 = 20;
							maxValue2 = 10;
							knockBack2 = 4f;
							num425 = 0.1f;
							break;
						}
					}
					if (Main.expertMode)
					{
						num420 = (int)((float)num420 * Main.expertNPCDamage);
					}
					num420 = (int)((float)num420 * num383);
					base.velocity.X *= 0.8f;
					this.ai[1] -= 1f;
					localAI[3] += 1f;
					if (localAI[3] == (float)num422 && Main.netMode != 1)
					{
						Vector2 vec3 = Vector2.Zero;
						if (num426 != -1)
						{
							vec3 = DirectionTo(Main.npc[num426].Center + new Vector2(0f, -num424));
						}
						if (vec3.HasNaNs() || Math.Sign(vec3.X) != spriteDirection)
						{
							vec3 = new Vector2(spriteDirection, 0f);
						}
						vec3 *= num421;
						vec3 += Utils.RandomVector2(Main.rand, 0f - num425, num425);
						int num428 = 1000;
						num428 = ((type != 227) ? Projectile.NewProjectile(base.Center.X + (float)(spriteDirection * 16), base.Center.Y - 2f, vec3.X, vec3.Y, num419, num420, knockBack2, Main.myPlayer) : Projectile.NewProjectile(base.Center.X + (float)(spriteDirection * 16), base.Center.Y - 2f, vec3.X, vec3.Y, num419, num420, knockBack2, Main.myPlayer, 0f, (float)Main.rand.Next(12) / 6f));
						Main.projectile[num428].npcProj = true;
						Main.projectile[num428].noDropItem = true;
					}
					if (localAI[3] == (float)num422 && flag49 && num426 != -1)
					{
						Vector2 vector44 = DirectionTo(Main.npc[num426].Center);
						if (vector44.Y <= 0.5f && vector44.Y >= -0.5f)
						{
							this.ai[2] = vector44.Y;
						}
					}
					if (this.ai[1] <= 0f && 0 == 0)
					{
						this.ai[0] = ((localAI[2] == 8f && flag42) ? 8 : 0);
						this.ai[1] = num423 + Main.rand.Next(maxValue2);
						this.ai[2] = 0f;
						localAI[1] = (localAI[3] = num423 / 2 + Main.rand.Next(maxValue2));
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 13f)
				{
					base.velocity.X *= 0.8f;
					if ((float)NPCID.Sets.AttackTime[type] == this.ai[1])
					{
						frameCounter = 0.0;
					}
					this.ai[1] -= 1f;
					localAI[3] += 1f;
					if (localAI[3] == 1f && Main.netMode != 1)
					{
						Vector2 vec4 = DirectionTo(Main.npc[(int)this.ai[2]].Center + new Vector2(0f, -20f));
						if (vec4.HasNaNs() || Math.Sign(vec4.X) == -spriteDirection)
						{
							vec4 = new Vector2(spriteDirection, -1f);
						}
						vec4 *= 8f;
						int num429 = Projectile.NewProjectile(base.Center.X + (float)(spriteDirection * 16), base.Center.Y - 2f, vec4.X, vec4.Y, 584, 0, 0f, Main.myPlayer, this.ai[2]);
						Main.projectile[num429].npcProj = true;
						Main.projectile[num429].noDropItem = true;
					}
					if (this.ai[1] <= 0f)
					{
						this.ai[0] = 0f;
						this.ai[1] = 10 + Main.rand.Next(10);
						this.ai[2] = 0f;
						localAI[3] = 5 + Main.rand.Next(10);
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 14f)
				{
					int num430 = 0;
					int num431 = 0;
					float num432 = 0f;
					int num433 = 0;
					int num434 = 0;
					int maxValue3 = 0;
					float knockBack3 = 0f;
					float num435 = 0f;
					float num436 = NPCID.Sets.DangerDetectRange[type];
					float num437 = 1f;
					float num438 = 0f;
					if ((float)NPCID.Sets.AttackTime[type] == this.ai[1])
					{
						frameCounter = 0.0;
						localAI[3] = 0f;
					}
					int num439 = -1;
					if (num394 == 1 && spriteDirection == 1)
					{
						num439 = num396;
					}
					if (num394 == -1 && spriteDirection == -1)
					{
						num439 = num395;
					}
					if (type == 54)
					{
						num430 = 585;
						num432 = 10f;
						num431 = 16;
						num433 = 30;
						num434 = 20;
						maxValue3 = 15;
						knockBack3 = 2f;
						num438 = 1f;
					}
					else if (type == 108)
					{
						num430 = 15;
						num432 = 6f;
						num431 = 18;
						num433 = 15;
						num434 = 15;
						maxValue3 = 5;
						knockBack3 = 3f;
						num435 = 20f;
					}
					else if (type == 160)
					{
						num430 = 590;
						num431 = 40;
						num433 = 15;
						num434 = 10;
						maxValue3 = 1;
						knockBack3 = 3f;
						for (; localAI[3] > (float)num433; num433 += 15)
						{
						}
					}
					else if (type == 20)
					{
						num430 = 586;
						num433 = 24;
						num434 = 10;
						maxValue3 = 1;
						knockBack3 = 3f;
					}
					if (Main.expertMode)
					{
						num431 = (int)((float)num431 * Main.expertNPCDamage);
					}
					num431 = (int)((float)num431 * num383);
					base.velocity.X *= 0.8f;
					this.ai[1] -= 1f;
					localAI[3] += 1f;
					if (localAI[3] == (float)num433 && Main.netMode != 1)
					{
						Vector2 vec5 = Vector2.Zero;
						if (num439 != -1)
						{
							vec5 = DirectionTo(Main.npc[num439].Center + new Vector2(0f, (0f - num435) * MathHelper.Clamp(Distance(Main.npc[num439].Center) / num436, 0f, 1f)));
						}
						if (vec5.HasNaNs() || Math.Sign(vec5.X) != spriteDirection)
						{
							vec5 = new Vector2(spriteDirection, 0f);
						}
						vec5 *= num432;
						vec5 += Utils.RandomVector2(Main.rand, 0f - num438, num438);
						if (type == 108)
						{
							int num440 = Utils.SelectRandom<int>(Main.rand, 1, 1, 1, 1, 2, 2, 3);
							for (int num441 = 0; num441 < num440; num441++)
							{
								Vector2 vector45 = Utils.RandomVector2(Main.rand, -3.4f, 3.4f);
								int num442 = Projectile.NewProjectile(base.Center.X + (float)(spriteDirection * 16), base.Center.Y - 2f, vec5.X + vector45.X, vec5.Y + vector45.Y, num430, num431, knockBack3, Main.myPlayer);
								Main.projectile[num442].npcProj = true;
								Main.projectile[num442].noDropItem = true;
							}
						}
						else if (type == 160)
						{
							if (num439 != -1)
							{
								Vector2 vector46 = Main.npc[num439].position - Main.npc[num439].Size * 2f + Main.npc[num439].Size * Utils.RandomVector2(Main.rand, 0f, 1f) * 5f;
								int num443 = 10;
								while (num443 > 0 && WorldGen.SolidTile(Framing.GetTileSafely((int)vector46.X / 16, (int)vector46.Y / 16)))
								{
									num443--;
									vector46 = Main.npc[num439].position - Main.npc[num439].Size * 2f + Main.npc[num439].Size * Utils.RandomVector2(Main.rand, 0f, 1f) * 5f;
								}
								int num444 = Projectile.NewProjectile(vector46.X, vector46.Y, 0f, 0f, num430, num431, knockBack3, Main.myPlayer);
								Main.projectile[num444].npcProj = true;
								Main.projectile[num444].noDropItem = true;
							}
						}
						else if (type == 20)
						{
							int num445 = Projectile.NewProjectile(base.Center.X + (float)(spriteDirection * 16), base.Center.Y - 2f, vec5.X, vec5.Y, num430, num431, knockBack3, Main.myPlayer, 0f, base.whoAmI);
							Main.projectile[num445].npcProj = true;
							Main.projectile[num445].noDropItem = true;
						}
						else
						{
							int num446 = Projectile.NewProjectile(base.Center.X + (float)(spriteDirection * 16), base.Center.Y - 2f, vec5.X, vec5.Y, num430, num431, knockBack3, Main.myPlayer);
							Main.projectile[num446].npcProj = true;
							Main.projectile[num446].noDropItem = true;
						}
					}
					if (num437 > 0f)
					{
						Vector3 vector47 = NPCID.Sets.MagicAuraColor[type].ToVector3() * num437;
						Lighting.AddLight(base.Center, vector47.X, vector47.Y, vector47.Z);
					}
					if (this.ai[1] <= 0f && 0 == 0)
					{
						this.ai[0] = ((localAI[2] == 8f && flag42) ? 8 : 0);
						this.ai[1] = num434 + Main.rand.Next(maxValue3);
						this.ai[2] = 0f;
						localAI[1] = (localAI[3] = num434 / 2 + Main.rand.Next(maxValue3));
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 15f)
				{
					int num447 = 0;
					int maxValue4 = 0;
					if ((float)NPCID.Sets.AttackTime[type] == this.ai[1])
					{
						frameCounter = 0.0;
						localAI[3] = 0f;
					}
					int num448 = 0;
					float num449 = 0f;
					int num450 = 0;
					int num451 = 0;
					if (num394 == 1)
					{
						int spriteDirection2 = spriteDirection;
						int num2047 = 1;
					}
					if (num394 == -1)
					{
						int spriteDirection3 = spriteDirection;
						int num2048 = -1;
					}
					if (type == 207)
					{
						num448 = 11;
						num450 = (num451 = 32);
						num447 = 12;
						maxValue4 = 6;
						num449 = 4.25f;
					}
					else if (type == 441)
					{
						num448 = 9;
						num450 = (num451 = 28);
						num447 = 9;
						maxValue4 = 3;
						num449 = 3.5f;
					}
					else if (type == 353)
					{
						num448 = 10;
						num450 = (num451 = 32);
						num447 = 15;
						maxValue4 = 8;
						num449 = 5f;
					}
					if (Main.expertMode)
					{
						num448 = (int)((float)num448 * Main.expertNPCDamage);
					}
					num448 = (int)((float)num448 * num383);
					base.velocity.X *= 0.8f;
					this.ai[1] -= 1f;
					if (Main.netMode != 1)
					{
						Tuple<Vector2, float> swingStats = GetSwingStats(NPCID.Sets.AttackTime[type] * 2, (int)this.ai[1], spriteDirection, num450, num451);
						Rectangle itemRectangle = new Rectangle((int)swingStats.Item1.X, (int)swingStats.Item1.Y, num450, num451);
						if (spriteDirection == -1)
						{
							itemRectangle.X -= num450;
						}
						itemRectangle.Y -= num451;
						TweakSwingStats(NPCID.Sets.AttackTime[type] * 2, (int)this.ai[1], spriteDirection, ref itemRectangle);
						int myPlayer = Main.myPlayer;
						for (int num452 = 0; num452 < 200; num452++)
						{
							NPC nPC2 = Main.npc[num452];
							if (nPC2.active && nPC2.immune[myPlayer] == 0 && !nPC2.dontTakeDamage && !nPC2.friendly && nPC2.damage > 0 && itemRectangle.Intersects(nPC2.Hitbox) && (nPC2.noTileCollide || Collision.CanHit(base.position, width, height, nPC2.position, nPC2.width, nPC2.height)))
							{
								nPC2.StrikeNPCNoInteraction(num448, num449, spriteDirection);
								if (Main.netMode != 0)
								{
									NetMessage.SendData(28, -1, -1, "", num452, num448, num449, spriteDirection);
								}
								nPC2.netUpdate = true;
								nPC2.immune[myPlayer] = (int)this.ai[1] + 2;
							}
						}
					}
					if (this.ai[1] <= 0f)
					{
						bool flag50 = false;
						if (flag42)
						{
							int num453 = -num394;
							if (!Collision.CanHit(base.Center, 0, 0, base.Center + Vector2.UnitX * num453 * 32f, 0, 0) || localAI[2] == 8f)
							{
								flag50 = true;
							}
							if (flag50)
							{
								int num454 = NPCID.Sets.AttackTime[type];
								int num455 = (num394 == 1) ? num396 : num395;
								int num456 = (num394 == 1) ? num395 : num396;
								if (num455 != -1 && !Collision.CanHit(base.Center, 0, 0, Main.npc[num455].Center, 0, 0))
								{
									num455 = ((num456 == -1 || !Collision.CanHit(base.Center, 0, 0, Main.npc[num456].Center, 0, 0)) ? (-1) : num456);
								}
								if (num455 != -1)
								{
									this.ai[0] = 15f;
									this.ai[1] = num454;
									this.ai[2] = 0f;
									localAI[3] = 0f;
									base.direction = ((base.position.X < Main.npc[num455].position.X) ? 1 : (-1));
									netUpdate = true;
								}
								else
								{
									flag50 = false;
								}
							}
						}
						if (!flag50)
						{
							this.ai[0] = ((localAI[2] == 8f && flag42) ? 8 : 0);
							this.ai[1] = num447 + Main.rand.Next(maxValue4);
							this.ai[2] = 0f;
							localAI[1] = (localAI[3] = num447 / 2 + Main.rand.Next(maxValue4));
							netUpdate = true;
						}
					}
				}
				if (Main.netMode == 1 || (!townNPC && type != 453) || flag39)
				{
					return;
				}
				bool flag51 = this.ai[0] < 2f && !flag42;
				bool flag52 = (this.ai[0] < 2f || this.ai[0] == 8f) && (flag42 || flag43);
				if (localAI[1] > 0f)
				{
					localAI[1] -= 1f;
				}
				if (localAI[1] > 0f)
				{
					flag52 = false;
				}
				if (flag52 && type == 124 && localAI[0] == 1f)
				{
					flag52 = false;
				}
				if (flag52 && type == 20)
				{
					flag52 = false;
					for (int num457 = 0; num457 < 200; num457++)
					{
						NPC nPC3 = Main.npc[num457];
						if (nPC3.active && nPC3.townNPC && !(Distance(nPC3.Center) > 1200f) && nPC3.HasBuff(165) == -1)
						{
							flag52 = true;
							break;
						}
					}
				}
				if (flag51 && this.ai[0] == 0f && base.velocity.Y == 0f && Main.rand.Next(300) == 0)
				{
					int num458 = 420;
					num458 = ((Main.rand.Next(2) != 0) ? (num458 * Main.rand.Next(1, 3)) : (num458 * Main.rand.Next(1, 4)));
					int num459 = 100;
					int num460 = 20;
					for (int num461 = 0; num461 < 200; num461++)
					{
						NPC nPC4 = Main.npc[num461];
						bool flag53 = (nPC4.ai[0] == 1f && nPC4.closeDoor) || (nPC4.ai[0] == 1f && nPC4.ai[1] > 200f) || nPC4.ai[0] > 1f;
						if (nPC4 != this && nPC4.active && nPC4.CanTalk && !flag53 && nPC4.Distance(base.Center) < (float)num459 && nPC4.Distance(base.Center) > (float)num460 && Collision.CanHit(base.Center, 0, 0, nPC4.Center, 0, 0))
						{
							int num462 = (base.position.X < nPC4.position.X).ToDirectionInt();
							this.ai[0] = 3f;
							this.ai[1] = num458;
							this.ai[2] = num461;
							base.direction = num462;
							netUpdate = true;
							nPC4.ai[0] = 4f;
							nPC4.ai[1] = num458;
							nPC4.ai[2] = base.whoAmI;
							nPC4.direction = -num462;
							nPC4.netUpdate = true;
							break;
						}
					}
				}
				else if (flag51 && this.ai[0] == 0f && base.velocity.Y == 0f && Main.rand.Next(1800) == 0)
				{
					int num463 = 420;
					num463 = ((Main.rand.Next(2) != 0) ? (num463 * Main.rand.Next(1, 3)) : (num463 * Main.rand.Next(1, 4)));
					int num464 = 100;
					int num465 = 20;
					for (int num466 = 0; num466 < 200; num466++)
					{
						NPC nPC5 = Main.npc[num466];
						bool flag54 = (nPC5.ai[0] == 1f && nPC5.closeDoor) || (nPC5.ai[0] == 1f && nPC5.ai[1] > 200f) || nPC5.ai[0] > 1f;
						if (nPC5 != this && nPC5.active && nPC5.CanTalk && !flag54 && nPC5.Distance(base.Center) < (float)num464 && nPC5.Distance(base.Center) > (float)num465 && Collision.CanHit(base.Center, 0, 0, nPC5.Center, 0, 0))
						{
							int num467 = (base.position.X < nPC5.position.X).ToDirectionInt();
							this.ai[0] = 16f;
							this.ai[1] = num463;
							this.ai[2] = num466;
							localAI[2] = Main.rand.Next(4);
							localAI[3] = Main.rand.Next(3 - (int)localAI[2]);
							base.direction = num467;
							netUpdate = true;
							nPC5.ai[0] = 17f;
							nPC5.ai[1] = num463;
							nPC5.ai[2] = base.whoAmI;
							nPC5.localAI[2] = 0f;
							nPC5.localAI[3] = 0f;
							nPC5.direction = -num467;
							nPC5.netUpdate = true;
							break;
						}
					}
				}
				else if (flag51 && this.ai[0] == 0f && base.velocity.Y == 0f && Main.rand.Next(1200) == 0 && type == 208)
				{
					int num468 = 300;
					int num469 = 150;
					for (int num470 = 0; num470 < 16; num470++)
					{
						Player player2 = Main.player[num470];
						if (player2.active && !player2.dead && player2.Distance(base.Center) < (float)num469 && Collision.CanHitLine(base.Top, 0, 0, player2.Top, 0, 0))
						{
							int direction2 = (base.position.X < player2.position.X).ToDirectionInt();
							this.ai[0] = 6f;
							this.ai[1] = num468;
							this.ai[2] = num470;
							base.direction = direction2;
							netUpdate = true;
							break;
						}
					}
				}
				else if (flag51 && this.ai[0] == 0f && base.velocity.Y == 0f && Main.rand.Next(1800) == 0)
				{
					this.ai[0] = 2f;
					this.ai[1] = 45 * Main.rand.Next(1, 2);
					netUpdate = true;
				}
				else if (flag51 && this.ai[0] == 0f && base.velocity.Y == 0f && Main.rand.Next(600) == 0 && type == 229 && !flag43)
				{
					this.ai[0] = 11f;
					this.ai[1] = 30 * Main.rand.Next(1, 4);
					netUpdate = true;
				}
				else if (flag51 && this.ai[0] == 0f && base.velocity.Y == 0f && Main.rand.Next(1200) == 0)
				{
					int num471 = 220;
					int num472 = 150;
					for (int num473 = 0; num473 < 16; num473++)
					{
						Player player3 = Main.player[num473];
						if (player3.active && !player3.dead && player3.Distance(base.Center) < (float)num472 && Collision.CanHitLine(base.Top, 0, 0, player3.Top, 0, 0))
						{
							int direction3 = (base.position.X < player3.position.X).ToDirectionInt();
							this.ai[0] = 7f;
							this.ai[1] = num471;
							this.ai[2] = num473;
							base.direction = direction3;
							netUpdate = true;
							break;
						}
					}
				}
				else if (flag51 && this.ai[0] == 1f && base.velocity.Y == 0f && Main.rand.Next(300) == 0)
				{
					Point b = base.Center.ToTileCoordinates();
					bool flag55 = WorldGen.InWorld(b.X, b.Y, 1);
					if (flag55)
					{
						for (int num474 = 0; num474 < 200; num474++)
						{
							if (Main.npc[num474].active && Main.npc[num474].aiStyle == 7 && Main.npc[num474].townNPC && Main.npc[num474].ai[0] == 5f)
							{
								Point a = Main.npc[num474].Center.ToTileCoordinates();
								if (a == b)
								{
									flag55 = false;
									break;
								}
							}
						}
					}
					if (flag55)
					{
						Tile tile2 = Main.tile[b.X, b.Y];
						flag55 = (tile2.type == 15);
						if (flag55 && tile2.frameY == 1080)
						{
							flag55 = false;
						}
						if (flag55)
						{
							this.ai[0] = 5f;
							this.ai[1] = 900 + Main.rand.Next(10800);
							base.direction = ((tile2.frameX != 0) ? 1 : (-1));
							base.Bottom = new Vector2(b.X * 16 + 8 + 2 * base.direction, b.Y * 16 + 32);
							base.velocity = Vector2.Zero;
							localAI[3] = 0f;
							netUpdate = true;
						}
					}
				}
				else if (flag51 && this.ai[0] == 1f && base.velocity.Y == 0f && Main.rand.Next(600) == 0 && Utils.PlotTileLine(base.Top, base.Bottom, width, DelegateMethods.SearchAvoidedByNPCs))
				{
					Point point2 = (base.Center + new Vector2(base.direction * 10, 0f)).ToTileCoordinates();
					bool flag56 = WorldGen.InWorld(point2.X, point2.Y, 1);
					if (flag56)
					{
						Tile tileSafely6 = Framing.GetTileSafely(point2.X, point2.Y);
						if (!tileSafely6.nactive() || !TileID.Sets.InteractibleByNPCs[tileSafely6.type])
						{
							flag56 = false;
						}
					}
					if (flag56)
					{
						this.ai[0] = 9f;
						this.ai[1] = 40 + Main.rand.Next(90);
						base.velocity = Vector2.Zero;
						localAI[3] = 0f;
						netUpdate = true;
					}
				}
				if (this.ai[0] < 2f && base.velocity.Y == 0f && type == 18)
				{
					int num475 = -1;
					for (int num476 = 0; num476 < 200; num476++)
					{
						NPC nPC6 = Main.npc[num476];
						if (nPC6.active && nPC6.townNPC && nPC6.life != nPC6.lifeMax && (num475 == -1 || nPC6.lifeMax - nPC6.life > Main.npc[num475].lifeMax - Main.npc[num475].life) && Collision.CanHitLine(base.position, width, height, nPC6.position, nPC6.width, nPC6.height) && Distance(nPC6.Center) < 500f)
						{
							num475 = num476;
						}
					}
					if (num475 != -1)
					{
						this.ai[0] = 13f;
						this.ai[1] = 34f;
						this.ai[2] = num475;
						localAI[3] = 0f;
						base.direction = ((base.position.X < Main.npc[num475].position.X) ? 1 : (-1));
						netUpdate = true;
					}
				}
				if (flag52 && base.velocity.Y == 0f && NPCID.Sets.AttackType[type] == 0 && NPCID.Sets.AttackAverageChance[type] > 0 && Main.rand.Next(NPCID.Sets.AttackAverageChance[type] * 2) == 0)
				{
					int num477 = NPCID.Sets.AttackTime[type];
					int num478 = (num394 == 1) ? num396 : num395;
					int num479 = (num394 == 1) ? num395 : num396;
					if (num478 != -1 && !Collision.CanHit(base.Center, 0, 0, Main.npc[num478].Center, 0, 0))
					{
						num478 = ((num479 == -1 || !Collision.CanHit(base.Center, 0, 0, Main.npc[num479].Center, 0, 0)) ? (-1) : num479);
					}
					if (num478 != -1)
					{
						localAI[2] = this.ai[0];
						this.ai[0] = 10f;
						this.ai[1] = num477;
						this.ai[2] = 0f;
						localAI[3] = 0f;
						base.direction = ((base.position.X < Main.npc[num478].position.X) ? 1 : (-1));
						netUpdate = true;
					}
				}
				else if (flag52 && base.velocity.Y == 0f && NPCID.Sets.AttackType[type] == 1 && NPCID.Sets.AttackAverageChance[type] > 0 && Main.rand.Next(NPCID.Sets.AttackAverageChance[type] * 2) == 0)
				{
					int num480 = NPCID.Sets.AttackTime[type];
					int num481 = (num394 == 1) ? num396 : num395;
					int num482 = (num394 == 1) ? num395 : num396;
					if (num481 != -1 && !Collision.CanHitLine(base.Center, 0, 0, Main.npc[num481].Center, 0, 0))
					{
						num481 = ((num482 == -1 || !Collision.CanHitLine(base.Center, 0, 0, Main.npc[num482].Center, 0, 0)) ? (-1) : num482);
					}
					if (num481 != -1)
					{
						Vector2 vector48 = DirectionTo(Main.npc[num481].Center);
						if (vector48.Y <= 0.5f && vector48.Y >= -0.5f)
						{
							localAI[2] = this.ai[0];
							this.ai[0] = 12f;
							this.ai[1] = num480;
							this.ai[2] = vector48.Y;
							localAI[3] = 0f;
							base.direction = ((base.position.X < Main.npc[num481].position.X) ? 1 : (-1));
							netUpdate = true;
						}
					}
				}
				if (flag52 && base.velocity.Y == 0f && NPCID.Sets.AttackType[type] == 2 && NPCID.Sets.AttackAverageChance[type] > 0 && Main.rand.Next(NPCID.Sets.AttackAverageChance[type] * 2) == 0)
				{
					int num483 = NPCID.Sets.AttackTime[type];
					int num484 = (num394 == 1) ? num396 : num395;
					int num485 = (num394 == 1) ? num395 : num396;
					if (num484 != -1 && !Collision.CanHitLine(base.Center, 0, 0, Main.npc[num484].Center, 0, 0))
					{
						num484 = ((num485 == -1 || !Collision.CanHitLine(base.Center, 0, 0, Main.npc[num485].Center, 0, 0)) ? (-1) : num485);
					}
					if (num484 != -1)
					{
						localAI[2] = this.ai[0];
						this.ai[0] = 14f;
						this.ai[1] = num483;
						this.ai[2] = 0f;
						localAI[3] = 0f;
						base.direction = ((base.position.X < Main.npc[num484].position.X) ? 1 : (-1));
						netUpdate = true;
					}
					else if (type == 20)
					{
						localAI[2] = this.ai[0];
						this.ai[0] = 14f;
						this.ai[1] = num483;
						this.ai[2] = 0f;
						localAI[3] = 0f;
						netUpdate = true;
					}
				}
				if (flag52 && base.velocity.Y == 0f && NPCID.Sets.AttackType[type] == 3 && NPCID.Sets.AttackAverageChance[type] > 0 && Main.rand.Next(NPCID.Sets.AttackAverageChance[type] * 2) == 0)
				{
					int num486 = NPCID.Sets.AttackTime[type];
					int num487 = (num394 == 1) ? num396 : num395;
					int num488 = (num394 == 1) ? num395 : num396;
					if (num487 != -1 && !Collision.CanHit(base.Center, 0, 0, Main.npc[num487].Center, 0, 0))
					{
						num487 = ((num488 == -1 || !Collision.CanHit(base.Center, 0, 0, Main.npc[num488].Center, 0, 0)) ? (-1) : num488);
					}
					if (num487 != -1)
					{
						localAI[2] = this.ai[0];
						this.ai[0] = 15f;
						this.ai[1] = num486;
						this.ai[2] = 0f;
						localAI[3] = 0f;
						base.direction = ((base.position.X < Main.npc[num487].position.X) ? 1 : (-1));
						netUpdate = true;
					}
				}
			}
			else if (aiStyle == 8)
			{
				TargetClosest();
				base.velocity.X *= 0.93f;
				if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
				{
					base.velocity.X = 0f;
				}
				if (this.ai[0] == 0f)
				{
					this.ai[0] = 500f;
				}
				if (type == 172)
				{
					if (alpha < 255)
					{
						alpha++;
					}
					if (justHit)
					{
						alpha = 0;
					}
				}
				if (this.ai[2] != 0f && this.ai[3] != 0f)
				{
					if (type == 172)
					{
						alpha = 255;
					}
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 8);
					for (int num489 = 0; num489 < 50; num489++)
					{
						if (type == 29 || type == 45)
						{
							int num490 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 27, 0f, 0f, 100, default(Color), Main.rand.Next(1, 3));
							Main.dust[num490].velocity *= 3f;
							if (Main.dust[num490].scale > 1f)
							{
								Main.dust[num490].noGravity = true;
							}
						}
						else if (type == 32)
						{
							int num491 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 172, 0f, 0f, 100, default(Color), 1.5f);
							Main.dust[num491].velocity *= 3f;
							Main.dust[num491].noGravity = true;
						}
						else if (type == 283 || type == 284)
						{
							int num492 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 173);
							Main.dust[num492].velocity *= 2f;
							Main.dust[num492].scale = 1.4f;
						}
						else if (type == 285 || type == 286)
						{
							int num493 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 174, 0f, 0f, 100, default(Color), 1.5f);
							Main.dust[num493].velocity *= 3f;
							Main.dust[num493].noGravity = true;
						}
						else if (type == 281 || type == 282)
						{
							int num494 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 175, 0f, 0f, 100, default(Color), 1.5f);
							Main.dust[num494].velocity *= 3f;
							Main.dust[num494].noGravity = true;
						}
						else if (type == 172)
						{
							int num495 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 106, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num495].velocity *= 3f;
							Main.dust[num495].noGravity = true;
						}
						else if (type == 533)
						{
							int num496 = Dust.NewDust(base.position, width, height, 27, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num496].velocity *= 3f;
							Main.dust[num496].noGravity = true;
						}
						else
						{
							int num497 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num497].velocity *= 3f;
							Main.dust[num497].noGravity = true;
						}
					}
					base.position.X = this.ai[2] * 16f - (float)(width / 2) + 8f;
					base.position.Y = this.ai[3] * 16f - (float)height;
					base.velocity.X = 0f;
					base.velocity.Y = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 8);
					for (int num498 = 0; num498 < 50; num498++)
					{
						if (type == 29 || type == 45)
						{
							int num499 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 27, 0f, 0f, 100, default(Color), Main.rand.Next(1, 3));
							Main.dust[num499].velocity *= 3f;
							if (Main.dust[num499].scale > 1f)
							{
								Main.dust[num499].noGravity = true;
							}
						}
						else if (type == 32)
						{
							int num500 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 172, 0f, 0f, 100, default(Color), 1.5f);
							Main.dust[num500].velocity *= 3f;
							Main.dust[num500].noGravity = true;
						}
						else if (type == 172)
						{
							int num501 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 106, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num501].velocity *= 3f;
							Main.dust[num501].noGravity = true;
						}
						else if (type == 283 || type == 284)
						{
							int num502 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 173);
							Main.dust[num502].velocity *= 2f;
							Main.dust[num502].scale = 1.4f;
						}
						else if (type == 285 || type == 286)
						{
							int num503 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 174, 0f, 0f, 100, default(Color), 1.5f);
							Main.dust[num503].velocity *= 3f;
							Main.dust[num503].noGravity = true;
						}
						else if (type == 281 || type == 282)
						{
							int num504 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 175, 0f, 0f, 100, default(Color), 1.5f);
							Main.dust[num504].velocity *= 3f;
							Main.dust[num504].noGravity = true;
						}
						else if (type == 533)
						{
							int num505 = Dust.NewDust(base.position, width, height, 27, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num505].velocity *= 3f;
							Main.dust[num505].noGravity = true;
						}
						else
						{
							int num506 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num506].velocity *= 3f;
							Main.dust[num506].noGravity = true;
						}
					}
				}
				this.ai[0] += 1f;
				if (type == 283 || type == 284)
				{
					if (this.ai[0] == 50f || this.ai[0] == 100f || this.ai[0] == 150f || this.ai[0] == 200f || this.ai[0] == 250f)
					{
						this.ai[1] = 30f;
						netUpdate = true;
					}
					if (this.ai[0] >= 400f)
					{
						this.ai[0] = 700f;
					}
				}
				else if (type == 172)
				{
					if (this.ai[0] == 75f || this.ai[0] == 150f || this.ai[0] == 225f || this.ai[0] == 300f || this.ai[0] == 375f || this.ai[0] == 450f)
					{
						this.ai[1] = 30f;
						netUpdate = true;
					}
				}
				else if (type == 533)
				{
					if (this.ai[0] == 180f)
					{
						this.ai[1] = 181f;
						netUpdate = true;
					}
				}
				else if (type == 281 || type == 282)
				{
					if (this.ai[0] == 20f || this.ai[0] == 40f || this.ai[0] == 60f || this.ai[0] == 120f || this.ai[0] == 140f || this.ai[0] == 160f || this.ai[0] == 220f || this.ai[0] == 240f || this.ai[0] == 260f)
					{
						this.ai[1] = 30f;
						netUpdate = true;
					}
					if (this.ai[0] >= 460f)
					{
						this.ai[0] = 700f;
					}
				}
				else if (this.ai[0] == 100f || this.ai[0] == 200f || this.ai[0] == 300f)
				{
					this.ai[1] = 30f;
					netUpdate = true;
				}
				if ((type == 285 || type == 286) && this.ai[0] > 400f)
				{
					this.ai[0] = 650f;
				}
				if (type == 533 && this.ai[0] >= 360f)
				{
					this.ai[0] = 650f;
				}
				if (this.ai[0] >= 650f && Main.netMode != 1)
				{
					this.ai[0] = 1f;
					int num507 = (int)Main.player[target].position.X / 16;
					int num508 = (int)Main.player[target].position.Y / 16;
					int num509 = (int)base.position.X / 16;
					int num510 = (int)base.position.Y / 16;
					int num511 = 20;
					int num512 = 0;
					bool flag57 = false;
					if (Math.Abs(base.position.X - Main.player[target].position.X) + Math.Abs(base.position.Y - Main.player[target].position.Y) > 2000f)
					{
						num512 = 100;
						flag57 = true;
					}
					while (!flag57 && num512 < 100)
					{
						num512++;
						int num513 = Main.rand.Next(num507 - num511, num507 + num511);
						int num514 = Main.rand.Next(num508 - num511, num508 + num511);
						for (int num515 = num514; num515 < num508 + num511; num515++)
						{
							if ((num515 < num508 - 4 || num515 > num508 + 4 || num513 < num507 - 4 || num513 > num507 + 4) && (num515 < num510 - 1 || num515 > num510 + 1 || num513 < num509 - 1 || num513 > num509 + 1) && Main.tile[num513, num515].nactive())
							{
								bool flag58 = true;
								if ((type == 32 || (type >= 281 && type <= 286)) && !Main.wallDungeon[Main.tile[num513, num515 - 1].wall])
								{
									flag58 = false;
								}
								else if (Main.tile[num513, num515 - 1].lava())
								{
									flag58 = false;
								}
								if (flag58 && Main.tileSolid[Main.tile[num513, num515].type] && !Collision.SolidTiles(num513 - 1, num513 + 1, num515 - 4, num515 - 1))
								{
									this.ai[1] = 20f;
									this.ai[2] = num513;
									this.ai[3] = num515;
									flag57 = true;
									break;
								}
							}
						}
					}
					netUpdate = true;
				}
				if (this.ai[1] > 0f)
				{
					this.ai[1] -= 1f;
					if (type == 533)
					{
						if (this.ai[1] % 30f == 0f && this.ai[1] / 30f < 5f)
						{
							Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 8);
							if (Main.netMode != 1)
							{
								Point point3 = base.Center.ToTileCoordinates();
								Point point4 = Main.player[target].Center.ToTileCoordinates();
								Vector2 vector49 = Main.player[target].Center - base.Center;
								int num516 = 6;
								int num517 = 6;
								int num518 = 0;
								int num519 = 2;
								int num520 = 0;
								bool flag59 = false;
								if (vector49.Length() > 2000f)
								{
									flag59 = true;
								}
								while (!flag59 && num520 < 50)
								{
									num520++;
									int num521 = Main.rand.Next(point4.X - num516, point4.X + num516 + 1);
									int num522 = Main.rand.Next(point4.Y - num516, point4.Y + num516 + 1);
									if ((num522 < point4.Y - num518 || num522 > point4.Y + num518 || num521 < point4.X - num518 || num521 > point4.X + num518) && (num522 < point3.Y - num517 || num522 > point3.Y + num517 || num521 < point3.X - num517 || num521 > point3.X + num517) && !Main.tile[num521, num522].nactive())
									{
										bool flag60 = true;
										if (flag60 && Main.tile[num521, num522].lava())
										{
											flag60 = false;
										}
										if (flag60 && Collision.SolidTiles(num521 - num519, num521 + num519, num522 - num519, num522 + num519))
										{
											flag60 = false;
										}
										if (flag60)
										{
											Projectile.NewProjectile(num521 * 16 + 8, num522 * 16 + 8, 0f, 0f, 596, 0, 1f, Main.myPlayer, target);
											flag59 = true;
											break;
										}
									}
								}
							}
						}
					}
					else if (this.ai[1] == 25f)
					{
						if (type >= 281 && type <= 286)
						{
							if (Main.netMode != 1)
							{
								float num523 = 6f;
								if (type == 285 || type == 286)
								{
									num523 = 8f;
								}
								if (type == 281 || type == 282)
								{
									num523 = 4f;
								}
								Vector2 vector50 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y);
								float num524 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector50.X;
								float num525 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector50.Y;
								if (type == 283 || type == 284)
								{
									num524 += (float)Main.rand.Next(-30, 31);
									num525 += (float)Main.rand.Next(-30, 31);
									num524 -= Main.player[target].velocity.X * 10f;
									num525 -= Main.player[target].velocity.Y * 10f;
								}
								float num526 = (float)Math.Sqrt(num524 * num524 + num525 * num525);
								num526 = num523 / num526;
								num524 *= num526;
								num525 *= num526;
								int num527 = 30;
								int num528 = 290;
								if (type == 285 || type == 286)
								{
									num528 = 291;
									num527 = 40;
								}
								if (type == 281 || type == 282)
								{
									num528 = 293;
									num527 = 40;
								}
								if (Main.expertMode)
								{
									num527 = (int)((double)num527 * 0.8);
								}
								int num529 = Projectile.NewProjectile(vector50.X, vector50.Y, num524, num525, num528, num527, 0f, Main.myPlayer);
								Main.projectile[num529].timeLeft = 300;
								if (num528 == 291)
								{
									Main.projectile[num529].ai[0] = Main.player[target].Center.X;
									Main.projectile[num529].ai[1] = Main.player[target].Center.Y;
									Main.projectile[num529].netUpdate = true;
								}
								localAI[0] = 0f;
							}
						}
						else
						{
							if (type != 172)
							{
								Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 8);
							}
							if (Main.netMode != 1)
							{
								if (type == 29 || type == 45)
								{
									NewNPC((int)base.position.X + width / 2, (int)base.position.Y - 8, 30);
								}
								else if (type == 32)
								{
									NewNPC((int)base.position.X + width / 2, (int)base.position.Y - 8, 33);
								}
								else if (type == 172)
								{
									float num530 = 10f;
									Vector2 vector51 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
									float num531 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector51.X + (float)Main.rand.Next(-10, 11);
									float num532 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector51.Y + (float)Main.rand.Next(-10, 11);
									float num533 = (float)Math.Sqrt(num531 * num531 + num532 * num532);
									num533 = num530 / num533;
									num531 *= num533;
									num532 *= num533;
									int num534 = 40;
									int num535 = 129;
									int num536 = Projectile.NewProjectile(vector51.X, vector51.Y, num531, num532, num535, num534, 0f, Main.myPlayer);
									Main.projectile[num536].timeLeft = 300;
									localAI[0] = 0f;
								}
								else
								{
									NewNPC((int)base.position.X + width / 2 + base.direction * 8, (int)base.position.Y + 20, 25);
								}
							}
						}
					}
				}
				if (type == 29 || type == 45)
				{
					if (Main.rand.Next(5) == 0)
					{
						int num537 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + 2f), width, height, 27, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100, default(Color), 1.5f);
						Main.dust[num537].noGravity = true;
						Main.dust[num537].velocity.X *= 0.5f;
						Main.dust[num537].velocity.Y = -2f;
					}
				}
				else if (type == 32)
				{
					if (Main.rand.Next(3) != 0)
					{
						int num538 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + 2f), width, height, 172, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100, default(Color), 0.9f);
						Main.dust[num538].noGravity = true;
						Main.dust[num538].velocity.X *= 0.3f;
						Main.dust[num538].velocity.Y *= 0.2f;
						Main.dust[num538].velocity.Y -= 1f;
					}
				}
				else if (type == 172)
				{
					int num539 = 1;
					if (alpha == 255)
					{
						num539 = 2;
					}
					for (int num540 = 0; num540 < num539; num540++)
					{
						if (Main.rand.Next(255) > 255 - alpha)
						{
							int num541 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + 2f), width, height, 106, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100, default(Color), 1.2f);
							Main.dust[num541].noGravity = true;
							Main.dust[num541].velocity.X *= 0.1f + (float)Main.rand.Next(30) * 0.01f;
							Main.dust[num541].velocity.Y *= 0.1f + (float)Main.rand.Next(30) * 0.01f;
							Main.dust[num541].scale *= 1f + (float)Main.rand.Next(6) * 0.1f;
						}
					}
				}
				else if (type == 283 || type == 284)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num542 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + 2f), width, height, 173);
						Main.dust[num542].velocity.X *= 0.5f;
						Main.dust[num542].velocity.Y *= 0.5f;
					}
				}
				else if (type == 285 || type == 286)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num543 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + 2f), width, height, 174, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100);
						Main.dust[num543].noGravity = true;
						Main.dust[num543].velocity *= 0.4f;
						Main.dust[num543].velocity.Y -= 0.7f;
					}
				}
				else if (type == 281 || type == 282)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num544 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + 2f), width, height, 175, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100, default(Color), 0.1f);
						Main.dust[num544].noGravity = true;
						Main.dust[num544].velocity *= 0.5f;
						Main.dust[num544].fadeIn = 1.2f;
					}
				}
				else if (type == 533)
				{
					Lighting.AddLight(base.Top, 0.6f, 0.6f, 0.3f);
				}
				else if (Main.rand.Next(2) == 0)
				{
					int num545 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + 2f), width, height, 6, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100, default(Color), 2f);
					Main.dust[num545].noGravity = true;
					Main.dust[num545].velocity.X *= 1f;
					Main.dust[num545].velocity.Y *= 1f;
				}
			}
			else if (aiStyle == 9)
			{
				if (type == 516)
				{
					if (alpha < 220)
					{
						alpha += 40;
					}
					if (this.ai[0] == 0f)
					{
						this.ai[0] = 1f;
						Vector2 vector52 = Main.player[target].Center - base.Center;
						vector52.Normalize();
						if (vector52.HasNaNs())
						{
							vector52 = -Vector2.UnitY;
						}
						vector52 = vector52.RotatedByRandom(1.5707963705062866).RotatedBy(-0.78539818525314331);
						if (vector52.Y > 0.2f)
						{
							vector52.Y = 0.2f;
						}
						base.velocity = vector52 * (6f + Main.rand.NextFloat() * 4f);
					}
					if (collideX || collideY || Distance(Main.player[target].Center) < 20f)
					{
						StrikeNPCNoInteraction(9999, 0f, base.direction);
					}
				}
				if (target == 16)
				{
					TargetClosest();
					float num546 = 6f;
					if (type == 25)
					{
						num546 = 5f;
					}
					if (type == 112)
					{
						num546 = 7f;
					}
					Vector2 vector53 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num547 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector53.X;
					float num548 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector53.Y;
					float num549 = (float)Math.Sqrt(num547 * num547 + num548 * num548);
					num549 = num546 / num549;
					base.velocity.X = num547 * num549;
					base.velocity.Y = num548 * num549;
				}
				if (type == 112)
				{
					damage = ((this.ai[1] == 1f) ? 65 : defDamage);
					this.ai[0] += 1f;
					if (this.ai[0] > 3f)
					{
						this.ai[0] = 3f;
					}
					if (this.ai[0] == 2f)
					{
						base.position += base.velocity;
						Main.PlaySound(4, (int)base.position.X, (int)base.position.Y, 9);
						for (int num550 = 0; num550 < 20; num550++)
						{
							int num551 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + 2f), width, height, 18, 0f, 0f, 100, default(Color), 1.8f);
							Main.dust[num551].velocity *= 1.3f;
							Main.dust[num551].velocity += base.velocity;
							Main.dust[num551].noGravity = true;
						}
					}
				}
				if (type == 112 && Collision.SolidCollision(base.position, width, height))
				{
					int netMode = Main.netMode;
					StrikeNPCNoInteraction(999, 0f, 0);
				}
				if (timeLeft > 100)
				{
					timeLeft = 100;
				}
				if (type == 516)
				{
					rotation += 0.1f * (float)base.direction;
					float num552 = 15f;
					float num553 = 0.0833333358f;
					Vector2 center5 = base.Center;
					Vector2 center6 = Main.player[target].Center;
					Vector2 vec6 = center6 - center5;
					vec6.Normalize();
					if (vec6.HasNaNs())
					{
						vec6 = new Vector2(base.direction, 0f);
					}
					base.velocity = (base.velocity * (num552 - 1f) + vec6 * (base.velocity.Length() + num553)) / num552;
					if (base.velocity.Length() < 6f)
					{
						base.velocity *= 1.05f;
					}
					return;
				}
				for (int num554 = 0; num554 < 2; num554++)
				{
					if (type == 30)
					{
						alpha = 255;
						for (int num555 = 0; num555 < 2; num555++)
						{
							int num556 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + 2f), width, height, 27, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100, default(Color), 1.3f);
							Main.dust[num556].noGravity = true;
							Main.dust[num556].velocity *= 0.3f;
							Main.dust[num556].velocity.X -= base.velocity.X * 0.2f;
							Main.dust[num556].velocity.Y -= base.velocity.Y * 0.2f;
						}
					}
					else if (type == 33)
					{
						for (int num557 = 0; num557 < 3; num557++)
						{
							float num558 = base.velocity.X / 3f * (float)num554;
							float num559 = base.velocity.Y / 3f * (float)num554;
							int num560 = 2;
							int num561 = Dust.NewDust(new Vector2(base.position.X + (float)num560, base.position.Y + (float)num560), width - num560 * 2, height - num560 * 2, 172, 0f, 0f, 100, default(Color), 1.2f);
							Main.dust[num561].noGravity = true;
							Main.dust[num561].velocity *= 0.1f;
							Main.dust[num561].velocity += base.velocity * 0.5f;
							Main.dust[num561].position.X -= num558;
							Main.dust[num561].position.Y -= num559;
						}
						if (Main.rand.Next(5) == 0)
						{
							int num562 = 2;
							int num563 = Dust.NewDust(new Vector2(base.position.X + (float)num562, base.position.Y + (float)num562), width - num562 * 2, height - num562 * 2, 172, 0f, 0f, 100, default(Color), 0.6f);
							Main.dust[num563].velocity *= 0.25f;
							Main.dust[num563].velocity += base.velocity * 0.5f;
						}
					}
					else if (type == 112)
					{
						int num564 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + 2f), width, height, 18, base.velocity.X * 0.1f, base.velocity.Y * 0.1f, 80, default(Color), 1.3f);
						Main.dust[num564].velocity *= 0.3f;
						Main.dust[num564].noGravity = true;
					}
					else
					{
						Lighting.AddLight((int)((base.position.X + (float)(width / 2)) / 16f), (int)((base.position.Y + (float)(height / 2)) / 16f), 1f, 0.3f, 0.1f);
						int num565 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + 2f), width, height, 6, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100, default(Color), 2f);
						Main.dust[num565].noGravity = true;
						Main.dust[num565].velocity.X *= 0.3f;
						Main.dust[num565].velocity.Y *= 0.3f;
					}
				}
				rotation += 0.4f * (float)base.direction;
			}
			else if (aiStyle == 10)
			{
				float num566 = 1f;
				float num567 = 0.011f;
				TargetClosest();
				Vector2 vector54 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num568 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector54.X;
				float num569 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector54.Y;
				float num570 = (float)Math.Sqrt(num568 * num568 + num569 * num569);
				float num571 = num570;
				this.ai[1] += 1f;
				if (this.ai[1] > 600f)
				{
					num567 *= 8f;
					num566 = 4f;
					if (this.ai[1] > 650f)
					{
						this.ai[1] = 0f;
					}
				}
				else if (num571 < 250f)
				{
					this.ai[0] += 0.9f;
					if (this.ai[0] > 0f)
					{
						base.velocity.Y += 0.019f;
					}
					else
					{
						base.velocity.Y -= 0.019f;
					}
					if (this.ai[0] < -100f || this.ai[0] > 100f)
					{
						base.velocity.X += 0.019f;
					}
					else
					{
						base.velocity.X -= 0.019f;
					}
					if (this.ai[0] > 200f)
					{
						this.ai[0] = -200f;
					}
				}
				if (num571 > 350f)
				{
					num566 = 5f;
					num567 = 0.3f;
				}
				else if (num571 > 300f)
				{
					num566 = 3f;
					num567 = 0.2f;
				}
				else if (num571 > 250f)
				{
					num566 = 1.5f;
					num567 = 0.1f;
				}
				num570 = num566 / num570;
				num568 *= num570;
				num569 *= num570;
				if (Main.player[target].dead)
				{
					num568 = (float)base.direction * num566 / 2f;
					num569 = (0f - num566) / 2f;
				}
				if (base.velocity.X < num568)
				{
					base.velocity.X += num567;
				}
				else if (base.velocity.X > num568)
				{
					base.velocity.X -= num567;
				}
				if (base.velocity.Y < num569)
				{
					base.velocity.Y += num567;
				}
				else if (base.velocity.Y > num569)
				{
					base.velocity.Y -= num567;
				}
				if (num568 > 0f)
				{
					spriteDirection = -1;
					rotation = (float)Math.Atan2(num569, num568);
				}
				if (num568 < 0f)
				{
					spriteDirection = 1;
					rotation = (float)Math.Atan2(num569, num568) + 3.14f;
				}
				if (type != 289)
				{
					return;
				}
				if (justHit)
				{
					this.ai[2] = 0f;
					this.ai[3] = 0f;
				}
				vector54 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				num568 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector54.X;
				num569 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector54.Y;
				num570 = (float)Math.Sqrt(num568 * num568 + num569 * num569);
				if (num570 <= 500f)
				{
					this.ai[2] += 1f;
					if (this.ai[3] == 0f)
					{
						if (this.ai[2] > 120f)
						{
							this.ai[2] = 0f;
							this.ai[3] = 1f;
							netUpdate = true;
						}
						return;
					}
					if (this.ai[2] > 40f)
					{
						this.ai[3] = 0f;
					}
					if (Main.netMode != 1 && this.ai[2] == 20f)
					{
						float num572 = 6f;
						int num573 = 25;
						int num574 = 299;
						num570 = num572 / num570;
						num568 *= num570;
						num569 *= num570;
						Projectile.NewProjectile(vector54.X, vector54.Y, num568, num569, num574, num573, 0f, Main.myPlayer);
					}
				}
				else
				{
					this.ai[2] = 0f;
					this.ai[3] = 0f;
				}
			}
			else if (aiStyle == 11)
			{
				defense = defDefense;
				if (this.ai[0] == 0f && Main.netMode != 1)
				{
					TargetClosest();
					this.ai[0] = 1f;
					if (type != 68)
					{
						int num575 = NewNPC((int)(base.position.X + (float)(width / 2)), (int)base.position.Y + height / 2, 36, base.whoAmI);
						Main.npc[num575].ai[0] = -1f;
						Main.npc[num575].ai[1] = base.whoAmI;
						Main.npc[num575].target = target;
						Main.npc[num575].netUpdate = true;
						num575 = NewNPC((int)(base.position.X + (float)(width / 2)), (int)base.position.Y + height / 2, 36, base.whoAmI);
						Main.npc[num575].ai[0] = 1f;
						Main.npc[num575].ai[1] = base.whoAmI;
						Main.npc[num575].ai[3] = 150f;
						Main.npc[num575].target = target;
						Main.npc[num575].netUpdate = true;
					}
				}
				if (type == 68 && this.ai[1] != 3f && this.ai[1] != 2f)
				{
					Main.PlaySound(15, (int)base.position.X, (int)base.position.Y, 0);
					this.ai[1] = 2f;
				}
				if (Main.player[target].dead || Math.Abs(base.position.X - Main.player[target].position.X) > 2000f || Math.Abs(base.position.Y - Main.player[target].position.Y) > 2000f)
				{
					TargetClosest();
					if (Main.player[target].dead || Math.Abs(base.position.X - Main.player[target].position.X) > 2000f || Math.Abs(base.position.Y - Main.player[target].position.Y) > 2000f)
					{
						this.ai[1] = 3f;
					}
				}
				if (Main.dayTime && this.ai[1] != 3f && this.ai[1] != 2f)
				{
					this.ai[1] = 2f;
					Main.PlaySound(15, (int)base.position.X, (int)base.position.Y, 0);
				}
				int num576 = 0;
				if (Main.expertMode)
				{
					for (int num577 = 0; num577 < 200; num577++)
					{
						if (Main.npc[num577].active && Main.npc[num577].type == type + 1)
						{
							num576++;
						}
					}
					defense += num576 * 25;
					if ((num576 < 2 || (double)life < (double)lifeMax * 0.75) && this.ai[1] == 0f)
					{
						float num578 = 80f;
						if (num576 == 0)
						{
							num578 /= 2f;
						}
						if (Main.netMode != 1 && this.ai[2] % num578 == 0f)
						{
							Vector2 center7 = base.Center;
							float num579 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - center7.X;
							float num580 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - center7.Y;
							Math.Sqrt(num579 * num579 + num580 * num580);
							if (Collision.CanHit(center7, 1, 1, Main.player[target].position, Main.player[target].width, Main.player[target].height))
							{
								float num581 = 3f;
								if (num576 == 0)
								{
									num581 += 2f;
								}
								float num582 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - center7.X + (float)Main.rand.Next(-20, 21);
								float num583 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - center7.Y + (float)Main.rand.Next(-20, 21);
								float num584 = (float)Math.Sqrt(num582 * num582 + num583 * num583);
								num584 = num581 / num584;
								num582 *= num584;
								num583 *= num584;
								Vector2 vector55 = new Vector2(num582 * 1f + (float)Main.rand.Next(-50, 51) * 0.01f, num583 * 1f + (float)Main.rand.Next(-50, 51) * 0.01f);
								vector55.Normalize();
								vector55 *= num581;
								vector55 += base.velocity;
								num582 = vector55.X;
								num583 = vector55.Y;
								int num585 = 17;
								int num586 = 270;
								center7 += vector55 * 5f;
								int num587 = Projectile.NewProjectile(center7.X, center7.Y, num582, num583, num586, num585, 0f, Main.myPlayer, -1f);
								Main.projectile[num587].timeLeft = 300;
							}
						}
					}
				}
				if (this.ai[1] == 0f)
				{
					damage = defDamage;
					this.ai[2] += 1f;
					if (this.ai[2] >= 800f)
					{
						this.ai[2] = 0f;
						this.ai[1] = 1f;
						TargetClosest();
						netUpdate = true;
					}
					rotation = base.velocity.X / 15f;
					float num588 = 0.02f;
					float num589 = 2f;
					float num590 = 0.05f;
					float num591 = 8f;
					if (Main.expertMode)
					{
						num588 = 0.03f;
						num589 = 4f;
						num590 = 0.07f;
						num591 = 9.5f;
					}
					if (base.position.Y > Main.player[target].position.Y - 250f)
					{
						if (base.velocity.Y > 0f)
						{
							base.velocity.Y *= 0.98f;
						}
						base.velocity.Y -= num588;
						if (base.velocity.Y > num589)
						{
							base.velocity.Y = num589;
						}
					}
					else if (base.position.Y < Main.player[target].position.Y - 250f)
					{
						if (base.velocity.Y < 0f)
						{
							base.velocity.Y *= 0.98f;
						}
						base.velocity.Y += num588;
						if (base.velocity.Y < 0f - num589)
						{
							base.velocity.Y = 0f - num589;
						}
					}
					if (base.position.X + (float)(width / 2) > Main.player[target].position.X + (float)(Main.player[target].width / 2))
					{
						if (base.velocity.X > 0f)
						{
							base.velocity.X *= 0.98f;
						}
						base.velocity.X -= num590;
						if (base.velocity.X > num591)
						{
							base.velocity.X = num591;
						}
					}
					if (base.position.X + (float)(width / 2) < Main.player[target].position.X + (float)(Main.player[target].width / 2))
					{
						if (base.velocity.X < 0f)
						{
							base.velocity.X *= 0.98f;
						}
						base.velocity.X += num590;
						if (base.velocity.X < 0f - num591)
						{
							base.velocity.X = 0f - num591;
						}
					}
				}
				else if (this.ai[1] == 1f)
				{
					defense -= 10;
					this.ai[2] += 1f;
					if (this.ai[2] == 2f)
					{
						Main.PlaySound(15, (int)base.position.X, (int)base.position.Y, 0);
					}
					if (this.ai[2] >= 400f)
					{
						this.ai[2] = 0f;
						this.ai[1] = 0f;
					}
					rotation += (float)base.direction * 0.3f;
					Vector2 vector56 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num592 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector56.X;
					float num593 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector56.Y;
					float num594 = (float)Math.Sqrt(num592 * num592 + num593 * num593);
					float num595 = 1.5f;
					if (Main.expertMode)
					{
						damage = (int)((double)defDamage * 1.3);
						num595 = 4f;
						if (num594 > 150f)
						{
							num595 *= 1.05f;
						}
						if (num594 > 200f)
						{
							num595 *= 1.1f;
						}
						if (num594 > 250f)
						{
							num595 *= 1.1f;
						}
						if (num594 > 300f)
						{
							num595 *= 1.1f;
						}
						if (num594 > 350f)
						{
							num595 *= 1.1f;
						}
						if (num594 > 400f)
						{
							num595 *= 1.1f;
						}
						if (num594 > 450f)
						{
							num595 *= 1.1f;
						}
						if (num594 > 500f)
						{
							num595 *= 1.1f;
						}
						if (num594 > 550f)
						{
							num595 *= 1.1f;
						}
						if (num594 > 600f)
						{
							num595 *= 1.1f;
						}
						switch (num576)
						{
						case 0:
							num595 *= 1.2f;
							break;
						case 1:
							num595 *= 1.1f;
							break;
						}
					}
					num594 = num595 / num594;
					base.velocity.X = num592 * num594;
					base.velocity.Y = num593 * num594;
				}
				else if (this.ai[1] == 2f)
				{
					damage = 1000;
					defense = 9999;
					rotation += (float)base.direction * 0.3f;
					Vector2 vector57 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num596 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector57.X;
					float num597 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector57.Y;
					float num598 = (float)Math.Sqrt(num596 * num596 + num597 * num597);
					num598 = 8f / num598;
					base.velocity.X = num596 * num598;
					base.velocity.Y = num597 * num598;
				}
				else if (this.ai[1] == 3f)
				{
					base.velocity.Y += 0.1f;
					if (base.velocity.Y < 0f)
					{
						base.velocity.Y *= 0.95f;
					}
					base.velocity.X *= 0.95f;
					if (timeLeft > 50)
					{
						timeLeft = 50;
					}
				}
				if (this.ai[1] != 2f && this.ai[1] != 3f && type != 68 && (num576 != 0 || !Main.expertMode))
				{
					int num599 = Dust.NewDust(new Vector2(base.position.X + (float)(width / 2) - 15f - base.velocity.X * 5f, base.position.Y + (float)height - 2f), 30, 10, 5, (0f - base.velocity.X) * 0.2f, 3f, 0, default(Color), 2f);
					Main.dust[num599].noGravity = true;
					Main.dust[num599].velocity.X *= 1.3f;
					Main.dust[num599].velocity.X += base.velocity.X * 0.4f;
					Main.dust[num599].velocity.Y += 2f + base.velocity.Y;
					for (int num600 = 0; num600 < 2; num600++)
					{
						num599 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + 120f), width, 60, 5, base.velocity.X, base.velocity.Y, 0, default(Color), 2f);
						Main.dust[num599].noGravity = true;
						Main.dust[num599].velocity -= base.velocity;
						Main.dust[num599].velocity.Y += 5f;
					}
				}
			}
			else if (aiStyle == 12)
			{
				spriteDirection = -(int)this.ai[0];
				if (!Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].aiStyle != 11)
				{
					this.ai[2] += 10f;
					if (this.ai[2] > 50f || Main.netMode != 2)
					{
						life = -1;
						HitEffect();
						active = false;
					}
				}
				if (this.ai[2] == 0f || this.ai[2] == 3f)
				{
					if (Main.npc[(int)this.ai[1]].ai[1] == 3f && timeLeft > 10)
					{
						timeLeft = 10;
					}
					if (Main.npc[(int)this.ai[1]].ai[1] != 0f)
					{
						if (base.position.Y > Main.npc[(int)this.ai[1]].position.Y - 100f)
						{
							if (base.velocity.Y > 0f)
							{
								base.velocity.Y *= 0.96f;
							}
							base.velocity.Y -= 0.07f;
							if (base.velocity.Y > 6f)
							{
								base.velocity.Y = 6f;
							}
						}
						else if (base.position.Y < Main.npc[(int)this.ai[1]].position.Y - 100f)
						{
							if (base.velocity.Y < 0f)
							{
								base.velocity.Y *= 0.96f;
							}
							base.velocity.Y += 0.07f;
							if (base.velocity.Y < -6f)
							{
								base.velocity.Y = -6f;
							}
						}
						if (base.position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 120f * this.ai[0])
						{
							if (base.velocity.X > 0f)
							{
								base.velocity.X *= 0.96f;
							}
							base.velocity.X -= 0.1f;
							if (base.velocity.X > 8f)
							{
								base.velocity.X = 8f;
							}
						}
						if (base.position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 120f * this.ai[0])
						{
							if (base.velocity.X < 0f)
							{
								base.velocity.X *= 0.96f;
							}
							base.velocity.X += 0.1f;
							if (base.velocity.X < -8f)
							{
								base.velocity.X = -8f;
							}
						}
					}
					else
					{
						this.ai[3] += 1f;
						if (Main.expertMode)
						{
							this.ai[3] += 0.5f;
						}
						if (this.ai[3] >= 300f)
						{
							this.ai[2] += 1f;
							this.ai[3] = 0f;
							netUpdate = true;
						}
						if (Main.expertMode)
						{
							if (base.position.Y > Main.npc[(int)this.ai[1]].position.Y + 230f)
							{
								if (base.velocity.Y > 0f)
								{
									base.velocity.Y *= 0.96f;
								}
								base.velocity.Y -= 0.04f;
								if (base.velocity.Y > 3f)
								{
									base.velocity.Y = 3f;
								}
							}
							else if (base.position.Y < Main.npc[(int)this.ai[1]].position.Y + 230f)
							{
								if (base.velocity.Y < 0f)
								{
									base.velocity.Y *= 0.96f;
								}
								base.velocity.Y += 0.04f;
								if (base.velocity.Y < -3f)
								{
									base.velocity.Y = -3f;
								}
							}
							if (base.position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0])
							{
								if (base.velocity.X > 0f)
								{
									base.velocity.X *= 0.96f;
								}
								base.velocity.X -= 0.07f;
								if (base.velocity.X > 8f)
								{
									base.velocity.X = 8f;
								}
							}
							if (base.position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0])
							{
								if (base.velocity.X < 0f)
								{
									base.velocity.X *= 0.96f;
								}
								base.velocity.X += 0.07f;
								if (base.velocity.X < -8f)
								{
									base.velocity.X = -8f;
								}
							}
						}
						if (base.position.Y > Main.npc[(int)this.ai[1]].position.Y + 230f)
						{
							if (base.velocity.Y > 0f)
							{
								base.velocity.Y *= 0.96f;
							}
							base.velocity.Y -= 0.04f;
							if (base.velocity.Y > 3f)
							{
								base.velocity.Y = 3f;
							}
						}
						else if (base.position.Y < Main.npc[(int)this.ai[1]].position.Y + 230f)
						{
							if (base.velocity.Y < 0f)
							{
								base.velocity.Y *= 0.96f;
							}
							base.velocity.Y += 0.04f;
							if (base.velocity.Y < -3f)
							{
								base.velocity.Y = -3f;
							}
						}
						if (base.position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0])
						{
							if (base.velocity.X > 0f)
							{
								base.velocity.X *= 0.96f;
							}
							base.velocity.X -= 0.07f;
							if (base.velocity.X > 8f)
							{
								base.velocity.X = 8f;
							}
						}
						if (base.position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0])
						{
							if (base.velocity.X < 0f)
							{
								base.velocity.X *= 0.96f;
							}
							base.velocity.X += 0.07f;
							if (base.velocity.X < -8f)
							{
								base.velocity.X = -8f;
							}
						}
					}
					Vector2 vector58 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num601 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector58.X;
					float num602 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector58.Y;
					Math.Sqrt(num601 * num601 + num602 * num602);
					rotation = (float)Math.Atan2(num602, num601) + 1.57f;
				}
				else if (this.ai[2] == 1f)
				{
					Vector2 vector59 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num603 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector59.X;
					float num604 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector59.Y;
					float num605 = (float)Math.Sqrt(num603 * num603 + num604 * num604);
					rotation = (float)Math.Atan2(num604, num603) + 1.57f;
					base.velocity.X *= 0.95f;
					base.velocity.Y -= 0.1f;
					if (Main.expertMode)
					{
						base.velocity.Y -= 0.06f;
						if (base.velocity.Y < -13f)
						{
							base.velocity.Y = -13f;
						}
					}
					else if (base.velocity.Y < -8f)
					{
						base.velocity.Y = -8f;
					}
					if (base.position.Y < Main.npc[(int)this.ai[1]].position.Y - 200f)
					{
						TargetClosest();
						this.ai[2] = 2f;
						vector59 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						num603 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector59.X;
						num604 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector59.Y;
						num605 = (float)Math.Sqrt(num603 * num603 + num604 * num604);
						num605 = ((!Main.expertMode) ? (18f / num605) : (21f / num605));
						base.velocity.X = num603 * num605;
						base.velocity.Y = num604 * num605;
						netUpdate = true;
					}
				}
				else if (this.ai[2] == 2f)
				{
					if (base.position.Y > Main.player[target].position.Y || base.velocity.Y < 0f)
					{
						this.ai[2] = 3f;
					}
				}
				else if (this.ai[2] == 4f)
				{
					Vector2 vector60 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num606 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector60.X;
					float num607 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector60.Y;
					float num608 = (float)Math.Sqrt(num606 * num606 + num607 * num607);
					rotation = (float)Math.Atan2(num607, num606) + 1.57f;
					base.velocity.Y *= 0.95f;
					base.velocity.X += 0.1f * (0f - this.ai[0]);
					if (Main.expertMode)
					{
						base.velocity.X += 0.07f * (0f - this.ai[0]);
						if (base.velocity.X < -12f)
						{
							base.velocity.X = -12f;
						}
						else if (base.velocity.X > 12f)
						{
							base.velocity.X = 12f;
						}
					}
					else if (base.velocity.X < -8f)
					{
						base.velocity.X = -8f;
					}
					else if (base.velocity.X > 8f)
					{
						base.velocity.X = 8f;
					}
					if (base.position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 500f || base.position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) + 500f)
					{
						TargetClosest();
						this.ai[2] = 5f;
						vector60 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						num606 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector60.X;
						num607 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector60.Y;
						num608 = (float)Math.Sqrt(num606 * num606 + num607 * num607);
						num608 = ((!Main.expertMode) ? (17f / num608) : (22f / num608));
						base.velocity.X = num606 * num608;
						base.velocity.Y = num607 * num608;
						netUpdate = true;
					}
				}
				else if (this.ai[2] == 5f && ((base.velocity.X > 0f && base.position.X + (float)(width / 2) > Main.player[target].position.X + (float)(Main.player[target].width / 2)) || (base.velocity.X < 0f && base.position.X + (float)(width / 2) < Main.player[target].position.X + (float)(Main.player[target].width / 2))))
				{
					this.ai[2] = 0f;
				}
			}
			else if (aiStyle == 13)
			{
				if (this.ai[0] < 0f || this.ai[0] >= (float)Main.maxTilesX || this.ai[1] < 0f || this.ai[1] >= (float)Main.maxTilesX)
				{
					return;
				}
				if (Main.tile[(int)this.ai[0], (int)this.ai[1]] == null)
				{
					Main.tile[(int)this.ai[0], (int)this.ai[1]] = new Tile();
				}
				if (!Main.tile[(int)this.ai[0], (int)this.ai[1]].active())
				{
					life = -1;
					HitEffect();
					active = false;
					return;
				}
				TargetClosest();
				float num609 = 0.035f;
				float num610 = 150f;
				if (type == 43)
				{
					num610 = 250f;
				}
				if (type == 101)
				{
					num610 = 175f;
				}
				if (type == 259)
				{
					num610 = 100f;
				}
				if (type == 175)
				{
					num610 = 500f;
					num609 = 0.05f;
				}
				if (type == 260)
				{
					num610 = 350f;
					num609 = 0.15f;
				}
				this.ai[2] += 1f;
				if (this.ai[2] > 300f)
				{
					num610 = (int)((double)num610 * 1.3);
					if (this.ai[2] > 450f)
					{
						this.ai[2] = 0f;
					}
				}
				Vector2 vector61 = new Vector2(this.ai[0] * 16f + 8f, this.ai[1] * 16f + 8f);
				float num611 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - (float)(width / 2) - vector61.X;
				float num612 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - (float)(height / 2) - vector61.Y;
				float num613 = (float)Math.Sqrt(num611 * num611 + num612 * num612);
				if (num613 > num610)
				{
					num613 = num610 / num613;
					num611 *= num613;
					num612 *= num613;
				}
				if (base.position.X < this.ai[0] * 16f + 8f + num611)
				{
					base.velocity.X += num609;
					if (base.velocity.X < 0f && num611 > 0f)
					{
						base.velocity.X += num609 * 1.5f;
					}
				}
				else if (base.position.X > this.ai[0] * 16f + 8f + num611)
				{
					base.velocity.X -= num609;
					if (base.velocity.X > 0f && num611 < 0f)
					{
						base.velocity.X -= num609 * 1.5f;
					}
				}
				if (base.position.Y < this.ai[1] * 16f + 8f + num612)
				{
					base.velocity.Y += num609;
					if (base.velocity.Y < 0f && num612 > 0f)
					{
						base.velocity.Y += num609 * 1.5f;
					}
				}
				else if (base.position.Y > this.ai[1] * 16f + 8f + num612)
				{
					base.velocity.Y -= num609;
					if (base.velocity.Y > 0f && num612 < 0f)
					{
						base.velocity.Y -= num609 * 1.5f;
					}
				}
				if (type == 43)
				{
					if (base.velocity.X > 3f)
					{
						base.velocity.X = 3f;
					}
					if (base.velocity.X < -3f)
					{
						base.velocity.X = -3f;
					}
					if (base.velocity.Y > 3f)
					{
						base.velocity.Y = 3f;
					}
					if (base.velocity.Y < -3f)
					{
						base.velocity.Y = -3f;
					}
				}
				else if (type == 175)
				{
					if (base.velocity.X > 4f)
					{
						base.velocity.X = 4f;
					}
					if (base.velocity.X < -4f)
					{
						base.velocity.X = -4f;
					}
					if (base.velocity.Y > 4f)
					{
						base.velocity.Y = 4f;
					}
					if (base.velocity.Y < -4f)
					{
						base.velocity.Y = -4f;
					}
				}
				else
				{
					if (base.velocity.X > 2f)
					{
						base.velocity.X = 2f;
					}
					if (base.velocity.X < -2f)
					{
						base.velocity.X = -2f;
					}
					if (base.velocity.Y > 2f)
					{
						base.velocity.Y = 2f;
					}
					if (base.velocity.Y < -2f)
					{
						base.velocity.Y = -2f;
					}
				}
				if (type == 259 || type == 260)
				{
					rotation = (float)Math.Atan2(num612, num611) + 1.57f;
				}
				else
				{
					if (num611 > 0f)
					{
						spriteDirection = 1;
						rotation = (float)Math.Atan2(num612, num611);
					}
					if (num611 < 0f)
					{
						spriteDirection = -1;
						rotation = (float)Math.Atan2(num612, num611) + 3.14f;
					}
				}
				if (collideX)
				{
					netUpdate = true;
					base.velocity.X = oldVelocity.X * -0.7f;
					if (base.velocity.X > 0f && base.velocity.X < 2f)
					{
						base.velocity.X = 2f;
					}
					if (base.velocity.X < 0f && base.velocity.X > -2f)
					{
						base.velocity.X = -2f;
					}
				}
				if (collideY)
				{
					netUpdate = true;
					base.velocity.Y = oldVelocity.Y * -0.7f;
					if (base.velocity.Y > 0f && base.velocity.Y < 2f)
					{
						base.velocity.Y = 2f;
					}
					if (base.velocity.Y < 0f && base.velocity.Y > -2f)
					{
						base.velocity.Y = -2f;
					}
				}
				if (Main.netMode == 1)
				{
					return;
				}
				if (type == 101 && !Main.player[target].dead)
				{
					if (justHit)
					{
						localAI[0] = 0f;
					}
					localAI[0] += 1f;
					if (localAI[0] >= 120f)
					{
						if (!Collision.SolidCollision(base.position, width, height) && Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
						{
							float num614 = 10f;
							vector61 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
							num611 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector61.X + (float)Main.rand.Next(-10, 11);
							num612 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector61.Y + (float)Main.rand.Next(-10, 11);
							num613 = (float)Math.Sqrt(num611 * num611 + num612 * num612);
							num613 = num614 / num613;
							num611 *= num613;
							num612 *= num613;
							int num615 = 22;
							if (Main.expertMode)
							{
								num615 = (int)((double)num615 * 0.8);
							}
							int num616 = 96;
							int num617 = Projectile.NewProjectile(vector61.X, vector61.Y, num611, num612, num616, num615, 0f, Main.myPlayer);
							Main.projectile[num617].timeLeft = 300;
							localAI[0] = 0f;
						}
						else
						{
							localAI[0] = 100f;
						}
					}
				}
				if (type != 260 || Main.player[target].dead)
				{
					return;
				}
				if (justHit)
				{
					localAI[0] = 0f;
				}
				localAI[0] += 1f;
				if (!(localAI[0] >= 150f))
				{
					return;
				}
				if (!Collision.SolidCollision(base.position, width, height))
				{
					float num618 = 14f;
					vector61 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					num611 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector61.X + (float)Main.rand.Next(-10, 11);
					float num619 = Math.Abs(num611 * 0.1f);
					if (num612 > 0f)
					{
						num619 = 0f;
					}
					num612 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector61.Y + (float)Main.rand.Next(-10, 11) - num619;
					num613 = (float)Math.Sqrt(num611 * num611 + num612 * num612);
					num613 = num618 / num613;
					num611 *= num613;
					num612 *= num613;
					int num620 = NewNPC((int)base.Center.X, (int)base.Center.Y, 261);
					Main.npc[num620].velocity.X = num611;
					Main.npc[num620].velocity.Y = num612;
					Main.npc[num620].netUpdate = true;
					localAI[0] = 0f;
				}
				else
				{
					localAI[0] = 250f;
				}
			}
			else if (aiStyle == 14)
			{
				if (type == 60 || type == 151)
				{
					int num621 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100, default(Color), 2f);
					Main.dust[num621].noGravity = true;
				}
				if (type == 150 && Main.rand.Next(10) == 0)
				{
					int num622 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 67, base.velocity.X * 0.5f, base.velocity.Y * 0.5f, 90, default(Color), 1.5f);
					Main.dust[num622].noGravity = true;
					Main.dust[num622].velocity *= 0.2f;
					Main.dust[num622].noLight = true;
				}
				noGravity = true;
				if (collideX)
				{
					base.velocity.X = oldVelocity.X * -0.5f;
					if (base.direction == -1 && base.velocity.X > 0f && base.velocity.X < 2f)
					{
						base.velocity.X = 2f;
					}
					if (base.direction == 1 && base.velocity.X < 0f && base.velocity.X > -2f)
					{
						base.velocity.X = -2f;
					}
				}
				if (collideY)
				{
					base.velocity.Y = oldVelocity.Y * -0.5f;
					if (base.velocity.Y > 0f && base.velocity.Y < 1f)
					{
						base.velocity.Y = 1f;
					}
					if (base.velocity.Y < 0f && base.velocity.Y > -1f)
					{
						base.velocity.Y = -1f;
					}
				}
				if (type == 226)
				{
					int direction4 = 1;
					int num623 = 1;
					if (base.velocity.X < 0f)
					{
						direction4 = -1;
					}
					if (base.velocity.Y < 0f)
					{
						num623 = -1;
					}
					TargetClosest();
					if (!Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						base.direction = direction4;
						directionY = num623;
					}
				}
				else
				{
					TargetClosest();
				}
				if (type == 158)
				{
					if ((double)base.position.Y < Main.worldSurface * 16.0 && Main.dayTime && !Main.eclipse)
					{
						directionY = -1;
						base.direction *= -1;
					}
					if (base.direction == -1 && base.velocity.X > -7f)
					{
						base.velocity.X -= 0.2f;
						if (base.velocity.X > 4f)
						{
							base.velocity.X -= 0.1f;
						}
						else if (base.velocity.X > 0f)
						{
							base.velocity.X += 0.05f;
						}
						if (base.velocity.X < -7f)
						{
							base.velocity.X = -7f;
						}
					}
					else if (base.direction == 1 && base.velocity.X < 7f)
					{
						base.velocity.X += 0.2f;
						if (base.velocity.X < -4f)
						{
							base.velocity.X += 0.1f;
						}
						else if (base.velocity.X < 0f)
						{
							base.velocity.X -= 0.05f;
						}
						if (base.velocity.X > 7f)
						{
							base.velocity.X = 7f;
						}
					}
					if (directionY == -1 && base.velocity.Y > -7f)
					{
						base.velocity.Y -= 0.2f;
						if (base.velocity.Y > 4f)
						{
							base.velocity.Y -= 0.1f;
						}
						else if (base.velocity.Y > 0f)
						{
							base.velocity.Y += 0.05f;
						}
						if (base.velocity.Y < -7f)
						{
							base.velocity.Y = -7f;
						}
					}
					else if (directionY == 1 && base.velocity.Y < 7f)
					{
						base.velocity.Y += 0.2f;
						if (base.velocity.Y < -4f)
						{
							base.velocity.Y += 0.1f;
						}
						else if (base.velocity.Y < 0f)
						{
							base.velocity.Y -= 0.05f;
						}
						if (base.velocity.Y > 7f)
						{
							base.velocity.Y = 7f;
						}
					}
				}
				else if (type == 226)
				{
					if (base.direction == -1 && base.velocity.X > -4f)
					{
						base.velocity.X -= 0.2f;
						if (base.velocity.X > 4f)
						{
							base.velocity.X -= 0.1f;
						}
						else if (base.velocity.X > 0f)
						{
							base.velocity.X += 0.05f;
						}
						if (base.velocity.X < -4f)
						{
							base.velocity.X = -4f;
						}
					}
					else if (base.direction == 1 && base.velocity.X < 4f)
					{
						base.velocity.X += 0.2f;
						if (base.velocity.X < -4f)
						{
							base.velocity.X += 0.1f;
						}
						else if (base.velocity.X < 0f)
						{
							base.velocity.X -= 0.05f;
						}
						if (base.velocity.X > 4f)
						{
							base.velocity.X = 4f;
						}
					}
					if (directionY == -1 && (double)base.velocity.Y > -2.5)
					{
						base.velocity.Y -= 0.1f;
						if ((double)base.velocity.Y > 2.5)
						{
							base.velocity.Y -= 0.05f;
						}
						else if (base.velocity.Y > 0f)
						{
							base.velocity.Y += 0.03f;
						}
						if ((double)base.velocity.Y < -2.5)
						{
							base.velocity.Y = -2.5f;
						}
					}
					else if (directionY == 1 && (double)base.velocity.Y < 2.5)
					{
						base.velocity.Y += 0.1f;
						if ((double)base.velocity.Y < -2.5)
						{
							base.velocity.Y += 0.05f;
						}
						else if (base.velocity.Y < 0f)
						{
							base.velocity.Y -= 0.03f;
						}
						if ((double)base.velocity.Y > 2.5)
						{
							base.velocity.Y = 2.5f;
						}
					}
				}
				else
				{
					if (base.direction == -1 && base.velocity.X > -4f)
					{
						base.velocity.X -= 0.1f;
						if (base.velocity.X > 4f)
						{
							base.velocity.X -= 0.1f;
						}
						else if (base.velocity.X > 0f)
						{
							base.velocity.X += 0.05f;
						}
						if (base.velocity.X < -4f)
						{
							base.velocity.X = -4f;
						}
					}
					else if (base.direction == 1 && base.velocity.X < 4f)
					{
						base.velocity.X += 0.1f;
						if (base.velocity.X < -4f)
						{
							base.velocity.X += 0.1f;
						}
						else if (base.velocity.X < 0f)
						{
							base.velocity.X -= 0.05f;
						}
						if (base.velocity.X > 4f)
						{
							base.velocity.X = 4f;
						}
					}
					if (directionY == -1 && (double)base.velocity.Y > -1.5)
					{
						base.velocity.Y -= 0.04f;
						if ((double)base.velocity.Y > 1.5)
						{
							base.velocity.Y -= 0.05f;
						}
						else if (base.velocity.Y > 0f)
						{
							base.velocity.Y += 0.03f;
						}
						if ((double)base.velocity.Y < -1.5)
						{
							base.velocity.Y = -1.5f;
						}
					}
					else if (directionY == 1 && (double)base.velocity.Y < 1.5)
					{
						base.velocity.Y += 0.04f;
						if ((double)base.velocity.Y < -1.5)
						{
							base.velocity.Y += 0.05f;
						}
						else if (base.velocity.Y < 0f)
						{
							base.velocity.Y -= 0.03f;
						}
						if ((double)base.velocity.Y > 1.5)
						{
							base.velocity.Y = 1.5f;
						}
					}
				}
				if (type == 49 || type == 51 || type == 60 || type == 62 || type == 66 || type == 93 || type == 137 || type == 150 || type == 151 || type == 152)
				{
					if (wet)
					{
						if (base.velocity.Y > 0f)
						{
							base.velocity.Y *= 0.95f;
						}
						base.velocity.Y -= 0.5f;
						if (base.velocity.Y < -4f)
						{
							base.velocity.Y = -4f;
						}
						TargetClosest();
					}
					if (type == 60)
					{
						if (base.direction == -1 && base.velocity.X > -4f)
						{
							base.velocity.X -= 0.1f;
							if (base.velocity.X > 4f)
							{
								base.velocity.X -= 0.07f;
							}
							else if (base.velocity.X > 0f)
							{
								base.velocity.X += 0.03f;
							}
							if (base.velocity.X < -4f)
							{
								base.velocity.X = -4f;
							}
						}
						else if (base.direction == 1 && base.velocity.X < 4f)
						{
							base.velocity.X += 0.1f;
							if (base.velocity.X < -4f)
							{
								base.velocity.X += 0.07f;
							}
							else if (base.velocity.X < 0f)
							{
								base.velocity.X -= 0.03f;
							}
							if (base.velocity.X > 4f)
							{
								base.velocity.X = 4f;
							}
						}
						if (directionY == -1 && (double)base.velocity.Y > -1.5)
						{
							base.velocity.Y -= 0.04f;
							if ((double)base.velocity.Y > 1.5)
							{
								base.velocity.Y -= 0.03f;
							}
							else if (base.velocity.Y > 0f)
							{
								base.velocity.Y += 0.02f;
							}
							if ((double)base.velocity.Y < -1.5)
							{
								base.velocity.Y = -1.5f;
							}
						}
						else if (directionY == 1 && (double)base.velocity.Y < 1.5)
						{
							base.velocity.Y += 0.04f;
							if ((double)base.velocity.Y < -1.5)
							{
								base.velocity.Y += 0.03f;
							}
							else if (base.velocity.Y < 0f)
							{
								base.velocity.Y -= 0.02f;
							}
							if ((double)base.velocity.Y > 1.5)
							{
								base.velocity.Y = 1.5f;
							}
						}
					}
					else
					{
						if (base.direction == -1 && base.velocity.X > -4f)
						{
							base.velocity.X -= 0.1f;
							if (base.velocity.X > 4f)
							{
								base.velocity.X -= 0.1f;
							}
							else if (base.velocity.X > 0f)
							{
								base.velocity.X += 0.05f;
							}
							if (base.velocity.X < -4f)
							{
								base.velocity.X = -4f;
							}
						}
						else if (base.direction == 1 && base.velocity.X < 4f)
						{
							base.velocity.X += 0.1f;
							if (base.velocity.X < -4f)
							{
								base.velocity.X += 0.1f;
							}
							else if (base.velocity.X < 0f)
							{
								base.velocity.X -= 0.05f;
							}
							if (base.velocity.X > 4f)
							{
								base.velocity.X = 4f;
							}
						}
						if (directionY == -1 && (double)base.velocity.Y > -1.5)
						{
							base.velocity.Y -= 0.04f;
							if ((double)base.velocity.Y > 1.5)
							{
								base.velocity.Y -= 0.05f;
							}
							else if (base.velocity.Y > 0f)
							{
								base.velocity.Y += 0.03f;
							}
							if ((double)base.velocity.Y < -1.5)
							{
								base.velocity.Y = -1.5f;
							}
						}
						else if (directionY == 1 && (double)base.velocity.Y < 1.5)
						{
							base.velocity.Y += 0.04f;
							if ((double)base.velocity.Y < -1.5)
							{
								base.velocity.Y += 0.05f;
							}
							else if (base.velocity.Y < 0f)
							{
								base.velocity.Y -= 0.03f;
							}
							if ((double)base.velocity.Y > 1.5)
							{
								base.velocity.Y = 1.5f;
							}
						}
					}
				}
				if (type == 158 && Main.netMode != 1)
				{
					Vector2 vector62 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num624 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector62.X;
					float num625 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector62.Y;
					float num626 = (float)Math.Sqrt(num624 * num624 + num625 * num625);
					if (num626 < 200f && base.position.Y + (float)height < Main.player[target].position.Y + (float)Main.player[target].height && Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						Transform(159);
					}
				}
				this.ai[1] += 1f;
				if (type == 158)
				{
					this.ai[1] += 1f;
				}
				if (this.ai[1] > 200f)
				{
					if (!Main.player[target].wet && Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						this.ai[1] = 0f;
					}
					float num627 = 0.2f;
					float num628 = 0.1f;
					float num629 = 4f;
					float num630 = 1.5f;
					if (type == 48 || type == 62 || type == 66)
					{
						num627 = 0.12f;
						num628 = 0.07f;
						num629 = 3f;
						num630 = 1.25f;
					}
					if (this.ai[1] > 1000f)
					{
						this.ai[1] = 0f;
					}
					this.ai[2] += 1f;
					if (this.ai[2] > 0f)
					{
						if (base.velocity.Y < num630)
						{
							base.velocity.Y += num628;
						}
					}
					else if (base.velocity.Y > 0f - num630)
					{
						base.velocity.Y -= num628;
					}
					if (this.ai[2] < -150f || this.ai[2] > 150f)
					{
						if (base.velocity.X < num629)
						{
							base.velocity.X += num627;
						}
					}
					else if (base.velocity.X > 0f - num629)
					{
						base.velocity.X -= num627;
					}
					if (this.ai[2] > 300f)
					{
						this.ai[2] = -300f;
					}
				}
				if (Main.netMode == 1)
				{
					return;
				}
				if (type == 48)
				{
					this.ai[0] += 1f;
					if (this.ai[0] == 30f || this.ai[0] == 60f || this.ai[0] == 90f)
					{
						if (Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
						{
							float num631 = 6f;
							Vector2 vector63 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
							float num632 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector63.X + (float)Main.rand.Next(-100, 101);
							float num633 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector63.Y + (float)Main.rand.Next(-100, 101);
							float num634 = (float)Math.Sqrt(num632 * num632 + num633 * num633);
							num634 = num631 / num634;
							num632 *= num634;
							num633 *= num634;
							int num635 = 15;
							int num636 = 38;
							int num637 = Projectile.NewProjectile(vector63.X, vector63.Y, num632, num633, num636, num635, 0f, Main.myPlayer);
							Main.projectile[num637].timeLeft = 300;
						}
					}
					else if (this.ai[0] >= (float)(400 + Main.rand.Next(400)))
					{
						this.ai[0] = 0f;
					}
				}
				if (type == 62 || type == 66)
				{
					this.ai[0] += 1f;
					if (this.ai[0] == 20f || this.ai[0] == 40f || this.ai[0] == 60f || this.ai[0] == 80f)
					{
						if (Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
						{
							float num638 = 0.2f;
							Vector2 vector64 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
							float num639 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector64.X + (float)Main.rand.Next(-100, 101);
							float num640 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector64.Y + (float)Main.rand.Next(-100, 101);
							float num641 = (float)Math.Sqrt(num639 * num639 + num640 * num640);
							num641 = num638 / num641;
							num639 *= num641;
							num640 *= num641;
							int num642 = 21;
							int num643 = 44;
							int num644 = Projectile.NewProjectile(vector64.X, vector64.Y, num639, num640, num643, num642, 0f, Main.myPlayer);
							Main.projectile[num644].timeLeft = 300;
						}
					}
					else if (this.ai[0] >= (float)(300 + Main.rand.Next(300)))
					{
						this.ai[0] = 0f;
					}
				}
				if (type != 156)
				{
					return;
				}
				this.ai[0] += 1f;
				if (this.ai[0] == 20f || this.ai[0] == 40f || this.ai[0] == 60f || this.ai[0] == 80f || this.ai[0] == 100f)
				{
					if (Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						float num645 = 0.2f;
						Vector2 vector65 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						float num646 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector65.X + (float)Main.rand.Next(-50, 51);
						float num647 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector65.Y + (float)Main.rand.Next(-50, 51);
						float num648 = (float)Math.Sqrt(num646 * num646 + num647 * num647);
						num648 = num645 / num648;
						num646 *= num648;
						num647 *= num648;
						int num649 = 80;
						int num650 = 115;
						vector65 += base.velocity * 5f;
						int num651 = Projectile.NewProjectile(vector65.X + num646 * 100f, vector65.Y + num647 * 100f, num646, num647, num650, num649, 0f, Main.myPlayer);
						Main.projectile[num651].timeLeft = 300;
					}
				}
				else if (this.ai[0] >= (float)(250 + Main.rand.Next(250)))
				{
					this.ai[0] = 0f;
				}
			}
			else if (aiStyle == 15)
			{
				float num652 = 1f;
				bool flag61 = false;
				bool flag62 = false;
				aiAction = 0;
				if (this.ai[3] == 0f && life > 0)
				{
					this.ai[3] = lifeMax;
				}
				if (localAI[3] == 0f && Main.netMode != 1)
				{
					this.ai[0] = -100f;
					localAI[3] = 1f;
					TargetClosest();
					netUpdate = true;
				}
				if (Main.player[target].dead)
				{
					TargetClosest();
					if (Main.player[target].dead)
					{
						timeLeft = 0;
						if (Main.player[target].Center.X < base.Center.X)
						{
							base.direction = 1;
						}
						else
						{
							base.direction = -1;
						}
					}
				}
				if (!Main.player[target].dead && this.ai[2] >= 300f && this.ai[1] < 5f && base.velocity.Y == 0f)
				{
					this.ai[2] = 0f;
					this.ai[0] = 0f;
					this.ai[1] = 5f;
					if (Main.netMode != 1)
					{
						TargetClosest(false);
						Point point5 = base.Center.ToTileCoordinates();
						Point point6 = Main.player[target].Center.ToTileCoordinates();
						Vector2 vector66 = Main.player[target].Center - base.Center;
						int num653 = 10;
						int num654 = 0;
						int num655 = 7;
						int num656 = 0;
						bool flag63 = false;
						if (vector66.Length() > 2000f)
						{
							flag63 = true;
							num656 = 100;
						}
						while (!flag63 && num656 < 100)
						{
							num656++;
							int num657 = Main.rand.Next(point6.X - num653, point6.X + num653 + 1);
							int num658 = Main.rand.Next(point6.Y - num653, point6.Y + 1);
							if ((num658 >= point6.Y - num655 && num658 <= point6.Y + num655 && num657 >= point6.X - num655 && num657 <= point6.X + num655) || (num658 >= point5.Y - num654 && num658 <= point5.Y + num654 && num657 >= point5.X - num654 && num657 <= point5.X + num654) || Main.tile[num657, num658].nactive())
							{
								continue;
							}
							int num659 = num658;
							int num660 = 0;
							if (Main.tile[num657, num659].nactive() && Main.tileSolid[Main.tile[num657, num659].type] && !Main.tileSolidTop[Main.tile[num657, num659].type])
							{
								num660 = 1;
							}
							else
							{
								for (; num660 < 150 && num659 + num660 < Main.maxTilesY; num660++)
								{
									int num661 = num659 + num660;
									if (Main.tile[num657, num661].nactive() && Main.tileSolid[Main.tile[num657, num661].type] && !Main.tileSolidTop[Main.tile[num657, num661].type])
									{
										num660--;
										break;
									}
								}
							}
							num658 += num660;
							bool flag64 = true;
							if (flag64 && Main.tile[num657, num658].lava())
							{
								flag64 = false;
							}
							if (flag64 && !Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0))
							{
								flag64 = false;
							}
							if (flag64)
							{
								localAI[1] = num657 * 16 + 8;
								localAI[2] = num658 * 16 + 16;
								flag63 = true;
								break;
							}
						}
						if (num656 >= 100)
						{
							Vector2 bottom = Main.player[Player.FindClosest(base.position, width, height)].Bottom;
							localAI[1] = bottom.X;
							localAI[2] = bottom.Y;
						}
					}
				}
				if (!Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0))
				{
					this.ai[2] += 1f;
				}
				if (Math.Abs(base.Top.Y - Main.player[target].Bottom.Y) > 320f)
				{
					this.ai[2] += 1f;
				}
				if (this.ai[1] == 5f)
				{
					flag61 = true;
					aiAction = 1;
					this.ai[0] += 1f;
					num652 = MathHelper.Clamp((60f - this.ai[0]) / 60f, 0f, 1f);
					num652 = 0.5f + num652 * 0.5f;
					if (this.ai[0] >= 60f)
					{
						flag62 = true;
					}
					if (this.ai[0] == 60f)
					{
						Gore.NewGore(base.Center + new Vector2(-40f, -height / 2), base.velocity, 734);
					}
					if (this.ai[0] >= 60f && Main.netMode != 1)
					{
						base.Bottom = new Vector2(localAI[1], localAI[2]);
						this.ai[1] = 6f;
						this.ai[0] = 0f;
						netUpdate = true;
					}
					if (Main.netMode == 1 && this.ai[0] >= 120f)
					{
						this.ai[1] = 6f;
						this.ai[0] = 0f;
					}
					if (!flag62)
					{
						for (int num662 = 0; num662 < 10; num662++)
						{
							int num663 = Dust.NewDust(base.position + Vector2.UnitX * -20f, width + 40, height, 4, base.velocity.X, base.velocity.Y, 150, new Color(78, 136, 255, 80), 2f);
							Main.dust[num663].noGravity = true;
							Main.dust[num663].velocity *= 0.5f;
						}
					}
				}
				else if (this.ai[1] == 6f)
				{
					flag61 = true;
					aiAction = 0;
					this.ai[0] += 1f;
					num652 = MathHelper.Clamp(this.ai[0] / 30f, 0f, 1f);
					num652 = 0.5f + num652 * 0.5f;
					if (this.ai[0] >= 30f && Main.netMode != 1)
					{
						this.ai[1] = 0f;
						this.ai[0] = 0f;
						netUpdate = true;
						TargetClosest();
					}
					if (Main.netMode == 1 && this.ai[0] >= 60f)
					{
						this.ai[1] = 0f;
						this.ai[0] = 0f;
						TargetClosest();
					}
					for (int num664 = 0; num664 < 10; num664++)
					{
						int num665 = Dust.NewDust(base.position + Vector2.UnitX * -20f, width + 40, height, 4, base.velocity.X, base.velocity.Y, 150, new Color(78, 136, 255, 80), 2f);
						Main.dust[num665].noGravity = true;
						Main.dust[num665].velocity *= 2f;
					}
				}
				dontTakeDamage = (hide = flag62);
				if (base.velocity.Y == 0f)
				{
					base.velocity.X *= 0.8f;
					if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
					{
						base.velocity.X = 0f;
					}
					if (!flag61)
					{
						this.ai[0] += 2f;
						if ((double)life < (double)lifeMax * 0.8)
						{
							this.ai[0] += 1f;
						}
						if ((double)life < (double)lifeMax * 0.6)
						{
							this.ai[0] += 1f;
						}
						if ((double)life < (double)lifeMax * 0.4)
						{
							this.ai[0] += 2f;
						}
						if ((double)life < (double)lifeMax * 0.2)
						{
							this.ai[0] += 3f;
						}
						if ((double)life < (double)lifeMax * 0.1)
						{
							this.ai[0] += 4f;
						}
						if (this.ai[0] >= 0f)
						{
							netUpdate = true;
							TargetClosest();
							if (this.ai[1] == 3f)
							{
								base.velocity.Y = -13f;
								base.velocity.X += 3.5f * (float)base.direction;
								this.ai[0] = -200f;
								this.ai[1] = 0f;
							}
							else if (this.ai[1] == 2f)
							{
								base.velocity.Y = -6f;
								base.velocity.X += 4.5f * (float)base.direction;
								this.ai[0] = -120f;
								this.ai[1] += 1f;
							}
							else
							{
								base.velocity.Y = -8f;
								base.velocity.X += 4f * (float)base.direction;
								this.ai[0] = -120f;
								this.ai[1] += 1f;
							}
						}
						else if (this.ai[0] >= -30f)
						{
							aiAction = 1;
						}
					}
				}
				else if (target < 16 && ((base.direction == 1 && base.velocity.X < 3f) || (base.direction == -1 && base.velocity.X > -3f)))
				{
					if ((base.direction == -1 && (double)base.velocity.X < 0.1) || (base.direction == 1 && (double)base.velocity.X > -0.1))
					{
						base.velocity.X += 0.2f * (float)base.direction;
					}
					else
					{
						base.velocity.X *= 0.93f;
					}
				}
				int num666 = Dust.NewDust(base.position, width, height, 4, base.velocity.X, base.velocity.Y, 255, new Color(0, 80, 255, 80), scale * 1.2f);
				Main.dust[num666].noGravity = true;
				Main.dust[num666].velocity *= 0.5f;
				if (life <= 0)
				{
					return;
				}
				float num667 = (float)life / (float)lifeMax;
				num667 = num667 * 0.5f + 0.75f;
				num667 *= num652;
				if (num667 != scale)
				{
					base.position.X += width / 2;
					base.position.Y += height;
					scale = num667;
					width = (int)(98f * scale);
					height = (int)(92f * scale);
					base.position.X -= width / 2;
					base.position.Y -= height;
				}
				if (Main.netMode == 1)
				{
					return;
				}
				int num668 = (int)((double)lifeMax * 0.05);
				if (!((float)(life + num668) < this.ai[3]))
				{
					return;
				}
				this.ai[3] = life;
				int num669 = Main.rand.Next(1, 4);
				for (int num670 = 0; num670 < num669; num670++)
				{
					int x = (int)(base.position.X + (float)Main.rand.Next(width - 32));
					int y = (int)(base.position.Y + (float)Main.rand.Next(height - 32));
					int num671 = 1;
					if (Main.expertMode && Main.rand.Next(4) == 0)
					{
						num671 = 535;
					}
					int num672 = NewNPC(x, y, num671);
					Main.npc[num672].SetDefaults(num671);
					Main.npc[num672].velocity.X = (float)Main.rand.Next(-15, 16) * 0.1f;
					Main.npc[num672].velocity.Y = (float)Main.rand.Next(-30, 1) * 0.1f;
					Main.npc[num672].ai[0] = -1000 * Main.rand.Next(3);
					Main.npc[num672].ai[1] = 0f;
					if (Main.netMode == 2 && num672 < 200)
					{
						NetMessage.SendData(23, -1, -1, "", num672);
					}
				}
			}
			else if (aiStyle == 16)
			{
				if (base.direction == 0)
				{
					TargetClosest();
				}
				if (wet)
				{
					bool flag65 = false;
					if (type != 55)
					{
						TargetClosest(false);
						if (Main.player[target].wet && !Main.player[target].dead)
						{
							flag65 = true;
						}
					}
					if (!flag65)
					{
						if (collideX)
						{
							base.velocity.X *= -1f;
							base.direction *= -1;
							netUpdate = true;
						}
						if (collideY)
						{
							netUpdate = true;
							if (base.velocity.Y > 0f)
							{
								base.velocity.Y = Math.Abs(base.velocity.Y) * -1f;
								directionY = -1;
								this.ai[0] = -1f;
							}
							else if (base.velocity.Y < 0f)
							{
								base.velocity.Y = Math.Abs(base.velocity.Y);
								directionY = 1;
								this.ai[0] = 1f;
							}
						}
					}
					if (type == 102)
					{
						Lighting.AddLight((int)(base.position.X + (float)(width / 2) + (float)(base.direction * (width + 8))) / 16, (int)(base.position.Y + 2f) / 16, 0.07f, 0.04f, 0.025f);
					}
					if (flag65)
					{
						TargetClosest();
						if (type == 157)
						{
							if (base.velocity.X > 0f && base.direction < 0)
							{
								base.velocity.X *= 0.95f;
							}
							if (base.velocity.X < 0f && base.direction > 0)
							{
								base.velocity.X *= 0.95f;
							}
							base.velocity.X += (float)base.direction * 0.25f;
							base.velocity.Y += (float)directionY * 0.2f;
							if (base.velocity.X > 8f)
							{
								base.velocity.X = 7f;
							}
							if (base.velocity.X < -8f)
							{
								base.velocity.X = -7f;
							}
							if (base.velocity.Y > 5f)
							{
								base.velocity.Y = 4f;
							}
							if (base.velocity.Y < -5f)
							{
								base.velocity.Y = -4f;
							}
						}
						else if (type == 65 || type == 102)
						{
							base.velocity.X += (float)base.direction * 0.15f;
							base.velocity.Y += (float)directionY * 0.15f;
							if (base.velocity.X > 5f)
							{
								base.velocity.X = 5f;
							}
							if (base.velocity.X < -5f)
							{
								base.velocity.X = -5f;
							}
							if (base.velocity.Y > 3f)
							{
								base.velocity.Y = 3f;
							}
							if (base.velocity.Y < -3f)
							{
								base.velocity.Y = -3f;
							}
						}
						else
						{
							base.velocity.X += (float)base.direction * 0.1f;
							base.velocity.Y += (float)directionY * 0.1f;
							if (base.velocity.X > 3f)
							{
								base.velocity.X = 3f;
							}
							if (base.velocity.X < -3f)
							{
								base.velocity.X = -3f;
							}
							if (base.velocity.Y > 2f)
							{
								base.velocity.Y = 2f;
							}
							if (base.velocity.Y < -2f)
							{
								base.velocity.Y = -2f;
							}
						}
					}
					else
					{
						if (type == 157)
						{
							if (Main.player[target].position.Y > base.position.Y)
							{
								directionY = 1;
							}
							else
							{
								directionY = -1;
							}
							base.velocity.X += (float)base.direction * 0.2f;
							if (base.velocity.X < -2f || base.velocity.X > 2f)
							{
								base.velocity.X *= 0.95f;
							}
							if (this.ai[0] == -1f)
							{
								float num673 = -0.6f;
								if (directionY < 0)
								{
									num673 = -1f;
								}
								if (directionY > 0)
								{
									num673 = -0.2f;
								}
								base.velocity.Y -= 0.02f;
								if (base.velocity.Y < num673)
								{
									this.ai[0] = 1f;
								}
							}
							else
							{
								float num674 = 0.6f;
								if (directionY < 0)
								{
									num674 = 0.2f;
								}
								if (directionY > 0)
								{
									num674 = 1f;
								}
								base.velocity.Y += 0.02f;
								if (base.velocity.Y > num674)
								{
									this.ai[0] = -1f;
								}
							}
						}
						else
						{
							base.velocity.X += (float)base.direction * 0.1f;
							if (base.velocity.X < -1f || base.velocity.X > 1f)
							{
								base.velocity.X *= 0.95f;
							}
							if (this.ai[0] == -1f)
							{
								base.velocity.Y -= 0.01f;
								if ((double)base.velocity.Y < -0.3)
								{
									this.ai[0] = 1f;
								}
							}
							else
							{
								base.velocity.Y += 0.01f;
								if ((double)base.velocity.Y > 0.3)
								{
									this.ai[0] = -1f;
								}
							}
						}
						int num675 = (int)(base.position.X + (float)(width / 2)) / 16;
						int num676 = (int)(base.position.Y + (float)(height / 2)) / 16;
						if (Main.tile[num675, num676 - 1] == null)
						{
							Main.tile[num675, num676 - 1] = new Tile();
						}
						if (Main.tile[num675, num676 + 1] == null)
						{
							Main.tile[num675, num676 + 1] = new Tile();
						}
						if (Main.tile[num675, num676 + 2] == null)
						{
							Main.tile[num675, num676 + 2] = new Tile();
						}
						if (Main.tile[num675, num676 - 1].liquid > 128)
						{
							if (Main.tile[num675, num676 + 1].active())
							{
								this.ai[0] = -1f;
							}
							else if (Main.tile[num675, num676 + 2].active())
							{
								this.ai[0] = -1f;
							}
						}
						if (type != 157 && ((double)base.velocity.Y > 0.4 || (double)base.velocity.Y < -0.4))
						{
							base.velocity.Y *= 0.95f;
						}
					}
				}
				else
				{
					if (base.velocity.Y == 0f)
					{
						if (type == 65)
						{
							base.velocity.X *= 0.94f;
							if ((double)base.velocity.X > -0.2 && (double)base.velocity.X < 0.2)
							{
								base.velocity.X = 0f;
							}
						}
						else if (Main.netMode != 1)
						{
							base.velocity.Y = (float)Main.rand.Next(-50, -20) * 0.1f;
							base.velocity.X = (float)Main.rand.Next(-20, 20) * 0.1f;
							netUpdate = true;
						}
					}
					base.velocity.Y += 0.3f;
					if (base.velocity.Y > 10f)
					{
						base.velocity.Y = 10f;
					}
					this.ai[0] = 1f;
				}
				rotation = base.velocity.Y * (float)base.direction * 0.1f;
				if ((double)rotation < -0.2)
				{
					rotation = -0.2f;
				}
				if ((double)rotation > 0.2)
				{
					rotation = 0.2f;
				}
			}
			else if (aiStyle == 17)
			{
				noGravity = true;
				if (this.ai[0] == 0f)
				{
					noGravity = false;
					TargetClosest();
					if (Main.netMode != 1)
					{
						if (base.velocity.X != 0f || base.velocity.Y < 0f || (double)base.velocity.Y > 0.3)
						{
							this.ai[0] = 1f;
							netUpdate = true;
						}
						else
						{
							Rectangle rectangle4 = new Rectangle((int)Main.player[target].position.X, (int)Main.player[target].position.Y, Main.player[target].width, Main.player[target].height);
							if (new Rectangle((int)base.position.X - 100, (int)base.position.Y - 100, width + 200, height + 200).Intersects(rectangle4) || life < lifeMax)
							{
								this.ai[0] = 1f;
								base.velocity.Y -= 6f;
								netUpdate = true;
							}
						}
					}
				}
				else if (!Main.player[target].dead)
				{
					if (collideX)
					{
						base.velocity.X = oldVelocity.X * -0.5f;
						if (base.direction == -1 && base.velocity.X > 0f && base.velocity.X < 2f)
						{
							base.velocity.X = 2f;
						}
						if (base.direction == 1 && base.velocity.X < 0f && base.velocity.X > -2f)
						{
							base.velocity.X = -2f;
						}
					}
					if (collideY)
					{
						base.velocity.Y = oldVelocity.Y * -0.5f;
						if (base.velocity.Y > 0f && base.velocity.Y < 1f)
						{
							base.velocity.Y = 1f;
						}
						if (base.velocity.Y < 0f && base.velocity.Y > -1f)
						{
							base.velocity.Y = -1f;
						}
					}
					TargetClosest();
					if (base.direction == -1 && base.velocity.X > -3f)
					{
						base.velocity.X -= 0.1f;
						if (base.velocity.X > 3f)
						{
							base.velocity.X -= 0.1f;
						}
						else if (base.velocity.X > 0f)
						{
							base.velocity.X -= 0.05f;
						}
						if (base.velocity.X < -3f)
						{
							base.velocity.X = -3f;
						}
					}
					else if (base.direction == 1 && base.velocity.X < 3f)
					{
						base.velocity.X += 0.1f;
						if (base.velocity.X < -3f)
						{
							base.velocity.X += 0.1f;
						}
						else if (base.velocity.X < 0f)
						{
							base.velocity.X += 0.05f;
						}
						if (base.velocity.X > 3f)
						{
							base.velocity.X = 3f;
						}
					}
					float num677 = Math.Abs(base.position.X + (float)(width / 2) - (Main.player[target].position.X + (float)(Main.player[target].width / 2)));
					float num678 = Main.player[target].position.Y - (float)(height / 2);
					if (num677 > 50f)
					{
						num678 -= 100f;
					}
					if (base.position.Y < num678)
					{
						base.velocity.Y += 0.05f;
						if (base.velocity.Y < 0f)
						{
							base.velocity.Y += 0.01f;
						}
					}
					else
					{
						base.velocity.Y -= 0.05f;
						if (base.velocity.Y > 0f)
						{
							base.velocity.Y -= 0.01f;
						}
					}
					if (base.velocity.Y < -3f)
					{
						base.velocity.Y = -3f;
					}
					if (base.velocity.Y > 3f)
					{
						base.velocity.Y = 3f;
					}
				}
				if (wet)
				{
					if (base.velocity.Y > 0f)
					{
						base.velocity.Y *= 0.95f;
					}
					base.velocity.Y -= 0.5f;
					if (base.velocity.Y < -4f)
					{
						base.velocity.Y = -4f;
					}
					TargetClosest();
				}
			}
			else if (aiStyle == 18)
			{
				bool flag66 = false;
				if (wet && this.ai[1] == 1f)
				{
					flag66 = true;
				}
				else
				{
					dontTakeDamage = false;
				}
				if (Main.expertMode && (type == 63 || type == 64 || type == 103 || type == 242))
				{
					if (wet)
					{
						if (target >= 0 && Main.player[target].wet && !Main.player[target].dead && (Main.player[target].Center - base.Center).Length() < 150f)
						{
							if (this.ai[1] == 0f)
							{
								this.ai[2] += 2f;
							}
							else
							{
								this.ai[2] -= 0.25f;
							}
						}
						if (flag66)
						{
							dontTakeDamage = true;
							this.ai[2] += 1f;
							if (this.ai[2] >= 120f)
							{
								this.ai[1] = 0f;
							}
						}
						else
						{
							this.ai[2] += 1f;
							if (this.ai[2] >= 420f)
							{
								this.ai[1] = 1f;
								this.ai[2] = 0f;
							}
						}
					}
					else
					{
						this.ai[1] = 0f;
						this.ai[2] = 0f;
					}
				}
				float num679 = 1f;
				if (flag66)
				{
					num679 += 0.5f;
				}
				if (type == 63)
				{
					Lighting.AddLight((int)(base.position.X + (float)(height / 2)) / 16, (int)(base.position.Y + (float)(height / 2)) / 16, 0.05f * num679, 0.15f * num679, 0.4f * num679);
				}
				else if (type == 103)
				{
					Lighting.AddLight((int)(base.position.X + (float)(height / 2)) / 16, (int)(base.position.Y + (float)(height / 2)) / 16, 0.05f * num679, 0.45f * num679, 0.1f * num679);
				}
				else if (type != 221 && type != 242)
				{
					Lighting.AddLight((int)(base.position.X + (float)(height / 2)) / 16, (int)(base.position.Y + (float)(height / 2)) / 16, 0.35f * num679, 0.05f * num679, 0.2f * num679);
				}
				if (base.direction == 0)
				{
					TargetClosest();
				}
				if (flag66)
				{
					return;
				}
				if (wet)
				{
					if (collideX)
					{
						base.velocity.X *= -1f;
						base.direction *= -1;
					}
					if (collideY)
					{
						if (base.velocity.Y > 0f)
						{
							base.velocity.Y = Math.Abs(base.velocity.Y) * -1f;
							directionY = -1;
							this.ai[0] = -1f;
						}
						else if (base.velocity.Y < 0f)
						{
							base.velocity.Y = Math.Abs(base.velocity.Y);
							directionY = 1;
							this.ai[0] = 1f;
						}
					}
					bool flag67 = false;
					if (!friendly)
					{
						TargetClosest(false);
						if (Main.player[target].wet && !Main.player[target].dead)
						{
							flag67 = true;
						}
					}
					if (flag67)
					{
						localAI[2] = 1f;
						rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
						base.velocity *= 0.98f;
						float num680 = 0.2f;
						if (type == 103)
						{
							base.velocity *= 0.98f;
							num680 = 0.6f;
						}
						if (type == 221)
						{
							base.velocity *= 0.99f;
							num680 = 1f;
						}
						if (type == 242)
						{
							base.velocity *= 0.995f;
							num680 = 3f;
						}
						if (base.velocity.X > 0f - num680 && base.velocity.X < num680 && base.velocity.Y > 0f - num680 && base.velocity.Y < num680)
						{
							if (type == 221)
							{
								localAI[0] = 1f;
							}
							TargetClosest();
							float num681 = 7f;
							if (type == 103)
							{
								num681 = 9f;
							}
							Vector2 vector67 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
							float num682 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector67.X;
							float num683 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector67.Y;
							float num684 = (float)Math.Sqrt(num682 * num682 + num683 * num683);
							num684 = num681 / num684;
							num682 *= num684;
							num683 *= num684;
							base.velocity.X = num682;
							base.velocity.Y = num683;
						}
						return;
					}
					localAI[2] = 0f;
					base.velocity.X += (float)base.direction * 0.02f;
					rotation = base.velocity.X * 0.4f;
					if (base.velocity.X < -1f || base.velocity.X > 1f)
					{
						base.velocity.X *= 0.95f;
					}
					if (this.ai[0] == -1f)
					{
						base.velocity.Y -= 0.01f;
						if (base.velocity.Y < -1f)
						{
							this.ai[0] = 1f;
						}
					}
					else
					{
						base.velocity.Y += 0.01f;
						if (base.velocity.Y > 1f)
						{
							this.ai[0] = -1f;
						}
					}
					int num685 = (int)(base.position.X + (float)(width / 2)) / 16;
					int num686 = (int)(base.position.Y + (float)(height / 2)) / 16;
					if (Main.tile[num685, num686 - 1] == null)
					{
						Main.tile[num685, num686 - 1] = new Tile();
					}
					if (Main.tile[num685, num686 + 1] == null)
					{
						Main.tile[num685, num686 + 1] = new Tile();
					}
					if (Main.tile[num685, num686 + 2] == null)
					{
						Main.tile[num685, num686 + 2] = new Tile();
					}
					if (Main.tile[num685, num686 - 1].liquid > 128)
					{
						if (Main.tile[num685, num686 + 1].active())
						{
							this.ai[0] = -1f;
						}
						else if (Main.tile[num685, num686 + 2].active())
						{
							this.ai[0] = -1f;
						}
					}
					else
					{
						this.ai[0] = 1f;
					}
					if ((double)base.velocity.Y > 1.2 || (double)base.velocity.Y < -1.2)
					{
						base.velocity.Y *= 0.99f;
					}
					return;
				}
				rotation += base.velocity.X * 0.1f;
				if (base.velocity.Y == 0f)
				{
					base.velocity.X *= 0.98f;
					if ((double)base.velocity.X > -0.01 && (double)base.velocity.X < 0.01)
					{
						base.velocity.X = 0f;
					}
				}
				base.velocity.Y += 0.2f;
				if (base.velocity.Y > 10f)
				{
					base.velocity.Y = 10f;
				}
				this.ai[0] = 1f;
			}
			else if (aiStyle == 19)
			{
				TargetClosest();
				float num687 = 12f;
				Vector2 vector68 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num688 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector68.X;
				float num689 = Main.player[target].position.Y - vector68.Y;
				float num690 = (float)Math.Sqrt(num688 * num688 + num689 * num689);
				num690 = num687 / num690;
				num688 *= num690;
				num689 *= num690;
				bool flag68 = false;
				if (directionY < 0)
				{
					rotation = (float)(Math.Atan2(num689, num688) + 1.57);
					flag68 = ((!((double)rotation < -1.2) && !((double)rotation > 1.2)) ? true : false);
					if ((double)rotation < -0.8)
					{
						rotation = -0.8f;
					}
					else if ((double)rotation > 0.8)
					{
						rotation = 0.8f;
					}
					if (base.velocity.X != 0f)
					{
						base.velocity.X *= 0.9f;
						if ((double)base.velocity.X > -0.1 || (double)base.velocity.X < 0.1)
						{
							netUpdate = true;
							base.velocity.X = 0f;
						}
					}
				}
				if (this.ai[0] > 0f)
				{
					if (this.ai[0] == 200f)
					{
						Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 5);
					}
					this.ai[0] -= 1f;
				}
				if (Main.netMode != 1 && flag68 && this.ai[0] == 0f && Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
				{
					this.ai[0] = 200f;
					int num691 = 10;
					int num692 = 31;
					int num693 = Projectile.NewProjectile(vector68.X, vector68.Y, num688, num689, num692, num691, 0f, Main.myPlayer);
					Main.projectile[num693].ai[0] = 2f;
					Main.projectile[num693].timeLeft = 300;
					Main.projectile[num693].friendly = false;
					NetMessage.SendData(27, -1, -1, "", num693);
					netUpdate = true;
				}
				try
				{
					int num694 = (int)base.position.X / 16;
					int num695 = (int)(base.position.X + (float)(width / 2)) / 16;
					int num696 = (int)(base.position.X + (float)width) / 16;
					int num697 = (int)(base.position.Y + (float)height) / 16;
					bool flag69 = false;
					if (Main.tile[num694, num697] == null)
					{
						Main.tile[num694, num697] = new Tile();
					}
					if (Main.tile[num695, num697] == null)
					{
						Main.tile[num694, num697] = new Tile();
					}
					if (Main.tile[num696, num697] == null)
					{
						Main.tile[num694, num697] = new Tile();
					}
					if ((Main.tile[num694, num697].nactive() && Main.tileSolid[Main.tile[num694, num697].type]) || (Main.tile[num695, num697].nactive() && Main.tileSolid[Main.tile[num695, num697].type]) || (Main.tile[num696, num697].nactive() && Main.tileSolid[Main.tile[num696, num697].type]))
					{
						flag69 = true;
					}
					if (flag69)
					{
						noGravity = true;
						noTileCollide = true;
						base.velocity.Y = -0.2f;
					}
					else
					{
						noGravity = false;
						noTileCollide = false;
						if (Main.rand.Next(2) == 0)
						{
							int num698 = Dust.NewDust(new Vector2(base.position.X - 4f, base.position.Y + (float)height - 8f), width + 8, 24, 32, 0f, base.velocity.Y / 2f);
							Main.dust[num698].velocity.X *= 0.4f;
							Main.dust[num698].velocity.Y *= -1f;
							if (Main.rand.Next(2) == 0)
							{
								Main.dust[num698].noGravity = true;
								Main.dust[num698].scale += 0.2f;
							}
						}
					}
				}
				catch
				{
				}
			}
			else if (aiStyle == 20)
			{
				if (this.ai[0] == 0f)
				{
					if (Main.netMode != 1)
					{
						TargetClosest();
						base.direction *= -1;
						directionY *= -1;
						base.position.Y += height / 2 + 8;
						this.ai[1] = base.position.X + (float)(width / 2);
						this.ai[2] = base.position.Y + (float)(height / 2);
						if (base.direction == 0)
						{
							base.direction = 1;
						}
						if (directionY == 0)
						{
							directionY = 1;
						}
						this.ai[3] = 1f + (float)Main.rand.Next(15) * 0.1f;
						base.velocity.Y = (float)(directionY * 6) * this.ai[3];
						this.ai[0] += 1f;
						netUpdate = true;
					}
					else
					{
						this.ai[1] = base.position.X + (float)(width / 2);
						this.ai[2] = base.position.Y + (float)(height / 2);
					}
					return;
				}
				float num699 = 6f * this.ai[3];
				float num700 = 0.2f * this.ai[3];
				float num701 = num699 / num700 / 2f;
				if (this.ai[0] >= 1f && this.ai[0] < (float)(int)num701)
				{
					base.velocity.Y = (float)directionY * num699;
					this.ai[0] += 1f;
					return;
				}
				if (this.ai[0] >= (float)(int)num701)
				{
					base.velocity.Y = 0f;
					directionY *= -1;
					base.velocity.X = num699 * (float)base.direction;
					this.ai[0] = -1f;
					return;
				}
				if (directionY > 0)
				{
					if (base.velocity.Y >= num699)
					{
						directionY *= -1;
						base.velocity.Y = num699;
					}
				}
				else if (directionY < 0 && base.velocity.Y <= 0f - num699)
				{
					directionY *= -1;
					base.velocity.Y = 0f - num699;
				}
				if (base.direction > 0)
				{
					if (base.velocity.X >= num699)
					{
						base.direction *= -1;
						base.velocity.X = num699;
					}
				}
				else if (base.direction < 0 && base.velocity.X <= 0f - num699)
				{
					base.direction *= -1;
					base.velocity.X = 0f - num699;
				}
				base.velocity.X += num700 * (float)base.direction;
				base.velocity.Y += num700 * (float)directionY;
			}
			else if (aiStyle == 21)
			{
				if (this.ai[0] == 0f)
				{
					TargetClosest();
					directionY = 1;
					this.ai[0] = 1f;
				}
				int num702 = 6;
				if (this.ai[1] == 0f)
				{
					rotation += (float)(base.direction * directionY) * 0.13f;
					if (collideY)
					{
						this.ai[0] = 2f;
					}
					if (!collideY && this.ai[0] == 2f)
					{
						base.direction = -base.direction;
						this.ai[1] = 1f;
						this.ai[0] = 1f;
					}
					if (collideX)
					{
						directionY = -directionY;
						this.ai[1] = 1f;
					}
				}
				else
				{
					rotation -= (float)(base.direction * directionY) * 0.13f;
					if (collideX)
					{
						this.ai[0] = 2f;
					}
					if (!collideX && this.ai[0] == 2f)
					{
						directionY = -directionY;
						this.ai[1] = 0f;
						this.ai[0] = 1f;
					}
					if (collideY)
					{
						base.direction = -base.direction;
						this.ai[1] = 0f;
					}
				}
				base.velocity.X = num702 * base.direction;
				base.velocity.Y = num702 * directionY;
				float num703 = (float)(270 - Main.mouseTextColor) / 400f;
				Lighting.AddLight((int)(base.position.X + (float)(width / 2)) / 16, (int)(base.position.Y + (float)(height / 2)) / 16, 0.9f, 0.3f + num703, 0.2f);
			}
			else if (aiStyle == 22)
			{
				bool flag70 = false;
				bool flag71 = type == 330 && !Main.pumpkinMoon;
				if (type == 253 && !Main.eclipse)
				{
					flag71 = true;
				}
				if (type == 490 && Main.dayTime)
				{
					flag71 = true;
				}
				if (justHit)
				{
					this.ai[2] = 0f;
				}
				if (!flag71)
				{
					if (this.ai[2] >= 0f)
					{
						int num704 = 16;
						bool flag72 = false;
						bool flag73 = false;
						if (base.position.X > this.ai[0] - (float)num704 && base.position.X < this.ai[0] + (float)num704)
						{
							flag72 = true;
						}
						else if ((base.velocity.X < 0f && base.direction > 0) || (base.velocity.X > 0f && base.direction < 0))
						{
							flag72 = true;
						}
						num704 += 24;
						if (base.position.Y > this.ai[1] - (float)num704 && base.position.Y < this.ai[1] + (float)num704)
						{
							flag73 = true;
						}
						if (flag72 && flag73)
						{
							this.ai[2] += 1f;
							if (this.ai[2] >= 30f && num704 == 16)
							{
								flag70 = true;
							}
							if (this.ai[2] >= 60f)
							{
								this.ai[2] = -200f;
								base.direction *= -1;
								base.velocity.X *= -1f;
								collideX = false;
							}
						}
						else
						{
							this.ai[0] = base.position.X;
							this.ai[1] = base.position.Y;
							this.ai[2] = 0f;
						}
						TargetClosest();
					}
					else if (type == 253)
					{
						TargetClosest();
						this.ai[2] += 2f;
					}
					else
					{
						if (type == 330)
						{
							this.ai[2] += 0.1f;
						}
						else
						{
							this.ai[2] += 1f;
						}
						if (Main.player[target].position.X + (float)(Main.player[target].width / 2) > base.position.X + (float)(width / 2))
						{
							base.direction = -1;
						}
						else
						{
							base.direction = 1;
						}
					}
				}
				int num705 = (int)((base.position.X + (float)(width / 2)) / 16f) + base.direction * 2;
				int num706 = (int)((base.position.Y + (float)height) / 16f);
				bool flag74 = true;
				bool flag75 = false;
				int num707 = 3;
				if (type == 122)
				{
					if (justHit)
					{
						this.ai[3] = 0f;
						localAI[1] = 0f;
					}
					float num708 = 7f;
					Vector2 vector69 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num709 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector69.X;
					float num710 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector69.Y;
					float num711 = (float)Math.Sqrt(num709 * num709 + num710 * num710);
					num711 = num708 / num711;
					num709 *= num711;
					num710 *= num711;
					if (Main.netMode != 1 && this.ai[3] == 32f && !Main.player[target].npcTypeNoAggro[type])
					{
						int num712 = 25;
						int num713 = 84;
						Projectile.NewProjectile(vector69.X, vector69.Y, num709, num710, num713, num712, 0f, Main.myPlayer);
					}
					num707 = 8;
					if (this.ai[3] > 0f)
					{
						this.ai[3] += 1f;
						if (this.ai[3] >= 64f)
						{
							this.ai[3] = 0f;
						}
					}
					if (Main.netMode != 1 && this.ai[3] == 0f)
					{
						localAI[1] += 1f;
						if (localAI[1] > 120f && Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height) && !Main.player[target].npcTypeNoAggro[type])
						{
							localAI[1] = 0f;
							this.ai[3] = 1f;
							netUpdate = true;
						}
					}
				}
				else if (type == 75)
				{
					num707 = 4;
					if (Main.rand.Next(6) == 0)
					{
						int num714 = Dust.NewDust(base.position, width, height, 55, 0f, 0f, 200, color);
						Main.dust[num714].velocity *= 0.3f;
					}
					if (Main.rand.Next(40) == 0)
					{
						Main.PlaySound(27, (int)base.position.X, (int)base.position.Y);
					}
				}
				else if (type == 169)
				{
					Lighting.AddLight((int)((base.position.X + (float)(width / 2)) / 16f), (int)((base.position.Y + (float)(height / 2)) / 16f), 0f, 0.6f, 0.75f);
					alpha = 30;
					if (Main.rand.Next(3) == 0)
					{
						int num715 = Dust.NewDust(base.position, width, height, 92, 0f, 0f, 200);
						Main.dust[num715].velocity *= 0.3f;
						Main.dust[num715].noGravity = true;
					}
					if (justHit)
					{
						this.ai[3] = 0f;
						localAI[1] = 0f;
					}
					float num716 = 5f;
					Vector2 vector70 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num717 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector70.X;
					float num718 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector70.Y;
					float num719 = (float)Math.Sqrt(num717 * num717 + num718 * num718);
					num719 = num716 / num719;
					num717 *= num719;
					num718 *= num719;
					if (num717 > 0f)
					{
						base.direction = 1;
					}
					else
					{
						base.direction = -1;
					}
					spriteDirection = base.direction;
					if (base.direction < 0)
					{
						rotation = (float)Math.Atan2(0f - num718, 0f - num717);
					}
					else
					{
						rotation = (float)Math.Atan2(num718, num717);
					}
					if (Main.netMode != 1 && this.ai[3] == 16f)
					{
						int num720 = 45;
						int num721 = 128;
						Projectile.NewProjectile(vector70.X, vector70.Y, num717, num718, num721, num720, 0f, Main.myPlayer);
					}
					num707 = 10;
					if (this.ai[3] > 0f)
					{
						this.ai[3] += 1f;
						if (this.ai[3] >= 64f)
						{
							this.ai[3] = 0f;
						}
					}
					if (Main.netMode != 1 && this.ai[3] == 0f)
					{
						localAI[1] += 1f;
						if (localAI[1] > 120f && Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
						{
							localAI[1] = 0f;
							this.ai[3] = 1f;
							netUpdate = true;
						}
					}
				}
				else if (type == 268)
				{
					rotation = base.velocity.X * 0.1f;
					num707 = ((!(Main.player[target].Center.Y < base.Center.Y)) ? 6 : 12);
					if (Main.netMode != 1 && !confused)
					{
						this.ai[3] += 1f;
						if (justHit)
						{
							this.ai[3] = -45f;
							localAI[1] = 0f;
						}
						if (Main.netMode != 1 && this.ai[3] >= (float)(60 + Main.rand.Next(60)))
						{
							this.ai[3] = 0f;
							if (Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].head))
							{
								float num722 = 10f;
								Vector2 vector71 = new Vector2(base.position.X + (float)width * 0.5f - 4f, base.position.Y + (float)height * 0.7f);
								float num723 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector71.X;
								float num724 = Math.Abs(num723) * 0.1f;
								float num725 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector71.Y - num724;
								num723 += (float)Main.rand.Next(-10, 11);
								num725 += (float)Main.rand.Next(-30, 21);
								float num726 = (float)Math.Sqrt(num723 * num723 + num725 * num725);
								num726 = num722 / num726;
								num723 *= num726;
								num725 *= num726;
								int num727 = 40;
								int num728 = 288;
								Projectile.NewProjectile(vector71.X, vector71.Y, num723, num725, num728, num727, 0f, Main.myPlayer);
							}
						}
					}
				}
				if (type == 490)
				{
					num707 = 4;
					if (target >= 0)
					{
						float num729 = (Main.player[target].Center - base.Center).Length();
						num729 /= 70f;
						if (num729 > 8f)
						{
							num729 = 8f;
						}
						num707 += (int)num729;
					}
				}
				for (int num730 = num706; num730 < num706 + num707; num730++)
				{
					if (Main.tile[num705, num730] == null)
					{
						Main.tile[num705, num730] = new Tile();
					}
					if ((Main.tile[num705, num730].nactive() && Main.tileSolid[Main.tile[num705, num730].type]) || Main.tile[num705, num730].liquid > 0)
					{
						if (num730 <= num706 + 1)
						{
							flag75 = true;
						}
						flag74 = false;
						break;
					}
				}
				if (Main.player[target].npcTypeNoAggro[type])
				{
					bool flag76 = false;
					for (int num731 = num706; num731 < num706 + num707 - 2; num731++)
					{
						if (Main.tile[num705, num731] == null)
						{
							Main.tile[num705, num731] = new Tile();
						}
						if ((Main.tile[num705, num731].nactive() && Main.tileSolid[Main.tile[num705, num731].type]) || Main.tile[num705, num731].liquid > 0)
						{
							flag76 = true;
							break;
						}
					}
					directionY = (!flag76).ToDirectionInt();
				}
				if (type == 169 || type == 268)
				{
					for (int num732 = num706 - 3; num732 < num706; num732++)
					{
						if (Main.tile[num705, num732] == null)
						{
							Main.tile[num705, num732] = new Tile();
						}
						if ((Main.tile[num705, num732].nactive() && Main.tileSolid[Main.tile[num705, num732].type]) || Main.tile[num705, num732].liquid > 0)
						{
							flag75 = false;
							flag70 = true;
							break;
						}
					}
				}
				if (flag70)
				{
					flag75 = false;
					flag74 = true;
					if (type == 268)
					{
						base.velocity.Y += 2f;
					}
				}
				if (flag74)
				{
					if (type == 75 || type == 169)
					{
						base.velocity.Y += 0.2f;
						if (base.velocity.Y > 2f)
						{
							base.velocity.Y = 2f;
						}
					}
					else if (type == 490)
					{
						base.velocity.Y += 0.03f;
						if ((double)base.velocity.Y > 0.75)
						{
							base.velocity.Y = 0.75f;
						}
					}
					else
					{
						base.velocity.Y += 0.1f;
						if (base.velocity.Y > 3f)
						{
							base.velocity.Y = 3f;
						}
					}
				}
				else
				{
					if (type == 75 || type == 169)
					{
						if ((directionY < 0 && base.velocity.Y > 0f) || flag75)
						{
							base.velocity.Y -= 0.2f;
						}
					}
					else if (type == 490)
					{
						if ((directionY < 0 && base.velocity.Y > 0f) || flag75)
						{
							base.velocity.Y -= 0.075f;
						}
						if (base.velocity.Y < -0.75f)
						{
							base.velocity.Y = -0.75f;
						}
					}
					else if (directionY < 0 && base.velocity.Y > 0f)
					{
						base.velocity.Y -= 0.1f;
					}
					if (base.velocity.Y < -4f)
					{
						base.velocity.Y = -4f;
					}
				}
				if (type == 75 && wet)
				{
					base.velocity.Y -= 0.2f;
					if (base.velocity.Y < -2f)
					{
						base.velocity.Y = -2f;
					}
				}
				if (collideX)
				{
					base.velocity.X = oldVelocity.X * -0.4f;
					if (base.direction == -1 && base.velocity.X > 0f && base.velocity.X < 1f)
					{
						base.velocity.X = 1f;
					}
					if (base.direction == 1 && base.velocity.X < 0f && base.velocity.X > -1f)
					{
						base.velocity.X = -1f;
					}
				}
				if (collideY)
				{
					base.velocity.Y = oldVelocity.Y * -0.25f;
					if (base.velocity.Y > 0f && base.velocity.Y < 1f)
					{
						base.velocity.Y = 1f;
					}
					if (base.velocity.Y < 0f && base.velocity.Y > -1f)
					{
						base.velocity.Y = -1f;
					}
				}
				float num733 = 2f;
				if (type == 75)
				{
					num733 = 3f;
				}
				if (type == 253)
				{
					num733 = 4f;
				}
				if (type == 490)
				{
					num733 = 1.5f;
				}
				if (type == 330)
				{
					alpha = 0;
					num733 = 4f;
					if (!flag71)
					{
						TargetClosest();
					}
					else if (timeLeft > 10)
					{
						timeLeft = 10;
					}
					if (base.direction < 0 && base.velocity.X > 0f)
					{
						base.velocity.X *= 0.9f;
					}
					if (base.direction > 0 && base.velocity.X < 0f)
					{
						base.velocity.X *= 0.9f;
					}
				}
				if (base.direction == -1 && base.velocity.X > 0f - num733)
				{
					base.velocity.X -= 0.1f;
					if (base.velocity.X > num733)
					{
						base.velocity.X -= 0.1f;
					}
					else if (base.velocity.X > 0f)
					{
						base.velocity.X += 0.05f;
					}
					if (base.velocity.X < 0f - num733)
					{
						base.velocity.X = 0f - num733;
					}
				}
				else if (base.direction == 1 && base.velocity.X < num733)
				{
					base.velocity.X += 0.1f;
					if (base.velocity.X < 0f - num733)
					{
						base.velocity.X += 0.1f;
					}
					else if (base.velocity.X < 0f)
					{
						base.velocity.X -= 0.05f;
					}
					if (base.velocity.X > num733)
					{
						base.velocity.X = num733;
					}
				}
				num733 = ((type != 490) ? 1.5f : 1f);
				if (directionY == -1 && base.velocity.Y > 0f - num733)
				{
					base.velocity.Y -= 0.04f;
					if (base.velocity.Y > num733)
					{
						base.velocity.Y -= 0.05f;
					}
					else if (base.velocity.Y > 0f)
					{
						base.velocity.Y += 0.03f;
					}
					if (base.velocity.Y < 0f - num733)
					{
						base.velocity.Y = 0f - num733;
					}
				}
				else if (directionY == 1 && base.velocity.Y < num733)
				{
					base.velocity.Y += 0.04f;
					if (base.velocity.Y < 0f - num733)
					{
						base.velocity.Y += 0.05f;
					}
					else if (base.velocity.Y < 0f)
					{
						base.velocity.Y -= 0.03f;
					}
					if (base.velocity.Y > num733)
					{
						base.velocity.Y = num733;
					}
				}
				if (type == 122)
				{
					Lighting.AddLight((int)base.position.X / 16, (int)base.position.Y / 16, 0.4f, 0f, 0.25f);
				}
			}
			else if (aiStyle == 23)
			{
				noGravity = true;
				noTileCollide = true;
				if (type == 83)
				{
					Lighting.AddLight((int)((base.position.X + (float)(width / 2)) / 16f), (int)((base.position.Y + (float)(height / 2)) / 16f), 0.2f, 0.05f, 0.3f);
				}
				else if (type == 179)
				{
					Lighting.AddLight((int)((base.position.X + (float)(width / 2)) / 16f), (int)((base.position.Y + (float)(height / 2)) / 16f), 0.3f, 0.15f, 0.05f);
				}
				else
				{
					Lighting.AddLight((int)((base.position.X + (float)(width / 2)) / 16f), (int)((base.position.Y + (float)(height / 2)) / 16f), 0.05f, 0.2f, 0.3f);
				}
				if (target < 0 || target == 16 || Main.player[target].dead)
				{
					TargetClosest();
				}
				if (this.ai[0] == 0f)
				{
					float num734 = 9f;
					Vector2 vector72 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num735 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector72.X;
					float num736 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector72.Y;
					float num737 = (float)Math.Sqrt(num735 * num735 + num736 * num736);
					num737 = num734 / num737;
					num735 *= num737;
					num736 *= num737;
					base.velocity.X = num735;
					base.velocity.Y = num736;
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 0.785f;
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
				else if (this.ai[0] == 1f)
				{
					if (justHit)
					{
						this.ai[0] = 2f;
						this.ai[1] = 0f;
					}
					base.velocity *= 0.99f;
					this.ai[1] += 1f;
					if (this.ai[1] >= 100f)
					{
						netUpdate = true;
						this.ai[0] = 2f;
						this.ai[1] = 0f;
						base.velocity.X = 0f;
						base.velocity.Y = 0f;
					}
				}
				else
				{
					if (justHit)
					{
						this.ai[0] = 2f;
						this.ai[1] = 0f;
					}
					base.velocity *= 0.96f;
					this.ai[1] += 1f;
					float num738 = this.ai[1] / 120f;
					num738 = 0.1f + num738 * 0.4f;
					rotation += num738 * (float)base.direction;
					if (this.ai[1] >= 120f)
					{
						netUpdate = true;
						this.ai[0] = 0f;
						this.ai[1] = 0f;
					}
				}
			}
			else if (aiStyle == 24)
			{
				noGravity = true;
				if (this.ai[0] == 0f)
				{
					noGravity = false;
					TargetClosest();
					if (Main.netMode != 1)
					{
						if (base.velocity.X != 0f || base.velocity.Y < 0f || (double)base.velocity.Y > 0.3)
						{
							this.ai[0] = 1f;
							netUpdate = true;
							base.direction = -base.direction;
						}
						else
						{
							Rectangle rectangle5 = new Rectangle((int)Main.player[target].position.X, (int)Main.player[target].position.Y, Main.player[target].width, Main.player[target].height);
							if (new Rectangle((int)base.position.X - 100, (int)base.position.Y - 100, width + 200, height + 200).Intersects(rectangle5) || life < lifeMax)
							{
								this.ai[0] = 1f;
								base.velocity.Y -= 6f;
								netUpdate = true;
								base.direction = -base.direction;
							}
						}
					}
				}
				else if (!Main.player[target].dead)
				{
					if (collideX)
					{
						base.direction *= -1;
						base.velocity.X = oldVelocity.X * -0.5f;
						if (base.direction == -1 && base.velocity.X > 0f && base.velocity.X < 2f)
						{
							base.velocity.X = 2f;
						}
						if (base.direction == 1 && base.velocity.X < 0f && base.velocity.X > -2f)
						{
							base.velocity.X = -2f;
						}
					}
					if (collideY)
					{
						base.velocity.Y = oldVelocity.Y * -0.5f;
						if (base.velocity.Y > 0f && base.velocity.Y < 1f)
						{
							base.velocity.Y = 1f;
						}
						if (base.velocity.Y < 0f && base.velocity.Y > -1f)
						{
							base.velocity.Y = -1f;
						}
					}
					if (base.direction == -1 && base.velocity.X > -3f)
					{
						base.velocity.X -= 0.1f;
						if (base.velocity.X > 3f)
						{
							base.velocity.X -= 0.1f;
						}
						else if (base.velocity.X > 0f)
						{
							base.velocity.X -= 0.05f;
						}
						if (base.velocity.X < -3f)
						{
							base.velocity.X = -3f;
						}
					}
					else if (base.direction == 1 && base.velocity.X < 3f)
					{
						base.velocity.X += 0.1f;
						if (base.velocity.X < -3f)
						{
							base.velocity.X += 0.1f;
						}
						else if (base.velocity.X < 0f)
						{
							base.velocity.X += 0.05f;
						}
						if (base.velocity.X > 3f)
						{
							base.velocity.X = 3f;
						}
					}
					int num739 = (int)((base.position.X + (float)(width / 2)) / 16f) + base.direction;
					int num740 = (int)((base.position.Y + (float)height) / 16f);
					bool flag77 = true;
					int num741 = 15;
					bool flag78 = false;
					for (int num742 = num740; num742 < num740 + num741; num742++)
					{
						if (Main.tile[num739, num742] == null)
						{
							Main.tile[num739, num742] = new Tile();
						}
						if ((Main.tile[num739, num742].nactive() && Main.tileSolid[Main.tile[num739, num742].type]) || Main.tile[num739, num742].liquid > 0)
						{
							if (num742 < num740 + 5)
							{
								flag78 = true;
							}
							flag77 = false;
							break;
						}
					}
					if (flag77)
					{
						base.velocity.Y += 0.05f;
					}
					else
					{
						base.velocity.Y -= 0.1f;
					}
					if (flag78)
					{
						base.velocity.Y -= 0.2f;
					}
					if (base.velocity.Y > 2f)
					{
						base.velocity.Y = 2f;
					}
					if (base.velocity.Y < -4f)
					{
						base.velocity.Y = -4f;
					}
				}
				if (wet)
				{
					this.ai[1] = 0f;
					if (base.velocity.Y > 0f)
					{
						base.velocity.Y *= 0.95f;
					}
					base.velocity.Y -= 0.5f;
					if (base.velocity.Y < -4f)
					{
						base.velocity.Y = -4f;
					}
					TargetClosest();
				}
			}
			else if (aiStyle == 25)
			{
				bool flag79 = type == 341 && !Main.snowMoon;
				if (this.ai[3] == 0f)
				{
					base.position.X += 8f;
					if (base.position.Y / 16f > (float)(Main.maxTilesY - 200))
					{
						this.ai[3] = 3f;
					}
					else if ((double)(base.position.Y / 16f) > Main.worldSurface)
					{
						TargetClosest();
						if (Main.player[target].ZoneSnow)
						{
							this.ai[3] = 4f;
						}
						else
						{
							this.ai[3] = 2f;
						}
					}
					else
					{
						this.ai[3] = 1f;
					}
				}
				if (type == 341)
				{
					this.ai[3] = 1f;
				}
				if (this.ai[0] == 0f)
				{
					if (!flag79)
					{
						TargetClosest();
					}
					if (Main.netMode == 1)
					{
						return;
					}
					if (base.velocity.X != 0f || base.velocity.Y < 0f || (double)base.velocity.Y > 0.3)
					{
						this.ai[0] = 1f;
						netUpdate = true;
						return;
					}
					Rectangle rectangle6 = new Rectangle((int)Main.player[target].position.X, (int)Main.player[target].position.Y, Main.player[target].width, Main.player[target].height);
					if (new Rectangle((int)base.position.X - 100, (int)base.position.Y - 100, width + 200, height + 200).Intersects(rectangle6) || life < lifeMax)
					{
						this.ai[0] = 1f;
						netUpdate = true;
					}
				}
				else if (base.velocity.Y == 0f)
				{
					this.ai[2] += 1f;
					int num743 = 20;
					if (this.ai[1] == 0f)
					{
						num743 = 12;
					}
					if (this.ai[2] < (float)num743)
					{
						base.velocity.X *= 0.9f;
						return;
					}
					this.ai[2] = 0f;
					if (!flag79)
					{
						TargetClosest();
					}
					if (base.direction == 0)
					{
						base.direction = -1;
					}
					spriteDirection = base.direction;
					this.ai[1] += 1f;
					if (this.ai[1] == 2f)
					{
						base.velocity.X = (float)base.direction * 2.5f;
						base.velocity.Y = -8f;
						this.ai[1] = 0f;
					}
					else
					{
						base.velocity.X = (float)base.direction * 3.5f;
						base.velocity.Y = -4f;
					}
					netUpdate = true;
				}
				else if (base.direction == 1 && base.velocity.X < 1f)
				{
					base.velocity.X += 0.1f;
				}
				else if (base.direction == -1 && base.velocity.X > -1f)
				{
					base.velocity.X -= 0.1f;
				}
			}
			else if (aiStyle == 26)
			{
				int num744 = 30;
				int num745 = 10;
				bool flag80 = false;
				bool flag81 = false;
				bool flag82 = false;
				if (base.velocity.Y == 0f && ((base.velocity.X > 0f && base.direction < 0) || (base.velocity.X < 0f && base.direction > 0)))
				{
					flag81 = true;
					this.ai[3] += 1f;
				}
				if (base.position.X == oldPosition.X || this.ai[3] >= (float)num744 || flag81)
				{
					this.ai[3] += 1f;
					flag82 = true;
				}
				else if (this.ai[3] > 0f)
				{
					this.ai[3] -= 1f;
				}
				if (this.ai[3] > (float)(num744 * num745))
				{
					this.ai[3] = 0f;
				}
				if (justHit)
				{
					this.ai[3] = 0f;
				}
				if (this.ai[3] == (float)num744)
				{
					netUpdate = true;
				}
				Vector2 vector73 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num746 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector73.X;
				float num747 = Main.player[target].position.Y - vector73.Y;
				float num748 = (float)Math.Sqrt(num746 * num746 + num747 * num747);
				if (num748 < 200f && !flag82)
				{
					this.ai[3] = 0f;
				}
				if (type == 410)
				{
					this.ai[1] += 1f;
					bool flag83 = this.ai[1] >= 240f;
					if (!flag83 && base.velocity.Y == 0f)
					{
						for (int num749 = 0; num749 < 16; num749++)
						{
							if (Main.player[num749].active && !Main.player[num749].dead && Main.player[num749].Distance(base.Center) < 800f && Main.player[num749].Center.Y < base.Center.Y && Math.Abs(Main.player[num749].Center.X - base.Center.X) < 20f)
							{
								flag83 = true;
								break;
							}
						}
					}
					if (flag83 && Main.netMode != 1)
					{
						for (int num750 = 0; num750 < 3; num750++)
						{
							Projectile.NewProjectile(base.Center.X, base.Center.Y, (Main.rand.NextFloat() - 0.5f) * 2f, -4f - 10f * Main.rand.NextFloat(), 538, 50, 0f, Main.myPlayer);
						}
						HitEffect(9999);
						active = false;
						return;
					}
				}
				else if (type == 423)
				{
					if (this.ai[2] == 1f)
					{
						this.ai[1] += 1f;
						base.velocity.X *= 0.7f;
						if (this.ai[1] < 30f)
						{
							Vector2 vector74 = base.Center + Vector2.UnitX * spriteDirection * -20f;
							Dust dust11 = Main.dust[Dust.NewDust(vector74, 0, 0, 242)];
							Vector2 vector75 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							dust11.position = vector74 + vector75 * 20f;
							dust11.velocity = -vector75 * 2f;
							dust11.scale = 0.5f + vector75.X * (float)(-spriteDirection);
							dust11.fadeIn = 1f;
							dust11.noGravity = true;
						}
						else if (this.ai[1] == 30f)
						{
							for (int num751 = 0; num751 < 20; num751++)
							{
								Vector2 vector76 = base.Center + Vector2.UnitX * spriteDirection * -20f;
								Dust dust12 = Main.dust[Dust.NewDust(vector76, 0, 0, 242)];
								Vector2 vector77 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
								dust12.position = vector76 + vector77 * 4f;
								dust12.velocity = vector77 * 4f + Vector2.UnitX * Main.rand.NextFloat() * spriteDirection * -5f;
								dust12.scale = 0.5f + vector77.X * (float)(-spriteDirection);
								dust12.fadeIn = 1f;
								dust12.noGravity = true;
							}
						}
						if (base.velocity.X > -0.5f && base.velocity.X < 0.5f)
						{
							base.velocity.X = 0f;
						}
						if (this.ai[1] == 30f && Main.netMode != 1)
						{
							int num752 = Main.expertMode ? 35 : 50;
							Projectile.NewProjectile(base.Center.X + (float)(spriteDirection * -20), base.Center.Y, spriteDirection * -7, 0f, 575, num752, 0f, Main.myPlayer, target);
						}
						if (this.ai[1] >= 60f)
						{
							this.ai[1] = -Main.rand.Next(320, 601);
							this.ai[2] = 0f;
						}
					}
					else
					{
						this.ai[1] += 1f;
						if (this.ai[1] >= 180f && num748 < 500f && base.velocity.Y == 0f)
						{
							flag80 = true;
							this.ai[1] = 0f;
							this.ai[2] = 1f;
							netUpdate = true;
						}
						else if (base.velocity.Y == 0f && num748 < 100f && Math.Abs(base.velocity.X) > 3f && ((base.Center.X < Main.player[target].Center.X && base.velocity.X > 0f) || (base.Center.X > Main.player[target].Center.X && base.velocity.X < 0f)))
						{
							base.velocity.Y -= 4f;
						}
					}
				}
				else if ((type == 155 || type == 329) && base.velocity.Y == 0f && num748 < 100f && Math.Abs(base.velocity.X) > 3f && ((base.position.X + (float)(width / 2) < Main.player[target].position.X + (float)(Main.player[target].width / 2) && base.velocity.X > 0f) || (base.position.X + (float)(width / 2) > Main.player[target].position.X + (float)(Main.player[target].width / 2) && base.velocity.X < 0f)))
				{
					base.velocity.Y -= 4f;
				}
				if (this.ai[3] < (float)num744)
				{
					if ((type == 329 || type == 315) && !Main.pumpkinMoon)
					{
						if (timeLeft > 10)
						{
							timeLeft = 10;
						}
					}
					else
					{
						TargetClosest();
					}
				}
				else
				{
					if (base.velocity.X == 0f)
					{
						if (base.velocity.Y == 0f)
						{
							this.ai[0] += 1f;
							if (this.ai[0] >= 2f)
							{
								base.direction *= -1;
								spriteDirection = base.direction;
								this.ai[0] = 0f;
							}
						}
					}
					else
					{
						this.ai[0] = 0f;
					}
					directionY = -1;
					if (base.direction == 0)
					{
						base.direction = 1;
					}
				}
				float num753 = 6f;
				float num754 = 0.07f;
				if (!flag80 && (base.velocity.Y == 0f || wet || (base.velocity.X <= 0f && base.direction < 0) || (base.velocity.X >= 0f && base.direction > 0)))
				{
					if (type == 155)
					{
						if (base.velocity.X > 0f && base.direction < 0)
						{
							base.velocity.X *= 0.95f;
						}
						if (base.velocity.X < 0f && base.direction > 0)
						{
							base.velocity.X *= 0.95f;
						}
					}
					else if (type == 329)
					{
						if (base.velocity.X > 0f && base.direction < 0)
						{
							base.velocity.X *= 0.9f;
						}
						if (base.velocity.X < 0f && base.direction > 0)
						{
							base.velocity.X *= 0.9f;
						}
						if (base.direction > 0 && base.velocity.X < 3f)
						{
							base.velocity.X += 0.1f;
						}
						if (base.direction < 0 && base.velocity.X > -3f)
						{
							base.velocity.X -= 0.1f;
						}
					}
					else if (type == 315)
					{
						if (base.velocity.X > 0f && base.direction < 0)
						{
							base.velocity.X *= 0.95f;
						}
						if (base.velocity.X < 0f && base.direction > 0)
						{
							base.velocity.X *= 0.95f;
						}
						if (base.velocity.X < 0f - num753 || base.velocity.X > num753)
						{
							if (base.velocity.Y == 0f)
							{
								base.velocity *= 0.8f;
							}
						}
						else if (base.velocity.X < num753 && base.direction == 1)
						{
							base.velocity.X += 0.07f;
							if (base.velocity.X > num753)
							{
								base.velocity.X = num753;
							}
						}
						else if (base.velocity.X > 0f - num753 && base.direction == -1)
						{
							base.velocity.X -= 0.07f;
							if (base.velocity.X < 0f - num753)
							{
								base.velocity.X = 0f - num753;
							}
						}
					}
					else if (type == 410)
					{
						if (Math.Sign(base.velocity.X) != base.direction)
						{
							base.velocity.X *= 0.9f;
						}
						num753 = 6f;
						num754 = 0.2f;
					}
					else if (type == 423)
					{
						if (Math.Sign(base.velocity.X) != base.direction)
						{
							base.velocity.X *= 0.85f;
						}
						num753 = 10f;
						num754 = 0.2f;
					}
					if (base.velocity.X < 0f - num753 || base.velocity.X > num753)
					{
						if (base.velocity.Y == 0f)
						{
							base.velocity *= 0.8f;
						}
					}
					else if (base.velocity.X < num753 && base.direction == 1)
					{
						base.velocity.X += num754;
						if (base.velocity.X > num753)
						{
							base.velocity.X = num753;
						}
					}
					else if (base.velocity.X > 0f - num753 && base.direction == -1)
					{
						base.velocity.X -= num754;
						if (base.velocity.X < 0f - num753)
						{
							base.velocity.X = 0f - num753;
						}
					}
				}
				if (base.velocity.Y >= 0f)
				{
					int num755 = 0;
					if (base.velocity.X < 0f)
					{
						num755 = -1;
					}
					if (base.velocity.X > 0f)
					{
						num755 = 1;
					}
					Vector2 position6 = base.position;
					position6.X += base.velocity.X;
					int num756 = (int)((position6.X + (float)(width / 2) + (float)((width / 2 + 1) * num755)) / 16f);
					int num757 = (int)((position6.Y + (float)height - 1f) / 16f);
					if (Main.tile[num756, num757] == null)
					{
						Main.tile[num756, num757] = new Tile();
					}
					if (Main.tile[num756, num757 - 1] == null)
					{
						Main.tile[num756, num757 - 1] = new Tile();
					}
					if (Main.tile[num756, num757 - 2] == null)
					{
						Main.tile[num756, num757 - 2] = new Tile();
					}
					if (Main.tile[num756, num757 - 3] == null)
					{
						Main.tile[num756, num757 - 3] = new Tile();
					}
					if (Main.tile[num756, num757 + 1] == null)
					{
						Main.tile[num756, num757 + 1] = new Tile();
					}
					if ((float)(num756 * 16) < position6.X + (float)width && (float)(num756 * 16 + 16) > position6.X && ((Main.tile[num756, num757].nactive() && !Main.tile[num756, num757].topSlope() && !Main.tile[num756, num757 - 1].topSlope() && Main.tileSolid[Main.tile[num756, num757].type] && !Main.tileSolidTop[Main.tile[num756, num757].type]) || (Main.tile[num756, num757 - 1].halfBrick() && Main.tile[num756, num757 - 1].nactive())) && (!Main.tile[num756, num757 - 1].nactive() || !Main.tileSolid[Main.tile[num756, num757 - 1].type] || Main.tileSolidTop[Main.tile[num756, num757 - 1].type] || (Main.tile[num756, num757 - 1].halfBrick() && (!Main.tile[num756, num757 - 4].nactive() || !Main.tileSolid[Main.tile[num756, num757 - 4].type] || Main.tileSolidTop[Main.tile[num756, num757 - 4].type]))) && (!Main.tile[num756, num757 - 2].nactive() || !Main.tileSolid[Main.tile[num756, num757 - 2].type] || Main.tileSolidTop[Main.tile[num756, num757 - 2].type]) && (!Main.tile[num756, num757 - 3].nactive() || !Main.tileSolid[Main.tile[num756, num757 - 3].type] || Main.tileSolidTop[Main.tile[num756, num757 - 3].type]) && (!Main.tile[num756 - num755, num757 - 3].nactive() || !Main.tileSolid[Main.tile[num756 - num755, num757 - 3].type]))
					{
						float num758 = num757 * 16;
						if (Main.tile[num756, num757].halfBrick())
						{
							num758 += 8f;
						}
						if (Main.tile[num756, num757 - 1].halfBrick())
						{
							num758 -= 8f;
						}
						if (num758 < position6.Y + (float)height)
						{
							float num759 = position6.Y + (float)height - num758;
							if ((double)num759 <= 16.1)
							{
								gfxOffY += base.position.Y + (float)height - num758;
								base.position.Y = num758 - (float)height;
								if (num759 < 9f)
								{
									stepSpeed = 1f;
								}
								else
								{
									stepSpeed = 2f;
								}
							}
						}
					}
				}
				if (base.velocity.Y == 0f)
				{
					int num760 = (int)((base.position.X + (float)(width / 2) + (float)((width / 2 + 2) * base.direction) + base.velocity.X * 5f) / 16f);
					int num761 = (int)((base.position.Y + (float)height - 15f) / 16f);
					if (Main.tile[num760, num761] == null)
					{
						Main.tile[num760, num761] = new Tile();
					}
					if (Main.tile[num760, num761 - 1] == null)
					{
						Main.tile[num760, num761 - 1] = new Tile();
					}
					if (Main.tile[num760, num761 - 2] == null)
					{
						Main.tile[num760, num761 - 2] = new Tile();
					}
					if (Main.tile[num760, num761 - 3] == null)
					{
						Main.tile[num760, num761 - 3] = new Tile();
					}
					if (Main.tile[num760, num761 + 1] == null)
					{
						Main.tile[num760, num761 + 1] = new Tile();
					}
					if (Main.tile[num760 + base.direction, num761 - 1] == null)
					{
						Main.tile[num760 + base.direction, num761 - 1] = new Tile();
					}
					if (Main.tile[num760 + base.direction, num761 + 1] == null)
					{
						Main.tile[num760 + base.direction, num761 + 1] = new Tile();
					}
					if (Main.tile[num760 - base.direction, num761 + 1] == null)
					{
						Main.tile[num760 - base.direction, num761 + 1] = new Tile();
					}
					int num762 = spriteDirection;
					if (type == 423 || type == 410)
					{
						num762 *= -1;
					}
					if ((base.velocity.X < 0f && num762 == -1) || (base.velocity.X > 0f && num762 == 1))
					{
						bool flag84 = type == 410 || type == 423;
						float num763 = 3f;
						if (Main.tile[num760, num761 - 2].nactive() && Main.tileSolid[Main.tile[num760, num761 - 2].type])
						{
							if (Main.tile[num760, num761 - 3].nactive() && Main.tileSolid[Main.tile[num760, num761 - 3].type])
							{
								base.velocity.Y = -8.5f;
								netUpdate = true;
							}
							else
							{
								base.velocity.Y = -7.5f;
								netUpdate = true;
							}
						}
						else if (Main.tile[num760, num761 - 1].nactive() && !Main.tile[num760, num761 - 1].topSlope() && Main.tileSolid[Main.tile[num760, num761 - 1].type])
						{
							base.velocity.Y = -7f;
							netUpdate = true;
						}
						else if (base.position.Y + (float)height - (float)(num761 * 16) > 20f && Main.tile[num760, num761].nactive() && !Main.tile[num760, num761].topSlope() && Main.tileSolid[Main.tile[num760, num761].type])
						{
							base.velocity.Y = -6f;
							netUpdate = true;
						}
						else if ((directionY < 0 || Math.Abs(base.velocity.X) > num763) && (!flag84 || !Main.tile[num760, num761 + 1].nactive() || !Main.tileSolid[Main.tile[num760, num761 + 1].type]) && (!Main.tile[num760, num761 + 2].nactive() || !Main.tileSolid[Main.tile[num760, num761 + 2].type]) && (!Main.tile[num760 + base.direction, num761 + 3].nactive() || !Main.tileSolid[Main.tile[num760 + base.direction, num761 + 3].type]))
						{
							base.velocity.Y = -8f;
							netUpdate = true;
						}
					}
				}
				if (type != 423 || !(Math.Abs(base.velocity.X) >= num753 * 0.95f))
				{
					return;
				}
				Rectangle hitbox2 = base.Hitbox;
				for (int num764 = 0; num764 < 2; num764++)
				{
					if (Main.rand.Next(3) == 0)
					{
						Dust dust13 = Main.dust[Dust.NewDust(hitbox2.TopLeft(), hitbox2.Width, hitbox2.Height, 242)];
						dust13.velocity = Vector2.Zero;
						dust13.noGravity = true;
						dust13.fadeIn = 1f;
						dust13.scale = 0.5f + Main.rand.NextFloat();
					}
				}
			}
			else if (aiStyle == 27)
			{
				if (base.position.X < 160f || base.position.X > (float)((Main.maxTilesX - 10) * 16))
				{
					active = false;
				}
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					Main.wofB = -1;
					Main.wofT = -1;
				}
				this.ai[1] += 1f;
				if (this.ai[2] == 0f)
				{
					if ((double)life < (double)lifeMax * 0.5)
					{
						this.ai[1] += 1f;
					}
					if ((double)life < (double)lifeMax * 0.2)
					{
						this.ai[1] += 1f;
					}
					if (this.ai[1] > 2700f)
					{
						this.ai[2] = 1f;
					}
				}
				if (this.ai[2] > 0f && this.ai[1] > 60f)
				{
					int num765 = 3;
					if ((double)life < (double)lifeMax * 0.3)
					{
						num765++;
					}
					this.ai[2] += 1f;
					this.ai[1] = 0f;
					if (this.ai[2] > (float)num765)
					{
						this.ai[2] = 0f;
					}
					if (Main.netMode != 1)
					{
						int num766 = NewNPC((int)(base.position.X + (float)(width / 2)), (int)(base.position.Y + (float)(height / 2) + 20f), 117, 1);
						Main.npc[num766].velocity.X = base.direction * 8;
					}
				}
				localAI[3] += 1f;
				if (localAI[3] >= (float)(600 + Main.rand.Next(1000)))
				{
					localAI[3] = -Main.rand.Next(200);
					Main.PlaySound(4, (int)base.position.X, (int)base.position.Y, 10);
				}
				Main.wof = base.whoAmI;
				int num767 = (int)(base.position.X / 16f);
				int num768 = (int)((base.position.X + (float)width) / 16f);
				int num769 = (int)((base.position.Y + (float)(height / 2)) / 16f);
				int num770 = 0;
				int num771 = num769 + 7;
				while (num770 < 15 && num771 > Main.maxTilesY - 200)
				{
					num771++;
					for (int num772 = num767; num772 <= num768; num772++)
					{
						try
						{
							if (WorldGen.SolidTile(num772, num771) || Main.tile[num772, num771].liquid > 0)
							{
								num770++;
							}
						}
						catch
						{
							num770 += 15;
						}
					}
				}
				num771 += 4;
				if (Main.wofB == -1)
				{
					Main.wofB = num771 * 16;
				}
				else if (Main.wofB > num771 * 16)
				{
					Main.wofB--;
					if (Main.wofB < num771 * 16)
					{
						Main.wofB = num771 * 16;
					}
				}
				else if (Main.wofB < num771 * 16)
				{
					Main.wofB++;
					if (Main.wofB > num771 * 16)
					{
						Main.wofB = num771 * 16;
					}
				}
				num770 = 0;
				num771 = num769 - 7;
				while (num770 < 15 && num771 < Main.maxTilesY - 10)
				{
					num771--;
					for (int num773 = num767; num773 <= num768; num773++)
					{
						try
						{
							if (WorldGen.SolidTile(num773, num771) || Main.tile[num773, num771].liquid > 0)
							{
								num770++;
							}
						}
						catch
						{
							num770 += 15;
						}
					}
				}
				num771 -= 4;
				if (Main.wofT == -1)
				{
					Main.wofT = num771 * 16;
				}
				else if (Main.wofT > num771 * 16)
				{
					Main.wofT--;
					if (Main.wofT < num771 * 16)
					{
						Main.wofT = num771 * 16;
					}
				}
				else if (Main.wofT < num771 * 16)
				{
					Main.wofT++;
					if (Main.wofT > num771 * 16)
					{
						Main.wofT = num771 * 16;
					}
				}
				float num774 = (Main.wofB + Main.wofT) / 2 - height / 2;
				if (base.position.Y > num774 + 1f)
				{
					base.velocity.Y = -1f;
				}
				else if (base.position.Y < num774 - 1f)
				{
					base.velocity.Y = 1f;
				}
				base.velocity.Y = 0f;
				base.position.Y = num774;
				float num775 = 1.5f;
				if ((double)life < (double)lifeMax * 0.75)
				{
					num775 += 0.25f;
				}
				if ((double)life < (double)lifeMax * 0.5)
				{
					num775 += 0.4f;
				}
				if ((double)life < (double)lifeMax * 0.25)
				{
					num775 += 0.5f;
				}
				if ((double)life < (double)lifeMax * 0.1)
				{
					num775 += 0.6f;
				}
				if ((double)life < (double)lifeMax * 0.66 && Main.expertMode)
				{
					num775 += 0.3f;
				}
				if ((double)life < (double)lifeMax * 0.33 && Main.expertMode)
				{
					num775 += 0.3f;
				}
				if ((double)life < (double)lifeMax * 0.05 && Main.expertMode)
				{
					num775 += 0.6f;
				}
				if ((double)life < (double)lifeMax * 0.035 && Main.expertMode)
				{
					num775 += 0.6f;
				}
				if ((double)life < (double)lifeMax * 0.025 && Main.expertMode)
				{
					num775 += 0.6f;
				}
				if (Main.expertMode)
				{
					num775 *= 1.35f;
					num775 += 0.35f;
				}
				if (base.velocity.X == 0f)
				{
					TargetClosest();
					base.velocity.X = base.direction;
				}
				if (base.velocity.X < 0f)
				{
					base.velocity.X = 0f - num775;
					base.direction = -1;
				}
				else
				{
					base.velocity.X = num775;
					base.direction = 1;
				}
				spriteDirection = base.direction;
				Vector2 vector78 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num776 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector78.X;
				float num777 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector78.Y;
				float num778 = (float)Math.Sqrt(num776 * num776 + num777 * num777);
				num776 *= num778;
				num777 *= num778;
				if (base.direction > 0)
				{
					if (Main.player[target].position.X + (float)(Main.player[target].width / 2) > base.position.X + (float)(width / 2))
					{
						rotation = (float)Math.Atan2(0f - num777, 0f - num776) + 3.14f;
					}
					else
					{
						rotation = 0f;
					}
				}
				else if (Main.player[target].position.X + (float)(Main.player[target].width / 2) < base.position.X + (float)(width / 2))
				{
					rotation = (float)Math.Atan2(num777, num776) + 3.14f;
				}
				else
				{
					rotation = 0f;
				}
				if (Main.expertMode && Main.netMode != 1)
				{
					int num779 = (int)(1f + (float)life / (float)lifeMax * 10f);
					num779 *= num779;
					if (num779 < 400)
					{
						num779 = (num779 * 19 + 400) / 20;
					}
					if (num779 < 60)
					{
						num779 = (num779 * 3 + 60) / 4;
					}
					if (num779 < 20)
					{
						num779 = (num779 + 20) / 2;
					}
					num779 = (int)((double)num779 * 0.7);
					if (Main.rand.Next(num779) == 0)
					{
						int num780 = 0;
						float[] array2 = new float[10];
						for (int num781 = 0; num781 < 200; num781++)
						{
							if (num780 < 10 && Main.npc[num781].active && Main.npc[num781].type == 115)
							{
								array2[num780] = Main.npc[num781].ai[0];
								num780++;
							}
						}
						int maxValue5 = 1 + num780 * 2;
						if (num780 < 10 && Main.rand.Next(maxValue5) <= 1)
						{
							int num782 = -1;
							for (int num783 = 0; num783 < 1000; num783++)
							{
								int num784 = Main.rand.Next(10);
								float num785 = (float)num784 * 0.1f - 0.05f;
								bool flag85 = true;
								for (int num786 = 0; num786 < num780; num786++)
								{
									if (num785 == array2[num786])
									{
										flag85 = false;
										break;
									}
								}
								if (flag85)
								{
									num782 = num784;
									break;
								}
							}
							if (num782 >= 0)
							{
								int num787 = NewNPC((int)base.position.X, (int)num774, 115, base.whoAmI);
								Main.npc[num787].ai[0] = (float)num782 * 0.1f - 0.05f;
							}
						}
					}
				}
				if (localAI[0] == 1f && Main.netMode != 1)
				{
					localAI[0] = 2f;
					num774 = (Main.wofB + Main.wofT) / 2;
					num774 = (num774 + (float)Main.wofT) / 2f;
					int num788 = NewNPC((int)base.position.X, (int)num774, 114, base.whoAmI);
					Main.npc[num788].ai[0] = 1f;
					num774 = (Main.wofB + Main.wofT) / 2;
					num774 = (num774 + (float)Main.wofB) / 2f;
					num788 = NewNPC((int)base.position.X, (int)num774, 114, base.whoAmI);
					Main.npc[num788].ai[0] = -1f;
					num774 = (Main.wofB + Main.wofT) / 2;
					num774 = (num774 + (float)Main.wofB) / 2f;
					for (int num789 = 0; num789 < 11; num789++)
					{
						num788 = NewNPC((int)base.position.X, (int)num774, 115, base.whoAmI);
						Main.npc[num788].ai[0] = (float)num789 * 0.1f - 0.05f;
					}
				}
			}
			else if (aiStyle == 28)
			{
				if (Main.wof < 0)
				{
					active = false;
					return;
				}
				realLife = Main.wof;
				if (Main.npc[Main.wof].life > 0)
				{
					life = Main.npc[Main.wof].life;
				}
				TargetClosest();
				base.position.X = Main.npc[Main.wof].position.X;
				base.direction = Main.npc[Main.wof].direction;
				spriteDirection = base.direction;
				float num790 = (Main.wofB + Main.wofT) / 2;
				num790 = ((!(this.ai[0] > 0f)) ? ((num790 + (float)Main.wofB) / 2f) : ((num790 + (float)Main.wofT) / 2f));
				num790 -= (float)(height / 2);
				if (base.position.Y > num790 + 1f)
				{
					base.velocity.Y = -1f;
				}
				else if (base.position.Y < num790 - 1f)
				{
					base.velocity.Y = 1f;
				}
				else
				{
					base.velocity.Y = 0f;
					base.position.Y = num790;
				}
				if (base.velocity.Y > 5f)
				{
					base.velocity.Y = 5f;
				}
				if (base.velocity.Y < -5f)
				{
					base.velocity.Y = -5f;
				}
				Vector2 vector79 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num791 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector79.X;
				float num792 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector79.Y;
				float num793 = (float)Math.Sqrt(num791 * num791 + num792 * num792);
				num791 *= num793;
				num792 *= num793;
				bool flag86 = true;
				if (base.direction > 0)
				{
					if (Main.player[target].position.X + (float)(Main.player[target].width / 2) > base.position.X + (float)(width / 2))
					{
						rotation = (float)Math.Atan2(0f - num792, 0f - num791) + 3.14f;
					}
					else
					{
						rotation = 0f;
						flag86 = false;
					}
				}
				else if (Main.player[target].position.X + (float)(Main.player[target].width / 2) < base.position.X + (float)(width / 2))
				{
					rotation = (float)Math.Atan2(num792, num791) + 3.14f;
				}
				else
				{
					rotation = 0f;
					flag86 = false;
				}
				if (Main.netMode == 1)
				{
					return;
				}
				int num794 = 4;
				localAI[1] += 1f;
				if ((double)Main.npc[Main.wof].life < (double)Main.npc[Main.wof].lifeMax * 0.75)
				{
					localAI[1] += 1f;
					num794++;
				}
				if ((double)Main.npc[Main.wof].life < (double)Main.npc[Main.wof].lifeMax * 0.5)
				{
					localAI[1] += 1f;
					num794++;
				}
				if ((double)Main.npc[Main.wof].life < (double)Main.npc[Main.wof].lifeMax * 0.25)
				{
					localAI[1] += 1f;
					num794 += 2;
				}
				if ((double)Main.npc[Main.wof].life < (double)Main.npc[Main.wof].lifeMax * 0.1)
				{
					localAI[1] += 2f;
					num794 += 3;
				}
				if (Main.expertMode)
				{
					localAI[1] += 0.5f;
					num794++;
					if ((double)Main.npc[Main.wof].life < (double)Main.npc[Main.wof].lifeMax * 0.1)
					{
						localAI[1] += 2f;
						num794 += 3;
					}
				}
				if (localAI[2] == 0f)
				{
					if (localAI[1] > 600f)
					{
						localAI[2] = 1f;
						localAI[1] = 0f;
					}
				}
				else
				{
					if (!(localAI[1] > 45f) || !Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						return;
					}
					localAI[1] = 0f;
					localAI[2] += 1f;
					if (localAI[2] >= (float)num794)
					{
						localAI[2] = 0f;
					}
					if (flag86)
					{
						float num795 = 9f;
						int num796 = 11;
						int num797 = 83;
						if ((double)Main.npc[Main.wof].life < (double)Main.npc[Main.wof].lifeMax * 0.5)
						{
							num796++;
							num795 += 1f;
						}
						if ((double)Main.npc[Main.wof].life < (double)Main.npc[Main.wof].lifeMax * 0.25)
						{
							num796++;
							num795 += 1f;
						}
						if ((double)Main.npc[Main.wof].life < (double)Main.npc[Main.wof].lifeMax * 0.1)
						{
							num796 += 2;
							num795 += 2f;
						}
						vector79 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						num791 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector79.X;
						num792 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector79.Y;
						num793 = (float)Math.Sqrt(num791 * num791 + num792 * num792);
						num793 = num795 / num793;
						num791 *= num793;
						num792 *= num793;
						vector79.X += num791;
						vector79.Y += num792;
						Projectile.NewProjectile(vector79.X, vector79.Y, num791, num792, num797, num796, 0f, Main.myPlayer);
					}
				}
			}
			else if (aiStyle == 29)
			{
				if (justHit)
				{
					this.ai[1] = 10f;
				}
				if (Main.wof < 0)
				{
					active = false;
					return;
				}
				TargetClosest();
				float num798 = 0.1f;
				float num799 = 300f;
				if ((double)Main.npc[Main.wof].life < (double)Main.npc[Main.wof].lifeMax * 0.25)
				{
					damage = (int)(75f * Main.damageMultiplier);
					defense = 40;
					if (!Main.expertMode)
					{
						num799 = 900f;
					}
					else
					{
						num798 += 0.1f;
					}
				}
				else if ((double)Main.npc[Main.wof].life < (double)Main.npc[Main.wof].lifeMax * 0.5)
				{
					damage = (int)(60f * Main.damageMultiplier);
					defense = 30;
					if (!Main.expertMode)
					{
						num799 = 700f;
					}
					else
					{
						num798 += 0.066f;
					}
				}
				else if ((double)Main.npc[Main.wof].life < (double)Main.npc[Main.wof].lifeMax * 0.75)
				{
					damage = (int)(45f * Main.damageMultiplier);
					defense = 20;
					if (!Main.expertMode)
					{
						num799 = 500f;
					}
					else
					{
						num798 += 0.033f;
					}
				}
				if (Main.expertMode)
				{
					defense = defDefense;
					if (base.whoAmI % 4 == 0)
					{
						num799 *= 1.75f;
					}
					if (base.whoAmI % 4 == 1)
					{
						num799 *= 1.5f;
					}
					if (base.whoAmI % 4 == 2)
					{
						num799 *= 1.25f;
					}
					if (base.whoAmI % 3 == 0)
					{
						num799 *= 1.5f;
					}
					if (base.whoAmI % 3 == 1)
					{
						num799 *= 1.25f;
					}
					num799 *= 0.75f;
				}
				float num800 = Main.npc[Main.wof].position.X + (float)(Main.npc[Main.wof].width / 2);
				float y2 = Main.npc[Main.wof].position.Y;
				float num801 = Main.wofB - Main.wofT;
				y2 = (float)Main.wofT + num801 * this.ai[0];
				this.ai[2] += 1f;
				if (this.ai[2] > 100f)
				{
					num799 = (int)(num799 * 1.3f);
					if (this.ai[2] > 200f)
					{
						this.ai[2] = 0f;
					}
				}
				Vector2 vector80 = new Vector2(num800, y2);
				float num802 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - (float)(width / 2) - vector80.X;
				float num803 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - (float)(height / 2) - vector80.Y;
				float num804 = (float)Math.Sqrt(num802 * num802 + num803 * num803);
				if (this.ai[1] == 0f)
				{
					if (num804 > num799)
					{
						num804 = num799 / num804;
						num802 *= num804;
						num803 *= num804;
					}
					if (base.position.X < num800 + num802)
					{
						base.velocity.X += num798;
						if (base.velocity.X < 0f && num802 > 0f)
						{
							base.velocity.X += num798 * 2.5f;
						}
					}
					else if (base.position.X > num800 + num802)
					{
						base.velocity.X -= num798;
						if (base.velocity.X > 0f && num802 < 0f)
						{
							base.velocity.X -= num798 * 2.5f;
						}
					}
					if (base.position.Y < y2 + num803)
					{
						base.velocity.Y += num798;
						if (base.velocity.Y < 0f && num803 > 0f)
						{
							base.velocity.Y += num798 * 2.5f;
						}
					}
					else if (base.position.Y > y2 + num803)
					{
						base.velocity.Y -= num798;
						if (base.velocity.Y > 0f && num803 < 0f)
						{
							base.velocity.Y -= num798 * 2.5f;
						}
					}
					float num805 = 4f;
					if (Main.expertMode && Main.wof >= 0)
					{
						float num806 = 1.5f;
						float num807 = Main.npc[Main.wof].life / Main.npc[Main.wof].lifeMax;
						if ((double)num807 < 0.75)
						{
							num806 += 0.7f;
						}
						if ((double)num807 < 0.5)
						{
							num806 += 0.7f;
						}
						if ((double)num807 < 0.25)
						{
							num806 += 0.9f;
						}
						if ((double)num807 < 0.1)
						{
							num806 += 0.9f;
						}
						num806 *= 1.25f;
						num806 += 0.3f;
						num805 += num806 * 0.35f;
						if (base.Center.X < Main.npc[Main.wof].Center.X && Main.npc[Main.wof].velocity.X > 0f)
						{
							num805 += 6f;
						}
						if (base.Center.X > Main.npc[Main.wof].Center.X && Main.npc[Main.wof].velocity.X < 0f)
						{
							num805 += 6f;
						}
					}
					if (base.velocity.X > num805)
					{
						base.velocity.X = num805;
					}
					if (base.velocity.X < 0f - num805)
					{
						base.velocity.X = 0f - num805;
					}
					if (base.velocity.Y > num805)
					{
						base.velocity.Y = num805;
					}
					if (base.velocity.Y < 0f - num805)
					{
						base.velocity.Y = 0f - num805;
					}
				}
				else if (this.ai[1] > 0f)
				{
					this.ai[1] -= 1f;
				}
				else
				{
					this.ai[1] = 0f;
				}
				if (num802 > 0f)
				{
					spriteDirection = 1;
					rotation = (float)Math.Atan2(num803, num802);
				}
				if (num802 < 0f)
				{
					spriteDirection = -1;
					rotation = (float)Math.Atan2(num803, num802) + 3.14f;
				}
				Lighting.AddLight((int)(base.position.X + (float)(width / 2)) / 16, (int)(base.position.Y + (float)(height / 2)) / 16, 0.3f, 0.2f, 0.1f);
			}
			else if (aiStyle == 30)
			{
				if (target < 0 || target == 16 || Main.player[target].dead || !Main.player[target].active)
				{
					TargetClosest();
				}
				bool dead2 = Main.player[target].dead;
				float num808 = base.position.X + (float)(width / 2) - Main.player[target].position.X - (float)(Main.player[target].width / 2);
				float num809 = base.position.Y + (float)height - 59f - Main.player[target].position.Y - (float)(Main.player[target].height / 2);
				float num810 = (float)Math.Atan2(num809, num808) + 1.57f;
				if (num810 < 0f)
				{
					num810 += 6.283f;
				}
				else if ((double)num810 > 6.283)
				{
					num810 -= 6.283f;
				}
				float num811 = 0.1f;
				if (rotation < num810)
				{
					if ((double)(num810 - rotation) > 3.1415)
					{
						rotation -= num811;
					}
					else
					{
						rotation += num811;
					}
				}
				else if (rotation > num810)
				{
					if ((double)(rotation - num810) > 3.1415)
					{
						rotation += num811;
					}
					else
					{
						rotation -= num811;
					}
				}
				if (rotation > num810 - num811 && rotation < num810 + num811)
				{
					rotation = num810;
				}
				if (rotation < 0f)
				{
					rotation += 6.283f;
				}
				else if ((double)rotation > 6.283)
				{
					rotation -= 6.283f;
				}
				if (rotation > num810 - num811 && rotation < num810 + num811)
				{
					rotation = num810;
				}
				if (Main.rand.Next(5) == 0)
				{
					int num812 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + (float)height * 0.25f), width, (int)((float)height * 0.5f), 5, base.velocity.X, 2f);
					Main.dust[num812].velocity.X *= 0.5f;
					Main.dust[num812].velocity.Y *= 0.1f;
				}
				if (Main.netMode != 1 && !Main.dayTime && !dead2 && timeLeft < 10)
				{
					for (int num813 = 0; num813 < 200; num813++)
					{
						if (num813 != base.whoAmI && Main.npc[num813].active && (Main.npc[num813].type == 125 || Main.npc[num813].type == 126) && Main.npc[num813].timeLeft - 1 > timeLeft)
						{
							timeLeft = Main.npc[num813].timeLeft - 1;
						}
					}
				}
				if (Main.dayTime || dead2)
				{
					base.velocity.Y -= 0.04f;
					if (timeLeft > 10)
					{
						timeLeft = 10;
					}
					return;
				}
				if (this.ai[0] == 0f)
				{
					if (this.ai[1] == 0f)
					{
						float num814 = 7f;
						float num815 = 0.1f;
						if (Main.expertMode)
						{
							num814 = 8.25f;
							num815 = 0.115f;
						}
						int num816 = 1;
						if (base.position.X + (float)(width / 2) < Main.player[target].position.X + (float)Main.player[target].width)
						{
							num816 = -1;
						}
						Vector2 vector81 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						float num817 = Main.player[target].position.X + (float)(Main.player[target].width / 2) + (float)(num816 * 300) - vector81.X;
						float num818 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - 300f - vector81.Y;
						float num819 = (float)Math.Sqrt(num817 * num817 + num818 * num818);
						float num820 = num819;
						num819 = num814 / num819;
						num817 *= num819;
						num818 *= num819;
						if (base.velocity.X < num817)
						{
							base.velocity.X += num815;
							if (base.velocity.X < 0f && num817 > 0f)
							{
								base.velocity.X += num815;
							}
						}
						else if (base.velocity.X > num817)
						{
							base.velocity.X -= num815;
							if (base.velocity.X > 0f && num817 < 0f)
							{
								base.velocity.X -= num815;
							}
						}
						if (base.velocity.Y < num818)
						{
							base.velocity.Y += num815;
							if (base.velocity.Y < 0f && num818 > 0f)
							{
								base.velocity.Y += num815;
							}
						}
						else if (base.velocity.Y > num818)
						{
							base.velocity.Y -= num815;
							if (base.velocity.Y > 0f && num818 < 0f)
							{
								base.velocity.Y -= num815;
							}
						}
						this.ai[2] += 1f;
						if (this.ai[2] >= 600f)
						{
							this.ai[1] = 1f;
							this.ai[2] = 0f;
							this.ai[3] = 0f;
							target = 16;
							netUpdate = true;
						}
						else if (base.position.Y + (float)height < Main.player[target].position.Y && num820 < 400f)
						{
							if (!Main.player[target].dead)
							{
								this.ai[3] += 1f;
								if (Main.expertMode && (double)life < (double)lifeMax * 0.9)
								{
									this.ai[3] += 0.3f;
								}
								if (Main.expertMode && (double)life < (double)lifeMax * 0.8)
								{
									this.ai[3] += 0.3f;
								}
								if (Main.expertMode && (double)life < (double)lifeMax * 0.7)
								{
									this.ai[3] += 0.3f;
								}
								if (Main.expertMode && (double)life < (double)lifeMax * 0.6)
								{
									this.ai[3] += 0.3f;
								}
							}
							if (this.ai[3] >= 60f)
							{
								this.ai[3] = 0f;
								vector81 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
								num817 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector81.X;
								num818 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector81.Y;
								if (Main.netMode != 1)
								{
									float num821 = 9f;
									int num822 = 20;
									int num823 = 83;
									if (Main.expertMode)
									{
										num821 = 10.5f;
										num822 = 19;
									}
									num819 = (float)Math.Sqrt(num817 * num817 + num818 * num818);
									num819 = num821 / num819;
									num817 *= num819;
									num818 *= num819;
									num817 += (float)Main.rand.Next(-40, 41) * 0.08f;
									num818 += (float)Main.rand.Next(-40, 41) * 0.08f;
									vector81.X += num817 * 15f;
									vector81.Y += num818 * 15f;
									Projectile.NewProjectile(vector81.X, vector81.Y, num817, num818, num823, num822, 0f, Main.myPlayer);
								}
							}
						}
					}
					else if (this.ai[1] == 1f)
					{
						rotation = num810;
						float num824 = 12f;
						if (Main.expertMode)
						{
							num824 = 15f;
						}
						Vector2 vector82 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						float num825 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector82.X;
						float num826 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector82.Y;
						float num827 = (float)Math.Sqrt(num825 * num825 + num826 * num826);
						num827 = num824 / num827;
						base.velocity.X = num825 * num827;
						base.velocity.Y = num826 * num827;
						this.ai[1] = 2f;
					}
					else if (this.ai[1] == 2f)
					{
						this.ai[2] += 1f;
						if (this.ai[2] >= 25f)
						{
							base.velocity.X *= 0.96f;
							base.velocity.Y *= 0.96f;
							if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
							{
								base.velocity.X = 0f;
							}
							if ((double)base.velocity.Y > -0.1 && (double)base.velocity.Y < 0.1)
							{
								base.velocity.Y = 0f;
							}
						}
						else
						{
							rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) - 1.57f;
						}
						if (this.ai[2] >= 70f)
						{
							this.ai[3] += 1f;
							this.ai[2] = 0f;
							target = 16;
							rotation = num810;
							if (this.ai[3] >= 4f)
							{
								this.ai[1] = 0f;
								this.ai[3] = 0f;
							}
							else
							{
								this.ai[1] = 1f;
							}
						}
					}
					if ((double)life < (double)lifeMax * 0.4)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
					return;
				}
				if (this.ai[0] == 1f || this.ai[0] == 2f)
				{
					if (this.ai[0] == 1f)
					{
						this.ai[2] += 0.005f;
						if ((double)this.ai[2] > 0.5)
						{
							this.ai[2] = 0.5f;
						}
					}
					else
					{
						this.ai[2] -= 0.005f;
						if (this.ai[2] < 0f)
						{
							this.ai[2] = 0f;
						}
					}
					rotation += this.ai[2];
					this.ai[1] += 1f;
					if (this.ai[1] == 100f)
					{
						this.ai[0] += 1f;
						this.ai[1] = 0f;
						if (this.ai[0] == 3f)
						{
							this.ai[2] = 0f;
						}
						else
						{
							Main.PlaySound(3, (int)base.position.X, (int)base.position.Y);
							for (int num828 = 0; num828 < 2; num828++)
							{
								Gore.NewGore(base.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 143);
								Gore.NewGore(base.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 7);
								Gore.NewGore(base.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 6);
							}
							for (int num829 = 0; num829 < 20; num829++)
							{
								Dust.NewDust(base.position, width, height, 5, (float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f);
							}
							Main.PlaySound(15, (int)base.position.X, (int)base.position.Y, 0);
						}
					}
					Dust.NewDust(base.position, width, height, 5, (float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f);
					base.velocity.X *= 0.98f;
					base.velocity.Y *= 0.98f;
					if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
					{
						base.velocity.X = 0f;
					}
					if ((double)base.velocity.Y > -0.1 && (double)base.velocity.Y < 0.1)
					{
						base.velocity.Y = 0f;
					}
					return;
				}
				damage = (int)((double)defDamage * 1.5);
				defense = defDefense + 10;
				soundHit = 4;
				if (this.ai[1] == 0f)
				{
					float num830 = 8f;
					float num831 = 0.15f;
					if (Main.expertMode)
					{
						num830 = 9.5f;
						num831 = 0.175f;
					}
					Vector2 vector83 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num832 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector83.X;
					float num833 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - 300f - vector83.Y;
					float num834 = (float)Math.Sqrt(num832 * num832 + num833 * num833);
					num834 = num830 / num834;
					num832 *= num834;
					num833 *= num834;
					if (base.velocity.X < num832)
					{
						base.velocity.X += num831;
						if (base.velocity.X < 0f && num832 > 0f)
						{
							base.velocity.X += num831;
						}
					}
					else if (base.velocity.X > num832)
					{
						base.velocity.X -= num831;
						if (base.velocity.X > 0f && num832 < 0f)
						{
							base.velocity.X -= num831;
						}
					}
					if (base.velocity.Y < num833)
					{
						base.velocity.Y += num831;
						if (base.velocity.Y < 0f && num833 > 0f)
						{
							base.velocity.Y += num831;
						}
					}
					else if (base.velocity.Y > num833)
					{
						base.velocity.Y -= num831;
						if (base.velocity.Y > 0f && num833 < 0f)
						{
							base.velocity.Y -= num831;
						}
					}
					this.ai[2] += 1f;
					if (this.ai[2] >= 300f)
					{
						this.ai[1] = 1f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						TargetClosest();
						netUpdate = true;
					}
					vector83 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					num832 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector83.X;
					num833 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector83.Y;
					rotation = (float)Math.Atan2(num833, num832) - 1.57f;
					if (Main.netMode == 1)
					{
						return;
					}
					localAI[1] += 1f;
					if ((double)life < (double)lifeMax * 0.75)
					{
						localAI[1] += 1f;
					}
					if ((double)life < (double)lifeMax * 0.5)
					{
						localAI[1] += 1f;
					}
					if ((double)life < (double)lifeMax * 0.25)
					{
						localAI[1] += 1f;
					}
					if ((double)life < (double)lifeMax * 0.1)
					{
						localAI[1] += 2f;
					}
					if (localAI[1] > 180f && Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						localAI[1] = 0f;
						float num835 = 8.5f;
						int num836 = 25;
						int num837 = 100;
						if (Main.expertMode)
						{
							num835 = 10f;
							num836 = 23;
						}
						num834 = (float)Math.Sqrt(num832 * num832 + num833 * num833);
						num834 = num835 / num834;
						num832 *= num834;
						num833 *= num834;
						vector83.X += num832 * 15f;
						vector83.Y += num833 * 15f;
						Projectile.NewProjectile(vector83.X, vector83.Y, num832, num833, num837, num836, 0f, Main.myPlayer);
					}
					return;
				}
				int num838 = 1;
				if (base.position.X + (float)(width / 2) < Main.player[target].position.X + (float)Main.player[target].width)
				{
					num838 = -1;
				}
				float num839 = 8f;
				float num840 = 0.2f;
				if (Main.expertMode)
				{
					num839 = 9.5f;
					num840 = 0.25f;
				}
				Vector2 vector84 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num841 = Main.player[target].position.X + (float)(Main.player[target].width / 2) + (float)(num838 * 340) - vector84.X;
				float num842 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector84.Y;
				float num843 = (float)Math.Sqrt(num841 * num841 + num842 * num842);
				num843 = num839 / num843;
				num841 *= num843;
				num842 *= num843;
				if (base.velocity.X < num841)
				{
					base.velocity.X += num840;
					if (base.velocity.X < 0f && num841 > 0f)
					{
						base.velocity.X += num840;
					}
				}
				else if (base.velocity.X > num841)
				{
					base.velocity.X -= num840;
					if (base.velocity.X > 0f && num841 < 0f)
					{
						base.velocity.X -= num840;
					}
				}
				if (base.velocity.Y < num842)
				{
					base.velocity.Y += num840;
					if (base.velocity.Y < 0f && num842 > 0f)
					{
						base.velocity.Y += num840;
					}
				}
				else if (base.velocity.Y > num842)
				{
					base.velocity.Y -= num840;
					if (base.velocity.Y > 0f && num842 < 0f)
					{
						base.velocity.Y -= num840;
					}
				}
				vector84 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				num841 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector84.X;
				num842 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector84.Y;
				rotation = (float)Math.Atan2(num842, num841) - 1.57f;
				if (Main.netMode != 1)
				{
					localAI[1] += 1f;
					if ((double)life < (double)lifeMax * 0.75)
					{
						localAI[1] += 0.5f;
					}
					if ((double)life < (double)lifeMax * 0.5)
					{
						localAI[1] += 0.75f;
					}
					if ((double)life < (double)lifeMax * 0.25)
					{
						localAI[1] += 1f;
					}
					if ((double)life < (double)lifeMax * 0.1)
					{
						localAI[1] += 1.5f;
					}
					if (Main.expertMode)
					{
						localAI[1] += 1.5f;
					}
					if (localAI[1] > 60f && Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						localAI[1] = 0f;
						float num844 = 9f;
						int num845 = 18;
						int num846 = 100;
						if (Main.expertMode)
						{
							num845 = 17;
						}
						num843 = (float)Math.Sqrt(num841 * num841 + num842 * num842);
						num843 = num844 / num843;
						num841 *= num843;
						num842 *= num843;
						vector84.X += num841 * 15f;
						vector84.Y += num842 * 15f;
						Projectile.NewProjectile(vector84.X, vector84.Y, num841, num842, num846, num845, 0f, Main.myPlayer);
					}
				}
				this.ai[2] += 1f;
				if (this.ai[2] >= 180f)
				{
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					TargetClosest();
					netUpdate = true;
				}
			}
			else if (aiStyle == 31)
			{
				if (target < 0 || target == 16 || Main.player[target].dead || !Main.player[target].active)
				{
					TargetClosest();
				}
				bool dead3 = Main.player[target].dead;
				float num847 = base.position.X + (float)(width / 2) - Main.player[target].position.X - (float)(Main.player[target].width / 2);
				float num848 = base.position.Y + (float)height - 59f - Main.player[target].position.Y - (float)(Main.player[target].height / 2);
				float num849 = (float)Math.Atan2(num848, num847) + 1.57f;
				if (num849 < 0f)
				{
					num849 += 6.283f;
				}
				else if ((double)num849 > 6.283)
				{
					num849 -= 6.283f;
				}
				float num850 = 0.15f;
				if (rotation < num849)
				{
					if ((double)(num849 - rotation) > 3.1415)
					{
						rotation -= num850;
					}
					else
					{
						rotation += num850;
					}
				}
				else if (rotation > num849)
				{
					if ((double)(rotation - num849) > 3.1415)
					{
						rotation += num850;
					}
					else
					{
						rotation -= num850;
					}
				}
				if (rotation > num849 - num850 && rotation < num849 + num850)
				{
					rotation = num849;
				}
				if (rotation < 0f)
				{
					rotation += 6.283f;
				}
				else if ((double)rotation > 6.283)
				{
					rotation -= 6.283f;
				}
				if (rotation > num849 - num850 && rotation < num849 + num850)
				{
					rotation = num849;
				}
				if (Main.rand.Next(5) == 0)
				{
					int num851 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + (float)height * 0.25f), width, (int)((float)height * 0.5f), 5, base.velocity.X, 2f);
					Main.dust[num851].velocity.X *= 0.5f;
					Main.dust[num851].velocity.Y *= 0.1f;
				}
				if (Main.netMode != 1 && !Main.dayTime && !dead3 && timeLeft < 10)
				{
					for (int num852 = 0; num852 < 200; num852++)
					{
						if (num852 != base.whoAmI && Main.npc[num852].active && (Main.npc[num852].type == 125 || Main.npc[num852].type == 126) && Main.npc[num852].timeLeft - 1 > timeLeft)
						{
							timeLeft = Main.npc[num852].timeLeft - 1;
						}
					}
				}
				if (Main.dayTime || dead3)
				{
					base.velocity.Y -= 0.04f;
					if (timeLeft > 10)
					{
						timeLeft = 10;
					}
					return;
				}
				if (this.ai[0] == 0f)
				{
					if (this.ai[1] == 0f)
					{
						TargetClosest();
						float num853 = 12f;
						float num854 = 0.4f;
						int num855 = 1;
						if (base.position.X + (float)(width / 2) < Main.player[target].position.X + (float)Main.player[target].width)
						{
							num855 = -1;
						}
						Vector2 vector85 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						float num856 = Main.player[target].position.X + (float)(Main.player[target].width / 2) + (float)(num855 * 400) - vector85.X;
						float num857 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector85.Y;
						float num858 = (float)Math.Sqrt(num856 * num856 + num857 * num857);
						num858 = num853 / num858;
						num856 *= num858;
						num857 *= num858;
						if (base.velocity.X < num856)
						{
							base.velocity.X += num854;
							if (base.velocity.X < 0f && num856 > 0f)
							{
								base.velocity.X += num854;
							}
						}
						else if (base.velocity.X > num856)
						{
							base.velocity.X -= num854;
							if (base.velocity.X > 0f && num856 < 0f)
							{
								base.velocity.X -= num854;
							}
						}
						if (base.velocity.Y < num857)
						{
							base.velocity.Y += num854;
							if (base.velocity.Y < 0f && num857 > 0f)
							{
								base.velocity.Y += num854;
							}
						}
						else if (base.velocity.Y > num857)
						{
							base.velocity.Y -= num854;
							if (base.velocity.Y > 0f && num857 < 0f)
							{
								base.velocity.Y -= num854;
							}
						}
						this.ai[2] += 1f;
						if (this.ai[2] >= 600f)
						{
							this.ai[1] = 1f;
							this.ai[2] = 0f;
							this.ai[3] = 0f;
							target = 16;
							netUpdate = true;
						}
						else
						{
							if (!Main.player[target].dead)
							{
								this.ai[3] += 1f;
								if (Main.expertMode && (double)life < (double)lifeMax * 0.8)
								{
									this.ai[3] += 0.6f;
								}
							}
							if (this.ai[3] >= 60f)
							{
								this.ai[3] = 0f;
								vector85 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
								num856 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector85.X;
								num857 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector85.Y;
								if (Main.netMode != 1)
								{
									float num859 = 12f;
									int num860 = 25;
									int num861 = 96;
									if (Main.expertMode)
									{
										num859 = 14f;
										num860 = 22;
									}
									num858 = (float)Math.Sqrt(num856 * num856 + num857 * num857);
									num858 = num859 / num858;
									num856 *= num858;
									num857 *= num858;
									num856 += (float)Main.rand.Next(-40, 41) * 0.05f;
									num857 += (float)Main.rand.Next(-40, 41) * 0.05f;
									vector85.X += num856 * 4f;
									vector85.Y += num857 * 4f;
									Projectile.NewProjectile(vector85.X, vector85.Y, num856, num857, num861, num860, 0f, Main.myPlayer);
								}
							}
						}
					}
					else if (this.ai[1] == 1f)
					{
						rotation = num849;
						float num862 = 13f;
						if (Main.expertMode)
						{
							if ((double)life < (double)lifeMax * 0.9)
							{
								num862 += 0.5f;
							}
							if ((double)life < (double)lifeMax * 0.8)
							{
								num862 += 0.5f;
							}
							if ((double)life < (double)lifeMax * 0.7)
							{
								num862 += 0.55f;
							}
							if ((double)life < (double)lifeMax * 0.6)
							{
								num862 += 0.6f;
							}
							if ((double)life < (double)lifeMax * 0.5)
							{
								num862 += 0.65f;
							}
						}
						Vector2 vector86 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						float num863 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector86.X;
						float num864 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector86.Y;
						float num865 = (float)Math.Sqrt(num863 * num863 + num864 * num864);
						num865 = num862 / num865;
						base.velocity.X = num863 * num865;
						base.velocity.Y = num864 * num865;
						this.ai[1] = 2f;
					}
					else if (this.ai[1] == 2f)
					{
						this.ai[2] += 1f;
						if (this.ai[2] >= 8f)
						{
							base.velocity.X *= 0.9f;
							base.velocity.Y *= 0.9f;
							if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
							{
								base.velocity.X = 0f;
							}
							if ((double)base.velocity.Y > -0.1 && (double)base.velocity.Y < 0.1)
							{
								base.velocity.Y = 0f;
							}
						}
						else
						{
							rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) - 1.57f;
						}
						if (this.ai[2] >= 42f)
						{
							this.ai[3] += 1f;
							this.ai[2] = 0f;
							target = 16;
							rotation = num849;
							if (this.ai[3] >= 10f)
							{
								this.ai[1] = 0f;
								this.ai[3] = 0f;
							}
							else
							{
								this.ai[1] = 1f;
							}
						}
					}
					if ((double)life < (double)lifeMax * 0.4)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
					return;
				}
				if (this.ai[0] == 1f || this.ai[0] == 2f)
				{
					if (this.ai[0] == 1f)
					{
						this.ai[2] += 0.005f;
						if ((double)this.ai[2] > 0.5)
						{
							this.ai[2] = 0.5f;
						}
					}
					else
					{
						this.ai[2] -= 0.005f;
						if (this.ai[2] < 0f)
						{
							this.ai[2] = 0f;
						}
					}
					rotation += this.ai[2];
					this.ai[1] += 1f;
					if (this.ai[1] == 100f)
					{
						this.ai[0] += 1f;
						this.ai[1] = 0f;
						if (this.ai[0] == 3f)
						{
							this.ai[2] = 0f;
						}
						else
						{
							Main.PlaySound(3, (int)base.position.X, (int)base.position.Y);
							for (int num866 = 0; num866 < 2; num866++)
							{
								Gore.NewGore(base.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 144);
								Gore.NewGore(base.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 7);
								Gore.NewGore(base.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 6);
							}
							for (int num867 = 0; num867 < 20; num867++)
							{
								Dust.NewDust(base.position, width, height, 5, (float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f);
							}
							Main.PlaySound(15, (int)base.position.X, (int)base.position.Y, 0);
						}
					}
					Dust.NewDust(base.position, width, height, 5, (float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f);
					base.velocity.X *= 0.98f;
					base.velocity.Y *= 0.98f;
					if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
					{
						base.velocity.X = 0f;
					}
					if ((double)base.velocity.Y > -0.1 && (double)base.velocity.Y < 0.1)
					{
						base.velocity.Y = 0f;
					}
					return;
				}
				soundHit = 4;
				damage = (int)((double)defDamage * 1.5);
				defense = defDefense + 18;
				if (this.ai[1] == 0f)
				{
					float num868 = 4f;
					float num869 = 0.1f;
					int num870 = 1;
					if (base.position.X + (float)(width / 2) < Main.player[target].position.X + (float)Main.player[target].width)
					{
						num870 = -1;
					}
					Vector2 vector87 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num871 = Main.player[target].position.X + (float)(Main.player[target].width / 2) + (float)(num870 * 180) - vector87.X;
					float num872 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector87.Y;
					float num873 = (float)Math.Sqrt(num871 * num871 + num872 * num872);
					if (Main.expertMode)
					{
						if (num873 > 300f)
						{
							num868 += 0.5f;
						}
						if (num873 > 400f)
						{
							num868 += 0.5f;
						}
						if (num873 > 500f)
						{
							num868 += 0.55f;
						}
						if (num873 > 600f)
						{
							num868 += 0.55f;
						}
						if (num873 > 700f)
						{
							num868 += 0.6f;
						}
						if (num873 > 800f)
						{
							num868 += 0.6f;
						}
					}
					num873 = num868 / num873;
					num871 *= num873;
					num872 *= num873;
					if (base.velocity.X < num871)
					{
						base.velocity.X += num869;
						if (base.velocity.X < 0f && num871 > 0f)
						{
							base.velocity.X += num869;
						}
					}
					else if (base.velocity.X > num871)
					{
						base.velocity.X -= num869;
						if (base.velocity.X > 0f && num871 < 0f)
						{
							base.velocity.X -= num869;
						}
					}
					if (base.velocity.Y < num872)
					{
						base.velocity.Y += num869;
						if (base.velocity.Y < 0f && num872 > 0f)
						{
							base.velocity.Y += num869;
						}
					}
					else if (base.velocity.Y > num872)
					{
						base.velocity.Y -= num869;
						if (base.velocity.Y > 0f && num872 < 0f)
						{
							base.velocity.Y -= num869;
						}
					}
					this.ai[2] += 1f;
					if (this.ai[2] >= 400f)
					{
						this.ai[1] = 1f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						target = 16;
						netUpdate = true;
					}
					if (!Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						return;
					}
					localAI[2] += 1f;
					if (localAI[2] > 22f)
					{
						localAI[2] = 0f;
						Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 34);
					}
					if (Main.netMode == 1)
					{
						return;
					}
					localAI[1] += 1f;
					if ((double)life < (double)lifeMax * 0.75)
					{
						localAI[1] += 1f;
					}
					if ((double)life < (double)lifeMax * 0.5)
					{
						localAI[1] += 1f;
					}
					if ((double)life < (double)lifeMax * 0.25)
					{
						localAI[1] += 1f;
					}
					if ((double)life < (double)lifeMax * 0.1)
					{
						localAI[1] += 2f;
					}
					if (localAI[1] > 8f)
					{
						localAI[1] = 0f;
						float num874 = 6f;
						int num875 = 30;
						if (Main.expertMode)
						{
							num875 = 27;
						}
						int num876 = 101;
						vector87 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						num871 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector87.X;
						num872 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector87.Y;
						num873 = (float)Math.Sqrt(num871 * num871 + num872 * num872);
						num873 = num874 / num873;
						num871 *= num873;
						num872 *= num873;
						num872 += (float)Main.rand.Next(-40, 41) * 0.01f;
						num871 += (float)Main.rand.Next(-40, 41) * 0.01f;
						num872 += base.velocity.Y * 0.5f;
						num871 += base.velocity.X * 0.5f;
						vector87.X -= num871 * 1f;
						vector87.Y -= num872 * 1f;
						Projectile.NewProjectile(vector87.X, vector87.Y, num871, num872, num876, num875, 0f, Main.myPlayer);
					}
				}
				else if (this.ai[1] == 1f)
				{
					Main.PlaySound(15, (int)base.position.X, (int)base.position.Y, 0);
					rotation = num849;
					float num877 = 14f;
					if (Main.expertMode)
					{
						num877 += 2.5f;
					}
					Vector2 vector88 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num878 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector88.X;
					float num879 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector88.Y;
					float num880 = (float)Math.Sqrt(num878 * num878 + num879 * num879);
					num880 = num877 / num880;
					base.velocity.X = num878 * num880;
					base.velocity.Y = num879 * num880;
					this.ai[1] = 2f;
				}
				else
				{
					if (this.ai[1] != 2f)
					{
						return;
					}
					this.ai[2] += 1f;
					if (Main.expertMode)
					{
						this.ai[2] += 0.5f;
					}
					if (this.ai[2] >= 50f)
					{
						base.velocity.X *= 0.93f;
						base.velocity.Y *= 0.93f;
						if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
						{
							base.velocity.X = 0f;
						}
						if ((double)base.velocity.Y > -0.1 && (double)base.velocity.Y < 0.1)
						{
							base.velocity.Y = 0f;
						}
					}
					else
					{
						rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) - 1.57f;
					}
					if (this.ai[2] >= 80f)
					{
						this.ai[3] += 1f;
						this.ai[2] = 0f;
						target = 16;
						rotation = num849;
						if (this.ai[3] >= 6f)
						{
							this.ai[1] = 0f;
							this.ai[3] = 0f;
						}
						else
						{
							this.ai[1] = 1f;
						}
					}
				}
			}
			else if (aiStyle == 32)
			{
				damage = defDamage;
				defense = defDefense;
				if (this.ai[0] == 0f && Main.netMode != 1)
				{
					TargetClosest();
					this.ai[0] = 1f;
					int num881 = NewNPC((int)(base.position.X + (float)(width / 2)), (int)base.position.Y + height / 2, 128, base.whoAmI);
					Main.npc[num881].ai[0] = -1f;
					Main.npc[num881].ai[1] = base.whoAmI;
					Main.npc[num881].target = target;
					Main.npc[num881].netUpdate = true;
					num881 = NewNPC((int)(base.position.X + (float)(width / 2)), (int)base.position.Y + height / 2, 129, base.whoAmI);
					Main.npc[num881].ai[0] = 1f;
					Main.npc[num881].ai[1] = base.whoAmI;
					Main.npc[num881].target = target;
					Main.npc[num881].netUpdate = true;
					num881 = NewNPC((int)(base.position.X + (float)(width / 2)), (int)base.position.Y + height / 2, 130, base.whoAmI);
					Main.npc[num881].ai[0] = -1f;
					Main.npc[num881].ai[1] = base.whoAmI;
					Main.npc[num881].target = target;
					Main.npc[num881].ai[3] = 150f;
					Main.npc[num881].netUpdate = true;
					num881 = NewNPC((int)(base.position.X + (float)(width / 2)), (int)base.position.Y + height / 2, 131, base.whoAmI);
					Main.npc[num881].ai[0] = 1f;
					Main.npc[num881].ai[1] = base.whoAmI;
					Main.npc[num881].target = target;
					Main.npc[num881].netUpdate = true;
					Main.npc[num881].ai[3] = 150f;
				}
				if (Main.player[target].dead || Math.Abs(base.position.X - Main.player[target].position.X) > 6000f || Math.Abs(base.position.Y - Main.player[target].position.Y) > 6000f)
				{
					TargetClosest();
					if (Main.player[target].dead || Math.Abs(base.position.X - Main.player[target].position.X) > 6000f || Math.Abs(base.position.Y - Main.player[target].position.Y) > 6000f)
					{
						this.ai[1] = 3f;
					}
				}
				if (Main.dayTime && this.ai[1] != 3f && this.ai[1] != 2f)
				{
					this.ai[1] = 2f;
					Main.PlaySound(15, (int)base.position.X, (int)base.position.Y, 0);
				}
				if (this.ai[1] == 0f)
				{
					this.ai[2] += 1f;
					if (this.ai[2] >= 600f)
					{
						this.ai[2] = 0f;
						this.ai[1] = 1f;
						TargetClosest();
						netUpdate = true;
					}
					rotation = base.velocity.X / 15f;
					if (base.position.Y > Main.player[target].position.Y - 200f)
					{
						if (base.velocity.Y > 0f)
						{
							base.velocity.Y *= 0.98f;
						}
						base.velocity.Y -= 0.1f;
						if (base.velocity.Y > 2f)
						{
							base.velocity.Y = 2f;
						}
					}
					else if (base.position.Y < Main.player[target].position.Y - 500f)
					{
						if (base.velocity.Y < 0f)
						{
							base.velocity.Y *= 0.98f;
						}
						base.velocity.Y += 0.1f;
						if (base.velocity.Y < -2f)
						{
							base.velocity.Y = -2f;
						}
					}
					if (base.position.X + (float)(width / 2) > Main.player[target].position.X + (float)(Main.player[target].width / 2) + 100f)
					{
						if (base.velocity.X > 0f)
						{
							base.velocity.X *= 0.98f;
						}
						base.velocity.X -= 0.1f;
						if (base.velocity.X > 8f)
						{
							base.velocity.X = 8f;
						}
					}
					if (base.position.X + (float)(width / 2) < Main.player[target].position.X + (float)(Main.player[target].width / 2) - 100f)
					{
						if (base.velocity.X < 0f)
						{
							base.velocity.X *= 0.98f;
						}
						base.velocity.X += 0.1f;
						if (base.velocity.X < -8f)
						{
							base.velocity.X = -8f;
						}
					}
				}
				else if (this.ai[1] == 1f)
				{
					defense *= 2;
					damage *= 2;
					this.ai[2] += 1f;
					if (this.ai[2] == 2f)
					{
						Main.PlaySound(15, (int)base.position.X, (int)base.position.Y, 0);
					}
					if (this.ai[2] >= 400f)
					{
						this.ai[2] = 0f;
						this.ai[1] = 0f;
					}
					rotation += (float)base.direction * 0.3f;
					Vector2 vector89 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num882 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector89.X;
					float num883 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector89.Y;
					float num884 = (float)Math.Sqrt(num882 * num882 + num883 * num883);
					num884 = 2f / num884;
					base.velocity.X = num882 * num884;
					base.velocity.Y = num883 * num884;
				}
				else if (this.ai[1] == 2f)
				{
					damage = 1000;
					defense = 9999;
					rotation += (float)base.direction * 0.3f;
					Vector2 vector90 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num885 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector90.X;
					float num886 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector90.Y;
					float num887 = (float)Math.Sqrt(num885 * num885 + num886 * num886);
					float num888 = 10f;
					num888 += num887 / 100f;
					if (num888 < 8f)
					{
						num888 = 8f;
					}
					if (num888 > 32f)
					{
						num888 = 32f;
					}
					num887 = num888 / num887;
					base.velocity.X = num885 * num887;
					base.velocity.Y = num886 * num887;
				}
				else if (this.ai[1] == 3f)
				{
					base.velocity.Y += 0.1f;
					if (base.velocity.Y < 0f)
					{
						base.velocity.Y *= 0.95f;
					}
					base.velocity.X *= 0.95f;
					if (timeLeft > 500)
					{
						timeLeft = 500;
					}
				}
			}
			else if (aiStyle == 33)
			{
				Vector2 vector91 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num889 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector91.X;
				float num890 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector91.Y;
				float num891 = (float)Math.Sqrt(num889 * num889 + num890 * num890);
				if (this.ai[2] != 99f)
				{
					if (num891 > 800f)
					{
						this.ai[2] = 99f;
					}
				}
				else if (num891 < 400f)
				{
					this.ai[2] = 0f;
				}
				spriteDirection = -(int)this.ai[0];
				if (!Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].aiStyle != 32)
				{
					this.ai[2] += 10f;
					if (this.ai[2] > 50f || Main.netMode != 2)
					{
						life = -1;
						HitEffect();
						active = false;
					}
				}
				if (this.ai[2] == 99f)
				{
					if (base.position.Y > Main.npc[(int)this.ai[1]].position.Y)
					{
						if (base.velocity.Y > 0f)
						{
							base.velocity.Y *= 0.96f;
						}
						base.velocity.Y -= 0.1f;
						if (base.velocity.Y > 8f)
						{
							base.velocity.Y = 8f;
						}
					}
					else if (base.position.Y < Main.npc[(int)this.ai[1]].position.Y)
					{
						if (base.velocity.Y < 0f)
						{
							base.velocity.Y *= 0.96f;
						}
						base.velocity.Y += 0.1f;
						if (base.velocity.Y < -8f)
						{
							base.velocity.Y = -8f;
						}
					}
					if (base.position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2))
					{
						if (base.velocity.X > 0f)
						{
							base.velocity.X *= 0.96f;
						}
						base.velocity.X -= 0.5f;
						if (base.velocity.X > 12f)
						{
							base.velocity.X = 12f;
						}
					}
					if (base.position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2))
					{
						if (base.velocity.X < 0f)
						{
							base.velocity.X *= 0.96f;
						}
						base.velocity.X += 0.5f;
						if (base.velocity.X < -12f)
						{
							base.velocity.X = -12f;
						}
					}
				}
				else if (this.ai[2] == 0f || this.ai[2] == 3f)
				{
					if (Main.npc[(int)this.ai[1]].ai[1] == 3f && timeLeft > 10)
					{
						timeLeft = 10;
					}
					if (Main.npc[(int)this.ai[1]].ai[1] != 0f)
					{
						TargetClosest();
						if (Main.player[target].dead)
						{
							base.velocity.Y += 0.1f;
							if (base.velocity.Y > 16f)
							{
								base.velocity.Y = 16f;
							}
						}
						else
						{
							Vector2 vector92 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
							float num892 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector92.X;
							float num893 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector92.Y;
							float num894 = (float)Math.Sqrt(num892 * num892 + num893 * num893);
							num894 = 7f / num894;
							num892 *= num894;
							num893 *= num894;
							rotation = (float)Math.Atan2(num893, num892) - 1.57f;
							if (base.velocity.X > num892)
							{
								if (base.velocity.X > 0f)
								{
									base.velocity.X *= 0.97f;
								}
								base.velocity.X -= 0.05f;
							}
							if (base.velocity.X < num892)
							{
								if (base.velocity.X < 0f)
								{
									base.velocity.X *= 0.97f;
								}
								base.velocity.X += 0.05f;
							}
							if (base.velocity.Y > num893)
							{
								if (base.velocity.Y > 0f)
								{
									base.velocity.Y *= 0.97f;
								}
								base.velocity.Y -= 0.05f;
							}
							if (base.velocity.Y < num893)
							{
								if (base.velocity.Y < 0f)
								{
									base.velocity.Y *= 0.97f;
								}
								base.velocity.Y += 0.05f;
							}
						}
						this.ai[3] += 1f;
						if (this.ai[3] >= 600f)
						{
							this.ai[2] = 0f;
							this.ai[3] = 0f;
							netUpdate = true;
						}
					}
					else
					{
						this.ai[3] += 1f;
						if (this.ai[3] >= 300f)
						{
							this.ai[2] += 1f;
							this.ai[3] = 0f;
							netUpdate = true;
						}
						if (base.position.Y > Main.npc[(int)this.ai[1]].position.Y + 320f)
						{
							if (base.velocity.Y > 0f)
							{
								base.velocity.Y *= 0.96f;
							}
							base.velocity.Y -= 0.04f;
							if (base.velocity.Y > 3f)
							{
								base.velocity.Y = 3f;
							}
						}
						else if (base.position.Y < Main.npc[(int)this.ai[1]].position.Y + 260f)
						{
							if (base.velocity.Y < 0f)
							{
								base.velocity.Y *= 0.96f;
							}
							base.velocity.Y += 0.04f;
							if (base.velocity.Y < -3f)
							{
								base.velocity.Y = -3f;
							}
						}
						if (base.position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2))
						{
							if (base.velocity.X > 0f)
							{
								base.velocity.X *= 0.96f;
							}
							base.velocity.X -= 0.3f;
							if (base.velocity.X > 12f)
							{
								base.velocity.X = 12f;
							}
						}
						if (base.position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 250f)
						{
							if (base.velocity.X < 0f)
							{
								base.velocity.X *= 0.96f;
							}
							base.velocity.X += 0.3f;
							if (base.velocity.X < -12f)
							{
								base.velocity.X = -12f;
							}
						}
					}
					Vector2 vector93 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num895 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector93.X;
					float num896 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector93.Y;
					Math.Sqrt(num895 * num895 + num896 * num896);
					rotation = (float)Math.Atan2(num896, num895) + 1.57f;
				}
				else if (this.ai[2] == 1f)
				{
					Vector2 vector94 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num897 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector94.X;
					float num898 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector94.Y;
					float num899 = (float)Math.Sqrt(num897 * num897 + num898 * num898);
					rotation = (float)Math.Atan2(num898, num897) + 1.57f;
					base.velocity.X *= 0.95f;
					base.velocity.Y -= 0.1f;
					if (base.velocity.Y < -8f)
					{
						base.velocity.Y = -8f;
					}
					if (base.position.Y < Main.npc[(int)this.ai[1]].position.Y - 200f)
					{
						TargetClosest();
						this.ai[2] = 2f;
						vector94 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						num897 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector94.X;
						num898 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector94.Y;
						num899 = (float)Math.Sqrt(num897 * num897 + num898 * num898);
						num899 = 22f / num899;
						base.velocity.X = num897 * num899;
						base.velocity.Y = num898 * num899;
						netUpdate = true;
					}
				}
				else if (this.ai[2] == 2f)
				{
					if (base.position.Y > Main.player[target].position.Y || base.velocity.Y < 0f)
					{
						this.ai[2] = 3f;
					}
				}
				else if (this.ai[2] == 4f)
				{
					TargetClosest();
					Vector2 vector95 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num900 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector95.X;
					float num901 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector95.Y;
					float num902 = (float)Math.Sqrt(num900 * num900 + num901 * num901);
					num902 = 7f / num902;
					num900 *= num902;
					num901 *= num902;
					if (base.velocity.X > num900)
					{
						if (base.velocity.X > 0f)
						{
							base.velocity.X *= 0.97f;
						}
						base.velocity.X -= 0.05f;
					}
					if (base.velocity.X < num900)
					{
						if (base.velocity.X < 0f)
						{
							base.velocity.X *= 0.97f;
						}
						base.velocity.X += 0.05f;
					}
					if (base.velocity.Y > num901)
					{
						if (base.velocity.Y > 0f)
						{
							base.velocity.Y *= 0.97f;
						}
						base.velocity.Y -= 0.05f;
					}
					if (base.velocity.Y < num901)
					{
						if (base.velocity.Y < 0f)
						{
							base.velocity.Y *= 0.97f;
						}
						base.velocity.Y += 0.05f;
					}
					this.ai[3] += 1f;
					if (this.ai[3] >= 600f)
					{
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
					vector95 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					num900 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector95.X;
					num901 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector95.Y;
					num902 = (float)Math.Sqrt(num900 * num900 + num901 * num901);
					rotation = (float)Math.Atan2(num901, num900) + 1.57f;
				}
				else if (this.ai[2] == 5f && ((base.velocity.X > 0f && base.position.X + (float)(width / 2) > Main.player[target].position.X + (float)(Main.player[target].width / 2)) || (base.velocity.X < 0f && base.position.X + (float)(width / 2) < Main.player[target].position.X + (float)(Main.player[target].width / 2))))
				{
					this.ai[2] = 0f;
				}
			}
			else if (aiStyle == 34)
			{
				spriteDirection = -(int)this.ai[0];
				Vector2 vector96 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num903 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector96.X;
				float num904 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector96.Y;
				float num905 = (float)Math.Sqrt(num903 * num903 + num904 * num904);
				if (this.ai[2] != 99f)
				{
					if (num905 > 800f)
					{
						this.ai[2] = 99f;
					}
				}
				else if (num905 < 400f)
				{
					this.ai[2] = 0f;
				}
				if (!Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].aiStyle != 32)
				{
					this.ai[2] += 10f;
					if (this.ai[2] > 50f || Main.netMode != 2)
					{
						life = -1;
						HitEffect();
						active = false;
					}
				}
				if (this.ai[2] == 99f)
				{
					if (base.position.Y > Main.npc[(int)this.ai[1]].position.Y)
					{
						if (base.velocity.Y > 0f)
						{
							base.velocity.Y *= 0.96f;
						}
						base.velocity.Y -= 0.1f;
						if (base.velocity.Y > 8f)
						{
							base.velocity.Y = 8f;
						}
					}
					else if (base.position.Y < Main.npc[(int)this.ai[1]].position.Y)
					{
						if (base.velocity.Y < 0f)
						{
							base.velocity.Y *= 0.96f;
						}
						base.velocity.Y += 0.1f;
						if (base.velocity.Y < -8f)
						{
							base.velocity.Y = -8f;
						}
					}
					if (base.position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2))
					{
						if (base.velocity.X > 0f)
						{
							base.velocity.X *= 0.96f;
						}
						base.velocity.X -= 0.5f;
						if (base.velocity.X > 12f)
						{
							base.velocity.X = 12f;
						}
					}
					if (base.position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2))
					{
						if (base.velocity.X < 0f)
						{
							base.velocity.X *= 0.96f;
						}
						base.velocity.X += 0.5f;
						if (base.velocity.X < -12f)
						{
							base.velocity.X = -12f;
						}
					}
				}
				else if (this.ai[2] == 0f || this.ai[2] == 3f)
				{
					if (Main.npc[(int)this.ai[1]].ai[1] == 3f && timeLeft > 10)
					{
						timeLeft = 10;
					}
					if (Main.npc[(int)this.ai[1]].ai[1] != 0f)
					{
						TargetClosest();
						TargetClosest();
						if (Main.player[target].dead)
						{
							base.velocity.Y += 0.1f;
							if (base.velocity.Y > 16f)
							{
								base.velocity.Y = 16f;
							}
						}
						else
						{
							Vector2 vector97 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
							float num906 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector97.X;
							float num907 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector97.Y;
							float num908 = (float)Math.Sqrt(num906 * num906 + num907 * num907);
							num908 = 12f / num908;
							num906 *= num908;
							num907 *= num908;
							rotation = (float)Math.Atan2(num907, num906) - 1.57f;
							if (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y) < 2f)
							{
								rotation = (float)Math.Atan2(num907, num906) - 1.57f;
								base.velocity.X = num906;
								base.velocity.Y = num907;
								netUpdate = true;
							}
							else
							{
								base.velocity *= 0.97f;
							}
							this.ai[3] += 1f;
							if (this.ai[3] >= 600f)
							{
								this.ai[2] = 0f;
								this.ai[3] = 0f;
								netUpdate = true;
							}
						}
					}
					else
					{
						this.ai[3] += 1f;
						if (this.ai[3] >= 600f)
						{
							this.ai[2] += 1f;
							this.ai[3] = 0f;
							netUpdate = true;
						}
						if (base.position.Y > Main.npc[(int)this.ai[1]].position.Y + 300f)
						{
							if (base.velocity.Y > 0f)
							{
								base.velocity.Y *= 0.96f;
							}
							base.velocity.Y -= 0.1f;
							if (base.velocity.Y > 3f)
							{
								base.velocity.Y = 3f;
							}
						}
						else if (base.position.Y < Main.npc[(int)this.ai[1]].position.Y + 230f)
						{
							if (base.velocity.Y < 0f)
							{
								base.velocity.Y *= 0.96f;
							}
							base.velocity.Y += 0.1f;
							if (base.velocity.Y < -3f)
							{
								base.velocity.Y = -3f;
							}
						}
						if (base.position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) + 250f)
						{
							if (base.velocity.X > 0f)
							{
								base.velocity.X *= 0.94f;
							}
							base.velocity.X -= 0.3f;
							if (base.velocity.X > 9f)
							{
								base.velocity.X = 9f;
							}
						}
						if (base.position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2))
						{
							if (base.velocity.X < 0f)
							{
								base.velocity.X *= 0.94f;
							}
							base.velocity.X += 0.2f;
							if (base.velocity.X < -8f)
							{
								base.velocity.X = -8f;
							}
						}
					}
					Vector2 vector98 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num909 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector98.X;
					float num910 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector98.Y;
					Math.Sqrt(num909 * num909 + num910 * num910);
					rotation = (float)Math.Atan2(num910, num909) + 1.57f;
				}
				else if (this.ai[2] == 1f)
				{
					if (base.velocity.Y > 0f)
					{
						base.velocity.Y *= 0.9f;
					}
					Vector2 vector99 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num911 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 280f * this.ai[0] - vector99.X;
					float num912 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector99.Y;
					float num913 = (float)Math.Sqrt(num911 * num911 + num912 * num912);
					rotation = (float)Math.Atan2(num912, num911) + 1.57f;
					base.velocity.X = (base.velocity.X * 5f + Main.npc[(int)this.ai[1]].velocity.X) / 6f;
					base.velocity.X += 0.5f;
					base.velocity.Y -= 0.5f;
					if (base.velocity.Y < -9f)
					{
						base.velocity.Y = -9f;
					}
					if (base.position.Y < Main.npc[(int)this.ai[1]].position.Y - 280f)
					{
						TargetClosest();
						this.ai[2] = 2f;
						vector99 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						num911 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector99.X;
						num912 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector99.Y;
						num913 = (float)Math.Sqrt(num911 * num911 + num912 * num912);
						num913 = 20f / num913;
						base.velocity.X = num911 * num913;
						base.velocity.Y = num912 * num913;
						netUpdate = true;
					}
				}
				else if (this.ai[2] == 2f)
				{
					if (base.position.Y > Main.player[target].position.Y || base.velocity.Y < 0f)
					{
						if (this.ai[3] >= 4f)
						{
							this.ai[2] = 3f;
							this.ai[3] = 0f;
						}
						else
						{
							this.ai[2] = 1f;
							this.ai[3] += 1f;
						}
					}
				}
				else if (this.ai[2] == 4f)
				{
					Vector2 vector100 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num914 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector100.X;
					float num915 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector100.Y;
					float num916 = (float)Math.Sqrt(num914 * num914 + num915 * num915);
					rotation = (float)Math.Atan2(num915, num914) + 1.57f;
					base.velocity.Y = (base.velocity.Y * 5f + Main.npc[(int)this.ai[1]].velocity.Y) / 6f;
					base.velocity.X += 0.5f;
					if (base.velocity.X > 12f)
					{
						base.velocity.X = 12f;
					}
					if (base.position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 500f || base.position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) + 500f)
					{
						TargetClosest();
						this.ai[2] = 5f;
						vector100 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						num914 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector100.X;
						num915 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector100.Y;
						num916 = (float)Math.Sqrt(num914 * num914 + num915 * num915);
						num916 = 17f / num916;
						base.velocity.X = num914 * num916;
						base.velocity.Y = num915 * num916;
						netUpdate = true;
					}
				}
				else if (this.ai[2] == 5f && base.position.X + (float)(width / 2) < Main.player[target].position.X + (float)(Main.player[target].width / 2) - 100f)
				{
					if (this.ai[3] >= 4f)
					{
						this.ai[2] = 0f;
						this.ai[3] = 0f;
					}
					else
					{
						this.ai[2] = 4f;
						this.ai[3] += 1f;
					}
				}
			}
			else if (aiStyle == 35)
			{
				spriteDirection = -(int)this.ai[0];
				if (!Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].aiStyle != 32)
				{
					this.ai[2] += 10f;
					if (this.ai[2] > 50f || Main.netMode != 2)
					{
						life = -1;
						HitEffect();
						active = false;
					}
				}
				if (this.ai[2] == 0f)
				{
					if (Main.npc[(int)this.ai[1]].ai[1] == 3f && timeLeft > 10)
					{
						timeLeft = 10;
					}
					if (Main.npc[(int)this.ai[1]].ai[1] != 0f)
					{
						localAI[0] += 2f;
						if (base.position.Y > Main.npc[(int)this.ai[1]].position.Y - 100f)
						{
							if (base.velocity.Y > 0f)
							{
								base.velocity.Y *= 0.96f;
							}
							base.velocity.Y -= 0.07f;
							if (base.velocity.Y > 6f)
							{
								base.velocity.Y = 6f;
							}
						}
						else if (base.position.Y < Main.npc[(int)this.ai[1]].position.Y - 100f)
						{
							if (base.velocity.Y < 0f)
							{
								base.velocity.Y *= 0.96f;
							}
							base.velocity.Y += 0.07f;
							if (base.velocity.Y < -6f)
							{
								base.velocity.Y = -6f;
							}
						}
						if (base.position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 120f * this.ai[0])
						{
							if (base.velocity.X > 0f)
							{
								base.velocity.X *= 0.96f;
							}
							base.velocity.X -= 0.1f;
							if (base.velocity.X > 8f)
							{
								base.velocity.X = 8f;
							}
						}
						if (base.position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 120f * this.ai[0])
						{
							if (base.velocity.X < 0f)
							{
								base.velocity.X *= 0.96f;
							}
							base.velocity.X += 0.1f;
							if (base.velocity.X < -8f)
							{
								base.velocity.X = -8f;
							}
						}
					}
					else
					{
						this.ai[3] += 1f;
						if (this.ai[3] >= 1100f)
						{
							localAI[0] = 0f;
							this.ai[2] = 1f;
							this.ai[3] = 0f;
							netUpdate = true;
						}
						if (base.position.Y > Main.npc[(int)this.ai[1]].position.Y - 150f)
						{
							if (base.velocity.Y > 0f)
							{
								base.velocity.Y *= 0.96f;
							}
							base.velocity.Y -= 0.04f;
							if (base.velocity.Y > 3f)
							{
								base.velocity.Y = 3f;
							}
						}
						else if (base.position.Y < Main.npc[(int)this.ai[1]].position.Y - 150f)
						{
							if (base.velocity.Y < 0f)
							{
								base.velocity.Y *= 0.96f;
							}
							base.velocity.Y += 0.04f;
							if (base.velocity.Y < -3f)
							{
								base.velocity.Y = -3f;
							}
						}
						if (base.position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) + 200f)
						{
							if (base.velocity.X > 0f)
							{
								base.velocity.X *= 0.96f;
							}
							base.velocity.X -= 0.2f;
							if (base.velocity.X > 8f)
							{
								base.velocity.X = 8f;
							}
						}
						if (base.position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) + 160f)
						{
							if (base.velocity.X < 0f)
							{
								base.velocity.X *= 0.96f;
							}
							base.velocity.X += 0.2f;
							if (base.velocity.X < -8f)
							{
								base.velocity.X = -8f;
							}
						}
					}
					Vector2 vector101 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num917 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector101.X;
					float num918 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector101.Y;
					float num919 = (float)Math.Sqrt(num917 * num917 + num918 * num918);
					rotation = (float)Math.Atan2(num918, num917) + 1.57f;
					if (Main.netMode != 1)
					{
						localAI[0] += 1f;
						if (localAI[0] > 140f)
						{
							localAI[0] = 0f;
							float num920 = 12f;
							int num921 = 0;
							int num922 = 102;
							num919 = num920 / num919;
							num917 = (0f - num917) * num919;
							num918 = (0f - num918) * num919;
							num917 += (float)Main.rand.Next(-40, 41) * 0.01f;
							num918 += (float)Main.rand.Next(-40, 41) * 0.01f;
							vector101.X += num917 * 4f;
							vector101.Y += num918 * 4f;
							Projectile.NewProjectile(vector101.X, vector101.Y, num917, num918, num922, num921, 0f, Main.myPlayer);
						}
					}
				}
				else
				{
					if (this.ai[2] != 1f)
					{
						return;
					}
					this.ai[3] += 1f;
					if (this.ai[3] >= 300f)
					{
						localAI[0] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
					Vector2 vector102 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num923 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - vector102.X;
					float num924 = Main.npc[(int)this.ai[1]].position.Y - vector102.Y;
					num924 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - 80f - vector102.Y;
					float num925 = (float)Math.Sqrt(num923 * num923 + num924 * num924);
					num925 = 6f / num925;
					num923 *= num925;
					num924 *= num925;
					if (base.velocity.X > num923)
					{
						if (base.velocity.X > 0f)
						{
							base.velocity.X *= 0.9f;
						}
						base.velocity.X -= 0.04f;
					}
					if (base.velocity.X < num923)
					{
						if (base.velocity.X < 0f)
						{
							base.velocity.X *= 0.9f;
						}
						base.velocity.X += 0.04f;
					}
					if (base.velocity.Y > num924)
					{
						if (base.velocity.Y > 0f)
						{
							base.velocity.Y *= 0.9f;
						}
						base.velocity.Y -= 0.08f;
					}
					if (base.velocity.Y < num924)
					{
						if (base.velocity.Y < 0f)
						{
							base.velocity.Y *= 0.9f;
						}
						base.velocity.Y += 0.08f;
					}
					TargetClosest();
					vector102 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					num923 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector102.X;
					num924 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector102.Y;
					num925 = (float)Math.Sqrt(num923 * num923 + num924 * num924);
					rotation = (float)Math.Atan2(num924, num923) - 1.57f;
					if (Main.netMode != 1)
					{
						localAI[0] += 1f;
						if (localAI[0] > 40f)
						{
							localAI[0] = 0f;
							float num926 = 10f;
							int num927 = 0;
							int num928 = 102;
							num925 = num926 / num925;
							num923 *= num925;
							num924 *= num925;
							num923 += (float)Main.rand.Next(-40, 41) * 0.01f;
							num924 += (float)Main.rand.Next(-40, 41) * 0.01f;
							vector102.X += num923 * 4f;
							vector102.Y += num924 * 4f;
							Projectile.NewProjectile(vector102.X, vector102.Y, num923, num924, num928, num927, 0f, Main.myPlayer);
						}
					}
				}
			}
			else if (aiStyle == 36)
			{
				spriteDirection = -(int)this.ai[0];
				if (!Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].aiStyle != 32)
				{
					this.ai[2] += 10f;
					if (this.ai[2] > 50f || Main.netMode != 2)
					{
						life = -1;
						HitEffect();
						active = false;
					}
				}
				if (this.ai[2] == 0f || this.ai[2] == 3f)
				{
					if (Main.npc[(int)this.ai[1]].ai[1] == 3f && timeLeft > 10)
					{
						timeLeft = 10;
					}
					if (Main.npc[(int)this.ai[1]].ai[1] != 0f)
					{
						localAI[0] += 3f;
						if (base.position.Y > Main.npc[(int)this.ai[1]].position.Y - 100f)
						{
							if (base.velocity.Y > 0f)
							{
								base.velocity.Y *= 0.96f;
							}
							base.velocity.Y -= 0.07f;
							if (base.velocity.Y > 6f)
							{
								base.velocity.Y = 6f;
							}
						}
						else if (base.position.Y < Main.npc[(int)this.ai[1]].position.Y - 100f)
						{
							if (base.velocity.Y < 0f)
							{
								base.velocity.Y *= 0.96f;
							}
							base.velocity.Y += 0.07f;
							if (base.velocity.Y < -6f)
							{
								base.velocity.Y = -6f;
							}
						}
						if (base.position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 120f * this.ai[0])
						{
							if (base.velocity.X > 0f)
							{
								base.velocity.X *= 0.96f;
							}
							base.velocity.X -= 0.1f;
							if (base.velocity.X > 8f)
							{
								base.velocity.X = 8f;
							}
						}
						if (base.position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 120f * this.ai[0])
						{
							if (base.velocity.X < 0f)
							{
								base.velocity.X *= 0.96f;
							}
							base.velocity.X += 0.1f;
							if (base.velocity.X < -8f)
							{
								base.velocity.X = -8f;
							}
						}
					}
					else
					{
						this.ai[3] += 1f;
						if (this.ai[3] >= 800f)
						{
							this.ai[2] += 1f;
							this.ai[3] = 0f;
							netUpdate = true;
						}
						if (base.position.Y > Main.npc[(int)this.ai[1]].position.Y - 100f)
						{
							if (base.velocity.Y > 0f)
							{
								base.velocity.Y *= 0.96f;
							}
							base.velocity.Y -= 0.1f;
							if (base.velocity.Y > 3f)
							{
								base.velocity.Y = 3f;
							}
						}
						else if (base.position.Y < Main.npc[(int)this.ai[1]].position.Y - 100f)
						{
							if (base.velocity.Y < 0f)
							{
								base.velocity.Y *= 0.96f;
							}
							base.velocity.Y += 0.1f;
							if (base.velocity.Y < -3f)
							{
								base.velocity.Y = -3f;
							}
						}
						if (base.position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 180f * this.ai[0])
						{
							if (base.velocity.X > 0f)
							{
								base.velocity.X *= 0.96f;
							}
							base.velocity.X -= 0.14f;
							if (base.velocity.X > 8f)
							{
								base.velocity.X = 8f;
							}
						}
						if (base.position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 180f * this.ai[0])
						{
							if (base.velocity.X < 0f)
							{
								base.velocity.X *= 0.96f;
							}
							base.velocity.X += 0.14f;
							if (base.velocity.X < -8f)
							{
								base.velocity.X = -8f;
							}
						}
					}
					TargetClosest();
					Vector2 vector103 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num929 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector103.X;
					float num930 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector103.Y;
					float num931 = (float)Math.Sqrt(num929 * num929 + num930 * num930);
					rotation = (float)Math.Atan2(num930, num929) - 1.57f;
					if (Main.netMode != 1)
					{
						localAI[0] += 1f;
						if (localAI[0] > 200f)
						{
							localAI[0] = 0f;
							float num932 = 8f;
							int num933 = 25;
							int num934 = 100;
							num931 = num932 / num931;
							num929 *= num931;
							num930 *= num931;
							num929 += (float)Main.rand.Next(-40, 41) * 0.05f;
							num930 += (float)Main.rand.Next(-40, 41) * 0.05f;
							vector103.X += num929 * 8f;
							vector103.Y += num930 * 8f;
							Projectile.NewProjectile(vector103.X, vector103.Y, num929, num930, num934, num933, 0f, Main.myPlayer);
						}
					}
				}
				else
				{
					if (this.ai[2] != 1f)
					{
						return;
					}
					this.ai[3] += 1f;
					if (this.ai[3] >= 200f)
					{
						localAI[0] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
					Vector2 vector104 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num935 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - 350f - vector104.X;
					float num936 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - 20f - vector104.Y;
					float num937 = (float)Math.Sqrt(num935 * num935 + num936 * num936);
					num937 = 7f / num937;
					num935 *= num937;
					num936 *= num937;
					if (base.velocity.X > num935)
					{
						if (base.velocity.X > 0f)
						{
							base.velocity.X *= 0.9f;
						}
						base.velocity.X -= 0.1f;
					}
					if (base.velocity.X < num935)
					{
						if (base.velocity.X < 0f)
						{
							base.velocity.X *= 0.9f;
						}
						base.velocity.X += 0.1f;
					}
					if (base.velocity.Y > num936)
					{
						if (base.velocity.Y > 0f)
						{
							base.velocity.Y *= 0.9f;
						}
						base.velocity.Y -= 0.03f;
					}
					if (base.velocity.Y < num936)
					{
						if (base.velocity.Y < 0f)
						{
							base.velocity.Y *= 0.9f;
						}
						base.velocity.Y += 0.03f;
					}
					TargetClosest();
					vector104 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					num935 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector104.X;
					num936 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector104.Y;
					num937 = (float)Math.Sqrt(num935 * num935 + num936 * num936);
					rotation = (float)Math.Atan2(num936, num935) - 1.57f;
					if (Main.netMode == 1)
					{
						localAI[0] += 1f;
						if (localAI[0] > 80f)
						{
							localAI[0] = 0f;
							float num938 = 10f;
							int num939 = 25;
							int num940 = 100;
							num937 = num938 / num937;
							num935 *= num937;
							num936 *= num937;
							num935 += (float)Main.rand.Next(-40, 41) * 0.05f;
							num936 += (float)Main.rand.Next(-40, 41) * 0.05f;
							vector104.X += num935 * 8f;
							vector104.Y += num936 * 8f;
							Projectile.NewProjectile(vector104.X, vector104.Y, num935, num936, num940, num939, 0f, Main.myPlayer);
						}
					}
				}
			}
			else if (aiStyle == 37)
			{
				if (this.ai[3] > 0f)
				{
					realLife = (int)this.ai[3];
				}
				if (target < 0 || target == 16 || Main.player[target].dead)
				{
					TargetClosest();
				}
				if (type >= 134 && type <= 136)
				{
					base.velocity.Length();
					if (type == 134 || (type != 134 && Main.npc[(int)this.ai[1]].alpha < 128))
					{
						if (alpha != 0)
						{
							for (int num941 = 0; num941 < 2; num941++)
							{
								int num942 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 182, 0f, 0f, 100, default(Color), 2f);
								Main.dust[num942].noGravity = true;
								Main.dust[num942].noLight = true;
							}
						}
						alpha -= 42;
						if (alpha < 0)
						{
							alpha = 0;
						}
					}
				}
				if (type > 134)
				{
					bool flag87 = false;
					if (this.ai[1] <= 0f)
					{
						flag87 = true;
					}
					else if (Main.npc[(int)this.ai[1]].life <= 0)
					{
						flag87 = true;
					}
					if (flag87)
					{
						life = 0;
						HitEffect();
						checkDead();
					}
				}
				if (Main.netMode != 1)
				{
					if (this.ai[0] == 0f && type == 134)
					{
						this.ai[3] = base.whoAmI;
						realLife = base.whoAmI;
						int num943 = 0;
						int num944 = base.whoAmI;
						int num945 = 80;
						for (int num946 = 0; num946 <= num945; num946++)
						{
							int num947 = 135;
							if (num946 == num945)
							{
								num947 = 136;
							}
							num943 = NewNPC((int)(base.position.X + (float)(width / 2)), (int)(base.position.Y + (float)height), num947, base.whoAmI);
							Main.npc[num943].ai[3] = base.whoAmI;
							Main.npc[num943].realLife = base.whoAmI;
							Main.npc[num943].ai[1] = num944;
							Main.npc[num944].ai[0] = num943;
							NetMessage.SendData(23, -1, -1, "", num943);
							num944 = num943;
						}
					}
					if (type == 135)
					{
						localAI[0] += Main.rand.Next(4);
						if (localAI[0] >= (float)Main.rand.Next(1400, 26000))
						{
							localAI[0] = 0f;
							TargetClosest();
							if (Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
							{
								float num948 = 8f;
								Vector2 vector105 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)(height / 2));
								float num949 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector105.X + (float)Main.rand.Next(-20, 21);
								float num950 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector105.Y + (float)Main.rand.Next(-20, 21);
								float num951 = (float)Math.Sqrt(num949 * num949 + num950 * num950);
								num951 = num948 / num951;
								num949 *= num951;
								num950 *= num951;
								num949 += (float)Main.rand.Next(-20, 21) * 0.05f;
								num950 += (float)Main.rand.Next(-20, 21) * 0.05f;
								int num952 = 22;
								if (Main.expertMode)
								{
									num952 = 18;
								}
								int num953 = 100;
								vector105.X += num949 * 5f;
								vector105.Y += num950 * 5f;
								int num954 = Projectile.NewProjectile(vector105.X, vector105.Y, num949, num950, num953, num952, 0f, Main.myPlayer);
								Main.projectile[num954].timeLeft = 300;
								netUpdate = true;
							}
						}
					}
				}
				int num955 = (int)(base.position.X / 16f) - 1;
				int num956 = (int)((base.position.X + (float)width) / 16f) + 2;
				int num957 = (int)(base.position.Y / 16f) - 1;
				int num958 = (int)((base.position.Y + (float)height) / 16f) + 2;
				if (num955 < 0)
				{
					num955 = 0;
				}
				if (num956 > Main.maxTilesX)
				{
					num956 = Main.maxTilesX;
				}
				if (num957 < 0)
				{
					num957 = 0;
				}
				if (num958 > Main.maxTilesY)
				{
					num958 = Main.maxTilesY;
				}
				bool flag88 = false;
				if (!flag88)
				{
					Vector2 vector106 = default(Vector2);
					for (int num959 = num955; num959 < num956; num959++)
					{
						for (int num960 = num957; num960 < num958; num960++)
						{
							if (Main.tile[num959, num960] != null && ((Main.tile[num959, num960].nactive() && (Main.tileSolid[Main.tile[num959, num960].type] || (Main.tileSolidTop[Main.tile[num959, num960].type] && Main.tile[num959, num960].frameY == 0))) || Main.tile[num959, num960].liquid > 64))
							{
								vector106.X = num959 * 16;
								vector106.Y = num960 * 16;
								if (base.position.X + (float)width > vector106.X && base.position.X < vector106.X + 16f && base.position.Y + (float)height > vector106.Y && base.position.Y < vector106.Y + 16f)
								{
									flag88 = true;
									break;
								}
							}
						}
					}
				}
				if (!flag88)
				{
					if (type != 135 || this.ai[2] != 1f)
					{
						Lighting.AddLight((int)((base.position.X + (float)(width / 2)) / 16f), (int)((base.position.Y + (float)(height / 2)) / 16f), 0.3f, 0.1f, 0.05f);
					}
					localAI[1] = 1f;
					if (type == 134)
					{
						Rectangle rectangle7 = new Rectangle((int)base.position.X, (int)base.position.Y, width, height);
						int num961 = 1000;
						bool flag89 = true;
						if (base.position.Y > Main.player[target].position.Y)
						{
							for (int num962 = 0; num962 < 16; num962++)
							{
								if (Main.player[num962].active)
								{
									Rectangle rectangle8 = new Rectangle((int)Main.player[num962].position.X - num961, (int)Main.player[num962].position.Y - num961, num961 * 2, num961 * 2);
									if (rectangle7.Intersects(rectangle8))
									{
										flag89 = false;
										break;
									}
								}
							}
							if (flag89)
							{
								flag88 = true;
							}
						}
					}
				}
				else
				{
					localAI[1] = 0f;
				}
				float num963 = 16f;
				if (Main.dayTime || Main.player[target].dead)
				{
					flag88 = false;
					base.velocity.Y += 1f;
					if ((double)base.position.Y > Main.worldSurface * 16.0)
					{
						base.velocity.Y += 1f;
						num963 = 32f;
					}
					if ((double)base.position.Y > Main.rockLayer * 16.0)
					{
						for (int num964 = 0; num964 < 200; num964++)
						{
							if (Main.npc[num964].aiStyle == aiStyle)
							{
								Main.npc[num964].active = false;
							}
						}
					}
				}
				float num965 = 0.1f;
				float num966 = 0.15f;
				Vector2 vector107 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num967 = Main.player[target].position.X + (float)(Main.player[target].width / 2);
				float num968 = Main.player[target].position.Y + (float)(Main.player[target].height / 2);
				num967 = (int)(num967 / 16f) * 16;
				num968 = (int)(num968 / 16f) * 16;
				vector107.X = (int)(vector107.X / 16f) * 16;
				vector107.Y = (int)(vector107.Y / 16f) * 16;
				num967 -= vector107.X;
				num968 -= vector107.Y;
				float num969 = (float)Math.Sqrt(num967 * num967 + num968 * num968);
				if (this.ai[1] > 0f && this.ai[1] < (float)Main.npc.Length)
				{
					try
					{
						vector107 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						num967 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - vector107.X;
						num968 = Main.npc[(int)this.ai[1]].position.Y + (float)(Main.npc[(int)this.ai[1]].height / 2) - vector107.Y;
					}
					catch
					{
					}
					rotation = (float)Math.Atan2(num968, num967) + 1.57f;
					num969 = (float)Math.Sqrt(num967 * num967 + num968 * num968);
					int num970 = (int)(44f * scale);
					num969 = (num969 - (float)num970) / num969;
					num967 *= num969;
					num968 *= num969;
					base.velocity = Vector2.Zero;
					base.position.X += num967;
					base.position.Y += num968;
					return;
				}
				if (!flag88)
				{
					TargetClosest();
					base.velocity.Y += 0.15f;
					if (base.velocity.Y > num963)
					{
						base.velocity.Y = num963;
					}
					if ((double)(Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) < (double)num963 * 0.4)
					{
						if (base.velocity.X < 0f)
						{
							base.velocity.X -= num965 * 1.1f;
						}
						else
						{
							base.velocity.X += num965 * 1.1f;
						}
					}
					else if (base.velocity.Y == num963)
					{
						if (base.velocity.X < num967)
						{
							base.velocity.X += num965;
						}
						else if (base.velocity.X > num967)
						{
							base.velocity.X -= num965;
						}
					}
					else if (base.velocity.Y > 4f)
					{
						if (base.velocity.X < 0f)
						{
							base.velocity.X += num965 * 0.9f;
						}
						else
						{
							base.velocity.X -= num965 * 0.9f;
						}
					}
				}
				else
				{
					if (soundDelay == 0)
					{
						float num971 = num969 / 40f;
						if (num971 < 10f)
						{
							num971 = 10f;
						}
						if (num971 > 20f)
						{
							num971 = 20f;
						}
						soundDelay = (int)num971;
						Main.PlaySound(15, (int)base.position.X, (int)base.position.Y);
					}
					num969 = (float)Math.Sqrt(num967 * num967 + num968 * num968);
					float num972 = Math.Abs(num967);
					float num973 = Math.Abs(num968);
					float num974 = num963 / num969;
					num967 *= num974;
					num968 *= num974;
					if (((base.velocity.X > 0f && num967 > 0f) || (base.velocity.X < 0f && num967 < 0f)) && ((base.velocity.Y > 0f && num968 > 0f) || (base.velocity.Y < 0f && num968 < 0f)))
					{
						if (base.velocity.X < num967)
						{
							base.velocity.X += num966;
						}
						else if (base.velocity.X > num967)
						{
							base.velocity.X -= num966;
						}
						if (base.velocity.Y < num968)
						{
							base.velocity.Y += num966;
						}
						else if (base.velocity.Y > num968)
						{
							base.velocity.Y -= num966;
						}
					}
					if ((base.velocity.X > 0f && num967 > 0f) || (base.velocity.X < 0f && num967 < 0f) || (base.velocity.Y > 0f && num968 > 0f) || (base.velocity.Y < 0f && num968 < 0f))
					{
						if (base.velocity.X < num967)
						{
							base.velocity.X += num965;
						}
						else if (base.velocity.X > num967)
						{
							base.velocity.X -= num965;
						}
						if (base.velocity.Y < num968)
						{
							base.velocity.Y += num965;
						}
						else if (base.velocity.Y > num968)
						{
							base.velocity.Y -= num965;
						}
						if ((double)Math.Abs(num968) < (double)num963 * 0.2 && ((base.velocity.X > 0f && num967 < 0f) || (base.velocity.X < 0f && num967 > 0f)))
						{
							if (base.velocity.Y > 0f)
							{
								base.velocity.Y += num965 * 2f;
							}
							else
							{
								base.velocity.Y -= num965 * 2f;
							}
						}
						if ((double)Math.Abs(num967) < (double)num963 * 0.2 && ((base.velocity.Y > 0f && num968 < 0f) || (base.velocity.Y < 0f && num968 > 0f)))
						{
							if (base.velocity.X > 0f)
							{
								base.velocity.X += num965 * 2f;
							}
							else
							{
								base.velocity.X -= num965 * 2f;
							}
						}
					}
					else if (num972 > num973)
					{
						if (base.velocity.X < num967)
						{
							base.velocity.X += num965 * 1.1f;
						}
						else if (base.velocity.X > num967)
						{
							base.velocity.X -= num965 * 1.1f;
						}
						if ((double)(Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) < (double)num963 * 0.5)
						{
							if (base.velocity.Y > 0f)
							{
								base.velocity.Y += num965;
							}
							else
							{
								base.velocity.Y -= num965;
							}
						}
					}
					else
					{
						if (base.velocity.Y < num968)
						{
							base.velocity.Y += num965 * 1.1f;
						}
						else if (base.velocity.Y > num968)
						{
							base.velocity.Y -= num965 * 1.1f;
						}
						if ((double)(Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) < (double)num963 * 0.5)
						{
							if (base.velocity.X > 0f)
							{
								base.velocity.X += num965;
							}
							else
							{
								base.velocity.X -= num965;
							}
						}
					}
				}
				rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
				if (type != 134)
				{
					return;
				}
				if (flag88)
				{
					if (localAI[0] != 1f)
					{
						netUpdate = true;
					}
					localAI[0] = 1f;
				}
				else
				{
					if (localAI[0] != 0f)
					{
						netUpdate = true;
					}
					localAI[0] = 0f;
				}
				if (((base.velocity.X > 0f && oldVelocity.X < 0f) || (base.velocity.X < 0f && oldVelocity.X > 0f) || (base.velocity.Y > 0f && oldVelocity.Y < 0f) || (base.velocity.Y < 0f && oldVelocity.Y > 0f)) && !justHit)
				{
					netUpdate = true;
				}
			}
			else if (aiStyle == 38)
			{
				float num975 = 4f;
				float num976 = 1f;
				if (type == 143)
				{
					num975 = 3f;
					num976 = 0.7f;
				}
				if (type == 145)
				{
					num975 = 3.5f;
					num976 = 0.8f;
				}
				if (type == 143)
				{
					this.ai[2] += 1f;
					if (this.ai[2] >= 120f)
					{
						this.ai[2] = 0f;
						if (Main.netMode != 1)
						{
							Vector2 vector108 = new Vector2(base.position.X + (float)width * 0.5f - (float)(base.direction * 12), base.position.Y + (float)height * 0.5f);
							float speedX = 12 * spriteDirection;
							float speedY = 0f;
							if (Main.netMode != 1)
							{
								int num977 = 25;
								int num978 = 110;
								int num979 = Projectile.NewProjectile(vector108.X, vector108.Y, speedX, speedY, num978, num977, 0f, Main.myPlayer);
								Main.projectile[num979].ai[0] = 2f;
								Main.projectile[num979].timeLeft = 300;
								Main.projectile[num979].friendly = false;
								NetMessage.SendData(27, -1, -1, "", num979);
								netUpdate = true;
							}
						}
					}
				}
				if (type == 144 && this.ai[1] >= 3f)
				{
					TargetClosest();
					spriteDirection = base.direction;
					if (base.velocity.Y == 0f)
					{
						base.velocity.X *= 0.9f;
						this.ai[2] += 1f;
						if ((double)base.velocity.X > -0.3 && (double)base.velocity.X < 0.3)
						{
							base.velocity.X = 0f;
						}
						if (this.ai[2] >= 200f)
						{
							this.ai[2] = 0f;
							this.ai[1] = 0f;
						}
					}
				}
				else if (type == 145 && this.ai[1] >= 3f)
				{
					TargetClosest();
					if (base.velocity.Y == 0f)
					{
						base.velocity.X *= 0.9f;
						this.ai[2] += 1f;
						if ((double)base.velocity.X > -0.3 && (double)base.velocity.X < 0.3)
						{
							base.velocity.X = 0f;
						}
						if (this.ai[2] >= 16f)
						{
							this.ai[2] = 0f;
							this.ai[1] = 0f;
						}
					}
					if (base.velocity.X == 0f && base.velocity.Y == 0f && this.ai[2] == 8f)
					{
						float num980 = 10f;
						Vector2 vector109 = new Vector2(base.position.X + (float)width * 0.5f - (float)(base.direction * 12), base.position.Y + (float)height * 0.25f);
						float num981 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector109.X;
						float num982 = Main.player[target].position.Y - vector109.Y;
						float num983 = (float)Math.Sqrt(num981 * num981 + num982 * num982);
						num983 = num980 / num983;
						num981 *= num983;
						num982 *= num983;
						if (Main.netMode != 1)
						{
							int num984 = 35;
							int num985 = 109;
							int num986 = Projectile.NewProjectile(vector109.X, vector109.Y, num981, num982, num985, num984, 0f, Main.myPlayer);
							Main.projectile[num986].ai[0] = 2f;
							Main.projectile[num986].timeLeft = 300;
							Main.projectile[num986].friendly = false;
							NetMessage.SendData(27, -1, -1, "", num986);
							netUpdate = true;
						}
					}
				}
				else
				{
					if (base.velocity.Y == 0f)
					{
						if (localAI[2] == base.position.X)
						{
							base.direction *= -1;
							this.ai[3] = 60f;
						}
						localAI[2] = base.position.X;
						if (this.ai[3] == 0f)
						{
							TargetClosest();
						}
						this.ai[0] += 1f;
						if (this.ai[0] > 2f)
						{
							this.ai[0] = 0f;
							this.ai[1] += 1f;
							base.velocity.Y = -8.2f;
							base.velocity.X += (float)base.direction * num976 * 1.1f;
						}
						else
						{
							base.velocity.Y = -6f;
							base.velocity.X += (float)base.direction * num976 * 0.9f;
						}
						spriteDirection = base.direction;
					}
					base.velocity.X += (float)base.direction * num976 * 0.01f;
				}
				if (this.ai[3] > 0f)
				{
					this.ai[3] -= 1f;
				}
				if (base.velocity.X > num975 && base.direction > 0)
				{
					base.velocity.X = 4f;
				}
				if (base.velocity.X < 0f - num975 && base.direction < 0)
				{
					base.velocity.X = -4f;
				}
			}
			else if (aiStyle == 39)
			{
				if (target < 0 || Main.player[target].dead || base.direction == 0)
				{
					TargetClosest();
				}
				bool flag90 = true;
				int num987 = 0;
				if (base.velocity.X < 0f)
				{
					num987 = -1;
				}
				if (base.velocity.X > 0f)
				{
					num987 = 1;
				}
				Vector2 position7 = base.position;
				position7.X += base.velocity.X;
				int num988 = (int)((position7.X + (float)(width / 2) + (float)((width / 2 + 1) * num987)) / 16f);
				int num989 = (int)((position7.Y + (float)height - 1f) / 16f);
				if ((float)(num988 * 16) < position7.X + (float)width && (float)(num988 * 16 + 16) > position7.X && ((Main.tile[num988, num989].nactive() && !Main.tile[num988, num989].topSlope() && !Main.tile[num988, num989 - 1].topSlope() && ((Main.tileSolid[Main.tile[num988, num989].type] && !Main.tileSolidTop[Main.tile[num988, num989].type]) || (flag90 && Main.tileSolidTop[Main.tile[num988, num989].type] && (!Main.tileSolid[Main.tile[num988, num989 - 1].type] || !Main.tile[num988, num989 - 1].nactive()) && Main.tile[num988, num989].type != 16 && Main.tile[num988, num989].type != 18 && Main.tile[num988, num989].type != 134))) || (Main.tile[num988, num989 - 1].halfBrick() && Main.tile[num988, num989 - 1].nactive())) && (!Main.tile[num988, num989 - 1].nactive() || !Main.tileSolid[Main.tile[num988, num989 - 1].type] || Main.tileSolidTop[Main.tile[num988, num989 - 1].type] || (Main.tile[num988, num989 - 1].halfBrick() && (!Main.tile[num988, num989 - 4].nactive() || !Main.tileSolid[Main.tile[num988, num989 - 4].type] || Main.tileSolidTop[Main.tile[num988, num989 - 4].type]))) && (!Main.tile[num988, num989 - 2].nactive() || !Main.tileSolid[Main.tile[num988, num989 - 2].type] || Main.tileSolidTop[Main.tile[num988, num989 - 2].type]) && (!Main.tile[num988, num989 - 3].nactive() || !Main.tileSolid[Main.tile[num988, num989 - 3].type] || Main.tileSolidTop[Main.tile[num988, num989 - 3].type]) && (!Main.tile[num988 - num987, num989 - 3].nactive() || !Main.tileSolid[Main.tile[num988 - num987, num989 - 3].type] || Main.tileSolidTop[Main.tile[num988 - num987, num989 - 3].type]))
				{
					float num990 = num989 * 16;
					if (Main.tile[num988, num989].halfBrick())
					{
						num990 += 8f;
					}
					if (Main.tile[num988, num989 - 1].halfBrick())
					{
						num990 -= 8f;
					}
					if (num990 < position7.Y + (float)height)
					{
						float num991 = position7.Y + (float)height - num990;
						if ((double)num991 <= 16.1)
						{
							gfxOffY += base.position.Y + (float)height - num990;
							base.position.Y = num990 - (float)height;
							if (num991 < 9f)
							{
								stepSpeed = 0.75f;
							}
							else
							{
								stepSpeed = 1.5f;
							}
						}
					}
				}
				if (justHit && type != 417)
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					TargetClosest();
				}
				if (type == 154 && Main.rand.Next(10) == 0)
				{
					int num992 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 67, base.velocity.X * 0.5f, base.velocity.Y * 0.5f, 90, default(Color), 1.5f);
					Main.dust[num992].noGravity = true;
					Main.dust[num992].velocity *= 0.2f;
				}
				if (this.ai[0] == 0f)
				{
					if (base.velocity.X < 0f)
					{
						base.direction = -1;
					}
					else if (base.velocity.X > 0f)
					{
						base.direction = 1;
					}
					spriteDirection = base.direction;
					Vector2 vector110 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num993 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector110.X;
					float num994 = Main.player[target].position.Y - vector110.Y;
					float num995 = (float)Math.Sqrt(num993 * num993 + num994 * num994);
					bool flag91 = Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height);
					if (type >= 496 && type <= 497)
					{
						if (num995 > 200f && flag91)
						{
							this.ai[1] += 2f;
						}
						if (num995 > 600f && (flag91 || base.position.Y + (float)height > Main.player[target].position.Y - 200f))
						{
							this.ai[1] += 4f;
						}
					}
					else
					{
						if (num995 > 200f && flag91)
						{
							this.ai[1] += 4f;
						}
						if (num995 > 600f && (flag91 || base.position.Y + (float)height > Main.player[target].position.Y - 200f))
						{
							this.ai[1] += 10f;
						}
						if (wet)
						{
							this.ai[1] = 1000f;
						}
					}
					defense = defDefense;
					damage = defDamage;
					if (type >= 496 && type <= 497)
					{
						knockBackResist = 0.75f * Main.knockBackMultiplier;
					}
					else
					{
						knockBackResist = 0.3f * Main.knockBackMultiplier;
					}
					this.ai[1] += 1f;
					if (this.ai[1] >= 400f)
					{
						this.ai[1] = 0f;
						this.ai[0] = 1f;
					}
					if (!justHit && base.velocity.X != oldVelocity.X)
					{
						base.direction *= -1;
					}
					if (base.velocity.Y == 0f && Main.player[target].position.Y < base.position.Y + (float)height)
					{
						int num996;
						int num997;
						if (base.direction > 0)
						{
							num996 = (int)(((double)base.position.X + (double)width * 0.5) / 16.0);
							num997 = num996 + 3;
						}
						else
						{
							num997 = (int)(((double)base.position.X + (double)width * 0.5) / 16.0);
							num996 = num997 - 3;
						}
						int num998 = (int)((base.position.Y + (float)height + 2f) / 16f) - 1;
						int num999 = num998 + 4;
						bool flag92 = false;
						for (int num1000 = num996; num1000 <= num997; num1000++)
						{
							for (int num1001 = num998; num1001 <= num999; num1001++)
							{
								if (Main.tile[num1000, num1001] != null && Main.tile[num1000, num1001].nactive() && Main.tileSolid[Main.tile[num1000, num1001].type])
								{
									flag92 = true;
								}
							}
						}
						if (!flag92)
						{
							base.direction *= -1;
							base.velocity.X = 0.1f * (float)base.direction;
						}
					}
					if (type >= 496 && type <= 497)
					{
						float num1002 = 0.5f;
						if (base.velocity.X < 0f - num1002 || base.velocity.X > num1002)
						{
							if (base.velocity.Y == 0f)
							{
								base.velocity *= 0.8f;
							}
						}
						else if (base.velocity.X < num1002 && base.direction == 1)
						{
							base.velocity.X += 0.07f;
							if (base.velocity.X > num1002)
							{
								base.velocity.X = num1002;
							}
						}
						else if (base.velocity.X > 0f - num1002 && base.direction == -1)
						{
							base.velocity.X -= 0.07f;
							if (base.velocity.X < 0f - num1002)
							{
								base.velocity.X = 0f - num1002;
							}
						}
						return;
					}
					float num1003 = 1f;
					if (num995 < 400f)
					{
						if (base.velocity.X < 0f - num1003 || base.velocity.X > num1003)
						{
							if (base.velocity.Y == 0f)
							{
								base.velocity *= 0.8f;
							}
						}
						else if (base.velocity.X < num1003 && base.direction == 1)
						{
							base.velocity.X += 0.07f;
							if (base.velocity.X > num1003)
							{
								base.velocity.X = num1003;
							}
						}
						else if (base.velocity.X > 0f - num1003 && base.direction == -1)
						{
							base.velocity.X -= 0.07f;
							if (base.velocity.X < 0f - num1003)
							{
								base.velocity.X = 0f - num1003;
							}
						}
					}
					else if (base.velocity.X < -1.5f || base.velocity.X > 1.5f)
					{
						if (base.velocity.Y == 0f)
						{
							base.velocity *= 0.8f;
						}
					}
					else if (base.velocity.X < 1.5f && base.direction == 1)
					{
						base.velocity.X += 0.07f;
						if (base.velocity.X > 1.5f)
						{
							base.velocity.X = 1.5f;
						}
					}
					else if (base.velocity.X > -1.5f && base.direction == -1)
					{
						base.velocity.X -= 0.07f;
						if (base.velocity.X < -1.5f)
						{
							base.velocity.X = -1.5f;
						}
					}
				}
				else if (this.ai[0] == 1f)
				{
					base.velocity.X *= 0.5f;
					if (type >= 496 && type <= 497)
					{
						this.ai[1] += 0.5f;
					}
					else
					{
						this.ai[1] += 1f;
					}
					if (this.ai[1] >= 30f)
					{
						netUpdate = true;
						TargetClosest();
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[0] = 3f;
						if (type == 417)
						{
							this.ai[0] = 6f;
							this.ai[2] = Main.rand.Next(2, 5);
						}
					}
				}
				else if (this.ai[0] == 3f)
				{
					if (type == 154 && Main.rand.Next(3) < 2)
					{
						int num1004 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 67, base.velocity.X * 0.5f, base.velocity.Y * 0.5f, 90, default(Color), 1.5f);
						Main.dust[num1004].noGravity = true;
						Main.dust[num1004].velocity *= 0.2f;
					}
					if (Main.expertMode)
					{
						if (type >= 496 && type <= 497)
						{
							damage = (int)((double)defDamage * 1.5 * 0.9);
						}
						else
						{
							damage = (int)((double)(defDamage * 2) * 0.9);
						}
					}
					else if (type >= 496 && type <= 497)
					{
						damage = (int)((double)defDamage * 1.5);
					}
					else
					{
						damage = defDamage * 2;
					}
					defense = defDefense * 2;
					this.ai[1] += 1f;
					if (this.ai[1] == 1f)
					{
						netUpdate = true;
						TargetClosest();
						this.ai[2] += 0.3f;
						rotation += this.ai[2] * (float)base.direction;
						this.ai[1] += 1f;
						bool flag93 = Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height);
						float num1005 = 10f;
						if (!flag93)
						{
							num1005 = 6f;
						}
						if (type >= 496 && type <= 497)
						{
							num1005 *= 0.75f;
						}
						Vector2 vector111 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						float num1006 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector111.X;
						float num1007 = Math.Abs(num1006) * 0.2f;
						if (directionY > 0)
						{
							num1007 = 0f;
						}
						float num1008 = Main.player[target].position.Y - vector111.Y - num1007;
						float num1009 = (float)Math.Sqrt(num1006 * num1006 + num1008 * num1008);
						netUpdate = true;
						num1009 = num1005 / num1009;
						num1006 *= num1009;
						num1008 *= num1009;
						if (!flag93)
						{
							num1008 = -10f;
						}
						base.velocity.X = num1006;
						base.velocity.Y = num1008;
						this.ai[3] = base.velocity.X;
					}
					else
					{
						if (base.position.X + (float)width > Main.player[target].position.X && base.position.X < Main.player[target].position.X + (float)Main.player[target].width && base.position.Y < Main.player[target].position.Y + (float)Main.player[target].height)
						{
							base.velocity.X *= 0.8f;
							this.ai[3] = 0f;
							if (base.velocity.Y < 0f)
							{
								base.velocity.Y += 0.2f;
							}
						}
						if (this.ai[3] != 0f)
						{
							base.velocity.X = this.ai[3];
							base.velocity.Y -= 0.22f;
						}
						if (this.ai[1] >= 90f)
						{
							noGravity = false;
							this.ai[1] = 0f;
							this.ai[0] = 4f;
						}
					}
					if (wet && directionY < 0)
					{
						base.velocity.Y -= 0.3f;
					}
					rotation += this.ai[2] * (float)base.direction;
				}
				else if (this.ai[0] == 4f)
				{
					if (wet && directionY < 0)
					{
						base.velocity.Y -= 0.3f;
					}
					base.velocity.X *= 0.96f;
					if (this.ai[2] > 0f)
					{
						this.ai[2] -= 0.01f;
						rotation += this.ai[2] * (float)base.direction;
					}
					else if (base.velocity.Y >= 0f)
					{
						rotation = 0f;
					}
					if (this.ai[2] <= 0f && (base.velocity.Y == 0f || wet))
					{
						netUpdate = true;
						rotation = 0f;
						this.ai[2] = 0f;
						this.ai[1] = 0f;
						this.ai[0] = 5f;
					}
				}
				else if (this.ai[0] == 6f)
				{
					damage = (int)((float)defDamage * (Main.expertMode ? 1.4f : 1.8f));
					defense = defDefense * 2;
					knockBackResist = 0f;
					if (Main.rand.Next(3) < 2)
					{
						int num1010 = Dust.NewDust(base.Center - new Vector2(30f), 60, 60, 6, base.velocity.X * 0.5f, base.velocity.Y * 0.5f, 90, default(Color), 1.5f);
						Main.dust[num1010].noGravity = true;
						Main.dust[num1010].velocity *= 0.2f;
						Main.dust[num1010].fadeIn = 1f;
					}
					this.ai[1] += 1f;
					if (this.ai[3] > 0f)
					{
						if (this.ai[3] == 1f)
						{
							Vector2 vector112 = base.Center - new Vector2(50f);
							for (int num1011 = 0; num1011 < 32; num1011++)
							{
								int num1012 = Dust.NewDust(vector112, 100, 100, 6, 0f, 0f, 100, default(Color), 2.5f);
								Main.dust[num1012].noGravity = true;
								Main.dust[num1012].velocity *= 3f;
								num1012 = Dust.NewDust(vector112, 100, 100, 6, 0f, 0f, 100, default(Color), 1.5f);
								Main.dust[num1012].velocity *= 2f;
								Main.dust[num1012].noGravity = true;
							}
							for (int num1013 = 0; num1013 < 4; num1013++)
							{
								int num1014 = Gore.NewGore(vector112 + new Vector2((float)(50 * Main.rand.Next(100)) / 100f, (float)(50 * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
								Main.gore[num1014].velocity *= 0.3f;
								Main.gore[num1014].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
								Main.gore[num1014].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
							}
						}
						for (int num1015 = 0; num1015 < 5; num1015++)
						{
							int num1016 = Dust.NewDust(base.position, width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Main.dust[num1016].velocity = Main.dust[num1016].velocity * Main.rand.NextFloat();
						}
						this.ai[3] += 1f;
						if (this.ai[3] >= 10f)
						{
							this.ai[3] = 0f;
						}
					}
					if (this.ai[1] == 1f)
					{
						netUpdate = true;
						TargetClosest();
						bool flag94 = Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height);
						float num1017 = 16f;
						if (!flag94)
						{
							num1017 = 10f;
						}
						Vector2 vector113 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						float num1018 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector113.X;
						float num1019 = Math.Abs(num1018) * 0.2f;
						if (directionY > 0)
						{
							num1019 = 0f;
						}
						float num1020 = Main.player[target].position.Y - vector113.Y - num1019;
						float num1021 = (float)Math.Sqrt(num1018 * num1018 + num1020 * num1020);
						netUpdate = true;
						num1021 = num1017 / num1021;
						num1018 *= num1021;
						num1020 *= num1021;
						if (!flag94)
						{
							num1020 = -12f;
						}
						base.velocity.X = num1018;
						base.velocity.Y = num1020;
					}
					else
					{
						if (base.position.X + (float)width > Main.player[target].position.X && base.position.X < Main.player[target].position.X + (float)Main.player[target].width && base.position.Y < Main.player[target].position.Y + (float)Main.player[target].height)
						{
							base.velocity.X *= 0.9f;
							if (base.velocity.Y < 0f)
							{
								base.velocity.Y += 0.2f;
							}
						}
						if (this.ai[2] == 0f || this.ai[1] >= 1200f)
						{
							this.ai[1] = 0f;
							this.ai[0] = 5f;
						}
					}
					if (wet && directionY < 0)
					{
						base.velocity.Y -= 0.3f;
					}
					rotation += MathHelper.Clamp(base.velocity.X / 10f * (float)base.direction, -(float)Math.PI / 10f, (float)Math.PI / 10f);
				}
				else if (this.ai[0] == 5f)
				{
					rotation = 0f;
					base.velocity.X = 0f;
					if (type >= 496 && type <= 497)
					{
						this.ai[1] += 0.5f;
					}
					else
					{
						this.ai[1] += 1f;
					}
					if (this.ai[1] >= 30f)
					{
						TargetClosest();
						netUpdate = true;
						this.ai[1] = 0f;
						this.ai[0] = 0f;
					}
					if (wet)
					{
						this.ai[0] = 3f;
						this.ai[1] = 0f;
					}
				}
			}
			else if (aiStyle == 40)
			{
				if (target < 0 || target == 16 || Main.player[target].dead)
				{
					TargetClosest();
				}
				float num1022 = 2f;
				float num1023 = 0.08f;
				if (type == 531)
				{
					num1022 = 4f;
					num1023 = 0.16f;
				}
				Vector2 vector114 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num1024 = Main.player[target].position.X + (float)(Main.player[target].width / 2);
				float num1025 = Main.player[target].position.Y + (float)(Main.player[target].height / 2);
				num1024 = (int)(num1024 / 8f) * 8;
				num1025 = (int)(num1025 / 8f) * 8;
				vector114.X = (int)(vector114.X / 8f) * 8;
				vector114.Y = (int)(vector114.Y / 8f) * 8;
				num1024 -= vector114.X;
				num1025 -= vector114.Y;
				float num1026 = (float)Math.Sqrt(num1024 * num1024 + num1025 * num1025);
				if (num1026 == 0f)
				{
					num1024 = base.velocity.X;
					num1025 = base.velocity.Y;
				}
				else
				{
					num1026 = num1022 / num1026;
					num1024 *= num1026;
					num1025 *= num1026;
				}
				if (Main.player[target].dead)
				{
					num1024 = (float)base.direction * num1022 / 2f;
					num1025 = (0f - num1022) / 2f;
				}
				spriteDirection = -1;
				if (!Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
				{
					this.ai[0] += 1f;
					if (this.ai[0] > 0f)
					{
						base.velocity.Y += 0.023f;
					}
					else
					{
						base.velocity.Y -= 0.023f;
					}
					if (this.ai[0] < -100f || this.ai[0] > 100f)
					{
						base.velocity.X += 0.023f;
					}
					else
					{
						base.velocity.X -= 0.023f;
					}
					if (this.ai[0] > 200f)
					{
						this.ai[0] = -200f;
					}
					base.velocity.X += num1024 * 0.007f;
					base.velocity.Y += num1025 * 0.007f;
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X);
					if ((double)base.velocity.X > 1.5)
					{
						base.velocity.X *= 0.9f;
					}
					if ((double)base.velocity.X < -1.5)
					{
						base.velocity.X *= 0.9f;
					}
					if ((double)base.velocity.Y > 1.5)
					{
						base.velocity.Y *= 0.9f;
					}
					if ((double)base.velocity.Y < -1.5)
					{
						base.velocity.Y *= 0.9f;
					}
					if (base.velocity.X > 3f)
					{
						base.velocity.X = 3f;
					}
					if (base.velocity.X < -3f)
					{
						base.velocity.X = -3f;
					}
					if (base.velocity.Y > 3f)
					{
						base.velocity.Y = 3f;
					}
					if (base.velocity.Y < -3f)
					{
						base.velocity.Y = -3f;
					}
				}
				else
				{
					if (base.velocity.X < num1024)
					{
						base.velocity.X += num1023;
						if (base.velocity.X < 0f && num1024 > 0f)
						{
							base.velocity.X += num1023;
						}
					}
					else if (base.velocity.X > num1024)
					{
						base.velocity.X -= num1023;
						if (base.velocity.X > 0f && num1024 < 0f)
						{
							base.velocity.X -= num1023;
						}
					}
					if (base.velocity.Y < num1025)
					{
						base.velocity.Y += num1023;
						if (base.velocity.Y < 0f && num1025 > 0f)
						{
							base.velocity.Y += num1023;
						}
					}
					else if (base.velocity.Y > num1025)
					{
						base.velocity.Y -= num1023;
						if (base.velocity.Y > 0f && num1025 < 0f)
						{
							base.velocity.Y -= num1023;
						}
					}
					rotation = (float)Math.Atan2(num1025, num1024);
				}
				if (type == 531)
				{
					rotation += (float)Math.PI / 2f;
				}
				float num1027 = 0.5f;
				if (collideX)
				{
					netUpdate = true;
					base.velocity.X = oldVelocity.X * (0f - num1027);
					if (base.direction == -1 && base.velocity.X > 0f && base.velocity.X < 2f)
					{
						base.velocity.X = 2f;
					}
					if (base.direction == 1 && base.velocity.X < 0f && base.velocity.X > -2f)
					{
						base.velocity.X = -2f;
					}
				}
				if (collideY)
				{
					netUpdate = true;
					base.velocity.Y = oldVelocity.Y * (0f - num1027);
					if (base.velocity.Y > 0f && (double)base.velocity.Y < 1.5)
					{
						base.velocity.Y = 2f;
					}
					if (base.velocity.Y < 0f && (double)base.velocity.Y > -1.5)
					{
						base.velocity.Y = -2f;
					}
				}
				if (((base.velocity.X > 0f && oldVelocity.X < 0f) || (base.velocity.X < 0f && oldVelocity.X > 0f) || (base.velocity.Y > 0f && oldVelocity.Y < 0f) || (base.velocity.Y < 0f && oldVelocity.Y > 0f)) && !justHit)
				{
					netUpdate = true;
				}
				if (Main.netMode == 1)
				{
					return;
				}
				if (Main.netMode != 1 && Main.expertMode && target >= 0 && (type == 163 || type == 238) && Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
				{
					localAI[0] += 1f;
					if (justHit)
					{
						localAI[0] -= Main.rand.Next(20, 60);
						if (localAI[0] < 0f)
						{
							localAI[0] = 0f;
						}
					}
					if (localAI[0] > (float)Main.rand.Next(180, 900))
					{
						localAI[0] = 0f;
						Vector2 vector115 = Main.player[target].Center - base.Center;
						vector115.Normalize();
						vector115 *= 8f;
						Projectile.NewProjectile(base.Center.X, base.Center.Y, vector115.X, vector115.Y, 472, 18, 0f, Main.myPlayer);
					}
				}
				int num1028 = (int)base.Center.X / 16;
				int num1029 = (int)base.Center.Y / 16;
				bool flag95 = false;
				for (int num1030 = num1028 - 1; num1030 <= num1028 + 1; num1030++)
				{
					for (int num1031 = num1029 - 1; num1031 <= num1029 + 1; num1031++)
					{
						if (Main.tile[num1030, num1031] == null)
						{
							return;
						}
						if (Main.tile[num1030, num1031].wall > 0)
						{
							flag95 = true;
						}
					}
				}
				if (!flag95)
				{
					if (type == 237)
					{
						Transform(236);
					}
					else if (type == 238)
					{
						Transform(163);
					}
					else if (type == 240)
					{
						Transform(239);
					}
					else if (type == 531)
					{
						Transform(530);
					}
					else
					{
						Transform(164);
					}
				}
			}
			else if (aiStyle == 41)
			{
				if (this.ai[2] > 1f)
				{
					this.ai[2] -= 1f;
				}
				if (this.ai[2] == 0f)
				{
					this.ai[0] = -100f;
					this.ai[2] = 1f;
					TargetClosest();
					spriteDirection = base.direction;
				}
				if (type == 378)
				{
					Vector2 value7 = new Vector2(-6f, -10f);
					value7.X *= spriteDirection;
					if (this.ai[1] != 5f && Main.rand.Next(3) == 0)
					{
						int num1032 = Dust.NewDust(base.Center + value7 - Vector2.One * 5f, 4, 4, 6);
						Main.dust[num1032].scale = 1.5f;
						Main.dust[num1032].noGravity = true;
						Main.dust[num1032].velocity = Main.dust[num1032].velocity * 0.25f + Vector2.Normalize(value7) * 1f;
						Main.dust[num1032].velocity = Main.dust[num1032].velocity.RotatedBy(-(float)Math.PI / 2f * (float)base.direction);
					}
					if (this.ai[1] == 5f)
					{
						base.velocity = Vector2.Zero;
						base.position.X += width / 2;
						base.position.Y += height / 2;
						width = 160;
						height = 160;
						base.position.X -= width / 2;
						base.position.Y -= height / 2;
						dontTakeDamage = true;
						for (int num1033 = 0; num1033 < 8; num1033++)
						{
							Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						}
						for (int num1034 = 0; num1034 < 32; num1034++)
						{
							int num1035 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num1035].noGravity = true;
							Main.dust[num1035].velocity *= 3f;
							num1035 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
							Main.dust[num1035].velocity *= 2f;
							Main.dust[num1035].noGravity = true;
						}
						for (int num1036 = 0; num1036 < 2; num1036++)
						{
							int num1037 = Gore.NewGore(base.position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
							Main.gore[num1037].velocity *= 0.3f;
							Main.gore[num1037].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
							Main.gore[num1037].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
						}
						if (this.ai[2] == 1f)
						{
							Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 14);
							life = -1;
							HitEffect();
							active = false;
						}
						return;
					}
				}
				if (type == 378 && this.ai[1] != 5f)
				{
					if (wet || Vector2.Distance(base.Center, Main.player[target].Center) < 64f)
					{
						this.ai[1] = 5f;
						this.ai[2] = 3f;
						netUpdate = true;
						return;
					}
				}
				else if (wet && type != 177)
				{
					if (collideX)
					{
						base.direction *= -base.direction;
						spriteDirection = base.direction;
					}
					if (collideY)
					{
						TargetClosest();
						if (oldVelocity.Y < 0f)
						{
							base.velocity.Y = 5f;
						}
						else
						{
							base.velocity.Y -= 2f;
						}
						spriteDirection = base.direction;
					}
					if (base.velocity.Y > 4f)
					{
						base.velocity.Y *= 0.95f;
					}
					base.velocity.Y -= 0.3f;
					if (base.velocity.Y < -4f)
					{
						base.velocity.Y = -4f;
					}
				}
				if (base.velocity.Y == 0f)
				{
					if (this.ai[3] == base.position.X)
					{
						base.direction *= -1;
						this.ai[2] = 300f;
					}
					this.ai[3] = 0f;
					base.velocity.X *= 0.8f;
					if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
					{
						base.velocity.X = 0f;
					}
					if (type == 177)
					{
						this.ai[0] += 2f;
					}
					else
					{
						this.ai[0] += 5f;
					}
					Vector2 vector116 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num1038 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector116.X;
					float num1039 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector116.Y;
					float num1040 = (float)Math.Sqrt(num1038 * num1038 + num1039 * num1039);
					float num1041 = 400f / num1040;
					num1041 = ((type != 177) ? (num1041 * 10f) : (num1041 * 5f));
					if (num1041 > 30f)
					{
						num1041 = 30f;
					}
					this.ai[0] += (int)num1041;
					if (this.ai[0] >= 0f)
					{
						netUpdate = true;
						if (this.ai[2] == 1f)
						{
							TargetClosest();
						}
						if (type == 177)
						{
							if (this.ai[1] == 2f)
							{
								base.velocity.Y = -11.5f;
								base.velocity.X += 2f * (float)base.direction;
								if (num1040 < 350f && num1040 > 200f)
								{
									base.velocity.X += base.direction;
								}
								this.ai[0] = -200f;
								this.ai[1] = 0f;
								this.ai[3] = base.position.X;
							}
							else
							{
								base.velocity.Y = -7.5f;
								base.velocity.X += 4 * base.direction;
								if (num1040 < 350f && num1040 > 200f)
								{
									base.velocity.X += base.direction;
								}
								this.ai[0] = -120f;
								this.ai[1] += 1f;
							}
						}
						else if (this.ai[1] == 3f)
						{
							base.velocity.Y = -9f;
							base.velocity.X += 3 * base.direction;
							if (num1040 < 350f && num1040 > 200f)
							{
								base.velocity.X += base.direction;
							}
							this.ai[0] = -200f;
							this.ai[1] = 0f;
							this.ai[3] = base.position.X;
						}
						else
						{
							base.velocity.Y = -5f;
							base.velocity.X += 5 * base.direction;
							if (num1040 < 350f && num1040 > 200f)
							{
								base.velocity.X += base.direction;
							}
							this.ai[0] = -120f;
							this.ai[1] += 1f;
						}
					}
					else if (this.ai[0] >= -30f)
					{
						aiAction = 1;
					}
					spriteDirection = base.direction;
				}
				else
				{
					if (target >= 16)
					{
						return;
					}
					if (type == 177)
					{
						bool flag96 = false;
						if (base.position.Y + (float)height < Main.player[target].position.Y && base.position.X + (float)width > Main.player[target].position.X && base.position.X < Main.player[target].position.X + (float)Main.player[target].width)
						{
							flag96 = true;
							base.velocity.X *= 0.92f;
							if (base.velocity.Y < 0f)
							{
								base.velocity.Y *= 0.9f;
								base.velocity.Y += 0.1f;
							}
						}
						if (!flag96 && ((base.direction == 1 && base.velocity.X < 4f) || (base.direction == -1 && base.velocity.X > -4f)))
						{
							if ((base.direction == -1 && (double)base.velocity.X < 0.1) || (base.direction == 1 && (double)base.velocity.X > -0.1))
							{
								base.velocity.X += 0.2f * (float)base.direction;
							}
							else
							{
								base.velocity.X *= 0.93f;
							}
						}
					}
					else if ((base.direction == 1 && base.velocity.X < 3f) || (base.direction == -1 && base.velocity.X > -3f))
					{
						if ((base.direction == -1 && (double)base.velocity.X < 0.1) || (base.direction == 1 && (double)base.velocity.X > -0.1))
						{
							base.velocity.X += 0.2f * (float)base.direction;
						}
						else
						{
							base.velocity.X *= 0.93f;
						}
					}
				}
			}
			else if (aiStyle == 42)
			{
				TargetClosest();
				if (this.ai[0] == 0f)
				{
					if (target >= 0)
					{
						Vector2 vector117 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						float num1042 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector117.X;
						float num1043 = Main.player[target].position.Y - vector117.Y;
						float num1044 = (float)Math.Sqrt(num1042 * num1042 + num1043 * num1043);
						if (num1044 < 200f && Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
						{
							this.ai[0] = 1f;
						}
					}
					if (base.velocity.X != 0f || base.velocity.Y < 0f || base.velocity.Y > 2f || life != lifeMax)
					{
						this.ai[0] = 1f;
					}
				}
				else
				{
					this.ai[0] += 1f;
					if (this.ai[0] >= 21f)
					{
						this.ai[0] = 21f;
						Transform(196);
					}
				}
			}
			else if (aiStyle == 43)
			{
				int num1045 = 0;
				for (int num1046 = 0; num1046 < 16; num1046++)
				{
					if (Main.player[num1046].active && !Main.player[num1046].dead && (base.Center - Main.player[num1046].Center).Length() < 1000f)
					{
						num1045++;
					}
				}
				if (Main.expertMode)
				{
					int num1047 = (int)(20f * (1f - (float)life / (float)lifeMax));
					defense = defDefense + num1047;
				}
				if (target < 0 || target == 16 || Main.player[target].dead || !Main.player[target].active)
				{
					TargetClosest();
				}
				if (Main.player[target].dead && Main.expertMode)
				{
					if ((double)base.position.Y < Main.worldSurface * 16.0 + 2000.0)
					{
						base.velocity.Y += 0.04f;
					}
					if (base.position.X < (float)(Main.maxTilesX * 8))
					{
						base.velocity.X -= 0.04f;
					}
					else
					{
						base.velocity.X += 0.04f;
					}
					if (timeLeft > 10)
					{
						timeLeft = 10;
					}
				}
				else if (this.ai[0] == -1f)
				{
					if (Main.netMode == 1)
					{
						return;
					}
					float num1048 = this.ai[1];
					int num1049;
					do
					{
						num1049 = Main.rand.Next(3);
						switch (num1049)
						{
						case 1:
							num1049 = 2;
							break;
						case 2:
							num1049 = 3;
							break;
						}
					}
					while ((float)num1049 == num1048);
					this.ai[0] = num1049;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
				}
				else if (this.ai[0] == 0f)
				{
					int num1050 = 2;
					if (Main.expertMode)
					{
						if (life < lifeMax / 2)
						{
							num1050++;
						}
						if (life < lifeMax / 3)
						{
							num1050++;
						}
						if (life < lifeMax / 5)
						{
							num1050++;
						}
					}
					if (this.ai[1] > (float)(2 * num1050) && this.ai[1] % 2f == 0f)
					{
						this.ai[0] = -1f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						netUpdate = true;
						return;
					}
					if (this.ai[1] % 2f == 0f)
					{
						TargetClosest();
						if (Math.Abs(base.position.Y + (float)(height / 2) - (Main.player[target].position.Y + (float)(Main.player[target].height / 2))) < 20f)
						{
							localAI[0] = 1f;
							this.ai[1] += 1f;
							this.ai[2] = 0f;
							float num1051 = 12f;
							if (Main.expertMode)
							{
								num1051 = 16f;
								if ((double)life < (double)lifeMax * 0.75)
								{
									num1051 += 2f;
								}
								if ((double)life < (double)lifeMax * 0.5)
								{
									num1051 += 2f;
								}
								if ((double)life < (double)lifeMax * 0.25)
								{
									num1051 += 2f;
								}
								if ((double)life < (double)lifeMax * 0.1)
								{
									num1051 += 2f;
								}
							}
							Vector2 vector118 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
							float num1052 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector118.X;
							float num1053 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector118.Y;
							float num1054 = (float)Math.Sqrt(num1052 * num1052 + num1053 * num1053);
							num1054 = num1051 / num1054;
							base.velocity.X = num1052 * num1054;
							base.velocity.Y = num1053 * num1054;
							spriteDirection = base.direction;
							Main.PlaySound(15, (int)base.position.X, (int)base.position.Y, 0);
							return;
						}
						localAI[0] = 0f;
						float num1055 = 12f;
						float num1056 = 0.15f;
						if (Main.expertMode)
						{
							if ((double)life < (double)lifeMax * 0.75)
							{
								num1055 += 1f;
								num1056 += 0.05f;
							}
							if ((double)life < (double)lifeMax * 0.5)
							{
								num1055 += 1f;
								num1056 += 0.05f;
							}
							if ((double)life < (double)lifeMax * 0.25)
							{
								num1055 += 2f;
								num1056 += 0.05f;
							}
							if ((double)life < (double)lifeMax * 0.1)
							{
								num1055 += 2f;
								num1056 += 0.1f;
							}
						}
						if (base.position.Y + (float)(height / 2) < Main.player[target].position.Y + (float)(Main.player[target].height / 2))
						{
							base.velocity.Y += num1056;
						}
						else
						{
							base.velocity.Y -= num1056;
						}
						if (base.velocity.Y < -12f)
						{
							base.velocity.Y = 0f - num1055;
						}
						if (base.velocity.Y > 12f)
						{
							base.velocity.Y = num1055;
						}
						if (Math.Abs(base.position.X + (float)(width / 2) - (Main.player[target].position.X + (float)(Main.player[target].width / 2))) > 600f)
						{
							base.velocity.X += 0.15f * (float)base.direction;
						}
						else if (Math.Abs(base.position.X + (float)(width / 2) - (Main.player[target].position.X + (float)(Main.player[target].width / 2))) < 300f)
						{
							base.velocity.X -= 0.15f * (float)base.direction;
						}
						else
						{
							base.velocity.X *= 0.8f;
						}
						if (base.velocity.X < -16f)
						{
							base.velocity.X = -16f;
						}
						if (base.velocity.X > 16f)
						{
							base.velocity.X = 16f;
						}
						spriteDirection = base.direction;
						return;
					}
					if (base.velocity.X < 0f)
					{
						base.direction = -1;
					}
					else
					{
						base.direction = 1;
					}
					spriteDirection = base.direction;
					int num1057 = 600;
					if (Main.expertMode)
					{
						if ((double)life < (double)lifeMax * 0.1)
						{
							num1057 = 300;
						}
						else if ((double)life < (double)lifeMax * 0.25)
						{
							num1057 = 450;
						}
						else if ((double)life < (double)lifeMax * 0.5)
						{
							num1057 = 500;
						}
						else if ((double)life < (double)lifeMax * 0.75)
						{
							num1057 = 550;
						}
					}
					int num1058 = 1;
					if (base.position.X + (float)(width / 2) < Main.player[target].position.X + (float)(Main.player[target].width / 2))
					{
						num1058 = -1;
					}
					if (base.direction == num1058 && Math.Abs(base.position.X + (float)(width / 2) - (Main.player[target].position.X + (float)(Main.player[target].width / 2))) > (float)num1057)
					{
						this.ai[2] = 1f;
					}
					if (this.ai[2] == 1f)
					{
						TargetClosest();
						spriteDirection = base.direction;
						localAI[0] = 0f;
						base.velocity *= 0.9f;
						float num1059 = 0.1f;
						if (Main.expertMode)
						{
							if (life < lifeMax / 2)
							{
								base.velocity *= 0.9f;
								num1059 += 0.05f;
							}
							if (life < lifeMax / 3)
							{
								base.velocity *= 0.9f;
								num1059 += 0.05f;
							}
							if (life < lifeMax / 5)
							{
								base.velocity *= 0.9f;
								num1059 += 0.05f;
							}
						}
						if (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y) < num1059)
						{
							this.ai[2] = 0f;
							this.ai[1] += 1f;
						}
					}
					else
					{
						localAI[0] = 1f;
					}
				}
				else if (this.ai[0] == 2f)
				{
					TargetClosest();
					spriteDirection = base.direction;
					float num1060 = 12f;
					float num1061 = 0.07f;
					if (Main.expertMode)
					{
						num1061 = 0.1f;
					}
					Vector2 vector119 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num1062 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector119.X;
					float num1063 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - 200f - vector119.Y;
					float num1064 = (float)Math.Sqrt(num1062 * num1062 + num1063 * num1063);
					if (num1064 < 200f)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						netUpdate = true;
						return;
					}
					num1064 = num1060 / num1064;
					if (base.velocity.X < num1062)
					{
						base.velocity.X += num1061;
						if (base.velocity.X < 0f && num1062 > 0f)
						{
							base.velocity.X += num1061;
						}
					}
					else if (base.velocity.X > num1062)
					{
						base.velocity.X -= num1061;
						if (base.velocity.X > 0f && num1062 < 0f)
						{
							base.velocity.X -= num1061;
						}
					}
					if (base.velocity.Y < num1063)
					{
						base.velocity.Y += num1061;
						if (base.velocity.Y < 0f && num1063 > 0f)
						{
							base.velocity.Y += num1061;
						}
					}
					else if (base.velocity.Y > num1063)
					{
						base.velocity.Y -= num1061;
						if (base.velocity.Y > 0f && num1063 < 0f)
						{
							base.velocity.Y -= num1061;
						}
					}
				}
				else if (this.ai[0] == 1f)
				{
					localAI[0] = 0f;
					TargetClosest();
					Vector2 vector120 = new Vector2(base.position.X + (float)(width / 2) + (float)(Main.rand.Next(20) * base.direction), base.position.Y + (float)height * 0.8f);
					Vector2 vector121 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num1065 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector121.X;
					float num1066 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector121.Y;
					float num1067 = (float)Math.Sqrt(num1065 * num1065 + num1066 * num1066);
					this.ai[1] += 1f;
					if (Main.expertMode)
					{
						this.ai[1] += num1045 / 2;
						if ((double)life < (double)lifeMax * 0.75)
						{
							this.ai[1] += 0.25f;
						}
						if ((double)life < (double)lifeMax * 0.5)
						{
							this.ai[1] += 0.25f;
						}
						if ((double)life < (double)lifeMax * 0.25)
						{
							this.ai[1] += 0.25f;
						}
						if ((double)life < (double)lifeMax * 0.1)
						{
							this.ai[1] += 0.25f;
						}
					}
					bool flag97 = false;
					if (this.ai[1] > 40f)
					{
						this.ai[1] = 0f;
						this.ai[2] += 1f;
						flag97 = true;
					}
					if (Collision.CanHit(vector120, 1, 1, Main.player[target].position, Main.player[target].width, Main.player[target].height) && flag97)
					{
						Main.PlaySound(3, (int)base.position.X, (int)base.position.Y);
						if (Main.netMode != 1)
						{
							int num1068 = Main.rand.Next(210, 212);
							int num1069 = NewNPC((int)vector120.X, (int)vector120.Y, num1068);
							Main.npc[num1069].velocity.X = (float)Main.rand.Next(-200, 201) * 0.002f;
							Main.npc[num1069].velocity.Y = (float)Main.rand.Next(-200, 201) * 0.002f;
							Main.npc[num1069].localAI[0] = 60f;
							Main.npc[num1069].netUpdate = true;
						}
					}
					if (num1067 > 400f || !Collision.CanHit(new Vector2(vector120.X, vector120.Y - 30f), 1, 1, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						float num1070 = 14f;
						float num1071 = 0.1f;
						vector121 = vector120;
						num1065 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector121.X;
						num1066 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector121.Y;
						num1067 = (float)Math.Sqrt(num1065 * num1065 + num1066 * num1066);
						num1067 = num1070 / num1067;
						if (base.velocity.X < num1065)
						{
							base.velocity.X += num1071;
							if (base.velocity.X < 0f && num1065 > 0f)
							{
								base.velocity.X += num1071;
							}
						}
						else if (base.velocity.X > num1065)
						{
							base.velocity.X -= num1071;
							if (base.velocity.X > 0f && num1065 < 0f)
							{
								base.velocity.X -= num1071;
							}
						}
						if (base.velocity.Y < num1066)
						{
							base.velocity.Y += num1071;
							if (base.velocity.Y < 0f && num1066 > 0f)
							{
								base.velocity.Y += num1071;
							}
						}
						else if (base.velocity.Y > num1066)
						{
							base.velocity.Y -= num1071;
							if (base.velocity.Y > 0f && num1066 < 0f)
							{
								base.velocity.Y -= num1071;
							}
						}
					}
					else
					{
						base.velocity *= 0.9f;
					}
					spriteDirection = base.direction;
					if (this.ai[2] > 5f)
					{
						this.ai[0] = -1f;
						this.ai[1] = 1f;
						netUpdate = true;
					}
				}
				else
				{
					if (this.ai[0] != 3f)
					{
						return;
					}
					float num1072 = 4f;
					float num1073 = 0.05f;
					if (Main.expertMode)
					{
						num1073 = 0.075f;
						num1072 = 6f;
					}
					Vector2 vector122 = new Vector2(base.position.X + (float)(width / 2) + (float)(Main.rand.Next(20) * base.direction), base.position.Y + (float)height * 0.8f);
					Vector2 vector123 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num1074 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector123.X;
					float num1075 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - 300f - vector123.Y;
					float num1076 = (float)Math.Sqrt(num1074 * num1074 + num1075 * num1075);
					this.ai[1] += 1f;
					bool flag98 = false;
					if (Main.expertMode)
					{
						if ((double)life < (double)lifeMax * 0.1)
						{
							if (this.ai[1] % 15f == 14f)
							{
								flag98 = true;
							}
						}
						else if (life < lifeMax / 3)
						{
							if (this.ai[1] % 25f == 24f)
							{
								flag98 = true;
							}
						}
						else if (life < lifeMax / 2)
						{
							if (this.ai[1] % 30f == 29f)
							{
								flag98 = true;
							}
						}
						else if (this.ai[1] % 35f == 34f)
						{
							flag98 = true;
						}
					}
					else if (this.ai[1] % 40f == 39f)
					{
						flag98 = true;
					}
					if (flag98 && base.position.Y + (float)height < Main.player[target].position.Y && Collision.CanHit(vector122, 1, 1, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 17);
						if (Main.netMode != 1)
						{
							float num1077 = 8f;
							if (Main.expertMode)
							{
								num1077 += 2f;
							}
							if (Main.expertMode && (double)life < (double)lifeMax * 0.1)
							{
								num1077 += 3f;
							}
							float num1078 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector122.X + (float)Main.rand.Next(-80, 81);
							float num1079 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector122.Y + (float)Main.rand.Next(-40, 41);
							float num1080 = (float)Math.Sqrt(num1078 * num1078 + num1079 * num1079);
							num1080 = num1077 / num1080;
							num1078 *= num1080;
							num1079 *= num1080;
							int num1081 = 11;
							int num1082 = 55;
							int num1083 = Projectile.NewProjectile(vector122.X, vector122.Y, num1078, num1079, num1082, num1081, 0f, Main.myPlayer);
							Main.projectile[num1083].timeLeft = 300;
						}
					}
					if (!Collision.CanHit(new Vector2(vector122.X, vector122.Y - 30f), 1, 1, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						num1072 = 14f;
						num1073 = 0.1f;
						vector123 = vector122;
						num1074 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector123.X;
						num1075 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector123.Y;
						num1076 = (float)Math.Sqrt(num1074 * num1074 + num1075 * num1075);
						num1076 = num1072 / num1076;
						if (base.velocity.X < num1074)
						{
							base.velocity.X += num1073;
							if (base.velocity.X < 0f && num1074 > 0f)
							{
								base.velocity.X += num1073;
							}
						}
						else if (base.velocity.X > num1074)
						{
							base.velocity.X -= num1073;
							if (base.velocity.X > 0f && num1074 < 0f)
							{
								base.velocity.X -= num1073;
							}
						}
						if (base.velocity.Y < num1075)
						{
							base.velocity.Y += num1073;
							if (base.velocity.Y < 0f && num1075 > 0f)
							{
								base.velocity.Y += num1073;
							}
						}
						else if (base.velocity.Y > num1075)
						{
							base.velocity.Y -= num1073;
							if (base.velocity.Y > 0f && num1075 < 0f)
							{
								base.velocity.Y -= num1073;
							}
						}
					}
					else if (num1076 > 100f)
					{
						TargetClosest();
						spriteDirection = base.direction;
						num1076 = num1072 / num1076;
						if (base.velocity.X < num1074)
						{
							base.velocity.X += num1073;
							if (base.velocity.X < 0f && num1074 > 0f)
							{
								base.velocity.X += num1073 * 2f;
							}
						}
						else if (base.velocity.X > num1074)
						{
							base.velocity.X -= num1073;
							if (base.velocity.X > 0f && num1074 < 0f)
							{
								base.velocity.X -= num1073 * 2f;
							}
						}
						if (base.velocity.Y < num1075)
						{
							base.velocity.Y += num1073;
							if (base.velocity.Y < 0f && num1075 > 0f)
							{
								base.velocity.Y += num1073 * 2f;
							}
						}
						else if (base.velocity.Y > num1075)
						{
							base.velocity.Y -= num1073;
							if (base.velocity.Y > 0f && num1075 < 0f)
							{
								base.velocity.Y -= num1073 * 2f;
							}
						}
					}
					if (this.ai[1] > 800f)
					{
						this.ai[0] = -1f;
						this.ai[1] = 3f;
						netUpdate = true;
					}
				}
			}
			else if (aiStyle == 44)
			{
				noGravity = true;
				if (collideX)
				{
					if (oldVelocity.X > 0f)
					{
						base.direction = -1;
					}
					else
					{
						base.direction = 1;
					}
					base.velocity.X = base.direction;
				}
				if (collideY)
				{
					if (oldVelocity.Y > 0f)
					{
						directionY = -1;
					}
					else
					{
						directionY = 1;
					}
					base.velocity.Y = directionY;
				}
				int num1084 = target;
				int direction5 = base.direction;
				if (target == 255 || Main.player[target].dead || Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
				{
					this.ai[0] = 90f;
					TargetClosest();
				}
				else if (this.ai[0] > 0f)
				{
					this.ai[0] -= 1f;
					TargetClosest();
				}
				if (netUpdate && num1084 == target && direction5 == base.direction)
				{
					netUpdate = false;
				}
				float num1085 = 0.05f;
				float num1086 = 0.01f;
				float num1087 = 3f;
				float num1088 = 1f;
				float num1089 = 30f;
				float num1090 = 100f;
				float num1091 = Math.Abs(base.position.X + (float)(width / 2) - (Main.player[target].position.X + (float)(Main.player[target].width / 2)));
				float num1092 = Main.player[target].position.Y - (float)(height / 2);
				if (type == 509)
				{
					num1085 = 0.09f;
					num1086 = 0.03f;
					num1087 = 5f;
					num1088 = 2f;
					num1089 = 40f;
					num1090 = 150f;
					num1092 = Main.player[target].Center.Y - (float)(height / 2);
					rotation = base.velocity.X * 0.1f;
					for (int num1093 = 0; num1093 < 200; num1093++)
					{
						if (num1093 != base.whoAmI && Main.npc[num1093].active && Main.npc[num1093].type == type && Math.Abs(base.position.X - Main.npc[num1093].position.X) + Math.Abs(base.position.Y - Main.npc[num1093].position.Y) < (float)width)
						{
							if (base.position.X < Main.npc[num1093].position.X)
							{
								base.velocity.X -= 0.05f;
							}
							else
							{
								base.velocity.X += 0.05f;
							}
							if (base.position.Y < Main.npc[num1093].position.Y)
							{
								base.velocity.Y -= 0.05f;
							}
							else
							{
								base.velocity.Y += 0.05f;
							}
						}
					}
				}
				if (this.ai[0] <= 0f)
				{
					num1087 *= 0.8f;
					num1085 *= 0.7f;
					num1092 = base.Center.Y + (float)(directionY * 1000);
					if (base.velocity.X < 0f)
					{
						base.direction = -1;
					}
					else if (base.velocity.X > 0f || base.direction == 0)
					{
						base.direction = 1;
					}
				}
				if (num1091 > num1089)
				{
					if (base.direction == -1 && base.velocity.X > 0f - num1087)
					{
						base.velocity.X -= num1085;
						if (base.velocity.X > num1087)
						{
							base.velocity.X -= num1085;
						}
						else if (base.velocity.X > 0f)
						{
							base.velocity.X -= num1085 / 2f;
						}
						if (base.velocity.X < 0f - num1087)
						{
							base.velocity.X = 0f - num1087;
						}
					}
					else if (base.direction == 1 && base.velocity.X < num1087)
					{
						base.velocity.X += num1085;
						if (base.velocity.X < 0f - num1087)
						{
							base.velocity.X += num1085;
						}
						else if (base.velocity.X < 0f)
						{
							base.velocity.X += num1085 / 2f;
						}
						if (base.velocity.X > num1087)
						{
							base.velocity.X = num1087;
						}
					}
				}
				if (num1091 > num1090)
				{
					num1092 -= num1090 / 2f;
				}
				if (base.position.Y < num1092)
				{
					base.velocity.Y += num1086;
					if (base.velocity.Y < 0f)
					{
						base.velocity.Y += num1086;
					}
				}
				else
				{
					base.velocity.Y -= num1086;
					if (base.velocity.Y > 0f)
					{
						base.velocity.Y -= num1086;
					}
				}
				if (base.velocity.Y < 0f - num1088)
				{
					base.velocity.Y = 0f - num1088;
				}
				if (base.velocity.Y > num1088)
				{
					base.velocity.Y = num1088;
				}
			}
			else if (aiStyle == 45)
			{
				golemBoss = base.whoAmI;
				if (localAI[0] == 0f && Main.netMode != 1)
				{
					localAI[0] = 1f;
					NewNPC((int)base.Center.X - 84, (int)base.Center.Y - 9, 247);
					NewNPC((int)base.Center.X + 78, (int)base.Center.Y - 9, 248);
					NewNPC((int)base.Center.X - 3, (int)base.Center.Y - 57, 246);
				}
				if (target >= 0 && Main.player[target].dead)
				{
					TargetClosest();
					if (Main.player[target].dead)
					{
						noTileCollide = true;
					}
				}
				if (alpha > 0)
				{
					alpha -= 10;
					if (alpha < 0)
					{
						alpha = 0;
					}
					this.ai[1] = 0f;
				}
				bool flag99 = false;
				bool flag100 = false;
				bool flag101 = false;
				dontTakeDamage = false;
				for (int num1094 = 0; num1094 < 200; num1094++)
				{
					if (Main.npc[num1094].active && Main.npc[num1094].type == 246)
					{
						flag99 = true;
					}
					if (Main.npc[num1094].active && Main.npc[num1094].type == 247)
					{
						flag100 = true;
					}
					if (Main.npc[num1094].active && Main.npc[num1094].type == 248)
					{
						flag101 = true;
					}
				}
				dontTakeDamage = flag99;
				if (!flag100)
				{
					int num1095 = Dust.NewDust(new Vector2(base.Center.X - 80f, base.Center.Y - 9f), 8, 8, 31, 0f, 0f, 100);
					Main.dust[num1095].alpha += Main.rand.Next(100);
					Main.dust[num1095].velocity *= 0.2f;
					Main.dust[num1095].velocity.Y -= 0.5f + (float)Main.rand.Next(10) * 0.1f;
					Main.dust[num1095].fadeIn = 0.5f + (float)Main.rand.Next(10) * 0.1f;
					if (Main.rand.Next(10) == 0)
					{
						num1095 = Dust.NewDust(new Vector2(base.Center.X - 80f, base.Center.Y - 9f), 8, 8, 6);
						if (Main.rand.Next(20) != 0)
						{
							Main.dust[num1095].noGravity = true;
							Main.dust[num1095].scale *= 1f + (float)Main.rand.Next(10) * 0.1f;
							Main.dust[num1095].velocity.Y -= 1f;
						}
					}
				}
				if (!flag101)
				{
					int num1096 = Dust.NewDust(new Vector2(base.Center.X + 62f, base.Center.Y - 9f), 8, 8, 31, 0f, 0f, 100);
					Main.dust[num1096].alpha += Main.rand.Next(100);
					Main.dust[num1096].velocity *= 0.2f;
					Main.dust[num1096].velocity.Y -= 0.5f + (float)Main.rand.Next(10) * 0.1f;
					Main.dust[num1096].fadeIn = 0.5f + (float)Main.rand.Next(10) * 0.1f;
					if (Main.rand.Next(10) == 0)
					{
						num1096 = Dust.NewDust(new Vector2(base.Center.X + 62f, base.Center.Y - 9f), 8, 8, 6);
						if (Main.rand.Next(20) != 0)
						{
							Main.dust[num1096].noGravity = true;
							Main.dust[num1096].scale *= 1f + (float)Main.rand.Next(10) * 0.1f;
							Main.dust[num1096].velocity.Y -= 1f;
						}
					}
				}
				if (this.ai[0] == 0f)
				{
					noTileCollide = false;
					if (base.velocity.Y == 0f)
					{
						base.velocity.X *= 0.8f;
						this.ai[1] += 1f;
						if (this.ai[1] > 0f)
						{
							if (!flag100)
							{
								this.ai[1] += 2f;
							}
							if (!flag101)
							{
								this.ai[1] += 2f;
							}
							if (!flag99)
							{
								this.ai[1] += 2f;
							}
							if (life < lifeMax)
							{
								this.ai[1] += 1f;
							}
							if (life < lifeMax / 2)
							{
								this.ai[1] += 4f;
							}
							if (life < lifeMax / 3)
							{
								this.ai[1] += 8f;
							}
						}
						if (this.ai[1] >= 300f)
						{
							this.ai[1] = -20f;
							frameCounter = 0.0;
						}
						else if (this.ai[1] == -1f)
						{
							TargetClosest();
							base.velocity.X = 4 * base.direction;
							base.velocity.Y = -12.1f;
							this.ai[0] = 1f;
							this.ai[1] = 0f;
						}
					}
				}
				else if (this.ai[0] == 1f)
				{
					if (base.velocity.Y == 0f)
					{
						Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 14);
						this.ai[0] = 0f;
						for (int num1097 = (int)base.position.X - 20; num1097 < (int)base.position.X + width + 40; num1097 += 20)
						{
							for (int num1098 = 0; num1098 < 4; num1098++)
							{
								int num1099 = Dust.NewDust(new Vector2(base.position.X - 20f, base.position.Y + (float)height), width + 20, 4, 31, 0f, 0f, 100, default(Color), 1.5f);
								Main.dust[num1099].velocity *= 0.2f;
							}
							int num1100 = Gore.NewGore(new Vector2(num1097 - 20, base.position.Y + (float)height - 8f), default(Vector2), Main.rand.Next(61, 64));
							Main.gore[num1100].velocity *= 0.4f;
						}
					}
					else
					{
						TargetClosest();
						if (base.position.X < Main.player[target].position.X && base.position.X + (float)width > Main.player[target].position.X + (float)Main.player[target].width)
						{
							base.velocity.X *= 0.9f;
							base.velocity.Y += 0.2f;
						}
						else
						{
							if (base.direction < 0)
							{
								base.velocity.X -= 0.2f;
							}
							else if (base.direction > 0)
							{
								base.velocity.X += 0.2f;
							}
							float num1101 = 3f;
							if (life < lifeMax)
							{
								num1101 += 1f;
							}
							if (life < lifeMax / 2)
							{
								num1101 += 1f;
							}
							if (life < lifeMax / 4)
							{
								num1101 += 1f;
							}
							if (base.velocity.X < 0f - num1101)
							{
								base.velocity.X = 0f - num1101;
							}
							if (base.velocity.X > num1101)
							{
								base.velocity.X = num1101;
							}
						}
					}
				}
				if (target <= 0 || target == 16 || Main.player[target].dead)
				{
					TargetClosest();
				}
				int num1102 = 3000;
				if (Math.Abs(base.Center.X - Main.player[target].Center.X) + Math.Abs(base.Center.Y - Main.player[target].Center.Y) > (float)num1102)
				{
					TargetClosest();
					if (Math.Abs(base.Center.X - Main.player[target].Center.X) + Math.Abs(base.Center.Y - Main.player[target].Center.Y) > (float)num1102)
					{
						active = false;
					}
				}
			}
			else if (aiStyle == 46)
			{
				noTileCollide = true;
				if (golemBoss < 0)
				{
					StrikeNPCNoInteraction(9999, 0f, 0);
					return;
				}
				float num1103 = 12f;
				Vector2 vector124 = new Vector2(base.Center.X, base.Center.Y);
				float num1104 = Main.npc[golemBoss].Center.X - vector124.X;
				float num1105 = Main.npc[golemBoss].Center.Y - vector124.Y;
				num1105 -= 57f;
				num1104 -= 3f;
				float num1106 = (float)Math.Sqrt(num1104 * num1104 + num1105 * num1105);
				if (num1106 < 20f)
				{
					rotation = 0f;
					base.velocity.X = num1104;
					base.velocity.Y = num1105;
				}
				else
				{
					num1106 = num1103 / num1106;
					base.velocity.X = num1104 * num1106;
					base.velocity.Y = num1105 * num1106;
					rotation = base.velocity.X * 0.1f;
				}
				if (alpha > 0)
				{
					alpha -= 10;
					if (alpha < 0)
					{
						alpha = 0;
					}
					this.ai[1] = 30f;
				}
				if (this.ai[0] == 0f)
				{
					this.ai[1] += 1f;
					int num1107 = 300;
					if (this.ai[1] < 20f || this.ai[1] > (float)(num1107 - 20))
					{
						localAI[0] = 1f;
					}
					else
					{
						localAI[0] = 0f;
					}
					if (this.ai[1] >= (float)num1107)
					{
						TargetClosest();
						this.ai[1] = 0f;
						Vector2 vector125 = new Vector2(base.Center.X, base.Center.Y + 10f);
						float num1108 = 8f;
						float num1109 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector125.X;
						float num1110 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector125.Y;
						float num1111 = (float)Math.Sqrt(num1109 * num1109 + num1110 * num1110);
						num1111 = num1108 / num1111;
						num1109 *= num1111;
						num1110 *= num1111;
						int num1112 = 18;
						int num1113 = 258;
						if (Main.netMode != 1)
						{
							Projectile.NewProjectile(vector125.X, vector125.Y, num1109, num1110, num1113, num1112, 0f, Main.myPlayer);
						}
					}
				}
				else if (this.ai[0] == 1f)
				{
					TargetClosest();
					Vector2 vector126 = new Vector2(base.Center.X, base.Center.Y + 10f);
					if (Main.player[target].Center.X < base.Center.X - (float)width)
					{
						localAI[1] = -1f;
						vector126.X -= 40f;
					}
					else if (Main.player[target].Center.X > base.Center.X + (float)width)
					{
						localAI[1] = 1f;
						vector126.X += 40f;
					}
					else
					{
						localAI[1] = 0f;
					}
					this.ai[1] += 1f;
					if ((double)life < (double)lifeMax * 0.4)
					{
						this.ai[1] += 1f;
					}
					if ((double)life < (double)lifeMax * 0.2)
					{
						this.ai[1] += 1f;
					}
					int num1114 = 300;
					if (this.ai[1] < 20f || this.ai[1] > (float)(num1114 - 20))
					{
						localAI[0] = 1f;
					}
					else
					{
						localAI[0] = 0f;
					}
					if (this.ai[1] >= (float)num1114)
					{
						TargetClosest();
						this.ai[1] = 0f;
						float num1115 = 8f;
						float num1116 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector126.X;
						float num1117 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector126.Y;
						float num1118 = (float)Math.Sqrt(num1116 * num1116 + num1117 * num1117);
						num1118 = num1115 / num1118;
						num1116 *= num1118;
						num1117 *= num1118;
						int num1119 = 24;
						int num1120 = 258;
						if (Main.netMode != 1)
						{
							Projectile.NewProjectile(vector126.X, vector126.Y, num1116, num1117, num1120, num1119, 0f, Main.myPlayer);
						}
					}
					this.ai[2] += 1f;
					if (life < lifeMax / 3)
					{
						this.ai[2] += 1f;
					}
					if (life < lifeMax / 4)
					{
						this.ai[2] += 1f;
					}
					if (life < lifeMax / 5)
					{
						this.ai[2] += 1f;
					}
					if (!Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						this.ai[2] += 4f;
					}
					if (this.ai[2] > (float)(60 + Main.rand.Next(600)))
					{
						this.ai[2] = 0f;
						int num1121 = 28;
						int num1122 = 259;
						if (localAI[1] == 0f)
						{
							for (int num1123 = 0; num1123 < 2; num1123++)
							{
								vector126 = new Vector2(base.Center.X, base.Center.Y - 22f);
								if (num1123 == 0)
								{
									vector126.X -= 18f;
								}
								else
								{
									vector126.X += 18f;
								}
								float num1124 = 11f;
								float num1125 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector126.X;
								float num1126 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector126.Y;
								float num1127 = (float)Math.Sqrt(num1125 * num1125 + num1126 * num1126);
								num1127 = num1124 / num1127;
								num1125 *= num1127;
								num1126 *= num1127;
								vector126.X += num1125 * 3f;
								vector126.Y += num1126 * 3f;
								if (Main.netMode != 1)
								{
									int num1128 = Projectile.NewProjectile(vector126.X, vector126.Y, num1125, num1126, num1122, num1121, 0f, Main.myPlayer);
									Main.projectile[num1128].timeLeft = 300;
								}
							}
						}
						else if (localAI[1] != 0f)
						{
							vector126 = new Vector2(base.Center.X, base.Center.Y - 22f);
							if (localAI[1] == -1f)
							{
								vector126.X -= 30f;
							}
							else if (localAI[1] == 1f)
							{
								vector126.X += 30f;
							}
							float num1129 = 12f;
							float num1130 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector126.X;
							float num1131 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector126.Y;
							float num1132 = (float)Math.Sqrt(num1130 * num1130 + num1131 * num1131);
							num1132 = num1129 / num1132;
							num1130 *= num1132;
							num1131 *= num1132;
							vector126.X += num1130 * 3f;
							vector126.Y += num1131 * 3f;
							if (Main.netMode != 1)
							{
								int num1133 = Projectile.NewProjectile(vector126.X, vector126.Y, num1130, num1131, num1122, num1121, 0f, Main.myPlayer);
								Main.projectile[num1133].timeLeft = 300;
							}
						}
					}
				}
				if (life < lifeMax / 2)
				{
					this.ai[0] = 1f;
				}
				else
				{
					this.ai[0] = 0f;
				}
			}
			else if (aiStyle == 47)
			{
				if (golemBoss < 0)
				{
					StrikeNPCNoInteraction(9999, 0f, 0);
					return;
				}
				if (alpha > 0)
				{
					alpha -= 10;
					if (alpha < 0)
					{
						alpha = 0;
					}
					this.ai[1] = 0f;
				}
				if (this.ai[0] == 0f)
				{
					noTileCollide = true;
					float num1134 = 14f;
					if (life < lifeMax / 2)
					{
						num1134 += 3f;
					}
					if (life < lifeMax / 4)
					{
						num1134 += 3f;
					}
					if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax)
					{
						num1134 += 8f;
					}
					Vector2 vector127 = new Vector2(base.Center.X, base.Center.Y);
					float num1135 = Main.npc[golemBoss].Center.X - vector127.X;
					float num1136 = Main.npc[golemBoss].Center.Y - vector127.Y;
					num1136 -= 9f;
					num1135 = ((type != 247) ? (num1135 + 78f) : (num1135 - 84f));
					float num1137 = (float)Math.Sqrt(num1135 * num1135 + num1136 * num1136);
					if (num1137 < 12f + num1134)
					{
						rotation = 0f;
						base.velocity.X = num1135;
						base.velocity.Y = num1136;
						this.ai[1] += 1f;
						if (life < lifeMax / 2)
						{
							this.ai[1] += 1f;
						}
						if (life < lifeMax / 4)
						{
							this.ai[1] += 1f;
						}
						if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax)
						{
							this.ai[1] += 10f;
						}
						if (this.ai[1] >= 60f)
						{
							TargetClosest();
							if ((type == 247 && base.Center.X + 100f > Main.player[target].Center.X) || (type == 248 && base.Center.X - 100f < Main.player[target].Center.X))
							{
								this.ai[1] = 0f;
								this.ai[0] = 1f;
							}
							else
							{
								this.ai[1] = 0f;
							}
						}
					}
					else
					{
						num1137 = num1134 / num1137;
						base.velocity.X = num1135 * num1137;
						base.velocity.Y = num1136 * num1137;
						rotation = (float)Math.Atan2(0f - base.velocity.Y, 0f - base.velocity.X);
						if (type == 247)
						{
							rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X);
						}
					}
				}
				else if (this.ai[0] == 1f)
				{
					noTileCollide = true;
					collideX = false;
					collideY = false;
					float num1138 = 12f;
					if (life < lifeMax / 2)
					{
						num1138 += 4f;
					}
					if (life < lifeMax / 4)
					{
						num1138 += 4f;
					}
					if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax)
					{
						num1138 += 10f;
					}
					Vector2 vector128 = new Vector2(base.Center.X, base.Center.Y);
					float num1139 = Main.player[target].Center.X - vector128.X;
					float num1140 = Main.player[target].Center.Y - vector128.Y;
					float num1141 = (float)Math.Sqrt(num1139 * num1139 + num1140 * num1140);
					num1141 = num1138 / num1141;
					base.velocity.X = num1139 * num1141;
					base.velocity.Y = num1140 * num1141;
					this.ai[0] = 2f;
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X);
					if (type == 247)
					{
						rotation = (float)Math.Atan2(0f - base.velocity.Y, 0f - base.velocity.X);
					}
				}
				else if (this.ai[0] == 2f)
				{
					if (Math.Abs(base.velocity.X) > Math.Abs(base.velocity.Y))
					{
						if (base.velocity.X > 0f && base.Center.X > Main.player[target].Center.X)
						{
							noTileCollide = false;
						}
						if (base.velocity.X < 0f && base.Center.X < Main.player[target].Center.X)
						{
							noTileCollide = false;
						}
					}
					else
					{
						if (base.velocity.Y > 0f && base.Center.Y > Main.player[target].Center.Y)
						{
							noTileCollide = false;
						}
						if (base.velocity.Y < 0f && base.Center.Y < Main.player[target].Center.Y)
						{
							noTileCollide = false;
						}
					}
					Vector2 vector129 = new Vector2(base.Center.X, base.Center.Y);
					float num1142 = Main.npc[golemBoss].Center.X - vector129.X;
					float num1143 = Main.npc[golemBoss].Center.Y - vector129.Y;
					num1142 += Main.npc[golemBoss].velocity.X;
					num1143 += Main.npc[golemBoss].velocity.Y;
					num1143 -= 9f;
					num1142 = ((type != 247) ? (num1142 + 78f) : (num1142 - 84f));
					float num1144 = (float)Math.Sqrt(num1142 * num1142 + num1143 * num1143);
					if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax)
					{
						knockBackResist = 0f;
						if (num1144 > 700f || collideX || collideY)
						{
							noTileCollide = true;
							this.ai[0] = 0f;
						}
						return;
					}
					bool flag102 = justHit;
					if (flag102)
					{
						for (int num1145 = 0; num1145 < 200; num1145++)
						{
							if (!Main.npc[num1145].active || Main.npc[num1145].type != 246)
							{
								continue;
							}
							if (Main.npc[num1145].life < Main.npc[num1145].lifeMax / 2)
							{
								if (knockBackResist == 0f)
								{
									flag102 = false;
								}
								knockBackResist = 0f;
							}
							break;
						}
					}
					if (num1144 > 600f || collideX || collideY || flag102)
					{
						noTileCollide = true;
						this.ai[0] = 0f;
					}
				}
				else
				{
					if (this.ai[0] != 3f)
					{
						return;
					}
					noTileCollide = true;
					float num1146 = 12f;
					float num1147 = 0.4f;
					Vector2 vector130 = new Vector2(base.Center.X, base.Center.Y);
					float num1148 = Main.player[target].Center.X - vector130.X;
					float num1149 = Main.player[target].Center.Y - vector130.Y;
					float num1150 = (float)Math.Sqrt(num1148 * num1148 + num1149 * num1149);
					num1150 = num1146 / num1150;
					num1148 *= num1150;
					num1149 *= num1150;
					if (base.velocity.X < num1148)
					{
						base.velocity.X += num1147;
						if (base.velocity.X < 0f && num1148 > 0f)
						{
							base.velocity.X += num1147 * 2f;
						}
					}
					else if (base.velocity.X > num1148)
					{
						base.velocity.X -= num1147;
						if (base.velocity.X > 0f && num1148 < 0f)
						{
							base.velocity.X -= num1147 * 2f;
						}
					}
					if (base.velocity.Y < num1149)
					{
						base.velocity.Y += num1147;
						if (base.velocity.Y < 0f && num1149 > 0f)
						{
							base.velocity.Y += num1147 * 2f;
						}
					}
					else if (base.velocity.Y > num1149)
					{
						base.velocity.Y -= num1147;
						if (base.velocity.Y > 0f && num1149 < 0f)
						{
							base.velocity.Y -= num1147 * 2f;
						}
					}
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X);
					if (type == 247)
					{
						rotation = (float)Math.Atan2(0f - base.velocity.Y, 0f - base.velocity.X);
					}
				}
			}
			else if (aiStyle == 48)
			{
				bool flag103 = false;
				if (!Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
				{
					noTileCollide = true;
					flag103 = true;
				}
				else
				{
					noTileCollide = false;
				}
				if (golemBoss < 0)
				{
					StrikeNPCNoInteraction(9999, 0f, 0);
					return;
				}
				TargetClosest();
				float num1151 = 7f;
				float num1152 = 0.05f;
				Vector2 vector131 = new Vector2(base.Center.X, base.Center.Y);
				float num1153 = Main.player[target].Center.X - vector131.X;
				float num1154 = Main.player[target].Center.Y - vector131.Y - 300f;
				float num1155 = (float)Math.Sqrt(num1153 * num1153 + num1154 * num1154);
				num1155 = num1151 / num1155;
				num1153 *= num1155;
				num1154 *= num1155;
				if (base.velocity.X < num1153)
				{
					base.velocity.X += num1152;
					if (base.velocity.X < 0f && num1153 > 0f)
					{
						base.velocity.X += num1152;
					}
				}
				else if (base.velocity.X > num1153)
				{
					base.velocity.X -= num1152;
					if (base.velocity.X > 0f && num1153 < 0f)
					{
						base.velocity.X -= num1152;
					}
				}
				if (base.velocity.Y < num1154)
				{
					base.velocity.Y += num1152;
					if (base.velocity.Y < 0f && num1154 > 0f)
					{
						base.velocity.Y += num1152;
					}
				}
				else if (base.velocity.Y > num1154)
				{
					base.velocity.Y -= num1152;
					if (base.velocity.Y > 0f && num1154 < 0f)
					{
						base.velocity.Y -= num1152;
					}
				}
				this.ai[1] += 1f;
				if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax * 0.8)
				{
					this.ai[1] += 1f;
				}
				if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax * 0.6)
				{
					this.ai[1] += 1f;
				}
				if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax * 0.2)
				{
					this.ai[1] += 1f;
				}
				if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax * 0.1)
				{
					this.ai[1] += 1f;
				}
				int num1156 = 360;
				if (this.ai[1] < 20f || this.ai[1] > (float)(num1156 - 20))
				{
					localAI[0] = 1f;
				}
				else
				{
					localAI[0] = 0f;
				}
				if (flag103)
				{
					this.ai[1] = 20f;
				}
				if (this.ai[1] >= (float)num1156)
				{
					TargetClosest();
					this.ai[1] = 0f;
					Vector2 vector132 = new Vector2(base.Center.X, base.Center.Y - 10f);
					float num1157 = 8f;
					int num1158 = 20;
					int num1159 = 258;
					float num1160 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector132.X;
					float num1161 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector132.Y;
					float num1162 = (float)Math.Sqrt(num1160 * num1160 + num1161 * num1161);
					num1162 = num1157 / num1162;
					num1160 *= num1162;
					num1161 *= num1162;
					if (Main.netMode != 1)
					{
						Projectile.NewProjectile(vector132.X, vector132.Y, num1160, num1161, num1159, num1158, 0f, Main.myPlayer);
					}
				}
				this.ai[2] += 1f;
				if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax / 1.25)
				{
					this.ai[2] += 1f;
				}
				if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax / 1.5)
				{
					this.ai[2] += 1f;
				}
				if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax / 2)
				{
					this.ai[2] += 1f;
				}
				if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax / 3)
				{
					this.ai[2] += 1f;
				}
				if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax / 4)
				{
					this.ai[2] += 1f;
				}
				if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax / 5)
				{
					this.ai[2] += 1f;
				}
				if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax / 6)
				{
					this.ai[2] += 1f;
				}
				if (!Collision.CanHit(Main.npc[golemBoss].Center, 1, 1, Main.player[target].Center, 1, 1))
				{
					this.ai[2] += 4f;
				}
				if (!(this.ai[2] > (float)(100 + Main.rand.Next(4800))))
				{
					return;
				}
				this.ai[2] = 0f;
				for (int num1163 = 0; num1163 < 2; num1163++)
				{
					Vector2 vector133 = new Vector2(base.Center.X, base.Center.Y - 50f);
					switch (num1163)
					{
					case 0:
						vector133.X -= 14f;
						break;
					case 1:
						vector133.X += 14f;
						break;
					}
					float num1164 = 11f;
					int num1165 = 24;
					int num1166 = 259;
					if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax * 0.5)
					{
						num1165++;
						num1164 += 0.25f;
					}
					if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax * 0.4)
					{
						num1165++;
						num1164 += 0.25f;
					}
					if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax * 0.3)
					{
						num1165++;
						num1164 += 0.25f;
					}
					if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax * 0.2)
					{
						num1165++;
						num1164 += 0.25f;
					}
					if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax * 0.1)
					{
						num1165++;
						num1164 += 0.25f;
					}
					float num1167 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector133.X;
					float num1168 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector133.Y;
					float num1169 = (float)Math.Sqrt(num1167 * num1167 + num1168 * num1168);
					num1169 = num1164 / num1169;
					num1167 *= num1169;
					num1168 *= num1169;
					vector133.X += num1167 * 3f;
					vector133.Y += num1168 * 3f;
					if (Main.netMode != 1)
					{
						int num1170 = Projectile.NewProjectile(vector133.X, vector133.Y, num1167, num1168, num1166, num1165, 0f, Main.myPlayer);
						Main.projectile[num1170].timeLeft = 300;
					}
				}
			}
			else if (aiStyle == 49)
			{
				noGravity = true;
				TargetClosest();
				float num1171 = 4f;
				float num1172 = 0.25f;
				Vector2 vector134 = new Vector2(base.Center.X, base.Center.Y);
				float num1173 = Main.player[target].Center.X - vector134.X;
				float num1174 = Main.player[target].Center.Y - vector134.Y - 200f;
				float num1175 = (float)Math.Sqrt(num1173 * num1173 + num1174 * num1174);
				if (num1175 < 20f)
				{
					num1173 = base.velocity.X;
					num1174 = base.velocity.Y;
				}
				else
				{
					num1175 = num1171 / num1175;
					num1173 *= num1175;
					num1174 *= num1175;
				}
				if (base.velocity.X < num1173)
				{
					base.velocity.X += num1172;
					if (base.velocity.X < 0f && num1173 > 0f)
					{
						base.velocity.X += num1172 * 2f;
					}
				}
				else if (base.velocity.X > num1173)
				{
					base.velocity.X -= num1172;
					if (base.velocity.X > 0f && num1173 < 0f)
					{
						base.velocity.X -= num1172 * 2f;
					}
				}
				if (base.velocity.Y < num1174)
				{
					base.velocity.Y += num1172;
					if (base.velocity.Y < 0f && num1174 > 0f)
					{
						base.velocity.Y += num1172 * 2f;
					}
				}
				else if (base.velocity.Y > num1174)
				{
					base.velocity.Y -= num1172;
					if (base.velocity.Y > 0f && num1174 < 0f)
					{
						base.velocity.Y -= num1172 * 2f;
					}
				}
				if (base.position.X + (float)width > Main.player[target].position.X && base.position.X < Main.player[target].position.X + (float)Main.player[target].width && base.position.Y + (float)height < Main.player[target].position.Y && Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height) && Main.netMode != 1)
				{
					this.ai[0] += 1f;
					if (this.ai[0] > 8f)
					{
						this.ai[0] = 0f;
						int num1176 = (int)(base.position.X + 10f + (float)Main.rand.Next(width - 20));
						int num1177 = (int)(base.position.Y + (float)height + 4f);
						Projectile.NewProjectile(num1176, num1177, 0f, 5f, 264, 20, 0f, Main.myPlayer);
					}
				}
			}
			else if (aiStyle == 50)
			{
				if (timeLeft > 5)
				{
					timeLeft = 5;
				}
				noTileCollide = true;
				base.velocity.Y += 0.02f;
				if (base.velocity.Y < 0f && !Main.expertMode)
				{
					base.velocity.Y *= 0.99f;
				}
				if (base.velocity.Y > 1f)
				{
					base.velocity.Y = 1f;
				}
				TargetClosest();
				if (base.position.X + (float)width < Main.player[target].position.X)
				{
					if (base.velocity.X < 0f)
					{
						base.velocity.X *= 0.98f;
					}
					if (Main.expertMode && base.velocity.X < 0f)
					{
						base.velocity.X *= 0.98f;
					}
					base.velocity.X += 0.1f;
					if (Main.expertMode)
					{
						base.velocity.X += 0.1f;
					}
				}
				else if (base.position.X > Main.player[target].position.X + (float)Main.player[target].width)
				{
					if (base.velocity.X > 0f)
					{
						base.velocity.X *= 0.98f;
					}
					if (Main.expertMode && base.velocity.X > 0f)
					{
						base.velocity.X *= 0.98f;
					}
					base.velocity.X -= 0.1f;
					if (Main.expertMode)
					{
						base.velocity.X += 0.1f;
					}
				}
				if (base.velocity.X > 5f || base.velocity.X < -5f)
				{
					base.velocity.X *= 0.97f;
				}
				rotation = base.velocity.X * 0.2f;
			}
			else if (aiStyle == 51)
			{
				bool flag104 = false;
				bool flag105 = false;
				TargetClosest();
				if (Main.player[target].dead)
				{
					flag105 = true;
					flag104 = true;
				}
				if (Main.netMode != 1)
				{
					int num1178 = 6000;
					if (Math.Abs(base.Center.X - Main.player[target].Center.X) + Math.Abs(base.Center.Y - Main.player[target].Center.Y) > (float)num1178)
					{
						active = false;
						life = 0;
						if (Main.netMode == 2)
						{
							NetMessage.SendData(23, -1, -1, "", base.whoAmI);
						}
					}
				}
				plantBoss = base.whoAmI;
				if (localAI[0] == 0f && Main.netMode != 1)
				{
					localAI[0] = 1f;
					NewNPC((int)base.Center.X, (int)base.Center.Y, 263, base.whoAmI);
					NewNPC((int)base.Center.X, (int)base.Center.Y, 263, base.whoAmI);
					NewNPC((int)base.Center.X, (int)base.Center.Y, 263, base.whoAmI);
				}
				int[] array3 = new int[3];
				float num1179 = 0f;
				float num1180 = 0f;
				int num1181 = 0;
				for (int num1182 = 0; num1182 < 200; num1182++)
				{
					if (Main.npc[num1182].active && Main.npc[num1182].aiStyle == 52)
					{
						num1179 += Main.npc[num1182].Center.X;
						num1180 += Main.npc[num1182].Center.Y;
						array3[num1181] = num1182;
						num1181++;
						if (num1181 > 2)
						{
							break;
						}
					}
				}
				num1179 /= (float)num1181;
				num1180 /= (float)num1181;
				float num1183 = 2.5f;
				float num1184 = 0.025f;
				if (life < lifeMax / 2)
				{
					num1183 = 5f;
					num1184 = 0.05f;
				}
				if (life < lifeMax / 4)
				{
					num1183 = 7f;
				}
				if (!Main.player[target].ZoneJungle || (double)Main.player[target].position.Y < Main.worldSurface * 16.0 || Main.player[target].position.Y > (float)((Main.maxTilesY - 200) * 16))
				{
					flag104 = true;
					num1183 += 8f;
					num1184 = 0.15f;
				}
				if (Main.expertMode)
				{
					num1183 += 1f;
					num1183 *= 1.1f;
					num1184 += 0.01f;
					num1184 *= 1.1f;
				}
				Vector2 vector135 = new Vector2(num1179, num1180);
				float num1185 = Main.player[target].Center.X - vector135.X;
				float num1186 = Main.player[target].Center.Y - vector135.Y;
				if (flag105)
				{
					num1186 *= -1f;
					num1185 *= -1f;
					num1183 += 8f;
				}
				float num1187 = (float)Math.Sqrt(num1185 * num1185 + num1186 * num1186);
				int num1188 = 500;
				if (flag104)
				{
					num1188 += 350;
				}
				if (Main.expertMode)
				{
					num1188 += 150;
				}
				if (num1187 >= (float)num1188)
				{
					num1187 = (float)num1188 / num1187;
					num1185 *= num1187;
					num1186 *= num1187;
				}
				num1179 += num1185;
				num1180 += num1186;
				vector135 = new Vector2(base.Center.X, base.Center.Y);
				num1185 = num1179 - vector135.X;
				num1186 = num1180 - vector135.Y;
				num1187 = (float)Math.Sqrt(num1185 * num1185 + num1186 * num1186);
				if (num1187 < num1183)
				{
					num1185 = base.velocity.X;
					num1186 = base.velocity.Y;
				}
				else
				{
					num1187 = num1183 / num1187;
					num1185 *= num1187;
					num1186 *= num1187;
				}
				if (base.velocity.X < num1185)
				{
					base.velocity.X += num1184;
					if (base.velocity.X < 0f && num1185 > 0f)
					{
						base.velocity.X += num1184 * 2f;
					}
				}
				else if (base.velocity.X > num1185)
				{
					base.velocity.X -= num1184;
					if (base.velocity.X > 0f && num1185 < 0f)
					{
						base.velocity.X -= num1184 * 2f;
					}
				}
				if (base.velocity.Y < num1186)
				{
					base.velocity.Y += num1184;
					if (base.velocity.Y < 0f && num1186 > 0f)
					{
						base.velocity.Y += num1184 * 2f;
					}
				}
				else if (base.velocity.Y > num1186)
				{
					base.velocity.Y -= num1184;
					if (base.velocity.Y > 0f && num1186 < 0f)
					{
						base.velocity.Y -= num1184 * 2f;
					}
				}
				Vector2 vector136 = new Vector2(base.Center.X, base.Center.Y);
				float num1189 = Main.player[target].Center.X - vector136.X;
				float num1190 = Main.player[target].Center.Y - vector136.Y;
				rotation = (float)Math.Atan2(num1190, num1189) + 1.57f;
				if (life > lifeMax / 2)
				{
					defense = 36;
					damage = (int)(50f * Main.damageMultiplier);
					if (flag104)
					{
						defense *= 2;
						damage *= 2;
					}
					if (Main.netMode == 1)
					{
						return;
					}
					localAI[1] += 1f;
					if ((double)life < (double)lifeMax * 0.9)
					{
						localAI[1] += 1f;
					}
					if ((double)life < (double)lifeMax * 0.8)
					{
						localAI[1] += 1f;
					}
					if ((double)life < (double)lifeMax * 0.7)
					{
						localAI[1] += 1f;
					}
					if ((double)life < (double)lifeMax * 0.6)
					{
						localAI[1] += 1f;
					}
					if (flag104)
					{
						localAI[1] += 3f;
					}
					if (Main.expertMode)
					{
						localAI[1] += 1f;
					}
					if (Main.expertMode && justHit && Main.rand.Next(2) == 0)
					{
						localAI[3] = 1f;
					}
					if (!(localAI[1] > 80f))
					{
						return;
					}
					localAI[1] = 0f;
					bool flag106 = Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height);
					if (localAI[3] > 0f)
					{
						flag106 = true;
						localAI[3] = 0f;
					}
					if (flag106)
					{
						Vector2 vector137 = new Vector2(base.Center.X, base.Center.Y);
						float num1191 = 15f;
						if (Main.expertMode)
						{
							num1191 = 17f;
						}
						float num1192 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector137.X;
						float num1193 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector137.Y;
						float num1194 = (float)Math.Sqrt(num1192 * num1192 + num1193 * num1193);
						num1194 = num1191 / num1194;
						num1192 *= num1194;
						num1193 *= num1194;
						int num1195 = 22;
						int num1196 = 275;
						int maxValue6 = 4;
						int maxValue7 = 8;
						if (Main.expertMode)
						{
							maxValue6 = 2;
							maxValue7 = 6;
						}
						if ((double)life < (double)lifeMax * 0.8 && Main.rand.Next(maxValue6) == 0)
						{
							num1195 = 27;
							localAI[1] = -30f;
							num1196 = 276;
						}
						else if ((double)life < (double)lifeMax * 0.8 && Main.rand.Next(maxValue7) == 0)
						{
							num1195 = 31;
							localAI[1] = -120f;
							num1196 = 277;
						}
						if (flag104)
						{
							num1195 *= 2;
						}
						if (Main.expertMode)
						{
							num1195 = (int)((double)num1195 * 0.9);
						}
						vector137.X += num1192 * 3f;
						vector137.Y += num1193 * 3f;
						int num1197 = Projectile.NewProjectile(vector137.X, vector137.Y, num1192, num1193, num1196, num1195, 0f, Main.myPlayer);
						if (num1196 != 277)
						{
							Main.projectile[num1197].timeLeft = 300;
						}
					}
					return;
				}
				defense = 10;
				damage = (int)(70f * Main.damageMultiplier);
				if (flag104)
				{
					defense *= 4;
					damage *= 2;
				}
				if (Main.netMode != 1)
				{
					if (localAI[0] == 1f)
					{
						localAI[0] = 2f;
						for (int num1198 = 0; num1198 < 8; num1198++)
						{
							NewNPC((int)base.Center.X, (int)base.Center.Y, 264, base.whoAmI);
						}
						if (Main.expertMode)
						{
							for (int num1199 = 0; num1199 < 200; num1199++)
							{
								if (Main.npc[num1199].active && Main.npc[num1199].aiStyle == 52)
								{
									for (int num1200 = 0; num1200 < 3; num1200++)
									{
										int num1201 = NewNPC((int)base.Center.X, (int)base.Center.Y, 264, base.whoAmI);
										Main.npc[num1201].ai[3] = num1199 + 1;
									}
								}
							}
						}
					}
					else if (Main.expertMode && Main.rand.Next(60) == 0)
					{
						int num1202 = 0;
						for (int num1203 = 0; num1203 < 200; num1203++)
						{
							if (Main.npc[num1203].active && Main.npc[num1203].type == 264 && Main.npc[num1203].ai[3] == 0f)
							{
								num1202++;
							}
						}
						if (num1202 < 8 && Main.rand.Next((num1202 + 1) * 10) <= 1)
						{
							NewNPC((int)base.Center.X, (int)base.Center.Y, 264, base.whoAmI);
						}
					}
				}
				if (localAI[2] == 0f)
				{
					Gore.NewGore(new Vector2(base.position.X + (float)Main.rand.Next(width), base.position.Y + (float)Main.rand.Next(height)), base.velocity, 378, scale);
					Gore.NewGore(new Vector2(base.position.X + (float)Main.rand.Next(width), base.position.Y + (float)Main.rand.Next(height)), base.velocity, 379, scale);
					Gore.NewGore(new Vector2(base.position.X + (float)Main.rand.Next(width), base.position.Y + (float)Main.rand.Next(height)), base.velocity, 380, scale);
					localAI[2] = 1f;
				}
				localAI[1] += 1f;
				if ((double)life < (double)lifeMax * 0.4)
				{
					localAI[1] += 1f;
				}
				if ((double)life < (double)lifeMax * 0.3)
				{
					localAI[1] += 1f;
				}
				if ((double)life < (double)lifeMax * 0.2)
				{
					localAI[1] += 1f;
				}
				if ((double)life < (double)lifeMax * 0.1)
				{
					localAI[1] += 1f;
				}
				if (localAI[1] >= 350f)
				{
					float num1204 = 8f;
					Vector2 vector138 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num1205 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector138.X + (float)Main.rand.Next(-10, 11);
					float num1206 = Math.Abs(num1205 * 0.2f);
					float num1207 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector138.Y + (float)Main.rand.Next(-10, 11);
					if (num1207 > 0f)
					{
						num1206 = 0f;
					}
					num1207 -= num1206;
					float num1208 = (float)Math.Sqrt(num1205 * num1205 + num1207 * num1207);
					num1208 = num1204 / num1208;
					num1205 *= num1208;
					num1207 *= num1208;
					int num1209 = NewNPC((int)base.Center.X, (int)base.Center.Y, 265);
					Main.npc[num1209].velocity.X = num1205;
					Main.npc[num1209].velocity.Y = num1207;
					Main.npc[num1209].netUpdate = true;
					localAI[1] = 0f;
				}
			}
			else if (aiStyle == 52)
			{
				bool flag107 = false;
				bool flag108 = false;
				if (plantBoss < 0)
				{
					StrikeNPCNoInteraction(9999, 0f, 0);
					netUpdate = true;
					return;
				}
				if (Main.player[Main.npc[plantBoss].target].dead)
				{
					flag108 = true;
				}
				if ((plantBoss != -1 && !Main.player[Main.npc[plantBoss].target].ZoneJungle) || (double)Main.player[Main.npc[plantBoss].target].position.Y < Main.worldSurface * 16.0 || Main.player[Main.npc[plantBoss].target].position.Y > (float)((Main.maxTilesY - 200) * 16) || flag108)
				{
					localAI[0] -= 4f;
					flag107 = true;
				}
				if (Main.netMode == 1)
				{
					if (this.ai[0] == 0f)
					{
						this.ai[0] = (int)(base.Center.X / 16f);
					}
					if (this.ai[1] == 0f)
					{
						this.ai[1] = (int)(base.Center.X / 16f);
					}
				}
				if (Main.netMode != 1)
				{
					if (this.ai[0] == 0f || this.ai[1] == 0f)
					{
						localAI[0] = 0f;
					}
					localAI[0] -= 1f;
					if (Main.npc[plantBoss].life < Main.npc[plantBoss].lifeMax / 2)
					{
						localAI[0] -= 2f;
					}
					if (Main.npc[plantBoss].life < Main.npc[plantBoss].lifeMax / 4)
					{
						localAI[0] -= 2f;
					}
					if (flag107)
					{
						localAI[0] -= 6f;
					}
					if (!flag108 && localAI[0] <= 0f && this.ai[0] != 0f)
					{
						for (int num1210 = 0; num1210 < 200; num1210++)
						{
							if (num1210 != base.whoAmI && Main.npc[num1210].active && Main.npc[num1210].type == type && (Main.npc[num1210].velocity.X != 0f || Main.npc[num1210].velocity.Y != 0f))
							{
								localAI[0] = Main.rand.Next(60, 300);
							}
						}
					}
					if (localAI[0] <= 0f)
					{
						localAI[0] = Main.rand.Next(300, 600);
						bool flag109 = false;
						int num1211 = 0;
						while (!flag109 && num1211 <= 1000)
						{
							num1211++;
							int num1212 = (int)(Main.player[Main.npc[plantBoss].target].Center.X / 16f);
							int num1213 = (int)(Main.player[Main.npc[plantBoss].target].Center.Y / 16f);
							if (this.ai[0] == 0f)
							{
								num1212 = (int)((Main.player[Main.npc[plantBoss].target].Center.X + Main.npc[plantBoss].Center.X) / 32f);
								num1213 = (int)((Main.player[Main.npc[plantBoss].target].Center.Y + Main.npc[plantBoss].Center.Y) / 32f);
							}
							if (flag108)
							{
								num1212 = (int)Main.npc[plantBoss].position.X / 16;
								num1213 = (int)(Main.npc[plantBoss].position.Y + 400f) / 16;
							}
							int num1214 = 20;
							num1214 += (int)(100f * ((float)num1211 / 1000f));
							int num1215 = num1212 + Main.rand.Next(-num1214, num1214 + 1);
							int num1216 = num1213 + Main.rand.Next(-num1214, num1214 + 1);
							if (Main.npc[plantBoss].life < Main.npc[plantBoss].lifeMax / 2 && Main.rand.Next(6) == 0)
							{
								TargetClosest();
								int num1217 = (int)(Main.player[target].Center.X / 16f);
								int num1218 = (int)(Main.player[target].Center.Y / 16f);
								if (Main.tile[num1217, num1218].wall > 0)
								{
									num1215 = num1217;
									num1216 = num1218;
								}
							}
							try
							{
								if (WorldGen.SolidTile(num1215, num1216) || (Main.tile[num1215, num1216].wall > 0 && (num1211 > 500 || Main.npc[plantBoss].life < Main.npc[plantBoss].lifeMax / 2)))
								{
									flag109 = true;
									this.ai[0] = num1215;
									this.ai[1] = num1216;
									netUpdate = true;
								}
							}
							catch
							{
							}
						}
					}
				}
				if (this.ai[0] > 0f && this.ai[1] > 0f)
				{
					float num1219 = 6f;
					if (Main.npc[plantBoss].life < Main.npc[plantBoss].lifeMax / 2)
					{
						num1219 = 8f;
					}
					if (Main.npc[plantBoss].life < Main.npc[plantBoss].lifeMax / 4)
					{
						num1219 = 10f;
					}
					if (Main.expertMode)
					{
						num1219 += 1f;
					}
					if (Main.expertMode && Main.npc[plantBoss].life < Main.npc[plantBoss].lifeMax / 2)
					{
						num1219 += 1f;
					}
					if (flag107)
					{
						num1219 *= 2f;
					}
					if (flag108)
					{
						num1219 *= 2f;
					}
					Vector2 vector139 = new Vector2(base.Center.X, base.Center.Y);
					float num1220 = this.ai[0] * 16f - 8f - vector139.X;
					float num1221 = this.ai[1] * 16f - 8f - vector139.Y;
					float num1222 = (float)Math.Sqrt(num1220 * num1220 + num1221 * num1221);
					if (num1222 < 12f + num1219)
					{
						base.velocity.X = num1220;
						base.velocity.Y = num1221;
					}
					else
					{
						num1222 = num1219 / num1222;
						base.velocity.X = num1220 * num1222;
						base.velocity.Y = num1221 * num1222;
					}
					Vector2 vector140 = new Vector2(base.Center.X, base.Center.Y);
					float num1223 = Main.npc[plantBoss].Center.X - vector140.X;
					float num1224 = Main.npc[plantBoss].Center.Y - vector140.Y;
					rotation = (float)Math.Atan2(num1224, num1223) - 1.57f;
				}
			}
			else if (aiStyle == 53)
			{
				if (plantBoss < 0)
				{
					StrikeNPCNoInteraction(9999, 0f, 0);
					netUpdate = true;
					return;
				}
				int num1225 = plantBoss;
				if (this.ai[3] > 0f)
				{
					num1225 = (int)this.ai[3] - 1;
				}
				if (Main.netMode != 1)
				{
					localAI[0] -= 1f;
					if (localAI[0] <= 0f)
					{
						localAI[0] = Main.rand.Next(120, 480);
						this.ai[0] = Main.rand.Next(-100, 101);
						this.ai[1] = Main.rand.Next(-100, 101);
						netUpdate = true;
					}
				}
				TargetClosest();
				float num1226 = 0.2f;
				float num1227 = 200f;
				if ((double)Main.npc[plantBoss].life < (double)Main.npc[plantBoss].lifeMax * 0.25)
				{
					num1227 += 100f;
				}
				if ((double)Main.npc[plantBoss].life < (double)Main.npc[plantBoss].lifeMax * 0.1)
				{
					num1227 += 100f;
				}
				if (Main.expertMode)
				{
					float num1228 = 1f - (float)life / (float)lifeMax;
					num1227 += num1228 * 300f;
					num1226 += 0.3f;
				}
				if (!Main.npc[num1225].active || plantBoss < 0)
				{
					active = false;
					return;
				}
				float num1229 = Main.npc[num1225].position.X + (float)(Main.npc[num1225].width / 2);
				float num1230 = Main.npc[num1225].position.Y + (float)(Main.npc[num1225].height / 2);
				Vector2 vector141 = new Vector2(num1229, num1230);
				float num1231 = num1229 + this.ai[0];
				float num1232 = num1230 + this.ai[1];
				float num1233 = num1231 - vector141.X;
				float num1234 = num1232 - vector141.Y;
				float num1235 = (float)Math.Sqrt(num1233 * num1233 + num1234 * num1234);
				num1235 = num1227 / num1235;
				num1233 *= num1235;
				num1234 *= num1235;
				if (base.position.X < num1229 + num1233)
				{
					base.velocity.X += num1226;
					if (base.velocity.X < 0f && num1233 > 0f)
					{
						base.velocity.X *= 0.9f;
					}
				}
				else if (base.position.X > num1229 + num1233)
				{
					base.velocity.X -= num1226;
					if (base.velocity.X > 0f && num1233 < 0f)
					{
						base.velocity.X *= 0.9f;
					}
				}
				if (base.position.Y < num1230 + num1234)
				{
					base.velocity.Y += num1226;
					if (base.velocity.Y < 0f && num1234 > 0f)
					{
						base.velocity.Y *= 0.9f;
					}
				}
				else if (base.position.Y > num1230 + num1234)
				{
					base.velocity.Y -= num1226;
					if (base.velocity.Y > 0f && num1234 < 0f)
					{
						base.velocity.Y *= 0.9f;
					}
				}
				if (base.velocity.X > 8f)
				{
					base.velocity.X = 8f;
				}
				if (base.velocity.X < -8f)
				{
					base.velocity.X = -8f;
				}
				if (base.velocity.Y > 8f)
				{
					base.velocity.Y = 8f;
				}
				if (base.velocity.Y < -8f)
				{
					base.velocity.Y = -8f;
				}
				if (num1233 > 0f)
				{
					spriteDirection = 1;
					rotation = (float)Math.Atan2(num1234, num1233);
				}
				if (num1233 < 0f)
				{
					spriteDirection = -1;
					rotation = (float)Math.Atan2(num1234, num1233) + 3.14f;
				}
			}
			else if (aiStyle == 54)
			{
				crimsonBoss = base.whoAmI;
				if (Main.netMode != 1 && localAI[0] == 0f)
				{
					localAI[0] = 1f;
					for (int num1236 = 0; num1236 < 20; num1236++)
					{
						float x2 = base.Center.X;
						float y3 = base.Center.Y;
						x2 += (float)Main.rand.Next(-width, width);
						y3 += (float)Main.rand.Next(-height, height);
						int num1237 = NewNPC((int)x2, (int)y3, 267);
						Main.npc[num1237].velocity = new Vector2((float)Main.rand.Next(-30, 31) * 0.1f, (float)Main.rand.Next(-30, 31) * 0.1f);
						Main.npc[num1237].netUpdate = true;
					}
				}
				if (Main.netMode != 1)
				{
					TargetClosest();
					int num1238 = 6000;
					if (Math.Abs(base.Center.X - Main.player[target].Center.X) + Math.Abs(base.Center.Y - Main.player[target].Center.Y) > (float)num1238)
					{
						active = false;
						life = 0;
						if (Main.netMode == 2)
						{
							NetMessage.SendData(23, -1, -1, "", base.whoAmI);
						}
					}
				}
				if (this.ai[0] < 0f)
				{
					if (localAI[2] == 0f)
					{
						Main.PlaySound(3, (int)base.position.X, (int)base.position.Y);
						localAI[2] = 1f;
						Gore.NewGore(base.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 392);
						Gore.NewGore(base.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 393);
						Gore.NewGore(base.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 394);
						Gore.NewGore(base.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 395);
						for (int num1239 = 0; num1239 < 20; num1239++)
						{
							Dust.NewDust(base.position, width, height, 5, (float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f);
						}
						Main.PlaySound(15, (int)base.position.X, (int)base.position.Y, 0);
					}
					dontTakeDamage = false;
					knockBackResist = 0.5f;
					if (Main.expertMode)
					{
						knockBackResist *= Main.expertKnockBack;
					}
					TargetClosest();
					Vector2 vector142 = new Vector2(base.Center.X, base.Center.Y);
					float num1240 = Main.player[target].Center.X - vector142.X;
					float num1241 = Main.player[target].Center.Y - vector142.Y;
					float num1242 = (float)Math.Sqrt(num1240 * num1240 + num1241 * num1241);
					float num1243 = 8f;
					num1242 = num1243 / num1242;
					num1240 *= num1242;
					num1241 *= num1242;
					base.velocity.X = (base.velocity.X * 50f + num1240) / 51f;
					base.velocity.Y = (base.velocity.Y * 50f + num1241) / 51f;
					if (this.ai[0] == -1f)
					{
						if (Main.netMode == 1)
						{
							return;
						}
						localAI[1] += 1f;
						if (justHit)
						{
							localAI[1] -= Main.rand.Next(5);
						}
						int num1244 = 60 + Main.rand.Next(120);
						if (Main.netMode != 0)
						{
							num1244 += Main.rand.Next(30, 90);
						}
						if (!(localAI[1] >= (float)num1244))
						{
							return;
						}
						localAI[1] = 0f;
						TargetClosest();
						int num1245 = 0;
						int num1246;
						int num1247;
						while (true)
						{
							num1245++;
							num1246 = (int)Main.player[target].Center.X / 16;
							num1247 = (int)Main.player[target].Center.Y / 16;
							num1246 = ((Main.rand.Next(2) != 0) ? (num1246 - Main.rand.Next(7, 13)) : (num1246 + Main.rand.Next(7, 13)));
							num1247 = ((Main.rand.Next(2) != 0) ? (num1247 - Main.rand.Next(7, 13)) : (num1247 + Main.rand.Next(7, 13)));
							if (!WorldGen.SolidTile(num1246, num1247))
							{
								break;
							}
							if (num1245 > 100)
							{
								return;
							}
						}
						this.ai[3] = 0f;
						this.ai[0] = -2f;
						this.ai[1] = num1246;
						this.ai[2] = num1247;
						netUpdate = true;
						netSpam = 0;
					}
					else if (this.ai[0] == -2f)
					{
						base.velocity *= 0.9f;
						if (Main.netMode != 0)
						{
							this.ai[3] += 15f;
						}
						else
						{
							this.ai[3] += 25f;
						}
						if (this.ai[3] >= 255f)
						{
							this.ai[3] = 255f;
							base.position.X = this.ai[1] * 16f - (float)(width / 2);
							base.position.Y = this.ai[2] * 16f - (float)(height / 2);
							Main.PlaySound(2, (int)base.Center.X, (int)base.Center.Y, 8);
							this.ai[0] = -3f;
							netUpdate = true;
							netSpam = 0;
						}
						alpha = (int)this.ai[3];
					}
					else if (this.ai[0] == -3f)
					{
						if (Main.netMode != 0)
						{
							this.ai[3] -= 15f;
						}
						else
						{
							this.ai[3] -= 25f;
						}
						if (this.ai[3] <= 0f)
						{
							this.ai[3] = 0f;
							this.ai[0] = -1f;
							netUpdate = true;
							netSpam = 0;
						}
						alpha = (int)this.ai[3];
					}
					return;
				}
				TargetClosest();
				Vector2 vector143 = new Vector2(base.Center.X, base.Center.Y);
				float num1248 = Main.player[target].Center.X - vector143.X;
				float num1249 = Main.player[target].Center.Y - vector143.Y;
				float num1250 = (float)Math.Sqrt(num1248 * num1248 + num1249 * num1249);
				float num1251 = 1f;
				if (num1250 < num1251)
				{
					base.velocity.X = num1248;
					base.velocity.Y = num1249;
				}
				else
				{
					num1250 = num1251 / num1250;
					base.velocity.X = num1248 * num1250;
					base.velocity.Y = num1249 * num1250;
				}
				if (this.ai[0] == 0f)
				{
					if (Main.netMode == 1)
					{
						return;
					}
					int num1252 = 0;
					for (int num1253 = 0; num1253 < 200; num1253++)
					{
						if (Main.npc[num1253].active && Main.npc[num1253].type == 267)
						{
							num1252++;
						}
					}
					if (num1252 == 0)
					{
						this.ai[0] = -1f;
						localAI[1] = 0f;
						alpha = 0;
						netUpdate = true;
					}
					localAI[1] += 1f;
					if (!(localAI[1] >= (float)(120 + Main.rand.Next(300))))
					{
						return;
					}
					localAI[1] = 0f;
					TargetClosest();
					int num1254 = 0;
					int num1255;
					int num1256;
					while (true)
					{
						num1254++;
						num1255 = (int)Main.player[target].Center.X / 16;
						num1256 = (int)Main.player[target].Center.Y / 16;
						num1255 += Main.rand.Next(-50, 51);
						num1256 += Main.rand.Next(-50, 51);
						if (!WorldGen.SolidTile(num1255, num1256) && Collision.CanHit(new Vector2(num1255 * 16, num1256 * 16), 1, 1, Main.player[target].position, Main.player[target].width, Main.player[target].height))
						{
							break;
						}
						if (num1254 > 100)
						{
							return;
						}
					}
					this.ai[0] = 1f;
					this.ai[1] = num1255;
					this.ai[2] = num1256;
					netUpdate = true;
				}
				else if (this.ai[0] == 1f)
				{
					alpha += 5;
					if (alpha >= 255)
					{
						Main.PlaySound(2, (int)base.Center.X, (int)base.Center.Y, 8);
						alpha = 255;
						base.position.X = this.ai[1] * 16f - (float)(width / 2);
						base.position.Y = this.ai[2] * 16f - (float)(height / 2);
						this.ai[0] = 2f;
					}
				}
				else if (this.ai[0] == 2f)
				{
					alpha -= 5;
					if (alpha <= 0)
					{
						alpha = 0;
						this.ai[0] = 0f;
					}
				}
			}
			else if (aiStyle == 55)
			{
				if (crimsonBoss < 0)
				{
					active = false;
					netUpdate = true;
				}
				else if (this.ai[0] == 0f)
				{
					Vector2 vector144 = new Vector2(base.Center.X, base.Center.Y);
					float num1257 = Main.npc[crimsonBoss].Center.X - vector144.X;
					float num1258 = Main.npc[crimsonBoss].Center.Y - vector144.Y;
					float num1259 = (float)Math.Sqrt(num1257 * num1257 + num1258 * num1258);
					if (num1259 > 90f)
					{
						num1259 = 8f / num1259;
						num1257 *= num1259;
						num1258 *= num1259;
						base.velocity.X = (base.velocity.X * 15f + num1257) / 16f;
						base.velocity.Y = (base.velocity.Y * 15f + num1258) / 16f;
						return;
					}
					if (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y) < 8f)
					{
						base.velocity.Y *= 1.05f;
						base.velocity.X *= 1.05f;
					}
					if (Main.netMode != 1 && ((Main.expertMode && Main.rand.Next(100) == 0) || Main.rand.Next(200) == 0))
					{
						TargetClosest();
						vector144 = new Vector2(base.Center.X, base.Center.Y);
						num1257 = Main.player[target].Center.X - vector144.X;
						num1258 = Main.player[target].Center.Y - vector144.Y;
						num1259 = (float)Math.Sqrt(num1257 * num1257 + num1258 * num1258);
						num1259 = 8f / num1259;
						base.velocity.X = num1257 * num1259;
						base.velocity.Y = num1258 * num1259;
						this.ai[0] = 1f;
						netUpdate = true;
					}
				}
				else
				{
					if (Main.expertMode)
					{
						Vector2 value8 = Main.player[target].Center - base.Center;
						value8.Normalize();
						value8 *= 9f;
						base.velocity = (base.velocity * 99f + value8) / 100f;
					}
					Vector2 vector145 = new Vector2(base.Center.X, base.Center.Y);
					float num1260 = Main.npc[crimsonBoss].Center.X - vector145.X;
					float num1261 = Main.npc[crimsonBoss].Center.Y - vector145.Y;
					float num1262 = (float)Math.Sqrt(num1260 * num1260 + num1261 * num1261);
					if (num1262 > 700f || justHit)
					{
						this.ai[0] = 0f;
					}
				}
			}
			else if (aiStyle == 56)
			{
				TargetClosest();
				Vector2 vector146 = new Vector2(base.Center.X, base.Center.Y);
				float num1263 = Main.player[target].Center.X - vector146.X;
				float num1264 = Main.player[target].Center.Y - vector146.Y;
				float num1265 = (float)Math.Sqrt(num1263 * num1263 + num1264 * num1264);
				float num1266 = 12f;
				num1265 = num1266 / num1265;
				num1263 *= num1265;
				num1264 *= num1265;
				base.velocity.X = (base.velocity.X * 100f + num1263) / 101f;
				base.velocity.Y = (base.velocity.Y * 100f + num1264) / 101f;
				rotation = (float)Math.Atan2(num1264, num1263) - 1.57f;
				int num1267 = Dust.NewDust(base.position, width, height, 180);
				Main.dust[num1267].velocity *= 0.1f;
				Main.dust[num1267].scale = 1.3f;
				Main.dust[num1267].noGravity = true;
			}
			else if (aiStyle == 57)
			{
				float num1268 = 2f;
				noGravity = true;
				noTileCollide = true;
				if (!Main.dayTime)
				{
					TargetClosest();
				}
				bool flag110 = false;
				if ((double)life < (double)lifeMax * 0.75)
				{
					num1268 = 3f;
				}
				if ((double)life < (double)lifeMax * 0.5)
				{
					num1268 = 4f;
				}
				if (Main.dayTime)
				{
					if (timeLeft > 10)
					{
						timeLeft = 10;
					}
					num1268 = 8f;
				}
				else if (this.ai[0] == 0f)
				{
					this.ai[1] += 1f;
					if ((double)life < (double)lifeMax * 0.5)
					{
						this.ai[1] += 1f;
					}
					if ((double)life < (double)lifeMax * 0.25)
					{
						this.ai[1] += 1f;
					}
					if (this.ai[1] >= 300f && Main.netMode != 1)
					{
						this.ai[1] = 0f;
						if ((double)life < (double)lifeMax * 0.25 && type != 344)
						{
							this.ai[0] = Main.rand.Next(3, 5);
						}
						else
						{
							this.ai[0] = Main.rand.Next(1, 3);
						}
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 1f)
				{
					if (type == 344)
					{
						flag110 = true;
						this.ai[1] += 1f;
						if (this.ai[1] % 5f == 0f)
						{
							Vector2 vector147 = new Vector2(base.position.X + 20f + (float)Main.rand.Next(width - 40), base.position.Y + 20f + (float)Main.rand.Next(height - 40));
							float num1269 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector147.X;
							float num1270 = Main.player[target].position.Y - vector147.Y;
							num1269 += (float)Main.rand.Next(-50, 51);
							num1270 += (float)Main.rand.Next(-50, 51);
							num1270 -= Math.Abs(num1269) * ((float)Main.rand.Next(0, 21) * 0.01f);
							float num1271 = (float)Math.Sqrt(num1269 * num1269 + num1270 * num1270);
							float num1272 = 12.5f;
							num1271 = num1272 / num1271;
							num1269 *= num1271;
							num1270 *= num1271;
							num1269 *= 1f + (float)Main.rand.Next(-20, 21) * 0.02f;
							num1270 *= 1f + (float)Main.rand.Next(-20, 21) * 0.02f;
							Projectile.NewProjectile(vector147.X, vector147.Y, num1269, num1270, 345, 43, 0f, Main.myPlayer, Main.rand.Next(0, 31));
						}
						if (this.ai[1] >= 180f)
						{
							this.ai[1] = 0f;
							this.ai[0] = 0f;
						}
					}
					else
					{
						flag110 = true;
						this.ai[1] += 1f;
						if (this.ai[1] % 15f == 0f)
						{
							Vector2 vector148 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f + 30f);
							float num1273 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector148.X;
							float num1274 = Main.player[target].position.Y - vector148.Y;
							float num1275 = (float)Math.Sqrt(num1273 * num1273 + num1274 * num1274);
							float num1276 = 10f;
							num1275 = num1276 / num1275;
							num1273 *= num1275;
							num1274 *= num1275;
							num1273 *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
							num1274 *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
							Projectile.NewProjectile(vector148.X, vector148.Y, num1273, num1274, 325, 50, 0f, Main.myPlayer);
						}
						if (this.ai[1] >= 120f)
						{
							this.ai[1] = 0f;
							this.ai[0] = 0f;
						}
					}
				}
				else if (this.ai[0] == 2f)
				{
					if (type == 344)
					{
						flag110 = true;
						this.ai[1] += 1f;
						if (this.ai[1] > 60f && this.ai[1] < 240f && this.ai[1] % 15f == 0f)
						{
							float num1277 = 4.5f;
							Vector2 vector149 = new Vector2(base.position.X + 20f + (float)Main.rand.Next(width - 40), base.position.Y + 60f + (float)Main.rand.Next(height - 80));
							float num1278 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector149.X;
							float num1279 = Main.player[target].position.Y - vector149.Y;
							num1279 -= Math.Abs(num1278) * 0.3f;
							num1277 += Math.Abs(num1278) * 0.004f;
							num1278 += (float)Main.rand.Next(-50, 51);
							num1279 -= (float)Main.rand.Next(50, 201);
							float num1280 = (float)Math.Sqrt(num1278 * num1278 + num1279 * num1279);
							num1280 = num1277 / num1280;
							num1278 *= num1280;
							num1279 *= num1280;
							num1278 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
							num1279 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
							Projectile.NewProjectile(vector149.X, vector149.Y, num1278, num1279, 346, 57, 0f, Main.myPlayer, 0f, Main.rand.Next(2));
						}
						if (this.ai[1] >= 300f)
						{
							this.ai[1] = 0f;
							this.ai[0] = 0f;
						}
					}
					else
					{
						flag110 = true;
						this.ai[1] += 1f;
						if (this.ai[1] > 60f && this.ai[1] < 240f && this.ai[1] % 8f == 0f)
						{
							float num1281 = 10f;
							Vector2 vector150 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f + 30f);
							float num1282 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector150.X;
							float num1283 = Main.player[target].position.Y - vector150.Y;
							num1283 -= Math.Abs(num1282) * 0.3f;
							num1281 += Math.Abs(num1282) * 0.004f;
							if (num1281 > 14f)
							{
								num1281 = 14f;
							}
							num1282 += (float)Main.rand.Next(-50, 51);
							num1283 -= (float)Main.rand.Next(50, 201);
							float num1284 = (float)Math.Sqrt(num1282 * num1282 + num1283 * num1283);
							num1284 = num1281 / num1284;
							num1282 *= num1284;
							num1283 *= num1284;
							num1282 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
							num1283 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
							Projectile.NewProjectile(vector150.X, vector150.Y, num1282, num1283, Main.rand.Next(326, 329), 40, 0f, Main.myPlayer);
						}
						if (this.ai[1] >= 300f)
						{
							this.ai[1] = 0f;
							this.ai[0] = 0f;
						}
					}
				}
				else if (this.ai[0] == 3f)
				{
					num1268 = 4f;
					this.ai[1] += 1f;
					if (this.ai[1] % 30f == 0f)
					{
						Vector2 vector151 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f + 30f);
						float num1285 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector151.X;
						float num1286 = Main.player[target].position.Y - vector151.Y;
						float num1287 = (float)Math.Sqrt(num1285 * num1285 + num1286 * num1286);
						float num1288 = 16f;
						num1287 = num1288 / num1287;
						num1285 *= num1287;
						num1286 *= num1287;
						num1285 *= 1f + (float)Main.rand.Next(-20, 21) * 0.001f;
						num1286 *= 1f + (float)Main.rand.Next(-20, 21) * 0.001f;
						Projectile.NewProjectile(vector151.X, vector151.Y, num1285, num1286, 325, 75, 0f, Main.myPlayer);
					}
					if (this.ai[1] >= 120f)
					{
						this.ai[1] = 0f;
						this.ai[0] = 0f;
					}
				}
				else if (this.ai[0] == 4f)
				{
					num1268 = 4f;
					this.ai[1] += 1f;
					if (this.ai[1] % 10f == 0f)
					{
						float num1289 = 12f;
						Vector2 vector152 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f + 30f);
						float num1290 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector152.X;
						float num1291 = Main.player[target].position.Y - vector152.Y;
						num1291 -= Math.Abs(num1290) * 0.2f;
						num1289 += Math.Abs(num1290) * 0.002f;
						if (num1289 > 16f)
						{
							num1289 = 16f;
						}
						num1290 += (float)Main.rand.Next(-50, 51);
						num1291 -= (float)Main.rand.Next(50, 201);
						float num1292 = (float)Math.Sqrt(num1290 * num1290 + num1291 * num1291);
						num1292 = num1289 / num1292;
						num1290 *= num1292;
						num1291 *= num1292;
						num1290 *= 1f + (float)Main.rand.Next(-30, 31) * 0.005f;
						num1291 *= 1f + (float)Main.rand.Next(-30, 31) * 0.005f;
						Projectile.NewProjectile(vector152.X, vector152.Y, num1290, num1291, Main.rand.Next(326, 329), 50, 0f, Main.myPlayer);
					}
					if (this.ai[1] >= 240f)
					{
						this.ai[1] = 0f;
						this.ai[0] = 0f;
					}
				}
				if (Math.Abs(base.Center.X - Main.player[target].Center.X) < 50f)
				{
					flag110 = true;
				}
				if (flag110)
				{
					base.velocity.X *= 0.9f;
					if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
					{
						base.velocity.X = 0f;
					}
				}
				else
				{
					if (base.direction > 0)
					{
						base.velocity.X = (base.velocity.X * 20f + num1268) / 21f;
					}
					if (base.direction < 0)
					{
						base.velocity.X = (base.velocity.X * 20f - num1268) / 21f;
					}
				}
				int num1293 = 80;
				int num1294 = 20;
				Vector2 position8 = new Vector2(base.Center.X - (float)(num1293 / 2), base.position.Y + (float)height - (float)num1294);
				bool flag111 = false;
				if (base.position.X < Main.player[target].position.X && base.position.X + (float)width > Main.player[target].position.X + (float)Main.player[target].width && base.position.Y + (float)height < Main.player[target].position.Y + (float)Main.player[target].height - 16f)
				{
					flag111 = true;
				}
				if (flag111)
				{
					base.velocity.Y += 0.5f;
				}
				else if (Collision.SolidCollision(position8, num1293, num1294))
				{
					if (base.velocity.Y > 0f)
					{
						base.velocity.Y = 0f;
					}
					if ((double)base.velocity.Y > -0.2)
					{
						base.velocity.Y -= 0.025f;
					}
					else
					{
						base.velocity.Y -= 0.2f;
					}
					if (base.velocity.Y < -4f)
					{
						base.velocity.Y = -4f;
					}
				}
				else
				{
					if (base.velocity.Y < 0f)
					{
						base.velocity.Y = 0f;
					}
					if ((double)base.velocity.Y < 0.1)
					{
						base.velocity.Y += 0.025f;
					}
					else
					{
						base.velocity.Y += 0.5f;
					}
				}
				if (base.velocity.Y > 10f)
				{
					base.velocity.Y = 10f;
				}
			}
			else if (aiStyle == 58)
			{
				localAI[0] += 1f;
				if (localAI[0] > 6f)
				{
					localAI[0] = 0f;
					localAI[1] += 1f;
					if (localAI[1] > 4f)
					{
						localAI[1] = 0f;
					}
				}
				if (Main.netMode != 1)
				{
					localAI[2] += 1f;
					if (localAI[2] > 300f)
					{
						this.ai[3] = Main.rand.Next(3);
						localAI[2] = 0f;
					}
					else if (this.ai[3] == 0f && localAI[2] % 30f == 0f && localAI[2] > 30f)
					{
						float num1295 = 5f;
						Vector2 vector153 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f + 30f);
						if (!WorldGen.SolidTile((int)vector153.X / 16, (int)vector153.Y / 16))
						{
							float num1296 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector153.X;
							float num1297 = Main.player[target].position.Y - vector153.Y;
							num1296 += (float)Main.rand.Next(-50, 51);
							num1297 += (float)Main.rand.Next(50, 201);
							num1297 *= 0.2f;
							float num1298 = (float)Math.Sqrt(num1296 * num1296 + num1297 * num1297);
							num1298 = num1295 / num1298;
							num1296 *= num1298;
							num1297 *= num1298;
							num1296 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
							num1297 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
							Projectile.NewProjectile(vector153.X, vector153.Y, num1296, num1297, Main.rand.Next(326, 329), 40, 0f, Main.myPlayer);
						}
					}
				}
				if (this.ai[0] == 0f && Main.netMode != 1)
				{
					TargetClosest();
					this.ai[0] = 1f;
					int num1299 = NewNPC((int)(base.position.X + (float)(width / 2)), (int)base.position.Y + height / 2, 328, base.whoAmI);
					Main.npc[num1299].ai[0] = -1f;
					Main.npc[num1299].ai[1] = base.whoAmI;
					Main.npc[num1299].target = target;
					Main.npc[num1299].netUpdate = true;
					num1299 = NewNPC((int)(base.position.X + (float)(width / 2)), (int)base.position.Y + height / 2, 328, base.whoAmI);
					Main.npc[num1299].ai[0] = 1f;
					Main.npc[num1299].ai[1] = base.whoAmI;
					Main.npc[num1299].ai[3] = 150f;
					Main.npc[num1299].target = target;
					Main.npc[num1299].netUpdate = true;
				}
				if (Main.player[target].dead || Math.Abs(base.position.X - Main.player[target].position.X) > 2000f || Math.Abs(base.position.Y - Main.player[target].position.Y) > 2000f)
				{
					TargetClosest();
					if (Main.player[target].dead || Math.Abs(base.position.X - Main.player[target].position.X) > 2000f || Math.Abs(base.position.Y - Main.player[target].position.Y) > 2000f)
					{
						this.ai[1] = 2f;
					}
				}
				if (Main.dayTime)
				{
					base.velocity.Y += 0.3f;
					base.velocity.X *= 0.9f;
				}
				else if (this.ai[1] == 0f)
				{
					this.ai[2] += 1f;
					if (this.ai[2] >= 300f)
					{
						if (this.ai[3] != 1f)
						{
							this.ai[1] = 0f;
							this.ai[2] = 0f;
						}
						else
						{
							this.ai[2] = 0f;
							this.ai[1] = 1f;
							TargetClosest();
							netUpdate = true;
						}
					}
					Vector2 vector154 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num1300 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector154.X;
					float num1301 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - 200f - vector154.Y;
					float num1302 = (float)Math.Sqrt(num1300 * num1300 + num1301 * num1301);
					float num1303 = 6f;
					if (this.ai[3] == 1f)
					{
						if (num1302 > 900f)
						{
							num1303 = 12f;
						}
						else if (num1302 > 600f)
						{
							num1303 = 10f;
						}
						else if (num1302 > 300f)
						{
							num1303 = 8f;
						}
					}
					if (num1302 > 50f)
					{
						num1302 = num1303 / num1302;
						base.velocity.X = (base.velocity.X * 14f + num1300 * num1302) / 15f;
						base.velocity.Y = (base.velocity.Y * 14f + num1301 * num1302) / 15f;
					}
				}
				else if (this.ai[1] == 1f)
				{
					this.ai[2] += 1f;
					if (this.ai[2] >= 600f || this.ai[3] != 1f)
					{
						this.ai[2] = 0f;
						this.ai[1] = 0f;
					}
					Vector2 vector155 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num1304 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector155.X;
					float num1305 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector155.Y;
					float num1306 = (float)Math.Sqrt(num1304 * num1304 + num1305 * num1305);
					num1306 = 16f / num1306;
					base.velocity.X = (base.velocity.X * 49f + num1304 * num1306) / 50f;
					base.velocity.Y = (base.velocity.Y * 49f + num1305 * num1306) / 50f;
				}
				else if (this.ai[1] == 2f)
				{
					this.ai[1] = 3f;
					base.velocity.Y += 0.1f;
					if (base.velocity.Y < 0f)
					{
						base.velocity.Y *= 0.95f;
					}
					base.velocity.X *= 0.95f;
					if (timeLeft > 500)
					{
						timeLeft = 500;
					}
				}
				rotation = base.velocity.X * -0.02f;
			}
			else if (aiStyle == 59)
			{
				spriteDirection = -(int)this.ai[0];
				if (!Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].aiStyle != 58)
				{
					this.ai[2] += 10f;
					if (this.ai[2] > 50f || Main.netMode != 2)
					{
						life = -1;
						HitEffect();
						active = false;
					}
				}
				if (Main.netMode != 1 && Main.npc[(int)this.ai[1]].ai[3] == 2f)
				{
					localAI[1] += 1f;
					if (localAI[1] > 90f)
					{
						localAI[1] = 0f;
						float num1307 = 0.01f;
						Vector2 vector156 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f + 30f);
						float num1308 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector156.X;
						float num1309 = Main.player[target].position.Y - vector156.Y;
						float num1310 = (float)Math.Sqrt(num1308 * num1308 + num1309 * num1309);
						num1310 = num1307 / num1310;
						num1308 *= num1310;
						num1309 *= num1310;
						Projectile.NewProjectile(base.Center.X, base.Center.Y, num1308, num1309, 329, 60, 0f, Main.myPlayer, rotation, spriteDirection);
					}
				}
				if (Main.dayTime)
				{
					base.velocity.Y += 0.3f;
					base.velocity.X *= 0.9f;
				}
				else if (this.ai[2] == 0f || this.ai[2] == 3f)
				{
					if (Main.npc[(int)this.ai[1]].ai[1] == 3f && timeLeft > 10)
					{
						timeLeft = 10;
					}
					this.ai[3] += 1f;
					if (this.ai[3] >= 180f)
					{
						this.ai[2] += 1f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
					Vector2 vector157 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num1311 = (Main.player[target].Center.X + Main.npc[(int)this.ai[1]].Center.X) / 2f;
					float num1312 = (Main.player[target].Center.Y + Main.npc[(int)this.ai[1]].Center.Y) / 2f;
					num1311 += -170f * this.ai[0] - vector157.X;
					num1312 += 90f - vector157.Y;
					float num1313 = Math.Abs(Main.player[target].Center.X - Main.npc[(int)this.ai[1]].Center.X) + Math.Abs(Main.player[target].Center.Y - Main.npc[(int)this.ai[1]].Center.Y);
					if (num1313 > 700f)
					{
						num1311 = Main.npc[(int)this.ai[1]].Center.X - 170f * this.ai[0] - vector157.X;
						num1312 = Main.npc[(int)this.ai[1]].Center.Y + 90f - vector157.Y;
					}
					float num1314 = (float)Math.Sqrt(num1311 * num1311 + num1312 * num1312);
					float num1315 = 6f;
					if (num1314 > 1000f)
					{
						num1315 = 21f;
					}
					else if (num1314 > 800f)
					{
						num1315 = 18f;
					}
					else if (num1314 > 600f)
					{
						num1315 = 15f;
					}
					else if (num1314 > 400f)
					{
						num1315 = 12f;
					}
					else if (num1314 > 200f)
					{
						num1315 = 9f;
					}
					if (this.ai[0] < 0f && base.Center.X > Main.npc[(int)this.ai[1]].Center.X)
					{
						num1311 -= 4f;
					}
					if (this.ai[0] > 0f && base.Center.X < Main.npc[(int)this.ai[1]].Center.X)
					{
						num1311 += 4f;
					}
					num1314 = num1315 / num1314;
					base.velocity.X = (base.velocity.X * 14f + num1311 * num1314) / 15f;
					base.velocity.Y = (base.velocity.Y * 14f + num1312 * num1314) / 15f;
					num1314 = (float)Math.Sqrt(num1311 * num1311 + num1312 * num1312);
					if (num1314 > 20f)
					{
						rotation = (float)Math.Atan2(num1312, num1311) + 1.57f;
					}
				}
				else if (this.ai[2] == 1f)
				{
					Vector2 vector158 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num1316 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector158.X;
					float num1317 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector158.Y;
					float num1318 = (float)Math.Sqrt(num1316 * num1316 + num1317 * num1317);
					rotation = (float)Math.Atan2(num1317, num1316) + 1.57f;
					base.velocity.X *= 0.95f;
					base.velocity.Y -= 0.3f;
					if (base.velocity.Y < -14f)
					{
						base.velocity.Y = -14f;
					}
					if (base.position.Y < Main.npc[(int)this.ai[1]].position.Y - 200f)
					{
						TargetClosest();
						this.ai[2] = 2f;
						vector158 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						num1316 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector158.X;
						num1317 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector158.Y;
						num1318 = (float)Math.Sqrt(num1316 * num1316 + num1317 * num1317);
						num1318 = 18f / num1318;
						base.velocity.X = num1316 * num1318;
						base.velocity.Y = num1317 * num1318;
						netUpdate = true;
					}
				}
				else if (this.ai[2] == 2f)
				{
					float num1319 = Math.Abs(base.Center.X - Main.npc[(int)this.ai[1]].Center.X) + Math.Abs(base.Center.Y - Main.npc[(int)this.ai[1]].Center.Y);
					if (base.position.Y > Main.player[target].position.Y || base.velocity.Y < 0f || num1319 > 800f)
					{
						this.ai[2] = 3f;
					}
				}
				else if (this.ai[2] == 4f)
				{
					Vector2 vector159 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num1320 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector159.X;
					float num1321 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector159.Y;
					float num1322 = (float)Math.Sqrt(num1320 * num1320 + num1321 * num1321);
					rotation = (float)Math.Atan2(num1321, num1320) + 1.57f;
					base.velocity.Y *= 0.95f;
					base.velocity.X += 0.3f * (0f - this.ai[0]);
					if (base.velocity.X < -14f)
					{
						base.velocity.X = -14f;
					}
					if (base.velocity.X > 14f)
					{
						base.velocity.X = 14f;
					}
					if (base.position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 500f || base.position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) + 500f)
					{
						TargetClosest();
						this.ai[2] = 5f;
						vector159 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						num1320 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector159.X;
						num1321 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector159.Y;
						num1322 = (float)Math.Sqrt(num1320 * num1320 + num1321 * num1321);
						num1322 = 17f / num1322;
						base.velocity.X = num1320 * num1322;
						base.velocity.Y = num1321 * num1322;
						netUpdate = true;
					}
				}
				else if (this.ai[2] == 5f)
				{
					float num1323 = Math.Abs(base.Center.X - Main.npc[(int)this.ai[1]].Center.X) + Math.Abs(base.Center.Y - Main.npc[(int)this.ai[1]].Center.Y);
					if ((base.velocity.X > 0f && base.position.X + (float)(width / 2) > Main.player[target].position.X + (float)(Main.player[target].width / 2)) || (base.velocity.X < 0f && base.position.X + (float)(width / 2) < Main.player[target].position.X + (float)(Main.player[target].width / 2)) || num1323 > 800f)
					{
						this.ai[2] = 0f;
					}
				}
			}
			else if (aiStyle == 60)
			{
				if (Main.dayTime)
				{
					if (base.velocity.X > 0f)
					{
						base.velocity.X += 0.25f;
					}
					else
					{
						base.velocity.X -= 0.25f;
					}
					base.velocity.Y -= 0.1f;
					rotation = base.velocity.X * 0.05f;
				}
				else if (this.ai[0] == 0f)
				{
					if (this.ai[2] == 0f)
					{
						TargetClosest();
						if (base.Center.X < Main.player[target].Center.X)
						{
							this.ai[2] = 1f;
						}
						else
						{
							this.ai[2] = -1f;
						}
					}
					TargetClosest();
					int num1324 = 800;
					float num1325 = Math.Abs(base.Center.X - Main.player[target].Center.X);
					if (base.Center.X < Main.player[target].Center.X && this.ai[2] < 0f && num1325 > (float)num1324)
					{
						this.ai[2] = 0f;
					}
					if (base.Center.X > Main.player[target].Center.X && this.ai[2] > 0f && num1325 > (float)num1324)
					{
						this.ai[2] = 0f;
					}
					float num1326 = 0.45f;
					float num1327 = 7f;
					if ((double)life < (double)lifeMax * 0.75)
					{
						num1326 = 0.55f;
						num1327 = 8f;
					}
					if ((double)life < (double)lifeMax * 0.5)
					{
						num1326 = 0.7f;
						num1327 = 10f;
					}
					if ((double)life < (double)lifeMax * 0.25)
					{
						num1326 = 0.8f;
						num1327 = 11f;
					}
					base.velocity.X += this.ai[2] * num1326;
					if (base.velocity.X > num1327)
					{
						base.velocity.X = num1327;
					}
					if (base.velocity.X < 0f - num1327)
					{
						base.velocity.X = 0f - num1327;
					}
					float num1328 = Main.player[target].position.Y - (base.position.Y + (float)height);
					if (num1328 < 150f)
					{
						base.velocity.Y -= 0.2f;
					}
					if (num1328 > 200f)
					{
						base.velocity.Y += 0.2f;
					}
					if (base.velocity.Y > 8f)
					{
						base.velocity.Y = 8f;
					}
					if (base.velocity.Y < -8f)
					{
						base.velocity.Y = -8f;
					}
					rotation = base.velocity.X * 0.05f;
					if ((num1325 < 500f || this.ai[3] < 0f) && base.position.Y < Main.player[target].position.Y)
					{
						this.ai[3] += 1f;
						int num1329 = 13;
						if ((double)life < (double)lifeMax * 0.75)
						{
							num1329 = 12;
						}
						if ((double)life < (double)lifeMax * 0.5)
						{
							num1329 = 11;
						}
						if ((double)life < (double)lifeMax * 0.25)
						{
							num1329 = 10;
						}
						num1329++;
						if (this.ai[3] > (float)num1329)
						{
							this.ai[3] = -num1329;
						}
						if (this.ai[3] == 0f && Main.netMode != 1)
						{
							Vector2 vector160 = new Vector2(base.Center.X, base.Center.Y);
							vector160.X += base.velocity.X * 7f;
							float num1330 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector160.X;
							float num1331 = Main.player[target].Center.Y - vector160.Y;
							float num1332 = (float)Math.Sqrt(num1330 * num1330 + num1331 * num1331);
							float num1333 = 6f;
							if ((double)life < (double)lifeMax * 0.75)
							{
								num1333 = 7f;
							}
							if ((double)life < (double)lifeMax * 0.5)
							{
								num1333 = 8f;
							}
							if ((double)life < (double)lifeMax * 0.25)
							{
								num1333 = 9f;
							}
							num1332 = num1333 / num1332;
							num1330 *= num1332;
							num1331 *= num1332;
							Projectile.NewProjectile(vector160.X, vector160.Y, num1330, num1331, 348, 42, 0f, Main.myPlayer);
						}
					}
					else if (this.ai[3] < 0f)
					{
						this.ai[3] += 1f;
					}
					if (Main.netMode != 1)
					{
						this.ai[1] += Main.rand.Next(1, 4);
						if (this.ai[1] > 800f && num1325 < 600f)
						{
							this.ai[0] = -1f;
						}
					}
				}
				else if (this.ai[0] == 1f)
				{
					TargetClosest();
					float num1334 = 0.15f;
					float num1335 = 7f;
					if ((double)life < (double)lifeMax * 0.75)
					{
						num1334 = 0.17f;
						num1335 = 8f;
					}
					if ((double)life < (double)lifeMax * 0.5)
					{
						num1334 = 0.2f;
						num1335 = 9f;
					}
					if ((double)life < (double)lifeMax * 0.25)
					{
						num1334 = 0.25f;
						num1335 = 10f;
					}
					num1334 -= 0.05f;
					num1335 -= 1f;
					if (base.Center.X < Main.player[target].Center.X)
					{
						base.velocity.X += num1334;
						if (base.velocity.X < 0f)
						{
							base.velocity.X *= 0.98f;
						}
					}
					if (base.Center.X > Main.player[target].Center.X)
					{
						base.velocity.X -= num1334;
						if (base.velocity.X > 0f)
						{
							base.velocity.X *= 0.98f;
						}
					}
					if (base.velocity.X > num1335 || base.velocity.X < 0f - num1335)
					{
						base.velocity.X *= 0.95f;
					}
					float num1336 = Main.player[target].position.Y - (base.position.Y + (float)height);
					if (num1336 < 180f)
					{
						base.velocity.Y -= 0.1f;
					}
					if (num1336 > 200f)
					{
						base.velocity.Y += 0.1f;
					}
					if (base.velocity.Y > 6f)
					{
						base.velocity.Y = 6f;
					}
					if (base.velocity.Y < -6f)
					{
						base.velocity.Y = -6f;
					}
					rotation = base.velocity.X * 0.01f;
					if (Main.netMode != 1)
					{
						this.ai[3] += 1f;
						int num1337 = 15;
						if ((double)life < (double)lifeMax * 0.75)
						{
							num1337 = 14;
						}
						if ((double)life < (double)lifeMax * 0.5)
						{
							num1337 = 12;
						}
						if ((double)life < (double)lifeMax * 0.25)
						{
							num1337 = 10;
						}
						if ((double)life < (double)lifeMax * 0.1)
						{
							num1337 = 8;
						}
						num1337 += 3;
						if (this.ai[3] >= (float)num1337)
						{
							this.ai[3] = 0f;
							Vector2 vector161 = new Vector2(base.Center.X, base.position.Y + (float)height - 14f);
							int i2 = (int)(vector161.X / 16f);
							int j2 = (int)(vector161.Y / 16f);
							if (!WorldGen.SolidTile(i2, j2))
							{
								float num1338 = base.velocity.Y;
								if (num1338 < 0f)
								{
									num1338 = 0f;
								}
								num1338 += 3f;
								float speedX2 = base.velocity.X * 0.25f;
								Projectile.NewProjectile(vector161.X, vector161.Y, speedX2, num1338, 349, 37, 0f, Main.myPlayer, Main.rand.Next(5));
							}
						}
					}
					if (Main.netMode != 1)
					{
						this.ai[1] += Main.rand.Next(1, 4);
						if (this.ai[1] > 600f)
						{
							this.ai[0] = -1f;
						}
					}
				}
				else if (this.ai[0] == 2f)
				{
					TargetClosest();
					Vector2 vector162 = new Vector2(base.Center.X, base.Center.Y - 20f);
					float num1339 = Main.rand.Next(-1000, 1001);
					float num1340 = Main.rand.Next(-1000, 1001);
					float num1341 = (float)Math.Sqrt(num1339 * num1339 + num1340 * num1340);
					float num1342 = 15f;
					base.velocity *= 0.95f;
					num1341 = num1342 / num1341;
					num1339 *= num1341;
					num1340 *= num1341;
					rotation += 0.2f;
					vector162.X += num1339 * 4f;
					vector162.Y += num1340 * 4f;
					this.ai[3] += 1f;
					int num1343 = 7;
					if ((double)life < (double)lifeMax * 0.75)
					{
						num1343--;
					}
					if ((double)life < (double)lifeMax * 0.5)
					{
						num1343 -= 2;
					}
					if ((double)life < (double)lifeMax * 0.25)
					{
						num1343 -= 3;
					}
					if ((double)life < (double)lifeMax * 0.1)
					{
						num1343 -= 4;
					}
					if (this.ai[3] > (float)num1343)
					{
						this.ai[3] = 0f;
						Projectile.NewProjectile(vector162.X, vector162.Y, num1339, num1340, 349, 35, 0f, Main.myPlayer);
					}
					if (Main.netMode != 1)
					{
						this.ai[1] += Main.rand.Next(1, 4);
						if (this.ai[1] > 500f)
						{
							this.ai[0] = -1f;
						}
					}
				}
				if (this.ai[0] == -1f)
				{
					int num1344 = Main.rand.Next(3);
					TargetClosest();
					if (Math.Abs(base.Center.X - Main.player[target].Center.X) > 1000f)
					{
						num1344 = 0;
					}
					this.ai[0] = num1344;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
				}
			}
			else if (aiStyle == 61)
			{
				float num1345 = 2f;
				noGravity = true;
				noTileCollide = true;
				if (!Main.dayTime)
				{
					TargetClosest();
				}
				bool flag112 = false;
				if ((double)life < (double)lifeMax * 0.75)
				{
					num1345 = 3f;
				}
				if ((double)life < (double)lifeMax * 0.5)
				{
					num1345 = 4f;
				}
				if ((double)life < (double)lifeMax * 0.25)
				{
					num1345 = 5f;
				}
				if (Main.dayTime)
				{
					if (timeLeft > 10)
					{
						timeLeft = 10;
					}
					num1345 = 8f;
					if (base.velocity.X == 0f)
					{
						base.velocity.X = 0.1f;
					}
				}
				else if (this.ai[0] == 0f)
				{
					this.ai[1] += 1f;
					if (this.ai[1] >= 300f && Main.netMode != 1)
					{
						TargetClosest();
						this.ai[1] = 0f;
						this.ai[0] = 1f;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 1f)
				{
					this.ai[1] += 1f;
					flag112 = true;
					int num1346 = 16;
					if ((double)life < (double)lifeMax * 0.25)
					{
						num1346 = 8;
					}
					else if ((double)life < (double)lifeMax * 0.5)
					{
						num1346 = 11;
					}
					else if ((double)life < (double)lifeMax * 0.75)
					{
						num1346 = 14;
					}
					if (this.ai[1] % (float)num1346 == 0f)
					{
						Vector2 vector163 = new Vector2(base.Center.X + (float)(base.direction * 50), base.Center.Y + (float)Main.rand.Next(15, 36));
						float num1347 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector163.X;
						float num1348 = Main.player[target].Center.Y - vector163.Y;
						num1347 += (float)Main.rand.Next(-40, 41);
						num1348 += (float)Main.rand.Next(-40, 41);
						float num1349 = (float)Math.Sqrt(num1347 * num1347 + num1348 * num1348);
						float num1350 = 15f;
						num1349 = num1350 / num1349;
						num1347 *= num1349;
						num1348 *= num1349;
						num1347 *= 1f + (float)Main.rand.Next(-20, 21) * 0.015f;
						num1348 *= 1f + (float)Main.rand.Next(-20, 21) * 0.015f;
						Projectile.NewProjectile(vector163.X, vector163.Y, num1347, num1348, 180, 36, 0f, Main.myPlayer);
					}
					if (this.ai[1] > 240f)
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
					}
				}
				if (Main.netMode != 1)
				{
					int num1351 = 600;
					int num1352 = 1200;
					int num1353 = 2700;
					if ((double)life < (double)lifeMax * 0.25)
					{
						num1351 = (int)((double)num1351 * 0.5);
						num1352 = (int)((double)num1352 * 0.5);
						num1353 = (int)((double)num1353 * 0.5);
					}
					else if ((double)life < (double)lifeMax * 0.5)
					{
						num1351 = (int)((double)num1351 * 0.75);
						num1352 = (int)((double)num1352 * 0.75);
						num1353 = (int)((double)num1353 * 0.75);
					}
					else if ((double)life < (double)lifeMax * 0.75)
					{
						num1351 = (int)((double)num1351 * 0.9);
						num1352 = (int)((double)num1352 * 0.9);
						num1353 = (int)((double)num1353 * 0.9);
					}
					if (Main.rand.Next(num1351) == 0)
					{
						Vector2 vector164 = new Vector2(base.Center.X - (float)(base.direction * 24), base.Center.Y - 64f);
						float num1354 = Main.rand.Next(1, 100) * base.direction;
						float num1355 = 1f;
						float num1356 = (float)Math.Sqrt(num1354 * num1354 + num1355 * num1355);
						float num1357 = 1f;
						num1356 = num1357 / num1356;
						num1354 *= num1356;
						num1355 *= num1356;
						Projectile.NewProjectile(vector164.X, vector164.Y, num1354, num1355, 352, 80, 0f, Main.myPlayer);
					}
					if (Main.rand.Next(num1352) == 0)
					{
						localAI[1] = 1f;
					}
					if (localAI[1] >= 1f)
					{
						localAI[1] += 1f;
						int num1358 = 12;
						if (localAI[1] % (float)num1358 == 0f)
						{
							Vector2 vector165 = new Vector2(base.Center.X - (float)(base.direction * 24), base.Center.Y - 64f);
							float num1359 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector165.X;
							float num1360 = Main.player[target].Center.Y - vector165.Y;
							num1359 += (float)Main.rand.Next(-50, 51);
							num1360 += (float)Main.rand.Next(-50, 51);
							float num1361 = (float)Math.Sqrt(num1359 * num1359 + num1360 * num1360);
							float num1362 = 12.5f;
							num1361 = num1362 / num1361;
							num1359 *= num1361;
							num1360 *= num1361;
							num1359 *= 1f + (float)Main.rand.Next(-20, 21) * 0.015f;
							num1360 *= 1f + (float)Main.rand.Next(-20, 21) * 0.015f;
							Projectile.NewProjectile(vector165.X, vector165.Y, num1359, num1360, 350, 42, 0f, Main.myPlayer);
						}
						if (localAI[1] >= 100f)
						{
							localAI[1] = 0f;
						}
					}
					if (Main.rand.Next(num1353) == 0)
					{
						localAI[2] = 2f;
					}
					if (localAI[2] > 0f)
					{
						localAI[2] += 1f;
						int num1363 = 9;
						if (localAI[2] % (float)num1363 == 0f)
						{
							Vector2 vector166 = new Vector2(base.Center.X - (float)(base.direction * 24), base.Center.Y - 64f);
							float num1364 = Main.rand.Next(-100, 101);
							float num1365 = -300f;
							float num1366 = (float)Math.Sqrt(num1364 * num1364 + num1365 * num1365);
							float num1367 = 11f;
							num1366 = num1367 / num1366;
							num1364 *= num1366;
							num1365 *= num1366;
							num1364 *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
							num1365 *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
							Projectile.NewProjectile(vector166.X, vector166.Y, num1364, num1365, 351, 50, 0f, Main.myPlayer);
						}
						if (localAI[2] >= 100f)
						{
							localAI[2] = 0f;
						}
					}
				}
				if (Math.Abs(base.Center.X - Main.player[target].Center.X) < 50f)
				{
					flag112 = true;
				}
				if (flag112)
				{
					base.velocity.X *= 0.9f;
					if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
					{
						base.velocity.X = 0f;
					}
				}
				else
				{
					if (base.direction > 0)
					{
						base.velocity.X = (base.velocity.X * 20f + num1345) / 21f;
					}
					if (base.direction < 0)
					{
						base.velocity.X = (base.velocity.X * 20f - num1345) / 21f;
					}
				}
				int num1368 = 80;
				int num1369 = 20;
				Vector2 position9 = new Vector2(base.Center.X - (float)(num1368 / 2), base.position.Y + (float)height - (float)num1369);
				bool flag113 = false;
				if (base.position.X < Main.player[target].position.X && base.position.X + (float)width > Main.player[target].position.X + (float)Main.player[target].width && base.position.Y + (float)height < Main.player[target].position.Y + (float)Main.player[target].height - 16f)
				{
					flag113 = true;
				}
				if (flag113)
				{
					base.velocity.Y += 0.5f;
				}
				else if (Collision.SolidCollision(position9, num1368, num1369))
				{
					if (base.velocity.Y > 0f)
					{
						base.velocity.Y = 0f;
					}
					if ((double)base.velocity.Y > -0.2)
					{
						base.velocity.Y -= 0.025f;
					}
					else
					{
						base.velocity.Y -= 0.2f;
					}
					if (base.velocity.Y < -4f)
					{
						base.velocity.Y = -4f;
					}
				}
				else
				{
					if (base.velocity.Y < 0f)
					{
						base.velocity.Y = 0f;
					}
					if ((double)base.velocity.Y < 0.1)
					{
						base.velocity.Y += 0.025f;
					}
					else
					{
						base.velocity.Y += 0.5f;
					}
				}
				if (base.velocity.Y > 10f)
				{
					base.velocity.Y = 10f;
				}
			}
			else if (aiStyle == 62)
			{
				TargetClosest();
				rotation = Math.Abs(base.velocity.X) * (float)base.direction * 0.1f;
				spriteDirection = base.direction;
				float num1370 = 7f;
				Vector2 vector167 = new Vector2(base.Center.X + (float)(base.direction * 20), base.Center.Y + 6f);
				float num1371 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector167.X;
				float num1372 = Main.player[target].position.Y - vector167.Y;
				float num1373 = (float)Math.Sqrt(num1371 * num1371 + num1372 * num1372);
				float num1374 = num1370 / num1373;
				num1371 *= num1374;
				num1372 *= num1374;
				bool flag114 = Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1);
				if (Main.dayTime)
				{
					int num1375 = 60;
					base.velocity.X = (base.velocity.X * (float)(num1375 - 1) - num1371) / (float)num1375;
					base.velocity.Y = (base.velocity.Y * (float)(num1375 - 1) - num1372) / (float)num1375;
					if (timeLeft > 10)
					{
						timeLeft = 10;
					}
					return;
				}
				if (num1373 > 600f || !flag114)
				{
					int num1376 = 60;
					base.velocity.X = (base.velocity.X * (float)(num1376 - 1) + num1371) / (float)num1376;
					base.velocity.Y = (base.velocity.Y * (float)(num1376 - 1) + num1372) / (float)num1376;
					return;
				}
				base.velocity *= 0.98f;
				if (Math.Abs(base.velocity.X) < 1f && Math.Abs(base.velocity.Y) < 1f && Main.netMode != 1)
				{
					localAI[0] += 1f;
					if (localAI[0] >= 15f)
					{
						localAI[0] = 0f;
						num1371 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector167.X;
						num1372 = Main.player[target].Center.Y - vector167.Y;
						num1371 += (float)Main.rand.Next(-35, 36);
						num1372 += (float)Main.rand.Next(-35, 36);
						num1371 *= 1f + (float)Main.rand.Next(-20, 21) * 0.015f;
						num1372 *= 1f + (float)Main.rand.Next(-20, 21) * 0.015f;
						num1373 = (float)Math.Sqrt(num1371 * num1371 + num1372 * num1372);
						num1370 = 10f;
						num1374 = num1370 / num1373;
						num1371 *= num1374;
						num1372 *= num1374;
						num1371 *= 1f + (float)Main.rand.Next(-20, 21) * 0.0125f;
						num1372 *= 1f + (float)Main.rand.Next(-20, 21) * 0.0125f;
						Projectile.NewProjectile(vector167.X, vector167.Y, num1371, num1372, 180, 32, 0f, Main.myPlayer);
					}
				}
			}
			else if (aiStyle == 63)
			{
				TargetClosest();
				float num1377 = 11f;
				Vector2 vector168 = new Vector2(base.Center.X + (float)(base.direction * 20), base.Center.Y + 6f);
				float num1378 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector168.X;
				float num1379 = Main.player[target].Center.Y - vector168.Y;
				float num1380 = (float)Math.Sqrt(num1378 * num1378 + num1379 * num1379);
				float num1381 = num1377 / num1380;
				num1378 *= num1381;
				num1379 *= num1381;
				if (Main.dayTime)
				{
					num1378 = 0f - num1378;
					num1379 = 0f - num1379;
				}
				this.ai[0] -= 1f;
				if (num1380 < 200f || this.ai[0] > 0f)
				{
					if (num1380 < 200f)
					{
						this.ai[0] = 20f;
					}
					if (base.velocity.X < 0f)
					{
						base.direction = -1;
					}
					else
					{
						base.direction = 1;
					}
					rotation += (float)base.direction * 0.3f;
					return;
				}
				base.velocity.X = (base.velocity.X * 50f + num1378) / 51f;
				base.velocity.Y = (base.velocity.Y * 50f + num1379) / 51f;
				if (num1380 < 350f)
				{
					base.velocity.X = (base.velocity.X * 10f + num1378) / 11f;
					base.velocity.Y = (base.velocity.Y * 10f + num1379) / 11f;
				}
				if (num1380 < 300f)
				{
					base.velocity.X = (base.velocity.X * 7f + num1378) / 8f;
					base.velocity.Y = (base.velocity.Y * 7f + num1379) / 8f;
				}
				rotation = base.velocity.X * 0.15f;
			}
			else if (aiStyle == 64)
			{
				float num1382 = this.ai[0];
				float num1383 = this.ai[1];
				if (Main.netMode != 1)
				{
					localAI[0] -= 1f;
					if (this.ai[3] == 0f)
					{
						this.ai[3] = (float)Main.rand.Next(75, 111) * 0.01f;
					}
					if (localAI[0] <= 0f)
					{
						TargetClosest();
						localAI[0] = Main.rand.Next(60, 180);
						float num1384 = Math.Abs(base.Center.X - Main.player[target].Center.X);
						if (num1384 > 700f && localAI[3] == 0f)
						{
							float num1385 = (float)Main.rand.Next(50, 151) * 0.01f;
							if (num1384 > 1000f)
							{
								num1385 = (float)Main.rand.Next(150, 201) * 0.01f;
							}
							else if (num1384 > 850f)
							{
								num1385 = (float)Main.rand.Next(100, 151) * 0.01f;
							}
							int num1386 = base.direction * Main.rand.Next(100, 251);
							int num1387 = Main.rand.Next(-50, 51);
							if (base.position.Y > Main.player[target].position.Y - 100f)
							{
								num1387 -= Main.rand.Next(100, 251);
							}
							float num1388 = num1385 / (float)Math.Sqrt(num1386 * num1386 + num1387 * num1387);
							num1382 = (float)num1386 * num1388;
							num1383 = (float)num1387 * num1388;
						}
						else
						{
							localAI[3] = 1f;
							float num1389 = (float)Main.rand.Next(5, 151) * 0.01f;
							int num1390 = Main.rand.Next(-100, 101);
							int num1391 = Main.rand.Next(-100, 101);
							float num1392 = num1389 / (float)Math.Sqrt(num1390 * num1390 + num1391 * num1391);
							num1382 = (float)num1390 * num1392;
							num1383 = (float)num1391 * num1392;
						}
						netUpdate = true;
					}
				}
				scale = this.ai[3];
				if (localAI[2] > 0f)
				{
					int i3 = (int)base.Center.X / 16;
					int j3 = (int)base.Center.Y / 16;
					if (localAI[2] > 3f)
					{
						if (type == 358)
						{
							Lighting.AddLight(i3, j3, 0.101249993f * scale, 0.21374999f * scale, 0.225f * scale);
						}
						else
						{
							Lighting.AddLight(i3, j3, 0.109500006f * scale, 0.15f * scale, 0.0615f * scale);
						}
					}
					localAI[2] -= 1f;
				}
				else if (localAI[1] > 0f)
				{
					localAI[1] -= 1f;
				}
				else
				{
					localAI[1] = Main.rand.Next(30, 180);
					if (!Main.dayTime || (double)(base.position.Y / 16f) > Main.worldSurface + 10.0)
					{
						localAI[2] = Main.rand.Next(10, 30);
					}
				}
				int num1393 = 80;
				base.velocity.X = (base.velocity.X * (float)(num1393 - 1) + num1382) / (float)num1393;
				base.velocity.Y = (base.velocity.Y * (float)(num1393 - 1) + num1383) / (float)num1393;
				if (base.velocity.Y > 0f)
				{
					int num1394 = 4;
					int num1395 = (int)base.Center.X / 16;
					int num1396 = (int)base.Center.Y / 16;
					for (int num1397 = num1396; num1397 < num1396 + num1394; num1397++)
					{
						if (Main.tile[num1395, num1397] != null && ((Main.tile[num1395, num1397].nactive() && Main.tileSolid[Main.tile[num1395, num1397].type]) || Main.tile[num1395, num1397].liquid > 0))
						{
							num1383 *= -1f;
							if (base.velocity.Y > 0f)
							{
								base.velocity.Y *= 0.9f;
							}
						}
					}
				}
				if (base.velocity.Y < 0f)
				{
					int num1398 = 30;
					bool flag115 = false;
					int num1399 = (int)base.Center.X / 16;
					int num1400 = (int)base.Center.Y / 16;
					for (int num1401 = num1400; num1401 < num1400 + num1398; num1401++)
					{
						if (Main.tile[num1399, num1401] != null && Main.tile[num1399, num1401].nactive() && Main.tileSolid[Main.tile[num1399, num1401].type])
						{
							flag115 = true;
						}
					}
					if (!flag115)
					{
						num1383 *= -1f;
						if (base.velocity.Y < 0f)
						{
							base.velocity.Y *= 0.9f;
						}
					}
				}
				if (collideX)
				{
					num1382 = ((!(base.velocity.X < 0f)) ? (0f - Math.Abs(num1382)) : Math.Abs(num1382));
					base.velocity.X *= -0.2f;
				}
				if (base.velocity.X < 0f)
				{
					base.direction = -1;
				}
				if (base.velocity.X > 0f)
				{
					base.direction = 1;
				}
				this.ai[0] = num1382;
				this.ai[1] = num1383;
			}
			else if (aiStyle == 65)
			{
				float num1402 = this.ai[0];
				float num1403 = this.ai[1];
				if (Main.netMode != 1)
				{
					if (this.ai[2] == 0f)
					{
						int num1404 = 0;
						int num1405 = 4;
						int num1406 = 6;
						int num1407 = 3;
						int num1408 = 7;
						int num1409 = 2;
						int num1410 = 1;
						int num1411 = 5;
						int num1412 = Main.rand.Next(100);
						num1412 = ((num1412 == 0) ? num1411 : ((num1412 < 3) ? num1410 : ((num1412 < 9) ? num1409 : ((num1412 < 19) ? num1408 : ((num1412 < 34) ? num1407 : ((num1412 < 53) ? num1406 : ((num1412 >= 75) ? num1404 : num1405)))))));
						this.ai[2] = 1 + num1412;
					}
					if (this.ai[3] == 0f)
					{
						this.ai[3] = (float)Main.rand.Next(75, 111) * 0.01f;
					}
					localAI[0] -= 1f;
					if (localAI[0] <= 0f)
					{
						TargetClosest();
						localAI[0] = Main.rand.Next(90, 240);
						float num1413 = Math.Abs(base.Center.X - Main.player[target].Center.X);
						if (num1413 > 700f && localAI[3] == 0f)
						{
							float num1414 = (float)Main.rand.Next(50, 151) * 0.01f;
							if (num1413 > 1000f)
							{
								num1414 = (float)Main.rand.Next(150, 201) * 0.01f;
							}
							else if (num1413 > 850f)
							{
								num1414 = (float)Main.rand.Next(100, 151) * 0.01f;
							}
							int num1415 = base.direction * Main.rand.Next(100, 251);
							int num1416 = Main.rand.Next(-50, 51);
							if (base.position.Y > Main.player[target].position.Y - 100f)
							{
								num1416 -= Main.rand.Next(100, 251);
							}
							float num1417 = num1414 / (float)Math.Sqrt(num1415 * num1415 + num1416 * num1416);
							num1402 = (float)num1415 * num1417;
							num1403 = (float)num1416 * num1417;
						}
						else
						{
							localAI[3] = 1f;
							float num1418 = (float)Main.rand.Next(26, 301) * 0.01f;
							int num1419 = Main.rand.Next(-100, 101);
							int num1420 = Main.rand.Next(-100, 101);
							float num1421 = num1418 / (float)Math.Sqrt(num1419 * num1419 + num1420 * num1420);
							num1402 = (float)num1419 * num1421;
							num1403 = (float)num1420 * num1421;
						}
						netUpdate = true;
					}
				}
				scale = this.ai[3];
				int num1422 = 60;
				base.velocity.X = (base.velocity.X * (float)(num1422 - 1) + num1402) / (float)num1422;
				base.velocity.Y = (base.velocity.Y * (float)(num1422 - 1) + num1403) / (float)num1422;
				if (base.velocity.Y > 0f)
				{
					int num1423 = 3;
					int num1424 = (int)base.Center.X / 16;
					int num1425 = (int)base.Center.Y / 16;
					for (int num1426 = num1425; num1426 < num1425 + num1423; num1426++)
					{
						if (Main.tile[num1424, num1426] != null && ((Main.tile[num1424, num1426].nactive() && Main.tileSolid[Main.tile[num1424, num1426].type]) || Main.tile[num1424, num1426].liquid > 0))
						{
							num1403 *= -1f;
							if (base.velocity.Y > 0f)
							{
								base.velocity.Y *= 0.9f;
							}
						}
					}
				}
				if (base.velocity.Y < 0f)
				{
					int num1427 = 30;
					bool flag116 = false;
					int num1428 = (int)base.Center.X / 16;
					int num1429 = (int)base.Center.Y / 16;
					for (int num1430 = num1429; num1430 < num1429 + num1427; num1430++)
					{
						if (Main.tile[num1428, num1430] != null && Main.tile[num1428, num1430].nactive() && Main.tileSolid[Main.tile[num1428, num1430].type])
						{
							flag116 = true;
						}
					}
					if (!flag116)
					{
						num1403 *= -1f;
						if (base.velocity.Y < 0f)
						{
							base.velocity.Y *= 0.9f;
						}
					}
				}
				if (collideX)
				{
					num1402 = ((!(base.velocity.X < 0f)) ? (0f - Math.Abs(num1402)) : Math.Abs(num1402));
					base.velocity.X *= -0.2f;
				}
				if (base.velocity.X < 0f)
				{
					base.direction = -1;
				}
				if (base.velocity.X > 0f)
				{
					base.direction = 1;
				}
				this.ai[0] = num1402;
				this.ai[1] = num1403;
				if (type == 356)
				{
					catchItem = (short)(1994f + this.ai[2] - 1f);
				}
			}
			else if (aiStyle == 66)
			{
				if (type == 484)
				{
					float num1431 = (float)Main.rand.Next(90, 111) * 0.01f;
					num1431 *= (Main.essScale + 0.5f) / 2f;
					Lighting.AddLight((int)((base.position.X + (float)(width / 2)) / 16f), (int)((base.position.Y + (float)(height / 2)) / 16f), 0.3f * num1431, 0.1f * num1431, 0.25f * num1431);
				}
				if (type == 357 || type == 448 || (type >= 484 && type <= 487))
				{
					if (localAI[2] < 90f)
					{
						localAI[2] += 1f;
					}
					else
					{
						friendly = false;
					}
				}
				if (base.velocity.Y == 0f)
				{
					if (this.ai[0] == 1f)
					{
						if (base.direction == 0)
						{
							TargetClosest();
						}
						if (collideX)
						{
							base.direction *= -1;
						}
						float num1432 = 0.2f;
						if (type == 485)
						{
							num1432 = 0.25f;
						}
						if (type == 486)
						{
							num1432 = 0.325f;
						}
						if (type == 487)
						{
							num1432 = 0.4f;
						}
						base.velocity.X = num1432 * (float)base.direction;
						if (type == 374)
						{
							base.velocity.X *= 3f;
						}
					}
					else
					{
						base.velocity.X = 0f;
					}
					if (Main.netMode != 1)
					{
						localAI[1] -= 1f;
						if (localAI[1] <= 0f)
						{
							if (this.ai[0] == 1f)
							{
								this.ai[0] = 0f;
								localAI[1] = Main.rand.Next(300, 900);
							}
							else
							{
								this.ai[0] = 1f;
								localAI[1] = Main.rand.Next(600, 1800);
							}
							netUpdate = true;
						}
					}
				}
				if (type != 374)
				{
					return;
				}
				spriteDirection = base.direction;
				bool flag117 = false;
				for (int num1433 = 0; num1433 < 16; num1433++)
				{
					Player player4 = Main.player[num1433];
					if (player4.active && !player4.dead && !(Vector2.Distance(player4.Center, base.Center) > 160f))
					{
						flag117 = true;
						break;
					}
				}
				int num1434 = 90;
				if (flag117 && this.ai[1] < (float)num1434)
				{
					this.ai[1] += 1f;
				}
				if (this.ai[1] == (float)num1434 && Main.netMode != 1)
				{
					base.position.Y += 16f;
					Transform(375);
					netUpdate = true;
				}
			}
			else if (aiStyle == 67)
			{
				if (type == 359)
				{
					if (this.ai[3] != 0f)
					{
						scale = this.ai[3];
						int num1435 = (int)(12f * scale);
						int num1436 = (int)(12f * scale);
						if (num1435 != width)
						{
							base.position.X = base.position.X + (float)(width / 2) - (float)num1435 - 2f;
							width = num1435;
						}
						if (num1436 != height)
						{
							base.position.Y = base.position.Y + (float)height - (float)num1436;
							height = num1436;
						}
					}
					if (this.ai[3] == 0f && Main.netMode != 1)
					{
						this.ai[3] = (float)Main.rand.Next(80, 111) * 0.01f;
						netUpdate = true;
					}
				}
				if (type == 360)
				{
					Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.1f, 0.2f, 0.7f);
				}
				float num1437 = 0.3f;
				if (type == 360)
				{
					num1437 = 0.6f;
				}
				if (this.ai[0] == 0f)
				{
					TargetClosest();
					directionY = 1;
					this.ai[0] = 1f;
					if (base.direction > 0)
					{
						spriteDirection = 1;
					}
				}
				bool flag118 = false;
				if (Main.netMode != 1)
				{
					if (this.ai[2] == 0f && Main.rand.Next(7200) == 0)
					{
						this.ai[2] = 2f;
						netUpdate = true;
					}
					if (!collideX && !collideY)
					{
						localAI[3] += 1f;
						if (localAI[3] > 5f)
						{
							this.ai[2] = 2f;
							netUpdate = true;
						}
					}
					else
					{
						localAI[3] = 0f;
					}
				}
				if (this.ai[2] > 0f)
				{
					this.ai[1] = 0f;
					this.ai[0] = 1f;
					directionY = 1;
					if (base.velocity.Y > num1437)
					{
						rotation += (float)base.direction * 0.1f;
					}
					else
					{
						rotation = 0f;
					}
					spriteDirection = base.direction;
					base.velocity.X = num1437 * (float)base.direction;
					noGravity = false;
					int num1438 = (int)(base.Center.X + (float)(width / 2 * -base.direction)) / 16;
					int num1439 = (int)(base.position.Y + (float)height + 8f) / 16;
					if (Main.tile[num1438, num1439] != null && !Main.tile[num1438, num1439].topSlope() && collideY)
					{
						this.ai[2] -= 1f;
					}
					num1439 = (int)(base.position.Y + (float)height - 4f) / 16;
					num1438 = (int)(base.Center.X + (float)(width / 2 * base.direction)) / 16;
					if (Main.tile[num1438, num1439] != null && Main.tile[num1438, num1439].bottomSlope())
					{
						base.direction *= -1;
					}
					if (collideX && base.velocity.Y == 0f)
					{
						flag118 = true;
						this.ai[2] = 0f;
						directionY = -1;
						this.ai[1] = 1f;
					}
					if (base.velocity.Y == 0f)
					{
						if (localAI[1] == base.position.X)
						{
							localAI[2] += 1f;
							if (localAI[2] > 10f)
							{
								base.direction = 1;
								base.velocity.X = (float)base.direction * num1437;
								localAI[2] = 0f;
							}
						}
						else
						{
							localAI[2] = 0f;
							localAI[1] = base.position.X;
						}
					}
				}
				if (this.ai[2] != 0f)
				{
					return;
				}
				noGravity = true;
				if (this.ai[1] == 0f)
				{
					if (collideY)
					{
						this.ai[0] = 2f;
					}
					if (!collideY && this.ai[0] == 2f)
					{
						base.direction = -base.direction;
						this.ai[1] = 1f;
						this.ai[0] = 1f;
					}
					if (collideX)
					{
						directionY = -directionY;
						this.ai[1] = 1f;
					}
				}
				else
				{
					if (collideX)
					{
						this.ai[0] = 2f;
					}
					if (!collideX && this.ai[0] == 2f)
					{
						directionY = -directionY;
						this.ai[1] = 0f;
						this.ai[0] = 1f;
					}
					if (collideY)
					{
						base.direction = -base.direction;
						this.ai[1] = 0f;
					}
				}
				if (!flag118)
				{
					float num1440 = rotation;
					if (directionY < 0)
					{
						if (base.direction < 0)
						{
							if (collideX)
							{
								rotation = 1.57f;
								spriteDirection = -1;
							}
							else if (collideY)
							{
								rotation = 3.14f;
								spriteDirection = 1;
							}
						}
						else if (collideY)
						{
							rotation = 3.14f;
							spriteDirection = -1;
						}
						else if (collideX)
						{
							rotation = 4.71f;
							spriteDirection = 1;
						}
					}
					else if (base.direction < 0)
					{
						if (collideY)
						{
							rotation = 0f;
							spriteDirection = -1;
						}
						else if (collideX)
						{
							rotation = 1.57f;
							spriteDirection = 1;
						}
					}
					else if (collideX)
					{
						rotation = 4.71f;
						spriteDirection = -1;
					}
					else if (collideY)
					{
						rotation = 0f;
						spriteDirection = 1;
					}
					float num1441 = rotation;
					rotation = num1440;
					if ((double)rotation > 6.28)
					{
						rotation -= 6.28f;
					}
					if (rotation < 0f)
					{
						rotation += 6.28f;
					}
					float num1442 = Math.Abs(rotation - num1441);
					float num1443 = 0.1f;
					if (rotation > num1441)
					{
						if ((double)num1442 > 3.14)
						{
							rotation += num1443;
						}
						else
						{
							rotation -= num1443;
							if (rotation < num1441)
							{
								rotation = num1441;
							}
						}
					}
					if (rotation < num1441)
					{
						if ((double)num1442 > 3.14)
						{
							rotation -= num1443;
						}
						else
						{
							rotation += num1443;
							if (rotation > num1441)
							{
								rotation = num1441;
							}
						}
					}
				}
				base.velocity.X = num1437 * (float)base.direction;
				base.velocity.Y = num1437 * (float)directionY;
			}
			else if (aiStyle == 68)
			{
				noGravity = true;
				if (this.ai[0] == 0f)
				{
					noGravity = false;
					int direction6 = base.direction;
					int num1444 = target;
					TargetClosest();
					if (num1444 >= 0 && direction6 != 0)
					{
						base.direction = direction6;
					}
					if (wet)
					{
						float num1445 = 2f;
						base.velocity.X = (base.velocity.X * 19f + num1445 * (float)base.direction) / 20f;
						int num1446 = (int)(base.Center.X + (float)((width / 2 + 8) * base.direction)) / 16;
						int num1447 = (int)(base.Center.Y / 16f);
						int j4 = (int)(base.position.Y / 16f);
						int num1448 = (int)((base.position.Y + (float)height) / 16f);
						if (Main.tile[num1446, num1447] == null)
						{
							Main.tile[num1446, num1447] = new Tile();
						}
						if (Main.tile[num1446, num1448] == null)
						{
							Main.tile[num1446, num1448] = new Tile();
						}
						if (WorldGen.SolidTile(num1446, num1447) || WorldGen.SolidTile(num1446, j4) || WorldGen.SolidTile(num1446, num1448) || Main.tile[num1446, num1448].liquid == 0)
						{
							base.direction *= -1;
						}
						spriteDirection = base.direction;
						if (base.velocity.Y > 0f)
						{
							base.velocity.Y *= 0.5f;
						}
						noGravity = true;
						num1446 = (int)(base.Center.X / 16f);
						num1447 = (int)(base.Center.Y / 16f);
						float num1449 = base.position.Y + (float)height;
						if (Main.tile[num1446, num1447 - 1] == null)
						{
							Main.tile[num1446, num1447 - 1] = new Tile();
						}
						if (Main.tile[num1446, num1447] == null)
						{
							Main.tile[num1446, num1447] = new Tile();
						}
						if (Main.tile[num1446, num1447 + 1] == null)
						{
							Main.tile[num1446, num1447 + 1] = new Tile();
						}
						if (Main.tile[num1446, num1447 - 1].liquid > 0)
						{
							num1449 = num1447 * 16;
							num1449 -= (float)((int)Main.tile[num1446, num1447 - 1].liquid / 16);
						}
						else if (Main.tile[num1446, num1447].liquid > 0)
						{
							num1449 = (num1447 + 1) * 16;
							num1449 -= (float)((int)Main.tile[num1446, num1447].liquid / 16);
						}
						else if (Main.tile[num1446, num1447 + 1].liquid > 0)
						{
							num1449 = (num1447 + 2) * 16;
							num1449 -= (float)((int)Main.tile[num1446, num1447 + 1].liquid / 16);
						}
						num1449 -= 6f;
						if (base.Center.Y > num1449)
						{
							base.velocity.Y -= 0.1f;
							if (base.velocity.Y < -8f)
							{
								base.velocity.Y = -8f;
							}
							if (base.Center.Y + base.velocity.Y < num1449)
							{
								base.velocity.Y = num1449 - base.Center.Y;
							}
						}
						else
						{
							base.velocity.Y = num1449 - base.Center.Y;
						}
					}
					if (Main.netMode == 1)
					{
						return;
					}
					if (!wet)
					{
						this.ai[0] = 1f;
						netUpdate = true;
						base.direction = -base.direction;
						return;
					}
					Rectangle rectangle9 = new Rectangle((int)Main.player[target].position.X, (int)Main.player[target].position.Y, Main.player[target].width, Main.player[target].height);
					if (new Rectangle((int)base.position.X - 100, (int)base.position.Y - 100, width + 200, height + 200).Intersects(rectangle9) || life < lifeMax)
					{
						this.ai[0] = 1f;
						base.velocity.Y -= 6f;
						netUpdate = true;
						base.direction = -base.direction;
					}
				}
				else
				{
					if (Main.player[target].dead)
					{
						return;
					}
					bool flag119 = false;
					this.ai[1] += 1f;
					if (this.ai[1] >= 300f)
					{
						flag119 = true;
					}
					if (flag119)
					{
						if (base.velocity.Y == 0f || collideY || wet)
						{
							base.velocity.X = 0f;
							base.velocity.Y = 0f;
							this.ai[0] = 0f;
							this.ai[1] = 0f;
							if (Main.netMode != 1)
							{
								if ((type == 363 || type == 365) && !wet)
								{
									int direction7 = base.direction;
									Transform(type - 1);
									TargetClosest();
									base.direction = direction7;
									this.ai[0] = 0f;
									this.ai[1] = 200 + Main.rand.Next(200);
								}
								netUpdate = true;
							}
						}
						else
						{
							base.velocity.X *= 0.98f;
							base.velocity.Y += 0.1f;
							if (base.velocity.Y > 2f)
							{
								base.velocity.Y = 2f;
							}
						}
						return;
					}
					if (collideX)
					{
						base.direction *= -1;
						base.velocity.X = oldVelocity.X * -0.5f;
						if (base.direction == -1 && base.velocity.X > 0f && base.velocity.X < 2f)
						{
							base.velocity.X = 2f;
						}
						if (base.direction == 1 && base.velocity.X < 0f && base.velocity.X > -2f)
						{
							base.velocity.X = -2f;
						}
					}
					if (collideY)
					{
						base.velocity.Y = oldVelocity.Y * -0.5f;
						if (base.velocity.Y > 0f && base.velocity.Y < 1f)
						{
							base.velocity.Y = 1f;
						}
						if (base.velocity.Y < 0f && base.velocity.Y > -1f)
						{
							base.velocity.Y = -1f;
						}
					}
					if (base.direction == -1 && base.velocity.X > -3f)
					{
						base.velocity.X -= 0.1f;
						if (base.velocity.X > 3f)
						{
							base.velocity.X -= 0.1f;
						}
						else if (base.velocity.X > 0f)
						{
							base.velocity.X -= 0.05f;
						}
						if (base.velocity.X < -3f)
						{
							base.velocity.X = -3f;
						}
					}
					else if (base.direction == 1 && base.velocity.X < 3f)
					{
						base.velocity.X += 0.1f;
						if (base.velocity.X < -3f)
						{
							base.velocity.X += 0.1f;
						}
						else if (base.velocity.X < 0f)
						{
							base.velocity.X += 0.05f;
						}
						if (base.velocity.X > 3f)
						{
							base.velocity.X = 3f;
						}
					}
					int num1450 = (int)((base.position.X + (float)(width / 2)) / 16f) + base.direction;
					int num1451 = (int)((base.position.Y + (float)height) / 16f);
					bool flag120 = true;
					int num1452 = 15;
					bool flag121 = false;
					for (int num1453 = num1451; num1453 < num1451 + num1452; num1453++)
					{
						if (Main.tile[num1450, num1453] == null)
						{
							Main.tile[num1450, num1453] = new Tile();
						}
						if ((Main.tile[num1450, num1453].nactive() && Main.tileSolid[Main.tile[num1450, num1453].type]) || Main.tile[num1450, num1453].liquid > 0)
						{
							if (num1453 < num1451 + 5)
							{
								flag121 = true;
							}
							flag120 = false;
							break;
						}
					}
					if (flag120)
					{
						base.velocity.Y += 0.1f;
					}
					else
					{
						base.velocity.Y -= 0.1f;
					}
					if (flag121)
					{
						base.velocity.Y -= 0.2f;
					}
					if (base.velocity.Y > 3f)
					{
						base.velocity.Y = 3f;
					}
					if (base.velocity.Y < -4f)
					{
						base.velocity.Y = -4f;
					}
				}
			}
			else if (aiStyle == 69)
			{
				bool expertMode = Main.expertMode;
				float num1454 = expertMode ? (0.6f * Main.damageMultiplier) : 1f;
				bool flag122 = (double)life <= (double)lifeMax * 0.5;
				bool flag123 = expertMode && (double)life <= (double)lifeMax * 0.15;
				bool flag124 = this.ai[0] > 4f;
				bool flag125 = this.ai[0] > 9f;
				bool flag126 = this.ai[3] < 10f;
				if (flag125)
				{
					damage = (int)((float)defDamage * 1.1f * num1454);
					defense = 0;
				}
				else if (flag124)
				{
					damage = (int)((float)defDamage * 1.2f * num1454);
					defense = (int)((float)defDefense * 0.8f);
				}
				else
				{
					damage = defDamage;
					defense = defDefense;
				}
				int num1455 = expertMode ? 40 : 60;
				float num1456 = expertMode ? 0.55f : 0.45f;
				float scaleFactor4 = expertMode ? 8.5f : 7.5f;
				if (flag125)
				{
					num1456 = 0.7f;
					scaleFactor4 = 12f;
					num1455 = 30;
				}
				else if (flag124 && flag126)
				{
					num1456 = (expertMode ? 0.6f : 0.5f);
					scaleFactor4 = (expertMode ? 10f : 8f);
					num1455 = (expertMode ? 40 : 20);
				}
				else if (flag126 && !flag124 && !flag125)
				{
					num1455 = 30;
				}
				int num1457 = expertMode ? 28 : 30;
				float num1458 = expertMode ? 17f : 16f;
				if (flag125)
				{
					num1457 = 25;
					num1458 = 27f;
				}
				else if (flag126 && flag124)
				{
					num1457 = (expertMode ? 27 : 30);
					if (expertMode)
					{
						num1458 = 21f;
					}
				}
				int num1459 = 80;
				int num1460 = 4;
				float num1461 = 0.3f;
				float scaleFactor5 = 5f;
				int num1462 = 90;
				int num1463 = 180;
				int num1464 = 180;
				int num1465 = 30;
				int num1466 = 120;
				int num1467 = 4;
				float scaleFactor6 = 6f;
				float scaleFactor7 = 20f;
				float num1468 = (float)Math.PI * 2f / (float)(num1466 / 2);
				int num1469 = 75;
				Vector2 center8 = base.Center;
				Player player5 = Main.player[target];
				if (target < 0 || target == 16 || player5.dead || !player5.active)
				{
					TargetClosest();
					player5 = Main.player[target];
					netUpdate = true;
				}
				if (player5.dead || Vector2.Distance(player5.Center, center8) > 2400f)
				{
					base.velocity.Y -= 0.4f;
					if (timeLeft > 10)
					{
						timeLeft = 10;
					}
					if (this.ai[0] > 4f)
					{
						this.ai[0] = 5f;
					}
					else
					{
						this.ai[0] = 0f;
					}
					this.ai[2] = 0f;
				}
				if (player5.position.Y < 800f || (double)player5.position.Y > Main.worldSurface * 16.0 || (player5.position.X > 6400f && player5.position.X < (float)(Main.maxTilesX * 16 - 6400)))
				{
					num1455 = 20;
					damage = defDamage * 2;
					defense = defDefense * 2;
					this.ai[3] = 0f;
					num1458 += 6f;
				}
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					alpha = 255;
					rotation = 0f;
					if (Main.netMode != 1)
					{
						this.ai[0] = -1f;
						netUpdate = true;
					}
				}
				float num1470 = (float)Math.Atan2(player5.Center.Y - center8.Y, player5.Center.X - center8.X);
				if (spriteDirection == 1)
				{
					num1470 += (float)Math.PI;
				}
				if (num1470 < 0f)
				{
					num1470 += (float)Math.PI * 2f;
				}
				if (num1470 > (float)Math.PI * 2f)
				{
					num1470 -= (float)Math.PI * 2f;
				}
				if (this.ai[0] == -1f)
				{
					num1470 = 0f;
				}
				if (this.ai[0] == 3f)
				{
					num1470 = 0f;
				}
				if (this.ai[0] == 4f)
				{
					num1470 = 0f;
				}
				if (this.ai[0] == 8f)
				{
					num1470 = 0f;
				}
				float num1471 = 0.04f;
				if (this.ai[0] == 1f || this.ai[0] == 6f)
				{
					num1471 = 0f;
				}
				if (this.ai[0] == 7f)
				{
					num1471 = 0f;
				}
				if (this.ai[0] == 3f)
				{
					num1471 = 0.01f;
				}
				if (this.ai[0] == 4f)
				{
					num1471 = 0.01f;
				}
				if (this.ai[0] == 8f)
				{
					num1471 = 0.01f;
				}
				if (rotation < num1470)
				{
					if ((double)(num1470 - rotation) > Math.PI)
					{
						rotation -= num1471;
					}
					else
					{
						rotation += num1471;
					}
				}
				if (rotation > num1470)
				{
					if ((double)(rotation - num1470) > Math.PI)
					{
						rotation += num1471;
					}
					else
					{
						rotation -= num1471;
					}
				}
				if (rotation > num1470 - num1471 && rotation < num1470 + num1471)
				{
					rotation = num1470;
				}
				if (rotation < 0f)
				{
					rotation += (float)Math.PI * 2f;
				}
				if (rotation > (float)Math.PI * 2f)
				{
					rotation -= (float)Math.PI * 2f;
				}
				if (rotation > num1470 - num1471 && rotation < num1470 + num1471)
				{
					rotation = num1470;
				}
				if (this.ai[0] != -1f && this.ai[0] < 9f)
				{
					if (Collision.SolidCollision(base.position, width, height))
					{
						alpha += 15;
					}
					else
					{
						alpha -= 15;
					}
					if (alpha < 0)
					{
						alpha = 0;
					}
					if (alpha > 150)
					{
						alpha = 150;
					}
				}
				if (this.ai[0] == -1f)
				{
					base.velocity *= 0.98f;
					int num1472 = Math.Sign(player5.Center.X - center8.X);
					if (num1472 != 0)
					{
						base.direction = num1472;
						spriteDirection = -base.direction;
					}
					if (this.ai[2] > 20f)
					{
						base.velocity.Y = -2f;
						alpha -= 5;
						if (Collision.SolidCollision(base.position, width, height))
						{
							alpha += 15;
						}
						if (alpha < 0)
						{
							alpha = 0;
						}
						if (alpha > 150)
						{
							alpha = 150;
						}
					}
					if (this.ai[2] == (float)(num1462 - 30))
					{
						int num1473 = 36;
						for (int num1474 = 0; num1474 < num1473; num1474++)
						{
							Vector2 spinningpoint = Vector2.Normalize(base.velocity) * new Vector2((float)width / 2f, height) * 0.75f * 0.5f;
							spinningpoint = spinningpoint.RotatedBy((float)(num1474 - (num1473 / 2 - 1)) * ((float)Math.PI * 2f) / (float)num1473) + base.Center;
							Vector2 value9 = spinningpoint - base.Center;
							int num1475 = Dust.NewDust(spinningpoint + value9, 0, 0, 172, value9.X * 2f, value9.Y * 2f, 100, default(Color), 1.4f);
							Main.dust[num1475].noGravity = true;
							Main.dust[num1475].noLight = true;
							Main.dust[num1475].velocity = Vector2.Normalize(value9) * 3f;
						}
						Main.PlaySound(29, (int)center8.X, (int)center8.Y, 20);
					}
					this.ai[2] += 1f;
					if (this.ai[2] >= (float)num1469)
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 0f && !player5.dead)
				{
					if (this.ai[1] == 0f)
					{
						this.ai[1] = 300 * Math.Sign((center8 - player5.Center).X);
					}
					Vector2 value10 = player5.Center + new Vector2(this.ai[1], -200f) - center8;
					Vector2 vector169 = Vector2.Normalize(value10 - base.velocity) * scaleFactor4;
					if (base.velocity.X < vector169.X)
					{
						base.velocity.X += num1456;
						if (base.velocity.X < 0f && vector169.X > 0f)
						{
							base.velocity.X += num1456;
						}
					}
					else if (base.velocity.X > vector169.X)
					{
						base.velocity.X -= num1456;
						if (base.velocity.X > 0f && vector169.X < 0f)
						{
							base.velocity.X -= num1456;
						}
					}
					if (base.velocity.Y < vector169.Y)
					{
						base.velocity.Y += num1456;
						if (base.velocity.Y < 0f && vector169.Y > 0f)
						{
							base.velocity.Y += num1456;
						}
					}
					else if (base.velocity.Y > vector169.Y)
					{
						base.velocity.Y -= num1456;
						if (base.velocity.Y > 0f && vector169.Y < 0f)
						{
							base.velocity.Y -= num1456;
						}
					}
					int num1476 = Math.Sign(player5.Center.X - center8.X);
					if (num1476 != 0)
					{
						if (this.ai[2] == 0f && num1476 != base.direction)
						{
							rotation += (float)Math.PI;
						}
						base.direction = num1476;
						if (spriteDirection != -base.direction)
						{
							rotation += (float)Math.PI;
						}
						spriteDirection = -base.direction;
					}
					this.ai[2] += 1f;
					if (!(this.ai[2] >= (float)num1455))
					{
						return;
					}
					int num1477 = 0;
					switch ((int)this.ai[3])
					{
					case 0:
					case 1:
					case 2:
					case 3:
					case 4:
					case 5:
					case 6:
					case 7:
					case 8:
					case 9:
						num1477 = 1;
						break;
					case 10:
						this.ai[3] = 1f;
						num1477 = 2;
						break;
					case 11:
						this.ai[3] = 0f;
						num1477 = 3;
						break;
					}
					if (flag122)
					{
						num1477 = 4;
					}
					switch (num1477)
					{
					case 1:
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						base.velocity = Vector2.Normalize(player5.Center - center8) * num1458;
						rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X);
						if (num1476 != 0)
						{
							base.direction = num1476;
							if (spriteDirection == 1)
							{
								rotation += (float)Math.PI;
							}
							spriteDirection = -base.direction;
						}
						break;
					case 2:
						this.ai[0] = 2f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						break;
					case 3:
						this.ai[0] = 3f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						break;
					case 4:
						this.ai[0] = 4f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						break;
					}
					netUpdate = true;
				}
				else if (this.ai[0] == 1f)
				{
					int num1478 = 7;
					for (int num1479 = 0; num1479 < num1478; num1479++)
					{
						Vector2 spinningpoint2 = Vector2.Normalize(base.velocity) * new Vector2((float)(width + 50) / 2f, height) * 0.75f;
						spinningpoint2 = spinningpoint2.RotatedBy((double)(num1479 - (num1478 / 2 - 1)) * Math.PI / (double)(float)num1478) + center8;
						Vector2 value11 = ((float)(Main.rand.NextDouble() * 3.1415927410125732) - (float)Math.PI / 2f).ToRotationVector2() * Main.rand.Next(3, 8);
						int num1480 = Dust.NewDust(spinningpoint2 + value11, 0, 0, 172, value11.X * 2f, value11.Y * 2f, 100, default(Color), 1.4f);
						Main.dust[num1480].noGravity = true;
						Main.dust[num1480].noLight = true;
						Main.dust[num1480].velocity /= 4f;
						Main.dust[num1480].velocity -= base.velocity;
					}
					this.ai[2] += 1f;
					if (this.ai[2] >= (float)num1457)
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] += 2f;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 2f)
				{
					if (this.ai[1] == 0f)
					{
						this.ai[1] = 300 * Math.Sign((center8 - player5.Center).X);
					}
					Vector2 value12 = player5.Center + new Vector2(this.ai[1], -200f) - center8;
					Vector2 vector170 = Vector2.Normalize(value12 - base.velocity) * scaleFactor5;
					if (base.velocity.X < vector170.X)
					{
						base.velocity.X += num1461;
						if (base.velocity.X < 0f && vector170.X > 0f)
						{
							base.velocity.X += num1461;
						}
					}
					else if (base.velocity.X > vector170.X)
					{
						base.velocity.X -= num1461;
						if (base.velocity.X > 0f && vector170.X < 0f)
						{
							base.velocity.X -= num1461;
						}
					}
					if (base.velocity.Y < vector170.Y)
					{
						base.velocity.Y += num1461;
						if (base.velocity.Y < 0f && vector170.Y > 0f)
						{
							base.velocity.Y += num1461;
						}
					}
					else if (base.velocity.Y > vector170.Y)
					{
						base.velocity.Y -= num1461;
						if (base.velocity.Y > 0f && vector170.Y < 0f)
						{
							base.velocity.Y -= num1461;
						}
					}
					if (this.ai[2] == 0f)
					{
						Main.PlaySound(29, (int)center8.X, (int)center8.Y, 20);
					}
					if (this.ai[2] % (float)num1460 == 0f)
					{
						Main.PlaySound(4, (int)base.Center.X, (int)base.Center.Y, 19);
						if (Main.netMode != 1)
						{
							Vector2 vector171 = Vector2.Normalize(player5.Center - center8) * (width + 20) / 2f + center8;
							NewNPC((int)vector171.X, (int)vector171.Y + 45, 371);
						}
					}
					int num1481 = Math.Sign(player5.Center.X - center8.X);
					if (num1481 != 0)
					{
						base.direction = num1481;
						if (spriteDirection != -base.direction)
						{
							rotation += (float)Math.PI;
						}
						spriteDirection = -base.direction;
					}
					this.ai[2] += 1f;
					if (this.ai[2] >= (float)num1459)
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 3f)
				{
					base.velocity *= 0.98f;
					base.velocity.Y = MathHelper.Lerp(base.velocity.Y, 0f, 0.02f);
					if (this.ai[2] == (float)(num1462 - 30))
					{
						Main.PlaySound(29, (int)center8.X, (int)center8.Y, 9);
					}
					if (Main.netMode != 1 && this.ai[2] == (float)(num1462 - 30))
					{
						Vector2 vector172 = rotation.ToRotationVector2() * (Vector2.UnitX * base.direction) * (width + 20) / 2f + center8;
						Projectile.NewProjectile(vector172.X, vector172.Y, base.direction * 2, 8f, 385, 0, 0f, Main.myPlayer);
						Projectile.NewProjectile(vector172.X, vector172.Y, -base.direction * 2, 8f, 385, 0, 0f, Main.myPlayer);
					}
					this.ai[2] += 1f;
					if (this.ai[2] >= (float)num1462)
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 4f)
				{
					base.velocity *= 0.98f;
					base.velocity.Y = MathHelper.Lerp(base.velocity.Y, 0f, 0.02f);
					if (this.ai[2] == (float)(num1463 - 60))
					{
						Main.PlaySound(29, (int)center8.X, (int)center8.Y, 20);
					}
					this.ai[2] += 1f;
					if (this.ai[2] >= (float)num1463)
					{
						this.ai[0] = 5f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 5f && !player5.dead)
				{
					if (this.ai[1] == 0f)
					{
						this.ai[1] = 300 * Math.Sign((center8 - player5.Center).X);
					}
					Vector2 value13 = player5.Center + new Vector2(this.ai[1], -200f) - center8;
					Vector2 vector173 = Vector2.Normalize(value13 - base.velocity) * scaleFactor4;
					if (base.velocity.X < vector173.X)
					{
						base.velocity.X += num1456;
						if (base.velocity.X < 0f && vector173.X > 0f)
						{
							base.velocity.X += num1456;
						}
					}
					else if (base.velocity.X > vector173.X)
					{
						base.velocity.X -= num1456;
						if (base.velocity.X > 0f && vector173.X < 0f)
						{
							base.velocity.X -= num1456;
						}
					}
					if (base.velocity.Y < vector173.Y)
					{
						base.velocity.Y += num1456;
						if (base.velocity.Y < 0f && vector173.Y > 0f)
						{
							base.velocity.Y += num1456;
						}
					}
					else if (base.velocity.Y > vector173.Y)
					{
						base.velocity.Y -= num1456;
						if (base.velocity.Y > 0f && vector173.Y < 0f)
						{
							base.velocity.Y -= num1456;
						}
					}
					int num1482 = Math.Sign(player5.Center.X - center8.X);
					if (num1482 != 0)
					{
						if (this.ai[2] == 0f && num1482 != base.direction)
						{
							rotation += (float)Math.PI;
						}
						base.direction = num1482;
						if (spriteDirection != -base.direction)
						{
							rotation += (float)Math.PI;
						}
						spriteDirection = -base.direction;
					}
					this.ai[2] += 1f;
					if (!(this.ai[2] >= (float)num1455))
					{
						return;
					}
					int num1483 = 0;
					switch ((int)this.ai[3])
					{
					case 0:
					case 1:
					case 2:
					case 3:
					case 4:
					case 5:
						num1483 = 1;
						break;
					case 6:
						this.ai[3] = 1f;
						num1483 = 2;
						break;
					case 7:
						this.ai[3] = 0f;
						num1483 = 3;
						break;
					}
					if (flag123)
					{
						num1483 = 4;
					}
					switch (num1483)
					{
					case 1:
						this.ai[0] = 6f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						base.velocity = Vector2.Normalize(player5.Center - center8) * num1458;
						rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X);
						if (num1482 != 0)
						{
							base.direction = num1482;
							if (spriteDirection == 1)
							{
								rotation += (float)Math.PI;
							}
							spriteDirection = -base.direction;
						}
						break;
					case 2:
						base.velocity = Vector2.Normalize(player5.Center - center8) * scaleFactor7;
						rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X);
						if (num1482 != 0)
						{
							base.direction = num1482;
							if (spriteDirection == 1)
							{
								rotation += (float)Math.PI;
							}
							spriteDirection = -base.direction;
						}
						this.ai[0] = 7f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						break;
					case 3:
						this.ai[0] = 8f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						break;
					case 4:
						this.ai[0] = 9f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						break;
					}
					netUpdate = true;
				}
				else if (this.ai[0] == 6f)
				{
					int num1484 = 7;
					for (int num1485 = 0; num1485 < num1484; num1485++)
					{
						Vector2 spinningpoint3 = Vector2.Normalize(base.velocity) * new Vector2((float)(width + 50) / 2f, height) * 0.75f;
						spinningpoint3 = spinningpoint3.RotatedBy((double)(num1485 - (num1484 / 2 - 1)) * Math.PI / (double)(float)num1484) + center8;
						Vector2 value14 = ((float)(Main.rand.NextDouble() * 3.1415927410125732) - (float)Math.PI / 2f).ToRotationVector2() * Main.rand.Next(3, 8);
						int num1486 = Dust.NewDust(spinningpoint3 + value14, 0, 0, 172, value14.X * 2f, value14.Y * 2f, 100, default(Color), 1.4f);
						Main.dust[num1486].noGravity = true;
						Main.dust[num1486].noLight = true;
						Main.dust[num1486].velocity /= 4f;
						Main.dust[num1486].velocity -= base.velocity;
					}
					this.ai[2] += 1f;
					if (this.ai[2] >= (float)num1457)
					{
						this.ai[0] = 5f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] += 2f;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 7f)
				{
					if (this.ai[2] == 0f)
					{
						Main.PlaySound(29, (int)center8.X, (int)center8.Y, 20);
					}
					if (this.ai[2] % (float)num1467 == 0f)
					{
						Main.PlaySound(4, (int)base.Center.X, (int)base.Center.Y, 19);
						if (Main.netMode != 1)
						{
							Vector2 vector174 = Vector2.Normalize(base.velocity) * (width + 20) / 2f + center8;
							int num1487 = NewNPC((int)vector174.X, (int)vector174.Y + 45, 371);
							Main.npc[num1487].target = target;
							Main.npc[num1487].velocity = Vector2.Normalize(base.velocity).RotatedBy((float)Math.PI / 2f * (float)base.direction) * scaleFactor6;
							Main.npc[num1487].netUpdate = true;
							Main.npc[num1487].ai[3] = (float)Main.rand.Next(80, 121) / 100f;
						}
					}
					base.velocity = base.velocity.RotatedBy((0f - num1468) * (float)base.direction);
					rotation -= num1468 * (float)base.direction;
					this.ai[2] += 1f;
					if (this.ai[2] >= (float)num1466)
					{
						this.ai[0] = 5f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 8f)
				{
					base.velocity *= 0.98f;
					base.velocity.Y = MathHelper.Lerp(base.velocity.Y, 0f, 0.02f);
					if (this.ai[2] == (float)(num1462 - 30))
					{
						Main.PlaySound(29, (int)center8.X, (int)center8.Y, 20);
					}
					if (Main.netMode != 1 && this.ai[2] == (float)(num1462 - 30))
					{
						Projectile.NewProjectile(center8.X, center8.Y, 0f, 0f, 385, 0, 0f, Main.myPlayer, 1f, target + 1);
					}
					this.ai[2] += 1f;
					if (this.ai[2] >= (float)num1462)
					{
						this.ai[0] = 5f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 9f)
				{
					if (this.ai[2] < (float)(num1464 - 90))
					{
						if (Collision.SolidCollision(base.position, width, height))
						{
							alpha += 15;
						}
						else
						{
							alpha -= 15;
						}
						if (alpha < 0)
						{
							alpha = 0;
						}
						if (alpha > 150)
						{
							alpha = 150;
						}
					}
					else if (alpha < 255)
					{
						alpha += 4;
						if (alpha > 255)
						{
							alpha = 255;
						}
					}
					base.velocity *= 0.98f;
					base.velocity.Y = MathHelper.Lerp(base.velocity.Y, 0f, 0.02f);
					if (this.ai[2] == (float)(num1464 - 60))
					{
						Main.PlaySound(29, (int)center8.X, (int)center8.Y, 20);
					}
					this.ai[2] += 1f;
					if (this.ai[2] >= (float)num1464)
					{
						this.ai[0] = 10f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 10f && !player5.dead)
				{
					dontTakeDamage = false;
					chaseable = false;
					if (alpha < 255)
					{
						alpha += 25;
						if (alpha > 255)
						{
							alpha = 255;
						}
					}
					if (this.ai[1] == 0f)
					{
						this.ai[1] = 360 * Math.Sign((center8 - player5.Center).X);
					}
					Vector2 value15 = player5.Center + new Vector2(this.ai[1], -200f) - center8;
					Vector2 desiredVelocity = Vector2.Normalize(value15 - base.velocity) * scaleFactor4;
					SimpleFlyMovement(desiredVelocity, num1456);
					int num1488 = Math.Sign(player5.Center.X - center8.X);
					if (num1488 != 0)
					{
						if (this.ai[2] == 0f && num1488 != base.direction)
						{
							rotation += (float)Math.PI;
							for (int num1489 = 0; num1489 < oldPos.Length; num1489++)
							{
								oldPos[num1489] = Vector2.Zero;
							}
						}
						base.direction = num1488;
						if (spriteDirection != -base.direction)
						{
							rotation += (float)Math.PI;
						}
						spriteDirection = -base.direction;
					}
					this.ai[2] += 1f;
					if (!(this.ai[2] >= (float)num1455))
					{
						return;
					}
					int num1490 = 0;
					switch ((int)this.ai[3])
					{
					case 0:
					case 2:
					case 3:
					case 5:
					case 6:
					case 7:
						num1490 = 1;
						break;
					case 1:
					case 4:
					case 8:
						num1490 = 2;
						break;
					}
					switch (num1490)
					{
					case 1:
						this.ai[0] = 11f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						base.velocity = Vector2.Normalize(player5.Center - center8) * num1458;
						rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X);
						if (num1488 != 0)
						{
							base.direction = num1488;
							if (spriteDirection == 1)
							{
								rotation += (float)Math.PI;
							}
							spriteDirection = -base.direction;
						}
						break;
					case 2:
						this.ai[0] = 12f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						break;
					case 3:
						this.ai[0] = 13f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						break;
					}
					netUpdate = true;
				}
				else if (this.ai[0] == 11f)
				{
					dontTakeDamage = false;
					chaseable = true;
					alpha -= 25;
					if (alpha < 0)
					{
						alpha = 0;
					}
					int num1491 = 7;
					for (int num1492 = 0; num1492 < num1491; num1492++)
					{
						Vector2 spinningpoint4 = Vector2.Normalize(base.velocity) * new Vector2((float)(width + 50) / 2f, height) * 0.75f;
						spinningpoint4 = spinningpoint4.RotatedBy((double)(num1492 - (num1491 / 2 - 1)) * Math.PI / (double)(float)num1491) + center8;
						Vector2 value16 = ((float)(Main.rand.NextDouble() * 3.1415927410125732) - (float)Math.PI / 2f).ToRotationVector2() * Main.rand.Next(3, 8);
						int num1493 = Dust.NewDust(spinningpoint4 + value16, 0, 0, 172, value16.X * 2f, value16.Y * 2f, 100, default(Color), 1.4f);
						Main.dust[num1493].noGravity = true;
						Main.dust[num1493].noLight = true;
						Main.dust[num1493].velocity /= 4f;
						Main.dust[num1493].velocity -= base.velocity;
					}
					this.ai[2] += 1f;
					if (this.ai[2] >= (float)num1457)
					{
						this.ai[0] = 10f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] += 1f;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 12f)
				{
					dontTakeDamage = true;
					chaseable = false;
					if (alpha < 255)
					{
						alpha += 17;
						if (alpha > 255)
						{
							alpha = 255;
						}
					}
					base.velocity *= 0.98f;
					base.velocity.Y = MathHelper.Lerp(base.velocity.Y, 0f, 0.02f);
					if (this.ai[2] == (float)(num1465 / 2))
					{
						Main.PlaySound(29, (int)center8.X, (int)center8.Y, 20);
					}
					if (Main.netMode != 1 && this.ai[2] == (float)(num1465 / 2))
					{
						if (this.ai[1] == 0f)
						{
							this.ai[1] = 300 * Math.Sign((center8 - player5.Center).X);
						}
						Vector2 vector175 = player5.Center + new Vector2(0f - this.ai[1], -200f);
						Vector2 vector177 = base.Center = vector175;
						center8 = vector177;
						int num1494 = Math.Sign(player5.Center.X - center8.X);
						if (num1494 != 0)
						{
							if (this.ai[2] == 0f && num1494 != base.direction)
							{
								rotation += (float)Math.PI;
								for (int num1495 = 0; num1495 < oldPos.Length; num1495++)
								{
									oldPos[num1495] = Vector2.Zero;
								}
							}
							base.direction = num1494;
							if (spriteDirection != -base.direction)
							{
								rotation += (float)Math.PI;
							}
							spriteDirection = -base.direction;
						}
					}
					this.ai[2] += 1f;
					if (this.ai[2] >= (float)num1465)
					{
						this.ai[0] = 10f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] += 1f;
						if (this.ai[3] >= 9f)
						{
							this.ai[3] = 0f;
						}
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 13f)
				{
					if (this.ai[2] == 0f)
					{
						Main.PlaySound(29, (int)center8.X, (int)center8.Y, 20);
					}
					base.velocity = base.velocity.RotatedBy((0f - num1468) * (float)base.direction);
					rotation -= num1468 * (float)base.direction;
					this.ai[2] += 1f;
					if (this.ai[2] >= (float)num1466)
					{
						this.ai[0] = 10f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] += 1f;
						netUpdate = true;
					}
				}
			}
			else if (aiStyle == 70)
			{
				if (target == 16)
				{
					TargetClosest();
					this.ai[3] = (float)Main.rand.Next(80, 121) / 100f;
					float scaleFactor8 = (float)Main.rand.Next(165, 265) / 15f;
					base.velocity = Vector2.Normalize(Main.player[target].Center - base.Center + new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101))) * scaleFactor8;
					netUpdate = true;
				}
				Vector2 vector178 = Vector2.Normalize(Main.player[target].Center - base.Center);
				base.velocity = (base.velocity * 40f + vector178 * 20f) / 41f;
				scale = this.ai[3];
				alpha -= 30;
				if (alpha < 50)
				{
					alpha = 50;
				}
				alpha = 50;
				base.velocity.X = (base.velocity.X * 50f + Main.windSpeed * 2f + (float)Main.rand.Next(-10, 11) * 0.1f) / 51f;
				base.velocity.Y = (base.velocity.Y * 50f + -0.25f + (float)Main.rand.Next(-10, 11) * 0.2f) / 51f;
				if (base.velocity.Y > 0f)
				{
					base.velocity.Y -= 0.04f;
				}
				if (this.ai[0] == 0f)
				{
					int num1496 = 40;
					Rectangle rect = getRect();
					rect.X -= num1496 + width / 2;
					rect.Y -= num1496 + height / 2;
					rect.Width += num1496 * 2;
					rect.Height += num1496 * 2;
					for (int num1497 = 0; num1497 < 16; num1497++)
					{
						Player player6 = Main.player[num1497];
						if (player6.active && !player6.dead && rect.Intersects(player6.getRect()))
						{
							this.ai[0] = 1f;
							this.ai[1] = 4f;
							netUpdate = true;
							break;
						}
					}
				}
				if (this.ai[0] == 0f)
				{
					this.ai[1] += 1f;
					if (this.ai[1] >= 150f)
					{
						this.ai[0] = 1f;
						this.ai[1] = 4f;
					}
				}
				if (this.ai[0] == 1f)
				{
					this.ai[1] -= 1f;
					if (this.ai[1] <= 0f)
					{
						life = 0;
						HitEffect();
						active = false;
						return;
					}
				}
				if (justHit || this.ai[0] == 1f)
				{
					dontTakeDamage = true;
					base.position = base.Center;
					width = (height = 100);
					base.position = new Vector2(base.position.X - (float)(width / 2), base.position.Y - (float)(height / 2));
					if (timeLeft > 3)
					{
						timeLeft = 3;
					}
				}
			}
			else if (aiStyle == 71)
			{
				noTileCollide = true;
				int num1498 = 90;
				if (target < 0 || target == 16 || Main.player[target].dead)
				{
					TargetClosest(false);
					base.direction = 1;
					netUpdate = true;
				}
				if (this.ai[0] == 0f)
				{
					this.ai[1] += 1f;
					int type2 = type;
					int num2049 = 372;
					noGravity = true;
					dontTakeDamage = true;
					base.velocity.Y = this.ai[3];
					if (type == 373)
					{
						float num1499 = (float)Math.PI / 30f;
						float num1500 = this.ai[2];
						float num1501 = (float)(Math.Cos(num1499 * localAI[1]) - 0.5) * num1500;
						base.position.X -= num1501 * (float)(-base.direction);
						localAI[1] += 1f;
						num1501 = (float)(Math.Cos(num1499 * localAI[1]) - 0.5) * num1500;
						base.position.X += num1501 * (float)(-base.direction);
						if (Math.Abs(Math.Cos(num1499 * localAI[1]) - 0.5) > 0.25)
						{
							spriteDirection = ((!(Math.Cos(num1499 * localAI[1]) - 0.5 >= 0.0)) ? 1 : (-1));
						}
						rotation = base.velocity.Y * (float)spriteDirection * 0.1f;
						if ((double)rotation < -0.2)
						{
							rotation = -0.2f;
						}
						if ((double)rotation > 0.2)
						{
							rotation = 0.2f;
						}
						alpha -= 6;
						if (alpha < 0)
						{
							alpha = 0;
						}
					}
					if (this.ai[1] >= (float)num1498)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						if (!Collision.SolidCollision(base.position, width, height))
						{
							this.ai[1] = 1f;
						}
						Main.PlaySound(4, (int)base.Center.X, (int)base.Center.Y, 19);
						TargetClosest();
						spriteDirection = base.direction;
						Vector2 vector179 = Main.player[target].Center - base.Center;
						vector179.Normalize();
						base.velocity = vector179 * 16f;
						rotation = base.velocity.ToRotation();
						if (base.direction == -1)
						{
							rotation += (float)Math.PI;
						}
						netUpdate = true;
					}
				}
				else
				{
					if (this.ai[0] != 1f)
					{
						return;
					}
					noGravity = true;
					if (!Collision.SolidCollision(base.position, width, height))
					{
						if (this.ai[1] < 1f)
						{
							this.ai[1] = 1f;
						}
					}
					else
					{
						alpha -= 15;
						if (alpha < 150)
						{
							alpha = 150;
						}
					}
					if (this.ai[1] >= 1f)
					{
						alpha -= 60;
						if (alpha < 0)
						{
							alpha = 0;
						}
						dontTakeDamage = false;
						this.ai[1] += 1f;
						if (Collision.SolidCollision(base.position, width, height))
						{
							Main.PlaySound(4, (int)base.position.X, (int)base.position.Y, soundKilled);
							life = 0;
							HitEffect();
							active = false;
							return;
						}
					}
					if (this.ai[1] >= 60f)
					{
						noGravity = false;
					}
					rotation = base.velocity.ToRotation();
					if (base.direction == -1)
					{
						rotation += (float)Math.PI;
					}
				}
			}
			else if (aiStyle == 72)
			{
				if (type == 384)
				{
					int num1502 = (int)this.ai[0];
					if (Main.npc[num1502].active && Main.npc[num1502].type == 383)
					{
						base.velocity = Vector2.Zero;
						base.position = Main.npc[num1502].Center;
						base.position.X -= width / 2;
						base.position.Y -= height / 2;
						gfxOffY = Main.npc[num1502].gfxOffY;
						Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.1f, 0.5f, 0.7f);
					}
					else
					{
						life = 0;
						HitEffect();
						active = false;
					}
				}
			}
			else if (aiStyle == 73)
			{
				TargetClosest(false);
				spriteDirection = base.direction;
				base.velocity.X *= 0.93f;
				if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
				{
					base.velocity.X = 0f;
				}
				if (type == 387)
				{
					float num1503 = 120f;
					float num1504 = 60f;
					if (this.ai[1] < num1503)
					{
						this.ai[1] += 1f;
						if (this.ai[1] > 60f)
						{
							float num1505 = (this.ai[1] - num1504) / (num1503 - num1504);
							alpha = (int)((1f - num1505) * 255f);
						}
						else
						{
							alpha = 255;
						}
						dontTakeDamage = true;
						frameCounter = 0.0;
						frame.Y = 0;
						float num1506 = this.ai[1] / num1504;
						Vector2 spinningpoint5 = new Vector2(0f, -30f);
						spinningpoint5 = spinningpoint5.RotatedBy(num1506 * 1.5f * ((float)Math.PI * 2f)) * new Vector2(1f, 0.4f);
						for (int num1507 = 0; num1507 < 4; num1507++)
						{
							Vector2 value17 = Vector2.Zero;
							float scaleFactor9 = 1f;
							if (num1507 == 0)
							{
								value17 = Vector2.UnitY * -15f;
								scaleFactor9 = 0.15f;
							}
							if (num1507 == 1)
							{
								value17 = Vector2.UnitY * -5f;
								scaleFactor9 = 0.3f;
							}
							if (num1507 == 2)
							{
								value17 = Vector2.UnitY * 5f;
								scaleFactor9 = 0.6f;
							}
							if (num1507 == 3)
							{
								value17 = Vector2.UnitY * 20f;
								scaleFactor9 = 0.45f;
							}
							int num1508 = Dust.NewDust(base.Center, 0, 0, 226, 0f, 0f, 100, default(Color), 0.5f);
							Main.dust[num1508].noGravity = true;
							Main.dust[num1508].position = base.Center + spinningpoint5 * scaleFactor9 + value17;
							Main.dust[num1508].velocity = Vector2.Zero;
							spinningpoint5 *= -1f;
							num1508 = Dust.NewDust(base.Center, 0, 0, 226, 0f, 0f, 100, default(Color), 0.5f);
							Main.dust[num1508].noGravity = true;
							Main.dust[num1508].position = base.Center + spinningpoint5 * scaleFactor9 + value17;
							Main.dust[num1508].velocity = Vector2.Zero;
						}
						Lighting.AddLight((int)base.Center.X / 16, (int)(base.Center.Y - 10f) / 16, 0.1f * num1506, 0.5f * num1506, 0.7f * num1506);
						return;
					}
					Lighting.AddLight((int)base.Center.X / 16, (int)(base.Center.Y - 10f) / 16, 0.1f, 0.5f, 0.7f);
					dontTakeDamage = false;
				}
				if (this.ai[0] < 60f)
				{
					this.ai[0] += 1f;
				}
				if (justHit)
				{
					this.ai[0] = -30f;
				}
				if (this.ai[0] == 60f)
				{
					this.ai[0] = -120f;
					Vector2 center9 = Main.player[target].Center;
					Vector2 value18 = base.Center - Vector2.UnitY * 10f;
					Vector2 vector180 = center9 - value18;
					vector180.X += Main.rand.Next(-100, 101);
					vector180.Y += Main.rand.Next(-100, 101);
					vector180.X *= (float)Main.rand.Next(70, 131) * 0.01f;
					vector180.Y *= (float)Main.rand.Next(70, 131) * 0.01f;
					vector180.Normalize();
					if (float.IsNaN(vector180.X) || float.IsNaN(vector180.Y))
					{
						vector180 = -Vector2.UnitY;
					}
					vector180 *= 14f;
					int num1509 = 35;
					if (Main.expertMode && type >= 381 && type <= 392)
					{
						num1509 = (int)((double)num1509 * 0.8);
					}
					Projectile.NewProjectile(value18.X, value18.Y, vector180.X, vector180.Y, 435, num1509, 0f, Main.myPlayer);
				}
			}
			else if (aiStyle == 74)
			{
				TargetClosest(false);
				rotation = base.velocity.ToRotation();
				if (Math.Sign(base.velocity.X) != 0)
				{
					spriteDirection = -Math.Sign(base.velocity.X);
				}
				if (rotation < -(float)Math.PI / 2f)
				{
					rotation += (float)Math.PI;
				}
				if (rotation > (float)Math.PI / 2f)
				{
					rotation -= (float)Math.PI;
				}
				if (type == 418)
				{
					spriteDirection = Math.Sign(base.velocity.X);
				}
				float num1510 = 0.4f;
				float num1511 = 10f;
				float scaleFactor10 = 200f;
				float num1512 = 750f;
				float num1513 = 30f;
				float num1514 = 30f;
				float num1515 = 0.95f;
				int num1516 = 50;
				float scaleFactor11 = 14f;
				float num1517 = 30f;
				float num1518 = 100f;
				float num1519 = 20f;
				float num1520 = 0f;
				float num1521 = 7f;
				bool flag127 = true;
				if (type == 418)
				{
					num1510 = 0.3f;
					num1511 = 8f;
					scaleFactor10 = 300f;
					num1512 = 800f;
					num1513 = 60f;
					num1514 = 5f;
					num1515 = 0.8f;
					num1516 = 0;
					scaleFactor11 = 10f;
					num1517 = 30f;
					num1518 = 150f;
					num1519 = 60f;
					num1520 = 0.333333343f;
					num1521 = 8f;
					flag127 = false;
				}
				num1520 *= num1519;
				if (Main.expertMode)
				{
					num1510 *= Main.expertKnockBack;
				}
				if (type == 388 && this.ai[0] != 3f)
				{
					int num1522 = Dust.NewDust(base.position, width, height, 226, 0f, 0f, 100, default(Color), 0.5f);
					Main.dust[num1522].noGravity = true;
					Main.dust[num1522].velocity = base.velocity / 5f;
					Vector2 vector181 = new Vector2(-10f, 10f);
					if (spriteDirection == 1)
					{
						vector181.X *= -1f;
					}
					vector181 = vector181.RotatedBy(rotation);
					Main.dust[num1522].position = base.Center + vector181;
				}
				if (type == 418)
				{
					int num1523 = (this.ai[0] != 2f) ? 1 : 2;
					int num1524 = (this.ai[0] == 2f) ? 30 : 20;
					for (int num1525 = 0; num1525 < 2; num1525++)
					{
						if (Main.rand.Next(3) < num1523)
						{
							int num1526 = Dust.NewDust(base.Center - new Vector2(num1524), num1524 * 2, num1524 * 2, 6, base.velocity.X * 0.5f, base.velocity.Y * 0.5f, 90, default(Color), 1.5f);
							Main.dust[num1526].noGravity = true;
							Main.dust[num1526].velocity *= 0.2f;
							Main.dust[num1526].fadeIn = 1f;
						}
					}
				}
				if (this.ai[0] == 0f)
				{
					knockBackResist = num1510;
					float scaleFactor12 = num1511;
					Vector2 center10 = base.Center;
					Vector2 center11 = Main.player[target].Center;
					Vector2 value19 = center11 - center10;
					Vector2 vector182 = value19 - Vector2.UnitY * scaleFactor10;
					float num1527 = value19.Length();
					value19 = Vector2.Normalize(value19) * scaleFactor12;
					vector182 = Vector2.Normalize(vector182) * scaleFactor12;
					bool flag128 = Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1);
					if (this.ai[3] >= 120f)
					{
						flag128 = true;
					}
					float num1528 = 8f;
					flag128 = (flag128 && value19.ToRotation() > (float)Math.PI / num1528 && value19.ToRotation() < (float)Math.PI - (float)Math.PI / num1528);
					if (num1527 > num1512 || !flag128)
					{
						base.velocity.X = (base.velocity.X * (num1513 - 1f) + vector182.X) / num1513;
						base.velocity.Y = (base.velocity.Y * (num1513 - 1f) + vector182.Y) / num1513;
						if (!flag128)
						{
							this.ai[3] += 1f;
							if (this.ai[3] == 120f)
							{
								netUpdate = true;
							}
						}
						else
						{
							this.ai[3] = 0f;
						}
					}
					else
					{
						this.ai[0] = 1f;
						this.ai[2] = value19.X;
						this.ai[3] = value19.Y;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 1f)
				{
					knockBackResist = 0f;
					base.velocity *= num1515;
					this.ai[1] += 1f;
					if (this.ai[1] >= num1514)
					{
						this.ai[0] = 2f;
						this.ai[1] = 0f;
						netUpdate = true;
						Vector2 vector183 = new Vector2(this.ai[2], this.ai[3]) + new Vector2(Main.rand.Next(-num1516, num1516 + 1), Main.rand.Next(-num1516, num1516 + 1)) * 0.04f;
						vector183.Normalize();
						vector183 = (base.velocity = vector183 * scaleFactor11);
					}
					if (type == 388 && Main.rand.Next(4) == 0)
					{
						int num1529 = Dust.NewDust(base.position, width, height, 226, 0f, 0f, 100, default(Color), 0.5f);
						Main.dust[num1529].noGravity = true;
						Main.dust[num1529].velocity *= 2f;
						Main.dust[num1529].velocity = Main.dust[num1529].velocity / 2f + Vector2.Normalize(Main.dust[num1529].position - base.Center);
					}
				}
				else if (this.ai[0] == 2f)
				{
					knockBackResist = 0f;
					float num1530 = num1517;
					this.ai[1] += 1f;
					bool flag129 = Vector2.Distance(base.Center, Main.player[target].Center) > num1518 && base.Center.Y > Main.player[target].Center.Y;
					if ((this.ai[1] >= num1530 && flag129) || base.velocity.Length() < num1521)
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						base.velocity /= 2f;
						netUpdate = true;
						if (type == 418)
						{
							this.ai[1] = 45f;
							this.ai[0] = 4f;
						}
					}
					else
					{
						Vector2 center12 = base.Center;
						Vector2 center13 = Main.player[target].Center;
						Vector2 vec7 = center13 - center12;
						vec7.Normalize();
						if (vec7.HasNaNs())
						{
							vec7 = new Vector2(base.direction, 0f);
						}
						base.velocity = (base.velocity * (num1519 - 1f) + vec7 * (base.velocity.Length() + num1520)) / num1519;
					}
					if (flag127 && Collision.SolidCollision(base.position, width, height))
					{
						this.ai[0] = 3f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 4f)
				{
					this.ai[1] -= 3f;
					if (this.ai[1] <= 0f)
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
						netUpdate = true;
					}
					base.velocity *= 0.95f;
				}
				if (flag127 && this.ai[0] != 3f && Vector2.Distance(base.Center, Main.player[target].Center) < 64f)
				{
					this.ai[0] = 3f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					netUpdate = true;
				}
				if (this.ai[0] != 3f)
				{
					return;
				}
				base.position = base.Center;
				width = (height = 192);
				base.position.X -= width / 2;
				base.position.Y -= height / 2;
				base.velocity = Vector2.Zero;
				damage = (int)(80f * Main.damageMultiplier);
				alpha = 255;
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.2f, 0.7f, 1.1f);
				for (int num1531 = 0; num1531 < 10; num1531++)
				{
					int num1532 = Dust.NewDust(base.position, width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num1532].velocity *= 1.4f;
					Main.dust[num1532].position = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * ((float)Main.rand.NextDouble() * 96f) + base.Center;
				}
				for (int num1533 = 0; num1533 < 40; num1533++)
				{
					int num1534 = Dust.NewDust(base.position, width, height, 226, 0f, 0f, 100, default(Color), 0.5f);
					Main.dust[num1534].noGravity = true;
					Main.dust[num1534].velocity *= 2f;
					Main.dust[num1534].position = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * ((float)Main.rand.NextDouble() * 96f) + base.Center;
					Main.dust[num1534].velocity = Main.dust[num1534].velocity / 2f + Vector2.Normalize(Main.dust[num1534].position - base.Center);
					if (Main.rand.Next(2) == 0)
					{
						num1534 = Dust.NewDust(base.position, width, height, 226, 0f, 0f, 100, default(Color), 0.9f);
						Main.dust[num1534].noGravity = true;
						Main.dust[num1534].velocity *= 1.2f;
						Main.dust[num1534].position = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * ((float)Main.rand.NextDouble() * 96f) + base.Center;
						Main.dust[num1534].velocity = Main.dust[num1534].velocity / 2f + Vector2.Normalize(Main.dust[num1534].position - base.Center);
					}
					if (Main.rand.Next(4) == 0)
					{
						num1534 = Dust.NewDust(base.position, width, height, 226, 0f, 0f, 100, default(Color), 0.7f);
						Main.dust[num1534].velocity *= 1.2f;
						Main.dust[num1534].position = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * ((float)Main.rand.NextDouble() * 96f) + base.Center;
						Main.dust[num1534].velocity = Main.dust[num1534].velocity / 2f + Vector2.Normalize(Main.dust[num1534].position - base.Center);
					}
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= 3f)
				{
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 14);
					life = 0;
					HitEffect();
					active = false;
				}
			}
			else if (aiStyle == 75)
			{
				int num1535 = -1;
				Vector2 vector184 = Vector2.Zero;
				int num1536 = 0;
				if (type == 390)
				{
					if (localAI[0] == 0f && Main.netMode != 1)
					{
						localAI[0] = 1f;
						int num1537 = NewNPC((int)base.Center.X, (int)base.Center.Y, 391, base.whoAmI);
						this.ai[0] = num1537;
						netUpdate = true;
					}
					int num1538 = (int)this.ai[0];
					if (Main.npc[num1538].active && Main.npc[num1538].type == 391)
					{
						if (timeLeft < 60)
						{
							timeLeft = 60;
						}
						num1535 = num1538;
						vector184 = Vector2.UnitY * -14f;
					}
				}
				if (type == 416)
				{
					if (localAI[0] == 0f && Main.netMode != 1)
					{
						localAI[0] = 1f;
						int num1539 = NewNPC((int)base.Center.X, (int)base.Center.Y, 415, base.whoAmI);
						this.ai[0] = num1539;
						netUpdate = true;
					}
					int num1540 = (int)this.ai[0];
					if (Main.npc[num1540].active && Main.npc[num1540].type == 415)
					{
						if (timeLeft < 60)
						{
							timeLeft = 60;
						}
						num1535 = num1540;
						vector184 = new Vector2(-Main.npc[num1540].spriteDirection * 10, -30f);
					}
				}
				else if (type == 392)
				{
					int num1541 = (int)this.ai[0];
					if (Main.npc[num1541].active && Main.npc[num1541].type == 395)
					{
						if (timeLeft < 60)
						{
							timeLeft = 60;
						}
						num1535 = num1541;
						vector184 = Vector2.UnitY * 2f;
						vector184 *= Main.npc[num1541].scale;
						float num1542 = Main.npc[num1541].rotation;
						vector184 = vector184.RotatedBy(num1542);
						rotation = num1542;
						if (Main.netMode != 1)
						{
							bool flag130 = true;
							if (Main.npc[num1541].ai[0] >= 1f || Main.npc[num1541].ai[0] < 0f)
							{
								flag130 = false;
							}
							if (flag130)
							{
								for (int num1543 = 0; num1543 < 2; num1543++)
								{
									if (Main.npc[(int)localAI[num1543]].active && Main.npc[(int)localAI[num1543]].type == 393)
									{
										flag130 = false;
									}
								}
								for (int num1544 = 2; num1544 < 4; num1544++)
								{
									if (Main.npc[(int)localAI[num1544]].active && Main.npc[(int)localAI[num1544]].type == 394)
									{
										flag130 = false;
									}
								}
							}
							if (flag130)
							{
								Main.npc[num1541].ai[0] = 1f;
								Main.npc[num1541].ai[1] = 0f;
								Main.npc[num1541].ai[2] = 0f;
								Main.npc[num1541].ai[3] = 0f;
								Main.npc[num1541].netUpdate = true;
							}
						}
					}
				}
				else if (type == 393)
				{
					int num1545 = (int)this.ai[0];
					if (Main.npc[num1545].active && Main.npc[num1545].type == 395)
					{
						if (timeLeft < 60)
						{
							timeLeft = 60;
						}
						num1535 = num1545;
						vector184 = Vector2.UnitY * 29f + ((this.ai[1] == 1f) ? Vector2.UnitX : (-Vector2.UnitX)) * 60f;
						vector184 *= Main.npc[num1545].scale;
						float num1546 = Main.npc[num1545].rotation;
						vector184 = vector184.RotatedBy(num1546);
						rotation = num1546;
					}
				}
				else if (type == 394)
				{
					int num1547 = (int)this.ai[0];
					if (Main.npc[num1547].active && Main.npc[num1547].type == 395)
					{
						if (timeLeft < 60)
						{
							timeLeft = 60;
						}
						num1535 = num1547;
						vector184 = Vector2.UnitY * -13f + ((this.ai[1] == 1f) ? Vector2.UnitX : (-Vector2.UnitX)) * 49f;
						vector184 *= Main.npc[num1547].scale;
						float num1548 = Main.npc[num1547].rotation;
						vector184 = vector184.RotatedBy(num1548);
						rotation = num1548;
						num1536 = ((this.ai[1] == 1f) ? 1 : (-1));
					}
				}
				else if (type == 492)
				{
					int num1549 = (int)this.ai[0];
					if (Main.npc[num1549].active && Main.npc[num1549].type == 491)
					{
						if (timeLeft < 60)
						{
							timeLeft = 60;
						}
						num1535 = num1549;
						vector184 = new Vector2((-122f + 68f * this.ai[1]) * (float)((Main.npc[num1549].spriteDirection != 1) ? 1 : (-1)), -6f);
						vector184 *= Main.npc[num1549].scale;
						float num1550 = Main.npc[num1549].rotation;
						vector184 = vector184.RotatedBy(num1550);
						rotation = num1550;
					}
				}
				if (num1535 != -1)
				{
					NPC nPC7 = Main.npc[num1535];
					base.velocity = Vector2.Zero;
					base.position = nPC7.Center;
					base.position.X -= width / 2;
					base.position.Y -= height / 2;
					base.position += vector184;
					gfxOffY = nPC7.gfxOffY;
					base.direction = nPC7.direction;
					if (num1536 == 0)
					{
						spriteDirection = nPC7.spriteDirection;
					}
					else
					{
						spriteDirection = num1536;
					}
					if (type == 390)
					{
						timeLeft = nPC7.timeLeft;
						base.velocity = nPC7.velocity;
						target = nPC7.target;
						if (this.ai[1] < 60f)
						{
							this.ai[1] += 1f;
						}
						if (justHit)
						{
							this.ai[1] = -30f;
						}
						int num1551 = 438;
						int num1552 = 30;
						float num1553 = 7f;
						if (Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
						{
							Vector2 vector185 = Main.player[target].Center - base.Center;
							Vector2 vector186 = Vector2.Normalize(vector185);
							float num1554 = vector185.Length();
							float num1555 = 700f;
							if (type == 214)
							{
								num1555 = 550f;
							}
							if (type == 215)
							{
								num1555 = 800f;
							}
							if (num1554 < num1555)
							{
								if (this.ai[1] == 60f && Math.Sign(vector185.X) == base.direction)
								{
									this.ai[1] = -60f;
									Vector2 center14 = Main.player[target].Center;
									Vector2 value20 = base.Center - Vector2.UnitY * 4f;
									Vector2 vector187 = center14 - value20;
									vector187.X += Main.rand.Next(-50, 51);
									vector187.Y += Main.rand.Next(-50, 51);
									vector187.X *= (float)Main.rand.Next(80, 121) * 0.01f;
									vector187.Y *= (float)Main.rand.Next(80, 121) * 0.01f;
									vector187.Normalize();
									if (float.IsNaN(vector187.X) || float.IsNaN(vector187.Y))
									{
										vector187 = -Vector2.UnitY;
									}
									vector187 *= num1553;
									Projectile.NewProjectile(value20.X, value20.Y, vector187.X, vector187.Y, num1551, num1552, 0f, Main.myPlayer);
									netUpdate = true;
								}
								else
								{
									float num1556 = this.ai[2];
									base.velocity.X *= 0.5f;
									this.ai[2] = 3f;
									if (Math.Abs(vector186.Y) > Math.Abs(vector186.X) * 2f)
									{
										if (vector186.Y > 0f)
										{
											this.ai[2] = 1f;
										}
										else
										{
											this.ai[2] = 5f;
										}
									}
									else if (Math.Abs(vector186.X) > Math.Abs(vector186.Y) * 2f)
									{
										this.ai[2] = 3f;
									}
									else if (vector186.Y > 0f)
									{
										this.ai[2] = 2f;
									}
									else
									{
										this.ai[2] = 4f;
									}
									if (this.ai[2] != num1556)
									{
										netUpdate = true;
									}
								}
							}
						}
					}
					if (type == 492)
					{
						timeLeft = nPC7.timeLeft;
						base.velocity = nPC7.velocity;
						if (this.ai[3] < 240f)
						{
							this.ai[3] += 1f;
						}
						if (this.ai[3] == 2f)
						{
							TargetClosest(false);
						}
						if (Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
						{
							Vector2 vector188 = Main.player[target].Center - base.Center;
							Vector2.Normalize(vector188);
							if (this.ai[3] >= 240f)
							{
								this.ai[3] = 0f;
								Vector2 center15 = Main.player[target].Center;
								Vector2 center16 = base.Center;
								Vector2 vector189 = Vector2.Normalize(center15 - center16);
								if (float.IsNaN(vector189.X) || float.IsNaN(vector189.Y))
								{
									vector189 = Vector2.UnitY;
								}
								vector189 *= 14f;
								vector189 += Vector2.UnitY * -5f;
								if (Main.netMode != 1)
								{
									Projectile.NewProjectile(center16.X, center16.Y, vector189.X, vector189.Y, 240, 30, 0f, Main.myPlayer);
								}
								netUpdate = true;
							}
							else
							{
								float num1557 = this.ai[2];
								float[] array4 = new float[8];
								for (int num1558 = 0; num1558 < array4.Length; num1558++)
								{
									array4[num1558] = Vector2.Distance(base.Center + Vector2.UnitY.RotatedBy((float)num1558 * (-(float)Math.PI / 4f)) * 50f, Main.player[target].Center);
								}
								int num1559 = 0;
								for (int num1560 = 1; num1560 < array4.Length; num1560++)
								{
									if (array4[num1559] > array4[num1560])
									{
										num1559 = num1560;
									}
								}
								this.ai[2] = num1559 + 1;
								if (spriteDirection == 1)
								{
									this.ai[2] = 9f - this.ai[2];
								}
								if (this.ai[2] != num1557)
								{
									netUpdate = true;
								}
							}
						}
						else
						{
							if (this.ai[2] != 0f)
							{
								netUpdate = true;
							}
							this.ai[2] = 0f;
						}
					}
					if (type == 394)
					{
						timeLeft = nPC7.timeLeft;
						int num1561 = 50;
						if (Main.expertMode)
						{
							num1561 = 37;
						}
						this.ai[3] = nPC7.ai[3];
						float num1562 = 440f;
						float num1563 = 140f;
						if (this.ai[3] >= num1562 && this.ai[3] < num1562 + num1563)
						{
							float num1564 = this.ai[3] - num1562;
							if (num1564 % 20f == 0f)
							{
								if (Main.netMode != 1)
								{
									Vector2 spinningpoint6 = num1536 * Vector2.UnitX;
									spinningpoint6 = spinningpoint6.RotatedBy((Main.rand.NextDouble() - 0.5) * 0.78539818525314331);
									spinningpoint6 *= 8f;
									Vector2 vector190 = num1536 * Vector2.UnitX * 36f + base.Center + Vector2.UnitY * 8f;
									Projectile.NewProjectile(vector190.X, vector190.Y, spinningpoint6.X, spinningpoint6.Y, 448, num1561, 0f, Main.myPlayer, 0f, 20f);
								}
								Main.PlaySound(2, (int)base.Center.X, (int)base.Center.Y, 39);
							}
						}
					}
					if (type == 393)
					{
						timeLeft = nPC7.timeLeft;
						int num1565 = 35;
						if (Main.expertMode)
						{
							num1565 = 30;
						}
						this.ai[3] = nPC7.ai[3];
						float num1566 = 280f;
						float num1567 = 140f;
						bool flag131 = this.ai[3] >= num1566 && this.ai[3] < num1566 + num1567;
						if (!flag131)
						{
							TargetClosest(false);
							Player player7 = Main.player[target];
							Vector2 v = player7.Center - base.Center;
							if (v.Y < 0f)
							{
								v.Y = 0f;
							}
							v.Normalize();
							if (float.IsNaN(v.X) || float.IsNaN(v.Y))
							{
								v = Vector2.UnitY;
							}
							this.ai[2] = v.ToRotation();
						}
						if (flag131)
						{
							float num1568 = this.ai[3] - num1566;
							if (num1568 % 6f == 0f)
							{
								if (Main.netMode != 1)
								{
									Vector2 spinningpoint7 = this.ai[2].ToRotationVector2();
									spinningpoint7 = spinningpoint7.RotatedBy((Main.rand.NextDouble() - 0.5) * 0.78539818525314331 / 3.0);
									spinningpoint7 *= 16f;
									Vector2 vector191 = base.Center + spinningpoint7 * 1f;
									Projectile.NewProjectile(vector191.X, vector191.Y, spinningpoint7.X, spinningpoint7.Y, 449, num1565, 0f, Main.myPlayer);
								}
								Main.PlaySound(2, (int)base.Center.X, (int)base.Center.Y, 12);
							}
						}
					}
					if (type != 392)
					{
						return;
					}
					timeLeft = nPC7.timeLeft;
					int num1569 = 70;
					if (Main.expertMode)
					{
						num1569 = 50;
					}
					this.ai[3] = nPC7.ai[3];
					float num1570 = 20f;
					float num1571 = 240f;
					if (this.ai[3] >= num1570 && this.ai[3] < num1570 + num1571 && nPC7.ai[0] == 0f)
					{
						float num1572 = this.ai[3] - num1570;
						if (num1572 == 0f)
						{
							if (Main.netMode != 1)
							{
								Vector2 center17 = base.Center;
								Projectile.NewProjectile(center17.X, center17.Y, 0f, 0f, 447, num1569, 0f, Main.myPlayer, base.whoAmI + 1);
							}
							Main.PlaySound(2, (int)base.Center.X, (int)base.Center.Y, 12);
						}
					}
					bool flag132 = false;
					int maxValue8 = 1000;
					int maxValue9 = 1000;
					int num1573 = 450;
					int num1574 = 30;
					if (Main.expertMode)
					{
						num1574 = 25;
					}
					if (nPC7.ai[0] == 2f)
					{
						flag132 = true;
						maxValue9 = 120;
						maxValue8 = 120;
					}
					if (!flag132)
					{
						num1570 = 280f;
						num1571 = 120f;
						flag132 = (flag132 || (this.ai[3] >= num1570 && this.ai[3] < num1570 + num1571));
						if (flag132)
						{
							maxValue9 = 90;
							maxValue8 = 60;
						}
					}
					if (!flag132)
					{
						num1570 = 440f;
						num1571 = 140f;
						flag132 = (flag132 || (this.ai[3] >= num1570 && this.ai[3] < num1570 + num1571));
						if (flag132)
						{
							maxValue9 = 60;
							maxValue8 = 90;
						}
					}
					bool flag133 = true;
					bool flag134 = true;
					bool flag135 = true;
					bool flag136 = true;
					if (Main.npc[(int)localAI[0]].active && Main.npc[(int)localAI[0]].type == 393)
					{
						flag133 = false;
					}
					if (Main.npc[(int)localAI[1]].active && Main.npc[(int)localAI[1]].type == 393)
					{
						flag134 = false;
					}
					if (Main.npc[(int)localAI[2]].active && Main.npc[(int)localAI[2]].type == 394)
					{
						flag135 = false;
					}
					if (Main.npc[(int)localAI[3]].active && Main.npc[(int)localAI[3]].type == 394)
					{
						flag136 = false;
					}
					if (flag132)
					{
						bool flag137 = true;
						if (flag133 && Main.rand.Next(maxValue8) == 0)
						{
							if (Main.netMode != 1)
							{
								Vector2 spinningpoint8 = new Vector2(-1f * (float)Main.rand.NextDouble() * 3f, 1f);
								spinningpoint8 = spinningpoint8.RotatedBy((Main.rand.NextDouble() - 0.5) * 0.78539818525314331);
								spinningpoint8 *= 3f;
								Vector2 vector192 = -1f * Vector2.UnitX * Main.rand.Next(50, 70) + base.Center + Vector2.UnitY * Main.rand.Next(30, 45);
								Projectile.NewProjectile(vector192.X, vector192.Y, spinningpoint8.X, spinningpoint8.Y, num1573, num1574, 0f, Main.myPlayer);
							}
							Main.PlaySound(2, (int)base.Center.X, (int)base.Center.Y, 39);
						}
						if (flag134 && Main.rand.Next(maxValue8) == 0)
						{
							if (Main.netMode != 1)
							{
								Vector2 spinningpoint9 = new Vector2(1f * (float)Main.rand.NextDouble() * 3f, 1f);
								spinningpoint9 = spinningpoint9.RotatedBy((Main.rand.NextDouble() - 0.5) * 0.78539818525314331);
								spinningpoint9 *= 3f;
								Vector2 vector193 = 1f * Vector2.UnitX * Main.rand.Next(50, 70) + base.Center + Vector2.UnitY * Main.rand.Next(30, 45);
								Projectile.NewProjectile(vector193.X, vector193.Y, spinningpoint9.X, spinningpoint9.Y, num1573, num1574, 0f, Main.myPlayer);
							}
							Main.PlaySound(2, (int)base.Center.X, (int)base.Center.Y, 39);
						}
					}
					if (flag132)
					{
						bool flag138 = true;
						if (flag135 && Main.rand.Next(maxValue9) == 0)
						{
							if (Main.netMode != 1)
							{
								Vector2 spinningpoint10 = new Vector2(-1f * (float)Main.rand.NextDouble() * 2f, -1f);
								spinningpoint10 = spinningpoint10.RotatedBy((Main.rand.NextDouble() - 0.5) * 0.78539818525314331);
								spinningpoint10 *= 3f;
								Vector2 vector194 = -1f * Vector2.UnitX * Main.rand.Next(30, 60) + base.Center + Vector2.UnitY * Main.rand.Next(-30, -10);
								Projectile.NewProjectile(vector194.X, vector194.Y, spinningpoint10.X, spinningpoint10.Y, num1573, num1574, 0f, Main.myPlayer);
							}
							Main.PlaySound(2, (int)base.Center.X, (int)base.Center.Y, 39);
						}
						if (flag136 && Main.rand.Next(maxValue9) == 0)
						{
							if (Main.netMode != 1)
							{
								Vector2 spinningpoint11 = new Vector2(1f * (float)Main.rand.NextDouble() * 2f, -1f);
								spinningpoint11 = spinningpoint11.RotatedBy((Main.rand.NextDouble() - 0.5) * 0.78539818525314331);
								spinningpoint11 *= 3f;
								Vector2 vector195 = 1f * Vector2.UnitX * Main.rand.Next(30, 60) + base.Center + Vector2.UnitY * Main.rand.Next(-30, -10);
								Projectile.NewProjectile(vector195.X, vector195.Y, spinningpoint11.X, spinningpoint11.Y, num1573, num1574, 0f, Main.myPlayer);
							}
							Main.PlaySound(2, (int)base.Center.X, (int)base.Center.Y, 39);
						}
					}
					if (flag133 && Main.rand.Next(8) == 0)
					{
						int num1575 = Dust.NewDust(-1f * Vector2.UnitX * Main.rand.Next(50, 70) + base.Center + Vector2.UnitY * Main.rand.Next(15, 30), 4, 16, (Main.rand.Next(4) != 0) ? 31 : 228, 0f, 0f, 100, default(Color), 1.2f);
						Main.dust[num1575].velocity = new Vector2(-1f * (float)Main.rand.NextDouble() * 3f, 1f).RotatedBy((Main.rand.NextDouble() - 0.5) * 0.78539818525314331);
						Main.dust[num1575].velocity *= 0.5f;
						Main.dust[num1575].velocity.Y = 0f - Math.Abs(Main.dust[num1575].velocity.Y);
					}
					if (flag134 && Main.rand.Next(8) == 0)
					{
						int num1576 = Dust.NewDust(Vector2.UnitX * Main.rand.Next(50, 70) + base.Center + Vector2.UnitY * Main.rand.Next(15, 30), 4, 16, (Main.rand.Next(4) != 0) ? 31 : 228, 0f, 0f, 100, default(Color), 1.2f);
						Main.dust[num1576].velocity = new Vector2((float)Main.rand.NextDouble() * 3f, 1f).RotatedBy((Main.rand.NextDouble() - 0.5) * 0.78539818525314331);
						Main.dust[num1576].velocity *= 0.5f;
						Main.dust[num1576].velocity.Y = 0f - Math.Abs(Main.dust[num1576].velocity.Y);
					}
					if (flag135 && Main.rand.Next(8) == 0)
					{
						int num1577 = Dust.NewDust(-1f * Vector2.UnitX * Main.rand.Next(30, 60) + base.Center + Vector2.UnitY * Main.rand.Next(-30, -10), 4, 16, (Main.rand.Next(4) != 0) ? 31 : 228, 0f, 0f, 100, default(Color), 1.2f);
						Main.dust[num1577].velocity = new Vector2(-1f * (float)Main.rand.NextDouble() * 2f, 1f).RotatedBy((Main.rand.NextDouble() - 0.5) * 0.78539818525314331);
						Main.dust[num1577].velocity *= 0.5f;
						Main.dust[num1577].velocity.Y = 0f - Math.Abs(Main.dust[num1577].velocity.Y);
					}
					if (flag136 && Main.rand.Next(8) == 0)
					{
						int num1578 = Dust.NewDust(Vector2.UnitX * Main.rand.Next(30, 60) + base.Center + Vector2.UnitY * Main.rand.Next(-30, -10), 4, 16, (Main.rand.Next(4) != 0) ? 31 : 228, 0f, 0f, 100, default(Color), 1.2f);
						Main.dust[num1578].velocity = new Vector2((float)Main.rand.NextDouble() * 2f, 1f).RotatedBy((Main.rand.NextDouble() - 0.5) * 0.78539818525314331);
						Main.dust[num1578].velocity *= 0.5f;
						Main.dust[num1578].velocity.Y = 0f - Math.Abs(Main.dust[num1578].velocity.Y);
					}
				}
				else if (type == 390)
				{
					Transform(382);
				}
				else if (type == 416)
				{
					Transform(518);
				}
				else
				{
					life = 0;
					HitEffect();
					active = false;
				}
			}
			else if (aiStyle == 76)
			{
				if (localAI[3] == 0f && Main.netMode != 1 && type == 395)
				{
					localAI[3] = 1f;
					int[] array5 = new int[4];
					int num1579 = 0;
					for (int num1580 = 0; num1580 < 2; num1580++)
					{
						int num1581 = NewNPC((int)base.Center.X + num1580 * 300 - 150, (int)base.Center.Y, 393, base.whoAmI);
						Main.npc[num1581].ai[1] = num1580;
						Main.npc[num1581].netUpdate = true;
						array5[num1579++] = num1581;
					}
					for (int num1582 = 0; num1582 < 2; num1582++)
					{
						int num1583 = NewNPC((int)base.Center.X + num1582 * 300 - 150, (int)base.Center.Y, 394, base.whoAmI);
						Main.npc[num1583].ai[1] = num1582;
						Main.npc[num1583].netUpdate = true;
						array5[num1579++] = num1583;
					}
					int num1584 = NewNPC((int)base.Center.X, (int)base.Center.Y, 392, base.whoAmI);
					Main.npc[num1584].ai[0] = base.whoAmI;
					Main.npc[num1584].netUpdate = true;
					for (int num1585 = 0; num1585 < 4; num1585++)
					{
						Main.npc[array5[num1585]].ai[0] = base.whoAmI;
					}
					for (int num1586 = 0; num1586 < 4; num1586++)
					{
						Main.npc[num1584].localAI[num1586] = array5[num1586];
					}
				}
				Vector2 center18 = base.Center;
				Player player8 = Main.player[target];
				if (target < 0 || target == 16 || player8.dead || !player8.active)
				{
					TargetClosest();
					player8 = Main.player[target];
					netUpdate = true;
				}
				if ((player8.dead || Vector2.Distance(player8.Center, center18) > 3200f) && this.ai[0] != 1f)
				{
					if (this.ai[0] == 0f)
					{
						this.ai[0] = -1f;
					}
					if (this.ai[0] == 2f)
					{
						this.ai[0] = -2f;
					}
					netUpdate = true;
				}
				if (this.ai[0] == -1f || this.ai[0] == -2f)
				{
					base.velocity.Y -= 0.4f;
					if (timeLeft > 10)
					{
						timeLeft = 10;
					}
					if (!player8.dead)
					{
						timeLeft = 300;
						if (this.ai[0] == -2f)
						{
							this.ai[0] = 2f;
						}
						if (this.ai[0] == 0f)
						{
							this.ai[0] = 0f;
						}
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 0f)
				{
					int num1587 = 0;
					int num1588 = 0;
					if (this.ai[3] >= 580f)
					{
						num1587 = 0;
					}
					else if (this.ai[3] >= 440f)
					{
						num1587 = 5;
					}
					else if (this.ai[3] >= 420f)
					{
						num1587 = 4;
					}
					else if (this.ai[3] >= 280f)
					{
						num1587 = 3;
					}
					else if (this.ai[3] >= 260f)
					{
						num1587 = 2;
					}
					else if (this.ai[3] >= 20f)
					{
						num1587 = 1;
					}
					this.ai[3] += 1f;
					if (this.ai[3] >= 600f)
					{
						this.ai[3] = 0f;
					}
					num1588 = num1587;
					if (this.ai[3] >= 580f)
					{
						num1587 = 0;
					}
					else if (this.ai[3] >= 440f)
					{
						num1587 = 5;
					}
					else if (this.ai[3] >= 420f)
					{
						num1587 = 4;
					}
					else if (this.ai[3] >= 280f)
					{
						num1587 = 3;
					}
					else if (this.ai[3] >= 260f)
					{
						num1587 = 2;
					}
					else if (this.ai[3] >= 20f)
					{
						num1587 = 1;
					}
					if (num1587 != num1588)
					{
						if (num1587 == 0)
						{
							this.ai[2] = 0f;
						}
						if (num1587 == 1)
						{
							this.ai[2] = ((Math.Sign((player8.Center - center18).X) == 1) ? 1 : (-1));
						}
						if (num1587 == 2)
						{
							this.ai[2] = 0f;
						}
						netUpdate = true;
					}
					if (num1587 == 0)
					{
						if (this.ai[2] == 0f)
						{
							this.ai[2] = -600 * Math.Sign((center18 - player8.Center).X);
						}
						Vector2 vector196 = player8.Center + new Vector2(this.ai[2], -250f) - center18;
						if (vector196.Length() < 50f)
						{
							this.ai[3] = 19f;
						}
						else
						{
							vector196.Normalize();
							base.velocity = Vector2.Lerp(base.velocity, vector196 * 16f, 0.1f);
						}
					}
					if (num1587 == 1)
					{
						int num1589 = (int)base.Center.X / 16;
						int num1590 = (int)(base.position.Y + (float)height) / 16;
						int num1591 = 0;
						if (Main.tile[num1589, num1590].nactive() && Main.tileSolid[Main.tile[num1589, num1590].type] && !Main.tileSolidTop[Main.tile[num1589, num1590].type])
						{
							num1591 = 1;
						}
						else
						{
							for (; num1591 < 150 && num1590 + num1591 < Main.maxTilesY; num1591++)
							{
								int num1592 = num1590 + num1591;
								if (Main.tile[num1589, num1592].nactive() && Main.tileSolid[Main.tile[num1589, num1592].type] && !Main.tileSolidTop[Main.tile[num1589, num1592].type])
								{
									num1591--;
									break;
								}
							}
						}
						float num1593 = num1591 * 16;
						float num1594 = 250f;
						if (num1593 < num1594)
						{
							float num1595 = -4f;
							if (0f - num1595 > num1593)
							{
								num1595 = 0f - num1593;
							}
							base.velocity.Y = MathHelper.Lerp(base.velocity.Y, num1595, 0.05f);
						}
						else
						{
							base.velocity.Y *= 0.95f;
						}
						base.velocity.X = 3.5f * this.ai[2];
					}
					switch (num1587)
					{
					case 2:
					{
						if (this.ai[2] == 0f)
						{
							this.ai[2] = 300 * Math.Sign((center18 - player8.Center).X);
						}
						Vector2 vector197 = player8.Center + new Vector2(this.ai[2], -170f) - center18;
						int num1604 = (int)base.Center.X / 16;
						int num1605 = (int)(base.position.Y + (float)height) / 16;
						int num1606 = 0;
						if (Main.tile[num1604, num1605].nactive() && Main.tileSolid[Main.tile[num1604, num1605].type] && !Main.tileSolidTop[Main.tile[num1604, num1605].type])
						{
							num1606 = 1;
						}
						else
						{
							for (; num1606 < 150 && num1605 + num1606 < Main.maxTilesY; num1606++)
							{
								int num1607 = num1605 + num1606;
								if (Main.tile[num1604, num1607].nactive() && Main.tileSolid[Main.tile[num1604, num1607].type] && !Main.tileSolidTop[Main.tile[num1604, num1607].type])
								{
									num1606--;
									break;
								}
							}
						}
						float num1608 = num1606 * 16;
						float num1609 = 170f;
						if (num1608 < num1609)
						{
							vector197.Y -= num1609 - num1608;
						}
						if (vector197.Length() < 70f)
						{
							this.ai[3] = 279f;
							break;
						}
						vector197.Normalize();
						base.velocity = Vector2.Lerp(base.velocity, vector197 * 20f, 0.1f);
						break;
					}
					case 3:
					{
						float num1596 = 0.85f;
						int num1597 = (int)base.Center.X / 16;
						int num1598 = (int)(base.position.Y + (float)height) / 16;
						int num1599 = 0;
						if (Main.tile[num1597, num1598].nactive() && Main.tileSolid[Main.tile[num1597, num1598].type] && !Main.tileSolidTop[Main.tile[num1597, num1598].type])
						{
							num1599 = 1;
						}
						else
						{
							for (; num1599 < 150 && num1598 + num1599 < Main.maxTilesY; num1599++)
							{
								int num1600 = num1598 + num1599;
								if (Main.tile[num1597, num1600].nactive() && Main.tileSolid[Main.tile[num1597, num1600].type] && !Main.tileSolidTop[Main.tile[num1597, num1600].type])
								{
									num1599--;
									break;
								}
							}
						}
						float num1601 = num1599 * 16;
						float num1602 = 170f;
						if (num1601 < num1602)
						{
							float num1603 = -4f;
							if (0f - num1603 > num1601)
							{
								num1603 = 0f - num1601;
							}
							base.velocity.Y = MathHelper.Lerp(base.velocity.Y, num1603, 0.05f);
						}
						else
						{
							base.velocity.Y *= num1596;
						}
						base.velocity.X *= num1596;
						break;
					}
					}
					switch (num1587)
					{
					case 4:
					{
						Vector2 vector198 = player8.Center + new Vector2(0f, -250f) - center18;
						if (vector198.Length() < 50f)
						{
							this.ai[3] = 439f;
							break;
						}
						vector198.Normalize();
						base.velocity = Vector2.Lerp(base.velocity, vector198 * 16f, 0.1f);
						break;
					}
					case 5:
						base.velocity *= 0.85f;
						break;
					}
				}
				else if (this.ai[0] == 1f)
				{
					dontTakeDamage = false;
					base.velocity *= 0.96f;
					float num1610 = 150f;
					this.ai[1] += 1f;
					if (this.ai[1] >= num1610)
					{
						this.ai[0] = 2f;
						this.ai[1] = 0f;
						rotation = 0f;
						netUpdate = true;
					}
					else if (this.ai[1] < 40f)
					{
						rotation = Vector2.UnitY.RotatedBy(this.ai[1] / 40f * ((float)Math.PI * 2f)).Y * 0.2f;
					}
					else if (this.ai[1] < 80f)
					{
						rotation = Vector2.UnitY.RotatedBy(this.ai[1] / 20f * ((float)Math.PI * 2f)).Y * 0.3f;
					}
					else if (this.ai[1] < 120f)
					{
						rotation = Vector2.UnitY.RotatedBy(this.ai[1] / 10f * ((float)Math.PI * 2f)).Y * 0.4f;
					}
					else
					{
						rotation = (this.ai[1] - 120f) / 30f * ((float)Math.PI * 2f);
					}
				}
				else
				{
					if (this.ai[0] != 2f)
					{
						return;
					}
					int num1611 = 100;
					float num1612 = 3600f;
					float num1613 = 120f;
					float num1614 = 60f;
					int num1615 = 0;
					if (this.ai[3] % num1613 >= num1614)
					{
						num1615 = 1;
					}
					int num1616 = num1615;
					num1615 = 0;
					this.ai[3] += 1f;
					if (this.ai[3] % num1613 >= num1614)
					{
						num1615 = 1;
					}
					if (num1615 != num1616)
					{
						if (num1615 == 1)
						{
							this.ai[2] = ((Math.Sign((player8.Center - center18).X) == 1) ? 1 : (-1));
							if (Main.netMode != 1)
							{
								Vector2 center19 = base.Center;
								Projectile.NewProjectile(center19.X, center19.Y, 0f, 0f, 447, num1611, 0f, Main.myPlayer, base.whoAmI + 1);
							}
							Main.PlaySound(2, (int)base.Center.X, (int)base.Center.Y, 12);
						}
						netUpdate = true;
					}
					if (this.ai[3] >= num1612)
					{
						this.ai[0] = 2f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
					else if (num1615 == 0)
					{
						Vector2 vector199 = player8.Center + new Vector2(this.ai[2] * 350f, -250f) - center18;
						vector199.Normalize();
						base.velocity = Vector2.Lerp(base.velocity, vector199 * 16f, 0.1f);
					}
					else
					{
						int num1617 = (int)base.Center.X / 16;
						int num1618 = (int)(base.position.Y + (float)height) / 16;
						int num1619 = 0;
						if (Main.tile[num1617, num1618].nactive() && Main.tileSolid[Main.tile[num1617, num1618].type] && !Main.tileSolidTop[Main.tile[num1617, num1618].type])
						{
							num1619 = 1;
						}
						else
						{
							for (; num1619 < 150 && num1618 + num1619 < Main.maxTilesY; num1619++)
							{
								int num1620 = num1618 + num1619;
								if (Main.tile[num1617, num1620].nactive() && Main.tileSolid[Main.tile[num1617, num1620].type] && !Main.tileSolidTop[Main.tile[num1617, num1620].type])
								{
									num1619--;
									break;
								}
							}
						}
						float num1621 = num1619 * 16;
						float num1622 = 250f;
						if (num1621 < num1622)
						{
							float num1623 = -4f;
							if (0f - num1623 > num1621)
							{
								num1623 = 0f - num1621;
							}
							base.velocity.Y = MathHelper.Lerp(base.velocity.Y, num1623, 0.05f);
						}
						else
						{
							base.velocity.Y *= 0.95f;
						}
						base.velocity.X = 8f * this.ai[2];
					}
					rotation = 0f;
				}
			}
			else if (aiStyle == 77)
			{
				if (this.ai[0] != -1f && this.ai[0] != 2f && Main.rand.Next(200) == 0)
				{
					Main.PlaySound(29, (int)base.Center.X, (int)base.Center.Y, Main.rand.Next(93, 100));
				}
				if (localAI[3] == 0f)
				{
					netUpdate = true;
					localAI[3] = 1f;
					this.ai[0] = -1f;
				}
				if (this.ai[0] == -2f)
				{
					dontTakeDamage = true;
					this.ai[1] += 1f;
					if (this.ai[1] == 30f)
					{
						Main.PlaySound(29, (int)base.Center.X, (int)base.Center.Y, 92);
					}
					if (this.ai[1] < 60f)
					{
						MoonlordDeathDrama.RequestLight(this.ai[1] / 30f, base.Center);
					}
					if (this.ai[1] == 60f)
					{
						this.ai[1] = 0f;
						this.ai[0] = 0f;
						if (Main.netMode != 1 && type == 398)
						{
							this.ai[2] = Main.rand.Next(3);
							this.ai[2] = 0f;
							netUpdate = true;
						}
					}
				}
				if (this.ai[0] == -1f)
				{
					dontTakeDamage = true;
					this.ai[1] += 1f;
					if (this.ai[1] == 30f)
					{
						Main.PlaySound(29, (int)base.Center.X, (int)base.Center.Y, 92);
					}
					if (this.ai[1] < 60f)
					{
						MoonlordDeathDrama.RequestLight(this.ai[1] / 30f, base.Center);
					}
					if (this.ai[1] == 60f)
					{
						this.ai[1] = 0f;
						this.ai[0] = 0f;
						if (Main.netMode != 1 && type == 398)
						{
							this.ai[2] = Main.rand.Next(3);
							this.ai[2] = 0f;
							netUpdate = true;
							int[] array6 = new int[3];
							int num1624 = 0;
							for (int num1625 = 0; num1625 < 2; num1625++)
							{
								int num1626 = NewNPC((int)base.Center.X + num1625 * 800 - 400, (int)base.Center.Y - 100, 397, base.whoAmI);
								Main.npc[num1626].ai[2] = num1625;
								Main.npc[num1626].netUpdate = true;
								array6[num1624++] = num1626;
							}
							int num1627 = NewNPC((int)base.Center.X, (int)base.Center.Y - 400, 396, base.whoAmI);
							Main.npc[num1627].netUpdate = true;
							array6[num1624++] = num1627;
							for (int num1628 = 0; num1628 < 3; num1628++)
							{
								Main.npc[array6[num1628]].ai[3] = base.whoAmI;
							}
							for (int num1629 = 0; num1629 < 3; num1629++)
							{
								localAI[num1629] = array6[num1629];
							}
						}
					}
				}
				if (this.ai[0] == 0f)
				{
					dontTakeDamage = true;
					TargetClosest(false);
					Vector2 value21 = Main.player[target].Center - base.Center + new Vector2(0f, 130f);
					if (value21.Length() > 20f)
					{
						Vector2 desiredVelocity2 = Vector2.Normalize(value21 - base.velocity) * 8f;
						Vector2 velocity2 = base.velocity;
						SimpleFlyMovement(desiredVelocity2, 0.5f);
						base.velocity = Vector2.Lerp(base.velocity, velocity2, 0.5f);
					}
					if (Main.netMode != 1)
					{
						bool flag139 = false;
						if (localAI[0] < 0f || localAI[1] < 0f || localAI[2] < 0f)
						{
							flag139 = true;
						}
						else if (!Main.npc[(int)localAI[0]].active || Main.npc[(int)localAI[0]].type != 397)
						{
							flag139 = true;
						}
						else if (!Main.npc[(int)localAI[1]].active || Main.npc[(int)localAI[1]].type != 397)
						{
							flag139 = true;
						}
						else if (!Main.npc[(int)localAI[2]].active || Main.npc[(int)localAI[2]].type != 396)
						{
							flag139 = true;
						}
						if (flag139)
						{
							life = 0;
							HitEffect();
							active = false;
						}
						bool flag140 = true;
						if (Main.npc[(int)localAI[0]].ai[0] != -2f)
						{
							flag140 = false;
						}
						if (Main.npc[(int)localAI[1]].ai[0] != -2f)
						{
							flag140 = false;
						}
						if (Main.npc[(int)localAI[2]].ai[0] != -2f)
						{
							flag140 = false;
						}
						if (flag140)
						{
							this.ai[0] = 1f;
							dontTakeDamage = false;
							netUpdate = true;
						}
					}
				}
				else if (this.ai[0] == 1f)
				{
					dontTakeDamage = false;
					TargetClosest(false);
					Vector2 value22 = Main.player[target].Center - base.Center + new Vector2(0f, 130f);
					if (value22.Length() > 20f)
					{
						Vector2 desiredVelocity3 = Vector2.Normalize(value22 - base.velocity) * 8f;
						Vector2 velocity3 = base.velocity;
						SimpleFlyMovement(desiredVelocity3, 0.5f);
						base.velocity = Vector2.Lerp(base.velocity, velocity3, 0.5f);
					}
				}
				else if (this.ai[0] == 2f)
				{
					dontTakeDamage = true;
					base.velocity = Vector2.Lerp(value2: new Vector2(base.direction, -0.5f), value1: base.velocity, amount: 0.98f);
					this.ai[1] += 1f;
					if (this.ai[1] < 60f)
					{
						MoonlordDeathDrama.RequestLight(this.ai[1] / 60f, base.Center);
					}
					if (this.ai[1] == 60f)
					{
						for (int num1630 = 0; num1630 < 1000; num1630++)
						{
							Projectile projectile = Main.projectile[num1630];
							if (projectile.active && (projectile.type == 456 || projectile.type == 462 || projectile.type == 455 || projectile.type == 452 || projectile.type == 454))
							{
								projectile.Kill();
							}
						}
						for (int num1631 = 0; num1631 < 200; num1631++)
						{
							NPC nPC8 = Main.npc[num1631];
							if (nPC8.active && nPC8.type == 400)
							{
								nPC8.HitEffect(0, 9999.0);
								nPC8.active = false;
							}
						}
					}
					if (this.ai[1] % 3f == 0f && this.ai[1] < 580f && this.ai[1] > 60f)
					{
						Vector2 vector200 = Utils.RandomVector2(Main.rand, -1f, 1f);
						if (vector200 != Vector2.Zero)
						{
							vector200.Normalize();
						}
						vector200 *= 20f + Main.rand.NextFloat() * 400f;
						bool flag141 = true;
						Vector2 vec8 = base.Center + vector200;
						Point point7 = vec8.ToTileCoordinates();
						if (!WorldGen.InWorld(point7.X, point7.Y))
						{
							flag141 = false;
						}
						if (flag141 && WorldGen.SolidTile(point7.X, point7.Y))
						{
							flag141 = false;
						}
						float num1632 = Main.rand.Next(6, 19);
						float num1633 = (float)Math.PI * 2f / num1632;
						float num1634 = (float)Math.PI * 2f * Main.rand.NextFloat();
						float scaleFactor13 = 1f + Main.rand.NextFloat() * 2f;
						float num1635 = 1f + Main.rand.NextFloat();
						float fadeIn = 0.4f + Main.rand.NextFloat();
						int num1636 = Utils.SelectRandom<int>(Main.rand, 31, 229);
						for (float num1637 = 0f; num1637 < this.ai[1] / 60f; num1637 += 1f)
						{
							Vector2 vector201 = Utils.RandomVector2(Main.rand, -1f, 1f);
							if (vector201 != Vector2.Zero)
							{
								vector201.Normalize();
							}
							vector201 *= 20f + Main.rand.NextFloat() * 800f;
							Vector2 vector202 = base.Center + vector201;
							Point point8 = vector202.ToTileCoordinates();
							bool flag142 = true;
							if (!WorldGen.InWorld(point8.X, point8.Y))
							{
								flag142 = false;
							}
							if (flag142 && WorldGen.SolidTile(point8.X, point8.Y))
							{
								flag142 = false;
							}
							if (flag142)
							{
								Dust dust14 = Main.dust[Dust.NewDust(vector202, 0, 0, num1636)];
								dust14.noGravity = true;
								dust14.position = vector202;
								dust14.velocity = -Vector2.UnitY * scaleFactor13 * (Main.rand.NextFloat() * 0.9f + 1.6f);
								dust14.fadeIn = fadeIn;
								dust14.scale = num1635;
							}
						}
					}
					if (this.ai[1] % 15f == 0f && this.ai[1] < 480f && this.ai[1] >= 90f && Main.netMode != 1)
					{
						Vector2 vector203 = Utils.RandomVector2(Main.rand, -1f, 1f);
						if (vector203 != Vector2.Zero)
						{
							vector203.Normalize();
						}
						vector203 *= 20f + Main.rand.NextFloat() * 400f;
						bool flag143 = true;
						Vector2 vec9 = base.Center + vector203;
						Point point9 = vec9.ToTileCoordinates();
						if (!WorldGen.InWorld(point9.X, point9.Y))
						{
							flag143 = false;
						}
						if (flag143 && WorldGen.SolidTile(point9.X, point9.Y))
						{
							flag143 = false;
						}
						if (flag143)
						{
							float num1638 = (float)(Main.rand.Next(4) < 2).ToDirectionInt() * ((float)Math.PI / 8f + (float)Math.PI / 4f * Main.rand.NextFloat());
							Vector2 vector204 = new Vector2(0f, (0f - Main.rand.NextFloat()) * 0.5f - 0.5f).RotatedBy(num1638) * 6f;
							Projectile.NewProjectile(vec9.X, vec9.Y, vector204.X, vector204.Y, 622, 0, 0f, Main.myPlayer);
						}
					}
					if (this.ai[1] == 1f)
					{
						Main.PlaySound(4, (int)base.Center.X, (int)base.Center.Y, 61);
					}
					if (this.ai[1] >= 480f)
					{
						MoonlordDeathDrama.RequestLight((this.ai[1] - 480f) / 120f, base.Center);
					}
					if (this.ai[1] >= 600f)
					{
						life = 0;
						HitEffect(0, 1337.0);
						checkDead();
						return;
					}
				}
				else if (this.ai[0] == 3f)
				{
					dontTakeDamage = true;
					base.velocity = Vector2.Lerp(value2: new Vector2(base.direction, -0.5f), value1: base.velocity, amount: 0.98f);
					this.ai[1] += 1f;
					if (this.ai[1] < 60f)
					{
						MoonlordDeathDrama.RequestLight(this.ai[1] / 40f, base.Center);
					}
					if (this.ai[1] == 40f)
					{
						for (int num1639 = 0; num1639 < 1000; num1639++)
						{
							Projectile projectile2 = Main.projectile[num1639];
							if (projectile2.active && (projectile2.type == 456 || projectile2.type == 462 || projectile2.type == 455 || projectile2.type == 452 || projectile2.type == 454))
							{
								projectile2.active = false;
								if (Main.netMode != 1)
								{
									NetMessage.SendData(27, -1, -1, "", num1639);
								}
							}
						}
						for (int num1640 = 0; num1640 < 200; num1640++)
						{
							NPC nPC9 = Main.npc[num1640];
							if (nPC9.active && nPC9.type == 400)
							{
								nPC9.active = false;
								if (Main.netMode != 1)
								{
									NetMessage.SendData(23, -1, -1, "", nPC9.whoAmI);
								}
							}
						}
						for (int num1641 = 0; num1641 < 500; num1641++)
						{
							Gore gore = Main.gore[num1641];
							if (gore.active && gore.type >= 619 && gore.type <= 622)
							{
								gore.active = false;
							}
						}
					}
					if (this.ai[1] >= 60f)
					{
						for (int num1642 = 0; num1642 < 200; num1642++)
						{
							NPC nPC10 = Main.npc[num1642];
							if (nPC10.active && (nPC10.type == 400 || nPC10.type == 397 || nPC10.type == 396))
							{
								nPC10.active = false;
								if (Main.netMode != 1)
								{
									NetMessage.SendData(23, -1, -1, "", nPC10.whoAmI);
								}
							}
						}
						active = false;
						if (Main.netMode != 1)
						{
							NetMessage.SendData(23, -1, -1, "", base.whoAmI);
						}
						LunarApocalypseIsUp = false;
						if (Main.netMode == 2)
						{
							NetMessage.SendData(7);
						}
						return;
					}
				}
				bool flag144 = false;
				if (this.ai[0] == -2f || this.ai[0] == -1f || this.ai[0] == -2f || this.ai[0] == 3f)
				{
					flag144 = true;
				}
				if (Main.player[target].active && !Main.player[target].dead)
				{
					flag144 = true;
				}
				if (!flag144)
				{
					for (int num1643 = 0; num1643 < 16; num1643++)
					{
						if (Main.player[num1643].active && !Main.player[num1643].dead)
						{
							flag144 = true;
							break;
						}
					}
				}
				if (!flag144)
				{
					this.ai[0] = 3f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
				if (!(this.ai[0] >= 0f) || !(this.ai[0] < 2f) || Main.netMode == 1 || !(Distance(Main.player[target].Center) > 2400f))
				{
					return;
				}
				this.ai[0] = -2f;
				netUpdate = true;
				Vector2 vector205 = Main.player[target].Center - Vector2.UnitY * 150f - base.Center;
				base.position += vector205;
				if (Main.npc[(int)localAI[0]].active)
				{
					Main.npc[(int)localAI[0]].position += vector205;
					Main.npc[(int)localAI[0]].netUpdate = true;
				}
				if (Main.npc[(int)localAI[1]].active)
				{
					Main.npc[(int)localAI[1]].position += vector205;
					Main.npc[(int)localAI[1]].netUpdate = true;
				}
				if (Main.npc[(int)localAI[2]].active)
				{
					Main.npc[(int)localAI[2]].position += vector205;
					Main.npc[(int)localAI[2]].netUpdate = true;
				}
				for (int num1644 = 0; num1644 < 200; num1644++)
				{
					NPC nPC11 = Main.npc[num1644];
					if (nPC11.active && nPC11.type == 400)
					{
						nPC11.position += vector205;
						nPC11.netUpdate = true;
					}
				}
			}
			else if (aiStyle == 78)
			{
				InitializeMoonLordAttacks();
				if (!Main.npc[(int)this.ai[3]].active || Main.npc[(int)this.ai[3]].type != 398)
				{
					life = 0;
					HitEffect();
					active = false;
				}
				bool flag145 = this.ai[2] == 0f;
				float num1645 = -flag145.ToDirectionInt();
				spriteDirection = (int)num1645;
				dontTakeDamage = (frameCounter >= 21.0);
				Vector2 vector206 = new Vector2(30f, 66f);
				float num1646 = 0f;
				float num1647 = 0f;
				bool flag146 = true;
				int num1648 = 0;
				if (this.ai[0] != -2f)
				{
					float num1649 = this.ai[0];
					this.ai[1] += 1f;
					int num1650 = (int)Main.npc[(int)this.ai[3]].ai[2];
					int num1651 = (!flag145) ? 1 : 0;
					int num1652 = 0;
					int num1653 = 0;
					for (; num1652 < 5; num1652++)
					{
						num1647 = MoonLordAttacksArray[num1650, num1651, 1, num1652];
						if (!(num1647 + (float)num1653 <= this.ai[1]))
						{
							break;
						}
						num1653 += (int)num1647;
					}
					if (num1652 == 5)
					{
						num1652 = 0;
						this.ai[1] = 0f;
						num1647 = MoonLordAttacksArray[num1650, num1651, 1, num1652];
						num1653 = 0;
					}
					this.ai[0] = MoonLordAttacksArray[num1650, num1651, 0, num1652];
					num1646 = (int)this.ai[1] - num1653;
					if (this.ai[0] != num1649)
					{
						netUpdate = true;
					}
				}
				if (this.ai[0] == -2f)
				{
					damage = 80;
					num1648 = 0;
					dontTakeDamage = true;
					this.ai[1] += 1f;
					if (this.ai[1] >= 32f)
					{
						this.ai[1] = 0f;
					}
					if (this.ai[1] < 0f)
					{
						this.ai[1] = 0f;
					}
					Vector2 center20 = Main.npc[(int)this.ai[3]].Center;
					Vector2 value25 = center20 + new Vector2(350f * num1645, -100f);
					Vector2 vector207 = value25 - base.Center;
					if (vector207.Length() > 20f)
					{
						vector207.Normalize();
						vector207 *= 6f;
						Vector2 velocity4 = base.velocity;
						if (vector207 != Vector2.Zero)
						{
							SimpleFlyMovement(vector207, 0.3f);
						}
						base.velocity = Vector2.Lerp(velocity4, base.velocity, 0.5f);
					}
				}
				else if (this.ai[0] == 0f)
				{
					num1648 = 3;
					localAI[1] -= 0.05f;
					if (localAI[1] < 0f)
					{
						localAI[1] = 0f;
					}
					Vector2 center21 = Main.npc[(int)this.ai[3]].Center;
					Vector2 value26 = center21 + new Vector2(350f * num1645, -100f);
					Vector2 vector208 = value26 - base.Center;
					if (vector208.Length() > 20f)
					{
						vector208.Normalize();
						vector208 *= 6f;
						Vector2 velocity5 = base.velocity;
						if (vector208 != Vector2.Zero)
						{
							SimpleFlyMovement(vector208, 0.3f);
						}
						base.velocity = Vector2.Lerp(velocity5, base.velocity, 0.5f);
					}
				}
				else if (this.ai[0] == 1f)
				{
					num1648 = 0;
					int num1654 = 7;
					int num1655 = 4;
					if (num1646 >= (float)(num1654 * num1655 * 2))
					{
						localAI[1] -= 0.07f;
						if (localAI[1] < 0f)
						{
							localAI[1] = 0f;
						}
					}
					else if (num1646 >= (float)(num1654 * num1655))
					{
						localAI[1] += 0.05f;
						if (localAI[1] > 0.75f)
						{
							localAI[1] = 0.75f;
						}
						float num1656 = (float)Math.PI * 2f * (num1646 % (float)(num1654 * num1655)) / (float)(num1654 * num1655) - (float)Math.PI / 2f;
						localAI[0] = new Vector2((float)Math.Cos(num1656) * vector206.X, (float)Math.Sin(num1656) * vector206.Y).ToRotation();
						if (num1646 % (float)num1655 == 0f)
						{
							Vector2 value27 = new Vector2(1f * (0f - num1645), 3f);
							Vector2 vector209 = Utils.Vector2FromElipse(localAI[0].ToRotationVector2(), vector206 * localAI[1]);
							Vector2 vector210 = base.Center + Vector2.Normalize(vector209) * vector206.Length() * 0.4f + value27;
							Vector2 vector211 = Vector2.Normalize(vector209) * 8f;
							float ai = ((float)Math.PI * 2f * (float)Main.rand.NextDouble() - (float)Math.PI) / 30f + (float)Math.PI / 180f * num1645;
							Projectile.NewProjectile(vector210.X, vector210.Y, vector211.X, vector211.Y, 452, 30, 0f, Main.myPlayer, 0f, ai);
						}
					}
					else
					{
						localAI[1] += 0.02f;
						if (localAI[1] > 0.75f)
						{
							localAI[1] = 0.75f;
						}
						float num1657 = (float)Math.PI * 2f * (num1646 % (float)(num1654 * num1655)) / (float)(num1654 * num1655) - (float)Math.PI / 2f;
						localAI[0] = new Vector2((float)Math.Cos(num1657) * vector206.X, (float)Math.Sin(num1657) * vector206.Y).ToRotation();
					}
				}
				else if (this.ai[0] == 2f)
				{
					localAI[1] -= 0.05f;
					if (localAI[1] < 0f)
					{
						localAI[1] = 0f;
					}
					Vector2 center22 = Main.npc[(int)this.ai[3]].Center;
					Vector2 value28 = new Vector2(220f * num1645, -60f) + center22;
					value28 += new Vector2(num1645 * 100f, -50f);
					Vector2 value29 = new Vector2(400f * num1645, -60f);
					if (num1646 < 30f)
					{
						Vector2 vector212 = value28 - base.Center;
						if (vector212 != Vector2.Zero)
						{
							Vector2 vector213 = vector212;
							vector213.Normalize();
							base.velocity = Vector2.SmoothStep(base.velocity, vector213 * Math.Min(8f, vector212.Length()), 0.2f);
						}
					}
					else if (num1646 < 210f)
					{
						num1648 = 1;
						int num1658 = (int)num1646 - 30;
						if (num1658 % 30 == 0 && Main.netMode != 1)
						{
							Vector2 vector214 = new Vector2(5f * num1645, -8f);
							int num1659 = num1658 / 30;
							vector214.X += ((float)num1659 - 3.5f) * num1645 * 3f;
							vector214.Y += ((float)num1659 - 4.5f) * 1f;
							vector214 *= 1.2f;
							Projectile.NewProjectile(base.Center.X, base.Center.Y, vector214.X, vector214.Y, 454, 50, 1f, Main.myPlayer, 0f, base.whoAmI);
						}
						Vector2 vector215 = Vector2.SmoothStep(value28, value28 + value29, (num1646 - 30f) / 180f) - base.Center;
						if (vector215 != Vector2.Zero)
						{
							Vector2 vector216 = vector215;
							vector216.Normalize();
							base.velocity = Vector2.Lerp(base.velocity, vector216 * Math.Min(20f, vector215.Length()), 0.5f);
						}
					}
					else if (num1646 < 282f)
					{
						num1648 = 0;
						base.velocity *= 0.9f;
					}
					else if (num1646 < 287f)
					{
						num1648 = 1;
						base.velocity *= 0.9f;
					}
					else if (num1646 < 292f)
					{
						num1648 = 2;
						base.velocity *= 0.9f;
					}
					else if (num1646 < 300f)
					{
						num1648 = 3;
						if (num1646 == 292f && Main.netMode != 1)
						{
							int num1660 = Player.FindClosest(base.position, width, height);
							Vector2 velocity6 = Vector2.Normalize(Main.player[num1660].Center - (base.Center + Vector2.UnitY * -350f));
							if (float.IsNaN(velocity6.X) || float.IsNaN(velocity6.Y))
							{
								velocity6 = Vector2.UnitY;
							}
							velocity6 *= 12f;
							for (int num1661 = 0; num1661 < 1000; num1661++)
							{
								Projectile projectile3 = Main.projectile[num1661];
								if (projectile3.active && projectile3.type == 454 && projectile3.ai[1] == (float)base.whoAmI && projectile3.ai[0] != -1f)
								{
									projectile3.ai[0] = -1f;
									projectile3.velocity = velocity6;
									projectile3.netUpdate = true;
								}
							}
						}
						Vector2 vector217 = Vector2.SmoothStep(value28, value28 + value29, 1f - (num1646 - 270f) / 30f) - base.Center;
						if (vector217 != Vector2.Zero)
						{
							Vector2 vector218 = vector217;
							vector218.Normalize();
							base.velocity = Vector2.Lerp(base.velocity, vector218 * Math.Min(14f, vector217.Length()), 0.1f);
						}
					}
					else
					{
						num1648 = 3;
						Vector2 vector219 = value28 - base.Center;
						if (vector219 != Vector2.Zero)
						{
							Vector2 vector220 = vector219;
							vector220.Normalize();
							base.velocity = Vector2.SmoothStep(base.velocity, vector220 * Math.Min(8f, vector219.Length()), 0.2f);
						}
					}
				}
				else if (this.ai[0] == 3f)
				{
					if (num1646 == 0f)
					{
						TargetClosest(false);
						netUpdate = true;
					}
					Vector2 v2 = Main.player[target].Center + Main.player[target].velocity * 20f - base.Center;
					localAI[0] = localAI[0].AngleLerp(v2.ToRotation(), 0.5f);
					localAI[1] += 0.05f;
					if (localAI[1] > 1f)
					{
						localAI[1] = 1f;
					}
					if (num1646 == num1647 - 35f)
					{
						Main.PlaySound(4, (int)base.position.X, (int)base.position.Y, 6);
					}
					if ((num1646 == num1647 - 14f || num1646 == num1647 - 7f || num1646 == num1647) && Main.netMode != 1)
					{
						Vector2 vector221 = Utils.Vector2FromElipse(localAI[0].ToRotationVector2(), vector206 * localAI[1]);
						Vector2 vector222 = Vector2.Normalize(v2) * 8f;
						Projectile.NewProjectile(base.Center.X + vector221.X, base.Center.Y + vector221.Y, vector222.X, vector222.Y, 462, 30, 0f, Main.myPlayer);
					}
				}
				if (flag146)
				{
					Vector2 center23 = Main.npc[(int)this.ai[3]].Center;
					Vector2 value30 = new Vector2(220f * num1645, -60f) + center23;
					Vector2 vector223 = value30 + new Vector2(num1645 * 110f, -150f);
					Vector2 max = vector223 + new Vector2(num1645 * 370f, 150f);
					if (vector223.X > max.X)
					{
						Utils.Swap(ref vector223.X, ref max.X);
					}
					if (vector223.Y > max.Y)
					{
						Utils.Swap(ref vector223.Y, ref max.Y);
					}
					Vector2 value31 = Vector2.Clamp(base.Center + base.velocity, vector223, max);
					if (value31 != base.Center + base.velocity)
					{
						base.Center = value31 - base.velocity;
					}
				}
				int num1662 = num1648 * 7;
				if ((double)num1662 > frameCounter)
				{
					frameCounter += 1.0;
				}
				if ((double)num1662 < frameCounter)
				{
					frameCounter -= 1.0;
				}
				if (frameCounter < 0.0)
				{
					frameCounter = 0.0;
				}
				if (frameCounter > 21.0)
				{
					frameCounter = 21.0;
				}
				int num1663 = 0;
				if (flag145)
				{
					num1663 = 0;
				}
				switch (num1663)
				{
				case 1:
					if (this.ai[0] == 0f)
					{
						if ((this.ai[1] += 1f) >= 20f)
						{
							this.ai[1] = 0f;
							this.ai[0] = 1f;
							netUpdate = true;
						}
						base.velocity = Vector2.UnitX * 4f;
					}
					else if (this.ai[0] == 1f)
					{
						if ((this.ai[1] += 1f) >= 20f)
						{
							this.ai[1] = 0f;
							this.ai[0] = 2f;
							netUpdate = true;
						}
						base.velocity = Vector2.UnitX * -4f;
					}
					else if (this.ai[0] == 2f || this.ai[0] == 4f)
					{
						if ((this.ai[1] += 1f) >= 20f)
						{
							this.ai[1] = 0f;
							this.ai[0] += 1f;
							netUpdate = true;
						}
						base.velocity = Vector2.UnitY * -4f * (flag145 ? 1 : (-1));
					}
					else
					{
						if (this.ai[0] != 3f && this.ai[0] != 5f)
						{
							break;
						}
						if ((this.ai[1] += 1f) >= 20f)
						{
							this.ai[1] = 0f;
							this.ai[0] += 1f;
							if (this.ai[0] == 6f)
							{
								this.ai[0] = 0f;
							}
							netUpdate = true;
						}
						base.velocity = Vector2.UnitY * 4f * (flag145 ? 1 : (-1));
					}
					break;
				case 2:
				{
					new Vector2(30f, 66f);
					TargetClosest(false);
					Vector2 v3 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - base.Center;
					float num1664 = v3.Length() / 200f;
					if (num1664 > 1f)
					{
						num1664 = 1f;
					}
					num1664 = 1f - num1664;
					num1664 *= 2f;
					if (num1664 > 1f)
					{
						num1664 = 1f;
					}
					localAI[0] = v3.ToRotation();
					localAI[1] = num1664;
					localAI[1] = 1f;
					break;
				}
				case 3:
				{
					int num1669 = 7;
					int num1670 = 4;
					this.ai[1] += 1f;
					if (this.ai[1] >= (float)(num1669 * num1670 * 10))
					{
						this.ai[1] = 0f;
						break;
					}
					if (this.ai[1] >= (float)(num1669 * num1670))
					{
						localAI[1] -= 0.07f;
						if (localAI[1] < 0f)
						{
							localAI[1] = 0f;
						}
						break;
					}
					localAI[1] += 0.05f;
					if (localAI[1] > 0.75f)
					{
						localAI[1] = 0.75f;
					}
					float num1671 = (float)Math.PI * 2f * (this.ai[1] % (float)(num1669 * num1670)) / (float)(num1669 * num1670) - (float)Math.PI / 2f;
					localAI[0] = new Vector2((float)Math.Cos(num1671) * vector206.X, (float)Math.Sin(num1671) * vector206.Y).ToRotation();
					if (this.ai[1] % (float)num1670 == 0f)
					{
						Vector2 value34 = new Vector2(1f * (0f - num1645), 3f);
						Vector2 vector231 = Utils.Vector2FromElipse(localAI[0].ToRotationVector2(), vector206 * localAI[1]);
						Vector2 vector232 = base.Center + Vector2.Normalize(vector231) * vector206.Length() * 0.4f + value34;
						Vector2 vector233 = Vector2.Normalize(vector231) * 8f;
						float ai2 = ((float)Math.PI * 2f * (float)Main.rand.NextDouble() - (float)Math.PI) / 30f + (float)Math.PI / 180f * num1645;
						Projectile.NewProjectile(vector232.X, vector232.Y, vector233.X, vector233.Y, 452, 5, 0f, Main.myPlayer, 0f, ai2);
					}
					break;
				}
				case 4:
				{
					Vector2 center24 = Main.npc[(int)this.ai[3]].Center;
					Vector2 value32 = new Vector2(220f * num1645, -60f) + center24;
					value32 += new Vector2(num1645 * 100f, -50f);
					Vector2 value33 = new Vector2(400f * num1645, -60f);
					this.ai[1] += 1f;
					if (this.ai[1] < 30f)
					{
						Vector2 vector224 = value32 - base.Center;
						if (vector224 != Vector2.Zero)
						{
							Vector2 vector225 = vector224;
							vector225.Normalize();
							base.velocity = Vector2.SmoothStep(base.velocity, vector225 * Math.Min(8f, vector224.Length()), 0.2f);
						}
					}
					else if (this.ai[1] < 210f)
					{
						int num1665 = (int)this.ai[1] - 30;
						if (num1665 % 30 == 0 && Main.netMode != 1)
						{
							Vector2 vector226 = new Vector2(5f * num1645, -8f);
							int num1666 = num1665 / 30;
							vector226.X += ((float)num1666 - 3.5f) * num1645 * 3f;
							vector226.Y += ((float)num1666 - 4.5f) * 1f;
							vector226 *= 1.2f;
							Projectile.NewProjectile(base.Center.X, base.Center.Y, vector226.X, vector226.Y, 454, 1, 1f, Main.myPlayer, 0f, base.whoAmI);
						}
						Vector2 vector227 = Vector2.SmoothStep(value32, value32 + value33, (this.ai[1] - 30f) / 180f) - base.Center;
						if (vector227 != Vector2.Zero)
						{
							Vector2 vector228 = vector227;
							vector228.Normalize();
							base.velocity = Vector2.Lerp(base.velocity, vector228 * Math.Min(4f, vector227.Length()), 0.1f);
						}
					}
					else if (this.ai[1] < 270f)
					{
						base.velocity *= 0.9f;
					}
					else if (this.ai[1] < 300f)
					{
						if (this.ai[1] == 270f && Main.netMode != 1)
						{
							int num1667 = Player.FindClosest(base.position, width, height);
							Vector2 velocity7 = Vector2.Normalize(Main.player[num1667].Center - (base.Center + Vector2.UnitY * -350f));
							if (float.IsNaN(velocity7.X) || float.IsNaN(velocity7.Y))
							{
								velocity7 = Vector2.UnitY;
							}
							velocity7 *= 12f;
							for (int num1668 = 0; num1668 < 1000; num1668++)
							{
								Projectile projectile4 = Main.projectile[num1668];
								if (projectile4.active && projectile4.type == 454 && projectile4.ai[1] == (float)base.whoAmI && projectile4.ai[0] != -1f)
								{
									projectile4.ai[0] = -1f;
									projectile4.velocity = velocity7;
									projectile4.netUpdate = true;
								}
							}
						}
						Vector2 vector229 = Vector2.SmoothStep(value32, value32 + value33, 1f - (this.ai[1] - 270f) / 30f) - base.Center;
						if (vector229 != Vector2.Zero)
						{
							Vector2 vector230 = vector229;
							vector230.Normalize();
							base.velocity = Vector2.Lerp(base.velocity, vector230 * Math.Min(14f, vector229.Length()), 0.1f);
						}
					}
					else
					{
						this.ai[1] = 0f;
					}
					break;
				}
				case 5:
					dontTakeDamage = true;
					this.ai[1] += 1f;
					if (this.ai[1] >= 40f)
					{
						this.ai[1] = 0f;
					}
					break;
				}
			}
			else if (aiStyle == 79)
			{
				if (!Main.npc[(int)this.ai[3]].active || Main.npc[(int)this.ai[3]].type != 398)
				{
					life = 0;
					HitEffect();
					active = false;
				}
				dontTakeDamage = (localAI[3] >= 15f);
				base.velocity = Vector2.Zero;
				base.Center = Main.npc[(int)this.ai[3]].Center + new Vector2(0f, -400f);
				Vector2 value35 = new Vector2(27f, 59f);
				float num1672 = 0f;
				float num1673 = 0f;
				int num1674 = 0;
				int num1675 = 0;
				if (this.ai[0] >= 0f)
				{
					float num1676 = this.ai[0];
					this.ai[1] += 1f;
					int num1677 = (int)Main.npc[(int)this.ai[3]].ai[2];
					int num1678 = 2;
					int num1679 = 0;
					int num1680 = 0;
					for (; num1679 < 5; num1679++)
					{
						num1673 = MoonLordAttacksArray[num1677, num1678, 1, num1679];
						if (!(num1673 + (float)num1680 <= this.ai[1]))
						{
							break;
						}
						num1680 += (int)num1673;
					}
					if (num1679 == 5)
					{
						num1679 = 0;
						this.ai[1] = 0f;
						num1673 = MoonLordAttacksArray[num1677, num1678, 1, num1679];
						num1680 = 0;
					}
					this.ai[0] = MoonLordAttacksArray[num1677, num1678, 0, num1679];
					num1672 = (int)this.ai[1] - num1680;
					if (this.ai[0] != num1676)
					{
						netUpdate = true;
					}
				}
				if (this.ai[0] == -3f)
				{
					damage = 0;
					dontTakeDamage = true;
					rotation = MathHelper.Lerp(rotation, (float)Math.PI / 12f, 0.07f);
					this.ai[1] += 1f;
					if (this.ai[1] >= 32f)
					{
						this.ai[1] = 0f;
					}
					if (this.ai[1] < 0f)
					{
						this.ai[1] = 0f;
					}
					if (localAI[2] < 14f)
					{
						localAI[2] += 1f;
					}
				}
				else if (this.ai[0] == -2f)
				{
					if (Main.npc[(int)this.ai[3]].ai[0] == 2f)
					{
						this.ai[0] = -3f;
						return;
					}
					damage = 80;
					dontTakeDamage = true;
					this.ai[1] += 1f;
					if (this.ai[1] >= 32f)
					{
						this.ai[1] = 0f;
					}
					if (this.ai[1] < 0f)
					{
						this.ai[1] = 0f;
					}
					this.ai[2] += 1f;
					if (this.ai[2] >= 555f)
					{
						this.ai[2] = 0f;
					}
					if (this.ai[2] >= 120f)
					{
						num1672 = this.ai[2] - 120f;
						num1673 = 555f;
						num1674 = 2;
						Vector2 value36 = new Vector2(0f, 216f);
						if (num1672 == 0f && Main.netMode != 1)
						{
							Vector2 value37 = base.Center + value36;
							for (int num1681 = 0; num1681 < 16; num1681++)
							{
								Player player9 = Main.player[num1681];
								if (player9.active && !player9.dead && Vector2.Distance(player9.Center, value37) <= 3000f)
								{
									Vector2 value38 = Main.player[target].Center - value37;
									if (value38 != Vector2.Zero)
									{
										value38.Normalize();
									}
									Projectile.NewProjectile(value37.X, value37.Y, value38.X, value38.Y, 456, 0, 0f, Main.myPlayer, base.whoAmI + 1, num1681);
								}
							}
						}
						if ((num1672 == 120f || num1672 == 180f || num1672 == 240f) && Main.netMode != 1)
						{
							for (int num1682 = 0; num1682 < 1000; num1682++)
							{
								Projectile projectile5 = Main.projectile[num1682];
								if (projectile5.active && projectile5.type == 456 && Main.player[(int)projectile5.ai[1]].HasBuff(145) != -1)
								{
									Vector2 center25 = Main.player[target].Center;
									int num1683 = NewNPC((int)center25.X, (int)center25.Y, 401);
									Main.npc[num1683].netUpdate = true;
									Main.npc[num1683].ai[0] = base.whoAmI + 1;
									Main.npc[num1683].ai[1] = num1682;
								}
							}
						}
					}
				}
				else if (this.ai[0] == 0f)
				{
					num1675 = 3;
					TargetClosest(false);
					Vector2 v4 = Main.player[target].Center - base.Center - new Vector2(0f, -22f);
					float num1684 = v4.Length() / 500f;
					if (num1684 > 1f)
					{
						num1684 = 1f;
					}
					num1684 = 1f - num1684;
					num1684 *= 2f;
					if (num1684 > 1f)
					{
						num1684 = 1f;
					}
					localAI[0] = v4.ToRotation();
					localAI[1] = num1684;
					localAI[2] = MathHelper.Lerp(localAI[2], 1f, 0.2f);
				}
				if (this.ai[0] == 1f)
				{
					if (num1672 < 180f)
					{
						localAI[1] -= 0.05f;
						if (localAI[1] < 0f)
						{
							localAI[1] = 0f;
						}
						if (num1672 >= 60f)
						{
							Vector2 center26 = base.Center;
							int num1685 = 0;
							if (num1672 >= 120f)
							{
								num1685 = 1;
							}
							for (int num1686 = 0; num1686 < 1 + num1685; num1686++)
							{
								int num1687 = 229;
								float num1688 = 0.8f;
								if (num1686 % 2 == 1)
								{
									num1687 = 229;
									num1688 = 1.65f;
								}
								Vector2 vector234 = center26 + ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * value35 / 2f;
								int num1689 = Dust.NewDust(vector234 - Vector2.One * 8f, 16, 16, num1687, base.velocity.X / 2f, base.velocity.Y / 2f);
								Main.dust[num1689].velocity = Vector2.Normalize(center26 - vector234) * 3.5f * (10f - (float)num1685 * 2f) / 10f;
								Main.dust[num1689].noGravity = true;
								Main.dust[num1689].scale = num1688;
								Main.dust[num1689].customData = this;
							}
						}
					}
					else if (num1672 < num1673 - 15f)
					{
						if (num1672 == 180f && Main.netMode != 1)
						{
							TargetClosest(false);
							Vector2 spinningpoint12 = Main.player[target].Center - base.Center;
							spinningpoint12.Normalize();
							float num1690 = -1f;
							if (spinningpoint12.X < 0f)
							{
								num1690 = 1f;
							}
							spinningpoint12 = spinningpoint12.RotatedBy((0f - num1690) * ((float)Math.PI * 2f) / 6f);
							Projectile.NewProjectile(base.Center.X, base.Center.Y, spinningpoint12.X, spinningpoint12.Y, 455, 75, 0f, Main.myPlayer, num1690 * ((float)Math.PI * 2f) / 540f, base.whoAmI);
							this.ai[2] = (spinningpoint12.ToRotation() + (float)Math.PI * 3f) * num1690;
							netUpdate = true;
						}
						localAI[1] += 0.05f;
						if (localAI[1] > 1f)
						{
							localAI[1] = 1f;
						}
						float num1691 = (this.ai[2] >= 0f).ToDirectionInt();
						float num1692 = this.ai[2];
						if (num1692 < 0f)
						{
							num1692 *= -1f;
						}
						num1692 += (float)Math.PI * -3f;
						num1692 += num1691 * ((float)Math.PI * 2f) / 540f;
						localAI[0] = num1692;
						this.ai[2] = (num1692 + (float)Math.PI * 3f) * num1691;
					}
					else
					{
						localAI[1] -= 0.07f;
						if (localAI[1] < 0f)
						{
							localAI[1] = 0f;
						}
						num1675 = 3;
					}
				}
				else if (this.ai[0] == 2f)
				{
					num1674 = 2;
					num1675 = 3;
					Vector2 value39 = new Vector2(0f, 216f);
					if (num1672 == 0f && Main.netMode != 1)
					{
						Vector2 value40 = base.Center + value39;
						for (int num1693 = 0; num1693 < 16; num1693++)
						{
							Player player10 = Main.player[num1693];
							if (player10.active && !player10.dead && Vector2.Distance(player10.Center, value40) <= 3000f)
							{
								Vector2 value41 = Main.player[target].Center - value40;
								if (value41 != Vector2.Zero)
								{
									value41.Normalize();
								}
								Projectile.NewProjectile(value40.X, value40.Y, value41.X, value41.Y, 456, 0, 0f, Main.myPlayer, base.whoAmI + 1, num1693);
							}
						}
					}
					if ((num1672 == 120f || num1672 == 180f || num1672 == 240f) && Main.netMode != 1)
					{
						for (int num1694 = 0; num1694 < 1000; num1694++)
						{
							Projectile projectile6 = Main.projectile[num1694];
							if (projectile6.active && projectile6.type == 456 && Main.player[(int)projectile6.ai[1]].HasBuff(145) != -1)
							{
								Vector2 center27 = Main.player[target].Center;
								int num1695 = NewNPC((int)center27.X, (int)center27.Y, 401);
								Main.npc[num1695].netUpdate = true;
								Main.npc[num1695].ai[0] = base.whoAmI + 1;
								Main.npc[num1695].ai[1] = num1694;
							}
						}
					}
				}
				else if (this.ai[0] == 3f)
				{
					if (num1672 == 0f)
					{
						TargetClosest(false);
						netUpdate = true;
					}
					Vector2 v5 = Main.player[target].Center + Main.player[target].velocity * 20f - base.Center;
					localAI[0] = localAI[0].AngleLerp(v5.ToRotation(), 0.5f);
					localAI[1] += 0.05f;
					if (localAI[1] > 1f)
					{
						localAI[1] = 1f;
					}
					if (num1672 == num1673 - 35f)
					{
						Main.PlaySound(4, (int)base.position.X, (int)base.position.Y, 6);
					}
					if ((num1672 == num1673 - 14f || num1672 == num1673 - 7f || num1672 == num1673) && Main.netMode != 1)
					{
						Vector2 vector235 = Utils.Vector2FromElipse(localAI[0].ToRotationVector2(), value35 * localAI[1]);
						Vector2 vector236 = Vector2.Normalize(v5) * 8f;
						Projectile.NewProjectile(base.Center.X + vector235.X, base.Center.Y + vector235.Y, vector236.X, vector236.Y, 462, 30, 0f, Main.myPlayer);
					}
				}
				int num1696 = num1674 * 7;
				if ((float)num1696 > localAI[2])
				{
					localAI[2] += 1f;
				}
				if ((float)num1696 < localAI[2])
				{
					localAI[2] -= 1f;
				}
				if (localAI[2] < 0f)
				{
					localAI[2] = 0f;
				}
				if (localAI[2] > 14f)
				{
					localAI[2] = 14f;
				}
				int num1697 = num1675 * 5;
				if ((float)num1697 > localAI[3])
				{
					localAI[3] += 1f;
				}
				if ((float)num1697 < localAI[3])
				{
					localAI[3] -= 1f;
				}
				if (localAI[3] < 0f)
				{
					localAI[2] = 0f;
				}
				if (localAI[3] > 15f)
				{
					localAI[2] = 15f;
				}
				int num1698 = 0;
				if (num1698 == 1)
				{
					new Vector2(27f, 59f);
					TargetClosest(false);
					Vector2 v6 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - base.Center;
					float num1699 = v6.Length() / 200f;
					if (num1699 > 1f)
					{
						num1699 = 1f;
					}
					num1699 = 1f - num1699;
					num1699 *= 2f;
					if (num1699 > 1f)
					{
						num1699 = 1f;
					}
					localAI[0] = v6.ToRotation();
					localAI[1] = num1699;
					localAI[1] = 1f;
				}
				if (num1698 == 2)
				{
					Vector2 vector237 = new Vector2(27f, 59f);
					float num1700 = (float)Math.PI * 2f * ((float)Main.time % 600f) / 600f;
					localAI[0] = new Vector2((float)Math.Cos(num1700) * vector237.X, (float)Math.Sin(num1700) * vector237.Y).ToRotation();
					localAI[1] = 0.75f;
					if (this.ai[1] == 0f)
					{
						Vector2 vector238 = num1700.ToRotationVector2();
						vector238 = Vector2.One;
						Projectile.NewProjectile(base.Center.X, base.Center.Y, vector238.X, vector238.Y, 455, 1, 0f, Main.myPlayer, (float)Math.PI / 300f, base.whoAmI);
					}
					this.ai[1] += 1f;
					if (this.ai[1] >= 600f)
					{
						this.ai[1] = 0f;
					}
				}
				if (num1698 == 3)
				{
					Vector2 vector239 = new Vector2(0f, 216f);
					if (this.ai[1] == 0f)
					{
						TargetClosest(false);
						Vector2 vector240 = Main.player[target].Center - base.Center;
						vector240.Normalize();
						Projectile.NewProjectile(base.Center.X + vector239.X, base.Center.Y + vector239.Y, vector240.X, vector240.Y, 456, 0, 0f, Main.myPlayer, base.whoAmI + 1, target);
					}
					this.ai[1] += 1f;
					if (this.ai[1] >= 600f)
					{
						this.ai[1] = 0f;
					}
				}
				if (num1698 == 4)
				{
					new Vector2(27f, 59f);
					TargetClosest(false);
					Vector2 v7 = Main.player[target].Center + Main.player[target].velocity * 20f - base.Center;
					localAI[0] = localAI[0].AngleLerp(v7.ToRotation(), 0.5f);
					localAI[1] = 1f;
					this.ai[1] += 1f;
					if (this.ai[1] == 55f)
					{
						Main.PlaySound(4, (int)base.position.X, (int)base.position.Y, 6);
					}
					if (this.ai[1] == 76f || this.ai[1] == 83f || this.ai[1] == 90f)
					{
						Vector2 vector241 = Utils.Vector2FromElipse(elipseSizes: new Vector2(27f, 59f) * localAI[1], angleVector: localAI[0].ToRotationVector2());
						Vector2 vector242 = Vector2.Normalize(v7) * 8f;
						Projectile.NewProjectile(base.Center.X + vector241.X, base.Center.Y + vector241.Y, vector242.X, vector242.Y, 462, 5, 0f, Main.myPlayer);
					}
					if (this.ai[1] >= 90f)
					{
						this.ai[1] = 0f;
					}
				}
			}
			else if (aiStyle == 80)
			{
				if (this.ai[0] == 0f)
				{
					if (base.direction == 0)
					{
						TargetClosest();
						netUpdate = true;
					}
					if (collideX)
					{
						base.direction = -base.direction;
						netUpdate = true;
					}
					base.velocity.X = 3f * (float)base.direction;
					Vector2 center28 = base.Center;
					Point point10 = center28.ToTileCoordinates();
					int num1701 = 30;
					if (WorldGen.InWorld(point10.X, point10.Y, 30))
					{
						for (int num1702 = 0; num1702 < 30; num1702++)
						{
							if (WorldGen.SolidTile(point10.X, point10.Y + num1702))
							{
								num1701 = num1702;
								break;
							}
						}
					}
					if (num1701 < 15)
					{
						base.velocity.Y = Math.Max(base.velocity.Y - 0.05f, -3.5f);
					}
					else if (num1701 < 20)
					{
						base.velocity.Y *= 0.95f;
					}
					else
					{
						base.velocity.Y = Math.Min(base.velocity.Y + 0.05f, 1.5f);
					}
					float distanceToPlayer;
					int num1703 = FindClosestPlayer(out distanceToPlayer);
					if (num1703 == -1 || Main.player[num1703].dead)
					{
						return;
					}
					if (distanceToPlayer < 352f && Main.player[num1703].Center.Y > base.Center.Y)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 1f)
				{
					this.ai[1] += 1f;
					base.velocity *= 0.95f;
					if (this.ai[1] >= 60f)
					{
						this.ai[1] = 0f;
						this.ai[0] = 2f;
						int num1704 = FindClosestPlayer();
						if (num1704 != -1)
						{
							this.ai[3] = ((Main.player[num1704].Center.X > base.Center.X) ? (-1f) : 1f);
						}
						else
						{
							this.ai[3] = 1f;
						}
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 2f)
				{
					noTileCollide = true;
					this.ai[1] += 1f;
					base.velocity.Y = Math.Max(base.velocity.Y - 0.1f, -10f);
					base.velocity.X = Math.Min(base.velocity.X + this.ai[3] * 0.05f, 4f);
					if ((base.position.Y < (float)(-height) || this.ai[1] >= 180f) && Main.netMode != 1)
					{
						Main.StartInvasion(4);
						active = false;
						netUpdate = true;
					}
				}
				Vector3 rgb4 = Color.SkyBlue.ToVector3();
				if (this.ai[0] == 2f)
				{
					rgb4 = Color.Red.ToVector3();
				}
				rgb4 *= 0.65f;
				Lighting.AddLight(base.Center, rgb4);
			}
			else if (aiStyle == 81)
			{
				if (Main.rand.Next(420) == 0)
				{
					Main.PlaySound(29, (int)base.Center.X, (int)base.Center.Y, Main.rand.Next(100, 101));
				}
				Vector2 value42 = new Vector2(30f);
				if (!Main.npc[(int)this.ai[3]].active || Main.npc[(int)this.ai[3]].type != 398)
				{
					life = 0;
					HitEffect();
					active = false;
				}
				float num1705 = 0f;
				float num1706 = 0f;
				float num1707 = this.ai[0];
				this.ai[1] += 1f;
				int num1708 = 0;
				int num1709 = 0;
				for (; num1708 < 10; num1708++)
				{
					num1706 = MoonLordAttacksArray2[1, num1708];
					if (!(num1706 + (float)num1709 <= this.ai[1]))
					{
						break;
					}
					num1709 += (int)num1706;
				}
				if (num1708 == 10)
				{
					num1708 = 0;
					this.ai[1] = 0f;
					num1706 = MoonLordAttacksArray2[1, num1708];
					num1709 = 0;
				}
				this.ai[0] = MoonLordAttacksArray2[0, num1708];
				num1705 = (int)this.ai[1] - num1709;
				if (this.ai[0] != num1707)
				{
					netUpdate = true;
				}
				if (this.ai[0] == -1f)
				{
					this.ai[1] += 1f;
					if (this.ai[1] > 180f)
					{
						this.ai[1] = 0f;
					}
					float num1710 = 1f;
					if (this.ai[1] < 60f)
					{
						num1710 = 0.75f;
						localAI[0] = 0f;
						localAI[1] = (float)Math.Sin(this.ai[1] * ((float)Math.PI * 2f) / 15f) * 0.35f;
						if (localAI[1] < 0f)
						{
							localAI[0] = (float)Math.PI;
						}
					}
					else if (this.ai[1] < 120f)
					{
						num1710 = 1f;
						if (localAI[1] < 0.5f)
						{
							localAI[1] += 0.025f;
						}
						localAI[0] += (float)Math.PI / 15f;
					}
					else
					{
						num1710 = 1.15f;
						localAI[1] -= 0.05f;
						if (localAI[1] < 0f)
						{
							localAI[1] = 0f;
						}
					}
					localAI[2] = MathHelper.Lerp(localAI[2], num1710, 0.3f);
				}
				if (this.ai[0] == 0f)
				{
					TargetClosest(false);
					Vector2 v8 = Main.player[target].Center + Main.player[target].velocity * 20f - base.Center;
					localAI[0] = localAI[0].AngleLerp(v8.ToRotation(), 0.5f);
					localAI[1] += 0.05f;
					if (localAI[1] > 0.7f)
					{
						localAI[1] = 0.7f;
					}
					localAI[2] = MathHelper.Lerp(localAI[2], 1f, 0.2f);
					float scaleFactor14 = 24f;
					Vector2 center29 = base.Center;
					Vector2 center30 = Main.player[target].Center;
					Vector2 value43 = center30 - center29;
					Vector2 vector243 = value43 - Vector2.UnitY * 200f;
					vector243 = Vector2.Normalize(vector243) * scaleFactor14;
					int num1711 = 30;
					base.velocity.X = (base.velocity.X * (float)(num1711 - 1) + vector243.X) / (float)num1711;
					base.velocity.Y = (base.velocity.Y * (float)(num1711 - 1) + vector243.Y) / (float)num1711;
					float num1712 = 0.25f;
					for (int num1713 = 0; num1713 < 200; num1713++)
					{
						if (num1713 != base.whoAmI && Main.npc[num1713].active && Main.npc[num1713].type == 400 && Vector2.Distance(base.Center, Main.npc[num1713].Center) < 150f)
						{
							if (base.position.X < Main.npc[num1713].position.X)
							{
								base.velocity.X -= num1712;
							}
							else
							{
								base.velocity.X += num1712;
							}
							if (base.position.Y < Main.npc[num1713].position.Y)
							{
								base.velocity.Y -= num1712;
							}
							else
							{
								base.velocity.Y += num1712;
							}
						}
					}
				}
				else if (this.ai[0] == 1f)
				{
					if (num1705 == 0f)
					{
						TargetClosest(false);
						netUpdate = true;
					}
					base.velocity *= 0.95f;
					if (base.velocity.Length() < 1f)
					{
						base.velocity = Vector2.Zero;
					}
					Vector2 v9 = Main.player[target].Center + Main.player[target].velocity * 20f - base.Center;
					localAI[0] = localAI[0].AngleLerp(v9.ToRotation(), 0.5f);
					localAI[1] += 0.05f;
					if (localAI[1] > 1f)
					{
						localAI[1] = 1f;
					}
					if (num1705 < 20f)
					{
						localAI[2] = MathHelper.Lerp(localAI[2], 1.1f, 0.2f);
					}
					else
					{
						localAI[2] = MathHelper.Lerp(localAI[2], 0.4f, 0.2f);
					}
					if (num1705 == num1706 - 35f)
					{
						Main.PlaySound(4, (int)base.position.X, (int)base.position.Y, 6);
					}
					if ((num1705 == num1706 - 14f || num1705 == num1706 - 7f || num1705 == num1706) && Main.netMode != 1)
					{
						Vector2 vector244 = Utils.Vector2FromElipse(localAI[0].ToRotationVector2(), value42 * localAI[1]);
						Vector2 vector245 = Vector2.Normalize(v9) * 8f;
						Projectile.NewProjectile(base.Center.X + vector244.X, base.Center.Y + vector244.Y, vector245.X, vector245.Y, 462, 35, 0f, Main.myPlayer);
					}
				}
				else if (this.ai[0] == 2f)
				{
					if (num1705 < 15f)
					{
						localAI[1] -= 0.07f;
						if (localAI[1] < 0f)
						{
							localAI[1] = 0f;
						}
						localAI[2] = MathHelper.Lerp(localAI[2], 0.4f, 0.2f);
						base.velocity *= 0.8f;
						if (base.velocity.Length() < 1f)
						{
							base.velocity = Vector2.Zero;
						}
					}
					else if (num1705 < 75f)
					{
						float num1714 = (num1705 - 15f) / 10f;
						int num1715 = 0;
						int num1716 = 0;
						switch ((int)num1714)
						{
						case 0:
							num1715 = 0;
							num1716 = 2;
							break;
						case 1:
							num1715 = 2;
							num1716 = 5;
							break;
						case 2:
							num1715 = 5;
							num1716 = 3;
							break;
						case 3:
							num1715 = 3;
							num1716 = 1;
							break;
						case 4:
							num1715 = 1;
							num1716 = 4;
							break;
						case 5:
							num1715 = 4;
							num1716 = 0;
							break;
						}
						Vector2 spinningpoint13 = Vector2.UnitY * -30f;
						Vector2 value44 = spinningpoint13.RotatedBy((float)num1715 * ((float)Math.PI * 2f) / 6f);
						Vector2 value45 = spinningpoint13.RotatedBy((float)num1716 * ((float)Math.PI * 2f) / 6f);
						Vector2 vector246 = Vector2.Lerp(value44, value45, num1714 - (float)(int)num1714);
						float value46 = vector246.Length() / 30f;
						localAI[0] = vector246.ToRotation();
						localAI[1] = MathHelper.Lerp(localAI[1], value46, 0.5f);
						for (int num1717 = 0; num1717 < 2; num1717++)
						{
							int num1718 = Dust.NewDust(base.Center + vector246 - Vector2.One * 4f, 0, 0, 229);
							Main.dust[num1718].velocity += vector246 / 15f;
							Main.dust[num1718].noGravity = true;
						}
						if ((num1705 - 15f) % 10f == 0f && Main.netMode != 1)
						{
							Vector2 vec10 = Vector2.Normalize(vector246);
							if (vec10.HasNaNs())
							{
								vec10 = Vector2.UnitY * -1f;
							}
							vec10 *= 4f;
							Projectile.NewProjectile(base.Center.X + vector246.X, base.Center.Y + vector246.Y, vec10.X, vec10.Y, 454, 55, 0f, Main.myPlayer, 30f, base.whoAmI);
						}
					}
					else if (num1705 < 105f)
					{
						localAI[0] = localAI[0].AngleLerp(this.ai[2] - (float)Math.PI / 2f, 0.2f);
						localAI[2] = MathHelper.Lerp(localAI[2], 0.75f, 0.2f);
						if (num1705 == 75f)
						{
							TargetClosest(false);
							netUpdate = true;
							base.velocity = Vector2.UnitY * -7f;
							for (int num1719 = 0; num1719 < 1000; num1719++)
							{
								Projectile projectile7 = Main.projectile[num1719];
								if (projectile7.active && projectile7.type == 454 && projectile7.ai[1] == (float)base.whoAmI && projectile7.ai[0] != -1f)
								{
									projectile7.velocity += base.velocity;
									projectile7.netUpdate = true;
								}
							}
						}
						base.velocity.Y *= 0.96f;
						this.ai[2] = (Main.player[target].Center - base.Center).ToRotation() + (float)Math.PI / 2f;
						rotation = rotation.AngleTowards(this.ai[2], (float)Math.PI / 30f);
					}
					else if (num1705 < 120f)
					{
						Main.PlaySound(29, (int)base.Center.X, (int)base.Center.Y, 102);
						if (num1705 == 105f)
						{
							netUpdate = true;
						}
						Vector2 velocity8 = (this.ai[2] - (float)Math.PI / 2f).ToRotationVector2() * 12f;
						base.velocity = velocity8 * 2f;
						for (int num1720 = 0; num1720 < 1000; num1720++)
						{
							Projectile projectile8 = Main.projectile[num1720];
							if (projectile8.active && projectile8.type == 454 && projectile8.ai[1] == (float)base.whoAmI && projectile8.ai[0] != -1f)
							{
								projectile8.ai[0] = -1f;
								projectile8.velocity = velocity8;
								projectile8.netUpdate = true;
							}
						}
					}
					else
					{
						base.velocity *= 0.92f;
						rotation = rotation.AngleLerp(0f, 0.2f);
					}
				}
				else if (this.ai[0] == 3f)
				{
					if (num1705 < 15f)
					{
						localAI[1] -= 0.07f;
						if (localAI[1] < 0f)
						{
							localAI[1] = 0f;
						}
						localAI[2] = MathHelper.Lerp(localAI[2], 0.4f, 0.2f);
						base.velocity *= 0.9f;
						if (base.velocity.Length() < 1f)
						{
							base.velocity = Vector2.Zero;
						}
					}
					else if (num1705 < 45f)
					{
						localAI[0] = 0f;
						localAI[1] = (float)Math.Sin((num1705 - 15f) * ((float)Math.PI * 2f) / 15f) * 0.5f;
						if (localAI[1] < 0f)
						{
							localAI[0] = (float)Math.PI;
						}
					}
					else if (num1705 < 185f)
					{
						if (num1705 == 45f)
						{
							this.ai[2] = (float)(Main.rand.Next(2) == 0).ToDirectionInt() * ((float)Math.PI * 2f) / 40f;
							netUpdate = true;
						}
						if ((num1705 - 15f - 30f) % 40f == 0f)
						{
							this.ai[2] *= 0.95f;
						}
						localAI[0] += this.ai[2];
						localAI[1] += 0.05f;
						if (localAI[1] > 1f)
						{
							localAI[1] = 1f;
						}
						Vector2 vector247 = localAI[0].ToRotationVector2() * value42 * localAI[1];
						float scaleFactor15 = MathHelper.Lerp(8f, 20f, (num1705 - 15f - 30f) / 140f);
						base.velocity = Vector2.Normalize(vector247) * scaleFactor15;
						rotation = rotation.AngleLerp(base.velocity.ToRotation() + (float)Math.PI / 2f, 0.2f);
						if ((num1705 - 15f - 30f) % 10f == 0f && Main.netMode != 1)
						{
							Vector2 vector248 = base.Center + Vector2.Normalize(vector247) * value42.Length() * 0.4f;
							Vector2 vector249 = Vector2.Normalize(vector247) * 8f;
							float ai3 = ((float)Math.PI * 2f * (float)Main.rand.NextDouble() - (float)Math.PI) / 30f + (float)Math.PI / 180f * this.ai[2];
							Projectile.NewProjectile(vector248.X, vector248.Y, vector249.X, vector249.Y, 452, 35, 0f, Main.myPlayer, 0f, ai3);
						}
					}
					else
					{
						base.velocity *= 0.88f;
						rotation = rotation.AngleLerp(0f, 0.2f);
						localAI[1] -= 0.07f;
						if (localAI[1] < 0f)
						{
							localAI[1] = 0f;
						}
						localAI[2] = MathHelper.Lerp(localAI[2], 1f, 0.2f);
					}
				}
				else
				{
					if (this.ai[0] != 4f)
					{
						return;
					}
					if (num1705 == 0f)
					{
						TargetClosest(false);
						netUpdate = true;
					}
					if (num1705 < 180f)
					{
						localAI[2] = MathHelper.Lerp(localAI[2], 1f, 0.2f);
						localAI[1] -= 0.05f;
						if (localAI[1] < 0f)
						{
							localAI[1] = 0f;
						}
						base.velocity *= 0.95f;
						if (base.velocity.Length() < 1f)
						{
							base.velocity = Vector2.Zero;
						}
						if (!(num1705 >= 60f))
						{
							return;
						}
						Vector2 center31 = base.Center;
						int num1721 = 0;
						if (num1705 >= 120f)
						{
							num1721 = 1;
						}
						for (int num1722 = 0; num1722 < 1 + num1721; num1722++)
						{
							int num1723 = 229;
							float num1724 = 0.8f;
							if (num1722 % 2 == 1)
							{
								num1723 = 229;
								num1724 = 1.65f;
							}
							Vector2 vector250 = center31 + ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * value42 / 2f;
							int num1725 = Dust.NewDust(vector250 - Vector2.One * 8f, 16, 16, num1723, base.velocity.X / 2f, base.velocity.Y / 2f);
							Main.dust[num1725].velocity = Vector2.Normalize(center31 - vector250) * 3.5f * (10f - (float)num1721 * 2f) / 10f;
							Main.dust[num1725].noGravity = true;
							Main.dust[num1725].scale = num1724;
							Main.dust[num1725].customData = this;
						}
					}
					else if (num1705 < num1706 - 15f)
					{
						if (num1705 == 180f && Main.netMode != 1)
						{
							TargetClosest(false);
							Vector2 spinningpoint14 = Main.player[target].Center - base.Center;
							spinningpoint14.Normalize();
							float num1726 = -1f;
							if (spinningpoint14.X < 0f)
							{
								num1726 = 1f;
							}
							spinningpoint14 = spinningpoint14.RotatedBy((0f - num1726) * ((float)Math.PI * 2f) / 6f);
							Projectile.NewProjectile(base.Center.X, base.Center.Y, spinningpoint14.X, spinningpoint14.Y, 455, 50, 0f, Main.myPlayer, num1726 * ((float)Math.PI * 2f) / 540f, base.whoAmI);
							this.ai[2] = (spinningpoint14.ToRotation() + (float)Math.PI * 3f) * num1726;
							netUpdate = true;
						}
						localAI[1] += 0.05f;
						if (localAI[1] > 1f)
						{
							localAI[1] = 1f;
						}
						float num1727 = (this.ai[2] >= 0f).ToDirectionInt();
						float num1728 = this.ai[2];
						if (num1728 < 0f)
						{
							num1728 *= -1f;
						}
						num1728 += (float)Math.PI * -3f;
						num1728 += num1727 * ((float)Math.PI * 2f) / 540f;
						localAI[0] = num1728;
						this.ai[2] = (num1728 + (float)Math.PI * 3f) * num1727;
					}
					else
					{
						localAI[1] -= 0.07f;
						if (localAI[1] < 0f)
						{
							localAI[1] = 0f;
						}
					}
				}
			}
			else if (aiStyle == 82)
			{
				float num1729 = 90f;
				Vector2 value47 = new Vector2(0f, 216f);
				int num1730 = (int)Math.Abs(this.ai[0]) - 1;
				int num1731 = (int)this.ai[1];
				if (!Main.npc[num1730].active || Main.npc[num1730].type != 396)
				{
					life = 0;
					HitEffect();
					active = false;
					return;
				}
				this.ai[2] += 1f;
				if (this.ai[2] >= num1729)
				{
					if (Main.netMode != 1)
					{
						int num1732 = (int)Main.npc[num1730].ai[3];
						int num1733 = -1;
						int num1734 = -1;
						int num1735 = num1730;
						for (int num1736 = 0; num1736 < 200; num1736++)
						{
							if (Main.npc[num1736].active && Main.npc[num1736].ai[3] == (float)num1732)
							{
								if (num1733 == -1 && Main.npc[num1736].type == 397 && Main.npc[num1736].ai[2] == 0f)
								{
									num1733 = num1736;
								}
								if (num1734 == -1 && Main.npc[num1736].type == 397 && Main.npc[num1736].ai[2] == 1f)
								{
									num1734 = num1736;
								}
								if (num1733 != -1 && num1734 != -1 && num1735 != -1)
								{
									break;
								}
							}
						}
						int num1737 = 1000;
						int num1738 = Main.npc[num1732].lifeMax - Main.npc[num1732].life;
						int num1739 = Main.npc[num1733].lifeMax - Main.npc[num1733].life;
						int num1740 = Main.npc[num1734].lifeMax - Main.npc[num1734].life;
						int num1741 = Main.npc[num1735].lifeMax - Main.npc[num1735].life;
						if (num1741 > 0 && num1737 > 0)
						{
							int num1742 = num1741 - num1737;
							if (num1742 > 0)
							{
								num1742 = 0;
							}
							int num1743 = num1737 + num1742;
							num1737 -= num1743;
							Main.npc[num1735].life += num1743;
							HealEffect(Utils.CenteredRectangle(Main.npc[num1735].Center, new Vector2(50f)), num1743);
						}
						if (num1738 > 0 && num1737 > 0)
						{
							int num1744 = num1738 - num1737;
							if (num1744 > 0)
							{
								num1744 = 0;
							}
							int num1745 = num1737 + num1744;
							num1737 -= num1745;
							Main.npc[num1732].life += num1745;
							HealEffect(Utils.CenteredRectangle(Main.npc[num1732].Center, new Vector2(50f)), num1745);
						}
						if (num1739 > 0 && num1737 > 0)
						{
							int num1746 = num1739 - num1737;
							if (num1746 > 0)
							{
								num1746 = 0;
							}
							int num1747 = num1737 + num1746;
							num1737 -= num1747;
							Main.npc[num1733].life += num1747;
							HealEffect(Utils.CenteredRectangle(Main.npc[num1733].Center, new Vector2(50f)), num1747);
						}
						if (num1740 > 0 && num1737 > 0)
						{
							int num1748 = num1740 - num1737;
							if (num1748 > 0)
							{
								num1748 = 0;
							}
							int num1749 = num1737 + num1748;
							num1737 -= num1749;
							Main.npc[num1734].life += num1749;
							HealEffect(Utils.CenteredRectangle(Main.npc[num1734].Center, new Vector2(50f)), num1749);
						}
					}
					life = 0;
					HitEffect();
					active = false;
				}
				else
				{
					base.velocity = Vector2.Zero;
					base.Center = Vector2.Lerp(Main.projectile[num1731].Center, Main.npc[(int)Math.Abs(this.ai[0]) - 1].Center + value47, this.ai[2] / num1729);
					Vector2 spinningpoint15 = Vector2.UnitY * -height / 2f;
					for (int num1750 = 0; num1750 < 6; num1750++)
					{
						int num1751 = Dust.NewDust(base.Center - Vector2.One * 4f + spinningpoint15.RotatedBy((float)num1750 * ((float)Math.PI * 2f) / 6f), 0, 0, 229);
						Main.dust[num1751].velocity = -Vector2.UnitY;
						Main.dust[num1751].noGravity = true;
						Main.dust[num1751].scale = 0.7f;
						Main.dust[num1751].customData = this;
					}
					spinningpoint15 = Vector2.UnitY * -height / 6f;
					for (int num1752 = 0; num1752 < 3; num1752++)
					{
						int num1753 = Dust.NewDust(base.Center - Vector2.One * 4f + spinningpoint15.RotatedBy((float)num1752 * ((float)Math.PI * 2f) / 6f), 0, 0, 229, 0f, -2f);
						Main.dust[num1753].noGravity = true;
						Main.dust[num1753].scale = 1.5f;
						Main.dust[num1753].customData = this;
					}
				}
			}
			else if (aiStyle == 83)
			{
				if (type == 437)
				{
					if (localAI[3] == 0f && Main.netMode != 1)
					{
						localAI[3] = 1f;
						netUpdate = true;
						Point[] spawnPoints = null;
						if (!CultistRitual.CheckFloor(base.Center, out spawnPoints))
						{
							life = 0;
							HitEffect();
							active = false;
							return;
						}
						int num1754 = 0;
						int num1755 = 1;
						for (int num1756 = 0; num1756 < 4; num1756++)
						{
							int num1757 = 0;
							bool flag147 = num1756 == 1 || num1756 == 2;
							num1757 = ((!flag147) ? 379 : 438);
							int num1758 = NewNPC(spawnPoints[num1756].X * 16 + 8, spawnPoints[num1756].Y * 16 - 48, num1757);
							if (flag147)
							{
								localAI[num1755++] = num1758 + 1;
								Main.npc[num1758].ai[3] = -(base.whoAmI + 1);
							}
							else
							{
								this.ai[num1754++] = num1758 + 1;
								Main.npc[num1758].ai[3] = -(base.whoAmI + 1);
							}
							Main.npc[num1758].netUpdate = true;
						}
					}
					if (localAI[0] == 1f && Main.netMode != 1)
					{
						localAI[0] = 2f;
						for (int num1759 = 0; num1759 < 2; num1759++)
						{
							Main.npc[(int)localAI[num1759 + 1] - 1].ai[1] = 1f;
							Main.npc[(int)localAI[num1759 + 1] - 1].netUpdate = true;
							Main.npc[(int)this.ai[num1759] - 1].ai[3] = 0f;
							Main.npc[(int)this.ai[num1759] - 1].TargetClosest();
							Main.npc[(int)this.ai[num1759] - 1].netUpdate = true;
						}
					}
					if (this.ai[0] != -1f && Main.netMode != 1)
					{
						bool flag148 = true;
						for (int num1760 = 0; num1760 < 2; num1760++)
						{
							if (Main.npc[(int)localAI[num1760 + 1] - 1].active && Main.npc[(int)localAI[num1760 + 1] - 1].type == 438)
							{
								flag148 = false;
							}
							if (Main.npc[(int)this.ai[num1760] - 1].active && Main.npc[(int)this.ai[num1760] - 1].type == 379)
							{
								flag148 = false;
							}
						}
						if (flag148)
						{
							this.ai[0] = -1f;
							this.ai[1] = 0f;
							this.ai[3] = 0f;
							int num1761 = (int)base.Center.X / 16 + 11 * (Main.rand.Next(2) == 0).ToDirectionInt();
							int num1762 = 0;
							for (int num1763 = -5; num1763 < 12; num1763++)
							{
								int num1764 = num1761;
								int num1765 = (int)base.Center.Y / 16 + num1763;
								if (WorldGen.SolidTile(num1764, num1765) && !Collision.SolidTiles(num1764 - 1, num1764 + 1, num1765 - 3, num1765 - 1))
								{
									num1762 = num1765;
									break;
								}
								if (num1763 == 11)
								{
									num1762 = num1765;
								}
							}
							int num1766 = NewNPC(num1761 * 16 + 10, num1762 * 16 - 2, 439);
							Main.npc[num1766].direction = (Main.npc[num1766].spriteDirection = Math.Sign(base.Center.X - (float)(num1761 * 16) - 10f));
							this.ai[2] = num1766;
							netUpdate = true;
							CultistRitual.TabletDestroyed();
						}
					}
					if (this.ai[0] == -1f)
					{
						this.ai[3] += 1f;
						if (this.ai[3] > 300f)
						{
							life = 0;
							HitEffect(0, 9999.0);
							active = false;
							if (Main.netMode != 1)
							{
								for (int num1767 = 0; num1767 < 6; num1767++)
								{
									float num1768 = 3f + Main.rand.NextFloat() * 6f;
									Vector2 vector251 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
									Vector2 center32 = base.Center;
									center32 += vector251 * 30f;
									Projectile.NewProjectile(center32.X, center32.Y, vector251.X * num1768, vector251.Y * num1768, 526, 0, 0f, Main.myPlayer, Main.npc[(int)this.ai[2]].Center.X, Main.npc[(int)this.ai[2]].Center.Y);
								}
								for (int num1769 = 0; num1769 < 20; num1769++)
								{
									if (Main.rand.Next(2) != 0)
									{
										float num1770 = 3f + Main.rand.NextFloat() * 6f;
										Vector2 vector252 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
										Vector2 center33 = base.Center;
										center33 += vector252 * 30f;
										Vector2 vector253 = base.Center + vector252 * (Main.rand.NextFloat() * 45f + 45f) + Vector2.UnitY * 20f;
										Projectile.NewProjectile(center33.X, center33.Y, vector252.X * num1770, -20f, 526, 0, 0f, Main.myPlayer, vector253.X, vector253.Y);
									}
								}
							}
						}
						else if (this.ai[3] % 10f == 1f && this.ai[3] > 120f && Main.netMode != 1)
						{
							float num1771 = 3f + Main.rand.NextFloat() * 6f;
							Vector2 vector254 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							Vector2 center34 = base.Center;
							center34 += vector254 * 25f;
							Projectile.NewProjectile(center34.X, center34.Y, vector254.X * num1771, vector254.Y * num1771, 526, 0, 0f, Main.myPlayer, Main.npc[(int)this.ai[2]].Center.X, Main.npc[(int)this.ai[2]].Center.Y);
						}
					}
				}
				if (type == 438)
				{
					base.velocity.X *= 0.93f;
					if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
					{
						base.velocity.X = 0f;
					}
					int num1772 = (int)(0f - this.ai[3] - 1f);
					if (num1772 == -1)
					{
						life = 0;
						HitEffect();
						active = false;
						return;
					}
					int num1773 = Math.Sign(Main.npc[num1772].Center.X - base.Center.X);
					if (num1773 != base.direction)
					{
						base.velocity.X = 0f;
						base.direction = (spriteDirection = num1773);
						netUpdate = true;
					}
					if (justHit && Main.netMode != 1 && Main.npc[num1772].localAI[0] == 0f)
					{
						Main.npc[num1772].localAI[0] = 1f;
					}
					if ((this.ai[0] += 1f) >= 300f)
					{
						this.ai[0] = 0f;
						netUpdate = true;
					}
				}
				if (type == 437)
				{
					Lighting.AddLight(base.Center, 0.8f, 0.75f, 0.55f);
				}
			}
			else if (aiStyle == 84)
			{
				if (this.ai[0] != -1f && Main.rand.Next(1000) == 0)
				{
					Main.PlaySound(29, (int)base.position.X, (int)base.position.Y, Main.rand.Next(88, 92));
				}
				bool expertMode2 = Main.expertMode;
				bool flag149 = life <= lifeMax / 2;
				int num1774 = 120;
				int num1775 = 35;
				if (expertMode2)
				{
					num1774 = 90;
					num1775 = 25;
				}
				int num1776 = 18;
				int num1777 = 3;
				int num1778 = 30;
				if (expertMode2)
				{
					num1776 = 12;
					num1777 = 4;
					num1778 = 20;
				}
				int num1779 = 80;
				int num1780 = 45;
				if (expertMode2)
				{
					num1779 = 40;
					num1780 = 30;
				}
				int num1781 = 20;
				int num1782 = 2;
				if (expertMode2)
				{
					num1781 = 30;
					num1782 = 2;
				}
				int num1783 = 20;
				int num1784 = 3;
				bool flag150 = type == 439;
				bool flag151 = false;
				bool flag152 = false;
				if (flag149)
				{
					defense = (int)((float)defDefense * 0.65f);
				}
				if (!flag150)
				{
					if (this.ai[3] < 0f || !Main.npc[(int)this.ai[3]].active || Main.npc[(int)this.ai[3]].type != 439)
					{
						life = 0;
						HitEffect();
						active = false;
						return;
					}
					this.ai[0] = Main.npc[(int)this.ai[3]].ai[0];
					this.ai[1] = Main.npc[(int)this.ai[3]].ai[1];
					if (this.ai[0] == 5f)
					{
						if (justHit)
						{
							life = 0;
							HitEffect();
							active = false;
							NetMessage.SendData(23, -1, -1, "", base.whoAmI);
							NPC nPC12 = Main.npc[(int)this.ai[3]];
							nPC12.ai[0] = 6f;
							nPC12.ai[1] = 0f;
							nPC12.netUpdate = true;
						}
					}
					else
					{
						flag151 = true;
						flag152 = true;
					}
				}
				else if (this.ai[0] == 5f && this.ai[1] >= 120f && this.ai[1] < 420f && justHit)
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					this.ai[3] += 1f;
					base.velocity = Vector2.Zero;
					netUpdate = true;
					List<int> list = new List<int>();
					for (int num1785 = 0; num1785 < 200; num1785++)
					{
						if (Main.npc[num1785].active && Main.npc[num1785].type == 440 && Main.npc[num1785].ai[3] == (float)base.whoAmI)
						{
							list.Add(num1785);
						}
					}
					int num1786 = 10;
					if (Main.expertMode)
					{
						num1786 = 3;
					}
					foreach (int item in list)
					{
						NPC nPC13 = Main.npc[item];
						if (nPC13.localAI[1] == localAI[1] && num1786 > 0)
						{
							num1786--;
							nPC13.life = 0;
							nPC13.HitEffect();
							nPC13.active = false;
							NetMessage.SendData(23, -1, -1, "", item);
						}
						else if (num1786 > 0)
						{
							num1786--;
							nPC13.life = 0;
							nPC13.HitEffect();
							nPC13.active = false;
						}
					}
					Main.projectile[(int)this.ai[2]].ai[1] = -1f;
					Main.projectile[(int)this.ai[2]].netUpdate = true;
				}
				Vector2 center35 = base.Center;
				Player player11 = Main.player[target];
				if (target < 0 || target == 16 || player11.dead || !player11.active)
				{
					TargetClosest(false);
					player11 = Main.player[target];
					netUpdate = true;
				}
				if (player11.dead || Vector2.Distance(player11.Center, center35) > 5600f)
				{
					life = 0;
					HitEffect();
					active = false;
					NetMessage.SendData(28, -1, -1, "", base.whoAmI, -1f);
					List<int> list2 = new List<int>();
					list2.Add(base.whoAmI);
					for (int num1787 = 0; num1787 < 200; num1787++)
					{
						if (Main.npc[num1787].active && Main.npc[num1787].type == 440 && Main.npc[num1787].ai[3] == (float)base.whoAmI)
						{
							Main.npc[num1787].life = 0;
							Main.npc[num1787].HitEffect();
							Main.npc[num1787].active = false;
							NetMessage.SendData(28, -1, -1, "", base.whoAmI, -1f);
						}
					}
				}
				float num1788 = this.ai[3];
				if (localAI[0] == 0f)
				{
					Main.PlaySound(29, (int)base.position.X, (int)base.position.Y, 89);
					localAI[0] = 1f;
					alpha = 255;
					rotation = 0f;
					if (Main.netMode != 1)
					{
						this.ai[0] = -1f;
						netUpdate = true;
					}
				}
				if (this.ai[0] == -1f)
				{
					alpha -= 5;
					if (alpha < 0)
					{
						alpha = 0;
					}
					this.ai[1] += 1f;
					if (this.ai[1] >= 420f)
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
						netUpdate = true;
					}
					else if (this.ai[1] > 360f)
					{
						base.velocity *= 0.95f;
						if (localAI[2] != 13f)
						{
							Main.PlaySound(29, (int)base.position.X, (int)base.position.Y, 105);
						}
						localAI[2] = 13f;
					}
					else if (this.ai[1] > 300f)
					{
						base.velocity = -Vector2.UnitY;
						localAI[2] = 10f;
					}
					else if (this.ai[1] > 120f)
					{
						localAI[2] = 1f;
					}
					else
					{
						localAI[2] = 0f;
					}
					flag151 = true;
					flag152 = true;
				}
				if (this.ai[0] == 0f)
				{
					if (this.ai[1] == 0f)
					{
						TargetClosest(false);
					}
					localAI[2] = 10f;
					int num1789 = Math.Sign(player11.Center.X - center35.X);
					if (num1789 != 0)
					{
						base.direction = (spriteDirection = num1789);
					}
					this.ai[1] += 1f;
					if (this.ai[1] >= 40f && flag150)
					{
						int num1790 = 0;
						if (flag149)
						{
							switch ((int)this.ai[3])
							{
							case 0:
								num1790 = 0;
								break;
							case 1:
								num1790 = 1;
								break;
							case 2:
								num1790 = 0;
								break;
							case 3:
								num1790 = 5;
								break;
							case 4:
								num1790 = 0;
								break;
							case 5:
								num1790 = 3;
								break;
							case 6:
								num1790 = 0;
								break;
							case 7:
								num1790 = 5;
								break;
							case 8:
								num1790 = 0;
								break;
							case 9:
								num1790 = 2;
								break;
							case 10:
								num1790 = 0;
								break;
							case 11:
								num1790 = 3;
								break;
							case 12:
								num1790 = 0;
								break;
							case 13:
								num1790 = 4;
								this.ai[3] = -1f;
								break;
							default:
								this.ai[3] = -1f;
								break;
							}
						}
						else
						{
							switch ((int)this.ai[3])
							{
							case 0:
								num1790 = 0;
								break;
							case 1:
								num1790 = 1;
								break;
							case 2:
								num1790 = 0;
								break;
							case 3:
								num1790 = 2;
								break;
							case 4:
								num1790 = 0;
								break;
							case 5:
								num1790 = 3;
								break;
							case 6:
								num1790 = 0;
								break;
							case 7:
								num1790 = 1;
								break;
							case 8:
								num1790 = 0;
								break;
							case 9:
								num1790 = 2;
								break;
							case 10:
								num1790 = 0;
								break;
							case 11:
								num1790 = 4;
								this.ai[3] = -1f;
								break;
							default:
								this.ai[3] = -1f;
								break;
							}
						}
						int maxValue10 = 6;
						if (life < lifeMax / 3)
						{
							maxValue10 = 4;
						}
						if (life < lifeMax / 4)
						{
							maxValue10 = 3;
						}
						if (expertMode2 && flag149 && Main.rand.Next(maxValue10) == 0 && num1790 != 0 && num1790 != 4 && num1790 != 5 && CountNPCS(523) < 10)
						{
							num1790 = 6;
						}
						if (num1790 == 0)
						{
							float num1791 = (float)Math.Ceiling((player11.Center + new Vector2(0f, -100f) - center35).Length() / 50f);
							if (num1791 == 0f)
							{
								num1791 = 1f;
							}
							List<int> list3 = new List<int>();
							int num1792 = 0;
							list3.Add(base.whoAmI);
							for (int num1793 = 0; num1793 < 200; num1793++)
							{
								if (Main.npc[num1793].active && Main.npc[num1793].type == 440 && Main.npc[num1793].ai[3] == (float)base.whoAmI)
								{
									list3.Add(num1793);
								}
							}
							bool flag153 = list3.Count % 2 == 0;
							foreach (int item2 in list3)
							{
								NPC nPC14 = Main.npc[item2];
								Vector2 center36 = nPC14.Center;
								float num1794 = (float)((num1792 + flag153.ToInt() + 1) / 2) * ((float)Math.PI * 2f) * 0.4f / (float)list3.Count;
								if (num1792 % 2 == 1)
								{
									num1794 *= -1f;
								}
								if (list3.Count == 1)
								{
									num1794 = 0f;
								}
								Vector2 value48 = new Vector2(0f, -1f).RotatedBy(num1794) * new Vector2(300f, 200f);
								Vector2 value49 = player11.Center + value48 - center36;
								nPC14.ai[0] = 1f;
								nPC14.ai[1] = num1791 * 2f;
								nPC14.velocity = value49 / num1791;
								if (base.whoAmI >= nPC14.whoAmI)
								{
									nPC14.position -= nPC14.velocity;
								}
								nPC14.netUpdate = true;
								num1792++;
							}
						}
						switch (num1790)
						{
						case 1:
							this.ai[0] = 3f;
							this.ai[1] = 0f;
							break;
						case 2:
							this.ai[0] = 2f;
							this.ai[1] = 0f;
							break;
						case 3:
							this.ai[0] = 4f;
							this.ai[1] = 0f;
							break;
						case 4:
							this.ai[0] = 5f;
							this.ai[1] = 0f;
							break;
						}
						if (num1790 == 5)
						{
							this.ai[0] = 7f;
							this.ai[1] = 0f;
						}
						if (num1790 == 6)
						{
							this.ai[0] = 8f;
							this.ai[1] = 0f;
						}
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 1f)
				{
					flag151 = true;
					localAI[2] = 10f;
					if ((float)(int)this.ai[1] % 2f != 0f && this.ai[1] != 1f)
					{
						base.position -= base.velocity;
					}
					this.ai[1] -= 1f;
					if (this.ai[1] <= 0f)
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
						this.ai[3] += 1f;
						base.velocity = Vector2.Zero;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 2f)
				{
					localAI[2] = 11f;
					Vector2 vec11 = Vector2.Normalize(player11.Center - center35);
					if (vec11.HasNaNs())
					{
						vec11 = new Vector2(base.direction, 0f);
					}
					if (this.ai[1] >= 4f && flag150 && (int)(this.ai[1] - 4f) % num1774 == 0)
					{
						if (Main.netMode != 1)
						{
							List<int> list4 = new List<int>();
							for (int num1795 = 0; num1795 < 200; num1795++)
							{
								if (Main.npc[num1795].active && Main.npc[num1795].type == 440 && Main.npc[num1795].ai[3] == (float)base.whoAmI)
								{
									list4.Add(num1795);
								}
							}
							foreach (int item3 in list4)
							{
								NPC nPC15 = Main.npc[item3];
								Vector2 center37 = nPC15.Center;
								int num1796 = Math.Sign(player11.Center.X - center37.X);
								if (num1796 != 0)
								{
									nPC15.direction = (nPC15.spriteDirection = num1796);
								}
								if (Main.netMode != 1)
								{
									vec11 = Vector2.Normalize(player11.Center - center37 + player11.velocity * 20f);
									if (vec11.HasNaNs())
									{
										vec11 = new Vector2(base.direction, 0f);
									}
									Vector2 vector255 = center37 + new Vector2(base.direction * 30, 12f);
									for (int num1797 = 0; num1797 < 1; num1797++)
									{
										Vector2 spinninpoint = vec11 * (6f + (float)Main.rand.NextDouble() * 4f);
										spinninpoint = spinninpoint.RotatedByRandom(0.52359879016876221);
										Projectile.NewProjectile(vector255.X, vector255.Y, spinninpoint.X, spinninpoint.Y, 468, 18, 0f, Main.myPlayer);
									}
								}
							}
						}
						if (Main.netMode != 1)
						{
							vec11 = Vector2.Normalize(player11.Center - center35 + player11.velocity * 20f);
							if (vec11.HasNaNs())
							{
								vec11 = new Vector2(base.direction, 0f);
							}
							Vector2 vector256 = base.Center + new Vector2(base.direction * 30, 12f);
							for (int num1798 = 0; num1798 < 1; num1798++)
							{
								Vector2 vector257 = vec11 * 4f;
								Projectile.NewProjectile(vector256.X, vector256.Y, vector257.X, vector257.Y, 464, num1775, 0f, Main.myPlayer, 0f, 1f);
							}
						}
					}
					this.ai[1] += 1f;
					if (this.ai[1] >= (float)(4 + num1774))
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
						this.ai[3] += 1f;
						base.velocity = Vector2.Zero;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 3f)
				{
					localAI[2] = 11f;
					Vector2 vec12 = Vector2.Normalize(player11.Center - center35);
					if (vec12.HasNaNs())
					{
						vec12 = new Vector2(base.direction, 0f);
					}
					if (this.ai[1] >= 4f && flag150 && (int)(this.ai[1] - 4f) % num1776 == 0)
					{
						int num1799 = (int)(this.ai[1] - 4f) / num1776;
						if (num1799 == 2)
						{
							List<int> list5 = new List<int>();
							for (int num1800 = 0; num1800 < 200; num1800++)
							{
								if (Main.npc[num1800].active && Main.npc[num1800].type == 440 && Main.npc[num1800].ai[3] == (float)base.whoAmI)
								{
									list5.Add(num1800);
								}
							}
							if (Main.netMode != 1)
							{
								foreach (int item4 in list5)
								{
									NPC nPC16 = Main.npc[item4];
									Vector2 center38 = nPC16.Center;
									int num1801 = Math.Sign(player11.Center.X - center38.X);
									if (num1801 != 0)
									{
										nPC16.direction = (nPC16.spriteDirection = num1801);
									}
									if (Main.netMode != 1)
									{
										vec12 = Vector2.Normalize(player11.Center - center38 + player11.velocity * 20f);
										if (vec12.HasNaNs())
										{
											vec12 = new Vector2(base.direction, 0f);
										}
										Vector2 vector258 = center38 + new Vector2(base.direction * 30, 12f);
										for (int num1802 = 0; num1802 < 1; num1802++)
										{
											Vector2 spinninpoint2 = vec12 * (6f + (float)Main.rand.NextDouble() * 4f);
											spinninpoint2 = spinninpoint2.RotatedByRandom(0.52359879016876221);
											Projectile.NewProjectile(vector258.X, vector258.Y, spinninpoint2.X, spinninpoint2.Y, 468, 18, 0f, Main.myPlayer);
										}
									}
								}
							}
						}
						int num1803 = Math.Sign(player11.Center.X - center35.X);
						if (num1803 != 0)
						{
							base.direction = (spriteDirection = num1803);
						}
						if (Main.netMode != 1)
						{
							vec12 = Vector2.Normalize(player11.Center - center35 + player11.velocity * 20f);
							if (vec12.HasNaNs())
							{
								vec12 = new Vector2(base.direction, 0f);
							}
							Vector2 vector259 = base.Center + new Vector2(base.direction * 30, 12f);
							for (int num1804 = 0; num1804 < 1; num1804++)
							{
								Vector2 spinninpoint3 = vec12 * (6f + (float)Main.rand.NextDouble() * 4f);
								spinninpoint3 = spinninpoint3.RotatedByRandom(0.52359879016876221);
								Projectile.NewProjectile(vector259.X, vector259.Y, spinninpoint3.X, spinninpoint3.Y, 467, num1778, 0f, Main.myPlayer);
							}
						}
					}
					this.ai[1] += 1f;
					if (this.ai[1] >= (float)(4 + num1776 * num1777))
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
						this.ai[3] += 1f;
						base.velocity = Vector2.Zero;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 4f)
				{
					if (flag150)
					{
						localAI[2] = 12f;
					}
					else
					{
						localAI[2] = 11f;
					}
					if (this.ai[1] == 20f && flag150 && Main.netMode != 1)
					{
						List<int> list6 = new List<int>();
						for (int num1805 = 0; num1805 < 200; num1805++)
						{
							if (Main.npc[num1805].active && Main.npc[num1805].type == 440 && Main.npc[num1805].ai[3] == (float)base.whoAmI)
							{
								list6.Add(num1805);
							}
						}
						foreach (int item5 in list6)
						{
							NPC nPC17 = Main.npc[item5];
							Vector2 center39 = nPC17.Center;
							int num1806 = Math.Sign(player11.Center.X - center39.X);
							if (num1806 != 0)
							{
								nPC17.direction = (nPC17.spriteDirection = num1806);
							}
							if (Main.netMode != 1)
							{
								Vector2 vec13 = Vector2.Normalize(player11.Center - center39 + player11.velocity * 20f);
								if (vec13.HasNaNs())
								{
									vec13 = new Vector2(base.direction, 0f);
								}
								Vector2 vector260 = center39 + new Vector2(base.direction * 30, 12f);
								for (int num1807 = 0; num1807 < 1; num1807++)
								{
									Vector2 spinninpoint4 = vec13 * (6f + (float)Main.rand.NextDouble() * 4f);
									spinninpoint4 = spinninpoint4.RotatedByRandom(0.52359879016876221);
									Projectile.NewProjectile(vector260.X, vector260.Y, spinninpoint4.X, spinninpoint4.Y, 468, 18, 0f, Main.myPlayer);
								}
							}
						}
						if ((int)(this.ai[1] - 20f) % num1779 == 0)
						{
							Projectile.NewProjectile(base.Center.X, base.Center.Y - 100f, 0f, 0f, 465, num1780, 0f, Main.myPlayer);
						}
					}
					this.ai[1] += 1f;
					if (this.ai[1] >= (float)(20 + num1779))
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
						this.ai[3] += 1f;
						base.velocity = Vector2.Zero;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 5f)
				{
					localAI[2] = 10f;
					Vector2 vec14 = Vector2.Normalize(player11.Center - center35);
					if (vec14.HasNaNs())
					{
						vec14 = new Vector2(base.direction, 0f);
					}
					if (this.ai[1] >= 0f && this.ai[1] < 30f)
					{
						flag151 = true;
						flag152 = true;
						float num1808 = (this.ai[1] - 0f) / 30f;
						alpha = (int)(num1808 * 255f);
					}
					else if (this.ai[1] >= 30f && this.ai[1] < 90f)
					{
						if (this.ai[1] == 30f && Main.netMode != 1 && flag150)
						{
							localAI[1] += 1f;
							Vector2 spinningpoint16 = new Vector2(180f, 0f);
							List<int> list7 = new List<int>();
							for (int num1809 = 0; num1809 < 200; num1809++)
							{
								if (Main.npc[num1809].active && Main.npc[num1809].type == 440 && Main.npc[num1809].ai[3] == (float)base.whoAmI)
								{
									list7.Add(num1809);
								}
							}
							int num1810 = 6 - list7.Count;
							if (num1810 > 2)
							{
								num1810 = 2;
							}
							int num1811 = list7.Count + num1810 + 1;
							float[] array7 = new float[num1811];
							for (int num1812 = 0; num1812 < array7.Length; num1812++)
							{
								array7[num1812] = Vector2.Distance(base.Center + spinningpoint16.RotatedBy((float)num1812 * ((float)Math.PI * 2f) / (float)num1811 - (float)Math.PI / 2f), player11.Center);
							}
							int num1813 = 0;
							for (int num1814 = 1; num1814 < array7.Length; num1814++)
							{
								if (array7[num1813] > array7[num1814])
								{
									num1813 = num1814;
								}
							}
							num1813 = ((num1813 >= num1811 / 2) ? (num1813 - num1811 / 2) : (num1813 + num1811 / 2));
							int num1815 = num1810;
							for (int num1816 = 0; num1816 < array7.Length; num1816++)
							{
								if (num1813 != num1816)
								{
									Vector2 center40 = base.Center + spinningpoint16.RotatedBy((float)num1816 * ((float)Math.PI * 2f) / (float)num1811 - (float)Math.PI / 2f);
									if (num1815-- > 0)
									{
										int num1817 = NewNPC((int)center40.X, (int)center40.Y + height / 2, 440, base.whoAmI);
										Main.npc[num1817].ai[3] = base.whoAmI;
										Main.npc[num1817].netUpdate = true;
										Main.npc[num1817].localAI[1] = localAI[1];
									}
									else
									{
										int num1818 = list7[-num1815 - 1];
										Main.npc[num1818].Center = center40;
										NetMessage.SendData(23, -1, -1, "", num1818);
									}
								}
							}
							this.ai[2] = Projectile.NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 490, 0, 0f, Main.myPlayer, 0f, base.whoAmI);
							base.Center += spinningpoint16.RotatedBy((float)num1813 * ((float)Math.PI * 2f) / (float)num1811 - (float)Math.PI / 2f);
							netUpdate = true;
							list7.Clear();
						}
						flag151 = true;
						flag152 = true;
						alpha = 255;
						if (flag150)
						{
							Vector2 value50 = Main.projectile[(int)this.ai[2]].Center;
							value50 -= base.Center;
							if (value50 == Vector2.Zero)
							{
								value50 = -Vector2.UnitY;
							}
							value50.Normalize();
							if (Math.Abs(value50.Y) < 0.77f)
							{
								localAI[2] = 11f;
							}
							else if (value50.Y < 0f)
							{
								localAI[2] = 12f;
							}
							else
							{
								localAI[2] = 10f;
							}
							int num1819 = Math.Sign(value50.X);
							if (num1819 != 0)
							{
								base.direction = (spriteDirection = num1819);
							}
						}
						else
						{
							Vector2 value51 = Main.projectile[(int)Main.npc[(int)this.ai[3]].ai[2]].Center;
							value51 -= base.Center;
							if (value51 == Vector2.Zero)
							{
								value51 = -Vector2.UnitY;
							}
							value51.Normalize();
							if (Math.Abs(value51.Y) < 0.77f)
							{
								localAI[2] = 11f;
							}
							else if (value51.Y < 0f)
							{
								localAI[2] = 12f;
							}
							else
							{
								localAI[2] = 10f;
							}
							int num1820 = Math.Sign(value51.X);
							if (num1820 != 0)
							{
								base.direction = (spriteDirection = num1820);
							}
						}
					}
					else if (this.ai[1] >= 90f && this.ai[1] < 120f)
					{
						flag151 = true;
						flag152 = true;
						float num1821 = (this.ai[1] - 90f) / 30f;
						alpha = 255 - (int)(num1821 * 255f);
					}
					else if (this.ai[1] >= 120f && this.ai[1] < 420f)
					{
						flag152 = true;
						alpha = 0;
						if (flag150)
						{
							Vector2 value52 = Main.projectile[(int)this.ai[2]].Center;
							value52 -= base.Center;
							if (value52 == Vector2.Zero)
							{
								value52 = -Vector2.UnitY;
							}
							value52.Normalize();
							if (Math.Abs(value52.Y) < 0.77f)
							{
								localAI[2] = 11f;
							}
							else if (value52.Y < 0f)
							{
								localAI[2] = 12f;
							}
							else
							{
								localAI[2] = 10f;
							}
							int num1822 = Math.Sign(value52.X);
							if (num1822 != 0)
							{
								base.direction = (spriteDirection = num1822);
							}
						}
						else
						{
							Vector2 value53 = Main.projectile[(int)Main.npc[(int)this.ai[3]].ai[2]].Center;
							value53 -= base.Center;
							if (value53 == Vector2.Zero)
							{
								value53 = -Vector2.UnitY;
							}
							value53.Normalize();
							if (Math.Abs(value53.Y) < 0.77f)
							{
								localAI[2] = 11f;
							}
							else if (value53.Y < 0f)
							{
								localAI[2] = 12f;
							}
							else
							{
								localAI[2] = 10f;
							}
							int num1823 = Math.Sign(value53.X);
							if (num1823 != 0)
							{
								base.direction = (spriteDirection = num1823);
							}
						}
					}
					this.ai[1] += 1f;
					if (this.ai[1] >= 420f)
					{
						flag152 = true;
						this.ai[0] = 0f;
						this.ai[1] = 0f;
						this.ai[3] += 1f;
						base.velocity = Vector2.Zero;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 6f)
				{
					localAI[2] = 13f;
					this.ai[1] += 1f;
					if (this.ai[1] >= 120f)
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
						this.ai[3] += 1f;
						base.velocity = Vector2.Zero;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 7f)
				{
					localAI[2] = 11f;
					Vector2 vec15 = Vector2.Normalize(player11.Center - center35);
					if (vec15.HasNaNs())
					{
						vec15 = new Vector2(base.direction, 0f);
					}
					if (this.ai[1] >= 4f && flag150 && (int)(this.ai[1] - 4f) % num1781 == 0)
					{
						int num1824 = (int)(this.ai[1] - 4f) / num1781;
						if (num1824 == 2)
						{
							List<int> list8 = new List<int>();
							for (int num1825 = 0; num1825 < 200; num1825++)
							{
								if (Main.npc[num1825].active && Main.npc[num1825].type == 440 && Main.npc[num1825].ai[3] == (float)base.whoAmI)
								{
									list8.Add(num1825);
								}
							}
							foreach (int item6 in list8)
							{
								NPC nPC18 = Main.npc[item6];
								Vector2 center41 = nPC18.Center;
								int num1826 = Math.Sign(player11.Center.X - center41.X);
								if (num1826 != 0)
								{
									nPC18.direction = (nPC18.spriteDirection = num1826);
								}
								if (Main.netMode != 1)
								{
									vec15 = Vector2.Normalize(player11.Center - center41 + player11.velocity * 20f);
									if (vec15.HasNaNs())
									{
										vec15 = new Vector2(base.direction, 0f);
									}
									Vector2 vector261 = center41 + new Vector2(base.direction * 30, 12f);
									for (int num1827 = 0; (float)num1827 < 5f; num1827++)
									{
										Vector2 spinninpoint5 = vec15 * (6f + (float)Main.rand.NextDouble() * 4f);
										spinninpoint5 = spinninpoint5.RotatedByRandom(1.2566370964050293);
										Projectile.NewProjectile(vector261.X, vector261.Y, spinninpoint5.X, spinninpoint5.Y, 468, 18, 0f, Main.myPlayer);
									}
								}
							}
						}
						int num1828 = Math.Sign(player11.Center.X - center35.X);
						if (num1828 != 0)
						{
							base.direction = (spriteDirection = num1828);
						}
						if (Main.netMode != 1)
						{
							vec15 = Vector2.Normalize(player11.Center - center35 + player11.velocity * 20f);
							if (vec15.HasNaNs())
							{
								vec15 = new Vector2(base.direction, 0f);
							}
							Vector2 vector262 = base.Center + new Vector2(base.direction * 30, 12f);
							float scaleFactor16 = 8f;
							float num1829 = (float)Math.PI * 2f / 25f;
							for (int num1830 = 0; (float)num1830 < 5f; num1830++)
							{
								Vector2 spinningpoint17 = vec15 * scaleFactor16;
								spinningpoint17 = spinningpoint17.RotatedBy(num1829 * (float)num1830 - ((float)Math.PI * 2f / 5f - num1829) / 2f);
								float ai4 = (Main.rand.NextFloat() - 0.5f) * 0.3f * ((float)Math.PI * 2f) / 60f;
								int num1831 = NewNPC((int)vector262.X, (int)vector262.Y + 7, 522, 0, 0f, ai4, spinningpoint17.X, spinningpoint17.Y);
								Main.npc[num1831].velocity = spinningpoint17;
							}
						}
					}
					this.ai[1] += 1f;
					if (this.ai[1] >= (float)(4 + num1781 * num1782))
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
						this.ai[3] += 1f;
						base.velocity = Vector2.Zero;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 8f)
				{
					localAI[2] = 13f;
					if (this.ai[1] >= 4f && flag150 && (int)(this.ai[1] - 4f) % num1783 == 0)
					{
						List<int> list9 = new List<int>();
						for (int num1832 = 0; num1832 < 200; num1832++)
						{
							if (Main.npc[num1832].active && Main.npc[num1832].type == 440 && Main.npc[num1832].ai[3] == (float)base.whoAmI)
							{
								list9.Add(num1832);
							}
						}
						int num1833 = list9.Count + 1;
						if (num1833 > 3)
						{
							num1833 = 3;
						}
						int num1834 = Math.Sign(player11.Center.X - center35.X);
						if (num1834 != 0)
						{
							base.direction = (spriteDirection = num1834);
						}
						if (Main.netMode != 1)
						{
							for (int num1835 = 0; num1835 < num1833; num1835++)
							{
								Point point11 = base.Center.ToTileCoordinates();
								Point point12 = Main.player[target].Center.ToTileCoordinates();
								Vector2 vector263 = Main.player[target].Center - base.Center;
								int num1836 = 20;
								int num1837 = 3;
								int num1838 = 7;
								int num1839 = 2;
								int num1840 = 0;
								bool flag154 = false;
								if (vector263.Length() > 2000f)
								{
									flag154 = true;
								}
								while (!flag154 && num1840 < 100)
								{
									num1840++;
									int num1841 = Main.rand.Next(point12.X - num1836, point12.X + num1836 + 1);
									int num1842 = Main.rand.Next(point12.Y - num1836, point12.Y + num1836 + 1);
									if ((num1842 < point12.Y - num1838 || num1842 > point12.Y + num1838 || num1841 < point12.X - num1838 || num1841 > point12.X + num1838) && (num1842 < point11.Y - num1837 || num1842 > point11.Y + num1837 || num1841 < point11.X - num1837 || num1841 > point11.X + num1837) && !Main.tile[num1841, num1842].nactive())
									{
										bool flag155 = true;
										if (flag155 && Collision.SolidTiles(num1841 - num1839, num1841 + num1839, num1842 - num1839, num1842 + num1839))
										{
											flag155 = false;
										}
										if (flag155)
										{
											NewNPC(num1841 * 16 + 8, num1842 * 16 + 8, 523, 0, base.whoAmI);
											flag154 = true;
											break;
										}
									}
								}
							}
						}
					}
					this.ai[1] += 1f;
					if (this.ai[1] >= (float)(4 + num1783 * num1784))
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
						this.ai[3] += 1f;
						base.velocity = Vector2.Zero;
						netUpdate = true;
					}
				}
				if (!flag150)
				{
					this.ai[3] = num1788;
				}
				dontTakeDamage = flag151;
				chaseable = !flag152;
			}
			else if (aiStyle == 85)
			{
				noTileCollide = false;
				if (this.ai[0] == 0f)
				{
					TargetClosest();
					if (Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						this.ai[0] = 1f;
					}
					else
					{
						Vector2 vector264 = Main.player[target].Center - base.Center;
						vector264.Y -= Main.player[target].height / 4;
						float num1843 = vector264.Length();
						if (num1843 > 800f)
						{
							this.ai[0] = 2f;
						}
						else
						{
							Vector2 center42 = base.Center;
							center42.X = Main.player[target].Center.X;
							Vector2 vector265 = center42 - base.Center;
							if (vector265.Length() > 8f && Collision.CanHit(base.Center, 1, 1, center42, 1, 1))
							{
								this.ai[0] = 3f;
								this.ai[1] = center42.X;
								this.ai[2] = center42.Y;
								Vector2 center43 = base.Center;
								center43.Y = Main.player[target].Center.Y;
								if (vector265.Length() > 8f && Collision.CanHit(base.Center, 1, 1, center43, 1, 1) && Collision.CanHit(center43, 1, 1, Main.player[target].position, 1, 1))
								{
									this.ai[0] = 3f;
									this.ai[1] = center43.X;
									this.ai[2] = center43.Y;
								}
							}
							else
							{
								center42 = base.Center;
								center42.Y = Main.player[target].Center.Y;
								if ((center42 - base.Center).Length() > 8f && Collision.CanHit(base.Center, 1, 1, center42, 1, 1))
								{
									this.ai[0] = 3f;
									this.ai[1] = center42.X;
									this.ai[2] = center42.Y;
								}
							}
							if (this.ai[0] == 0f)
							{
								localAI[0] = 0f;
								vector264.Normalize();
								vector264 *= 0.5f;
								base.velocity += vector264;
								this.ai[0] = 4f;
								this.ai[1] = 0f;
							}
						}
					}
				}
				else if (this.ai[0] == 1f)
				{
					rotation += (float)base.direction * 0.3f;
					Vector2 value54 = Main.player[target].Center - base.Center;
					if (type == 421)
					{
						value54 = Main.player[target].Top - base.Center;
					}
					float num1844 = value54.Length();
					float num1845 = 5.5f;
					num1845 += num1844 / 100f;
					int num1846 = 50;
					value54.Normalize();
					value54 *= num1845;
					base.velocity = (base.velocity * (num1846 - 1) + value54) / num1846;
					if (!Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
					}
					if (type == 421 && num1844 < 40f && Main.player[target].active && !Main.player[target].dead)
					{
						bool flag156 = true;
						for (int num1847 = 0; num1847 < 200; num1847++)
						{
							NPC nPC19 = Main.npc[num1847];
							if (nPC19.active && nPC19.type == type && nPC19.ai[0] == 5f && nPC19.target == target)
							{
								flag156 = false;
								break;
							}
						}
						if (flag156)
						{
							base.Center = Main.player[target].Top;
							base.velocity = Vector2.Zero;
							this.ai[0] = 5f;
							this.ai[1] = 0f;
							netUpdate = true;
						}
					}
				}
				else if (this.ai[0] == 2f)
				{
					rotation = base.velocity.X * 0.1f;
					noTileCollide = true;
					Vector2 value55 = Main.player[target].Center - base.Center;
					float num1848 = value55.Length();
					float num1849 = 3f;
					int num1850 = 3;
					value55.Normalize();
					value55 *= num1849;
					base.velocity = (base.velocity * (num1850 - 1) + value55) / num1850;
					if (num1848 < 600f && !Collision.SolidCollision(base.position, width, height))
					{
						this.ai[0] = 0f;
					}
				}
				else if (this.ai[0] == 3f)
				{
					rotation = base.velocity.X * 0.1f;
					Vector2 value56 = new Vector2(this.ai[1], this.ai[2]);
					Vector2 value57 = value56 - base.Center;
					float num1851 = value57.Length();
					float num1852 = 2f;
					float num1853 = 3f;
					value57.Normalize();
					value57 *= num1852;
					base.velocity = (base.velocity * (num1853 - 1f) + value57) / num1853;
					if (collideX || collideY)
					{
						this.ai[0] = 4f;
						this.ai[1] = 0f;
					}
					if (num1851 < num1852 || num1851 > 800f || Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						this.ai[0] = 0f;
					}
				}
				else if (this.ai[0] == 4f)
				{
					rotation = base.velocity.X * 0.1f;
					if (collideX)
					{
						base.velocity.X *= -0.8f;
					}
					if (collideY)
					{
						base.velocity.Y *= -0.8f;
					}
					Vector2 value58;
					if (base.velocity.X == 0f && base.velocity.Y == 0f)
					{
						value58 = Main.player[target].Center - base.Center;
						value58.Y -= Main.player[target].height / 4;
						value58.Normalize();
						base.velocity = value58 * 0.1f;
					}
					float num1854 = 2f;
					float num1855 = 20f;
					value58 = base.velocity;
					value58.Normalize();
					value58 *= num1854;
					base.velocity = (base.velocity * (num1855 - 1f) + value58) / num1855;
					this.ai[1] += 1f;
					if (this.ai[1] > 180f)
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
					}
					if (Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						this.ai[0] = 0f;
					}
					localAI[0] += 1f;
					if (localAI[0] >= 5f && !Collision.SolidCollision(base.position - new Vector2(10f, 10f), width + 20, height + 20))
					{
						localAI[0] = 0f;
						Vector2 center44 = base.Center;
						center44.X = Main.player[target].Center.X;
						if (Collision.CanHit(base.Center, 1, 1, center44, 1, 1) && Collision.CanHit(base.Center, 1, 1, center44, 1, 1) && Collision.CanHit(Main.player[target].Center, 1, 1, center44, 1, 1))
						{
							this.ai[0] = 3f;
							this.ai[1] = center44.X;
							this.ai[2] = center44.Y;
						}
						else
						{
							center44 = base.Center;
							center44.Y = Main.player[target].Center.Y;
							if (Collision.CanHit(base.Center, 1, 1, center44, 1, 1) && Collision.CanHit(Main.player[target].Center, 1, 1, center44, 1, 1))
							{
								this.ai[0] = 3f;
								this.ai[1] = center44.X;
								this.ai[2] = center44.Y;
							}
						}
					}
				}
				else if (this.ai[0] == 5f)
				{
					Player player12 = Main.player[target];
					if (!player12.active || player12.dead)
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
						netUpdate = true;
					}
					else
					{
						base.Center = ((player12.gravDir == 1f) ? player12.Top : player12.Bottom) + new Vector2(player12.direction * 4, 0f);
						gfxOffY = player12.gfxOffY;
						base.velocity = Vector2.Zero;
						player12.AddBuff(163, 59);
					}
				}
				if (type == 405)
				{
					rotation = 0f;
					for (int num1856 = 0; num1856 < 200; num1856++)
					{
						if (num1856 != base.whoAmI && Main.npc[num1856].active && Main.npc[num1856].type == type && Math.Abs(base.position.X - Main.npc[num1856].position.X) + Math.Abs(base.position.Y - Main.npc[num1856].position.Y) < (float)width)
						{
							if (base.position.X < Main.npc[num1856].position.X)
							{
								base.velocity.X -= 0.05f;
							}
							else
							{
								base.velocity.X += 0.05f;
							}
							if (base.position.Y < Main.npc[num1856].position.Y)
							{
								base.velocity.Y -= 0.05f;
							}
							else
							{
								base.velocity.Y += 0.05f;
							}
						}
					}
				}
				else
				{
					if (type != 421)
					{
						return;
					}
					hide = (this.ai[0] == 5f);
					rotation = base.velocity.X * 0.1f;
					for (int num1857 = 0; num1857 < 200; num1857++)
					{
						if (num1857 != base.whoAmI && Main.npc[num1857].active && Main.npc[num1857].type == type && Math.Abs(base.position.X - Main.npc[num1857].position.X) + Math.Abs(base.position.Y - Main.npc[num1857].position.Y) < (float)width)
						{
							if (base.position.X < Main.npc[num1857].position.X)
							{
								base.velocity.X -= 0.05f;
							}
							else
							{
								base.velocity.X += 0.05f;
							}
							if (base.position.Y < Main.npc[num1857].position.Y)
							{
								base.velocity.Y -= 0.05f;
							}
							else
							{
								base.velocity.Y += 0.05f;
							}
						}
					}
				}
			}
			else if (aiStyle == 86)
			{
				if (alpha > 0)
				{
					alpha -= 30;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				for (int num1858 = 0; num1858 < 200; num1858++)
				{
					if (num1858 == base.whoAmI || !Main.npc[num1858].active || Main.npc[num1858].type != type)
					{
						continue;
					}
					Vector2 vector266 = Main.npc[num1858].Center - base.Center;
					if (!(vector266.Length() < 50f))
					{
						continue;
					}
					vector266.Normalize();
					if (vector266.X == 0f && vector266.Y == 0f)
					{
						if (num1858 > base.whoAmI)
						{
							vector266.X = 1f;
						}
						else
						{
							vector266.X = -1f;
						}
					}
					vector266 *= 0.4f;
					base.velocity -= vector266;
					Main.npc[num1858].velocity += vector266;
				}
				if (type == 472)
				{
					float num1859 = 120f;
					if (localAI[0] < num1859)
					{
						if (localAI[0] == 0f)
						{
							Main.PlaySound(2, (int)base.Center.X, (int)base.Center.Y, 8);
							TargetClosest();
							if (base.direction > 0)
							{
								base.velocity.X += 2f;
							}
							else
							{
								base.velocity.X -= 2f;
							}
							for (int num1860 = 0; num1860 < 20; num1860++)
							{
								Vector2 center45 = base.Center;
								center45.Y -= 18f;
								Vector2 vector267 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
								vector267.Normalize();
								vector267 *= (float)Main.rand.Next(0, 100) * 0.1f;
								center45 += vector267;
								vector267.Normalize();
								vector267 *= (float)Main.rand.Next(50, 90) * 0.2f;
								int num1861 = Dust.NewDust(center45, 1, 1, 27);
								Main.dust[num1861].velocity = -vector267 * 0.3f;
								Main.dust[num1861].alpha = 100;
								if (Main.rand.Next(2) == 0)
								{
									Main.dust[num1861].noGravity = true;
									Main.dust[num1861].scale += 0.3f;
								}
							}
						}
						localAI[0] += 1f;
						float num1862 = 1f - localAI[0] / num1859;
						float num1863 = num1862 * 20f;
						for (int num1864 = 0; (float)num1864 < num1863; num1864++)
						{
							if (Main.rand.Next(5) == 0)
							{
								int num1865 = Dust.NewDust(base.position, width, height, 27);
								Main.dust[num1865].alpha = 100;
								Main.dust[num1865].velocity *= 0.3f;
								Main.dust[num1865].velocity += base.velocity * 0.75f;
								Main.dust[num1865].noGravity = true;
							}
						}
					}
				}
				if (type == 521)
				{
					float num1866 = 120f;
					if (localAI[0] < num1866)
					{
						if (localAI[0] == 0f)
						{
							Main.PlaySound(2, (int)base.Center.X, (int)base.Center.Y, 8);
							TargetClosest();
							if (base.direction > 0)
							{
								base.velocity.X += 2f;
							}
							else
							{
								base.velocity.X -= 2f;
							}
						}
						localAI[0] += 1f;
						int num1867 = 10;
						for (int num1868 = 0; num1868 < 2; num1868++)
						{
							int num1869 = Dust.NewDust(base.position - new Vector2(num1867), width + num1867 * 2, height + num1867 * 2, 228, 0f, 0f, 100, default(Color), 2f);
							Main.dust[num1869].noGravity = true;
							Main.dust[num1869].noLight = true;
						}
					}
				}
				if (this.ai[0] == 0f)
				{
					TargetClosest();
					this.ai[0] = 1f;
					this.ai[1] = base.direction;
				}
				else if (this.ai[0] == 1f)
				{
					TargetClosest();
					float num1870 = 0.3f;
					float num1871 = 7f;
					float num1872 = 4f;
					float num1873 = 660f;
					float num1874 = 4f;
					if (type == 521)
					{
						num1870 = 0.7f;
						num1871 = 14f;
						num1873 = 500f;
						num1872 = 6f;
						num1874 = 3f;
					}
					base.velocity.X += this.ai[1] * num1870;
					if (base.velocity.X > num1871)
					{
						base.velocity.X = num1871;
					}
					if (base.velocity.X < 0f - num1871)
					{
						base.velocity.X = 0f - num1871;
					}
					float num1875 = Main.player[target].Center.Y - base.Center.Y;
					if (Math.Abs(num1875) > num1872)
					{
						num1874 = 15f;
					}
					if (num1875 > num1872)
					{
						num1875 = num1872;
					}
					else if (num1875 < 0f - num1872)
					{
						num1875 = 0f - num1872;
					}
					base.velocity.Y = (base.velocity.Y * (num1874 - 1f) + num1875) / num1874;
					if ((this.ai[1] > 0f && Main.player[target].Center.X - base.Center.X < 0f - num1873) || (this.ai[1] < 0f && Main.player[target].Center.X - base.Center.X > num1873))
					{
						this.ai[0] = 2f;
						this.ai[1] = 0f;
						if (base.Center.Y + 20f > Main.player[target].Center.Y)
						{
							this.ai[1] = -1f;
						}
						else
						{
							this.ai[1] = 1f;
						}
					}
				}
				else if (this.ai[0] == 2f)
				{
					float num1876 = 0.4f;
					float num1877 = 0.95f;
					float num1878 = 5f;
					if (type == 521)
					{
						num1876 = 0.3f;
						num1878 = 7f;
						num1877 = 0.9f;
					}
					base.velocity.Y += this.ai[1] * num1876;
					if (base.velocity.Length() > num1878)
					{
						base.velocity *= num1877;
					}
					if (base.velocity.X > -1f && base.velocity.X < 1f)
					{
						TargetClosest();
						this.ai[0] = 3f;
						this.ai[1] = base.direction;
					}
				}
				else if (this.ai[0] == 3f)
				{
					float num1879 = 0.4f;
					float num1880 = 0.2f;
					float num1881 = 5f;
					float num1882 = 0.95f;
					if (type == 521)
					{
						num1879 = 0.6f;
						num1880 = 0.3f;
						num1881 = 7f;
						num1882 = 0.9f;
					}
					base.velocity.X += this.ai[1] * num1879;
					if (base.Center.Y > Main.player[target].Center.Y)
					{
						base.velocity.Y -= num1880;
					}
					else
					{
						base.velocity.Y += num1880;
					}
					if (base.velocity.Length() > num1881)
					{
						base.velocity *= num1882;
					}
					if (base.velocity.Y > -1f && base.velocity.Y < 1f)
					{
						TargetClosest();
						this.ai[0] = 0f;
						this.ai[1] = base.direction;
					}
				}
				if (type == 521)
				{
					int num1883 = 10;
					for (int num1884 = 0; num1884 < 1; num1884++)
					{
						int num1885 = Dust.NewDust(base.position - new Vector2(num1883), width + num1883 * 2, height + num1883 * 2, 228, 0f, 0f, 100, default(Color), 2f);
						Main.dust[num1885].noGravity = true;
						Main.dust[num1885].noLight = true;
					}
				}
			}
			else if (aiStyle == 87)
			{
				knockBackResist = 0.2f * Main.knockBackMultiplier;
				dontTakeDamage = false;
				noTileCollide = false;
				noGravity = false;
				reflectingProjectiles = false;
				if (this.ai[0] != 7f && Main.player[target].dead)
				{
					TargetClosest();
					if (Main.player[target].dead)
					{
						this.ai[0] = 7f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
					}
				}
				if (this.ai[0] == 0f)
				{
					TargetClosest();
					Vector2 vector268 = Main.player[target].Center - base.Center;
					if (base.velocity.X != 0f || base.velocity.Y > 100f || justHit || vector268.Length() < 80f)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
					}
				}
				else if (this.ai[0] == 1f)
				{
					this.ai[1] += 1f;
					if (this.ai[1] > 36f)
					{
						this.ai[0] = 2f;
						this.ai[1] = 0f;
					}
				}
				else if (this.ai[0] == 2f)
				{
					if ((Main.player[target].Center - base.Center).Length() > 600f)
					{
						this.ai[0] = 5f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
					}
					if (base.velocity.Y == 0f)
					{
						TargetClosest();
						base.velocity.X *= 0.85f;
						this.ai[1] += 1f;
						float num1886 = 15f + 30f * ((float)life / (float)lifeMax);
						float num1887 = 3f + 4f * (1f - (float)life / (float)lifeMax);
						float num1888 = 4f;
						if (!Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
						{
							num1888 += 2f;
						}
						if (this.ai[1] > num1886)
						{
							this.ai[3] += 1f;
							if (this.ai[3] >= 3f)
							{
								this.ai[3] = 0f;
								num1888 *= 2f;
								num1887 /= 2f;
							}
							this.ai[1] = 0f;
							base.velocity.Y -= num1888;
							base.velocity.X = num1887 * (float)base.direction;
						}
					}
					else
					{
						knockBackResist = 0f;
						base.velocity.X *= 0.99f;
						if (base.direction < 0 && base.velocity.X > -1f)
						{
							base.velocity.X = -1f;
						}
						if (base.direction > 0 && base.velocity.X < 1f)
						{
							base.velocity.X = 1f;
						}
					}
					this.ai[2] += 1f;
					if ((double)this.ai[2] > 210.0 && base.velocity.Y == 0f && Main.netMode != 1)
					{
						switch (Main.rand.Next(3))
						{
						case 0:
							this.ai[0] = 3f;
							break;
						case 1:
							this.ai[0] = 4f;
							noTileCollide = true;
							base.velocity.Y = -8f;
							break;
						case 2:
							this.ai[0] = 6f;
							break;
						default:
							this.ai[0] = 2f;
							break;
						}
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
					}
				}
				else if (this.ai[0] == 3f)
				{
					base.velocity.X *= 0.85f;
					dontTakeDamage = true;
					this.ai[1] += 1f;
					if (this.ai[1] >= 180f)
					{
						this.ai[0] = 2f;
						this.ai[1] = 0f;
					}
					if (Main.expertMode)
					{
						ReflectProjectiles(base.Hitbox);
						reflectingProjectiles = true;
					}
				}
				else if (this.ai[0] == 4f)
				{
					noTileCollide = true;
					noGravity = true;
					knockBackResist = 0f;
					if (base.velocity.X < 0f)
					{
						base.direction = -1;
					}
					else
					{
						base.direction = 1;
					}
					spriteDirection = base.direction;
					TargetClosest();
					Vector2 center46 = Main.player[target].Center;
					center46.Y -= 350f;
					Vector2 value59 = center46 - base.Center;
					if (this.ai[2] == 1f)
					{
						this.ai[1] += 1f;
						value59 = Main.player[target].Center - base.Center;
						value59.Normalize();
						value59 *= 8f;
						base.velocity = (base.velocity * 4f + value59) / 5f;
						if (this.ai[1] > 6f)
						{
							this.ai[1] = 0f;
							this.ai[0] = 4.1f;
							this.ai[2] = 0f;
							base.velocity = value59;
						}
					}
					else if (Math.Abs(base.Center.X - Main.player[target].Center.X) < 40f && base.Center.Y < Main.player[target].Center.Y - 300f)
					{
						this.ai[1] = 0f;
						this.ai[2] = 1f;
					}
					else
					{
						value59.Normalize();
						value59 *= 12f;
						base.velocity = (base.velocity * 5f + value59) / 6f;
					}
				}
				else if (this.ai[0] == 4.1f)
				{
					knockBackResist = 0f;
					if (this.ai[2] == 0f && Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1) && !Collision.SolidCollision(base.position, width, height))
					{
						this.ai[2] = 1f;
					}
					if (base.position.Y + (float)height >= Main.player[target].position.Y || base.velocity.Y <= 0f)
					{
						this.ai[1] += 1f;
						if (this.ai[1] > 10f)
						{
							this.ai[0] = 2f;
							this.ai[1] = 0f;
							this.ai[2] = 0f;
							this.ai[3] = 0f;
							if (Collision.SolidCollision(base.position, width, height))
							{
								this.ai[0] = 5f;
							}
						}
					}
					else if (this.ai[2] == 0f)
					{
						noTileCollide = true;
						noGravity = true;
						knockBackResist = 0f;
					}
					base.velocity.Y += 0.2f;
					if (base.velocity.Y > 16f)
					{
						base.velocity.Y = 16f;
					}
				}
				else if (this.ai[0] == 5f)
				{
					if (base.velocity.X > 0f)
					{
						base.direction = 1;
					}
					else
					{
						base.direction = -1;
					}
					spriteDirection = base.direction;
					noTileCollide = true;
					noGravity = true;
					knockBackResist = 0f;
					Vector2 value60 = Main.player[target].Center - base.Center;
					value60.Y -= 4f;
					if (value60.Length() < 200f && !Collision.SolidCollision(base.position, width, height))
					{
						this.ai[0] = 2f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
					}
					if (value60.Length() > 10f)
					{
						value60.Normalize();
						value60 *= 10f;
					}
					base.velocity = (base.velocity * 4f + value60) / 5f;
				}
				else if (this.ai[0] == 6f)
				{
					knockBackResist = 0f;
					if (base.velocity.Y == 0f)
					{
						TargetClosest();
						base.velocity.X *= 0.8f;
						this.ai[1] += 1f;
						if (this.ai[1] > 5f)
						{
							this.ai[1] = 0f;
							base.velocity.Y -= 4f;
							if (Main.player[target].position.Y + (float)Main.player[target].height < base.Center.Y)
							{
								base.velocity.Y -= 1.25f;
							}
							if (Main.player[target].position.Y + (float)Main.player[target].height < base.Center.Y - 40f)
							{
								base.velocity.Y -= 1.5f;
							}
							if (Main.player[target].position.Y + (float)Main.player[target].height < base.Center.Y - 80f)
							{
								base.velocity.Y -= 1.75f;
							}
							if (Main.player[target].position.Y + (float)Main.player[target].height < base.Center.Y - 120f)
							{
								base.velocity.Y -= 2f;
							}
							if (Main.player[target].position.Y + (float)Main.player[target].height < base.Center.Y - 160f)
							{
								base.velocity.Y -= 2.25f;
							}
							if (Main.player[target].position.Y + (float)Main.player[target].height < base.Center.Y - 200f)
							{
								base.velocity.Y -= 2.5f;
							}
							if (!Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
							{
								base.velocity.Y -= 2f;
							}
							base.velocity.X = 12 * base.direction;
							this.ai[2] += 1f;
						}
					}
					else
					{
						base.velocity.X *= 0.98f;
						if (base.direction < 0 && base.velocity.X > -8f)
						{
							base.velocity.X = -8f;
						}
						if (base.direction > 0 && base.velocity.X < 8f)
						{
							base.velocity.X = 8f;
						}
					}
					if (this.ai[2] >= 3f && base.velocity.Y == 0f)
					{
						this.ai[0] = 2f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
					}
				}
				else if (this.ai[0] == 7f)
				{
					damage = 0;
					life = lifeMax;
					defense = 9999;
					noTileCollide = true;
					alpha += 7;
					if (alpha > 255)
					{
						alpha = 255;
					}
					base.velocity.X *= 0.98f;
				}
			}
			else if (aiStyle == 88)
			{
				int num1889 = 7;
				noTileCollide = false;
				noGravity = true;
				knockBackResist = 0.2f * Main.expertKnockBack;
				damage = defDamage;
				if (!Main.eclipse)
				{
					this.ai[0] = -1f;
				}
				else if (target < 0 || Main.player[target].dead || !Main.player[target].active)
				{
					TargetClosest();
					Vector2 vector269 = Main.player[target].Center - base.Center;
					if (Main.player[target].dead || vector269.Length() > 3000f)
					{
						this.ai[0] = -1f;
					}
				}
				else
				{
					Vector2 vector270 = Main.player[target].Center - base.Center;
					if (this.ai[0] > 1f && vector270.Length() > 1000f)
					{
						this.ai[0] = 1f;
					}
				}
				if (this.ai[0] == -1f)
				{
					Vector2 value61 = new Vector2(0f, -8f);
					base.velocity = (base.velocity * 9f + value61) / 10f;
					noTileCollide = true;
					dontTakeDamage = true;
				}
				else if (this.ai[0] == 0f)
				{
					TargetClosest();
					if (base.Center.X < Main.player[target].Center.X - 2f)
					{
						base.direction = 1;
					}
					if (base.Center.X > Main.player[target].Center.X + 2f)
					{
						base.direction = -1;
					}
					spriteDirection = base.direction;
					rotation = (rotation * 9f + base.velocity.X * 0.1f) / 10f;
					if (collideX)
					{
						base.velocity.X *= (0f - oldVelocity.X) * 0.5f;
						if (base.velocity.X > 4f)
						{
							base.velocity.X = 4f;
						}
						if (base.velocity.X < -4f)
						{
							base.velocity.X = -4f;
						}
					}
					if (collideY)
					{
						base.velocity.Y *= (0f - oldVelocity.Y) * 0.5f;
						if (base.velocity.Y > 4f)
						{
							base.velocity.Y = 4f;
						}
						if (base.velocity.Y < -4f)
						{
							base.velocity.Y = -4f;
						}
					}
					Vector2 value62 = Main.player[target].Center - base.Center;
					value62.Y -= 200f;
					if (value62.Length() > 800f)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
					}
					else if (value62.Length() > 80f)
					{
						float num1890 = 6f;
						float num1891 = 30f;
						value62.Normalize();
						value62 *= num1890;
						base.velocity = (base.velocity * (num1891 - 1f) + value62) / num1891;
					}
					else if (base.velocity.Length() > 2f)
					{
						base.velocity *= 0.95f;
					}
					else if (base.velocity.Length() < 1f)
					{
						base.velocity *= 1.05f;
					}
					this.ai[1] += 1f;
					if (justHit)
					{
						this.ai[1] += Main.rand.Next(10, 30);
					}
					if (!(this.ai[1] >= 180f) || Main.netMode == 1)
					{
						return;
					}
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					netUpdate = true;
					while (this.ai[0] == 0f)
					{
						int num1892 = Main.rand.Next(3);
						if (num1892 == 0 && Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
						{
							this.ai[0] = 2f;
							continue;
						}
						switch (num1892)
						{
						case 1:
							this.ai[0] = 3f;
							break;
						case 2:
							if (CountNPCS(478) + CountNPCS(479) < num1889)
							{
								this.ai[0] = 4f;
							}
							break;
						}
					}
				}
				else if (this.ai[0] == 1f)
				{
					collideX = false;
					collideY = false;
					noTileCollide = true;
					knockBackResist = 0f;
					if (target < 0 || !Main.player[target].active || Main.player[target].dead)
					{
						TargetClosest();
					}
					if (base.velocity.X < 0f)
					{
						base.direction = -1;
					}
					else if (base.velocity.X > 0f)
					{
						base.direction = 1;
					}
					spriteDirection = base.direction;
					rotation = (rotation * 9f + base.velocity.X * 0.08f) / 10f;
					Vector2 value63 = Main.player[target].Center - base.Center;
					if (value63.Length() < 300f && !Collision.SolidCollision(base.position, width, height))
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
					}
					float num1893 = 7f + value63.Length() / 100f;
					float num1894 = 25f;
					value63.Normalize();
					value63 *= num1893;
					base.velocity = (base.velocity * (num1894 - 1f) + value63) / num1894;
				}
				else if (this.ai[0] == 2f)
				{
					damage = (int)((double)defDamage * 0.5);
					knockBackResist = 0f;
					if (target < 0 || !Main.player[target].active || Main.player[target].dead)
					{
						TargetClosest();
						this.ai[0] = 0f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
					}
					if (Main.player[target].Center.X - 10f < base.Center.X)
					{
						base.direction = -1;
					}
					else if (Main.player[target].Center.X + 10f > base.Center.X)
					{
						base.direction = 1;
					}
					spriteDirection = base.direction;
					rotation = (rotation * 4f + base.velocity.X * 0.1f) / 5f;
					if (collideX)
					{
						base.velocity.X *= (0f - oldVelocity.X) * 0.5f;
						if (base.velocity.X > 4f)
						{
							base.velocity.X = 4f;
						}
						if (base.velocity.X < -4f)
						{
							base.velocity.X = -4f;
						}
					}
					if (collideY)
					{
						base.velocity.Y *= (0f - oldVelocity.Y) * 0.5f;
						if (base.velocity.Y > 4f)
						{
							base.velocity.Y = 4f;
						}
						if (base.velocity.Y < -4f)
						{
							base.velocity.Y = -4f;
						}
					}
					Vector2 value64 = Main.player[target].Center - base.Center;
					value64.Y -= 20f;
					this.ai[2] += 0.0222222228f;
					if (Main.expertMode)
					{
						this.ai[2] += 0.0166666675f;
					}
					float num1895 = 4f + this.ai[2] + value64.Length() / 120f;
					float num1896 = 20f;
					value64.Normalize();
					value64 *= num1895;
					base.velocity = (base.velocity * (num1896 - 1f) + value64) / num1896;
					this.ai[1] += 1f;
					if (this.ai[1] > 240f || !Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
					}
				}
				else if (this.ai[0] == 3f)
				{
					knockBackResist = 0f;
					noTileCollide = true;
					if (base.velocity.X < 0f)
					{
						base.direction = -1;
					}
					else
					{
						base.direction = 1;
					}
					spriteDirection = base.direction;
					rotation = (rotation * 4f + base.velocity.X * 0.07f) / 5f;
					Vector2 value65 = Main.player[target].Center - base.Center;
					value65.Y -= 12f;
					if (base.Center.X > Main.player[target].Center.X)
					{
						value65.X += 400f;
					}
					else
					{
						value65.X -= 400f;
					}
					if (Math.Abs(base.Center.X - Main.player[target].Center.X) > 350f && Math.Abs(base.Center.Y - Main.player[target].Center.Y) < 20f)
					{
						this.ai[0] = 3.1f;
						this.ai[1] = 0f;
					}
					this.ai[1] += 71f / (678f * (float)Math.PI);
					float num1897 = 8f + this.ai[1];
					float num1898 = 4f;
					value65.Normalize();
					value65 *= num1897;
					base.velocity = (base.velocity * (num1898 - 1f) + value65) / num1898;
				}
				else if (this.ai[0] == 3.1f)
				{
					knockBackResist = 0f;
					noTileCollide = true;
					rotation = (rotation * 4f + base.velocity.X * 0.07f) / 5f;
					Vector2 vector271 = Main.player[target].Center - base.Center;
					vector271.Y -= 12f;
					float num1899 = 16f;
					float num1900 = 8f;
					vector271.Normalize();
					vector271 *= num1899;
					base.velocity = (base.velocity * (num1900 - 1f) + vector271) / num1900;
					if (base.velocity.X < 0f)
					{
						base.direction = -1;
					}
					else
					{
						base.direction = 1;
					}
					spriteDirection = base.direction;
					this.ai[1] += 1f;
					if (this.ai[1] > 10f)
					{
						base.velocity = vector271;
						if (base.velocity.X < 0f)
						{
							base.direction = -1;
						}
						else
						{
							base.direction = 1;
						}
						this.ai[0] = 3.2f;
						this.ai[1] = 0f;
						this.ai[1] = base.direction;
					}
				}
				else if (this.ai[0] == 3.2f)
				{
					damage = (int)((double)defDamage * 1.3);
					collideX = false;
					collideY = false;
					knockBackResist = 0f;
					noTileCollide = true;
					this.ai[2] += 71f / (678f * (float)Math.PI);
					base.velocity.X = (16f + this.ai[2]) * this.ai[1];
					if ((this.ai[1] > 0f && base.Center.X > Main.player[target].Center.X + 260f) || (this.ai[1] < 0f && base.Center.X < Main.player[target].Center.X - 260f))
					{
						if (!Collision.SolidCollision(base.position, width, height))
						{
							this.ai[0] = 0f;
							this.ai[1] = 0f;
							this.ai[2] = 0f;
							this.ai[3] = 0f;
						}
						else if (Math.Abs(base.Center.X - Main.player[target].Center.X) > 800f)
						{
							this.ai[0] = 1f;
							this.ai[1] = 0f;
							this.ai[2] = 0f;
							this.ai[3] = 0f;
						}
					}
					rotation = (rotation * 4f + base.velocity.X * 0.07f) / 5f;
				}
				else if (this.ai[0] == 4f)
				{
					this.ai[0] = 0f;
					TargetClosest();
					if (Main.netMode != 1)
					{
						this.ai[1] = -1f;
						this.ai[2] = -1f;
						for (int num1901 = 0; num1901 < 1000; num1901++)
						{
							int num1902 = (int)Main.player[target].Center.X / 16;
							int num1903 = (int)Main.player[target].Center.Y / 16;
							int num1904 = 30 + num1901 / 50;
							int num1905 = 20 + num1901 / 75;
							num1902 += Main.rand.Next(-num1904, num1904 + 1);
							num1903 += Main.rand.Next(-num1905, num1905 + 1);
							if (!WorldGen.SolidTile(num1902, num1903))
							{
								for (; !WorldGen.SolidTile(num1902, num1903) && (double)num1903 < Main.worldSurface; num1903++)
								{
								}
								if ((new Vector2(num1902 * 16 + 8, num1903 * 16 + 8) - Main.player[target].Center).Length() < 600f)
								{
									this.ai[0] = 4.1f;
									this.ai[1] = num1902;
									this.ai[2] = num1903;
									break;
								}
							}
						}
					}
					netUpdate = true;
				}
				else if (this.ai[0] == 4.1f)
				{
					if (base.velocity.X < -2f)
					{
						base.direction = -1;
					}
					else if (base.velocity.X > 2f)
					{
						base.direction = 1;
					}
					spriteDirection = base.direction;
					rotation = (rotation * 9f + base.velocity.X * 0.1f) / 10f;
					noTileCollide = true;
					int num1906 = (int)this.ai[1];
					int num1907 = (int)this.ai[2];
					float x3 = num1906 * 16 + 8;
					float y4 = num1907 * 16 - 20;
					Vector2 value66 = new Vector2(x3, y4);
					value66 -= base.Center;
					float num1908 = 6f + value66.Length() / 150f;
					if (num1908 > 10f)
					{
						num1908 = 10f;
					}
					float num1909 = 10f;
					if (value66.Length() < 10f)
					{
						this.ai[0] = 4.2f;
					}
					value66.Normalize();
					value66 *= num1908;
					base.velocity = (base.velocity * (num1909 - 1f) + value66) / num1909;
				}
				else
				{
					if (this.ai[0] != 4.2f)
					{
						return;
					}
					rotation = (rotation * 9f + base.velocity.X * 0.1f) / 10f;
					knockBackResist = 0f;
					noTileCollide = true;
					int num1910 = (int)this.ai[1];
					int num1911 = (int)this.ai[2];
					float x4 = num1910 * 16 + 8;
					float y5 = num1911 * 16 - 20;
					Vector2 value67 = new Vector2(x4, y5);
					value67 -= base.Center;
					float num1912 = 4f;
					float num1913 = 2f;
					if (Main.netMode != 1 && value67.Length() < 4f)
					{
						int num1914 = 70;
						if (Main.expertMode)
						{
							num1914 = (int)((double)num1914 * 0.75);
						}
						this.ai[3] += 1f;
						if (this.ai[3] == (float)num1914)
						{
							NewNPC(num1910 * 16 + 8, num1911 * 16, 478, base.whoAmI);
						}
						else if (this.ai[3] == (float)(num1914 * 2))
						{
							this.ai[0] = 0f;
							this.ai[1] = 0f;
							this.ai[2] = 0f;
							this.ai[3] = 0f;
							if (CountNPCS(478) + CountNPCS(479) < num1889 && Main.rand.Next(3) != 0)
							{
								this.ai[0] = 4f;
							}
							else if (Collision.SolidCollision(base.position, width, height))
							{
								this.ai[0] = 1f;
							}
						}
					}
					if (value67.Length() > num1912)
					{
						value67.Normalize();
						value67 *= num1912;
					}
					base.velocity = (base.velocity * (num1913 - 1f) + value67) / num1913;
				}
			}
			else if (aiStyle == 89)
			{
				if (base.velocity.Y == 0f)
				{
					base.velocity.X *= 0.9f;
					rotation += base.velocity.X * 0.02f;
				}
				else
				{
					base.velocity.X *= 0.99f;
					rotation += base.velocity.X * 0.04f;
				}
				int num1915 = 900;
				if (Main.expertMode)
				{
					num1915 = 600;
				}
				if (justHit)
				{
					this.ai[0] -= Main.rand.Next(10, 21);
					if (!Main.expertMode)
					{
						this.ai[0] -= Main.rand.Next(10, 21);
					}
				}
				this.ai[0] += 1f;
				if (this.ai[0] >= (float)num1915)
				{
					Transform(479);
				}
				if (Main.netMode != 1 && base.velocity.Y == 0f && (double)Math.Abs(base.velocity.X) < 0.2 && (double)this.ai[0] >= (double)num1915 * 0.75)
				{
					float num1916 = this.ai[0] - (float)num1915 * 0.75f;
					num1916 /= (float)num1915 * 0.25f;
					if ((float)Main.rand.Next(-10, 120) < num1916 * 100f)
					{
						base.velocity.Y -= (float)Main.rand.Next(20, 40) * 0.025f;
						base.velocity.X += (float)Main.rand.Next(-20, 20) * 0.025f;
						base.velocity *= 1f + num1916 * 2f;
						netUpdate = true;
					}
				}
			}
			else if (aiStyle == 90)
			{
				noTileCollide = false;
				knockBackResist = 0.4f * Main.knockBackMultiplier;
				noGravity = true;
				rotation = (rotation * 9f + base.velocity.X * 0.1f) / 10f;
				if (!Main.eclipse)
				{
					if (timeLeft > 5)
					{
						timeLeft = 5;
					}
					base.velocity.Y -= 0.2f;
					if (base.velocity.Y < -8f)
					{
						base.velocity.Y = -8f;
					}
					noTileCollide = true;
					return;
				}
				if (this.ai[0] == 0f || this.ai[0] == 1f)
				{
					for (int num1917 = 0; num1917 < 200; num1917++)
					{
						if (num1917 != base.whoAmI && Main.npc[num1917].active && Main.npc[num1917].type == type)
						{
							Vector2 vector272 = Main.npc[num1917].Center - base.Center;
							if (vector272.Length() < (float)(width + height))
							{
								vector272.Normalize();
								vector272 *= -0.1f;
								base.velocity += vector272;
								Main.npc[num1917].velocity -= vector272;
							}
						}
					}
				}
				if (target < 0 || Main.player[target].dead || !Main.player[target].active)
				{
					TargetClosest();
					Vector2 vector273 = Main.player[target].Center - base.Center;
					if (Main.player[target].dead || vector273.Length() > 3000f)
					{
						this.ai[0] = -1f;
					}
				}
				else
				{
					Vector2 vector274 = Main.player[target].Center - base.Center;
					if (this.ai[0] > 1f && vector274.Length() > 1000f)
					{
						this.ai[0] = 1f;
					}
				}
				if (this.ai[0] == -1f)
				{
					Vector2 value68 = new Vector2(0f, -8f);
					base.velocity = (base.velocity * 9f + value68) / 10f;
					noTileCollide = true;
					dontTakeDamage = true;
				}
				else if (this.ai[0] == 0f)
				{
					TargetClosest();
					spriteDirection = base.direction;
					if (collideX)
					{
						base.velocity.X *= (0f - oldVelocity.X) * 0.5f;
						if (base.velocity.X > 4f)
						{
							base.velocity.X = 4f;
						}
						if (base.velocity.X < -4f)
						{
							base.velocity.X = -4f;
						}
					}
					if (collideY)
					{
						base.velocity.Y *= (0f - oldVelocity.Y) * 0.5f;
						if (base.velocity.Y > 4f)
						{
							base.velocity.Y = 4f;
						}
						if (base.velocity.Y < -4f)
						{
							base.velocity.Y = -4f;
						}
					}
					Vector2 value69 = Main.player[target].Center - base.Center;
					if (value69.Length() > 800f)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
					}
					else if (value69.Length() > 200f)
					{
						float num1918 = 5.5f + value69.Length() / 100f + this.ai[1] / 15f;
						float num1919 = 40f;
						value69.Normalize();
						value69 *= num1918;
						base.velocity = (base.velocity * (num1919 - 1f) + value69) / num1919;
					}
					else if (base.velocity.Length() > 2f)
					{
						base.velocity *= 0.95f;
					}
					else if (base.velocity.Length() < 1f)
					{
						base.velocity *= 1.05f;
					}
					this.ai[1] += 1f;
					if (this.ai[1] >= 90f)
					{
						this.ai[1] = 0f;
						this.ai[0] = 2f;
					}
				}
				else if (this.ai[0] == 1f)
				{
					collideX = false;
					collideY = false;
					noTileCollide = true;
					knockBackResist = 0f;
					if (target < 0 || !Main.player[target].active || Main.player[target].dead)
					{
						TargetClosest();
					}
					if (base.velocity.X < 0f)
					{
						base.direction = -1;
					}
					else if (base.velocity.X > 0f)
					{
						base.direction = 1;
					}
					spriteDirection = base.direction;
					rotation = (rotation * 9f + base.velocity.X * 0.08f) / 10f;
					Vector2 value70 = Main.player[target].Center - base.Center;
					if (value70.Length() < 300f && !Collision.SolidCollision(base.position, width, height))
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
					}
					this.ai[2] += 0.0166666675f;
					float num1920 = 5.5f + this.ai[2] + value70.Length() / 150f;
					float num1921 = 35f;
					value70.Normalize();
					value70 *= num1920;
					base.velocity = (base.velocity * (num1921 - 1f) + value70) / num1921;
				}
				else if (this.ai[0] == 2f)
				{
					if (base.velocity.X < 0f)
					{
						base.direction = -1;
					}
					else if (base.velocity.X > 0f)
					{
						base.direction = 1;
					}
					spriteDirection = base.direction;
					rotation = (rotation * 7f + base.velocity.X * 0.1f) / 8f;
					knockBackResist = 0f;
					noTileCollide = true;
					Vector2 vector275 = Main.player[target].Center - base.Center;
					vector275.Y -= 8f;
					float num1922 = 9f;
					float num1923 = 8f;
					vector275.Normalize();
					vector275 *= num1922;
					base.velocity = (base.velocity * (num1923 - 1f) + vector275) / num1923;
					if (base.velocity.X < 0f)
					{
						base.direction = -1;
					}
					else
					{
						base.direction = 1;
					}
					spriteDirection = base.direction;
					this.ai[1] += 1f;
					if (this.ai[1] > 10f)
					{
						base.velocity = vector275;
						if (base.velocity.X < 0f)
						{
							base.direction = -1;
						}
						else
						{
							base.direction = 1;
						}
						this.ai[0] = 2.1f;
						this.ai[1] = 0f;
					}
				}
				else
				{
					if (this.ai[0] != 2.1f)
					{
						return;
					}
					if (base.velocity.X < 0f)
					{
						base.direction = -1;
					}
					else if (base.velocity.X > 0f)
					{
						base.direction = 1;
					}
					spriteDirection = base.direction;
					base.velocity *= 1.01f;
					knockBackResist = 0f;
					noTileCollide = true;
					this.ai[1] += 1f;
					int num1924 = 45;
					if (this.ai[1] > (float)num1924)
					{
						if (!Collision.SolidCollision(base.position, width, height))
						{
							this.ai[0] = 0f;
							this.ai[1] = 0f;
							this.ai[2] = 0f;
						}
						else if (this.ai[1] > (float)(num1924 * 2))
						{
							this.ai[0] = 1f;
							this.ai[1] = 0f;
							this.ai[2] = 0f;
						}
					}
				}
			}
			else if (aiStyle == 91)
			{
				noGravity = true;
				noTileCollide = false;
				dontTakeDamage = false;
				if (justHit && Main.netMode != 1 && Main.expertMode && Main.rand.Next(6) == 0)
				{
					netUpdate = true;
					this.ai[0] = -1f;
					this.ai[1] = 0f;
				}
				if (this.ai[0] == -1f)
				{
					dontTakeDamage = true;
					noGravity = false;
					base.velocity.X *= 0.98f;
					this.ai[1] += 1f;
					if (this.ai[1] >= 120f)
					{
						this.ai[0] = (this.ai[1] = (this.ai[2] = (this.ai[3] = 0f)));
					}
				}
				else if (this.ai[0] == 0f)
				{
					TargetClosest();
					if (Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						this.ai[0] = 1f;
						return;
					}
					Vector2 vector276 = Main.player[target].Center - base.Center;
					vector276.Y -= Main.player[target].height / 4;
					float num1925 = vector276.Length();
					if (num1925 > 800f)
					{
						this.ai[0] = 2f;
						return;
					}
					Vector2 center47 = base.Center;
					center47.X = Main.player[target].Center.X;
					Vector2 vector277 = center47 - base.Center;
					if (vector277.Length() > 8f && Collision.CanHit(base.Center, 1, 1, center47, 1, 1))
					{
						this.ai[0] = 3f;
						this.ai[1] = center47.X;
						this.ai[2] = center47.Y;
						Vector2 center48 = base.Center;
						center48.Y = Main.player[target].Center.Y;
						if (vector277.Length() > 8f && Collision.CanHit(base.Center, 1, 1, center48, 1, 1) && Collision.CanHit(center48, 1, 1, Main.player[target].position, 1, 1))
						{
							this.ai[0] = 3f;
							this.ai[1] = center48.X;
							this.ai[2] = center48.Y;
						}
					}
					else
					{
						center47 = base.Center;
						center47.Y = Main.player[target].Center.Y;
						if ((center47 - base.Center).Length() > 8f && Collision.CanHit(base.Center, 1, 1, center47, 1, 1))
						{
							this.ai[0] = 3f;
							this.ai[1] = center47.X;
							this.ai[2] = center47.Y;
						}
					}
					if (this.ai[0] == 0f)
					{
						localAI[0] = 0f;
						vector276.Normalize();
						vector276 *= 0.5f;
						base.velocity += vector276;
						this.ai[0] = 4f;
						this.ai[1] = 0f;
					}
				}
				else if (this.ai[0] == 1f)
				{
					Vector2 value71 = Main.player[target].Center - base.Center;
					float num1926 = value71.Length();
					float num1927 = 2f;
					num1927 += num1926 / 200f;
					int num1928 = 50;
					value71.Normalize();
					value71 *= num1927;
					base.velocity = (base.velocity * (num1928 - 1) + value71) / num1928;
					if (!Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
					}
				}
				else if (this.ai[0] == 2f)
				{
					noTileCollide = true;
					Vector2 value72 = Main.player[target].Center - base.Center;
					float num1929 = value72.Length();
					float num1930 = 2f;
					int num1931 = 4;
					value72.Normalize();
					value72 *= num1930;
					base.velocity = (base.velocity * (num1931 - 1) + value72) / num1931;
					if (num1929 < 600f && !Collision.SolidCollision(base.position, width, height))
					{
						this.ai[0] = 0f;
					}
				}
				else if (this.ai[0] == 3f)
				{
					Vector2 value73 = new Vector2(this.ai[1], this.ai[2]);
					Vector2 value74 = value73 - base.Center;
					float num1932 = value74.Length();
					float num1933 = 1f;
					float num1934 = 3f;
					value74.Normalize();
					value74 *= num1933;
					base.velocity = (base.velocity * (num1934 - 1f) + value74) / num1934;
					if (collideX || collideY)
					{
						this.ai[0] = 4f;
						this.ai[1] = 0f;
					}
					if (num1932 < num1933 || num1932 > 800f || Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						this.ai[0] = 0f;
					}
				}
				else
				{
					if (this.ai[0] != 4f)
					{
						return;
					}
					if (collideX)
					{
						base.velocity.X *= -0.8f;
					}
					if (collideY)
					{
						base.velocity.Y *= -0.8f;
					}
					Vector2 value75;
					if (base.velocity.X == 0f && base.velocity.Y == 0f)
					{
						value75 = Main.player[target].Center - base.Center;
						value75.Y -= Main.player[target].height / 4;
						value75.Normalize();
						base.velocity = value75 * 0.1f;
					}
					float num1935 = 1.5f;
					float num1936 = 20f;
					value75 = base.velocity;
					value75.Normalize();
					value75 *= num1935;
					base.velocity = (base.velocity * (num1936 - 1f) + value75) / num1936;
					this.ai[1] += 1f;
					if (this.ai[1] > 180f)
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
					}
					if (Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						this.ai[0] = 0f;
					}
					localAI[0] += 1f;
					if (!(localAI[0] >= 5f) || Collision.SolidCollision(base.position - new Vector2(10f, 10f), width + 20, height + 20))
					{
						return;
					}
					localAI[0] = 0f;
					Vector2 center49 = base.Center;
					center49.X = Main.player[target].Center.X;
					if (Collision.CanHit(base.Center, 1, 1, center49, 1, 1) && Collision.CanHit(base.Center, 1, 1, center49, 1, 1) && Collision.CanHit(Main.player[target].Center, 1, 1, center49, 1, 1))
					{
						this.ai[0] = 3f;
						this.ai[1] = center49.X;
						this.ai[2] = center49.Y;
						return;
					}
					center49 = base.Center;
					center49.Y = Main.player[target].Center.Y;
					if (Collision.CanHit(base.Center, 1, 1, center49, 1, 1) && Collision.CanHit(Main.player[target].Center, 1, 1, center49, 1, 1))
					{
						this.ai[0] = 3f;
						this.ai[1] = center49.X;
						this.ai[2] = center49.Y;
					}
				}
			}
			else if (aiStyle == 92)
			{
				if (Main.rand.Next(20) == 0)
				{
					soundHit = Main.rand.Next(15, 18);
				}
				if (Main.netMode == 1)
				{
					return;
				}
				bool flag157 = false;
				int num1937 = (int)this.ai[0];
				int num1938 = (int)this.ai[1];
				if (!flag157 && (!Main.tile[num1937, num1938].active() || Main.tile[num1937, num1938].type != 378))
				{
					flag157 = true;
				}
				if (!flag157 && (target == 16 || Main.player[target].dead || Vector2.Distance(base.Center, Main.player[target].Center) > 160000f))
				{
					TargetClosest(false);
					if (target == 16 || Main.player[target].dead || Vector2.Distance(base.Center, Main.player[target].Center) > 160000f)
					{
						flag157 = true;
					}
				}
				if (flag157)
				{
					life = 0;
					HitEffect();
					active = false;
					int num1939 = TETrainingDummy.Find((int)this.ai[0], (int)this.ai[1]);
					if (num1939 != -1)
					{
						((TETrainingDummy)TileEntity.ByID[num1939]).Deactivate();
					}
				}
			}
			else if (aiStyle == 93)
			{
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					for (int num1940 = 0; num1940 < 4; num1940++)
					{
						int num1941 = NewNPC((int)base.Center.X + num1940 * 40 - 150, (int)base.Center.Y, 492, base.whoAmI);
						Main.npc[num1941].netUpdate = true;
						Main.npc[num1941].ai[0] = base.whoAmI;
						Main.npc[num1941].ai[1] = num1940;
						Main.npc[num1941].ai[3] = 60 * num1940;
						Main.npc[num1941].TargetClosest(false);
						Main.npc[num1941].timeLeft = 600;
						this.ai[num1940] = num1941;
					}
				}
				bool flag158 = true;
				for (int num1942 = 0; num1942 < 4; num1942++)
				{
					if (this.ai[num1942] >= 0f && (!Main.npc[(int)this.ai[num1942]].active || Main.npc[(int)this.ai[num1942]].type != 492))
					{
						this.ai[num1942] = -1f;
						netUpdate = true;
					}
					else if (this.ai[num1942] >= 0f)
					{
						flag158 = false;
					}
				}
				if (flag158)
				{
					life = 0;
					HitEffect(9999);
					checkDead();
					return;
				}
				if (Main.netMode != 1 && Main.rand.Next(300) == 0)
				{
					Vector2 vector278 = new Vector2((Main.rand.NextFloat() - 0.5f) * (float)(width - 70), (Main.rand.NextFloat() - 0.5f) * 20f - (float)(height / 2) - 20f).RotatedBy(rotation);
					vector278 += base.Center;
					int num1943 = NewNPC((int)vector278.X, (int)vector278.Y, Utils.SelectRandom<int>(Main.rand, 213, 215, 214, 212));
					Main.npc[num1943].velocity = new Vector2((Main.rand.NextFloat() - 0.5f) * 5f, -8.01f) + base.velocity;
					Main.npc[num1943].netUpdate = true;
					Main.npc[num1943].timeLeft = 600;
				}
				if ((localAI[3] += 1f) >= 64f)
				{
					localAI[3] = 0f;
				}
				TargetClosest();
				int num1944 = (int)base.Center.X / 16 + Math.Sign(base.velocity.X) * 10;
				int num1945 = (int)(base.position.Y + (float)height) / 16;
				int num1946 = 0;
				if (Main.tile[num1944, num1945].nactive() && Main.tileSolid[Main.tile[num1944, num1945].type] && !Main.tileSolidTop[Main.tile[num1944, num1945].type])
				{
					num1946 = 1;
				}
				else
				{
					for (; num1946 < 150 && num1945 + num1946 < Main.maxTilesY; num1946++)
					{
						int num1947 = num1945 + num1946;
						if (Main.tile[num1944, num1947].nactive() && Main.tileSolid[Main.tile[num1944, num1947].type] && !Main.tileSolidTop[Main.tile[num1944, num1947].type])
						{
							num1946--;
							break;
						}
					}
				}
				float num1948 = num1946 * 16;
				if (num1948 < 350f)
				{
					float num1949 = num1948 - 350f;
					if (num1949 < -4f)
					{
						num1949 = -4f;
					}
					base.velocity.Y = MathHelper.Lerp(base.velocity.Y, num1949, 0.05f);
				}
				else if (num1948 > 450f)
				{
					float num1950 = num1948 - 350f;
					if (num1950 > 4f)
					{
						num1950 = 4f;
					}
					base.velocity.Y = MathHelper.Lerp(base.velocity.Y, num1950, 0.05f);
				}
				else
				{
					base.velocity.Y *= 0.95f;
				}
				float num1951 = Main.player[target].Center.X - base.Center.X;
				if (Math.Abs(num1951) >= 300f && (Math.Abs(base.velocity.X) < 6f || Math.Sign(base.velocity.X) != base.direction))
				{
					base.velocity.X += (float)base.direction * 0.06f;
				}
				rotation = base.velocity.X * 0.025f;
				spriteDirection = -Math.Sign(base.velocity.X);
				for (int num1952 = 0; num1952 < 2; num1952++)
				{
					if (Main.rand.Next(2) != 0)
					{
						Vector2 value76 = new Vector2((Main.rand.NextFloat() - 0.5f) * (float)(width - 70), (Main.rand.NextFloat() - 0.5f) * 20f + (float)(height / 2) + 10f).RotatedBy(rotation);
						Dust dust15 = Main.dust[Dust.NewDust(base.Center, 0, 0, 228)];
						dust15.position = base.Center + value76;
						dust15.velocity = Vector2.Zero;
						dust15.noGravity = true;
						dust15.noLight = true;
						dust15.fadeIn = 1.5f;
						dust15.scale = 0.5f;
					}
				}
			}
			else if (aiStyle == 94)
			{
				if (this.ai[2] == 1f)
				{
					base.velocity = Vector2.UnitY * base.velocity.Length();
					if (base.velocity.Y < 0.25f)
					{
						base.velocity.Y += 0.02f;
					}
					if (base.velocity.Y > 0.25f)
					{
						base.velocity.Y -= 0.02f;
					}
					dontTakeDamage = true;
					this.ai[1] += 1f;
					if (this.ai[1] > 120f)
					{
						Opacity = 1f - (this.ai[1] - 120f) / 60f;
					}
					int num1953 = 6;
					switch (type)
					{
					case 517:
						num1953 = 127;
						break;
					case 422:
						num1953 = 229;
						break;
					case 507:
						num1953 = 242;
						break;
					case 493:
						num1953 = 135;
						break;
					}
					if (Main.rand.Next(5) == 0 && this.ai[1] < 120f)
					{
						for (int num1954 = 0; num1954 < 3; num1954++)
						{
							Dust dust16 = Main.dust[Dust.NewDust(base.Left, width, height / 2, num1953)];
							dust16.position = base.Center + Vector2.UnitY.RotatedByRandom(4.1887903213500977) * new Vector2((float)width * 1.5f, (float)height * 1.1f) * 0.8f * (0.8f + Main.rand.NextFloat() * 0.2f);
							dust16.velocity.X = 0f;
							dust16.velocity.Y = (0f - Math.Abs(dust16.velocity.Y - (float)num1954 + base.velocity.Y - 4f)) * 3f;
							dust16.noGravity = true;
							dust16.fadeIn = 1f;
							dust16.scale = 1f + Main.rand.NextFloat() + (float)num1954 * 0.3f;
						}
					}
					if (this.ai[1] < 150f)
					{
						for (int num1955 = 0; num1955 < 3; num1955++)
						{
							if (Main.rand.Next(4) == 0)
							{
								Dust dust17 = Main.dust[Dust.NewDust(base.Top + new Vector2((float)(-width) * (0.33f - 0.11f * (float)num1955), -20f), (int)((float)width * (0.66f - 0.22f * (float)num1955)), 20, num1953)];
								dust17.velocity.X = 0f;
								dust17.velocity.Y = (0f - Math.Abs(dust17.velocity.Y - (float)num1955 + base.velocity.Y - 4f)) * (1f + this.ai[1] / 180f * 0.5f);
								dust17.noGravity = true;
								dust17.fadeIn = 1f;
								dust17.scale = 1f + Main.rand.NextFloat() + (float)num1955 * 0.3f;
							}
						}
					}
					if (Main.rand.Next(5) == 0 && this.ai[1] < 150f)
					{
						for (int num1956 = 0; num1956 < 3; num1956++)
						{
							Vector2 position10 = base.Center + Vector2.UnitY.RotatedByRandom(4.1887903213500977) * new Vector2(width, height) * 0.7f * Main.rand.NextFloat();
							float num1957 = 1f + Main.rand.NextFloat() * 2f + this.ai[1] / 180f * 4f;
							for (int num1958 = 0; num1958 < 6; num1958++)
							{
								Dust dust18 = Main.dust[Dust.NewDust(position10, 4, 4, num1953)];
								dust18.position = position10;
								dust18.velocity.X *= num1957;
								dust18.velocity.Y = (0f - Math.Abs(dust18.velocity.Y)) * num1957;
								dust18.noGravity = true;
								dust18.fadeIn = 1f;
								dust18.scale = 1.5f + Main.rand.NextFloat() + (float)num1958 * 0.13f;
							}
							Main.PlaySound(3, position10, Utils.SelectRandom<int>(Main.rand, 1, 18));
						}
					}
					if (Main.rand.Next(3) != 0 && this.ai[1] < 150f)
					{
						Dust dust19 = Main.dust[Dust.NewDust(base.Left, width, height / 2, 241)];
						dust19.position = base.Center + Vector2.UnitY.RotatedByRandom(4.1887903213500977) * new Vector2(width / 2, height / 2) * (0.8f + Main.rand.NextFloat() * 0.2f);
						dust19.velocity.X = 0f;
						dust19.velocity.Y = Math.Abs(dust19.velocity.Y) * 0.25f;
					}
					if (this.ai[1] % 60f == 1f)
					{
						Main.PlaySound(4, base.Center, 22);
					}
					if (this.ai[1] >= 180f)
					{
						life = 0;
						HitEffect(0, 1337.0);
						checkDead();
					}
					return;
				}
				if (this.ai[3] > 0f)
				{
					bool flag159 = dontTakeDamage;
					switch (type)
					{
					case 517:
						flag159 = (ShieldStrengthTowerSolar != 0);
						break;
					case 422:
						flag159 = (ShieldStrengthTowerVortex != 0);
						break;
					case 507:
						flag159 = (ShieldStrengthTowerNebula != 0);
						break;
					case 493:
						flag159 = (ShieldStrengthTowerStardust != 0);
						break;
					}
					if (flag159 != dontTakeDamage)
					{
						Main.PlaySound(4, (int)base.position.X, (int)base.position.Y, 58);
					}
					else if (this.ai[3] == 1f)
					{
						Main.PlaySound(4, (int)base.position.X, (int)base.position.Y, 3);
					}
					this.ai[3] += 1f;
					if (this.ai[3] > 120f)
					{
						this.ai[3] = 0f;
					}
				}
				switch (type)
				{
				case 517:
					dontTakeDamage = (ShieldStrengthTowerSolar != 0);
					break;
				case 422:
					dontTakeDamage = (ShieldStrengthTowerVortex != 0);
					break;
				case 507:
					dontTakeDamage = (ShieldStrengthTowerNebula != 0);
					break;
				case 493:
					dontTakeDamage = (ShieldStrengthTowerStardust != 0);
					break;
				}
				TargetClosest(false);
				if (Main.player[target].Distance(base.Center) > 2000f)
				{
					localAI[0] += 1f;
				}
				if (localAI[0] >= 60f && Main.netMode != 1)
				{
					localAI[0] = 0f;
					netUpdate = true;
					life = (int)MathHelper.Clamp(life + 200, 0f, lifeMax);
				}
				else
				{
					localAI[0] = 0f;
				}
				base.velocity = new Vector2(0f, (float)Math.Sin((float)Math.PI * 2f * this.ai[0] / 300f) * 0.5f);
				this.ai[0] += 1f;
				if (this.ai[0] >= 300f)
				{
					this.ai[0] = 0f;
					netUpdate = true;
				}
				if (type == 493)
				{
					if (Main.rand.Next(5) == 0)
					{
						Dust dust20 = Main.dust[Dust.NewDust(base.Left, width, height / 2, 241)];
						dust20.position = base.Center + Vector2.UnitY.RotatedByRandom(2.0943951606750488) * new Vector2(width / 2, height / 2) * (0.8f + Main.rand.NextFloat() * 0.2f);
						dust20.velocity.X = 0f;
						dust20.velocity.Y = Math.Abs(dust20.velocity.Y) * 0.25f;
					}
					for (int num1959 = 0; num1959 < 3; num1959++)
					{
						if (Main.rand.Next(5) == 0)
						{
							Dust dust21 = Main.dust[Dust.NewDust(base.Top + new Vector2((float)(-width) * (0.33f - 0.11f * (float)num1959), -20f), (int)((float)width * (0.66f - 0.22f * (float)num1959)), 20, 135)];
							dust21.velocity.X = 0f;
							dust21.velocity.Y = (0f - Math.Abs(dust21.velocity.Y - (float)num1959 + base.velocity.Y - 4f)) * 1f;
							dust21.noGravity = true;
							dust21.fadeIn = 1f;
							dust21.scale = 1f + Main.rand.NextFloat() + (float)num1959 * 0.3f;
						}
					}
					if (this.ai[1] > 0f)
					{
						this.ai[1] -= 1f;
					}
					if (Main.netMode != 1 && this.ai[1] <= 0f && Main.player[target].active && !Main.player[target].dead && Distance(Main.player[target].Center) < 1080f && Main.player[target].position.Y - base.position.Y < 400f)
					{
						List<int> list10 = new List<int>();
						if (CountNPCS(405) + CountNPCS(406) < 2)
						{
							list10.Add(405);
						}
						if (CountNPCS(402) < 2)
						{
							list10.Add(402);
						}
						if (CountNPCS(407) < 1)
						{
							list10.Add(407);
						}
						if (list10.Count > 0)
						{
							int num1960 = Utils.SelectRandom(Main.rand, list10.ToArray());
							this.ai[1] = 30 * Main.rand.Next(5, 16);
							int num1961 = Main.rand.Next(3, 6);
							int num1962 = Main.rand.Next(0, 4);
							int num1963 = 0;
							List<Tuple<Vector2, int, int>> list11 = new List<Tuple<Vector2, int, int>>();
							List<Vector2> list12 = new List<Vector2>();
							list11.Add(Tuple.Create(base.Top - Vector2.UnitY * 120f, num1961, 0));
							int num1964 = 0;
							int num1965 = list11.Count;
							while (list11.Count > 0)
							{
								Vector2 ıtem = list11[0].Item1;
								int num1966 = 1;
								int num1967 = 1;
								if (num1964 > 0 && num1962 > 0 && (Main.rand.Next(3) != 0 || num1964 == 1))
								{
									num1967 = Main.rand.Next(Math.Max(1, list11[0].Item2));
									num1966++;
									num1962--;
								}
								for (int num1968 = 0; num1968 < num1966; num1968++)
								{
									int num1969 = list11[0].Item3;
									if (num1964 == 0)
									{
										num1969 = Utils.SelectRandom<int>(Main.rand, -1, 1);
									}
									else if (num1968 == 1)
									{
										num1969 *= -1;
									}
									float num1970 = ((num1964 % 2 == 0) ? 0f : ((float)Math.PI)) + (0.5f - Main.rand.NextFloat()) * ((float)Math.PI / 4f) + (float)num1969 * ((float)Math.PI / 4f) * (float)(num1964 % 2 == 0).ToDirectionInt();
									float scaleFactor17 = 100f + 50f * Main.rand.NextFloat();
									int num1971 = list11[0].Item2;
									if (num1968 != 0)
									{
										num1971 = num1967;
									}
									if (num1964 == 0)
									{
										num1970 = (0.5f - Main.rand.NextFloat()) * ((float)Math.PI / 4f);
										scaleFactor17 = 100f + 100f * Main.rand.NextFloat();
									}
									Vector2 value77 = (-Vector2.UnitY).RotatedBy(num1970) * scaleFactor17;
									if (num1971 - 1 < 0)
									{
										value77 = Vector2.Zero;
									}
									num1963 = Projectile.NewProjectile(ıtem.X, ıtem.Y, value77.X, value77.Y, 540, 0, 0f, Main.myPlayer, (float)(-num1964) * 10f, 0.5f + Main.rand.NextFloat() * 0.5f);
									list12.Add(ıtem + value77);
									if (num1964 < num1961 && list11[0].Item2 > 0)
									{
										list11.Add(Tuple.Create(ıtem + value77, num1971 - 1, num1969));
									}
								}
								list11.Remove(list11[0]);
								if (--num1965 == 0)
								{
									num1965 = list11.Count;
									num1964++;
								}
							}
							Main.projectile[num1963].localAI[0] = num1960;
						}
						else
						{
							this.ai[1] = 30f;
						}
					}
				}
				if (type == 507)
				{
					if (Main.rand.Next(5) == 0)
					{
						Dust dust22 = Main.dust[Dust.NewDust(base.Left, width, height / 2, 241)];
						dust22.position = base.Center + Vector2.UnitY.RotatedByRandom(2.0943951606750488) * new Vector2(width / 2, height / 2) * (0.8f + Main.rand.NextFloat() * 0.2f);
						dust22.velocity.X = 0f;
						dust22.velocity.Y = Math.Abs(dust22.velocity.Y) * 0.25f;
					}
					for (int num1972 = 0; num1972 < 3; num1972++)
					{
						if (Main.rand.Next(5) == 0)
						{
							Dust dust23 = Main.dust[Dust.NewDust(base.Top + new Vector2((float)(-width) * (0.33f - 0.11f * (float)num1972), -20f), (int)((float)width * (0.66f - 0.22f * (float)num1972)), 20, 242)];
							dust23.velocity.X = 0f;
							dust23.velocity.Y = (0f - Math.Abs(dust23.velocity.Y - (float)num1972 + base.velocity.Y - 4f)) * 1f;
							dust23.noGravity = true;
							dust23.fadeIn = 1f;
							dust23.color = Color.Black;
							dust23.scale = 1f + Main.rand.NextFloat() + (float)num1972 * 0.3f;
						}
					}
				}
				if (type == 422)
				{
					if (Main.rand.Next(5) == 0)
					{
						Dust dust24 = Main.dust[Dust.NewDust(base.Left, width, height / 2, 241)];
						dust24.position = base.Center + Vector2.UnitY.RotatedByRandom(2.0943951606750488) * new Vector2(width / 2, height / 2) * (0.8f + Main.rand.NextFloat() * 0.2f);
						dust24.velocity.X = 0f;
						dust24.velocity.Y = Math.Abs(dust24.velocity.Y) * 0.25f;
					}
					for (int num1973 = 0; num1973 < 3; num1973++)
					{
						if (Main.rand.Next(5) == 0)
						{
							Dust dust25 = Main.dust[Dust.NewDust(base.Top + new Vector2((float)(-width) * (0.33f - 0.11f * (float)num1973), -20f), (int)((float)width * (0.66f - 0.22f * (float)num1973)), 20, 229)];
							dust25.velocity.X = 0f;
							dust25.velocity.Y = (0f - Math.Abs(dust25.velocity.Y - (float)num1973 + base.velocity.Y - 4f)) * 1f;
							dust25.noGravity = true;
							dust25.fadeIn = 1f;
							dust25.color = Color.Black;
							dust25.scale = 1f + Main.rand.NextFloat() + (float)num1973 * 0.3f;
						}
					}
					if (this.ai[1] > 0f)
					{
						this.ai[1] -= 1f;
					}
					if (Main.netMode != 1 && this.ai[1] <= 0f && Main.player[target].active && !Main.player[target].dead && Distance(Main.player[target].Center) < 3240f && !Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0))
					{
						this.ai[1] = 60 + Main.rand.Next(120);
						Point point13 = Main.player[target].Top.ToTileCoordinates();
						bool flag160 = CountNPCS(427) + CountNPCS(426) < 14;
						for (int num1974 = 0; num1974 < 10; num1974++)
						{
							if (WorldGen.SolidTile(point13.X, point13.Y))
							{
								break;
							}
							if (point13.Y <= 10)
							{
								break;
							}
							point13.Y--;
						}
						if (flag160)
						{
							Projectile.NewProjectile(point13.X * 16 + 8, point13.Y * 16 + 24, 0f, 0f, 579, 0, 0f, Main.myPlayer);
						}
						else
						{
							Projectile.NewProjectile(point13.X * 16 + 8, point13.Y * 16 + 17, 0f, 0f, 578, 0, 1f, Main.myPlayer);
						}
					}
					if (Main.netMode != 1 && this.ai[1] <= 0f && Main.player[target].active && !Main.player[target].dead && Distance(Main.player[target].Center) < 1080f && Main.player[target].position.Y - base.position.Y < 400f && CountNPCS(427) + CountNPCS(426) * 3 + CountNPCS(428) < 20)
					{
						this.ai[1] = 420 + Main.rand.Next(360);
						Point point14 = base.Center.ToTileCoordinates();
						Point point15 = Main.player[target].Center.ToTileCoordinates();
						Vector2 vector279 = Main.player[target].Center - base.Center;
						int num1975 = 20;
						int num1976 = 3;
						int num1977 = 8;
						int num1978 = 2;
						int num1979 = 0;
						bool flag161 = false;
						if (vector279.Length() > 2000f)
						{
							flag161 = true;
						}
						while (!flag161 && num1979 < 100)
						{
							num1979++;
							int num1980 = Main.rand.Next(point15.X - num1975, point15.X + num1975 + 1);
							int num1981 = Main.rand.Next(point15.Y - num1975, point15.Y + num1975 + 1);
							if ((num1981 < point15.Y - num1977 || num1981 > point15.Y + num1977 || num1980 < point15.X - num1977 || num1980 > point15.X + num1977) && (num1981 < point14.Y - num1976 || num1981 > point14.Y + num1976 || num1980 < point14.X - num1976 || num1980 > point14.X + num1976) && !Main.tile[num1980, num1981].nactive())
							{
								bool flag162 = true;
								if (flag162 && Main.tile[num1980, num1981].lava())
								{
									flag162 = false;
								}
								if (flag162 && Collision.SolidTiles(num1980 - num1978, num1980 + num1978, num1981 - num1978, num1981 + num1978))
								{
									flag162 = false;
								}
								if (flag162 && !Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0))
								{
									flag162 = false;
								}
								if (flag162)
								{
									Projectile.NewProjectile(num1980 * 16 + 8, num1981 * 16 + 8, 0f, 0f, 579, 0, 0f, Main.myPlayer);
									flag161 = true;
									break;
								}
							}
						}
					}
				}
				if (type != 517)
				{
					return;
				}
				if (Main.rand.Next(5) == 0)
				{
					Dust dust26 = Main.dust[Dust.NewDust(base.Left, width, height / 2, 241)];
					dust26.position = base.Center + Vector2.UnitY.RotatedByRandom(2.0943951606750488) * new Vector2(width / 2, height / 2) * (0.8f + Main.rand.NextFloat() * 0.2f);
					dust26.velocity.X = 0f;
					dust26.velocity.Y = Math.Abs(dust26.velocity.Y) * 0.25f;
				}
				for (int num1982 = 0; num1982 < 3; num1982++)
				{
					if (Main.rand.Next(5) == 0)
					{
						Dust dust27 = Main.dust[Dust.NewDust(base.Top + new Vector2((float)(-width) * (0.33f - 0.11f * (float)num1982), -20f), (int)((float)width * (0.66f - 0.22f * (float)num1982)), 20, 6)];
						dust27.velocity.X = 0f;
						dust27.velocity.Y = (0f - Math.Abs(dust27.velocity.Y - (float)num1982 + base.velocity.Y - 4f)) * 1f;
						dust27.noGravity = true;
						dust27.fadeIn = 1f;
						dust27.scale = 1f + Main.rand.NextFloat() + (float)num1982 * 0.3f;
					}
				}
				if (this.ai[1] > 0f)
				{
					this.ai[1] -= 1f;
				}
				if (Main.netMode != 1 && this.ai[1] <= 0f && Main.player[target].active && !Main.player[target].dead && Distance(Main.player[target].Center) < 1080f && Main.player[target].position.Y - base.position.Y < 700f)
				{
					Vector2 vector280 = base.Top + new Vector2((float)(-width) * 0.33f, -20f) + new Vector2((float)width * 0.66f, 20f) * Utils.RandomVector2(Main.rand, 0f, 1f);
					Vector2 velocity9 = -Vector2.UnitY.RotatedByRandom(0.78539818525314331) * (7f + Main.rand.NextFloat() * 5f);
					int num1983 = NewNPC((int)vector280.X, (int)vector280.Y, 519, base.whoAmI);
					Main.npc[num1983].velocity = velocity9;
					Main.npc[num1983].netUpdate = true;
					this.ai[1] = 60f;
				}
			}
			else if (aiStyle == 95)
			{
				float num1984 = 300f;
				if (base.velocity.Length() > 4f)
				{
					base.velocity *= 0.95f;
				}
				base.velocity *= 0.99f;
				this.ai[0] += 1f;
				scale = 1f + 0.3f * (this.ai[0] / num1984);
				if (this.ai[0] >= num1984)
				{
					if (Main.netMode != 1)
					{
						Transform(405);
					}
					return;
				}
				rotation += base.velocity.X * 0.1f;
				if (!(this.ai[0] > 20f))
				{
					return;
				}
				Vector2 center50 = base.Center;
				int num1985 = (int)(this.ai[0] / (num1984 / 2f));
				for (int num1986 = 0; num1986 < num1985 + 1; num1986++)
				{
					if (Main.rand.Next(2) != 0)
					{
						int num1987 = 226;
						float num1988 = 0.4f;
						if (num1986 % 2 == 1)
						{
							num1987 = 226;
							num1988 = 0.65f;
						}
						Vector2 vector281 = center50 + ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * (12f - (float)(num1985 * 2));
						int num1989 = Dust.NewDust(vector281 - Vector2.One * 12f, 24, 24, num1987, base.velocity.X / 2f, base.velocity.Y / 2f);
						Main.dust[num1989].position -= new Vector2(2f);
						Main.dust[num1989].velocity = Vector2.Normalize(center50 - vector281) * 1.5f * (10f - (float)num1985 * 2f) / 10f;
						Main.dust[num1989].noGravity = true;
						Main.dust[num1989].scale = num1988;
						Main.dust[num1989].customData = this;
					}
				}
			}
			else if (aiStyle == 96)
			{
				float num1990 = 5f;
				float moveSpeed = 0.15f;
				TargetClosest();
				Vector2 desiredVelocity4 = Main.player[target].Center - base.Center + new Vector2(0f, -250f);
				float num1991 = desiredVelocity4.Length();
				if (num1991 < 20f)
				{
					desiredVelocity4 = base.velocity;
				}
				else if (num1991 < 40f)
				{
					desiredVelocity4.Normalize();
					desiredVelocity4 *= num1990 * 0.35f;
				}
				else if (num1991 < 80f)
				{
					desiredVelocity4.Normalize();
					desiredVelocity4 *= num1990 * 0.65f;
				}
				else
				{
					desiredVelocity4.Normalize();
					desiredVelocity4 *= num1990;
				}
				SimpleFlyMovement(desiredVelocity4, moveSpeed);
				rotation = base.velocity.X * 0.1f;
				if (!((this.ai[0] += 1f) >= 70f))
				{
					return;
				}
				this.ai[0] = 0f;
				if (Main.netMode != 1)
				{
					Vector2 vector282 = Vector2.Zero;
					while (Math.Abs(vector282.X) < 1.5f)
					{
						vector282 = Vector2.UnitY.RotatedByRandom(1.5707963705062866) * new Vector2(5f, 3f);
					}
					Projectile.NewProjectile(base.Center.X, base.Center.Y, vector282.X, vector282.Y, 539, 60, 0f, Main.myPlayer, 0f, base.whoAmI);
				}
			}
			else if (aiStyle == 97)
			{
				float num1992 = 7f;
				int num1993 = 480;
				if (localAI[2] < 180f)
				{
					localAI[2] += 1f;
					if (Main.netMode != 1 && localAI[2] % 60f == 0f)
					{
						Vector2 vector283 = Vector2.Zero;
						while (Math.Abs(vector283.X) < 1.5f)
						{
							vector283 = Vector2.UnitY.RotatedByRandom(1.5707963705062866) * new Vector2(4f, 2.5f);
						}
						Projectile.NewProjectile(base.Center.X, base.Center.Y, vector283.X, vector283.Y, 574, 0, 0f, Main.myPlayer, 0f, base.whoAmI);
					}
				}
				if (localAI[1] == 1f)
				{
					localAI[1] = 0f;
					if (Main.rand.Next(4) == 0)
					{
						this.ai[0] = num1993;
					}
				}
				TargetClosest();
				rotation = Math.Abs(base.velocity.X) * (float)base.direction * 0.1f;
				spriteDirection = -base.direction;
				Vector2 value78 = base.Center + new Vector2(base.direction * 20, 6f);
				Vector2 vector284 = Main.player[target].Center - value78;
				bool flag163 = Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1);
				bool flag164 = false;
				if (vector284.Length() > 400f || !flag163)
				{
					Vector2 value79 = vector284;
					if (value79.Length() > num1992)
					{
						value79.Normalize();
						value79 *= num1992;
					}
					int num1994 = 30;
					base.velocity = (base.velocity * (num1994 - 1) + value79) / num1994;
				}
				else
				{
					base.velocity *= 0.98f;
					flag164 = true;
				}
				if (this.ai[2] != 0f && this.ai[3] != 0f)
				{
					Main.PlaySound(2, (int)base.Center.X, (int)base.Center.Y, 8);
					for (int num1995 = 0; num1995 < 20; num1995++)
					{
						int num1996 = Dust.NewDust(base.position, width, height, 242);
						Main.dust[num1996].velocity *= 3f;
						Main.dust[num1996].noGravity = true;
						Main.dust[num1996].scale = 2.5f;
					}
					base.Center = new Vector2(this.ai[2] * 16f, this.ai[3] * 16f);
					base.velocity = Vector2.Zero;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					Main.PlaySound(2, (int)base.Center.X, (int)base.Center.Y, 8);
					for (int num1997 = 0; num1997 < 20; num1997++)
					{
						int num1998 = Dust.NewDust(base.position, width, height, 242);
						Main.dust[num1998].velocity *= 3f;
						Main.dust[num1998].noGravity = true;
						Main.dust[num1998].scale = 2.5f;
					}
				}
				this.ai[0] += 1f;
				if (this.ai[0] >= (float)num1993 && Main.netMode != 1)
				{
					this.ai[0] = 0f;
					Point point16 = base.Center.ToTileCoordinates();
					Point point17 = Main.player[target].Center.ToTileCoordinates();
					int num1999 = 20;
					int num2000 = 3;
					int num2001 = 10;
					int num2002 = 1;
					int num2003 = 0;
					bool flag165 = false;
					if (vector284.Length() > 2000f)
					{
						flag165 = true;
					}
					while (!flag165 && num2003 < 100)
					{
						num2003++;
						int num2004 = Main.rand.Next(point17.X - num1999, point17.X + num1999 + 1);
						int num2005 = Main.rand.Next(point17.Y - num1999, point17.Y + num1999 + 1);
						if ((num2005 < point17.Y - num2001 || num2005 > point17.Y + num2001 || num2004 < point17.X - num2001 || num2004 > point17.X + num2001) && (num2005 < point16.Y - num2000 || num2005 > point16.Y + num2000 || num2004 < point16.X - num2000 || num2004 > point16.X + num2000) && !Main.tile[num2004, num2005].nactive())
						{
							bool flag166 = true;
							if (flag166 && Main.tile[num2004, num2005].lava())
							{
								flag166 = false;
							}
							if (flag166 && Collision.SolidTiles(num2004 - num2002, num2004 + num2002, num2005 - num2002, num2005 + num2002))
							{
								flag166 = false;
							}
							if (flag166)
							{
								this.ai[1] = 20f;
								this.ai[2] = num2004;
								this.ai[3] = num2005;
								flag165 = true;
								break;
							}
						}
					}
					netUpdate = true;
				}
				if (flag164 && base.velocity.Length() < 2f && Main.netMode != 1)
				{
					localAI[0] += 1f;
					if (!(localAI[0] >= 13f))
					{
					}
				}
			}
			else if (aiStyle == 98)
			{
				noTileCollide = false;
				if (this.ai[0] == 0f)
				{
					TargetClosest();
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
				}
				bool flag167 = Collision.CanHit(base.Center, 1, 1, Main.player[target].position, 1, 1);
				bool flag168 = true;
				if (!flag167 || Main.player[target].dead)
				{
					flag168 = false;
				}
				else
				{
					int num2006 = (int)(Main.player[target].Center.X / 16f);
					int num2007 = (int)(Main.player[target].Center.Y / 16f);
					for (int num2008 = num2006 - 2; num2008 <= num2006 + 2; num2008++)
					{
						for (int num2009 = num2007; num2009 <= num2007 + 25; num2009++)
						{
							if (WorldGen.SolidTile2(num2008, num2009))
							{
								flag168 = false;
							}
						}
					}
				}
				if (this.ai[0] < 0f)
				{
					Vector2 vector285 = Main.player[target].Center - base.Center;
					float num2010 = vector285.Length();
					if (this.ai[0] == -1f)
					{
						vector285.Normalize();
						if (vector285.HasNaNs())
						{
							vector285 = new Vector2(base.direction, 0f);
						}
						float num2011 = 8f + num2010 / 100f;
						float num2012 = 12f;
						if (Main.player[target].velocity.Length() > num2012)
						{
							num2012 = Main.player[target].velocity.Length();
						}
						if (num2011 > num2012)
						{
							num2011 = num2012;
						}
						vector285 *= num2011;
						float num2013 = 10f;
						base.velocity = (base.velocity * (num2013 - 1f) + vector285) / num2013;
						for (int num2014 = 0; num2014 < 200; num2014++)
						{
							if (Main.npc[num2014].active && Main.npc[num2014].type == type && num2014 != base.whoAmI)
							{
								Vector2 vector286 = Main.npc[num2014].Center - base.Center;
								if (vector286.Length() < 40f)
								{
									vector286.Normalize();
									vector286 *= 1f;
									base.velocity -= vector286;
								}
							}
						}
						rotation += base.velocity.X * 0.03f;
						if ((double)rotation < -6.2831)
						{
							rotation += 6.2831f;
						}
						if ((double)rotation > 6.2831)
						{
							rotation -= 6.2831f;
						}
						if (base.velocity.X > 0f)
						{
							base.direction = 1;
						}
						else if (base.velocity.X < 0f)
						{
							base.direction = -1;
						}
						spriteDirection = base.direction;
					}
					this.ai[1] += 1f;
					if (this.ai[1] >= 60f && !flag168)
					{
						this.ai[0] = 0f;
					}
				}
				else if (this.ai[0] == 2f)
				{
					rotation *= 0.92f;
					if ((double)Math.Abs(rotation) < 0.02)
					{
						rotation = 0f;
					}
					int num2015 = 300;
					float num2016 = Math.Abs(base.Center.X - Main.player[target].Center.X);
					if (num2016 < (float)num2015 && Collision.CanHit(base.Center, 1, 1, Main.player[target].position, 1, 1))
					{
						base.velocity.X *= 0.96f;
						base.velocity.Y *= 0.96f;
						this.ai[1] += 1f;
						if (this.ai[1] == 20f)
						{
							if (Main.netMode != 1)
							{
								NewNPC((int)base.Center.X, (int)base.Center.Y + 26, 516, 0, 0f, 0f, 0f, 0f, target);
							}
						}
						else if (this.ai[1] >= 30f)
						{
							this.ai[1] = 0f;
						}
						for (int num2017 = 0; num2017 < 200; num2017++)
						{
							if (Main.npc[num2017].active && Main.npc[num2017].type == type && num2017 != base.whoAmI)
							{
								Vector2 vector287 = Main.npc[num2017].Center - base.Center;
								if (vector287.Length() < 100f)
								{
									vector287.Normalize();
									vector287 *= 0.1f;
									base.velocity -= vector287;
								}
							}
						}
					}
					else
					{
						this.ai[0] = 0f;
					}
					if (Main.player[target].Center.X < base.Center.X)
					{
						base.direction = -1;
					}
					else if (Main.player[target].Center.X > base.Center.X)
					{
						base.direction = 1;
					}
					spriteDirection = base.direction;
				}
				if (this.ai[0] != 1f)
				{
					return;
				}
				rotation *= 0.92f;
				if ((double)Math.Abs(rotation) < 0.02)
				{
					rotation = 0f;
				}
				if (flag168)
				{
					this.ai[0] = -1f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
				}
				int num2018 = 300;
				for (int num2019 = 0; num2019 < 200; num2019++)
				{
					if (Main.npc[num2019].active && Main.npc[num2019].type == type && num2019 != base.whoAmI)
					{
						Vector2 vector288 = Main.npc[num2019].Center - base.Center;
						if (vector288.Length() < 50f)
						{
							vector288.Normalize();
							vector288 *= 0.1f;
							base.velocity -= vector288;
							base.velocity.X -= vector288.X * 1f;
						}
					}
				}
				int num2020 = 800;
				float num2021 = Math.Abs(base.Center.X - Main.player[target].Center.X);
				if (num2021 < (float)num2018 && flag167)
				{
					this.ai[0] = 2f;
					this.ai[1] = 0f;
				}
				else
				{
					if (collideX)
					{
						base.velocity.X *= -0.5f;
						this.ai[1] = 60f;
						base.direction *= -1;
					}
					if (this.ai[1] > 0f)
					{
						this.ai[1] -= 1f;
					}
					else if (flag167)
					{
						if (base.Center.X > Main.player[target].Center.X)
						{
							base.direction = -1;
						}
						else
						{
							base.direction = 1;
						}
					}
					else if (num2021 > (float)num2020)
					{
						if (base.Center.X > Main.player[target].Center.X)
						{
							base.direction = -1;
						}
						else
						{
							base.direction = 1;
						}
					}
					float num2022 = 2f;
					float num2023 = 0.1f;
					if (base.velocity.X > num2022 || base.velocity.X < 0f - num2022)
					{
						if (Math.Abs(base.velocity.X) < num2022 + num2023 * 2f)
						{
							if (base.velocity.X < 0f)
							{
								base.velocity.X = 0f - num2022;
							}
							else
							{
								base.velocity.X = num2022;
							}
						}
						else
						{
							base.velocity.X *= 0.99f;
						}
					}
					else
					{
						base.velocity.X += (float)base.direction * num2023;
					}
					spriteDirection = base.direction;
				}
				if (collideY)
				{
					this.ai[2] = 60f;
					directionY *= -1;
					base.velocity.Y *= -0.5f;
				}
				if (this.ai[2] > 0f)
				{
					this.ai[2] -= 1f;
				}
				else
				{
					int num2024 = (int)(base.Center.Y / 16f);
					int num2025 = (int)((base.Center.X - 8f) / 16f);
					int num2026 = 30;
					int num2027 = 15;
					int num2028 = 0;
					for (int num2029 = num2024; num2029 < num2024 + num2026; num2029++)
					{
						for (int num2030 = num2025; num2030 <= num2025 + 1; num2030++)
						{
							if (WorldGen.SolidTile(num2030, num2029) || Main.tile[num2030, num2029].liquid > 0)
							{
								num2028 = num2029 - num2024;
								break;
							}
						}
						if (num2028 != 0)
						{
							break;
						}
					}
					if (num2028 == 0)
					{
						directionY = 1;
					}
					else if (num2028 < num2027)
					{
						directionY = -1;
					}
				}
				float num2031 = 2f;
				float num2032 = 0.1f;
				if (base.velocity.Y > num2031 || base.velocity.Y < 0f - num2031)
				{
					if (Math.Abs(base.velocity.Y) < num2031 + num2032 * 2f)
					{
						if (base.velocity.Y < 0f)
						{
							base.velocity.Y = 0f - num2031;
						}
						else
						{
							base.velocity.Y = num2031;
						}
					}
					else
					{
						base.velocity.Y *= 0.99f;
					}
				}
				else
				{
					base.velocity.Y += (float)directionY * num2032;
				}
			}
			else if (aiStyle == 99)
			{
				if (base.velocity.Y == 0f && this.ai[0] == 0f)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					netUpdate = true;
					return;
				}
				if (this.ai[0] == 1f)
				{
					base.velocity = Vector2.Zero;
					base.position = oldPosition;
					this.ai[1] += 1f;
					if (this.ai[1] >= 5f)
					{
						HitEffect(0, 9999.0);
						active = false;
					}
					return;
				}
				base.velocity.Y += 0.2f;
				if (base.velocity.Y > 12f)
				{
					base.velocity.Y = 12f;
				}
				rotation = base.velocity.ToRotation() - (float)Math.PI / 2f;
				if (type != 519)
				{
					return;
				}
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					for (int num2033 = 0; num2033 < 13; num2033++)
					{
						int num2034 = Dust.NewDust(base.position, width, height, 6, base.velocity.X * 0.5f, base.velocity.Y * 0.5f, 90, default(Color), 2.5f);
						Main.dust[num2034].noGravity = true;
						Main.dust[num2034].fadeIn = 1f;
						Main.dust[num2034].velocity *= 4f;
						Main.dust[num2034].noLight = true;
					}
				}
				for (int num2035 = 0; num2035 < 3; num2035++)
				{
					if (Main.rand.Next(3) < 2)
					{
						int num2036 = Dust.NewDust(base.position, width, height, 6, base.velocity.X * 0.5f, base.velocity.Y * 0.5f, 90, default(Color), 2.5f);
						Main.dust[num2036].noGravity = true;
						Main.dust[num2036].velocity *= 0.2f;
						Main.dust[num2036].fadeIn = 1f;
						if (Main.rand.Next(6) == 0)
						{
							Main.dust[num2036].velocity *= 30f;
							Main.dust[num2036].noGravity = false;
							Main.dust[num2036].noLight = true;
						}
						else
						{
							Main.dust[num2036].velocity = DirectionFrom(Main.dust[num2036].position) * Main.dust[num2036].velocity.Length();
						}
					}
				}
			}
			else if (aiStyle == 100)
			{
				if (base.velocity.Y == 0f && this.ai[0] >= 0f)
				{
					this.ai[0] = -1f;
					this.ai[1] = 0f;
					netUpdate = true;
					return;
				}
				if (this.ai[0] == -1f)
				{
					base.velocity = Vector2.Zero;
					base.position = oldPosition;
					this.ai[1] += 1f;
					if (this.ai[1] >= 5f)
					{
						HitEffect(0, 9999.0);
						active = false;
					}
					return;
				}
				rotation = base.velocity.ToRotation() - (float)Math.PI / 2f;
				if (type != 522)
				{
					return;
				}
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					base.velocity.X = this.ai[2];
					base.velocity.Y = this.ai[3];
					for (int num2037 = 0; num2037 < 13; num2037++)
					{
						int num2038 = Dust.NewDust(base.position, width, height, 261, base.velocity.X * 0.5f, base.velocity.Y * 0.5f, 90, default(Color), 2.5f);
						Main.dust[num2038].noGravity = true;
						Main.dust[num2038].fadeIn = 1f;
						Main.dust[num2038].velocity *= 4f;
						Main.dust[num2038].noLight = true;
					}
				}
				for (int num2039 = 0; num2039 < 2; num2039++)
				{
					if (Main.rand.Next(10 - (int)Math.Min(7f, base.velocity.Length())) < 1)
					{
						int num2040 = Dust.NewDust(base.position, width, height, 261, base.velocity.X * 0.5f, base.velocity.Y * 0.5f, 90, default(Color), 2.5f);
						Main.dust[num2040].noGravity = true;
						Main.dust[num2040].velocity *= 0.2f;
						Main.dust[num2040].fadeIn = 0.4f;
						if (Main.rand.Next(6) == 0)
						{
							Main.dust[num2040].velocity *= 5f;
							Main.dust[num2040].noLight = true;
						}
						else
						{
							Main.dust[num2040].velocity = DirectionFrom(Main.dust[num2040].position) * Main.dust[num2040].velocity.Length();
						}
					}
				}
				dontTakeDamage = (this.ai[0] >= 0f && this.ai[0] <= 20f);
				if (this.ai[0] >= 0f)
				{
					this.ai[0] += 1f;
					if (this.ai[0] > 60f)
					{
						base.velocity = base.velocity.RotatedBy(this.ai[1]);
					}
					if (this.ai[0] > 120f)
					{
						base.velocity *= 0.98f;
					}
					if (base.velocity.Length() < 0.2f)
					{
						base.velocity = Vector2.Zero;
					}
				}
			}
			else
			{
				if (aiStyle != 101)
				{
					return;
				}
				float num2041 = 420f;
				float num2042 = 120f;
				int num2043 = 1;
				float value80 = 0f;
				float value81 = 1f;
				float num2044 = 4f;
				bool flag169 = !(this.ai[1] >= 0f) || !Main.npc[(int)this.ai[0]].active;
				if (Main.npc[(int)this.ai[0]].type == 439)
				{
					if (Main.npc[(int)this.ai[0]].life < Main.npc[(int)this.ai[0]].lifeMax / 2)
					{
						num2043 = 2;
					}
					if (Main.npc[(int)this.ai[0]].life < Main.npc[(int)this.ai[0]].lifeMax / 4)
					{
						num2043 = 3;
					}
				}
				else
				{
					flag169 = true;
				}
				this.ai[1] += num2043;
				float num2045 = this.ai[1] / num2042;
				num2045 = MathHelper.Clamp(num2045, 0f, 1f);
				base.position = base.Center;
				scale = MathHelper.Lerp(value80, value81, num2045);
				base.Center = base.position;
				alpha = (int)(255f - num2045 * 255f);
				if (Main.rand.Next(6) == 0)
				{
					Vector2 spinningpoint18 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
					Dust dust28 = Main.dust[Dust.NewDust(base.Center - spinningpoint18 * 20f, 0, 0, 27)];
					dust28.noGravity = true;
					dust28.position = base.Center - spinningpoint18 * Main.rand.Next(10, 21) * scale;
					dust28.velocity = spinningpoint18.RotatedBy(1.5707963705062866) * 4f;
					dust28.scale = 0.5f + Main.rand.NextFloat();
					dust28.fadeIn = 0.5f;
				}
				if (Main.rand.Next(6) == 0)
				{
					Vector2 spinningpoint19 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
					Dust dust29 = Main.dust[Dust.NewDust(base.Center - spinningpoint19 * 30f, 0, 0, 240)];
					dust29.noGravity = true;
					dust29.position = base.Center - spinningpoint19 * 20f * scale;
					dust29.velocity = spinningpoint19.RotatedBy(-1.5707963705062866) * 2f;
					dust29.scale = 0.5f + Main.rand.NextFloat();
					dust29.fadeIn = 0.5f;
				}
				if (Main.rand.Next(6) == 0)
				{
					Vector2 vector289 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
					Dust dust30 = Main.dust[Dust.NewDust(base.Center - vector289 * 30f, 0, 0, 240)];
					dust30.position = base.Center - vector289 * 20f * scale;
					dust30.velocity = Vector2.Zero;
					dust30.scale = 0.5f + Main.rand.NextFloat();
					dust30.fadeIn = 0.5f;
					dust30.noLight = true;
				}
				localAI[0] += (float)Math.PI / 60f;
				localAI[1] = 0.25f + Vector2.UnitY.RotatedBy(this.ai[1] * ((float)Math.PI * 2f) / 60f).Y * 0.25f;
				if (this.ai[1] >= num2041)
				{
					flag169 = true;
					if (Main.netMode != 1)
					{
						for (int num2046 = 0; num2046 < 4; num2046++)
						{
							Vector2 vector290 = new Vector2(0f, 0f - num2044).RotatedBy((float)Math.PI / 2f * (float)num2046);
							Projectile.NewProjectile(base.Center.X, base.Center.Y, vector290.X, vector290.Y, 593, damage, 0f, Main.myPlayer);
						}
					}
				}
				if (flag169)
				{
					HitEffect(0, 9999.0);
					active = false;
				}
			}
		}

		public void ReflectProjectiles(Rectangle myRect)
		{
			for (int i = 0; i < 1000; i++)
			{
				if (Main.projectile[i].active && Main.projectile[i].CanReflect())
				{
					Rectangle hitbox = Main.projectile[i].Hitbox;
					if (myRect.Intersects(hitbox))
					{
						ReflectProjectile(i);
					}
				}
			}
		}

		public void ReflectProjectile(int i)
		{
			Main.PlaySound(3, (int)Main.projectile[i].position.X, (int)Main.projectile[i].position.Y, soundHit);
			for (int j = 0; j < 3; j++)
			{
				int num = Dust.NewDust(Main.projectile[i].position, Main.projectile[i].width, Main.projectile[i].height, 31);
				Main.dust[num].velocity *= 0.3f;
			}
			Main.projectile[i].hostile = true;
			Main.projectile[i].friendly = false;
			Vector2 vector = Main.player[Main.projectile[i].owner].Center - Main.projectile[i].Center;
			vector.Normalize();
			vector *= Main.projectile[i].oldVelocity.Length();
			Main.projectile[i].velocity = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
			Main.projectile[i].velocity.Normalize();
			Main.projectile[i].velocity *= vector.Length();
			Main.projectile[i].velocity += vector * 20f;
			Main.projectile[i].velocity.Normalize();
			Main.projectile[i].velocity *= vector.Length();
			Main.projectile[i].damage /= 2;
			Main.projectile[i].penetrate = 1;
		}

		public int GetShootingFrame(float circleY)
		{
			int num = -4;
			if (circleY < -0.3f)
			{
				num = 1;
			}
			if (circleY < -0.1f)
			{
				num = 0;
			}
			if (circleY > 0.1f)
			{
				num = 2;
			}
			if (circleY > 0.3f)
			{
				num = 3;
			}
			if (type == 228 || type == 229 || type == 209 || type == 22 || type == 368)
			{
				if (num == -4)
				{
					num = 1;
				}
				if (circleY >= -0.1f)
				{
					num++;
				}
			}
			return num;
		}

		public Tuple<Vector2, float> GetSwingStats(int swingMax, int swingCurrent, int aimDir, int itemWidth, int itemHeight)
		{
			Vector2 zero = Vector2.Zero;
			if ((double)swingCurrent < (double)swingMax * 0.333)
			{
				float num = 10f;
				if (itemWidth > 32)
				{
					num = 14f;
				}
				if (itemWidth >= 52)
				{
					num = 24f;
				}
				if (itemWidth >= 64)
				{
					num = 28f;
				}
				if (itemWidth >= 92)
				{
					num = 38f;
				}
				zero.X = base.Center.X + ((float)itemWidth * 0.5f - num) * (float)aimDir;
				zero.Y = position.Y + 24f;
			}
			else if ((double)swingCurrent < (double)swingMax * 0.666)
			{
				float num2 = 10f;
				if (itemWidth > 32)
				{
					num2 = 18f;
				}
				if (itemWidth >= 52)
				{
					num2 = 24f;
				}
				if (itemWidth >= 64)
				{
					num2 = 28f;
				}
				if (itemWidth >= 92)
				{
					num2 = 38f;
				}
				zero.X = base.Center.X + ((float)itemWidth * 0.5f - num2) * (float)aimDir;
				num2 = 10f;
				if (itemHeight > 32)
				{
					num2 = 8f;
				}
				if (itemHeight > 52)
				{
					num2 = 12f;
				}
				if (itemHeight > 64)
				{
					num2 = 14f;
				}
				zero.Y = position.Y + num2;
			}
			else
			{
				float num3 = 6f;
				if (itemWidth > 32)
				{
					num3 = 14f;
				}
				if (itemWidth >= 48)
				{
					num3 = 18f;
				}
				if (itemWidth >= 52)
				{
					num3 = 24f;
				}
				if (itemWidth >= 64)
				{
					num3 = 28f;
				}
				if (itemWidth >= 92)
				{
					num3 = 38f;
				}
				zero.X = base.Center.X - ((float)itemWidth * 0.5f - num3) * (float)aimDir;
				num3 = 10f;
				if (itemHeight > 32)
				{
					num3 = 10f;
				}
				if (itemHeight > 52)
				{
					num3 = 12f;
				}
				if (itemHeight > 64)
				{
					num3 = 14f;
				}
				zero.Y = position.Y + num3;
			}
			float item = ((float)swingCurrent / (float)swingMax - 0.5f) * (float)(-aimDir) * 3.5f - (float)aimDir * 0.3f;
			return Tuple.Create(zero, item);
		}

		public void TweakSwingStats(int swingMax, int swingCurrent, int aimDir, ref Rectangle itemRectangle)
		{
			if ((double)swingCurrent < (double)swingMax * 0.333)
			{
				if (aimDir == -1)
				{
					itemRectangle.X -= (int)((double)itemRectangle.Width * 1.4 - (double)itemRectangle.Width);
				}
				itemRectangle.Width = (int)((double)itemRectangle.Width * 1.4);
				itemRectangle.Y += (int)((double)itemRectangle.Height * 0.5);
				itemRectangle.Height = (int)((double)itemRectangle.Height * 1.1);
			}
			else if (!((double)swingCurrent < (double)swingMax * 0.666))
			{
				if (aimDir == 1)
				{
					itemRectangle.X -= (int)((double)itemRectangle.Width * 1.2);
				}
				itemRectangle.Width *= 2;
				itemRectangle.Y -= (int)((double)itemRectangle.Height * 1.4 - (double)itemRectangle.Height);
				itemRectangle.Height = (int)((double)itemRectangle.Height * 1.4);
			}
		}

		public void FindFrame()
		{
			int num = 1;
			if (!Main.dedServ)
			{
				if (!Main.NPCLoaded[type] || Main.npcTexture[type] == null)
				{
					return;
				}
				num = Main.npcTexture[type].Height / Main.npcFrameCount[type];
			}
			int num2 = 0;
			if (aiAction == 0)
			{
				num2 = ((velocity.Y < 0f) ? 2 : ((velocity.Y > 0f) ? 3 : ((velocity.X != 0f) ? 1 : 0)));
			}
			else if (aiAction == 1)
			{
				num2 = 4;
			}
			if (type == 338 || type == 339 || type == 340 || type == 17 || type == 18 || type == 19 || type == 20 || type == 22 || type == 142 || type == 353 || type == 178 || type == 38 || type == 26 || type == 27 || type == 28 || type == 31 || type == 294 || type == 295 || type == 296 || type == 21 || type == 44 || type == 54 || type == 37 || type == 73 || type == 77 || type == 78 || type == 79 || type == 80 || type == 104 || type == 107 || type == 108 || type == 120 || type == 124 || type == 140 || type == 159 || type == 160 || type == 167 || type == 181 || type == 185 || type == 196 || type == 197 || type == 198 || type == 201 || type == 202 || type == 203 || type == 207 || type == 208 || type == 209 || type == 212 || type == 213 || type == 227 || type == 228 || type == 229 || type == 287 || (type >= 310 && type <= 314) || (type >= 322 && type <= 324) || type == 326 || type == 368 || type == 369 || type == 453 || type == 460 || type == 462 || type == 463 || type == 489 || type == 441 || type == 534)
			{
				int num3 = (townNPC || type == 453) ? NPCID.Sets.ExtraFramesCount[type] : 0;
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					int num4 = Main.npcFrameCount[type] - NPCID.Sets.AttackFrameCount[type];
					if (ai[0] == 2f)
					{
						frameCounter += 1.0;
						if (frame.Y / num == num4 - 1 && frameCounter >= 5.0)
						{
							frame.Y = 0;
							frameCounter = 0.0;
						}
						else if (frame.Y / num == 0 && frameCounter >= 40.0)
						{
							frame.Y = num * (num4 - 1);
							frameCounter = 0.0;
						}
						else if (frame.Y != 0 && frame.Y != num * (num4 - 1))
						{
							frame.Y = 0;
							frameCounter = 0.0;
						}
					}
					else if (ai[0] == 11f)
					{
						frameCounter += 1.0;
						if (frame.Y / num == num4 - 1 && frameCounter >= 20.0)
						{
							if (frameCounter == 20.0)
							{
								int num5 = Main.rand.Next(4);
								for (int i = 0; i < 3 + num5; i++)
								{
									int num6 = Dust.NewDust(base.Center + Vector2.UnitX * -direction * 8f - Vector2.One * 5f + Vector2.UnitY * 8f, 3, 6, 216, -direction, 1f);
									Main.dust[num6].velocity /= 2f;
									Main.dust[num6].scale = 0.8f;
								}
								if (Main.rand.Next(30) == 0)
								{
									int num7 = Gore.NewGore(base.Center + Vector2.UnitX * -direction * 8f, Vector2.Zero, Main.rand.Next(580, 583));
									Main.gore[num7].velocity /= 2f;
									Main.gore[num7].velocity.Y = Math.Abs(Main.gore[num7].velocity.Y);
									Main.gore[num7].velocity.X = (0f - Math.Abs(Main.gore[num7].velocity.X)) * (float)direction;
								}
							}
							if (frameCounter >= 40.0 && Main.rand.Next(20) == 0)
							{
								frame.Y = 0;
								frameCounter = 0.0;
							}
						}
						else if (frame.Y / num == 0 && frameCounter >= 20.0)
						{
							frame.Y = num * (num4 - 1);
							frameCounter = 0.0;
							if (Main.netMode != 1)
							{
								EmoteBubble.NewBubble(89, new WorldUIAnchor(this), 30);
							}
						}
						else if (frame.Y != 0 && frame.Y != num * (num4 - 1))
						{
							frame.Y = 0;
							frameCounter = 0.0;
						}
					}
					else if (ai[0] == 5f)
					{
						frame.Y = num * (num4 - 3);
						frameCounter = 0.0;
					}
					else if (ai[0] == 6f)
					{
						frameCounter += 1.0;
						int num8 = frame.Y / num;
						switch (num4 - num8)
						{
						default:
							if (num8 != 0)
							{
								frame.Y = 0;
								frameCounter = 0.0;
							}
							break;
						case 1:
						case 2:
						case 4:
						case 5:
							break;
						}
						int num9 = 0;
						num9 = ((!(frameCounter < 10.0)) ? ((frameCounter < 16.0) ? (num4 - 5) : ((frameCounter < 46.0) ? (num4 - 4) : ((frameCounter < 60.0) ? (num4 - 5) : ((!(frameCounter < 66.0)) ? ((frameCounter < 72.0) ? (num4 - 5) : ((frameCounter < 102.0) ? (num4 - 4) : ((frameCounter < 108.0) ? (num4 - 5) : ((!(frameCounter < 114.0)) ? ((frameCounter < 120.0) ? (num4 - 5) : ((frameCounter < 150.0) ? (num4 - 4) : ((frameCounter < 156.0) ? (num4 - 5) : ((!(frameCounter < 162.0)) ? ((frameCounter < 168.0) ? (num4 - 5) : ((frameCounter < 198.0) ? (num4 - 4) : ((frameCounter < 204.0) ? (num4 - 5) : ((!(frameCounter < 210.0)) ? ((frameCounter < 216.0) ? (num4 - 5) : ((frameCounter < 246.0) ? (num4 - 4) : ((frameCounter < 252.0) ? (num4 - 5) : ((!(frameCounter < 258.0)) ? ((frameCounter < 264.0) ? (num4 - 5) : ((frameCounter < 294.0) ? (num4 - 4) : ((frameCounter < 300.0) ? (num4 - 5) : 0))) : 0)))) : 0)))) : 0)))) : 0)))) : 0)))) : 0);
						if (num9 == num4 - 4 && num8 == num4 - 5)
						{
							Vector2 position = base.Center + new Vector2(10 * direction, -4f);
							for (int j = 0; j < 8; j++)
							{
								int num10 = Main.rand.Next(139, 143);
								int num11 = Dust.NewDust(position, 0, 0, num10, velocity.X + (float)direction, velocity.Y - 2.5f, 0, default(Color), 1.2f);
								Main.dust[num11].velocity.X += (float)direction * 1.5f;
								Main.dust[num11].position -= new Vector2(4f);
								Main.dust[num11].velocity *= 2f;
								Main.dust[num11].scale = 0.7f + Main.rand.NextFloat() * 0.3f;
							}
						}
						frame.Y = num * num9;
						if (frameCounter >= 300.0)
						{
							frameCounter = 0.0;
						}
					}
					else if (ai[0] == 7f)
					{
						frameCounter += 1.0;
						int num12 = frame.Y / num;
						switch (num4 - num12)
						{
						default:
							if (num12 != 0)
							{
								frame.Y = 0;
								frameCounter = 0.0;
							}
							break;
						case 1:
						case 2:
						case 4:
						case 5:
							break;
						}
						int num13 = 0;
						if (frameCounter < 16.0)
						{
							num13 = 0;
						}
						else if (frameCounter == 16.0 && Main.netMode != 1)
						{
							EmoteBubble.NewBubbleNPC(new WorldUIAnchor(this), 112);
						}
						else if (frameCounter < 128.0)
						{
							num13 = ((frameCounter % 16.0 < 8.0) ? (num4 - 2) : 0);
						}
						else if (frameCounter < 160.0)
						{
							num13 = 0;
						}
						else if (frameCounter != 160.0 || Main.netMode == 1)
						{
							num13 = ((frameCounter < 220.0) ? ((frameCounter % 12.0 < 6.0) ? (num4 - 2) : 0) : 0);
						}
						else
						{
							EmoteBubble.NewBubbleNPC(new WorldUIAnchor(this), 60);
						}
						frame.Y = num * num13;
						if (frameCounter >= 220.0)
						{
							frameCounter = 0.0;
						}
					}
					else if (ai[0] == 9f)
					{
						frameCounter += 1.0;
						int num14 = frame.Y / num;
						switch (num4 - num14)
						{
						default:
							if (num14 != 0)
							{
								frame.Y = 0;
								frameCounter = 0.0;
							}
							break;
						case 1:
						case 2:
						case 4:
						case 5:
							break;
						}
						int num15 = 0;
						num15 = ((!(frameCounter < 10.0)) ? ((!(frameCounter < 16.0)) ? (num4 - 4) : (num4 - 5)) : 0);
						if (ai[1] < 16f)
						{
							num15 = num4 - 5;
						}
						if (ai[1] < 10f)
						{
							num15 = 0;
						}
						frame.Y = num * num15;
					}
					else if (ai[0] == 10f || ai[0] == 13f)
					{
						frameCounter += 1.0;
						int num16 = frame.Y / num;
						switch (num16 - num4)
						{
						default:
							if (num16 != 0)
							{
								frame.Y = 0;
								frameCounter = 0.0;
							}
							break;
						case 0:
						case 1:
						case 2:
						case 3:
							break;
						}
						int num17 = 10;
						int num18 = 6;
						int num19 = 0;
						num19 = ((!(frameCounter < (double)num17)) ? ((frameCounter < (double)(num17 + num18)) ? num4 : ((frameCounter < (double)(num17 + num18 * 2)) ? (num4 + 1) : ((frameCounter < (double)(num17 + num18 * 3)) ? (num4 + 2) : ((frameCounter < (double)(num17 + num18 * 4)) ? (num4 + 3) : 0)))) : 0);
						frame.Y = num * num19;
					}
					else if (ai[0] == 15f)
					{
						frameCounter += 1.0;
						int num20 = frame.Y / num;
						switch (num20 - num4)
						{
						default:
							if (num20 != 0)
							{
								frame.Y = 0;
								frameCounter = 0.0;
							}
							break;
						case 0:
						case 1:
						case 2:
						case 3:
							break;
						}
						float num21 = ai[1] / (float)NPCID.Sets.AttackTime[type];
						int num22 = 0;
						num22 = ((num21 > 0.65f) ? num4 : ((num21 > 0.5f) ? (num4 + 1) : ((num21 > 0.35f) ? (num4 + 2) : ((num21 > 0f) ? (num4 + 3) : 0))));
						frame.Y = num * num22;
					}
					else if (ai[0] == 12f)
					{
						frameCounter += 1.0;
						int num23 = frame.Y / num;
						switch (num23 - num4)
						{
						default:
							if (num23 != 0)
							{
								frame.Y = 0;
								frameCounter = 0.0;
							}
							break;
						case 0:
						case 1:
						case 2:
						case 3:
						case 4:
							break;
						}
						int num24 = num4 + GetShootingFrame(ai[2]);
						frame.Y = num * num24;
					}
					else if (ai[0] == 14f)
					{
						frameCounter += 1.0;
						int num25 = frame.Y / num;
						switch (num25 - num4)
						{
						default:
							if (num25 != 0)
							{
								frame.Y = 0;
								frameCounter = 0.0;
							}
							break;
						case 0:
						case 1:
							break;
						}
						int num26 = 12;
						int num27 = (frameCounter % (double)num26 * 2.0 < (double)num26) ? num4 : (num4 + 1);
						frame.Y = num * num27;
					}
					else if (ai[0] == 3f || ai[0] == 4f)
					{
						frameCounter += 1.0;
						int num28 = frame.Y / num;
						switch (num4 - num28)
						{
						default:
							if (num28 != 0)
							{
								frame.Y = 0;
								frameCounter = 0.0;
							}
							break;
						case 1:
						case 2:
						case 4:
						case 5:
							break;
						}
						bool flag = ai[0] == 3f;
						int num29 = 0;
						int num30 = 0;
						int num31 = -1;
						int num32 = -1;
						if (frameCounter < 10.0)
						{
							num29 = 0;
						}
						else if (frameCounter < 16.0)
						{
							num29 = num4 - 5;
						}
						else if (frameCounter < 46.0)
						{
							num29 = num4 - 4;
						}
						else if (frameCounter < 60.0)
						{
							num29 = num4 - 5;
						}
						else if (frameCounter < 216.0)
						{
							num29 = 0;
						}
						else if (frameCounter == 216.0 && Main.netMode != 1)
						{
							num31 = 70;
						}
						else if (frameCounter < 286.0)
						{
							num29 = ((frameCounter % 12.0 < 6.0) ? (num4 - 2) : 0);
						}
						else if (frameCounter < 320.0)
						{
							num29 = 0;
						}
						else if (frameCounter != 320.0 || Main.netMode == 1)
						{
							num29 = ((frameCounter < 420.0) ? ((frameCounter % 16.0 < 8.0) ? (num4 - 2) : 0) : 0);
						}
						else
						{
							num31 = 100;
						}
						if (frameCounter < 70.0)
						{
							num30 = 0;
						}
						else if (frameCounter != 70.0 || Main.netMode == 1)
						{
							num30 = ((frameCounter < 160.0) ? ((frameCounter % 16.0 < 8.0) ? (num4 - 2) : 0) : ((frameCounter < 166.0) ? (num4 - 5) : ((frameCounter < 186.0) ? (num4 - 4) : ((frameCounter < 200.0) ? (num4 - 5) : ((!(frameCounter < 320.0)) ? ((frameCounter < 326.0) ? (num4 - 1) : 0) : 0)))));
						}
						else
						{
							num32 = 90;
						}
						if (flag)
						{
							if (num31 != -1)
							{
								EmoteBubble.NewBubbleNPC(new WorldUIAnchor(this), num31, new WorldUIAnchor(Main.npc[(int)ai[2]]));
							}
							if (num32 != -1)
							{
								EmoteBubble.NewBubbleNPC(new WorldUIAnchor(Main.npc[(int)ai[2]]), num32, new WorldUIAnchor(this));
							}
						}
						frame.Y = num * (flag ? num29 : num30);
						if (frameCounter >= 420.0)
						{
							frameCounter = 0.0;
						}
					}
					else if (ai[0] == 16f || ai[0] == 17f)
					{
						frameCounter += 1.0;
						int num33 = frame.Y / num;
						switch (num4 - num33)
						{
						default:
							if (num33 != 0)
							{
								frame.Y = 0;
								frameCounter = 0.0;
							}
							break;
						case 1:
						case 2:
						case 4:
						case 5:
							break;
						}
						bool flag2 = ai[0] == 16f;
						int num34 = 0;
						int num35 = -1;
						if (frameCounter < 10.0)
						{
							num34 = 0;
						}
						else if (frameCounter < 16.0)
						{
							num34 = num4 - 5;
						}
						else if (frameCounter < 22.0)
						{
							num34 = num4 - 4;
						}
						else if (frameCounter < 28.0)
						{
							num34 = num4 - 5;
						}
						else if (frameCounter < 34.0)
						{
							num34 = num4 - 4;
						}
						else if (frameCounter < 40.0)
						{
							num34 = num4 - 5;
						}
						else if (frameCounter == 40.0 && Main.netMode != 1)
						{
							num35 = 45;
						}
						else if (frameCounter < 70.0)
						{
							num34 = num4 - 4;
						}
						else if (frameCounter < 76.0)
						{
							num34 = num4 - 5;
						}
						else if (frameCounter < 82.0)
						{
							num34 = num4 - 4;
						}
						else if (frameCounter < 88.0)
						{
							num34 = num4 - 5;
						}
						else if (frameCounter < 94.0)
						{
							num34 = num4 - 4;
						}
						else if (frameCounter < 100.0)
						{
							num34 = num4 - 5;
						}
						else if (frameCounter == 100.0 && Main.netMode != 1)
						{
							num35 = 45;
						}
						else if (frameCounter < 130.0)
						{
							num34 = num4 - 4;
						}
						else if (frameCounter < 136.0)
						{
							num34 = num4 - 5;
						}
						else if (frameCounter < 142.0)
						{
							num34 = num4 - 4;
						}
						else if (frameCounter < 148.0)
						{
							num34 = num4 - 5;
						}
						else if (frameCounter < 154.0)
						{
							num34 = num4 - 4;
						}
						else if (frameCounter < 160.0)
						{
							num34 = num4 - 5;
						}
						else if (frameCounter != 160.0 || Main.netMode == 1)
						{
							num34 = ((frameCounter < 220.0) ? (num4 - 4) : ((frameCounter < 226.0) ? (num4 - 5) : 0));
						}
						else
						{
							num35 = 75;
						}
						if (flag2 && num35 != -1)
						{
							int num36 = (int)localAI[2];
							int num37 = (int)localAI[3];
							int num38 = (int)Main.npc[(int)ai[2]].localAI[3];
							int num39 = (int)Main.npc[(int)ai[2]].localAI[2];
							int num40 = 3 - num36 - num37;
							int num41 = 0;
							if (frameCounter == 40.0)
							{
								num41 = 1;
							}
							if (frameCounter == 100.0)
							{
								num41 = 2;
							}
							if (frameCounter == 160.0)
							{
								num41 = 3;
							}
							int num42 = 3 - num41;
							int num43 = -1;
							int num44 = 0;
							while (num43 < 0 && ++num44 < 100)
							{
								num43 = Main.rand.Next(2);
								if (num43 == 0 && num39 >= num37)
								{
									num43 = -1;
								}
								if (num43 == 1 && num38 >= num36)
								{
									num43 = -1;
								}
								if (num43 == -1 && num42 <= num40)
								{
									num43 = 2;
								}
							}
							if (num43 == 0)
							{
								Main.npc[(int)ai[2]].localAI[3] += 1f;
								num38++;
							}
							if (num43 == 1)
							{
								Main.npc[(int)ai[2]].localAI[2] += 1f;
								num39++;
							}
							int num45 = Utils.SelectRandom<int>(Main.rand, 38, 37, 36);
							int num46 = num45;
							switch (num43)
							{
							case 0:
								switch (num45)
								{
								case 38:
									num46 = 37;
									break;
								case 37:
									num46 = 36;
									break;
								case 36:
									num46 = 38;
									break;
								}
								break;
							case 1:
								switch (num45)
								{
								case 38:
									num46 = 36;
									break;
								case 37:
									num46 = 38;
									break;
								case 36:
									num46 = 37;
									break;
								}
								break;
							}
							if (num42 == 0)
							{
								if (num38 >= 2)
								{
									num45 -= 3;
								}
								if (num39 >= 2)
								{
									num46 -= 3;
								}
							}
							EmoteBubble.NewBubble(num45, new WorldUIAnchor(this), num35);
							EmoteBubble.NewBubble(num46, new WorldUIAnchor(Main.npc[(int)ai[2]]), num35);
						}
						frame.Y = num * (flag2 ? num34 : num34);
						if (frameCounter >= 420.0)
						{
							frameCounter = 0.0;
						}
					}
					else if (velocity.X == 0f)
					{
						if (type == 140 || type == 287 || type == 489)
						{
							frame.Y = num;
							frameCounter = 0.0;
						}
						else
						{
							frame.Y = 0;
							frameCounter = 0.0;
						}
					}
					else
					{
						int num47 = 6;
						if (type == 534)
						{
							num47 = 12;
						}
						if (type == 489)
						{
							num47 = 8;
							frameCounter += Math.Abs(velocity.X) * 1f;
							frameCounter += 0.5;
						}
						else
						{
							frameCounter += Math.Abs(velocity.X) * 2f;
							frameCounter += 1.0;
						}
						if (type == 462)
						{
							num47 = 9;
						}
						if (frameCounter > (double)num47)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y / num >= Main.npcFrameCount[type] - num3)
						{
							frame.Y = num * 2;
						}
					}
				}
				else if (type == 462)
				{
					frameCounter = 0.0;
					if (velocity.Y < 0f)
					{
						frame.Y = num;
					}
					else
					{
						frame.Y = num * 2;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
					if (type == 489 || type == 21 || type == 31 || type == 294 || type == 326 || type == 295 || type == 296 || type == 44 || type == 77 || type == 78 || type == 79 || type == 80 || type == 120 || type == 140 || type == 159 || type == 167 || type == 197 || type == 201 || type == 202 || type == 203 || type == 287 || (type >= 322 && type <= 324))
					{
						frame.Y = 0;
					}
					if (type == 181)
					{
						frame.Y = num * 14;
					}
				}
			}
			if (type >= 494 && type <= 495)
			{
				if (ai[2] > 0f)
				{
					if (ai[2] < 7f)
					{
						frame.Y = num * 5;
					}
					else if (ai[2] < 14f)
					{
						frame.Y = num * 6;
					}
					else if (ai[2] < 20f)
					{
						frame.Y = num * 7;
					}
				}
				else
				{
					if (velocity.Y == 0f)
					{
						if (direction == 1)
						{
							spriteDirection = 1;
						}
						if (direction == -1)
						{
							spriteDirection = -1;
						}
					}
					if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
					{
						frameCounter = 0.0;
						if (velocity.Y < 0f)
						{
							frame.Y = num * 2;
						}
						else
						{
							frame.Y = num * 3;
						}
					}
					else if (velocity.X == 0f)
					{
						frameCounter = 0.0;
						frame.Y = 0;
					}
					else
					{
						frameCounter += Math.Abs(velocity.X);
						if (frameCounter < 8.0)
						{
							frame.Y = 0;
						}
						else if (frameCounter < 16.0)
						{
							frame.Y = num;
						}
						else if (frameCounter < 24.0)
						{
							frame.Y = num * 2;
						}
						else if (frameCounter < 32.0)
						{
							frame.Y = num * 3;
						}
						else if (frameCounter < 39.0)
						{
							frame.Y = num * 4;
						}
						else
						{
							frame.Y = num * 4;
							frameCounter = 0.0;
						}
					}
				}
			}
			if (type >= 498 && type <= 506)
			{
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (ai[2] > 0f)
					{
						spriteDirection = direction;
						if (ai[1] < 12f)
						{
							frame.Y = num * 8;
						}
						else if (ai[1] < 34f)
						{
							frame.Y = num * 9;
						}
						else
						{
							frame.Y = num * 8;
						}
						frameCounter = 0.0;
					}
					else if (velocity.X == 0f)
					{
						frame.Y = 0;
					}
					else
					{
						frameCounter += Math.Abs(velocity.X) * 1f;
						if (frameCounter > 4.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y > num * 7)
						{
							frame.Y = 0;
						}
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num * 10;
				}
			}
			else if (type >= 524 && type <= 527)
			{
				if (velocity.Y == 0f)
				{
					if (direction != 0)
					{
						spriteDirection = direction;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
					}
					else
					{
						frameCounter += Math.Abs(velocity.X);
						frameCounter += 1.0;
						if (frameCounter > 9.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y / num >= Main.npcFrameCount[type])
						{
							frame.Y = num * 2;
						}
					}
				}
				else
				{
					frame.Y = num;
					frameCounter = 0.0;
				}
			}
			else if (type >= 528 && type <= 529)
			{
				if (velocity.Y == 0f)
				{
					if (direction != 0)
					{
						spriteDirection = direction;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
					}
					else
					{
						frameCounter += Math.Abs(velocity.X);
						frameCounter += 1.0;
						if (frameCounter > 9.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y / num >= Main.npcFrameCount[type] - 1)
						{
							frame.Y = num;
						}
					}
				}
				else
				{
					frame.Y = num * (Main.npcFrameCount[type] - 1);
					frameCounter = 0.0;
				}
			}
			else if (type == 533)
			{
				if (velocity.Y == 0f && direction != 0)
				{
					spriteDirection = direction;
				}
				frameCounter += 1.0;
				if (frameCounter >= 48.0)
				{
					frameCounter = 0.0;
				}
				frame.Y = (int)(frameCounter / 6.0) * num;
				if (ai[1] > 0f)
				{
					frame.Y += num * 8;
				}
			}
			if (type >= 496 && type <= 497)
			{
				if (ai[0] == 0f)
				{
					rotation = 0f;
					if (velocity.Y == 0f)
					{
						spriteDirection = direction;
					}
					else if (velocity.Y < 0f)
					{
						frameCounter = 0.0;
					}
					frameCounter += Math.Abs(velocity.X) * 1.1f;
					if (frameCounter < 6.0)
					{
						frame.Y = 0;
					}
					else if (frameCounter < 12.0)
					{
						frame.Y = num;
					}
					else if (frameCounter < 18.0)
					{
						frame.Y = num * 2;
					}
					else if (frameCounter < 24.0)
					{
						frame.Y = num * 3;
					}
					else
					{
						frameCounter = 0.0;
					}
				}
				else if (ai[0] == 1f)
				{
					frameCounter = 0.0;
					if (ai[1] < 10f)
					{
						frame.Y = num * 4;
					}
					else if (ai[1] < 20f)
					{
						frame.Y = num * 5;
					}
					else
					{
						frame.Y = num * 6;
					}
				}
				else if (ai[0] == 5f)
				{
					frameCounter = 0.0;
					if (ai[1] < 10f)
					{
						frame.Y = num * 10;
					}
					else if (ai[1] < 20f)
					{
						frame.Y = num * 11;
					}
					else
					{
						frame.Y = num * 3;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num * 7;
				}
			}
			else if (aiStyle == 39 && type != 417)
			{
				if (ai[0] == 0f)
				{
					rotation = 0f;
					if (velocity.Y == 0f)
					{
						spriteDirection = direction;
					}
					else if (velocity.Y < 0f)
					{
						frameCounter = 0.0;
					}
					frameCounter += Math.Abs(velocity.X) * 1.1f;
					if (frameCounter < 6.0)
					{
						frame.Y = 0;
					}
					else if (frameCounter < 12.0)
					{
						frame.Y = num;
					}
					else if (frameCounter < 18.0)
					{
						frame.Y = num * 2;
					}
					else if (frameCounter < 24.0)
					{
						frame.Y = num * 3;
					}
					else if (frameCounter < 32.0)
					{
						frame.Y = num * 4;
					}
					else
					{
						frameCounter = 0.0;
					}
				}
				else if (ai[0] == 1f)
				{
					frameCounter = 0.0;
					if (ai[1] < 10f)
					{
						frame.Y = num * 5;
					}
					else if (ai[1] < 20f)
					{
						frame.Y = num * 6;
					}
					else
					{
						frame.Y = num * 7;
					}
				}
				else if (ai[0] == 5f)
				{
					frameCounter = 0.0;
					if (ai[1] < 10f)
					{
						frame.Y = num * 7;
					}
					else if (ai[1] < 20f)
					{
						frame.Y = num * 6;
					}
					else
					{
						frame.Y = num * 5;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num * 7;
				}
			}
			else if (type == 508 || type == 532)
			{
				if (velocity.Y != 0f)
				{
					frame.Y = num;
				}
				else if (velocity.X == 0f)
				{
					frame.Y = 0;
				}
				else
				{
					if (direction < 0 && velocity.X < 0f)
					{
						spriteDirection = -1;
					}
					if (direction > 0 && velocity.X > 0f)
					{
						spriteDirection = 1;
					}
					if (frame.Y / num < 2)
					{
						frame.Y = num * 2;
					}
					frameCounter += 1f + Math.Abs(velocity.X) / 2f;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 2;
					}
				}
			}
			else if (type == 509)
			{
				if ((velocity.X > 0f && direction > 0) || (velocity.X < 0f && direction < 0))
				{
					spriteDirection = direction;
				}
				if ((frameCounter += 1.0) >= 3.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
			}
			if (type == 415)
			{
				if (ai[2] < 0f)
				{
					if (frame.Y / num != 8 && frame.Y / num != 9 && frame.Y / num != 0)
					{
						frameCounter = 0.0;
					}
					frameCounter += 1.0;
					int num48 = 0;
					int num49 = 18;
					int num50 = 4;
					if (frameCounter > (double)(num49 - num50 * 2))
					{
						num48 = 8 + (int)frameCounter / 4 % 2;
					}
					if (frameCounter > (double)(num49 + num50 * 6))
					{
						num48 = 0;
						frameCounter = 0.0;
					}
					frame.Y = num * num48;
				}
				else if (velocity.Y == 0f)
				{
					if (direction != 0)
					{
						spriteDirection = direction;
					}
					if (frame.Y < num * 2)
					{
						frame.Y = num * 2;
					}
					frameCounter += Math.Abs(velocity.X) * 0.5f;
					if (frameCounter >= 8.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type] - 2)
					{
						frame.Y = num * 2;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
			}
			if (type == 416)
			{
				int num51 = (int)ai[0];
				if (Main.npc[num51].active && Main.npc[num51].type == 415 && Main.npcTexture[415] != null)
				{
					frame.Y = Main.npc[num51].frame.Y / (Main.npcTexture[415].Height / Main.npcFrameCount[415]) * num;
				}
			}
			else if (type == 417)
			{
				if (ai[0] == 0f)
				{
					rotation = 0f;
					if (velocity.Y == 0f)
					{
						spriteDirection = direction;
					}
					else if (velocity.Y < 0f)
					{
						frameCounter = 0.0;
					}
					frameCounter += Math.Abs(velocity.X) * 1.1f;
					frame.Y = (int)(frameCounter / 6.0) * num;
					if (frameCounter >= 48.0)
					{
						frameCounter = 0.0;
					}
				}
				else if (ai[0] == 1f)
				{
					frameCounter = 0.0;
					frame.Y = num * (9 + (int)(ai[1] / 6f));
				}
				else if (ai[0] == 5f)
				{
					frameCounter = 0.0;
					frame.Y = num * (13 - (int)(ai[1] / 6f));
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num * 14;
				}
			}
			else if (type == 518)
			{
				if (velocity.Y == 0f)
				{
					if (direction != 0)
					{
						spriteDirection = direction;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
					}
					else
					{
						frameCounter += Math.Abs(velocity.X) * 1f;
						frameCounter += 1.0;
						if (frameCounter > 6.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y / num >= Main.npcFrameCount[type])
						{
							frame.Y = num * 2;
						}
					}
				}
				else
				{
					frame.Y = num;
					frameCounter = 0.0;
				}
			}
			else if (type == 419)
			{
				if (ai[2] < 0f)
				{
					int num52 = 1;
					if (direction != 0)
					{
						spriteDirection = direction;
					}
					if (frame.Y / num >= 9)
					{
						frame.Y = num * 2;
						frameCounter = 0.0;
					}
					if (frame.Y / num < 2)
					{
						frame.Y = num * 2;
						frameCounter = 0.0;
					}
					frameCounter += 1.0;
					if (frameCounter >= (double)(num52 * 4 + 6))
					{
						frameCounter = 8.0;
					}
					if (frameCounter < 6.0)
					{
						frame.Y = num * (int)(2.0 + frameCounter / 3.0);
					}
					else
					{
						frame.Y = num * (int)(4.0 + (frameCounter - 6.0) / (double)num52);
					}
				}
				else if (velocity.Y == 0f)
				{
					if (direction != 0)
					{
						spriteDirection = direction;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
					}
					else
					{
						frameCounter += Math.Abs(velocity.X) * 1f;
						frameCounter += 1.0;
						if (frameCounter > 6.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y / num >= Main.npcFrameCount[type])
						{
							frame.Y = num * 9;
						}
						if (frame.Y / num < 9)
						{
							frame.Y = num * 9;
						}
					}
				}
				else
				{
					frame.Y = num;
					frameCounter = 0.0;
				}
			}
			else if (type == 425)
			{
				if (direction != 0)
				{
					spriteDirection = -direction;
				}
				if (ai[2] == 1f)
				{
					frameCounter += 1.0;
					if (frameCounter >= 3.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y > num * 12 || frame.Y < num * 10)
					{
						frame.Y = num * 10;
					}
				}
				else if (velocity.Y != 0f)
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
				else if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
				else
				{
					frameCounter += Math.Abs(velocity.X);
					if (frameCounter >= 8.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y > num * 9 || frame.Y < num * 2)
					{
						frame.Y = num * 2;
					}
				}
			}
			else if (type == 427)
			{
				if (direction != 0)
				{
					spriteDirection = direction;
				}
				if (velocity.Y != 0f)
				{
					frameCounter += 1.0;
					if (frameCounter >= 2.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y >= num * 9 || frame.Y < num * 6)
					{
						frame.Y = num * 6;
					}
				}
				else if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
				else
				{
					frameCounter += Math.Abs(velocity.X);
					if (frameCounter >= 8.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y > num * 5 || frame.Y < num)
					{
						frame.Y = num;
					}
				}
			}
			else if (type == 426)
			{
				if (direction != 0)
				{
					spriteDirection = direction;
				}
				if (ai[1] >= 45f)
				{
					if (velocity.Y == 0f)
					{
						frame.Y = num * 8;
					}
					else
					{
						frameCounter += 1.0;
						if (frameCounter >= 2.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y >= num * 15 || frame.Y < num * 12)
						{
							frame.Y = num * 12;
						}
					}
				}
				else if (velocity.Y != 0f)
				{
					frameCounter += 1.0;
					if (frameCounter >= 2.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y >= num * 12 || frame.Y < num * 9)
					{
						frame.Y = num * 9;
					}
				}
				else if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
				else
				{
					frameCounter += Math.Abs(velocity.X);
					if (frameCounter >= 10.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y > num * 7 || frame.Y < num)
					{
						frame.Y = num;
					}
				}
			}
			else if (type == 429)
			{
				if (velocity.Y == 0f)
				{
					if (direction != 0)
					{
						spriteDirection = direction;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
					}
					else
					{
						frameCounter += Math.Abs(velocity.X) * 1f;
						frameCounter += 1.0;
						if (frameCounter > 6.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y / num >= Main.npcFrameCount[type])
						{
							frame.Y = num * 2;
						}
					}
				}
				else
				{
					frame.Y = num;
					frameCounter = 0.0;
				}
			}
			else if (type == 428)
			{
				if (velocity.Y == 0f)
				{
					if (direction != 0)
					{
						spriteDirection = direction;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
					}
					else
					{
						frameCounter += Math.Abs(velocity.X) * 1f;
						if ((frameCounter += 1.0) > 10.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y / num >= Main.npcFrameCount[type] - 1)
						{
							frame.Y = 0;
						}
					}
				}
				else if (frame.Y / num != 4)
				{
					if (frameCounter > 0.0)
					{
						frameCounter = 0.0;
					}
					if ((frameCounter -= 1.0) < -10.0 || velocity.Y > 0.6f)
					{
						frame.Y = num * 4;
						frameCounter = 0.0;
					}
				}
			}
			else if (type == 423)
			{
				if (ai[2] == 1f)
				{
					int num53 = 2;
					if (ai[1] >= 30f && ai[1] < 45f)
					{
						num53 = 3;
					}
					frame.Y = num53 * num;
				}
				else if (velocity.Y != 0f)
				{
					frame.Y = num;
				}
				else if (velocity.X == 0f)
				{
					frame.Y = 0;
				}
				else
				{
					if (velocity.X != 0f)
					{
						spriteDirection = Math.Sign(0f - velocity.X);
					}
					if (frame.Y / num < 4)
					{
						frame.Y = num * 4;
					}
					frameCounter += 1f + Math.Abs(velocity.X) / 2f;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 4;
					}
				}
			}
			else if (type == 421)
			{
				if (ai[0] == 5f)
				{
					frameCounter += 1.0;
				}
				if ((frameCounter += 1.0) >= 5.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
			}
			if (type == 424)
			{
				if (velocity.Y == 0f)
				{
					if (direction != 0)
					{
						spriteDirection = -direction;
					}
					if (ai[2] > 0f)
					{
						frame.Y = num * ((ai[1] > 90f) ? (Main.npcFrameCount[type] - 2) : (Main.npcFrameCount[type] - 1));
						frameCounter = 0.0;
					}
					else if (velocity.X == 0f)
					{
						frame.Y = 0;
					}
					else
					{
						if (frame.Y < num * 2)
						{
							frame.Y = num * 2;
						}
						frameCounter += Math.Abs(velocity.X) * 2f;
						frameCounter += velocity.X * 1.3f;
						if (frameCounter > 6.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y / num >= Main.npcFrameCount[type] - 2)
						{
							frame.Y = num * 2;
						}
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
			}
			else if (type == 420 && (frameCounter += 1.0) >= 5.0)
			{
				frameCounter = 0.0;
				frame.Y += num;
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
			}
			if (type == 411)
			{
				if (ai[1] >= 90f && ai[1] < 180f)
				{
					spriteDirection = -direction;
					frame.Y = num * (Main.npcFrameCount[type] - 1);
					frameCounter = 0.0;
				}
				else if (velocity.Y == 0f)
				{
					if (direction != 0)
					{
						spriteDirection = -direction;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
					}
					else
					{
						frameCounter += Math.Abs(velocity.X) * 1f;
						frameCounter += 1.0;
						if (frameCounter > 6.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y / num >= Main.npcFrameCount[type] - 1)
						{
							frame.Y = num * 2;
						}
					}
				}
				else
				{
					frame.Y = num;
					frameCounter = 0.0;
				}
			}
			else if (type == 409)
			{
				if (velocity.Y == 0f && ai[1] <= 30f && ai[1] > 0f)
				{
					frame.Y = num * (Main.npcFrameCount[type] - 1);
					frameCounter = 0.0;
				}
				else
				{
					if (velocity.Y == 0f)
					{
						spriteDirection = direction;
					}
					if ((frameCounter += 1.0) >= 6.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
						if (frame.Y / num >= Main.npcFrameCount[type] - 2)
						{
							frame.Y = 0;
						}
					}
				}
			}
			else if (type == 410)
			{
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter >= 10.0)
				{
					frameCounter -= 10.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
			}
			else if (type == 407)
			{
				if ((frameCounter += 1.0) >= 6.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
			}
			else if ((type == 405 || type == 406) && (frameCounter += 1.0) >= 4.0)
			{
				frameCounter = 0.0;
				frame.Y += num;
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
			}
			if (type == 516)
			{
				if (localAI[1] == 0f)
				{
					localAI[1] = 1f;
					frame.Y = num * Main.rand.Next(3);
					frameCounter += Main.rand.Next(3);
				}
				frameCounter += 1.0;
				if (frameCounter > 3.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y > num * 3)
					{
						frame.Y = 0;
					}
				}
			}
			if (type == 418)
			{
				if (ai[0] == 0f || ai[0] == 1f || ai[0] == -1f)
				{
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					if (frame.Y > num * 4)
					{
						frame.Y = 0;
					}
				}
				else if (ai[0] == 2f)
				{
					if (ai[1] < 10f)
					{
						frame.Y = num * 5;
					}
					else if (ai[1] < 20f)
					{
						frame.Y = num * 6;
					}
					else
					{
						frame.Y = num * 7;
					}
				}
				else if (ai[0] == -2f)
				{
					frameCounter += 1.0;
					if (frameCounter > 12.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					if (frame.Y > num * 7)
					{
						frame.Y = num * 5;
					}
				}
			}
			if (type == 1 || type == 537 || type == 16 || type == 59 || type == 71 || type == 81 || type == 138 || type == 147 || type == 183 || type == 184 || type == 204 || type == 225 || type == 302 || type == 304 || (type >= 333 && type <= 336) || type == 535)
			{
				if (type == 302 || type == 304)
				{
					spriteDirection = direction;
				}
				frameCounter += 1.0;
				if (num2 > 0)
				{
					frameCounter += 1.0;
				}
				if (num2 == 4)
				{
					frameCounter += 1.0;
				}
				if (frameCounter >= 8.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
			}
			if (type == 488)
			{
				int num54 = (int)localAI[1];
				if (Framing.GetTileSafely((int)ai[0], (int)ai[1]).frameX >= 36)
				{
					num54 *= -1;
				}
				if (localAI[0] > 24f)
				{
					localAI[0] = 24f;
				}
				if (localAI[0] > 0f)
				{
					localAI[0] -= 1f;
				}
				if (localAI[0] < 0f)
				{
					localAI[0] = 0f;
				}
				int num55 = (num54 == -1) ? 4 : 6;
				int num56 = (int)localAI[0] / num55;
				if (localAI[0] % (float)num55 != 0f)
				{
					num56++;
				}
				if (num56 != 0 && num54 == 1)
				{
					num56 += 5;
				}
				frame.Y = num56 * num;
			}
			if (type >= 430 && type <= 436)
			{
				if (ai[2] > 0f)
				{
					if (ai[2] < 5f)
					{
						frame.Y = num * 3;
					}
					else if (ai[2] < 10f)
					{
						frame.Y = num * 4;
					}
					else if (ai[2] < 15f)
					{
						frame.Y = num * 5;
					}
					else
					{
						frame.Y = num * 6;
					}
				}
				else
				{
					if (velocity.Y == 0f)
					{
						if (direction == 1)
						{
							spriteDirection = 1;
						}
						if (direction == -1)
						{
							spriteDirection = -1;
						}
					}
					if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
					{
						frameCounter = 0.0;
						frame.Y = num * 2;
					}
					else if (velocity.X == 0f)
					{
						frameCounter = 0.0;
						frame.Y = 0;
					}
					else
					{
						frameCounter += Math.Abs(velocity.X);
						if (frameCounter < 8.0)
						{
							frame.Y = 0;
						}
						else if (frameCounter < 16.0)
						{
							frame.Y = num;
						}
						else if (frameCounter < 24.0)
						{
							frame.Y = num * 2;
						}
						else if (frameCounter < 32.0)
						{
							frame.Y = num;
						}
						else
						{
							frameCounter = 0.0;
						}
					}
				}
			}
			if (type == 454)
			{
				int num57 = (int)(frameCounter / 2.0);
				frame.Y = num * num57;
			}
			if (type == 377 || type == 446)
			{
				if (velocity.Y != 0f)
				{
					frame.Y = num;
				}
				else
				{
					frame.Y = 0;
				}
				spriteDirection = direction;
			}
			if (type == 378)
			{
				if (velocity.Y != 0f && frame.Y < num * 2)
				{
					frame.Y += num * 2;
				}
				if (velocity.Y == 0f && frame.Y > num * 2)
				{
					frame.Y -= num * 2;
				}
				frameCounter += 1.0;
				int num58 = 6;
				if (frameCounter >= (double)num58)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (velocity.Y != 0f && frame.Y >= num * 4)
					{
						frame.Y = num * 2;
					}
					if (velocity.Y == 0f && frame.Y >= num * 2)
					{
						frame.Y = 0;
					}
				}
			}
			if (type == 376)
			{
				frameCounter += 1.0;
				if (frameCounter > 30.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y >= num * 2)
					{
						frame.Y = 0;
					}
				}
			}
			if (type == 375)
			{
				frameCounter += 1.0;
				if (frameCounter > 4.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y >= num * 4)
					{
						frame.Y = 0;
					}
				}
			}
			if (type == 374)
			{
				localAI[0] = -2f;
				if (velocity.Y == 0f)
				{
					rotation = 0f;
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
					}
					else
					{
						frameCounter += 1.0;
						if (frameCounter > 6.0)
						{
							frameCounter = 0.0;
							frame.Y += num;
							if (frame.Y >= num * 4)
							{
								frame.Y = num;
							}
						}
					}
				}
				else
				{
					rotation += (float)direction * 0.1f;
					frameCounter += 1.0;
					if (frameCounter > 3.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
						if (frame.Y >= num * 4)
						{
							frame.Y = num;
						}
					}
				}
			}
			if (type == 492)
			{
				frame.Y = num * (int)ai[2];
			}
			if (type == 473 || type == 474 || type == 475 || type == 476)
			{
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				if (ai[0] == 0f || ai[0] == 7f)
				{
					rotation = 0f;
					frameCounter = 0.0;
					frame.Y = 0;
				}
				else if (ai[0] == 1f)
				{
					rotation = 0f;
					frameCounter = 0.0;
					int num59 = 6;
					if (ai[1] < (float)num59)
					{
						frame.Y = num;
					}
					else if (ai[1] < (float)(num59 * 2))
					{
						frame.Y = num * 2;
					}
					else if (ai[1] < (float)(num59 * 3))
					{
						frame.Y = num * 3;
					}
					else if (ai[1] < (float)(num59 * 4))
					{
						frame.Y = num * 4;
					}
					else if (ai[1] < (float)(num59 * 5))
					{
						frame.Y = num * 5;
					}
					else
					{
						frame.Y = num * 6;
					}
				}
				else if (ai[0] == 2f || ai[0] == 6f)
				{
					rotation = 0f;
					if (velocity.Y == 0f)
					{
						int num60 = 6;
						frameCounter += 1.0;
						if (frame.Y < num * 7)
						{
							frame.Y = num * 12;
						}
						if (frame.Y < num * 10)
						{
							if (frameCounter > 8.0)
							{
								frame.Y += num;
								frameCounter = 0.0;
								if (frame.Y == num * 10)
								{
									frameCounter = num60 * 2;
								}
							}
						}
						else if (frameCounter < (double)num60)
						{
							frame.Y = num * 12;
						}
						else if (frameCounter < (double)(num60 * 2))
						{
							frame.Y = num * 11;
						}
						else if (frameCounter < (double)(num60 * 3))
						{
							frame.Y = num * 10;
						}
						else
						{
							frame.Y = num * 11;
							if (frameCounter >= (double)(num60 * 4 - 1))
							{
								frameCounter = 0.0;
							}
						}
					}
					else
					{
						frame.Y = num * 13;
						frameCounter = 0.0;
					}
				}
				else if (ai[0] == 3f)
				{
					rotation = 0f;
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frameCounter = 0.0;
						if (frame.Y > num * 7)
						{
							frame.Y -= num;
						}
					}
				}
				else if (ai[0] == 4f || ai[0] == 5f)
				{
					if (ai[0] == 4f && ai[2] == 1f)
					{
						rotation = 0f;
					}
					frame.Y = num * 13;
					frameCounter = 0.0;
				}
				else if (ai[0] == 4.1f)
				{
					rotation = 0f;
					if (frame.Y > num * 6)
					{
						frameCounter = 0.0;
					}
					frameCounter += 1.0;
					int num61 = 4;
					if (frameCounter < (double)num61)
					{
						frame.Y = num * 6;
					}
					else if (frameCounter < (double)(num61 * 2))
					{
						frame.Y = num * 5;
					}
					else if (frameCounter < (double)(num61 * 3))
					{
						frame.Y = num * 4;
					}
					else if (frameCounter < (double)(num61 * 4))
					{
						frame.Y = num * 3;
					}
					else if (frameCounter < (double)(num61 * 5))
					{
						frame.Y = num * 4;
					}
					else
					{
						frame.Y = num * 5;
						if (frameCounter >= (double)(num61 * 6 - 1))
						{
							frameCounter = 0.0;
						}
					}
				}
			}
			if (type == 477)
			{
				frameCounter += velocity.Length() / 4f;
				frameCounter += 1.0;
				if (frameCounter >= 6.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
				if (frame.Y / num > 5)
				{
					frame.Y = 0;
				}
			}
			if (type == 479)
			{
				frameCounter += 1.0;
				int num62 = 4;
				if (frameCounter < (double)num62)
				{
					frame.Y = 0;
				}
				else if (frameCounter < (double)(num62 * 2))
				{
					frame.Y = num;
				}
				else if (frameCounter < (double)(num62 * 3))
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < (double)(num62 * 4 - 1))
				{
					frame.Y = num;
				}
				else
				{
					frameCounter = 0.0;
				}
			}
			if (type == 472)
			{
				if (velocity.X < 0f)
				{
					direction = -1;
				}
				else
				{
					direction = 1;
				}
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
				rotation = (float)Math.Atan2(velocity.Y * (float)direction, velocity.X * (float)direction);
				frameCounter += 1.0;
				if (frameCounter > 4.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num >= 6)
				{
					frame.Y = 0;
				}
			}
			if (type >= 449 && type <= 452)
			{
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (ai[2] > 0f)
					{
						spriteDirection = direction;
						int num63 = 0;
						if (ai[1] < 22f)
						{
							num63 = -14;
						}
						else if (ai[1] < 28f)
						{
							num63 = 3;
						}
						else if (ai[1] < 34f)
						{
							num63 = 2;
						}
						else if (ai[1] < 40f)
						{
							num63 = 1;
						}
						frame.Y = num * (15 + num63);
						frameCounter = 0.0;
					}
					else if (velocity.X == 0f)
					{
						frame.Y = num;
					}
					else
					{
						if (frame.Y < num * 2)
						{
							frame.Y = num * 2;
						}
						frameCounter += Math.Abs(velocity.X) * 2f;
						if (frameCounter > 6.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y / num >= 15)
						{
							frame.Y = num * 2;
						}
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
			}
			if (type == 481)
			{
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (ai[2] > 0f)
					{
						spriteDirection = direction;
						int num64 = 0;
						if (ai[1] < 22f)
						{
							num64 = -14;
						}
						else if (ai[1] < 28f)
						{
							num64 = 3;
						}
						else if (ai[1] < 34f)
						{
							num64 = 2;
						}
						else if (ai[1] < 40f)
						{
							num64 = 1;
						}
						frame.Y = num * (15 + num64);
						frameCounter = 0.0;
					}
					else if (velocity.X == 0f)
					{
						frame.Y = num;
					}
					else
					{
						if (frame.Y < num * 2)
						{
							frame.Y = num * 2;
						}
						frameCounter += Math.Abs(velocity.X) * 2f;
						if (frameCounter > 6.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y / num >= 15)
						{
							frame.Y = num * 2;
						}
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
			}
			if (type == 468)
			{
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (ai[2] > 0f)
					{
						spriteDirection = direction;
						int num65 = 0;
						if (ai[1] < 22f)
						{
							num65 = -15;
						}
						else if (ai[1] < 28f)
						{
							num65 = 3;
						}
						else if (ai[1] < 34f)
						{
							num65 = 2;
						}
						else if (ai[1] < 40f)
						{
							num65 = 1;
						}
						frame.Y = num * (15 + num65);
						frameCounter = 0.0;
					}
					else if (velocity.X == 0f)
					{
						frame.Y = 0;
					}
					else
					{
						if (frame.Y < num * 2)
						{
							frame.Y = num * 2;
						}
						frameCounter += Math.Abs(velocity.X) * 2f;
						if (frameCounter > 6.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y / num >= 15)
						{
							frame.Y = num * 2;
						}
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
			}
			if (type == 379 || type == 380)
			{
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (ai[2] > 0f)
					{
						spriteDirection = direction;
						frame.Y = num * ((int)ai[2] - 1 + 2);
						frameCounter = 0.0;
					}
					else if (velocity.X == 0f)
					{
						frame.Y = 0;
					}
					else
					{
						if (frame.Y < num * 7)
						{
							frame.Y = num * 7;
						}
						frameCounter += Math.Abs(velocity.X) * 2f;
						if (frameCounter > 6.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y / num >= Main.npcFrameCount[type])
						{
							frame.Y = num * 7;
						}
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
			}
			if (type == 381 || type == 382 || type == 383 || type == 385 || type == 389)
			{
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
					if (frame.Y < num * 2)
					{
						frame.Y = num * 2;
					}
					if (type == 389 || type == 385)
					{
						frameCounter += (double)Math.Abs(velocity.X) * 1.2;
					}
					else
					{
						frameCounter += Math.Abs(velocity.X) * 2f;
					}
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 2;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
			}
			if (type == 387)
			{
				if (ai[0] > 0f)
				{
					frameCounter += 1.0;
					if (ai[0] >= 20f)
					{
						frameCounter += 1.0;
					}
					if (ai[0] >= 40f)
					{
						frameCounter += 1.0;
					}
					if (frameCounter >= 10.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
						if (frame.Y >= num * 2)
						{
							frame.Y = 0;
						}
					}
				}
				else
				{
					frameCounter += 1.0;
					if (frameCounter >= 15.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
						if (frame.Y >= num * 2)
						{
							frame.Y = 0;
						}
					}
				}
			}
			if (type == 386)
			{
				if (ai[2] > 0f)
				{
					int num66 = (int)ai[2] / 12;
					frame.Y = num * (9 + num66 % 2);
				}
				else if (velocity.Y == 0f)
				{
					spriteDirection = direction;
					if (frame.Y < num * 2)
					{
						frame.Y = num * 2;
					}
					frameCounter += Math.Abs(velocity.X) * 2f;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= 9)
					{
						frame.Y = num * 2;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
			}
			if (type == 388)
			{
				frameCounter += 1.0;
				int num67 = 6;
				if (frameCounter >= (double)num67)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y >= num * 2)
					{
						frame.Y = 0;
					}
				}
			}
			if (type == 391)
			{
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = -1;
					}
					if (direction == -1)
					{
						spriteDirection = 1;
					}
					if (frame.Y < num)
					{
						frame.Y = num;
					}
					frameCounter += Math.Abs(velocity.X) * 0.5f;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
			}
			if (type == 390)
			{
				if (direction != 0)
				{
					spriteDirection = -direction;
				}
				if (ai[2] > 0f)
				{
					frame.Y = num * ((int)ai[2] - 1);
				}
				else
				{
					frame.Y = num * 2;
				}
			}
			if (type == 393)
			{
				int num68 = 0;
				Vector2 vector = ai[2].ToRotationVector2();
				num68 = ((vector.Y > Math.Abs(vector.X) * 2f) ? 4 : ((vector.Y > Math.Abs(vector.X) * 1.5f) ? ((vector.X > 0f) ? 5 : 3) : ((Math.Abs(vector.X) > vector.Y * 2f) ? ((vector.X > 0f) ? 8 : 0) : ((!(Math.Abs(vector.X) > vector.Y * 1.5f)) ? ((vector.X > 0f) ? 6 : 2) : ((!(vector.X > 0f)) ? 1 : 7)))));
				frame.Y = num * num68;
				float num69 = 280f;
				float num70 = 140f;
				if (ai[3] >= num69 && ai[3] < num69 + num70 && (int)ai[3] % 6 <= 2)
				{
					frame.Y += num * 9;
				}
			}
			if (type == 394)
			{
				int num71 = (int)ai[3] - 300;
				if (num71 >= 120)
				{
					num71 -= 120;
					if (num71 >= 160)
					{
						frame.Y = num * (7 - (num71 - 160) / 5);
					}
					else if (num71 >= 20)
					{
						frame.Y = num * (num71 / 4 % 4);
					}
					else
					{
						frame.Y = num * (4 + num71 / 5);
					}
				}
				else
				{
					frame.Y = num * 4;
				}
			}
			if (type == 395)
			{
				float num72 = 20f;
				float num73 = 240f;
				bool flag3 = ai[3] >= num72 && ai[3] < num72 + num73;
				frameCounter += 1.0;
				if (frameCounter >= 66.0)
				{
					frameCounter = 0.0;
				}
				if (flag3)
				{
					frameCounter += 1.0;
					if (frameCounter >= 54.0 || frameCounter < 36.0)
					{
						frameCounter = 36.0;
					}
				}
				int num74 = (int)frameCounter % 66;
				num74 /= 6;
				frame.Y = num * num74;
			}
			if (type == 392)
			{
				float num75 = 20f;
				float num76 = 240f;
				bool flag4 = ai[3] >= num75 && ai[3] < num75 + num76;
				frameCounter += 1.0;
				if (flag4)
				{
					frameCounter += 1.0;
				}
				if (frameCounter >= 12.0)
				{
					frameCounter = 0.0;
				}
				int num77 = (int)frameCounter % 12;
				num77 /= 3;
				frame.Y = num * num77;
			}
			if (type == 399)
			{
				frameCounter = (frameCounter + 0.25) % 4.0 + (double)((ai[0] != 0f) ? 4 : 0);
				frame.Y = num * (int)frameCounter;
			}
			else if (type == 520)
			{
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
					frameCounter += Math.Abs(velocity.X) * 1f;
					if (frameCounter > 6.0)
					{
						if (Math.Abs(velocity.X) < 0.2f)
						{
							frame.Y = 0;
							frameCounter = 0.0;
						}
						else
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
			}
			if (type == 398)
			{
				if (ai[0] <= 0f)
				{
					frame.Y = 0;
				}
				else
				{
					if (frame.Y == 0)
					{
						Gore.NewGore(base.position + new Vector2(-10f, -15f), velocity, 619);
						Gore.NewGore(base.position + new Vector2(10f, -15f), velocity, 620);
						Gore.NewGore(base.position + new Vector2(-10f, 15f), velocity, 621);
						Gore.NewGore(base.position + new Vector2(10f, 15f), velocity, 622);
						for (int k = 0; k < 50; k++)
						{
							frame.Y = num;
							Dust.NewDust(base.position, width, height, 209);
						}
					}
					frameCounter += 1.0;
					if (frameCounter >= 30.0)
					{
						frameCounter = 6.0;
					}
					int num78 = (int)frameCounter % 30;
					num78 /= 6;
					frame.Y = num * num78;
				}
			}
			if (type == 397)
			{
				int num79 = (int)frameCounter / 7;
				frame.Y = num * num79;
			}
			if (type == 400)
			{
				frameCounter += 1.0;
				if (ai[0] == 0f || ai[0] == 3f)
				{
					frameCounter += 1.0;
				}
				if (frameCounter >= 16.0)
				{
					frameCounter = 0.0;
				}
				int num80 = (int)frameCounter % 16;
				num80 /= 4;
				frame.Y = num * num80;
			}
			if (type == 437)
			{
				frameCounter += 1.0;
				if (frameCounter >= 20.0)
				{
					frameCounter = 0.0;
				}
				int num81 = (int)frameCounter % 20;
				num81 /= 5;
				frame.Y = num * num81;
			}
			if (type == 438)
			{
				frameCounter += 1.0;
				if (ai[1] == 1f)
				{
					frameCounter += 1.0;
				}
				if (frameCounter >= 49.0)
				{
					frameCounter = 0.0;
				}
				int num82 = (int)frameCounter % 49;
				num82 /= 7;
				if (num82 >= 4)
				{
					num82 = 6 - num82;
				}
				frame.Y = num * num82;
			}
			if (type == 439 || type == 440)
			{
				switch ((int)localAI[2])
				{
				case 0:
					if (frameCounter >= 15.0)
					{
						frameCounter = 0.0;
						frame.Y = 0;
					}
					else if (frame.Y != 0)
					{
						frame.Y = ((int)frameCounter / 5 + 4) * num;
					}
					break;
				case 10:
					if (frameCounter >= 15.0)
					{
						frameCounter = 0.0;
					}
					frame.Y = ((int)frameCounter / 5 + 4) * num;
					break;
				case 1:
					if (frameCounter >= 15.0)
					{
						frameCounter = 0.0;
						frame.Y = num;
					}
					else if (frame.Y != num)
					{
						frame.Y = ((int)frameCounter / 5 + 10) * num;
					}
					break;
				case 11:
					if (frameCounter >= 15.0)
					{
						frameCounter = 0.0;
					}
					frame.Y = ((int)frameCounter / 5 + 10) * num;
					break;
				case 2:
					if (frameCounter >= 15.0)
					{
						frameCounter = 0.0;
						frame.Y = num * 2;
					}
					else if (frame.Y != num * 2)
					{
						frame.Y = ((int)frameCounter / 5 + 7) * num;
					}
					break;
				case 12:
					if (frameCounter >= 15.0)
					{
						frameCounter = 0.0;
					}
					frame.Y = ((int)frameCounter / 5 + 7) * num;
					break;
				case 13:
					if (frameCounter >= 15.0)
					{
						frameCounter = 0.0;
					}
					frame.Y = ((int)frameCounter / 5 + 13) * num;
					break;
				}
				frameCounter += 1.0;
			}
			if (type == 521)
			{
				if (velocity.X < 0f)
				{
					direction = -1;
				}
				else
				{
					direction = 1;
				}
				if (direction != 0)
				{
					spriteDirection = direction;
				}
				rotation = (float)Math.Atan2(velocity.Y * (float)spriteDirection, velocity.X * (float)spriteDirection) + velocity.X * 0.1f;
				if ((frameCounter += 1.0) >= 5.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
			}
			if (type == 523 && (frameCounter += 1.0) >= 6.0)
			{
				frame.Y += num;
				frameCounter = 0.0;
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
			}
			if (type == 371 || type == 372 || type == 373)
			{
				frame.Y = num;
			}
			if (type == 370)
			{
				if (ai[0] == 0f || ai[0] == 5f)
				{
					int num83 = 5;
					if (ai[0] == 5f)
					{
						num83 = 4;
					}
					frameCounter += 1.0;
					if (frameCounter > (double)num83)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					if (frame.Y >= num * 6)
					{
						frame.Y = 0;
					}
				}
				if (ai[0] == 1f || ai[0] == 6f)
				{
					if (ai[2] < 10f)
					{
						frame.Y = num * 6;
					}
					else
					{
						frame.Y = num * 7;
					}
				}
				if (ai[0] == 2f || ai[0] == 7f)
				{
					if (ai[2] < 10f)
					{
						frame.Y = num * 6;
					}
					else
					{
						frame.Y = num * 7;
					}
				}
				if (ai[0] == 3f || ai[0] == 8f || ai[0] == -1f)
				{
					int num84 = 90;
					if (ai[2] < (float)(num84 - 30) || ai[2] > (float)(num84 - 10))
					{
						frameCounter += 1.0;
						if (frameCounter > 5.0)
						{
							frameCounter = 0.0;
							frame.Y += num;
						}
						if (frame.Y >= num * 6)
						{
							frame.Y = 0;
						}
					}
					else
					{
						frame.Y = num * 6;
						if (ai[2] > (float)(num84 - 20) && ai[2] < (float)(num84 - 15))
						{
							frame.Y = num * 7;
						}
					}
				}
				if (ai[0] == 4f || ai[0] == 9f)
				{
					int num85 = 180;
					if (ai[2] < (float)(num85 - 60) || ai[2] > (float)(num85 - 20))
					{
						frameCounter += 1.0;
						if (frameCounter > 5.0)
						{
							frameCounter = 0.0;
							frame.Y += num;
						}
						if (frame.Y >= num * 6)
						{
							frame.Y = 0;
						}
					}
					else
					{
						frame.Y = num * 6;
						if (ai[2] > (float)(num85 - 50) && ai[2] < (float)(num85 - 25))
						{
							frame.Y = num * 7;
						}
					}
				}
			}
			if (type == 359 || type == 360)
			{
				if (velocity.Y > 1f)
				{
					frameCounter += 1.0;
					int num86 = 6;
					if (frameCounter < (double)num86)
					{
						frame.Y = num * 4;
					}
					else
					{
						frame.Y = num * 5;
						if (frameCounter >= (double)(num86 * 2 - 1))
						{
							frameCounter = 0.0;
						}
					}
				}
				else
				{
					frameCounter += 1.0;
					int num87 = 10;
					if (frameCounter < (double)num87)
					{
						frame.Y = 0;
					}
					else if (frameCounter < (double)(num87 * 2))
					{
						frame.Y = num;
					}
					else if (frameCounter < (double)(num87 * 3))
					{
						frame.Y = num * 2;
					}
					else if (frameCounter < (double)(num87 * 4))
					{
						frame.Y = num * 3;
					}
					else if (frameCounter < (double)(num87 * 5))
					{
						frame.Y = num * 2;
					}
					else
					{
						frame.Y = num;
						if (frameCounter >= (double)(num87 * 6 - 1))
						{
							frameCounter = 0.0;
						}
					}
				}
			}
			if (type == 327)
			{
				if (ai[3] == 0f)
				{
					if (frame.Y > num * 5)
					{
						frameCounter += 1.0;
					}
					else if (frame.Y > 0)
					{
						frameCounter -= 1.0;
					}
				}
				else if (ai[3] == 1f)
				{
					if (frame.Y > num * 10)
					{
						frameCounter += 1.0;
					}
					else if (frame.Y > num * 4)
					{
						frameCounter -= 1.0;
					}
					else if (frame.Y < num * 4)
					{
						frameCounter += 1.0;
					}
				}
				else if (ai[3] == 2f)
				{
					if (frame.Y < num * 2)
					{
						frameCounter -= 1.0;
					}
					else if (frame.Y > num * 8)
					{
						frameCounter -= 1.0;
					}
					else if (frame.Y < num * 8)
					{
						frameCounter += 1.0;
					}
				}
				if (frameCounter > 6.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y > num * 11)
					{
						frame.Y = 0;
					}
				}
				if (frameCounter < 0.0)
				{
					frameCounter = 6.0;
					frame.Y -= num;
					if (frame.Y < 0)
					{
						frame.Y = num * 11;
					}
				}
			}
			if (type == 347)
			{
				frameCounter += 1.0;
				if (frameCounter > 1.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y > num * 3)
				{
					frame.Y = 0;
				}
			}
			if (type == 346)
			{
				if (ai[0] == 1f)
				{
					spriteDirection = direction;
					frameCounter += 1.0;
					if (frameCounter > 2.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y > num * 8)
					{
						frame.Y = num * 6;
					}
					if (frame.Y < num * 6)
					{
						frame.Y = num * 6;
					}
				}
				else if (velocity.X == 0f)
				{
					ref Rectangle reference = ref frame;
					reference.Y = reference.Y;
					frameCounter = 0.0;
				}
				else
				{
					spriteDirection = direction;
					frameCounter += 1.0;
					frameCounter += Math.Abs(velocity.X) / 2f;
					if (frameCounter > 4.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y > num * 5)
					{
						frame.Y = num;
					}
					if (frame.Y < num)
					{
						frame.Y = num;
					}
				}
			}
			if (type == 352)
			{
				frameCounter += 1.0;
				if (frameCounter > 3.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y > num * 5)
				{
					frame.Y = 0;
				}
			}
			if (type == 345)
			{
				if (ai[0] == 0f)
				{
					if (ai[3] >= 0f)
					{
						frame.Y = 0;
					}
					else if (velocity.X < 0f)
					{
						frame.Y = num;
					}
					else
					{
						frame.Y = num * 2;
					}
				}
				else if (ai[0] == 1f)
				{
					frameCounter += 1.0;
					if (frameCounter > 5.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					if (frame.Y > num * 4)
					{
						frame.Y = num * 3;
					}
					if (frame.Y < num * 3)
					{
						frame.Y = num * 3;
					}
				}
				else if (ai[0] == 2f)
				{
					frame.Y = num * 5;
				}
			}
			if (type == 344)
			{
				if (velocity.X == 0f)
				{
					frameCounter += 1.0;
					if (frameCounter > 2.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					if (frame.Y > num * 9)
					{
						frame.Y = 0;
					}
				}
				else
				{
					frameCounter += 1.0;
					if (frameCounter > 3.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					if (frame.Y > num * 9)
					{
						frame.Y = 0;
					}
				}
			}
			if (type == 325)
			{
				if (velocity.X == 0f)
				{
					frameCounter += 1.0;
					if (frameCounter > 4.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					if (frame.Y > num * 4)
					{
						frame.Y = 0;
					}
				}
				else
				{
					frameCounter += 1.0;
					if (frameCounter > 4.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					if (frame.Y < num * 5)
					{
						frame.Y = num * 5;
					}
					if (frame.Y > num * 9)
					{
						frame.Y = num * 5;
					}
				}
			}
			if (type == 490)
			{
				rotation = velocity.X * 0.15f;
				frameCounter += 1.0;
				if (frameCounter > 6.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
			}
			else if (type == 266)
			{
				frameCounter += 1.0;
				if (frameCounter > 6.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
				if (ai[0] >= 0f)
				{
					if (frame.Y > num * 3)
					{
						frame.Y = 0;
					}
				}
				else
				{
					if (frame.Y < num * 4)
					{
						frame.Y = num * 4;
					}
					if (frame.Y > num * 7)
					{
						frame.Y = num * 4;
					}
				}
			}
			else if (type == 262)
			{
				frameCounter += 1.0;
				if (frameCounter > 6.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
				if (life > lifeMax / 2)
				{
					if (frame.Y > num * 3)
					{
						frame.Y = 0;
					}
				}
				else
				{
					if (frame.Y < num * 4)
					{
						frame.Y = num * 4;
					}
					if (frame.Y > num * 7)
					{
						frame.Y = num * 4;
					}
				}
			}
			else if (type >= 305 && type <= 309)
			{
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				if (velocity.Y < -3f)
				{
					frame.Y = num * 5;
				}
				else if (velocity.Y <= 0f)
				{
					frame.Y = 0;
				}
				else if (velocity.Y < 2f)
				{
					frame.Y = num * 3;
				}
				else
				{
					frame.Y = num;
				}
				rotation = velocity.X * 0.1f;
			}
			else if (type == 263)
			{
				if (velocity.X == 0f && velocity.Y == 0f)
				{
					if (frame.Y > 0)
					{
						frameCounter += 1.0;
						if (frameCounter > 4.0)
						{
							frameCounter = 0.0;
							frame.Y -= num;
						}
					}
				}
				else if (frame.Y < 2)
				{
					frameCounter += 1.0;
					if (frameCounter > 4.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
				}
			}
			else if (type == 244)
			{
				frameCounter += 1.0;
				if (num2 > 0)
				{
					frameCounter += 1.0;
				}
				if (num2 == 4)
				{
					frameCounter += 1.0;
				}
				if (frameCounter >= 8.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
			}
			else if (type == 289)
			{
				frameCounter += 1.0;
				if (frameCounter < 2.0)
				{
					frame.Y = 0;
				}
				else if (frameCounter < 3.0)
				{
					frame.Y = num;
				}
				else
				{
					frame.Y = num * 2;
					frameCounter = 0.0;
				}
				if (ai[3] == 1f)
				{
					frame.Y += num * 3;
				}
			}
			else if (type == 288)
			{
				frameCounter += 1.0;
				if (frameCounter >= 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
			}
			else if (type == 355 || type == 358)
			{
				spriteDirection = direction;
				frameCounter += 1.0;
				if (frameCounter < 4.0)
				{
					frame.Y = 0;
				}
				else
				{
					frame.Y = num;
					if (frameCounter >= 7.0)
					{
						frameCounter = 0.0;
					}
				}
				if (localAI[2] <= 0f)
				{
					frame.Y += num * 2;
				}
			}
			else if (type == 356 || type == 444)
			{
				int num88 = 7;
				rotation = velocity.X * 0.3f;
				spriteDirection = direction;
				frameCounter = frameCounter + 1.0 + (double)((Math.Abs(velocity.X) + Math.Abs(velocity.Y)) / 2f);
				if (frameCounter < (double)num88)
				{
					frame.Y = 0;
				}
				else if (frameCounter < (double)(num88 * 2))
				{
					frame.Y = num;
				}
				else if (frameCounter < (double)(num88 * 3))
				{
					frame.Y = num * 2;
				}
				else
				{
					frame.Y = num;
					if (frameCounter >= (double)(num88 * 4 - 1))
					{
						frameCounter = 0.0;
					}
				}
				if (type != 444)
				{
					frame.Y += (int)((float)(num * 3) * (ai[2] - 1f));
				}
			}
			else if (type == 357 || type == 448 || type == 484)
			{
				localAI[0] = -2f;
				if (velocity.Y == 0f)
				{
					rotation = 0f;
					if (velocity.X == 0f)
					{
						frame.Y = num;
						frameCounter = 0.0;
					}
					else
					{
						frameCounter += 1.0;
						if (frameCounter > 12.0)
						{
							frameCounter = 0.0;
							frame.Y += num;
							if (frame.Y > num)
							{
								frame.Y = 0;
							}
						}
					}
				}
				else
				{
					rotation += (float)direction * 0.1f;
					frame.Y = num;
				}
				int num89 = (int)base.Center.X / 16;
				int num90 = (int)base.position.Y / 16;
				if (WorldGen.InWorld(num89, num90) && Main.tile[num89, num90] != null)
				{
					if (Main.tile[num89, num90].slope() == 0)
					{
						num90++;
					}
					if (Main.tile[num89, num90].slope() == 1)
					{
						rotation = 0.785f;
						localAI[0] = 0f;
					}
					else if (Main.tile[num89, num90].slope() == 2)
					{
						rotation = -0.785f;
						localAI[0] = 0f;
					}
				}
			}
			else if (type >= 485 && type <= 487)
			{
				spriteDirection = direction;
				localAI[0] = -2f;
				if (velocity.Y == 0f)
				{
					rotation = 0f;
					if (velocity.X == 0f)
					{
						frame.Y = num;
						frameCounter = 0.0;
					}
					else
					{
						frameCounter += Math.Abs(velocity.X * 5f);
						if (frameCounter > 10.0)
						{
							frameCounter = 0.0;
							frame.Y += num;
							if (frame.Y > num * 3)
							{
								frame.Y = 0;
							}
						}
					}
				}
				else
				{
					rotation += (float)direction * 0.1f;
					frame.Y = num;
				}
				int num91 = (int)base.Center.X / 16;
				int num92 = (int)base.position.Y / 16;
				if (Main.tile[num91, num92] != null)
				{
					if (Main.tile[num91, num92].slope() == 0)
					{
						num92++;
					}
					if (Main.tile[num91, num92].slope() == 1)
					{
						rotation = 0.785f;
						localAI[0] = 0f;
					}
					else if (Main.tile[num91, num92].slope() == 2)
					{
						rotation = -0.785f;
						localAI[0] = 0f;
					}
				}
			}
			else if (type == 250 || type == 264 || type == 268)
			{
				frameCounter += 1.0;
				if (frameCounter >= 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
			}
			else if (type == 245)
			{
				if (ai[0] == 0f)
				{
					if (ai[1] < -16f)
					{
						frame.Y = 0;
					}
					else if (ai[1] < -12f)
					{
						frame.Y = num;
					}
					else if (ai[1] < -8f)
					{
						frame.Y = num * 2;
					}
					else if (ai[1] < -4f)
					{
						frame.Y = num * 3;
					}
					else if (ai[1] < 0f)
					{
						frame.Y = num * 4;
					}
					else
					{
						frame.Y = 0;
					}
				}
				else if (ai[0] == 1f)
				{
					frame.Y = 1;
				}
			}
			else if (type == 246)
			{
				if (ai[0] == 0f)
				{
					if (localAI[0] == 1f)
					{
						frame.Y = num;
					}
					else
					{
						frame.Y = 0;
					}
				}
				else if (ai[0] == 1f)
				{
					if (localAI[0] == 1f)
					{
						frame.Y = num;
					}
					else
					{
						frame.Y = 0;
					}
					if (localAI[1] == -1f)
					{
						frame.Y += num * 4;
					}
					if (localAI[1] == 1f)
					{
						frame.Y += num * 2;
					}
				}
			}
			else if (type == 249)
			{
				if (localAI[0] == 1f)
				{
					frame.Y = num;
				}
				else
				{
					frame.Y = 0;
				}
			}
			else if (type == 141)
			{
				spriteDirection = direction;
				if (velocity.Y != 0f)
				{
					frame.Y = num * 2;
				}
				else
				{
					frameCounter += 1.0;
					if (frameCounter >= 8.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y > num)
					{
						frame.Y = 0;
					}
				}
			}
			else if (type == 243)
			{
				if (frameCounter < 0.0)
				{
					if (velocity.Y == 0f)
					{
						frameCounter += 1.0;
						if (frameCounter < -12.0)
						{
							if (frame.Y > num * 9)
							{
								frame.Y = num * 11;
							}
						}
						else if (frameCounter < -6.0)
						{
							if (frame.Y > num * 9)
							{
								frame.Y = num * 12;
							}
						}
						else if (frameCounter < 0.0)
						{
							frameCounter = 0.0;
							if (frame.Y > num * 9)
							{
								frame.Y = num * 11;
							}
						}
					}
					else
					{
						frameCounter = -18.0;
						if (velocity.Y < 0f)
						{
							frame.Y = num * 14;
						}
						else
						{
							frame.Y = num * 13;
						}
					}
				}
				else
				{
					spriteDirection = direction;
					frameCounter += Math.Abs(velocity.X * 1.1f);
					if (frameCounter >= 6.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
						if (frame.Y > num * 9)
						{
							frame.Y = 0;
						}
					}
					if (velocity.Y < -2f || velocity.Y > 5f)
					{
						frameCounter = -18.0;
					}
				}
			}
			else if (type == 222)
			{
				frameCounter += 1.0;
				if (localAI[0] == 1f)
				{
					if (frameCounter > 4.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y >= num * 4)
					{
						frame.Y = 0;
					}
				}
				else
				{
					if (frameCounter > 4.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y < num * 4)
					{
						frame.Y = num * 4;
					}
					if (frame.Y >= num * 12)
					{
						frame.Y = num * 4;
					}
				}
			}
			else if (type == 164 || type == 239 || type == 530)
			{
				if (velocity.Y != 0f)
				{
					frameCounter = 0.0;
					if (velocity.Y < 0f)
					{
						frame.Y = num * 4;
					}
					else
					{
						frame.Y = 0;
					}
				}
				else
				{
					spriteDirection = direction;
					frameCounter += Math.Abs(velocity.X) * 1.1f;
					if (frameCounter < 6.0)
					{
						frame.Y = num;
					}
					else if (frameCounter < 12.0)
					{
						frame.Y = num * 2;
					}
					else if (frameCounter < 18.0)
					{
						frame.Y = num * 3;
					}
					else
					{
						frameCounter = 0.0;
					}
				}
			}
			else if (type == 236)
			{
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				else
				{
					frame.Y = 0;
				}
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter > 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y > num || velocity.Y != 0f)
				{
					frame.Y = 0;
				}
			}
			else if (type == 165 || type == 237 || type == 238 || type == 240 || type == 531)
			{
				float num93 = 0.5f;
				if (type == 531)
				{
					num93 = 0.4f;
				}
				frameCounter += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * num93;
				if (frameCounter < 6.0)
				{
					frame.Y = 0;
				}
				else if (frameCounter < 12.0)
				{
					frame.Y = num;
				}
				else if (frameCounter < 18.0)
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < 24.0)
				{
					frame.Y = num * 3;
				}
				else
				{
					frameCounter = 0.0;
				}
			}
			else if (type == 195)
			{
				if (ai[0] < 3f)
				{
					frame.Y = 0;
				}
				else if (ai[0] < 6f)
				{
					frame.Y = num;
				}
				else if (ai[0] < 9f)
				{
					frame.Y = num * 2;
				}
				else if (ai[0] < 12f)
				{
					frame.Y = num * 3;
				}
				else if (ai[0] < 15f)
				{
					frame.Y = num * 4;
				}
				else
				{
					frame.Y = num * 5;
				}
			}
			else if (type == 174)
			{
				if (velocity.Y == 0f)
				{
					frame.Y = 0;
				}
				else if ((double)velocity.Y < -1.5)
				{
					frame.Y = num;
				}
				else if ((double)velocity.Y > 1.5)
				{
					frame.Y = num * 3;
				}
				else
				{
					frame.Y = num * 2;
				}
			}
			else if (type == 177)
			{
				if (velocity.Y == 0f)
				{
					frameCounter += 1.0;
					if (frameCounter >= 10.0)
					{
						frameCounter = 30.0;
						frame.Y = 0;
					}
					else
					{
						frame.Y = num;
					}
				}
				else if (velocity.Y < 0f)
				{
					frame.Y = num * 2;
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num * 2;
				}
			}
			else if (type == 163)
			{
				if (velocity.Y != 0f)
				{
					frameCounter = -12.0;
					if (velocity.Y < 0f)
					{
						frame.Y = num * 5;
					}
					else
					{
						frame.Y = num * 6;
					}
				}
				else
				{
					spriteDirection = direction;
					frameCounter += Math.Abs(velocity.X) * 1.1f;
					if (frameCounter < -6.0)
					{
						frame.Y = num * 6;
					}
					else if (frameCounter < 0.0)
					{
						frame.Y = num * 7;
					}
					else if (frameCounter < 6.0)
					{
						frame.Y = num;
					}
					else if (frameCounter < 12.0)
					{
						frame.Y = num * 2;
					}
					else if (frameCounter < 18.0)
					{
						frame.Y = num * 3;
					}
					else
					{
						frameCounter = 0.0;
					}
				}
			}
			else if (type == 143)
			{
				if (velocity.Y > 0f)
				{
					frameCounter += 1.0;
				}
				else if (velocity.Y < 0f)
				{
					frameCounter -= 1.0;
				}
				if (frameCounter < 6.0)
				{
					frame.Y = num;
				}
				else if (frameCounter < 12.0)
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < 18.0)
				{
					frame.Y = num * 3;
				}
				if (frameCounter < 0.0)
				{
					frameCounter = 0.0;
				}
				if (frameCounter > 17.0)
				{
					frameCounter = 17.0;
				}
			}
			else if (type == 144)
			{
				if (velocity.X == 0f && velocity.Y == 0f)
				{
					localAI[3] += 1f;
					if (localAI[3] < 6f)
					{
						frame.Y = 0;
					}
					else if (localAI[3] < 12f)
					{
						frame.Y = num;
					}
					if (localAI[3] >= 11f)
					{
						localAI[3] = 0f;
					}
				}
				else
				{
					if (velocity.Y > 0f)
					{
						frameCounter += 1.0;
					}
					else if (velocity.Y < 0f)
					{
						frameCounter -= 1.0;
					}
					if (frameCounter < 6.0)
					{
						frame.Y = num * 2;
					}
					else if (frameCounter < 12.0)
					{
						frame.Y = num * 3;
					}
					else if (frameCounter < 18.0)
					{
						frame.Y = num * 4;
					}
					if (frameCounter < 0.0)
					{
						frameCounter = 0.0;
					}
					if (frameCounter > 17.0)
					{
						frameCounter = 17.0;
					}
				}
			}
			else if (type == 145)
			{
				if (velocity.X == 0f && velocity.Y == 0f)
				{
					if (ai[2] < 4f)
					{
						frame.Y = 0;
					}
					else if (ai[2] < 8f)
					{
						frame.Y = num;
					}
					else if (ai[2] < 12f)
					{
						frame.Y = num * 2;
					}
					else if (ai[2] < 16f)
					{
						frame.Y = num * 3;
					}
				}
				else
				{
					if (velocity.Y > 0f)
					{
						frameCounter += 1.0;
					}
					else if (velocity.Y < 0f)
					{
						frameCounter -= 1.0;
					}
					if (frameCounter < 6.0)
					{
						frame.Y = num * 4;
					}
					else if (frameCounter < 12.0)
					{
						frame.Y = num * 5;
					}
					else if (frameCounter < 18.0)
					{
						frame.Y = num * 6;
					}
					if (frameCounter < 0.0)
					{
						frameCounter = 0.0;
					}
					if (frameCounter > 17.0)
					{
						frameCounter = 17.0;
					}
				}
			}
			else if (type == 50)
			{
				if (velocity.Y != 0f)
				{
					if (frame.Y < num * 4)
					{
						frame.Y = num * 4;
						frameCounter = 0.0;
					}
					if ((frameCounter += 1.0) >= 4.0)
					{
						frame.Y = num * 5;
					}
				}
				else
				{
					if (frame.Y >= num * 5)
					{
						frame.Y = num * 4;
						frameCounter = 0.0;
					}
					frameCounter += 1.0;
					if (num2 > 0)
					{
						frameCounter += 1.0;
					}
					if (num2 == 4)
					{
						frameCounter += 1.0;
					}
					if (frameCounter >= 8.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
						if (frame.Y >= num * 4)
						{
							frame.Y = 0;
						}
					}
				}
			}
			else if (type == 170 || type == 171 || type == 180)
			{
				spriteDirection = direction;
				frameCounter += 1.0;
				if (frameCounter >= 4.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * 14)
				{
					frame.Y = 0;
				}
			}
			else if (type == 135)
			{
				if (ai[2] == 0f)
				{
					frame.Y = 0;
				}
				else
				{
					frame.Y = num;
				}
			}
			else if (type == 85 || type == 341)
			{
				if (ai[0] == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
				else
				{
					int num94 = 3;
					if (velocity.Y == 0f)
					{
						frameCounter -= 1.0;
					}
					else
					{
						frameCounter += 1.0;
					}
					if (frameCounter < 0.0)
					{
						frameCounter = 0.0;
					}
					if (frameCounter > (double)(num94 * 4))
					{
						frameCounter = num94 * 4;
					}
					if (frameCounter < (double)num94)
					{
						frame.Y = num;
					}
					else if (frameCounter < (double)(num94 * 2))
					{
						frame.Y = num * 2;
					}
					else if (frameCounter < (double)(num94 * 3))
					{
						frame.Y = num * 3;
					}
					else if (frameCounter < (double)(num94 * 4))
					{
						frame.Y = num * 4;
					}
					else if (frameCounter < (double)(num94 * 5))
					{
						frame.Y = num * 5;
					}
					else if (frameCounter < (double)(num94 * 6))
					{
						frame.Y = num * 4;
					}
					else if (frameCounter < (double)(num94 * 7))
					{
						frame.Y = num * 3;
					}
					else
					{
						frame.Y = num * 2;
						if (frameCounter >= (double)(num94 * 8))
						{
							frameCounter = num94;
						}
					}
				}
				if (ai[3] == 2f)
				{
					frame.Y += num * 6;
				}
				else if (ai[3] == 3f)
				{
					frame.Y += num * 12;
				}
				else if (ai[3] == 4f)
				{
					frame.Y += num * 18;
				}
			}
			else if (type == 113 || type == 114)
			{
				if (ai[2] == 0f)
				{
					frameCounter += 1.0;
					if (frameCounter >= 12.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y >= num * Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				else
				{
					frame.Y = 0;
					frameCounter = -60.0;
				}
			}
			else if (type == 61)
			{
				spriteDirection = direction;
				rotation = velocity.X * 0.1f;
				if (velocity.X == 0f && velocity.Y == 0f)
				{
					frame.Y = 0;
					frameCounter = 0.0;
				}
				else
				{
					frameCounter += 1.0;
					if (frameCounter < 4.0)
					{
						frame.Y = num;
					}
					else
					{
						frame.Y = num * 2;
						if (frameCounter >= 7.0)
						{
							frameCounter = 0.0;
						}
					}
				}
			}
			else if (type == 252 || type == 301)
			{
				if (type == 301)
				{
					if (velocity.Y == 0f)
					{
						spriteDirection = -direction;
					}
					else
					{
						if ((double)velocity.X > 0.5)
						{
							spriteDirection = -1;
						}
						if ((double)velocity.X < -0.5)
						{
							spriteDirection = 1;
						}
					}
				}
				else
				{
					if ((double)velocity.X > 0.5)
					{
						spriteDirection = 1;
					}
					if ((double)velocity.X < -0.5)
					{
						spriteDirection = -1;
					}
				}
				rotation = velocity.X * 0.1f;
				if (velocity.X == 0f && velocity.Y == 0f)
				{
					frame.Y = 0;
					frameCounter = 0.0;
				}
				else
				{
					frameCounter += 1.0;
					if (frameCounter > 4.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					if (frame.Y > num * 4 || frame.Y == 0)
					{
						frame.Y = num;
					}
				}
			}
			else if (type == 122)
			{
				spriteDirection = direction;
				rotation = velocity.X * 0.05f;
				if (ai[3] > 0f)
				{
					int num95 = (int)(ai[3] / 8f);
					frameCounter = 0.0;
					frame.Y = (num95 + 3) * num;
				}
				else
				{
					frameCounter += 1.0;
					if (frameCounter >= 8.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y >= num * 3)
					{
						frame.Y = 0;
					}
				}
			}
			else if (type == 74 || type == 297 || type == 298 || type == 442)
			{
				spriteDirection = direction;
				rotation = velocity.X * 0.1f;
				if (velocity.X == 0f && velocity.Y == 0f)
				{
					frame.Y = num * 4;
					frameCounter = 0.0;
				}
				else
				{
					frameCounter += 1.0;
					if (frameCounter >= 4.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y >= num * Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
			}
			else if (type == 362 || type == 364)
			{
				spriteDirection = direction;
				if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
				else
				{
					frameCounter += 1.0;
					if (frameCounter >= 4.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y >= num * 10)
					{
						frame.Y = num * 3;
					}
					if (frame.Y < num * 3)
					{
						frame.Y = num * 3;
					}
				}
			}
			else if (type == 363 || type == 365)
			{
				spriteDirection = direction;
				if (wet)
				{
					frameCounter += 1.0;
					if (frameCounter >= 8.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y > num * 2)
					{
						frame.Y = num;
					}
					if (frame.Y < num)
					{
						frame.Y = num;
					}
					rotation = 0f;
				}
				else if (velocity.X == 0f && velocity.Y == 0f)
				{
					frame.Y = num;
					frameCounter = 0.0;
					rotation = 0f;
				}
				else
				{
					rotation = velocity.X * 0.1f;
					frameCounter += 1.0;
					if (frameCounter >= 4.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y >= num * Main.npcFrameCount[type])
					{
						frame.Y = num * 11;
					}
					if (frame.Y < num * 11)
					{
						frame.Y = num * 11;
					}
				}
			}
			else if (type == 62 || type == 66)
			{
				spriteDirection = direction;
				rotation = velocity.X * 0.1f;
				frameCounter += 1.0;
				if (frameCounter < 6.0)
				{
					frame.Y = 0;
				}
				else
				{
					frame.Y = num;
					if (frameCounter >= 11.0)
					{
						frameCounter = 0.0;
					}
				}
			}
			else if (type == 156)
			{
				spriteDirection = direction;
				rotation = velocity.X * 0.1f;
				frameCounter += 1.0;
				if (frameCounter >= 20.0)
				{
					frameCounter = 0.0;
				}
				int num96 = (int)frameCounter / 4;
				frame.Y = num96 * num;
			}
			else if (type == 63 || type == 64 || type == 103 || type == 242 || type == 256)
			{
				if ((type == 63 || type == 64 || type == 103 || type == 242) && ai[1] == 1f)
				{
					frameCounter += 1.0;
					if (frameCounter > 4.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					if (frame.Y > num * 6)
					{
						frame.Y = num * 4;
					}
					if (frame.Y < num * 4)
					{
						frame.Y = num * 4;
					}
					return;
				}
				frameCounter += 1.0;
				if (frameCounter < 6.0)
				{
					frame.Y = 0;
				}
				else if (frameCounter < 12.0)
				{
					frame.Y = num;
				}
				else if (frameCounter < 18.0)
				{
					frame.Y = num * 2;
				}
				else
				{
					frame.Y = num * 3;
					if (frameCounter >= 23.0)
					{
						frameCounter = 0.0;
					}
				}
			}
			else if (type == 221)
			{
				if (localAI[2] == 1f)
				{
					if (localAI[0] == 1f)
					{
						frame.Y = 0;
						localAI[0] = 0f;
					}
					frameCounter += 1.0;
					if (frameCounter >= 8.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y >= num * Main.npcFrameCount[type])
					{
						frame.Y = num * Main.npcFrameCount[type] - num;
					}
				}
				else
				{
					frameCounter += 1.0;
					if (frameCounter >= 13.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y >= num * Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
			}
			else if (type == 2 || type == 23 || type == 121 || type == 169 || type == 190 || type == 191 || type == 192 || type == 193 || type == 194 || type == 317 || type == 318)
			{
				if (type == 2 || type == 190 || type == 191 || type == 192 || type == 193 || type == 194 || type == 317 || type == 318)
				{
					if (velocity.X > 0f)
					{
						spriteDirection = 1;
						rotation = (float)Math.Atan2(velocity.Y, velocity.X);
					}
					if (velocity.X < 0f)
					{
						spriteDirection = -1;
						rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 3.14f;
					}
				}
				else if (type == 2 || type == 121)
				{
					if (velocity.X > 0f)
					{
						spriteDirection = 1;
					}
					if (velocity.X < 0f)
					{
						spriteDirection = -1;
					}
					rotation = velocity.X * 0.1f;
				}
				frameCounter += 1.0;
				if (frameCounter >= 8.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
			}
			else if (type == 133)
			{
				if (velocity.X > 0f)
				{
					spriteDirection = 1;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X);
				}
				if (velocity.X < 0f)
				{
					spriteDirection = -1;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 3.14f;
				}
				frameCounter += 1.0;
				if (frameCounter >= 8.0)
				{
					frame.Y = num;
				}
				else
				{
					frame.Y = 0;
				}
				if (frameCounter >= 16.0)
				{
					frame.Y = 0;
					frameCounter = 0.0;
				}
				if ((double)life < (double)lifeMax * 0.5)
				{
					frame.Y += num * 2;
				}
			}
			else if (type == 116)
			{
				if (velocity.X > 0f)
				{
					spriteDirection = 1;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X);
				}
				if (velocity.X < 0f)
				{
					spriteDirection = -1;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 3.14f;
				}
				frameCounter += 1.0;
				if (frameCounter >= 5.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
			}
			else if (type == 75)
			{
				if (velocity.X > 0f)
				{
					spriteDirection = 1;
				}
				else
				{
					spriteDirection = -1;
				}
				rotation = velocity.X * 0.1f;
				frameCounter += 1.0;
				if (frameCounter >= 4.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
			}
			else if (type == 157)
			{
				spriteDirection = direction;
				frameCounter += 1.0;
				if (!wet)
				{
					frameCounter += 1.0;
				}
				int num97 = 5;
				if (frameCounter < (double)num97)
				{
					frame.Y = 0;
				}
				else if (frameCounter < (double)(num97 * 2))
				{
					frame.Y = num;
				}
				else if (frameCounter < (double)(num97 * 3))
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < (double)(num97 * 4))
				{
					frame.Y = num;
				}
				else if (frameCounter < (double)(num97 * 5))
				{
					frame.Y = num * 3;
				}
				else if (frameCounter < (double)(num97 * 6))
				{
					frame.Y = num * 4;
				}
				else if (frameCounter < (double)(num97 * 7))
				{
					frame.Y = num * 5;
				}
				else if (frameCounter < (double)(num97 * 8))
				{
					frame.Y = num * 4;
				}
				else
				{
					frameCounter = 0.0;
				}
			}
			else if (type == 55 || type == 57 || type == 58 || type == 102 || type == 241 || type == 465)
			{
				spriteDirection = direction;
				frameCounter += 1.0;
				if (wet)
				{
					if (frameCounter < 6.0)
					{
						frame.Y = 0;
					}
					else if (frameCounter < 12.0)
					{
						frame.Y = num;
					}
					else if (frameCounter < 18.0)
					{
						frame.Y = num * 2;
					}
					else if (frameCounter < 24.0)
					{
						frame.Y = num * 3;
					}
					else
					{
						frameCounter = 0.0;
					}
				}
				else if (frameCounter < 6.0)
				{
					frame.Y = num * 4;
				}
				else if (frameCounter < 12.0)
				{
					frame.Y = num * 5;
				}
				else
				{
					frameCounter = 0.0;
				}
			}
			else if (type == 69)
			{
				if (ai[0] < 190f)
				{
					frameCounter += 1.0;
					if (frameCounter >= 6.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
						if (frame.Y / num >= Main.npcFrameCount[type] - 1)
						{
							frame.Y = 0;
						}
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num * (Main.npcFrameCount[type] - 1);
				}
			}
			else if (type == 155)
			{
				if (velocity.Y > 0f)
				{
					frame.Y = num * 4;
					frameCounter = 0.0;
				}
				else if (velocity.Y < 0f)
				{
					frame.Y = num * 6;
					frameCounter = 0.0;
				}
				else
				{
					spriteDirection = direction;
					frameCounter += Math.Abs(velocity.X) * 0.4f;
					if ((direction > 0 && velocity.X < 0f) || (direction < 0 && velocity.X > 0f))
					{
						frameCounter = 0.0;
						frame.Y = 0;
					}
					else if (frameCounter < 8.0)
					{
						frame.Y = num * 3;
					}
					else if (frameCounter < 16.0)
					{
						frame.Y = num * 6;
					}
					else if (frameCounter < 24.0)
					{
						frame.Y = num * 4;
					}
					else if (frameCounter < 32.0)
					{
						frame.Y = num * 5;
					}
					else
					{
						frameCounter = 0.0;
					}
				}
			}
			else if (type == 329)
			{
				if (velocity.Y > 0f)
				{
					frame.Y = num * 3;
					frameCounter = 0.0;
				}
				else if (velocity.Y < 0f)
				{
					frame.Y = num * 2;
					frameCounter = 0.0;
				}
				else
				{
					spriteDirection = direction;
					frameCounter += Math.Abs(velocity.X) * 0.4f;
					if (frameCounter > 4.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
						if (frame.Y < num * 2)
						{
							frame.Y = num * 2;
						}
						if (frame.Y > num * 9)
						{
							frame.Y = num * 2;
						}
					}
				}
			}
			else if (type == 86)
			{
				if (velocity.Y == 0f || wet)
				{
					if (velocity.X < -2f)
					{
						spriteDirection = -1;
					}
					else if (velocity.X > 2f)
					{
						spriteDirection = 1;
					}
					else
					{
						spriteDirection = direction;
					}
				}
				if (velocity.Y != 0f)
				{
					frame.Y = num * 15;
					frameCounter = 0.0;
				}
				else if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
				else if (Math.Abs(velocity.X) < 3f)
				{
					frameCounter += Math.Abs(velocity.X);
					if (frameCounter >= 6.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
						if (frame.Y / num >= 9)
						{
							frame.Y = num;
						}
						if (frame.Y / num <= 0)
						{
							frame.Y = num;
						}
					}
				}
				else
				{
					frameCounter += Math.Abs(velocity.X);
					if (frameCounter >= 10.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
						if (frame.Y / num >= 15)
						{
							frame.Y = num * 9;
						}
						if (frame.Y / num <= 8)
						{
							frame.Y = num * 9;
						}
					}
				}
			}
			else if (type == 315)
			{
				if (velocity.Y == 0f || wet)
				{
					if (velocity.X < -1f)
					{
						spriteDirection = -1;
					}
					else if (velocity.X > 1f)
					{
						spriteDirection = 1;
					}
					else
					{
						spriteDirection = direction;
					}
				}
				if (velocity.Y != 0f)
				{
					frame.Y = 0;
					frameCounter = 0.0;
				}
				else
				{
					frameCounter += Math.Abs(velocity.X);
					if (frameCounter >= 8.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
						if (frame.Y / num > 10)
						{
							frame.Y = num;
						}
					}
				}
			}
			else if (type == 127)
			{
				if (ai[1] == 0f)
				{
					frameCounter += 1.0;
					if (frameCounter >= 12.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
						if (frame.Y / num >= 2)
						{
							frame.Y = 0;
						}
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num * 2;
				}
			}
			else if (type == 129)
			{
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				frameCounter += 1.0;
				if (frameCounter >= 2.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
			}
			else if (type == 130)
			{
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				frameCounter += 1.0;
				if (frameCounter >= 8.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
			}
			else if (type == 67 || type == 217 || type == 218 || type == 219)
			{
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				frameCounter += 1.0;
				if (frameCounter >= 6.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
			}
			else if (type == 220)
			{
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				frameCounter += 1.0;
				if (frameCounter >= 10.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
			}
			else if (type == 109)
			{
				if (velocity.Y == 0f && ((velocity.X <= 0f && direction < 0) || (velocity.X >= 0f && direction > 0)))
				{
					spriteDirection = direction;
				}
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter >= 7.0)
				{
					frameCounter -= 7.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
			}
			else if (type == 83 || type == 84 || type == 179)
			{
				if (ai[0] == 2f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
				else
				{
					frameCounter += 1.0;
					if (frameCounter >= 4.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
						if (frame.Y / num >= Main.npcFrameCount[type])
						{
							frame.Y = 0;
						}
					}
				}
			}
			else if (type == 72)
			{
				frameCounter += 1.0;
				if (frameCounter >= 3.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
			}
			else if (type == 65)
			{
				spriteDirection = direction;
				frameCounter += 1.0;
				if (wet)
				{
					if (frameCounter < 6.0)
					{
						frame.Y = 0;
					}
					else if (frameCounter < 12.0)
					{
						frame.Y = num;
					}
					else if (frameCounter < 18.0)
					{
						frame.Y = num * 2;
					}
					else if (frameCounter < 24.0)
					{
						frame.Y = num * 3;
					}
					else
					{
						frameCounter = 0.0;
					}
				}
			}
			else if (type == 224)
			{
				if (velocity.X > 0f)
				{
					spriteDirection = 1;
					rotation = velocity.Y * 0.2f;
				}
				if (velocity.X < 0f)
				{
					spriteDirection = -1;
					rotation = (0f - velocity.Y) * 0.2f;
				}
				frameCounter += 1.0;
				if (frameCounter >= 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * 4)
				{
					frame.Y = 0;
				}
			}
			else if (type == 150 || type == 151 || type == 152 || type == 158 || type == 226)
			{
				if (velocity.X > 0f)
				{
					spriteDirection = 1;
				}
				if (velocity.X < 0f)
				{
					spriteDirection = -1;
				}
				rotation = velocity.X * 0.1f;
				frameCounter += 1.0;
				if (frameCounter >= 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * 4)
				{
					frame.Y = 0;
				}
			}
			else if (type == 48 || type == 49 || type == 51 || type == 60 || type == 82 || type == 93 || type == 137 || type == 182 || type == 210 || type == 211 || type == 253 || type == 316)
			{
				if (velocity.X > 0f)
				{
					spriteDirection = 1;
				}
				if (velocity.X < 0f)
				{
					spriteDirection = -1;
				}
				rotation = velocity.X * 0.1f;
				if (type == 210 || type == 211)
				{
					frameCounter += 1.0;
					rotation = velocity.X * 0.2f;
				}
				frameCounter += 1.0;
				if (frameCounter >= 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
			}
			else if (type == 330)
			{
				if (velocity.X > 0f)
				{
					spriteDirection = 1;
				}
				if (velocity.X < 0f)
				{
					spriteDirection = -1;
				}
				rotation = velocity.X * 0.15f;
				frameCounter += 1.0;
				if (frameCounter >= 8.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
			}
			else if (type == 42 || (type >= 231 && type <= 235))
			{
				frameCounter += 1.0;
				if (frameCounter < 2.0)
				{
					frame.Y = 0;
				}
				else if (frameCounter < 4.0)
				{
					frame.Y = num;
				}
				else if (frameCounter < 6.0)
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < 8.0)
				{
					frame.Y = num;
				}
				else
				{
					frameCounter = 0.0;
				}
			}
			else if (type == 205)
			{
				frameCounter += 0.5;
				if (frameCounter < 2.0)
				{
					frame.Y = 0;
				}
				else if (frameCounter < 4.0)
				{
					frame.Y = num;
				}
				else if (frameCounter < 6.0)
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < 8.0)
				{
					frame.Y = num;
				}
				else
				{
					frameCounter = 0.0;
				}
			}
			else if (type == 176)
			{
				frameCounter += 1.0;
				if (frameCounter > 4.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y > num)
				{
					frame.Y = 0;
				}
			}
			else if (type == 43 || type == 56 || type == 175)
			{
				frameCounter += 1.0;
				if (frameCounter < 6.0)
				{
					frame.Y = 0;
				}
				else if (frameCounter < 12.0)
				{
					frame.Y = num;
				}
				else if (frameCounter < 18.0)
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < 24.0)
				{
					frame.Y = num;
				}
				if (frameCounter == 23.0)
				{
					frameCounter = 0.0;
				}
			}
			else if (type == 115)
			{
				frameCounter += 1.0;
				if (frameCounter < 3.0)
				{
					frame.Y = 0;
				}
				else if (frameCounter < 6.0)
				{
					frame.Y = num;
				}
				else if (frameCounter < 12.0)
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < 15.0)
				{
					frame.Y = num;
				}
				if (frameCounter == 15.0)
				{
					frameCounter = 0.0;
				}
			}
			else if (type == 101)
			{
				frameCounter += 1.0;
				if (frameCounter > 6.0)
				{
					frame.Y += num * 2;
					frameCounter = 0.0;
				}
				if (frame.Y > num * 2)
				{
					frame.Y = 0;
				}
			}
			if (type == 199)
			{
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
				}
				if (frame.Y < num * 3)
				{
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
				}
				else
				{
					if (velocity.Y != 0f)
					{
						return;
					}
					frameCounter += Math.Abs(velocity.X);
					if (frameCounter > 12.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
						if (frame.Y > num * 7)
						{
							frame.Y = num * 3;
						}
					}
				}
			}
			else if (type == 467)
			{
				if (ai[0] == 1f)
				{
					frameCounter += 1.0;
					if (frameCounter > 4.0)
					{
						frameCounter = 0.0;
						if (frame.Y < num * 6)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
					}
					return;
				}
				frameCounter += 1.0;
				if (frameCounter > 4.0)
				{
					frameCounter = 0.0;
					if (frame.Y > num * 3)
					{
						frame.Y = num * 3;
					}
					if (frame.Y > 0)
					{
						frame.Y -= num;
						frameCounter = 0.0;
					}
				}
			}
			else if (type == 480)
			{
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (ai[2] < 0f)
					{
						frameCounter += 1.0;
						if (frameCounter > 3.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y >= Main.npcFrameCount[type] * num)
						{
							frame.Y = num * 21;
						}
						else if (frame.Y < num * 21)
						{
							frame.Y = num * 21;
						}
					}
					else if (velocity.X == 0f)
					{
						frameCounter += 1.0;
						if (frameCounter > 4.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y / num > 7)
						{
							frame.Y = 0;
						}
					}
					else
					{
						frameCounter += 1f + Math.Abs(velocity.X);
						if (frameCounter > 6.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y / num >= Main.npcFrameCount[type] - 4)
						{
							frame.Y = num * 10;
						}
						else if (frame.Y / num < 10)
						{
							frame.Y = num * 10;
						}
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num * 8;
				}
			}
			else if (type == 483)
			{
				if (ai[0] == -1f)
				{
					frameCounter += 1.0;
					if (frameCounter > 4.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y > num * 21)
					{
						frame.Y = num * 21;
					}
					else if (frame.Y < num * 13)
					{
						frame.Y = num * 13;
					}
					rotation += velocity.X * 0.2f;
				}
				else
				{
					frameCounter += 1.0;
					if (frameCounter > 4.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y > num * 11)
					{
						frame.Y = 0;
					}
					rotation = velocity.X * 0.1f;
				}
			}
			else if (type == 482)
			{
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (ai[2] < 0f)
					{
						frameCounter += 1.0;
						if (frameCounter > 3.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y >= Main.npcFrameCount[type] * num)
						{
							frame.Y = num * 11;
						}
						else if (frame.Y < num * 11)
						{
							frame.Y = num * 11;
						}
					}
					else if (velocity.X == 0f)
					{
						frameCounter += 1.0;
						frame.Y = 0;
					}
					else
					{
						frameCounter += 0.2f + Math.Abs(velocity.X);
						if (frameCounter > 8.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y / num >= Main.npcFrameCount[type] - 10)
						{
							frame.Y = num * 2;
						}
						else if (frame.Y / num < 2)
						{
							frame.Y = num * 2;
						}
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
			}
			else if (type == 461)
			{
				if (wet)
				{
					if (velocity.X < 0f)
					{
						direction = -1;
					}
					if (velocity.X > 0f)
					{
						direction = 1;
					}
					if (spriteDirection != direction)
					{
						rotation *= -1f;
						spriteDirection = direction;
					}
					float num98 = (float)Math.Atan2(velocity.Y * (float)direction, velocity.X * (float)direction);
					if ((double)Math.Abs(rotation - num98) >= 3.14)
					{
						if (num98 < rotation)
						{
							rotation -= 6.28f;
						}
						else
						{
							rotation += 6.28f;
						}
					}
					rotation = (rotation * 4f + num98) / 5f;
					frameCounter += Math.Abs(velocity.Length());
					frameCounter += 1.0;
					if (frameCounter > 8.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num > 20)
					{
						frame.Y = num * 16;
					}
					else if (frame.Y / num < 16)
					{
						frame.Y = num * 19;
					}
					return;
				}
				if ((double)rotation > 3.14)
				{
					rotation -= 6.28f;
				}
				if ((double)rotation > -0.01 && (double)rotation < 0.01)
				{
					rotation = 0f;
				}
				else
				{
					rotation *= 0.9f;
				}
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
						return;
					}
					frameCounter += Math.Abs(velocity.X) * 2f;
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num > 15)
					{
						frame.Y = num * 2;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
			}
			else if (type == 466)
			{
				if (ai[2] <= 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (ai[2] == 0f)
					{
						frame.Y = 0;
					}
					else if (ai[2] < -8f)
					{
						frame.Y = num;
					}
					else
					{
						frame.Y = num * 2;
					}
				}
				else if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frame.Y = num * 2;
						frameCounter = 0.0;
						return;
					}
					frameCounter += Math.Abs(velocity.X) * 2f;
					frameCounter += 1.0;
					if (frameCounter > 7.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num > 17)
					{
						frame.Y = num * 4;
					}
					if (frame.Y / num < 4)
					{
						frame.Y = num * 4;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num * 3;
				}
			}
			else if (type == 471)
			{
				bool flag5 = false;
				if (ai[3] < 0f)
				{
					flag5 = true;
				}
				if (flag5)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					frameCounter += Math.Abs(velocity.Length()) * 0.5f;
					frameCounter += 1.0;
					if (frameCounter < 6.0)
					{
						frame.Y = num * 17;
						return;
					}
					if (frameCounter < 12.0)
					{
						frame.Y = num * 18;
						return;
					}
					if (frameCounter < 18.0)
					{
						frame.Y = num * 19;
						return;
					}
					if (frameCounter < 23.0)
					{
						frame.Y = num * 18;
						return;
					}
					frame.Y = num * 18;
					frameCounter = 0.0;
				}
				else if (ai[3] == 1f)
				{
					frame.Y = num * 16;
					frameCounter = 0.0;
				}
				else if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
						return;
					}
					frameCounter += Math.Abs(velocity.X) * 2f;
					frameCounter += 1.0;
					if (frameCounter > 7.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num > 15)
					{
						frame.Y = num * 2;
					}
					if (frame.Y / num < 2)
					{
						frame.Y = num * 2;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
			}
			else if (type == 166)
			{
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frameCounter += 2.0;
						if (frameCounter > 7.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y / num > 5)
						{
							frame.Y = 0;
						}
						return;
					}
					frameCounter += Math.Abs(velocity.X);
					frameCounter += 1.0;
					if (frameCounter > 9.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num > 12)
					{
						frame.Y = num * 7;
					}
					if (frame.Y / num < 7)
					{
						frame.Y = num * 7;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num * 6;
				}
			}
			else if (type == 469)
			{
				if (ai[2] == 1f)
				{
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
					if (velocity.X < 0f)
					{
						direction = -1;
					}
					if (velocity.X > 0f)
					{
						direction = 1;
					}
					spriteDirection = direction;
					frameCounter += Math.Abs(velocity.Length());
					if (frameCounter > 11.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num > 5)
					{
						frame.Y = num * 2;
					}
					if (frame.Y / num < 2)
					{
						frame.Y = num * 2;
					}
					return;
				}
				rotation = 0f;
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frameCounter = 0.0;
						frame.Y = 0;
						return;
					}
					frameCounter += Math.Abs(velocity.X);
					frameCounter += 1.0;
					if (frameCounter > 9.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num > 11)
					{
						frame.Y = num * 6;
					}
					if (frame.Y / num < 6)
					{
						frame.Y = num * 6;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
			}
			else if (type == 351)
			{
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
						return;
					}
					frameCounter += Math.Abs(velocity.X) * 1f;
					frameCounter += 1.0;
					if (frameCounter > 8.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 2;
					}
				}
				else
				{
					if (velocity.Y < 0f)
					{
						frame.Y = num;
					}
					else
					{
						frame.Y = num;
					}
					frameCounter = 0.0;
				}
			}
			else if (type == 343)
			{
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frame.Y = num * 2;
						frameCounter = 0.0;
						return;
					}
					frameCounter += Math.Abs(velocity.X) * 1f;
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 2;
					}
				}
				else
				{
					if (velocity.Y < 0f)
					{
						frame.Y = 0;
					}
					else
					{
						frame.Y = num;
					}
					frameCounter = 0.0;
				}
			}
			else if (type >= 269 && type <= 280)
			{
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						if (type == 140)
						{
							frame.Y = num;
							frameCounter = 0.0;
						}
						else
						{
							frame.Y = 0;
							frameCounter = 0.0;
						}
						return;
					}
					frameCounter += Math.Abs(velocity.X) * 2f;
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 2;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
			}
			else if (type == 230)
			{
				if (velocity.Y == 0f)
				{
					rotation = 0f;
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
						return;
					}
					frameCounter += Math.Abs(velocity.X) * 2f;
					frameCounter += 1.0;
					if (frameCounter > 10.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = 0;
					if (velocity.Y > 4f)
					{
						rotation -= velocity.Y * 0.01f;
					}
				}
			}
			else if (type == 290)
			{
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (ai[2] > 0f)
					{
						if (ai[1] < 10f)
						{
							frame.Y = num * 11;
						}
						else if (ai[1] < 20f)
						{
							frame.Y = num * 10;
						}
						else
						{
							frame.Y = num * 9;
						}
						return;
					}
					if (velocity.X == 0f)
					{
						frameCounter = 0.0;
						frame.Y = 0;
						return;
					}
					if (frame.Y < num * 2)
					{
						frame.Y = num * 2;
					}
					frameCounter += Math.Abs(velocity.X) * 1f;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y > num * 8)
					{
						frame.Y = num * 2;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
			}
			else if (type == 110 || type == 214 || type == 215 || type == 216 || type == 291 || type == 292 || type == 293)
			{
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (ai[2] > 0f)
					{
						spriteDirection = direction;
						frame.Y = num * (int)ai[2];
						frameCounter = 0.0;
						return;
					}
					if (frame.Y < num * 6)
					{
						frame.Y = num * 6;
					}
					frameCounter += Math.Abs(velocity.X) * 2f;
					frameCounter += velocity.X;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 6;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
			}
			else if (type == 206)
			{
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (ai[2] > 0f)
					{
						spriteDirection = direction;
						frame.Y = num * (int)ai[2];
						frameCounter = 0.0;
						return;
					}
					if (frame.Y < num * 6)
					{
						frame.Y = num * 6;
					}
					frameCounter += Math.Abs(velocity.X) * 2f;
					frameCounter += velocity.X;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 6;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
			}
			else if (type == 350)
			{
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (ai[2] > 0f)
					{
						spriteDirection = direction;
						frame.Y = num * ((int)ai[2] - 1);
						frameCounter = 0.0;
						return;
					}
					if (frame.Y < num * 7)
					{
						frame.Y = num * 7;
					}
					frameCounter += Math.Abs(velocity.X) * 2f;
					frameCounter += velocity.X * 1.3f;
					if (frameCounter > 4.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 7;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num * 5;
				}
			}
			else if (type == 111)
			{
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (ai[2] > 0f)
					{
						spriteDirection = direction;
						frame.Y = num * ((int)ai[2] - 1);
						frameCounter = 0.0;
						return;
					}
					if (frame.Y < num * 7)
					{
						frame.Y = num * 7;
					}
					frameCounter += Math.Abs(velocity.X) * 2f;
					frameCounter += velocity.X * 1.3f;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 7;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num * 6;
				}
			}
			else if (type == 257)
			{
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
				}
				if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
				{
					frameCounter = 0.0;
					frame.Y = num * 4;
					return;
				}
				if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
					return;
				}
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter < 8.0)
				{
					frame.Y = 0;
				}
				else if (frameCounter < 16.0)
				{
					frame.Y = num;
				}
				else if (frameCounter < 24.0)
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < 32.0)
				{
					frame.Y = num * 3;
				}
				else
				{
					frameCounter = 0.0;
				}
			}
			else if (type == 258)
			{
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
				}
				if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
				{
					frameCounter += 1.0;
					if (frameCounter > 1.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y > num * 5 || frame.Y < num * 3)
					{
						frame.Y = num * 3;
					}
				}
				else if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
				else
				{
					frameCounter += Math.Abs(velocity.X);
					if (frameCounter < 8.0)
					{
						frame.Y = 0;
					}
					else if (frameCounter < 16.0)
					{
						frame.Y = num;
					}
					else if (frameCounter < 24.0)
					{
						frame.Y = num * 2;
					}
					else
					{
						frameCounter = 0.0;
					}
				}
			}
			else if (type == 348)
			{
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
				}
				if (velocity.Y != 0f)
				{
					frameCounter = 0.0;
					frame.Y = num * 8;
					return;
				}
				if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
					return;
				}
				frameCounter += Math.Abs(velocity.X);
				frameCounter += 1.0;
				if (frameCounter > 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y > num * 7)
				{
					frame.Y = num;
				}
			}
			else if (type == 349)
			{
				frameCounter += 1.0;
				if (frameCounter > 3.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y > num * 7)
				{
					frame.Y = 0;
				}
			}
			else if (type == 3 || type == 342 || type == 331 || type == 332 || type == 52 || type == 53 || type == 536 || type == 132 || type == 161 || type == 162 || type == 186 || type == 187 || type == 188 || type == 189 || type == 200 || type == 223 || type == 251 || type == 254 || type == 255 || (type >= 319 && type <= 321))
			{
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
				}
				if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
				{
					frameCounter = 0.0;
					frame.Y = num * 2;
					return;
				}
				if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
					return;
				}
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter < 8.0)
				{
					frame.Y = 0;
				}
				else if (frameCounter < 16.0)
				{
					frame.Y = num;
				}
				else if (frameCounter < 24.0)
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < 32.0)
				{
					frame.Y = num;
				}
				else
				{
					frameCounter = 0.0;
				}
			}
			else if (type == 148 || type == 149 || type == 168 || type == 470)
			{
				int num99 = 0;
				if (localAI[0] == 2f)
				{
					num99 = 3;
				}
				if (localAI[0] == 3f)
				{
					num99 = 6;
				}
				if (localAI[0] == 4f)
				{
					num99 = 9;
				}
				num99 *= num;
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frame.Y = num99;
						frameCounter = 0.0;
						return;
					}
					frameCounter += Math.Abs(velocity.X) * 1f;
					if (frameCounter < 6.0)
					{
						frame.Y = num99;
						return;
					}
					if (frameCounter < 12.0)
					{
						frame.Y = num + num99;
						return;
					}
					if (frameCounter < 15.0)
					{
						frame.Y = num * 2 + num99;
						return;
					}
					frameCounter = 0.0;
					frame.Y = num * 2 + num99;
				}
				else if (velocity.Y < 0f)
				{
					frameCounter = 0.0;
					frame.Y = num * 2 + num99;
				}
				else if (velocity.Y > 0f)
				{
					frameCounter = 0.0;
					frame.Y = num * 2 + num99;
				}
			}
			else if (type == 299 || type == 538 || type == 539)
			{
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
						return;
					}
					frameCounter += Math.Abs(velocity.X) * 0.5f;
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type] - 1)
					{
						frame.Y = num;
					}
				}
				else if (velocity.Y < 0f)
				{
					frameCounter = 0.0;
					frame.Y = num * 2;
				}
				else if (velocity.Y > 0f)
				{
					frameCounter = 0.0;
					frame.Y = num * 4;
				}
			}
			else if (type == 300 || type == 447)
			{
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frameCounter += 1.0;
						if (frameCounter > 8.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y / num > 1)
						{
							frame.Y = 0;
						}
						return;
					}
					frameCounter += Math.Abs(velocity.X) * 0.5f;
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 2;
					}
				}
				else
				{
					frameCounter += Math.Abs(velocity.X) * 0.5f;
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 2;
					}
				}
			}
			else if (type == 361 || type == 445)
			{
				spriteDirection = direction;
				if (velocity.Y == 0f)
				{
					if (velocity.X == 0f)
					{
						frameCounter += 1.0;
						if (frameCounter > 6.0)
						{
							frameCounter = 0.0;
							frame.Y += num;
						}
						if (frame.Y > num * 5)
						{
							frame.Y = 0;
						}
						return;
					}
					frameCounter += 1.0;
					int num100 = 6;
					if (frameCounter < (double)num100)
					{
						frame.Y = 0;
						return;
					}
					if (frameCounter < (double)(num100 * 2))
					{
						frame.Y = num * 6;
						return;
					}
					if (frameCounter < (double)(num100 * 3))
					{
						frame.Y = num * 8;
						return;
					}
					frame.Y = num * 9;
					if (frameCounter >= (double)(num100 * 4 - 1))
					{
						frameCounter = 0.0;
					}
				}
				else if (velocity.Y > 0f)
				{
					frame.Y = num * 9;
				}
				else
				{
					frame.Y = num * 8;
				}
			}
			else if (type == 366 || type == 367)
			{
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
				}
				if (velocity.X == 0f)
				{
					frame.Y = 0;
					frameCounter = 0.0;
					return;
				}
				frameCounter += Math.Abs(velocity.X) * 1f;
				frameCounter += 1.0;
				if (frameCounter > 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
			}
			else if (type == 46 || type == 47 || type == 303 || type == 337 || type == 443 || type == 464)
			{
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
						return;
					}
					frameCounter += Math.Abs(velocity.X) * 1f;
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				else if (velocity.Y < 0f)
				{
					frameCounter = 0.0;
					frame.Y = num * 4;
				}
				else if (velocity.Y > 0f)
				{
					frameCounter = 0.0;
					frame.Y = num * 6;
				}
			}
			else if (type == 4 || type == 125 || type == 126)
			{
				frameCounter += 1.0;
				if (frameCounter < 7.0)
				{
					frame.Y = 0;
				}
				else if (frameCounter < 14.0)
				{
					frame.Y = num;
				}
				else if (frameCounter < 21.0)
				{
					frame.Y = num * 2;
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
				if (ai[0] > 1f)
				{
					frame.Y += num * 3;
				}
			}
			else if (type == 5)
			{
				frameCounter += 1.0;
				if (frameCounter >= 8.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
			}
			else if (type == 94)
			{
				frameCounter += 1.0;
				if (frameCounter < 6.0)
				{
					frame.Y = 0;
					return;
				}
				if (frameCounter < 12.0)
				{
					frame.Y = num;
					return;
				}
				if (frameCounter < 18.0)
				{
					frame.Y = num * 2;
					return;
				}
				frame.Y = num;
				if (frameCounter >= 23.0)
				{
					frameCounter = 0.0;
				}
			}
			else if (type == 6 || type == 173)
			{
				frameCounter += 1.0;
				if (frameCounter >= 8.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
			}
			else if (type == 24)
			{
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
				}
				if (ai[1] > 0f)
				{
					if (frame.Y < 4)
					{
						frameCounter = 0.0;
					}
					frameCounter += 1.0;
					if (frameCounter <= 4.0)
					{
						frame.Y = num * 4;
						return;
					}
					if (frameCounter <= 8.0)
					{
						frame.Y = num * 5;
						return;
					}
					if (frameCounter <= 12.0)
					{
						frame.Y = num * 6;
						return;
					}
					if (frameCounter <= 16.0)
					{
						frame.Y = num * 7;
						return;
					}
					if (frameCounter <= 20.0)
					{
						frame.Y = num * 8;
						return;
					}
					frame.Y = num * 9;
					frameCounter = 100.0;
					return;
				}
				frameCounter += 1.0;
				if (frameCounter <= 4.0)
				{
					frame.Y = 0;
					return;
				}
				if (frameCounter <= 8.0)
				{
					frame.Y = num;
					return;
				}
				if (frameCounter <= 12.0)
				{
					frame.Y = num * 2;
					return;
				}
				frame.Y = num * 3;
				if (frameCounter >= 16.0)
				{
					frameCounter = 0.0;
				}
			}
			else if (type == 29 || type == 32 || type == 45 || type == 172 || (type >= 281 && type <= 286))
			{
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
				}
				frame.Y = 0;
				if (velocity.Y != 0f)
				{
					frame.Y += num;
				}
				else if (ai[1] > 0f)
				{
					frame.Y += num * 2;
				}
			}
			else if (type == 34)
			{
				frameCounter += 1.0;
				if (frameCounter >= 4.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
			}
		}

		public void SimpleFlyMovement(Vector2 desiredVelocity, float moveSpeed)
		{
			if (velocity.X < desiredVelocity.X)
			{
				velocity.X += moveSpeed;
				if (velocity.X < 0f && desiredVelocity.X > 0f)
				{
					velocity.X += moveSpeed;
				}
			}
			else if (velocity.X > desiredVelocity.X)
			{
				velocity.X -= moveSpeed;
				if (velocity.X > 0f && desiredVelocity.X < 0f)
				{
					velocity.X -= moveSpeed;
				}
			}
			if (velocity.Y < desiredVelocity.Y)
			{
				velocity.Y += moveSpeed;
				if (velocity.Y < 0f && desiredVelocity.Y > 0f)
				{
					velocity.Y += moveSpeed;
				}
			}
			else if (velocity.Y > desiredVelocity.Y)
			{
				velocity.Y -= moveSpeed;
				if (velocity.Y > 0f && desiredVelocity.Y < 0f)
				{
					velocity.Y -= moveSpeed;
				}
			}
		}

		public void HealEffect(int healAmount, bool broadcast = true)
		{
			int num = CombatText.NewText(new Rectangle((int)position.X, (int)position.Y, width, height), CombatText.HealLife, string.Concat(healAmount));
			if (broadcast && Main.netMode == 2 && num != 100)
			{
				CombatText combatText = Main.combatText[num];
				NetMessage.SendData(81, -1, -1, combatText.text, (int)combatText.color.PackedValue, combatText.position.X, combatText.position.Y);
			}
		}

		public static void HealEffect(Rectangle r, int healAmount, bool broadcast = true)
		{
			int num = CombatText.NewText(r, CombatText.HealLife, string.Concat(healAmount));
			if (broadcast && Main.netMode == 2 && num != 100)
			{
				CombatText combatText = Main.combatText[num];
				NetMessage.SendData(81, -1, -1, combatText.text, (int)combatText.color.PackedValue, combatText.position.X, combatText.position.Y);
			}
		}

		public int FindClosestPlayer()
		{
			float distanceToPlayer;
			return FindClosestPlayer(out distanceToPlayer);
		}

		public int FindClosestPlayer(out float distanceToPlayer)
		{
			Vector2 center = base.Center;
			float num = float.MaxValue;
			int num2 = -1;
			for (int i = 0; i < 16; i++)
			{
				Player player = Main.player[i];
				if (player.active && !player.dead && !player.ghost)
				{
					float num3 = Vector2.DistanceSquared(center, player.Center);
					if (num3 < num)
					{
						num = num3;
						num2 = i;
					}
				}
			}
			if (num2 < 0)
			{
				for (int j = 0; j < 16; j++)
				{
					Player player = Main.player[j];
					if (player.active)
					{
						float num4 = Vector2.DistanceSquared(center, player.Center);
						if (num4 < num)
						{
							num = num4;
							num2 = j;
						}
					}
				}
			}
			distanceToPlayer = (float)Math.Sqrt(num);
			return num2;
		}

		public void BigMimicSpawnSmoke()
		{
			if (Main.netMode == 2)
			{
				NetMessage.SendData(51, -1, -1, "", whoAmI, 4f);
				return;
			}
			for (int i = 0; i < 20; i++)
			{
				int num = Dust.NewDust(position, width, height, 54, 0f, 0f, 50, default(Color), 1.5f);
				Main.dust[num].velocity *= 2f;
				Main.dust[num].noGravity = true;
			}
			for (int j = 0; j < 3; j++)
			{
				for (int k = 0; k < 2; k++)
				{
					int num2 = Gore.NewGore(new Vector2(position.X + (float)(width * j) * 0.45f - 20f, position.Y + (float)(height * k) * 0.5f + 10f), new Vector2(0f, 0f), 99, 1.1f);
					Main.gore[num2].velocity *= 0.3f;
				}
			}
		}

		public static bool BigMimicSummonCheck(int x, int y)
		{
			if (Main.netMode == 1 || !Main.hardMode)
			{
				return false;
			}
			int num = Chest.FindChest(x, y);
			if (num < 0)
			{
				return false;
			}
			int num2 = 0;
			int num3 = 0;
			int num4 = 0;
			for (int i = 0; i < 40; i++)
			{
				ushort num5 = Main.tile[Main.chest[num].x, Main.chest[num].y].type;
				int num6 = Main.tile[Main.chest[num].x, Main.chest[num].y].frameX / 36;
				if (num5 == 21 && (num6 < 5 || num6 > 6) && Main.chest[num].item[i] != null && Main.chest[num].item[i].type > 0)
				{
					if (Main.chest[num].item[i].type == 3092)
					{
						num2 += Main.chest[num].item[i].stack;
					}
					else if (Main.chest[num].item[i].type == 3091)
					{
						num3 += Main.chest[num].item[i].stack;
					}
					else
					{
						num4++;
					}
				}
			}
			if (num4 == 0 && num2 + num3 == 1)
			{
				if (num2 != 1)
				{
					int num9 = 1;
				}
				if (Main.tile[x, y].type == 21)
				{
					if (Main.tile[x, y].frameX % 36 != 0)
					{
						x--;
					}
					if (Main.tile[x, y].frameY % 36 != 0)
					{
						y--;
					}
					int number = Chest.FindChest(x, y);
					for (int j = x; j <= x + 1; j++)
					{
						for (int k = y; k <= y + 1; k++)
						{
							if (Main.tile[j, k].type == 21)
							{
								Main.tile[j, k].active(false);
							}
						}
					}
					for (int l = 0; l < 40; l++)
					{
						Main.chest[num].item[l] = new Item();
					}
					Chest.DestroyChest(x, y);
					NetMessage.SendData(34, -1, -1, "", 1, x, y, 0f, number);
					NetMessage.SendTileSquare(-1, x, y, 3);
				}
				int num7 = 475;
				if (num3 == 1)
				{
					num7 = ((!WorldGen.crimson) ? 473 : 474);
				}
				int num8 = NewNPC(x * 16 + 16, y * 16 + 32, num7);
				Main.npc[num8].whoAmI = num8;
				NetMessage.SendData(23, -1, -1, "", num8);
				Main.npc[num8].BigMimicSpawnSmoke();
			}
			return false;
		}

		public void TargetClosest(bool faceTarget = true)
		{
			float num = 0f;
			float num2 = 0f;
			bool flag = false;
			int num3 = -1;
			for (int i = 0; i < 16; i++)
			{
				if (!Main.player[i].active || Main.player[i].dead || Main.player[i].ghost)
				{
					continue;
				}
				float num4 = Math.Abs(Main.player[i].position.X + (float)(Main.player[i].width / 2) - position.X + (float)(width / 2)) + Math.Abs(Main.player[i].position.Y + (float)(Main.player[i].height / 2) - position.Y + (float)(height / 2));
				num4 -= (float)Main.player[i].aggro;
				if (Main.player[i].npcTypeNoAggro[type] && direction != 0)
				{
					num4 += 1000f;
				}
				if (!flag || num4 < num)
				{
					flag = true;
					num3 = -1;
					num2 = Math.Abs(Main.player[i].position.X + (float)(Main.player[i].width / 2) - position.X + (float)(width / 2)) + Math.Abs(Main.player[i].position.Y + (float)(Main.player[i].height / 2) - position.Y + (float)(height / 2));
					num = num4;
					target = i;
				}
				if (Main.player[i].tankPet >= 0 && !Main.player[i].npcTypeNoAggro[type])
				{
					int tankPet = Main.player[i].tankPet;
					float num5 = Math.Abs(Main.projectile[tankPet].position.X + (float)(Main.projectile[tankPet].width / 2) - position.X + (float)(width / 2)) + Math.Abs(Main.projectile[tankPet].position.Y + (float)(Main.projectile[tankPet].height / 2) - position.Y + (float)(height / 2));
					num5 -= 200f;
					if (num5 < num && num5 < 200f && Collision.CanHit(base.Center, 1, 1, Main.projectile[tankPet].Center, 1, 1))
					{
						num3 = tankPet;
					}
				}
			}
			if (num3 >= 0)
			{
				int num6 = num3;
				targetRect = new Rectangle((int)Main.projectile[num6].position.X, (int)Main.projectile[num6].position.Y, Main.projectile[num6].width, Main.projectile[num6].height);
				direction = 1;
				if ((float)(targetRect.X + targetRect.Width / 2) < position.X + (float)(width / 2))
				{
					direction = -1;
				}
				directionY = 1;
				if ((float)(targetRect.Y + targetRect.Height / 2) < position.Y + (float)(height / 2))
				{
					directionY = -1;
				}
			}
			else
			{
				if (target < 0 || target >= 16)
				{
					target = 0;
				}
				targetRect = new Rectangle((int)Main.player[target].position.X, (int)Main.player[target].position.Y, Main.player[target].width, Main.player[target].height);
				if (Main.player[target].dead)
				{
					faceTarget = false;
				}
				if (Main.player[target].npcTypeNoAggro[type] && direction != 0)
				{
					faceTarget = false;
				}
				if (faceTarget)
				{
					float num7 = num2 - (float)Main.player[target].aggro;
					float num8 = (Main.player[target].height + Main.player[target].width + height + width) / 4 + 750 + 50;
					if (Main.player[target].itemAnimation != 0 || Main.player[target].aggro >= 0 || !(num7 > num8) || oldTarget < 0 || oldTarget > 15)
					{
						direction = 1;
						if ((float)(targetRect.X + targetRect.Width / 2) < position.X + (float)(width / 2))
						{
							direction = -1;
						}
						directionY = 1;
						if ((float)(targetRect.Y + targetRect.Height / 2) < position.Y + (float)(height / 2))
						{
							directionY = -1;
						}
					}
				}
			}
			if (confused)
			{
				direction *= -1;
			}
			if ((direction != oldDirection || directionY != oldDirectionY || target != oldTarget) && !collideX && !collideY)
			{
				netUpdate = true;
			}
		}

		public void CheckActive()
		{
			if (!active)
			{
				return;
			}
			switch (type)
			{
			case 8:
			case 9:
			case 11:
			case 12:
			case 14:
			case 15:
			case 40:
			case 41:
			case 88:
			case 89:
			case 90:
			case 91:
			case 92:
			case 96:
			case 97:
			case 99:
			case 100:
			case 113:
			case 114:
			case 115:
			case 118:
			case 119:
			case 134:
			case 135:
			case 136:
			case 246:
			case 247:
			case 248:
			case 249:
			case 263:
			case 267:
			case 328:
			case 379:
			case 380:
			case 396:
			case 397:
			case 398:
			case 400:
			case 422:
			case 437:
			case 438:
			case 439:
			case 440:
			case 488:
			case 493:
			case 507:
			case 517:
				return;
			}
			if (townNPC || type == 453)
			{
				Rectangle rectangle = new Rectangle((int)(position.X + (float)(width / 2) - (float)townRangeX), (int)(position.Y + (float)(height / 2) - (float)townRangeY), townRangeX * 2, townRangeY * 2);
				for (int i = 0; i < 16; i++)
				{
					if (Main.player[i].active && rectangle.Intersects(new Rectangle((int)Main.player[i].position.X, (int)Main.player[i].position.Y, Main.player[i].width, Main.player[i].height)))
					{
						Main.player[i].townNPCs += npcSlots;
					}
				}
				if (type != 453)
				{
					return;
				}
			}
			bool flag = false;
			Rectangle rectangle2 = new Rectangle((int)(position.X + (float)(width / 2) - (float)activeRangeX), (int)(position.Y + (float)(height / 2) - (float)activeRangeY), activeRangeX * 2, activeRangeY * 2);
			Rectangle rectangle3 = new Rectangle((int)((double)(position.X + (float)(width / 2)) - (double)sWidth * 0.5 - (double)width), (int)((double)(position.Y + (float)(height / 2)) - (double)sHeight * 0.5 - (double)height), sWidth + width * 2, sHeight + height * 2);
			for (int j = 0; j < 16; j++)
			{
				if (!Main.player[j].active)
				{
					continue;
				}
				if (rectangle2.Intersects(new Rectangle((int)Main.player[j].position.X, (int)Main.player[j].position.Y, Main.player[j].width, Main.player[j].height)))
				{
					flag = true;
					if (type != 25 && type != 30 && type != 33 && releaseOwner == 255 && lifeMax > 0)
					{
						if (Main.slimeRain && Main.slimeRainNPC[type])
						{
							Main.player[j].activeNPCs += npcSlots * Main.slimeRainNPCSlots;
						}
						else
						{
							Main.player[j].activeNPCs += npcSlots;
						}
					}
				}
				if (rectangle3.Intersects(new Rectangle((int)Main.player[j].position.X, (int)Main.player[j].position.Y, Main.player[j].width, Main.player[j].height)))
				{
					timeLeft = activeTime;
				}
				if (boss)
				{
					flag = true;
				}
				switch (type)
				{
				case 7:
				case 10:
				case 13:
				case 35:
				case 36:
				case 39:
				case 87:
				case 127:
				case 128:
				case 129:
				case 130:
				case 131:
				case 392:
				case 393:
				case 394:
				case 491:
				case 492:
					flag = true;
					break;
				case 399:
					if (ai[0] == 2f || ai[0] == 1f)
					{
						timeLeft = activeTime;
					}
					flag = true;
					break;
				}
			}
			timeLeft--;
			if (timeLeft <= 0)
			{
				flag = false;
			}
			if (flag || Main.netMode == 1)
			{
				return;
			}
			noSpawnCycle = true;
			active = false;
			if (Main.netMode == 2)
			{
				netSkip = -1;
				life = 0;
				NetMessage.SendData(23, -1, -1, "", whoAmI);
			}
			if (aiStyle != 6)
			{
				return;
			}
			for (int num = (int)ai[0]; num > 0; num = (int)Main.npc[num].ai[0])
			{
				if (Main.npc[num].active)
				{
					Main.npc[num].active = false;
					if (Main.netMode == 2)
					{
						Main.npc[num].life = 0;
						Main.npc[num].netSkip = -1;
						NetMessage.SendData(23, -1, -1, "", num);
					}
				}
			}
		}

		public void checkDead()
		{
			if (!active || (realLife >= 0 && realLife != whoAmI) || life > 0)
			{
				return;
			}
			if (type == 397 || type == 396)
			{
				if (ai[0] != -2f)
				{
					ai[0] = -2f;
					life = lifeMax;
					netUpdate = true;
					dontTakeDamage = true;
					if (Main.netMode != 1)
					{
						int num = NewNPC((int)base.Center.X, (int)base.Center.Y, 400);
						Main.npc[num].ai[3] = ai[3];
						Main.npc[num].netUpdate = true;
					}
				}
				return;
			}
			if (type == 398 && ai[0] != 2f)
			{
				ai[0] = 2f;
				life = lifeMax;
				netUpdate = true;
				dontTakeDamage = true;
				return;
			}
			if ((type == 517 || type == 422 || type == 507 || type == 493) && ai[2] != 1f)
			{
				ai[2] = 1f;
				ai[1] = 0f;
				life = lifeMax;
				dontTakeDamage = true;
				netUpdate = true;
				return;
			}
			noSpawnCycle = true;
			if (townNPC && type != 37 && type != 453)
			{
				string fullName = FullName;
				if (Main.netMode == 0)
				{
					if (type == 369)
					{
						Main.NewText(Language.GetTextValue("LegacyMisc.36", fullName), byte.MaxValue, 25, 25);
					}
					else
					{
						Main.NewText(Language.GetTextValue("DeathText.Slain", fullName), byte.MaxValue, 25, 25);
					}
				}
				else if (Main.netMode == 2)
				{
					if (type == 369)
					{
						NetMessage.SendData(25, -1, -1, Language.GetTextValue("LegacyMisc.36", fullName), 16, 255f, 25f, 25f);
					}
					else
					{
						NetMessage.SendData(25, -1, -1, Language.GetTextValue("DeathText.Slain", fullName), 16, 255f, 25f, 25f);
					}
				}
			}
			if (Main.netMode != 1 && !Main.dayTime && type == 54 && !AnyNPCs(35))
			{
				for (int i = 0; i < 16; i++)
				{
					if (Main.player[i].active && !Main.player[i].dead && Main.player[i].killClothier)
					{
						SpawnSkeletron();
						break;
					}
				}
			}
			if (townNPC && Main.netMode != 1 && homeless && WorldGen.spawnNPC == type)
			{
				WorldGen.spawnNPC = 0;
			}
			if (soundKilled > 0)
			{
				Main.PlaySound(4, (int)base.position.X, (int)base.position.Y, soundKilled);
			}
			if (type == 13 || type == 14 || type == 15)
			{
				bool flag = true;
				for (int j = 0; j < 200; j++)
				{
					if (j != whoAmI && Main.npc[j].active && (Main.npc[j].type == 13 || Main.npc[j].type == 14 || Main.npc[j].type == 15))
					{
						flag = false;
						break;
					}
				}
				if (flag)
				{
					boss = true;
					NPCLoot();
				}
				else
				{
					NPCLoot();
				}
			}
			else if (type == 134)
			{
				Vector2 position = base.position;
				Vector2 center = Main.player[target].Center;
				float num2 = 1E+08f;
				Vector2 position2 = base.position;
				for (int k = 0; k < 200; k++)
				{
					if (Main.npc[k].active && (Main.npc[k].type == 134 || Main.npc[k].type == 135 || Main.npc[k].type == 136))
					{
						float num3 = Math.Abs(Main.npc[k].Center.X - center.X) + Math.Abs(Main.npc[k].Center.Y - center.Y);
						if (num3 < num2)
						{
							num2 = num3;
							position2 = Main.npc[k].position;
						}
					}
				}
				base.position = position2;
				NPCLoot();
				base.position = position;
			}
			else
			{
				NPCLoot();
			}
			active = false;
			if (Main.snowMoon)
			{
				int num4 = 0;
				string text = "";
				int[] array = new int[21]
				{
					0,
					25,
					15,
					10,
					30,
					100,
					160,
					180,
					200,
					250,
					300,
					375,
					450,
					525,
					675,
					850,
					1025,
					1325,
					1550,
					2000,
					0
				};
				num4 = array[waveCount];
				switch (waveCount)
				{
				case 1:
					text = Lang.GetInvasionWaveText(2, 338, 350);
					break;
				case 2:
					text = Lang.GetInvasionWaveText(3, 338, 350, 342, 348);
					break;
				case 3:
					text = Lang.GetInvasionWaveText(4, 344, 338, 350, 342);
					break;
				case 4:
					text = Lang.GetInvasionWaveText(5, 344, 338, 350, 348);
					break;
				case 5:
					text = Lang.GetInvasionWaveText(6, 344, 350, 348, 347);
					break;
				case 6:
					text = Lang.GetInvasionWaveText(7, 346, 342, 350, 338);
					break;
				case 7:
					text = Lang.GetInvasionWaveText(8, 346, 347, 350, 348, 351);
					break;
				case 8:
					text = Lang.GetInvasionWaveText(9, 346, 344, 348, 347, 342);
					break;
				case 9:
					text = Lang.GetInvasionWaveText(10, 346, 344, 351, 338, 347);
					break;
				case 10:
					text = Lang.GetInvasionWaveText(11, 345, 352, 338, 342);
					break;
				case 11:
					text = Lang.GetInvasionWaveText(12, 345, 344, 342, 343, 338);
					break;
				case 12:
					text = Lang.GetInvasionWaveText(13, 345, 346, 342, 352, 343, 347);
					break;
				case 13:
					text = Lang.GetInvasionWaveText(14, 345, 346, 344, 343, 351);
					break;
				case 14:
					text = Lang.GetInvasionWaveText(15, 345, 346, 344, 343, 347);
					break;
				case 15:
					text = Lang.GetInvasionWaveText(16, 345, 346, 344, 343, 352);
					break;
				case 16:
					text = Lang.GetInvasionWaveText(17, 345, 346, 344, 343, 351, 347);
					break;
				case 17:
					text = Lang.GetInvasionWaveText(18, 345, 346, 344, 343, 348, 351);
					break;
				case 18:
					text = Lang.GetInvasionWaveText(19, 345, 346, 344, 343);
					break;
				case 19:
					text = Lang.GetInvasionWaveText(-1, 345, 346, 344);
					break;
				}
				float num5 = 0f;
				switch (type)
				{
				case 338:
				case 339:
				case 340:
					num5 = 1f;
					break;
				case 341:
					num5 = 20f;
					break;
				case 342:
					num5 = 2f;
					break;
				case 343:
					num5 = 18f;
					break;
				case 344:
					num5 = 50f;
					break;
				case 345:
					num5 = 150f;
					break;
				case 346:
					num5 = 100f;
					break;
				case 347:
					num5 = 8f;
					break;
				case 348:
				case 349:
					num5 = 4f;
					break;
				case 350:
					num5 = 3f;
					break;
				}
				if (Main.expertMode)
				{
					num5 *= 2f;
				}
				float num6 = waveKills;
				waveKills += num5;
				if (waveKills >= (float)num4 && num4 != 0)
				{
					waveKills = 0f;
					waveCount++;
					num4 = array[waveCount];
					if (text != "")
					{
						if (Main.netMode == 0)
						{
							Main.NewText(text, 175, 75);
						}
						else if (Main.netMode == 2)
						{
							NetMessage.SendData(25, -1, -1, text, 16, 175f, 75f, 255f);
						}
						if (waveCount == 15)
						{
							AchievementsHelper.NotifyProgressionEvent(14);
						}
					}
				}
				if (waveKills != num6 && num5 != 0f)
				{
					if (Main.netMode != 1)
					{
						Main.ReportInvasionProgress((int)waveKills, num4, 1, waveCount);
					}
					if (Main.netMode == 2)
					{
						NetMessage.SendData(78, -1, -1, "", Main.invasionProgress, Main.invasionProgressMax, 1f, waveCount);
					}
				}
			}
			if (Main.pumpkinMoon)
			{
				int num7 = 0;
				string text2 = "";
				int[] array2 = new int[16]
				{
					0,
					25,
					40,
					50,
					80,
					100,
					160,
					180,
					200,
					250,
					300,
					375,
					450,
					525,
					675,
					0
				};
				num7 = array2[waveCount];
				switch (waveCount)
				{
				case 1:
					text2 = Lang.GetInvasionWaveText(2, 305, 326);
					break;
				case 2:
					text2 = Lang.GetInvasionWaveText(3, 305, 326, 329);
					break;
				case 3:
					text2 = Lang.GetInvasionWaveText(4, 305, 326, 329, 325);
					break;
				case 4:
					text2 = Lang.GetInvasionWaveText(5, 305, 326, 329, 330, 325);
					break;
				case 5:
					text2 = Lang.GetInvasionWaveText(6, 326, 329, 330, 325);
					break;
				case 6:
					text2 = Lang.GetInvasionWaveText(7, 305, 329, 330, 327);
					break;
				case 7:
					text2 = Lang.GetInvasionWaveText(8, 326, 329, 330, 327);
					break;
				case 8:
					text2 = Lang.GetInvasionWaveText(9, 305, 315, 325, 327);
					break;
				case 9:
					text2 = Lang.GetInvasionWaveText(10, 326, 329, 330, 315, 325, 327);
					break;
				case 10:
					text2 = Lang.GetInvasionWaveText(11, 305, 326, 329, 330, 315, 325, 327);
					break;
				case 11:
					text2 = Lang.GetInvasionWaveText(12, 326, 329, 330, 315, 325, 327);
					break;
				case 12:
					text2 = Lang.GetInvasionWaveText(13, 329, 330, 315, 325, 327);
					break;
				case 13:
					text2 = Lang.GetInvasionWaveText(14, 315, 325, 327);
					break;
				case 14:
					text2 = Lang.GetInvasionWaveText(-1, 325, 327);
					break;
				}
				float num8 = 0f;
				switch (type)
				{
				case 305:
				case 306:
				case 307:
				case 308:
				case 309:
				case 310:
				case 311:
				case 312:
				case 313:
				case 314:
					num8 = 1f;
					break;
				case 315:
					num8 = 25f;
					break;
				case 325:
					num8 = 75f;
					break;
				case 326:
					num8 = 2f;
					break;
				case 327:
					num8 = 150f;
					break;
				case 329:
					num8 = 4f;
					break;
				case 330:
					num8 = 8f;
					break;
				}
				if (Main.expertMode)
				{
					num8 *= 2f;
				}
				float num9 = waveKills;
				waveKills += num8;
				if (waveKills >= (float)num7 && num7 != 0)
				{
					waveKills = 0f;
					waveCount++;
					num7 = array2[waveCount];
					if (text2 != "")
					{
						if (Main.netMode == 0)
						{
							Main.NewText(text2, 175, 75);
						}
						else if (Main.netMode == 2)
						{
							NetMessage.SendData(25, -1, -1, text2, 16, 175f, 75f, 255f);
						}
						if (waveCount == 15)
						{
							AchievementsHelper.NotifyProgressionEvent(15);
						}
					}
				}
				if (waveKills != num9 && num8 != 0f)
				{
					if (Main.netMode != 1)
					{
						Main.ReportInvasionProgress((int)waveKills, num7, 2, waveCount);
					}
					if (Main.netMode == 2)
					{
						NetMessage.SendData(78, -1, -1, "", Main.invasionProgress, Main.invasionProgressMax, 2f, waveCount);
					}
				}
			}
			int num10 = 0;
			switch (type)
			{
			case 26:
			case 27:
			case 28:
			case 29:
			case 111:
			case 471:
				num10 = 1;
				break;
			case 143:
			case 144:
			case 145:
				num10 = 2;
				break;
			case 212:
			case 213:
			case 214:
			case 215:
			case 216:
			case 491:
				num10 = 3;
				break;
			case 381:
			case 382:
			case 383:
			case 385:
			case 386:
			case 388:
			case 389:
			case 390:
			case 391:
			case 395:
				num10 = 4;
				break;
			}
			if (num10 != 0 && num10 == Main.invasionType)
			{
				int num11 = 1;
				switch (type)
				{
				case 216:
					num11 = 5;
					break;
				case 395:
					num11 = 10;
					break;
				case 491:
					num11 = 10;
					break;
				case 471:
					num11 = 10;
					break;
				}
				Main.invasionSize -= num11;
				if (Main.invasionSize < 0)
				{
					Main.invasionSize = 0;
				}
				if (Main.netMode != 1)
				{
					Main.ReportInvasionProgress(Main.invasionSizeStart - Main.invasionSize, Main.invasionSizeStart, num10 + 2, 0);
				}
				if (Main.netMode == 2)
				{
					NetMessage.SendData(78, -1, -1, "", Main.invasionProgress, Main.invasionProgressMax, Main.invasionProgressIcon);
				}
			}
		}

		public static void ResetKillCount()
		{
			for (int i = 0; i < 540; i++)
			{
				killCount[i] = 0;
			}
		}

		public bool AnyInteractions()
		{
			if (Main.netMode == 0)
			{
				if (playerInteraction[Main.myPlayer])
				{
					return true;
				}
			}
			else
			{
				for (int i = 0; i < 16; i++)
				{
					if (playerInteraction[i])
					{
						return true;
					}
				}
			}
			return false;
		}

		public void NPCLoot()
		{
			if (Main.netMode == 1 || type >= 540)
			{
				return;
			}
			bool flag = downedMechBoss1 && downedMechBoss2 && downedMechBoss3;
			switch (type)
			{
			case 125:
			case 126:
			{
				int num = (type == 126) ? 125 : 126;
				if (!AnyNPCs(num))
				{
					AchievementsHelper.NotifyNPCKilled(this);
					AchievementsHelper.CheckMechaMayhem(type);
				}
				break;
			}
			case 127:
			case 134:
				AchievementsHelper.CheckMechaMayhem(type);
				AchievementsHelper.NotifyNPCKilled(this);
				break;
			case 13:
			case 14:
			case 15:
				if (boss)
				{
					AchievementsHelper.NotifyNPCKilled(this);
				}
				break;
			default:
				AchievementsHelper.NotifyNPCKilled(this);
				break;
			}
			int num2 = Item.NPCtoBanner(BannerID());
			if (num2 > 0 && !NPCID.Sets.ExcludedFromDeathTally[type] && AnyInteractions())
			{
				killCount[num2]++;
				if (Main.netMode == 2)
				{
					NetMessage.SendData(83, -1, -1, "", num2);
				}
				int num3 = 50;
				if (killCount[num2] % num3 == 0 && num2 > 0)
				{
					int num4 = Item.BannerToNPC(num2);
					NPC nPC = new NPC();
					nPC.netDefaults(num4);
					int num5 = lastInteraction;
					if (!Main.player[num5].active || Main.player[num5].dead)
					{
						num5 = FindClosestPlayer();
					}
					string textValue = Language.GetTextValue("Game.EnemiesDefeatedAnnouncement", killCount[num2], Lang.GetNPCName(num4));
					if (num5 >= 0 && num5 < 16)
					{
						textValue = Language.GetTextValue("Game.EnemiesDefeatedByAnnouncement", Main.player[num5].name, killCount[num2], Lang.GetNPCName(num4));
					}
					if (Main.netMode == 0)
					{
						Main.NewText(textValue, 250, 250, 0);
					}
					else if (Main.netMode == 2)
					{
						NetMessage.SendData(25, -1, -1, textValue, 16, 250f, 250f);
					}
					int num6 = 1615 + num2 - 1;
					if (num2 >= 249)
					{
						num6 = 3593 + num2 - 249;
					}
					else if (num2 >= 186)
					{
						num6 = 3390 + num2 - 186;
					}
					else if (num2 >= 88)
					{
						num6 = 2897 + num2 - 88;
					}
					Vector2 position = base.position;
					if (num5 >= 0 && num5 < 16)
					{
						position = Main.player[num5].position;
					}
					Item.NewItem((int)position.X, (int)position.Y, width, height, num6);
				}
			}
			if (type == 23 && Main.hardMode)
			{
				return;
			}
			if ((type == 170 || type == 180 || type == 171) && Main.rand.Next(3) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3532);
			}
			switch (type)
			{
			case 75:
			case 80:
			case 84:
			case 86:
			case 120:
			case 122:
			case 137:
			case 138:
			case 171:
			case 244:
			case 475:
			{
				int maxValue = Main.expertMode ? 150 : 200;
				if (Main.rand.Next(maxValue) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3260);
				}
				break;
			}
			}
			if (Main.slimeRain && Main.slimeRainNPC[type] && !AnyNPCs(50))
			{
				int num7 = 150;
				if (downedSlimeKing)
				{
					num7 /= 2;
				}
				Main.slimeRainKillCount++;
				if (Main.slimeRainKillCount >= num7)
				{
					int plr = FindClosestPlayer();
					SpawnOnPlayer(plr, 50);
					Main.slimeRainKillCount = -num7 / 2;
				}
			}
			if (!Main.player[Player.FindClosest(base.position, width, height)].ZoneDungeon)
			{
				bool flag2 = false;
				if (Main.expertMode && Main.rand.Next(5) == 0)
				{
					flag2 = true;
				}
				else if (Main.rand.Next(5) == 0)
				{
					flag2 = true;
				}
				if (boss)
				{
					flag2 = false;
				}
				switch (type)
				{
				case 13:
				case 14:
				case 15:
					flag2 = false;
					break;
				}
				if (Main.hardMode && lifeMax > 1 && damage > 0 && !friendly && (double)base.position.Y > Main.rockLayer * 16.0 && flag2 && type != 121 && value > 0f)
				{
					if (Main.player[Player.FindClosest(base.position, width, height)].ZoneCorrupt || Main.player[Player.FindClosest(base.position, width, height)].ZoneCrimson)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 521);
					}
					if (Main.player[Player.FindClosest(base.position, width, height)].ZoneHoly)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 520);
					}
				}
			}
			if (type == 1 && ai[1] > 0f)
			{
				int num8 = (int)ai[1];
				if (num8 > 0 && num8 < 3602)
				{
					int num9 = 1;
					if (num8 == 8)
					{
						num9 = Main.rand.Next(5, 11);
					}
					else if (num8 == 166)
					{
						num9 = Main.rand.Next(2, 7);
					}
					else if (num8 == 965)
					{
						num9 = Main.rand.Next(20, 46);
					}
					else if ((num8 >= 11 && num8 <= 14) || (num8 >= 699 && num8 <= 702))
					{
						num9 = Main.rand.Next(3, 9);
						if (Main.rand.Next(2) == 0)
						{
							num9 += 5;
						}
					}
					else
					{
						switch (num8)
						{
						case 71:
							num9 = Main.rand.Next(50, 100);
							break;
						case 72:
							num9 = Main.rand.Next(20, 100);
							break;
						case 73:
							num9 = Main.rand.Next(1, 3);
							break;
						}
					}
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, num8, num9);
				}
			}
			if (type == 22 && GivenName == "Andrew")
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 867);
			}
			if (type == 353 && Main.rand.Next(8) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3352);
			}
			if (type == 441 && Main.rand.Next(8) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3351);
			}
			if (type == 227 && Main.rand.Next(10) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3350);
			}
			if (type == 208 && Main.rand.Next(4) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3548, Main.rand.Next(30, 61));
			}
			if (type == 207 && Main.rand.Next(8) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3349);
			}
			if (Main.hardMode && value > 0f)
			{
				if (!downedMechBoss1 && Main.rand.Next(2500) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 556);
				}
				else if (!downedMechBoss2 && Main.rand.Next(2500) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 544);
				}
				else if (!downedMechBoss3 && Main.rand.Next(2500) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 557);
				}
			}
			if (Main.halloween && value > 0f && value < 500f && damage < 40 && defense < 20)
			{
				if (Main.rand.Next(2000) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1825);
				}
				else if (Main.rand.Next(2000) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1827);
				}
			}
			if (Main.hardMode && value > 0f)
			{
				if (Main.rand.Next(2500) == 0 && Main.player[Player.FindClosest(base.position, width, height)].ZoneJungle)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1533);
				}
				if (Main.rand.Next(2500) == 0 && Main.player[Player.FindClosest(base.position, width, height)].ZoneCorrupt)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1534);
				}
				if (Main.rand.Next(2500) == 0 && Main.player[Player.FindClosest(base.position, width, height)].ZoneCrimson)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1535);
				}
				if (Main.rand.Next(2500) == 0 && Main.player[Player.FindClosest(base.position, width, height)].ZoneHoly)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1536);
				}
				if (Main.rand.Next(2500) == 0 && Main.player[Player.FindClosest(base.position, width, height)].ZoneSnow)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1537);
				}
			}
			if (type == 68)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1169);
			}
			if (Main.snowMoon)
			{
				int num10 = waveCount;
				if (Main.expertMode)
				{
					num10 += 7;
				}
				int num11 = (int)((double)(30 - num10) / 2.5);
				if (Main.expertMode)
				{
					num11 -= 2;
				}
				if (num11 < 1)
				{
					num11 = 1;
				}
				if (type == 344)
				{
					downedChristmasTree = true;
				}
				if (type == 345)
				{
					downedChristmasIceQueen = true;
				}
				if (type == 346)
				{
					downedChristmasSantank = true;
				}
				if ((type == 344 || type == 345 || type == 346) && Main.rand.Next(num11) == 0 && num10 >= 15)
				{
					int num12 = 4;
					if (num10 == 16)
					{
						num12 = 4;
					}
					if (num10 == 17)
					{
						num12 = 3;
					}
					if (num10 == 18)
					{
						num12 = 3;
					}
					if (num10 == 19)
					{
						num12 = 2;
					}
					if (num10 >= 20)
					{
						num12 = 2;
					}
					if (Main.expertMode && Main.rand.Next(3) == 0)
					{
						num12--;
					}
					if (Main.rand.Next(num12) == 0)
					{
						if (type == 344)
						{
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1962);
						}
						if (type == 345)
						{
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1960);
						}
						if (type == 346)
						{
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1961);
						}
					}
				}
				if (Main.rand.Next(num11) == 0)
				{
					if (type == 344)
					{
						int num13 = Main.rand.Next(3);
						if (Main.rand.Next(15) == 0)
						{
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1871, 1, false, -1);
						}
						else
						{
							if (num13 == 0)
							{
								Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1916);
							}
							if (num13 == 1)
							{
								Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1928, 1, false, -1);
							}
							if (num13 == 2)
							{
								Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1930, 1, false, -1);
							}
						}
					}
					if (type == 346)
					{
						int num14 = Main.rand.Next(2);
						if (num14 == 0)
						{
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1910, 1, false, -1);
						}
						if (num14 == 1)
						{
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1929, 1, false, -1);
						}
					}
					if (type == 345)
					{
						if (waveCount >= 15 && Main.rand.Next(30) == 0)
						{
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1914);
						}
						else if (Main.rand.Next(15) == 0)
						{
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1959);
						}
						else
						{
							int num15 = Main.rand.Next(3);
							if (num15 == 0)
							{
								Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1931, 1, false, -1);
							}
							if (num15 == 1)
							{
								Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1946, 1, false, -1);
							}
							if (num15 == 2)
							{
								Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1947, 1, false, -1);
							}
						}
					}
				}
			}
			if (type == 341)
			{
				int num16 = Main.rand.Next(5, 11);
				for (int i = 0; i < num16; i++)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 58);
				}
				if (Main.xMas)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1869);
				}
			}
			if (type >= 338 && type <= 340 && Main.rand.Next(5) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 58);
			}
			if (type >= 338 && type <= 340 && Main.rand.Next(200) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1943 + Main.rand.Next(3));
			}
			if (type == 342 && Main.rand.Next(3) != 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 58);
			}
			if (Main.pumpkinMoon)
			{
				if (type == 325)
				{
					downedHalloweenTree = true;
				}
				if (type == 327)
				{
					downedHalloweenKing = true;
				}
				int num17 = waveCount;
				if (Main.expertMode)
				{
					num17 += 6;
				}
				int num18 = (int)((double)(17 - num17) / 1.25);
				if (Main.expertMode)
				{
					num18--;
				}
				if (num18 < 1)
				{
					num18 = 1;
				}
				if (num17 >= 15)
				{
					if (type == 325)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1855);
					}
					if (type == 327)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1856);
					}
				}
				if (Main.rand.Next(num18) == 0)
				{
					if (type == 315 && Main.rand.Next(20) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1857);
					}
					if (type >= 305 && type <= 314 && Main.rand.Next(10) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, Main.rand.Next(1788, 1791));
					}
					if (type == 325)
					{
						int num19 = Main.rand.Next(5);
						if (num19 == 0)
						{
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1829);
						}
						if (num19 == 1)
						{
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1831);
						}
						if (num19 == 2)
						{
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1835, 1, false, -1);
						}
						if (num19 == 2)
						{
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1836, Main.rand.Next(30, 61));
						}
						if (num19 == 3)
						{
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1837);
						}
						if (num19 == 4)
						{
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1845, 1, false, -1);
						}
					}
					if (type == 327)
					{
						int num20 = Main.rand.Next(7);
						if (num20 == 0)
						{
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1782, 1, false, -1);
						}
						if (num20 == 0)
						{
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1783, Main.rand.Next(50, 101));
						}
						if (num20 == 1)
						{
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1784, 1, false, -1);
						}
						if (num20 == 1)
						{
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1785, Main.rand.Next(25, 51));
						}
						if (num20 == 2)
						{
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1811);
						}
						if (num20 == 3)
						{
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1826, 1, false, -1);
						}
						if (num20 == 4)
						{
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1801, 1, false, -1);
						}
						if (num20 == 5)
						{
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1802, 1, false, -1);
						}
						if (num20 == 6)
						{
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1798);
						}
					}
				}
			}
			if (type == 325)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1729, Main.rand.Next(30, 51));
			}
			if (type == 326)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1729, Main.rand.Next(1, 5));
			}
			if (type >= 305 && type <= 314 && Main.rand.Next(4) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 58);
			}
			if (type == 326 && Main.rand.Next(6) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 58);
			}
			if (type == 329 && Main.rand.Next(4) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 58);
			}
			if (type == 330 && Main.rand.Next(4) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 58);
			}
			if (type == 315)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 58);
			}
			if (Main.halloween && lifeMax > 1 && damage > 0 && !friendly && type != 121 && type != 23 && value > 0f && Main.rand.Next(80) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1774);
			}
			if (Main.xMas && lifeMax > 1 && damage > 0 && !friendly && type != 121 && value > 0f && Main.rand.Next(13) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1869);
			}
			if (lifeMax > 5 && value > 0f && !friendly && Main.hardMode && base.position.Y / 16f > (float)(Main.maxTilesY - 200) && Main.rand.Next(50) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2701, Main.rand.Next(20, 51));
			}
			if (type == 325 || type == 327 || type == 344 || type == 345 || type == 346)
			{
				int num21 = Main.rand.Next(6) + 6;
				for (int j = 0; j < num21; j++)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 58);
				}
			}
			if (type == 156 && Main.rand.Next(75) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1518);
			}
			if (type == 243 && Main.rand.Next(3) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1519);
			}
			if (type >= 269 && type <= 280 && Main.rand.Next(450) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1517);
			}
			if ((type == 158 || type == 159) && Main.rand.Next(40) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1520);
			}
			if (type == 176 && Main.rand.Next(150) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1521);
			}
			if (type == 48 && Main.rand.Next(200) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1516);
			}
			if (type == 205 && Main.rand.Next(2) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1611);
			}
			if (type == 483 || type == 482)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3086, Main.rand.Next(5, 11), false, -1);
			}
			if (!Main.hardMode && Main.rand.Next(100) == 0 && target >= 0 && lifeMax > 5 && !friendly && Main.rand.Next(4) == 0 && base.position.Y / 16f > (float)(Main.maxTilesY - 350) && downedBoss3)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3282, 1, false, -1);
			}
			if (Main.hardMode && Main.player[target].ZoneSnow && Main.rand.Next(80) == 0 && target >= 0 && lifeMax > 5 && !friendly && value > 0f)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3289, 1, false, -1);
			}
			else if (Main.hardMode && Main.rand.Next(200) == 0 && target >= 0 && lifeMax > 5 && !friendly && value > 0f)
			{
				if (Main.player[target].ZoneJungle && downedMechBossAny)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3286, 1, false, -1);
				}
				else if (Main.player[target].ZoneDungeon && downedPlantBoss)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3291, 1, false, -1);
				}
				else if ((double)(base.position.Y / 16f) > (Main.rockLayer + (double)Main.maxTilesY) / 2.0 && !Main.player[target].ZoneDungeon && Main.rand.Next(2) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3290, 1, false, -1);
				}
			}
			int num22 = 1;
			if (Main.expertMode && Main.rand.Next(2) == 0)
			{
				num22 = 2;
			}
			for (int k = 0; k < num22; k++)
			{
				if (type == 461 && Main.rand.Next(50) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 497, 1, false, -1);
				}
				if ((type == 159 || type == 158) && Main.rand.Next(35) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 900, 1, false, -1);
				}
				if (type == 251 && Main.rand.Next(15) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1311, 1, false, -1);
				}
				if (downedMechBoss1 && downedMechBoss2 && downedMechBoss3)
				{
					if (type == 477)
					{
						if (Main.rand.Next(20) == 0 && downedPlantBoss)
						{
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2770, 1, false, -1);
							k++;
						}
						if (Main.rand.Next(4) == 0)
						{
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1570, 1, false, -1);
							k++;
						}
						else if (Main.rand.Next(3) == 0 && downedPlantBoss)
						{
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3292, 1, false, -1);
							k++;
						}
					}
					if (type == 253 && Main.rand.Next(40) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1327, 1, false, -1);
					}
				}
				if (downedPlantBoss)
				{
					if (type == 460 && Main.rand.Next(40) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3098, 1, false, -1);
					}
					if (type == 468 && Main.rand.Next(40) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3105, 1, false, -1);
					}
					if (type == 466 && Main.rand.Next(40) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3106, 1, false, -1);
					}
					if (type == 467 && Main.rand.Next(40) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3249, 1, false, -1);
					}
					if (type == 463 && Main.rand.Next(25) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3107, 1, false, -1);
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3108, Main.rand.Next(100, 201), false, -1);
					}
				}
			}
			if (Main.bloodMoon && Main.hardMode && Main.rand.Next(1000) == 0 && value > 0f)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1314, 1, false, -1);
			}
			if (type == 77 && Main.rand.Next(150) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 723, 1, false, -1);
			}
			if (Main.rand.Next(100) == 0 || (Main.expertMode && Main.rand.Next(100) == 0))
			{
				int num23 = -1;
				int num24 = -1;
				switch (type)
				{
				case 102:
				case 104:
				case 269:
				case 270:
				case 271:
				case 272:
					num23 = 885;
					break;
				case 77:
				case 273:
				case 274:
				case 275:
				case 276:
					num23 = 886;
					break;
				case 42:
				case 141:
				case 176:
				case 231:
				case 232:
				case 233:
				case 234:
				case 235:
					num23 = 887;
					break;
				case 81:
					num23 = 888;
					break;
				case 78:
				case 82:
					num23 = 889;
					break;
				case 103:
					num23 = 890;
					break;
				case 34:
				case 83:
				case 84:
				case 179:
					num23 = 891;
					break;
				case 94:
				case 182:
					num23 = 892;
					break;
				case 80:
				case 93:
				case 109:
					num23 = 893;
					break;
				case 75:
					num23 = ((Main.rand.Next(2) != 0) ? 890 : 889);
					if (Main.rand.Next(100) == 0)
					{
						num24 = ((num23 != 889) ? 889 : 890);
					}
					break;
				case 79:
					num23 = ((Main.rand.Next(2) != 0) ? 890 : 888);
					if (Main.rand.Next(100) == 0)
					{
						num24 = ((num23 != 888) ? 888 : 890);
					}
					break;
				}
				if (num23 != -1)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, num23, 1, false, -1);
				}
				if (num24 != -1)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, num24, 1, false, -1);
				}
			}
			int num25 = 1;
			if (Main.expertMode && Main.rand.Next(2) == 0)
			{
				num25 = 2;
			}
			for (int l = 0; l < num25; l++)
			{
				if (type == 290)
				{
					if (Main.rand.Next(15) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1513, 1, false, -1);
					}
					else if (Main.rand.Next(10) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 938, 1, false, -1);
					}
				}
				if (type == 287 && Main.rand.Next(6) == 0)
				{
					if (Main.rand.Next(2) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 963, 1, false, -1);
					}
					else
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 977, 1, false, -1);
					}
				}
				if (type == 291)
				{
					if (Main.rand.Next(12) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1300, 1, false, -1);
					}
					else if (Main.rand.Next(12) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1254, 1, false, -1);
					}
				}
				if (type == 292)
				{
					if (Main.rand.Next(12) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1514, 1, false, -1);
					}
					else if (Main.rand.Next(12) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 679, 1, false, -1);
					}
				}
				if (type == 293 && Main.rand.Next(18) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 759, 1, false, -1);
				}
				if ((type == 281 || type == 282) && Main.rand.Next(20) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1446, 1, false, -1);
				}
				if ((type == 283 || type == 284) && Main.rand.Next(20) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1444, 1, false, -1);
				}
				if ((type == 285 || type == 286) && Main.rand.Next(20) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1445, 1, false, -1);
				}
				if (type >= 269 && type <= 280)
				{
					if (Main.rand.Next(400) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1183, 1, false, -1);
					}
					else if (Main.rand.Next(300) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1266, 1, false, -1);
					}
					else if (Main.rand.Next(200) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 671, 1, false, -1);
					}
				}
			}
			if (lifeMax > 100 && type != 288 && value > 0f && target >= 0 && Main.hardMode && downedPlantBoss && Main.player[target].ZoneDungeon)
			{
				int maxValue2 = 13;
				if (Main.expertMode)
				{
					maxValue2 = 9;
				}
				if (Main.rand.Next(maxValue2) == 0 && Main.wallDungeon[Main.tile[(int)base.Center.X / 16, (int)base.Center.Y / 16].wall])
				{
					NewNPC((int)base.Center.X, (int)base.Center.Y, 288);
				}
			}
			if (type == 288)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1508, Main.rand.Next(1, 3), false, -1);
			}
			if (type == 156 && Main.rand.Next(30) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 683, 1, false, -1);
			}
			if ((type == 195 || type == 196) && (Main.expertMode || Main.rand.Next(2) == 0))
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3102, 1, false, -1);
			}
			if (type == 245)
			{
				if (Main.expertMode)
				{
					DropBossBags();
				}
				else
				{
					if (Main.rand.Next(7) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2110, 1, false, -1);
					}
					switch (Main.rand.Next(8))
					{
					case 0:
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1258, 1, false, -1);
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1261, Main.rand.Next(60, 100));
						break;
					case 1:
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1122, 1, false, -1);
						break;
					case 2:
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 899, 1, false, -1);
						break;
					case 3:
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1248, 1, false, -1);
						break;
					case 4:
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1294, 1, false, -1);
						break;
					case 5:
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1295, 1, false, -1);
						break;
					case 6:
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1296, 1, false, -1);
						break;
					case 7:
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1297, 1, false, -1);
						break;
					}
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2218, Main.rand.Next(4, 9), false, -1);
				}
				downedGolemBoss = true;
			}
			if (type == 471 && (Main.expertMode || Main.rand.Next(2) == 0))
			{
				if (Main.rand.Next(3) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3052, 1, false, -1);
				}
				else if (Main.rand.Next(2) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3053, 1, false, -1);
				}
				else
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3054, 1, false, -1);
				}
			}
			if (type == 268)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1332, Main.rand.Next(2, 6));
			}
			if (type == 370)
			{
				downedFishron = true;
				if (Main.expertMode)
				{
					DropBossBags();
				}
				else
				{
					if (Main.rand.Next(7) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2588, 1, false, -1);
					}
					if (Main.rand.Next(15) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2609, 1, false, -1);
					}
					switch (Main.rand.Next(5))
					{
					case 0:
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2611, 1, false, -1);
						break;
					case 1:
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2624, 1, false, -1);
						break;
					case 2:
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2622, 1, false, -1);
						break;
					case 3:
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2621, 1, false, -1);
						break;
					case 4:
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2623, 1, false, -1);
						break;
					}
				}
			}
			if (type == 109 && !downedClown)
			{
				downedClown = true;
				if (Main.netMode == 2)
				{
					NetMessage.SendData(7);
				}
			}
			if (type == 153 && Main.rand.Next(17) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1328, 1, false, -1);
			}
			if (type == 120 && Main.rand.Next(500) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1326, 1, false, -1);
			}
			if (type == 49 && Main.rand.Next(250) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1325, 1, false, -1);
			}
			if (type == 185 && Main.rand.Next(150) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 951, 1, false, -1);
			}
			if (type == 44 && Main.rand.Next(50) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1320, 1, false, -1);
			}
			if (type == 44 && Main.rand.Next(20) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 88, 1, false, -1);
			}
			if (type == 110 && Main.rand.Next(80) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1321, 1, false, -1);
			}
			if (type == 60 && Main.rand.Next(150) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1322, 1, false, -1);
			}
			if (type == 151 && Main.rand.Next(50) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1322, 1, false, -1);
			}
			if (type == 24 && Main.rand.Next(50) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1323, 1, false, -1);
			}
			if (type == 109 && Main.rand.Next(30) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1324, Main.rand.Next(1, 5), false, -1);
			}
			if (type == 163 || type == 238)
			{
				if (Main.rand.Next(40) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1308, 1, false, -1);
				}
				if (Main.expertMode)
				{
					if (Main.rand.Next(3) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2607, Main.rand.Next(2, 4));
					}
					else if (Main.rand.Next(2) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2607, Main.rand.Next(1, 4));
					}
					else
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2607);
					}
				}
				else if (Main.rand.Next(4) != 0)
				{
					if (Main.rand.Next(3) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2607, Main.rand.Next(1, 4));
					}
					else if (Main.rand.Next(2) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2607, Main.rand.Next(1, 3));
					}
					else
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2607);
					}
				}
			}
			if (Main.hardMode && (type == 197 || type == 206 || type == 169 || type == 154) && Main.rand.Next(180) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1306, 1, false, -1);
			}
			if (type == 244)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 23, Main.rand.Next(1, 6));
				if (Main.rand.Next(2) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 23, Main.rand.Next(1, 6));
				}
				if (Main.rand.Next(2) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 23, Main.rand.Next(1, 6));
				}
				if (Main.rand.Next(2) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 23, Main.rand.Next(1, 6));
				}
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 662, Main.rand.Next(30, 60));
			}
			if (type == 250 && Main.rand.Next(15) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1244, 1, false, -1);
			}
			if (type == 172)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 754, 1, false, -1);
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 755, 1, false, -1);
			}
			if (type == 110 && Main.rand.Next(200) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 682, 1, false, -1);
			}
			if (type == 154 && Main.rand.Next(100) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1253, 1, false, -1);
			}
			if ((type == 169 || type == 206) && Main.rand.Next(50) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 726, 1, false, -1);
			}
			if (type == 243)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2161, 1, false, -1);
			}
			if (type == 480 && Main.rand.Next(50) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3269, 1, false, -1);
			}
			if (type == 198 || type == 199 || type == 226)
			{
				if (Main.rand.Next(1000) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1172, 1, false, -1);
				}
				if (Main.rand.Next(50) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1293, 1, false, -1);
				}
				if (Main.rand.Next(7) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2766, Main.rand.Next(1, 3), false, -1);
				}
			}
			if (type == 78 || type == 79 || type == 80)
			{
				if (Main.rand.Next(75) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 870, 1, false, -1);
				}
				if (Main.rand.Next(75) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 871, 1, false, -1);
				}
				if (Main.rand.Next(75) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 872, 1, false, -1);
				}
			}
			if (type == 473)
			{
				switch (Main.rand.Next(5))
				{
				case 0:
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3008, 1, false, -1);
					break;
				case 1:
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3014, 1, false, -1);
					break;
				case 2:
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3012, 1, false, -1);
					break;
				case 3:
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3015, 1, false, -1);
					break;
				case 4:
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3023, 1, false, -1);
					break;
				}
			}
			else if (type == 474)
			{
				switch (Main.rand.Next(5))
				{
				case 0:
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3006, 1, false, -1);
					break;
				case 1:
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3007, 1, false, -1);
					break;
				case 2:
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3013, 1, false, -1);
					break;
				case 3:
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3016, 1, false, -1);
					break;
				case 4:
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3020, 1, false, -1);
					break;
				}
			}
			else if (type == 475)
			{
				switch (Main.rand.Next(4))
				{
				case 0:
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3029, 1, false, -1);
					break;
				case 1:
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3030, 1, false, -1);
					break;
				case 2:
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3051, 1, false, -1);
					break;
				case 3:
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3022, 1, false, -1);
					break;
				}
			}
			else
			{
				int type2 = type;
				int num69 = 476;
			}
			if (type == 473 || type == 474 || type == 475 || type == 476)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 499, Main.rand.Next(5, 11), false, -1);
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 500, Main.rand.Next(5, 16), false, -1);
			}
			if (type == 85 && value > 0f)
			{
				if (ai[3] == 4f)
				{
					if (Main.rand.Next(20) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1312, 1, false, -1);
					}
					else
					{
						switch (Main.rand.Next(3))
						{
						case 0:
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 676, 1, false, -1);
							break;
						case 1:
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 725, 1, false, -1);
							break;
						case 2:
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1264, 1, false, -1);
							break;
						}
					}
				}
				else
				{
					switch (Main.rand.Next(6))
					{
					case 0:
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 437, 1, false, -1);
						break;
					case 1:
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 517, 1, false, -1);
						break;
					case 2:
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 535, 1, false, -1);
						break;
					case 3:
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 536, 1, false, -1);
						break;
					case 4:
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 532, 1, false, -1);
						break;
					default:
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 554, 1, false, -1);
						break;
					}
				}
			}
			if (type == 87)
			{
				if (Main.expertMode)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 575, Main.rand.Next(5, 11) * 2);
				}
				else
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 575, Main.rand.Next(5, 11));
				}
			}
			if (type >= 212 && type <= 215)
			{
				if (Main.rand.Next(8000) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 905, 1, false, -1);
				}
				if (Main.rand.Next(4000) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 855, 1, false, -1);
				}
				if (Main.rand.Next(2000) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 854, 1, false, -1);
				}
				if (Main.rand.Next(2000) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2584, 1, false, -1);
				}
				if (Main.rand.Next(1000) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3033, 1, false, -1);
				}
				if (Main.rand.Next(200) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 672, 1, false, -1);
				}
				if (Main.rand.Next(500) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1277);
				}
				if (Main.rand.Next(500) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1278);
				}
				if (Main.rand.Next(500) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1279);
				}
				if (Main.rand.Next(500) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1280);
				}
				if (Main.rand.Next(300) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1704);
				}
				if (Main.rand.Next(300) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1705);
				}
				if (Main.rand.Next(300) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1710);
				}
				if (Main.rand.Next(300) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1716);
				}
				if (Main.rand.Next(300) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1720);
				}
				if (Main.rand.Next(300) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2379);
				}
				if (Main.rand.Next(300) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2389);
				}
				if (Main.rand.Next(300) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2405);
				}
				if (Main.rand.Next(300) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2843);
				}
				if (Main.rand.Next(300) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2663);
				}
				if (Main.rand.Next(300) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2238);
				}
				if (Main.rand.Next(300) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2133);
				}
				if (Main.rand.Next(300) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2137);
				}
				if (Main.rand.Next(300) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2143);
				}
				if (Main.rand.Next(300) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2147);
				}
				if (Main.rand.Next(300) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2151);
				}
				if (Main.rand.Next(300) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2155);
				}
				if (Main.rand.Next(500) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3263);
				}
				if (Main.rand.Next(500) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3264);
				}
				if (Main.rand.Next(500) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3265);
				}
			}
			else if (type == 216)
			{
				if (Main.rand.Next(2000) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 905, 1, false, -1);
				}
				if (Main.rand.Next(1000) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 855, 1, false, -1);
				}
				if (Main.rand.Next(500) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 854, 1, false, -1);
				}
				if (Main.rand.Next(500) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2584, 1, false, -1);
				}
				if (Main.rand.Next(250) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3033, 1, false, -1);
				}
				if (Main.rand.Next(50) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 672, 1, false, -1);
				}
			}
			else if (type == 491)
			{
				if (Main.rand.Next(400) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 905, 1, false, -1);
				}
				else if (Main.rand.Next(200) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 855, 1, false, -1);
				}
				else if (Main.rand.Next(100) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 854, 1, false, -1);
				}
				else if (Main.rand.Next(100) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2584, 1, false, -1);
				}
				else if (Main.rand.Next(50) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3033, 1, false, -1);
				}
				else if (Main.rand.Next(10) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 672, 1, false, -1);
				}
			}
			if ((type == 161 || type == 431) && Main.rand.Next(50) == 0)
			{
				int num26 = Main.rand.Next(3);
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 803 + num26);
			}
			if (type == 217)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1115, 1, false, -1);
			}
			if (type == 218)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1116, 1, false, -1);
			}
			if (type == 219)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1117, 1, false, -1);
			}
			if (type == 220)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1118, 1, false, -1);
			}
			if (type == 221)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1119, 1, false, -1);
			}
			if (type == 167 && Main.rand.Next(50) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 879, 1, false, -1);
			}
			if (type == 143 || type == 144 || type == 145)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 593, Main.rand.Next(5, 11));
			}
			if (type == 79)
			{
				if (Main.rand.Next(10) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 527);
				}
			}
			else if (type == 80 && Main.rand.Next(10) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 528);
			}
			if (type == 525)
			{
				if (Main.rand.Next(3) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 522, Main.rand.Next(1, 4));
				}
				if (Main.rand.Next(15) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 527);
				}
			}
			if (type == 526)
			{
				if (Main.rand.Next(3) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1332, Main.rand.Next(1, 4));
				}
				if (Main.rand.Next(15) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 527);
				}
			}
			if (type == 527 && Main.rand.Next(15) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 528);
			}
			if (type == 532 && Main.rand.Next(3) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3380);
			}
			if (type == 528)
			{
				if (Main.rand.Next(25) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2802);
				}
			}
			else if (type == 529 && Main.rand.Next(25) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2801);
			}
			if ((type == 49 || type == 51 || type == 150 || type == 93) && Main.rand.Next(100) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 18, 1, false, -1);
			}
			if ((type == 16 || type == 185 || type == 167 || type == 197) && Main.rand.Next(50) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 393, 1, false, -1);
			}
			if (type == 58 && Main.rand.Next(75) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 393, 1, false, -1);
			}
			if (type >= 494 && type <= 506)
			{
				if (Main.rand.Next(80) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 18, 1, false, -1);
				}
				else if (Main.rand.Next(80) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 393, 1, false, -1);
				}
				else if (Main.rand.Next(25) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3285, 1, false, -1);
				}
			}
			if (type == 21 || type == 201 || type == 202 || type == 203 || type == 322 || type == 323 || type == 324 || (type >= 449 && type <= 452))
			{
				if (Main.rand.Next(100) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 954, 1, false, -1);
				}
				else if (Main.rand.Next(200) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 955, 1, false, -1);
				}
				else if (Main.rand.Next(200) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1166, 1, false, -1);
				}
				else if (Main.rand.Next(500) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1274, 1, false, -1);
				}
			}
			else if (type == 6)
			{
				if (Main.rand.Next(175) == 0)
				{
					switch (Main.rand.Next(3))
					{
					case 0:
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 956, 1, false, -1);
						break;
					case 1:
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 957, 1, false, -1);
						break;
					default:
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 958, 1, false, -1);
						break;
					}
				}
			}
			else if (type == 42 || type == 43 || (type >= 231 && type <= 235))
			{
				if (Main.rand.Next(100) == 0)
				{
					switch (Main.rand.Next(3))
					{
					case 0:
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 960, 1, false, -1);
						break;
					case 1:
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 961, 1, false, -1);
						break;
					default:
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 962, 1, false, -1);
						break;
					}
				}
			}
			else if (type == 31 || type == 32 || type == 294 || type == 295 || type == 296)
			{
				if (Main.rand.Next(450) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 959, 1, false, -1);
				}
				if (Main.rand.Next(300) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1307, 1, false, -1);
				}
			}
			if ((type == 174 || type == 179 || type == 182 || type == 183) && Main.rand.Next(200) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 996);
			}
			if (type == 101 || type == 98)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 522, Main.rand.Next(2, 6));
			}
			if (type == 86)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 526);
				if (Main.rand.Next(100) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 856);
				}
			}
			if (type == 186 || type == 432)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 40, Main.rand.Next(1, 10));
			}
			if (type == 225)
			{
				if (Main.rand.Next(45) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1243);
				}
				else
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 23, Main.rand.Next(2, 7));
				}
			}
			if (type == 537)
			{
				int num27 = Main.rand.Next(1, 3);
				if (Main.expertMode)
				{
					if (netID == -7)
					{
						num27++;
					}
					if (netID == -8 || netID == -9)
					{
						num27 += Main.rand.Next(2);
					}
				}
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 23, num27);
				int num28 = 8000;
				if (Main.expertMode)
				{
					num28 = (int)((double)num28 * 0.7);
				}
				if (Main.rand.Next(num28) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1309, 1, false, -1);
				}
			}
			if (type >= 333 && type <= 336 && Main.rand.Next(20) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1906);
			}
			if (netID == -4)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3111, Main.rand.Next(25, 51));
				int num29 = 100;
				if (Main.expertMode)
				{
					num29 = (int)((double)num29 * 0.7);
				}
				if (Main.rand.Next(num29) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1309, 1, false, -1);
				}
			}
			else if (type == 1 || type == 16 || type == 138 || type == 141 || type == 147 || type == 184 || type == 187 || type == 204 || type == 302 || (type >= 333 && type <= 336) || type == 535)
			{
				int num30 = Main.rand.Next(1, 3);
				if (Main.expertMode)
				{
					if (netID == -7)
					{
						num30++;
					}
					if (netID == -8 || netID == -9)
					{
						num30 += Main.rand.Next(2);
					}
				}
				int num31 = Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 23, num30);
				if (netID <= 1 && netID != -1 && netID != -2 && netID != -5 && netID != -6)
				{
					Main.item[num31].color = color;
					NetMessage.SendData(88, -1, -1, "", num31, 1f);
				}
				int num32 = 10000;
				if (Main.expertMode)
				{
					num32 = (int)((double)num32 * 0.7);
				}
				if (Main.rand.Next(num32) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1309, 1, false, -1);
				}
			}
			if (type == 75)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 501, Main.rand.Next(1, 4));
			}
			if (type == 81 || type == 183)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 23, Main.rand.Next(2, 5));
			}
			if (type == 122)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 23, Main.rand.Next(5, 11));
			}
			if (type == 71)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 327);
			}
			if (type == 2 || type == 317 || type == 318 || type == 190 || type == 191 || type == 192 || type == 193 || type == 194 || type == 133)
			{
				if (Main.rand.Next(3) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 38);
				}
				else if (Main.rand.Next(100) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 236);
				}
			}
			if (type == 104 && Main.rand.Next(60) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 485, 1, false, -1);
			}
			if (type == 58)
			{
				if (Main.rand.Next(250) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 263);
				}
				else if (Main.rand.Next(30) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 118);
				}
			}
			if (type == 102 && Main.rand.Next(250) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 263);
			}
			if (type == 3 || type == 331 || type == 332 || type == 132 || type == 161 || type == 186 || type == 187 || type == 188 || type == 189 || type == 200 || type == 223 || type == 319 || type == 320 || type == 321 || (type >= 430 && type <= 436))
			{
				if (Main.rand.Next(50) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 216, 1, false, -1);
				}
				if (Main.rand.Next(250) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1304, 1, false, -1);
				}
			}
			if ((type == 489 || type == 490) && (Main.expertMode || Main.rand.Next(2) == 0))
			{
				if (Main.rand.Next(75) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3212, 1, false, -1);
				}
				if (Main.rand.Next(100) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3213, 1, false, -1);
				}
			}
			if (type == 223 && Main.rand.Next(20) == 0)
			{
				if (Main.rand.Next(2) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1135, 1, false, -1);
				}
				else
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1136, 1, false, -1);
				}
			}
			if (type == 66)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 267);
			}
			if ((type == 62 || type == 66) && Main.rand.Next(35) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 272, 1, false, -1);
			}
			if (value > 0f && Main.hardMode && (double)(base.position.Y / 16f) < Main.worldSurface + 10.0 && (base.Center.X / 16f < 380f || base.Center.X / 16f > (float)(Main.maxTilesX - 380)) && Main.rand.Next(100) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1315);
			}
			if (type == 52)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 251);
			}
			if (type == 53)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 239);
			}
			if (type == 536)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3478);
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3479);
			}
			if (type == 54)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 260);
			}
			if (type == 368)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2222);
			}
			if ((type == 69 || type == 509 || type == 508) && Main.rand.Next(3) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 323, Main.rand.Next(1, 3));
			}
			if (type == 73)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 362, Main.rand.Next(1, 3));
			}
			if ((type == 483 || type == 482) && Main.rand.Next(30) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3109);
			}
			if ((type == 6 || type == 94) && Main.rand.Next(3) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 68);
			}
			if ((type == 181 || type == 173 || type == 239 || type == 182 || type == 240) && Main.rand.Next(3) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1330);
			}
			if (type == 7 || type == 8 || type == 9)
			{
				if (Main.rand.Next(3) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 68, Main.rand.Next(1, 3));
				}
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 69, Main.rand.Next(3, 9));
			}
			if ((type == 10 || type == 11 || type == 12 || type == 95 || type == 96 || type == 97) && (Main.rand.Next(50) == 0 || (Main.expertMode && Main.rand.Next(50) == 0)))
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 215);
			}
			if (type == 47 && Main.rand.Next(75) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 243);
			}
			if (type == 4)
			{
				if (Main.expertMode)
				{
					DropBossBags();
				}
				else
				{
					if (Main.rand.Next(7) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2112, 1, false, -1);
					}
					if (Main.rand.Next(40) == 0 || (Main.expertMode && Main.rand.Next(20) == 0))
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1299);
					}
					if (Main.expertMode)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3097, 1, false, -1);
					}
					int num33 = 1;
					if (Main.expertMode)
					{
						num33 = 2;
					}
					for (int m = 0; m < num33; m++)
					{
						if (WorldGen.crimson)
						{
							int stack = Main.rand.Next(20) + 10;
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 880, stack);
							stack = Main.rand.Next(20) + 10;
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 880, stack);
							stack = Main.rand.Next(20) + 10;
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 880, stack);
							stack = Main.rand.Next(3) + 1;
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2171, stack);
						}
						else
						{
							int stack2 = Main.rand.Next(30) + 20;
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 47, stack2);
							stack2 = Main.rand.Next(20) + 10;
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 56, stack2);
							stack2 = Main.rand.Next(20) + 10;
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 56, stack2);
							stack2 = Main.rand.Next(20) + 10;
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 56, stack2);
							stack2 = Main.rand.Next(3) + 1;
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 59, stack2);
						}
					}
				}
			}
			if (type == 266)
			{
				if (Main.expertMode)
				{
					DropBossBags();
				}
				else
				{
					int stack3 = Main.rand.Next(20, 46);
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 880, stack3);
					stack3 = Main.rand.Next(20, 46);
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 880, stack3);
					if (Main.expertMode)
					{
						stack3 = Main.rand.Next(30, 51);
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 880, stack3);
						stack3 = Main.rand.Next(30, 51);
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 880, stack3);
					}
					if (Main.rand.Next(7) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2104, 1, false, -1);
					}
					if (Main.rand.Next(20) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3060);
					}
					if (Main.expertMode)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3223);
					}
				}
			}
			if (type == 267 && AnyNPCs(266))
			{
				int num34 = Main.rand.Next(2, 6);
				if (Main.rand.Next(3) != 0)
				{
					if (Main.expertMode)
					{
						num34 += Main.rand.Next(2, 6);
					}
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1329, num34);
				}
				if (Main.rand.Next(3) != 0)
				{
					num34 = Main.rand.Next(5, 13);
					if (Main.expertMode)
					{
						num34 += Main.rand.Next(6, 14);
					}
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 880, num34);
				}
				if (Main.rand.Next(2) == 0 && Main.player[Player.FindClosest(base.position, width, height)].statLife < Main.player[Player.FindClosest(base.position, width, height)].statLifeMax2)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 58);
				}
			}
			if (type == 13 || type == 14 || type == 15)
			{
				int num35 = Main.rand.Next(1, 3);
				if (Main.rand.Next(2) == 0)
				{
					if (Main.expertMode)
					{
						num35++;
					}
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 86, num35);
				}
				if (Main.rand.Next(2) == 0)
				{
					num35 = Main.rand.Next(2, 6);
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 56, num35);
				}
				if (boss)
				{
					if (Main.expertMode)
					{
						DropBossBags();
					}
					else
					{
						num35 = Main.rand.Next(10, 30);
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 56, num35);
						num35 = Main.rand.Next(10, 31);
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 56, num35);
						if (Main.expertMode)
						{
							num35 = Main.rand.Next(10, 30);
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 56, num35);
							num35 = Main.rand.Next(10, 31);
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 56, num35);
						}
						if (Main.expertMode)
						{
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3224);
						}
						if (Main.rand.Next(20) == 0)
						{
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 994);
						}
						if (Main.rand.Next(7) == 0)
						{
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2111, 1, false, -1);
						}
					}
				}
				if (Main.rand.Next(4) == 0 && Main.player[Player.FindClosest(base.position, width, height)].statLife < Main.player[Player.FindClosest(base.position, width, height)].statLifeMax2)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 58);
				}
			}
			if (type == 222)
			{
				if (Main.expertMode)
				{
					DropBossBags();
				}
				else
				{
					if (Main.rand.Next(7) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2108, 1, false, -1);
					}
					int num36 = Main.rand.Next(3);
					switch (num36)
					{
					case 0:
						num36 = 1121;
						break;
					case 1:
						num36 = 1123;
						break;
					case 2:
						num36 = 2888;
						break;
					}
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, num36, 1, false, -1);
					if (Main.expertMode)
					{
						int num37 = Main.rand.Next(3);
						switch (num37)
						{
						case 0:
							num37 = 1121;
							break;
						case 1:
							num37 = 1123;
							break;
						case 2:
							num37 = 2888;
							break;
						}
						while (num37 == num36)
						{
							num37 = Main.rand.Next(3);
							switch (num37)
							{
							case 0:
								num37 = 1121;
								break;
							case 1:
								num37 = 1123;
								break;
							case 2:
								num37 = 2888;
								break;
							}
						}
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, num37, 1, false, -1);
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1132, 1, false, -1);
					}
					else if (Main.rand.Next(3) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1132, 1, false, -1);
					}
					if ((Main.expertMode && Main.rand.Next(15) == 0) || Main.rand.Next(15) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1170);
					}
					if ((Main.expertMode && Main.rand.Next(20) == 0) || Main.rand.Next(20) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2502);
					}
					if (Main.expertMode)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1129);
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, Main.rand.Next(842, 845));
					}
					else if (Main.rand.Next(3) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1129);
					}
					else if (Main.rand.Next(2) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, Main.rand.Next(842, 845));
					}
					if (Main.rand.Next(4) != 0 || Main.expertMode)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1130, Main.rand.Next(10, 30));
						if (Main.expertMode)
						{
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1130, Main.rand.Next(10, 30));
						}
					}
					if (Main.expertMode)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2431, Main.rand.Next(44, 67));
					}
					else
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2431, Main.rand.Next(16, 27));
					}
				}
				downedQueenBee = true;
				if (Main.netMode == 2)
				{
					NetMessage.SendData(7);
				}
			}
			if (type == 35)
			{
				if (Main.expertMode)
				{
					DropBossBags();
				}
				else if (Main.rand.Next(7) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1281, 1, false, -1);
				}
				else if (Main.rand.Next(7) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1273, 1, false, -1);
				}
				else if (Main.rand.Next(7) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1313, 1, false, -1);
				}
			}
			if (type == 113)
			{
				if (Main.expertMode)
				{
					DropBossBags();
				}
				else
				{
					if (Main.rand.Next(7) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2105, 1, false, -1);
					}
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 367, 1, false, -1);
					if (Main.expertMode)
					{
						int num38 = Main.rand.Next(4);
						num38 = ((num38 != 3) ? (489 + num38) : 2998);
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, num38, 1, false, -1);
						switch (Main.rand.Next(3))
						{
						case 0:
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 514, 1, false, -1);
							break;
						case 1:
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 426, 1, false, -1);
							break;
						case 2:
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 434, 1, false, -1);
							break;
						}
					}
					else if (Main.rand.Next(2) == 0)
					{
						int num39 = Main.rand.Next(4);
						num39 = ((num39 != 3) ? (489 + num39) : 2998);
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, num39, 1, false, -1);
					}
					else
					{
						switch (Main.rand.Next(3))
						{
						case 0:
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 514, 1, false, -1);
							break;
						case 1:
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 426, 1, false, -1);
							break;
						case 2:
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 434, 1, false, -1);
							break;
						}
					}
				}
				if (Main.netMode != 1)
				{
					int num40 = (int)(base.position.X + (float)(width / 2)) / 16;
					int num41 = (int)(base.position.Y + (float)(height / 2)) / 16;
					int num42 = width / 2 / 16 + 1;
					for (int n = num40 - num42; n <= num40 + num42; n++)
					{
						for (int num43 = num41 - num42; num43 <= num41 + num42; num43++)
						{
							if ((n == num40 - num42 || n == num40 + num42 || num43 == num41 - num42 || num43 == num41 + num42) && !Main.tile[n, num43].active())
							{
								Main.tile[n, num43].type = (ushort)(WorldGen.crimson ? 347 : 140);
								Main.tile[n, num43].active(true);
							}
							Main.tile[n, num43].lava(false);
							Main.tile[n, num43].liquid = 0;
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, n, num43, 1);
							}
							else
							{
								WorldGen.SquareTileFrame(n, num43);
							}
						}
					}
				}
			}
			if (type == 439)
			{
				downedAncientCultist = true;
				if (Main.rand.Next(7) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3372, 1, false, -1);
				}
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3549, 1, false, -1);
				WorldGen.TriggerLunarApocalypse();
			}
			if (type == 398)
			{
				downedMoonlord = true;
				LunarApocalypseIsUp = false;
				if (Main.expertMode)
				{
					DropBossBags();
				}
				else
				{
					if (Main.rand.Next(7) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3373, 1, false, -1);
					}
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3384, 1, false, -1);
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3460, Main.rand.Next(70, 91), false, -1);
					int num44 = Utils.SelectRandom<int>(Main.rand, 3063, 3389, 3065, 1553, 3546, 3541, 3570, 3571, 3569);
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, num44, 1, false, -1);
				}
			}
			switch (type)
			{
			case 412:
			case 413:
			case 414:
			case 415:
			case 416:
			case 417:
			case 418:
			case 419:
			case 518:
				if (ShieldStrengthTowerSolar > 0)
				{
					Projectile.NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 629, 0, 0f, Main.myPlayer, FindFirstNPC(517));
				}
				break;
			case 425:
			case 426:
			case 427:
			case 429:
				if (ShieldStrengthTowerVortex > 0)
				{
					Projectile.NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 629, 0, 0f, Main.myPlayer, FindFirstNPC(422));
				}
				break;
			case 420:
			case 421:
			case 423:
			case 424:
				if (ShieldStrengthTowerNebula > 0)
				{
					Projectile.NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 629, 0, 0f, Main.myPlayer, FindFirstNPC(507));
				}
				break;
			case 402:
			case 405:
			case 407:
			case 409:
			case 411:
				if ((type != 406 || Main.rand.Next(3) == 0) && ShieldStrengthTowerStardust > 0)
				{
					Projectile.NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 629, 0, 0f, Main.myPlayer, FindFirstNPC(493));
				}
				break;
			case 517:
			{
				int num47 = Main.rand.Next(25, 41) / 2;
				if (Main.expertMode)
				{
					num47 = (int)((float)num47 * 1.5f);
				}
				for (int num48 = 0; num48 < num47; num48++)
				{
					Item.NewItem((int)base.position.X + Main.rand.Next(width), (int)base.position.Y + Main.rand.Next(height), 2, 2, 3458, Main.rand.Next(1, 4));
				}
				downedTowerSolar = true;
				TowerActiveSolar = false;
				WorldGen.UpdateLunarApocalypse();
				WorldGen.MessageLunarApocalypse();
				break;
			}
			case 422:
			{
				int num49 = Main.rand.Next(25, 41) / 2;
				if (Main.expertMode)
				{
					num49 = (int)((float)num49 * 1.5f);
				}
				for (int num50 = 0; num50 < num49; num50++)
				{
					Item.NewItem((int)base.position.X + Main.rand.Next(width), (int)base.position.Y + Main.rand.Next(height), 2, 2, 3456, Main.rand.Next(1, 4));
				}
				downedTowerVortex = true;
				TowerActiveVortex = false;
				WorldGen.UpdateLunarApocalypse();
				WorldGen.MessageLunarApocalypse();
				break;
			}
			case 507:
			{
				int num51 = Main.rand.Next(25, 41) / 2;
				if (Main.expertMode)
				{
					num51 = (int)((float)num51 * 1.5f);
				}
				for (int num52 = 0; num52 < num51; num52++)
				{
					Item.NewItem((int)base.position.X + Main.rand.Next(width), (int)base.position.Y + Main.rand.Next(height), 2, 2, 3457, Main.rand.Next(1, 4));
				}
				downedTowerNebula = true;
				TowerActiveNebula = false;
				WorldGen.UpdateLunarApocalypse();
				WorldGen.MessageLunarApocalypse();
				break;
			}
			case 493:
			{
				int num45 = Main.rand.Next(25, 41) / 2;
				if (Main.expertMode)
				{
					num45 = (int)((float)num45 * 1.5f);
				}
				for (int num46 = 0; num46 < num45; num46++)
				{
					Item.NewItem((int)base.position.X + Main.rand.Next(width), (int)base.position.Y + Main.rand.Next(height), 2, 2, 3459, Main.rand.Next(1, 4));
				}
				downedTowerStardust = true;
				TowerActiveStardust = false;
				WorldGen.UpdateLunarApocalypse();
				WorldGen.MessageLunarApocalypse();
				break;
			}
			}
			switch (type)
			{
			case 381:
			case 382:
			case 383:
			case 385:
			case 386:
			case 389:
			case 390:
			case 520:
				if (Main.rand.Next(8) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2860, Main.rand.Next(8, 21));
				}
				break;
			}
			int num53 = type;
			if (num53 == 383 || num53 == 386 || num53 == 389)
			{
				if (Main.rand.Next(200) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2806);
				}
				if (Main.rand.Next(200) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2807);
				}
				if (Main.rand.Next(200) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2808);
				}
			}
			switch (type)
			{
			case 381:
			case 382:
			case 385:
			case 390:
				if (Main.rand.Next(200) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2803);
				}
				if (Main.rand.Next(200) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2804);
				}
				if (Main.rand.Next(200) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2805);
				}
				break;
			}
			if (type == 395)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, Utils.SelectRandom<int>(Main.rand, 2797, 2749, 2795, 2798, 2796, 2882, 2880, 2769, 2800));
			}
			if (type == 390 && Main.rand.Next(100) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2771);
			}
			if ((type == 116 || type == 117 || type == 118 || type == 119) && (!Main.expertMode || Main.rand.Next(5) == 0))
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 58);
			}
			if (type == 139 && Main.rand.Next(2) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 58);
			}
			if (type == 63 || type == 64 || type == 103)
			{
				if (Main.rand.Next(100) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1303, 1, false, -1);
				}
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 282, Main.rand.Next(1, 5));
			}
			if (type == 481 && Main.rand.Next(2) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3094, Main.rand.Next(40, 81));
			}
			if (type == 481 && Main.rand.Next(20) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3187 + Main.rand.Next(3));
			}
			if (type == 21 || type == 44 || type == 167 || type == 201 || type == 202 || type == 481 || type == 203 || type == 322 || type == 323 || type == 324 || (type >= 449 && type <= 452))
			{
				if (Main.rand.Next(25) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 118);
				}
				else if (type == 44)
				{
					if (Main.rand.Next(20) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, Main.rand.Next(410, 412));
					}
					else
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 166, Main.rand.Next(1, 4));
					}
				}
			}
			if (type == 45)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 238);
			}
			if (type == 50)
			{
				if (Main.slimeRain)
				{
					Main.StopSlimeRain();
					AchievementsHelper.NotifyProgressionEvent(16);
				}
				if (Main.expertMode)
				{
					DropBossBags();
				}
				else
				{
					if (Main.rand.Next(4) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2430);
					}
					if (Main.rand.Next(7) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2493, 1, false, -1);
					}
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, Main.rand.Next(256, 259));
					Main.rand.Next(2);
					if (Main.rand.Next(3) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2585);
					}
					else
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2610);
					}
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 998);
				}
				downedSlimeKing = true;
				if (Main.netMode == 2)
				{
					NetMessage.SendData(7);
				}
			}
			if (type == 23 && Main.rand.Next(50) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 116);
			}
			if (type == 24 && Main.rand.Next(250) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 244);
			}
			if (type == 31 || type == 32 || type == 34)
			{
				if (Main.rand.Next(250) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 932);
				}
				else if (Main.rand.Next(100) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3095);
				}
				else if (Main.rand.Next(65) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 327);
				}
				else if (!Main.expertMode)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 154, Main.rand.Next(1, 4));
				}
				if (Main.expertMode)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 154, Main.rand.Next(2, 7));
				}
			}
			if (type == 26 || type == 27 || type == 28 || type == 29 || type == 111)
			{
				if (Main.rand.Next(200) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 160);
				}
				else if (Main.rand.Next(2) == 0)
				{
					int stack4 = Main.rand.Next(1, 6);
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 161, stack4);
				}
			}
			if (type == 175 && Main.rand.Next(100) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1265, 1, false, -1);
			}
			if ((type == 42 || (type >= 231 && type <= 235)) && (Main.expertMode || Main.rand.Next(3) != 0))
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 209);
			}
			if (type == 204 && (Main.expertMode || Main.rand.Next(2) == 0))
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 209);
			}
			if (type == 43 && (Main.expertMode || Main.rand.Next(2) == 0))
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 210);
			}
			if (type == 65)
			{
				if (Main.rand.Next(50) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 268);
				}
				else
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 319);
				}
			}
			if (type == 48 && Main.rand.Next(2) == 0)
			{
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 320);
			}
			if (type == 125 || type == 126)
			{
				int num54 = 125;
				if (type == 125)
				{
					num54 = 126;
				}
				if (!AnyNPCs(num54))
				{
					if (Main.expertMode)
					{
						DropBossBags();
					}
					else
					{
						if (Main.rand.Next(7) == 0)
						{
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2106, 1, false, -1);
						}
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 549, Main.rand.Next(25, 41));
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1225, Main.rand.Next(15, 31));
					}
				}
				else
				{
					value = 0f;
					boss = false;
				}
			}
			else if (Main.expertMode)
			{
				if (type == 127 || type == 134)
				{
					DropBossBags();
				}
			}
			else if (type == 127)
			{
				if (Main.rand.Next(7) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2107, 1, false, -1);
				}
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 547, Main.rand.Next(25, 41));
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1225, Main.rand.Next(15, 31));
			}
			else if (type == 134)
			{
				if (Main.rand.Next(7) == 0)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2113, 1, false, -1);
				}
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 548, Main.rand.Next(25, 41));
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1225, Main.rand.Next(15, 31));
			}
			if (type == 262)
			{
				if (Main.expertMode)
				{
					DropBossBags();
				}
				else
				{
					if (Main.rand.Next(7) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2109, 1, false, -1);
					}
					if (Main.expertMode)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1141, Main.rand.Next(2, 4), false, -1);
					}
					else
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1141, 1, false, -1);
					}
					if (Main.rand.Next(20) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1182, 1, false, -1);
					}
					if (Main.rand.Next(50) == 0 || (Main.expertMode && Main.rand.Next(50) == 0))
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1305, 1, false, -1);
					}
					if (Main.rand.Next(4) == 0 || Main.expertMode)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1157, 1, false, -1);
					}
					if (Main.rand.Next(10) == 0)
					{
						Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3021, 1, false, -1);
					}
					int num55 = 1;
					if (Main.expertMode)
					{
						num55 = 2;
					}
					int num56 = 0;
					for (int num57 = 0; num57 < num55; num57++)
					{
						int num58 = Main.rand.Next(7);
						if (!downedPlantBoss)
						{
							num58 = 0;
						}
						if (num57 == 0)
						{
							num56 = num58;
						}
						else
						{
							while (num56 == num58)
							{
								num58 = Main.rand.Next(7);
							}
						}
						switch (num58)
						{
						case 0:
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 758, 1, false, -1);
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 771, Main.rand.Next(50, 150));
							break;
						case 1:
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1255, 1, false, -1);
							break;
						case 2:
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 788, 1, false, -1);
							break;
						case 3:
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1178, 1, false, -1);
							break;
						case 4:
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1259, 1, false, -1);
							break;
						case 5:
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1155, 1, false, -1);
							break;
						case 6:
							Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3018, 1, false, -1);
							break;
						}
					}
				}
				bool flag3 = downedPlantBoss;
				downedPlantBoss = true;
				if (!flag3)
				{
					if (Main.netMode == 0)
					{
						Main.NewText(Lang.misc[33].Value, 50, byte.MaxValue, 130);
					}
					else if (Main.netMode == 2)
					{
						NetMessage.SendData(25, -1, -1, Lang.misc[33].Value, 16, 50f, 255f, 130f);
					}
				}
			}
			if ((boss || type == 125 || type == 126 || type == 491) && Main.rand.Next(10) == 0)
			{
				if (type == 4)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1360);
				}
				if (type == 13 || type == 14 || type == 15)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1361);
				}
				if (type == 266)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1362);
				}
				if (type == 35)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1363);
				}
				if (type == 222)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1364);
				}
				if (type == 113)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1365);
				}
				if (type == 134)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1366);
				}
				if (type == 127)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1367);
				}
				if (type == 125)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1368);
				}
				if (type == 126)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1369);
				}
				if (type == 262)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1370);
				}
				if (type == 245)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 1371);
				}
				if (type == 50)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2489);
				}
				if (type == 370)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 2589);
				}
				if (type == 439)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3357);
				}
				if (type == 491)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3359);
				}
				if (type == 395)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3358);
				}
				if (type == 398)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 3595);
				}
			}
			if (boss)
			{
				if (type == 4)
				{
					downedBoss1 = true;
				}
				else if (type == 13 || type == 14 || type == 15)
				{
					downedBoss2 = true;
				}
				else if (type == 266)
				{
					downedBoss2 = true;
				}
				else if (type == 35)
				{
					downedBoss3 = true;
				}
				if (type == 127)
				{
					downedMechBoss3 = true;
					downedMechBossAny = true;
				}
				if (type == 134)
				{
					downedMechBoss1 = true;
					downedMechBossAny = true;
				}
				string typeName = TypeName;
				int stack5 = Main.rand.Next(5, 16);
				int num59 = 28;
				if (type == 113)
				{
					num59 = 188;
				}
				else if (type == 222)
				{
					num59 = 1134;
				}
				else if (type > 113 && type < 222)
				{
					num59 = 499;
				}
				else if (type == 245 || type == 262)
				{
					num59 = 499;
				}
				else if (type == 370)
				{
					num59 = 499;
				}
				else if (type == 395)
				{
					num59 = 499;
				}
				else if (type == 439)
				{
					num59 = 499;
				}
				else if (type == 398)
				{
					num59 = 499;
				}
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, num59, stack5);
				int num60 = Main.rand.Next(5) + 5;
				for (int num61 = 0; num61 < num60; num61++)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 58);
				}
				if (type == 125 || type == 126)
				{
					downedMechBoss2 = true;
					downedMechBossAny = true;
					if (Main.netMode == 0)
					{
						Main.NewText(Language.GetTextValue("Announcement.HasBeenDefeated_Plural", Language.GetTextValue("Enemies.TheTwins")), 175, 75);
					}
					else if (Main.netMode == 2)
					{
						NetMessage.SendData(25, -1, -1, Language.GetTextValue("Announcement.HasBeenDefeated_Plural", Language.GetTextValue("Enemies.TheTwins")), 16, 175f, 75f, 255f);
					}
				}
				else if (type == 398)
				{
					if (Main.netMode == 0)
					{
						Main.NewText(Language.GetTextValue("Announcement.HasBeenDefeated_Single", Language.GetTextValue("Enemies.MoonLord")), 175, 75);
					}
					else if (Main.netMode == 2)
					{
						NetMessage.SendData(25, -1, -1, Language.GetTextValue("Announcement.HasBeenDefeated_Single", Language.GetTextValue("Enemies.MoonLord")), 16, 175f, 75f, 255f);
					}
				}
				else if (Main.netMode == 0)
				{
					Main.NewText(Language.GetTextValue("Announcement.HasBeenDefeated_Single", typeName), 175, 75);
				}
				else if (Main.netMode == 2)
				{
					NetMessage.SendData(25, -1, -1, Language.GetTextValue("Announcement.HasBeenDefeated_Single", typeName), 16, 175f, 75f, 255f);
				}
				if (type == 113 && Main.netMode != 1)
				{
					bool hardMode = Main.hardMode;
					WorldGen.StartHardmode();
					if (downedMechBoss1 && downedMechBoss2 && downedMechBoss3 && !hardMode)
					{
						if (Main.netMode == 0)
						{
							Main.NewText(Lang.misc[32].Value, 50, byte.MaxValue, 130);
						}
						else if (Main.netMode == 2)
						{
							NetMessage.SendData(25, -1, -1, Lang.misc[32].Value, 16, 50f, 255f, 130f);
						}
					}
				}
				if (Main.netMode == 2)
				{
					NetMessage.SendData(7);
				}
			}
			if (!flag && downedMechBoss1 && downedMechBoss2 && downedMechBoss3 && Main.hardMode)
			{
				if (Main.netMode == 0)
				{
					Main.NewText(Lang.misc[32].Value, 50, byte.MaxValue, 130);
				}
				else if (Main.netMode == 2)
				{
					NetMessage.SendData(25, -1, -1, Lang.misc[32].Value, 16, 50f, 255f, 130f);
				}
			}
			if (type != 16 && type != 81 && type != 121 && Main.rand.Next(6) == 0 && lifeMax > 1 && damage > 0)
			{
				int num62 = Player.FindClosest(base.position, width, height);
				if (Main.rand.Next(2) == 0 && Main.player[num62].statMana < Main.player[num62].statManaMax2)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 184);
				}
				else if (Main.rand.Next(2) == 0 && Main.player[num62].statLife < Main.player[num62].statLifeMax2)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 58);
				}
			}
			if (type != 16 && type != 81 && type != 121 && Main.rand.Next(2) == 0 && lifeMax > 1 && damage > 0)
			{
				int num63 = Player.FindClosest(base.position, width, height);
				if (Main.player[num63].statMana < Main.player[num63].statManaMax2)
				{
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 184);
				}
			}
			float num64 = value;
			if (midas)
			{
				num64 *= 1f + (float)Main.rand.Next(10, 50) * 0.01f;
			}
			num64 *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
			if (Main.rand.Next(5) == 0)
			{
				num64 *= 1f + (float)Main.rand.Next(5, 11) * 0.01f;
			}
			if (Main.rand.Next(10) == 0)
			{
				num64 *= 1f + (float)Main.rand.Next(10, 21) * 0.01f;
			}
			if (Main.rand.Next(15) == 0)
			{
				num64 *= 1f + (float)Main.rand.Next(15, 31) * 0.01f;
			}
			if (Main.rand.Next(20) == 0)
			{
				num64 *= 1f + (float)Main.rand.Next(20, 41) * 0.01f;
			}
			num64 += extraValue;
			while ((int)num64 > 0)
			{
				if (num64 > 1000000f)
				{
					int num65 = (int)(num64 / 1000000f);
					if (num65 > 50 && Main.rand.Next(5) == 0)
					{
						num65 /= Main.rand.Next(3) + 1;
					}
					if (Main.rand.Next(5) == 0)
					{
						num65 /= Main.rand.Next(3) + 1;
					}
					num64 -= (float)(1000000 * num65);
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 74, num65);
					continue;
				}
				if (num64 > 10000f)
				{
					int num66 = (int)(num64 / 10000f);
					if (num66 > 50 && Main.rand.Next(5) == 0)
					{
						num66 /= Main.rand.Next(3) + 1;
					}
					if (Main.rand.Next(5) == 0)
					{
						num66 /= Main.rand.Next(3) + 1;
					}
					num64 -= (float)(10000 * num66);
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 73, num66);
					continue;
				}
				if (num64 > 100f)
				{
					int num67 = (int)(num64 / 100f);
					if (num67 > 50 && Main.rand.Next(5) == 0)
					{
						num67 /= Main.rand.Next(3) + 1;
					}
					if (Main.rand.Next(5) == 0)
					{
						num67 /= Main.rand.Next(3) + 1;
					}
					num64 -= (float)(100 * num67);
					Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 72, num67);
					continue;
				}
				int num68 = (int)num64;
				if (num68 > 50 && Main.rand.Next(5) == 0)
				{
					num68 /= Main.rand.Next(3) + 1;
				}
				if (Main.rand.Next(5) == 0)
				{
					num68 /= Main.rand.Next(4) + 1;
				}
				if (num68 < 1)
				{
					num68 = 1;
				}
				num64 -= (float)num68;
				Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, 71, num68);
			}
		}

		public static void CatchNPC(int i, int who = -1)
		{
			if (Main.npc[i].active)
			{
				if (Main.netMode == 1)
				{
					Main.npc[i].active = false;
					NetMessage.SendData(70, -1, -1, "", i, who);
				}
				else if (Main.npc[i].catchItem > 0)
				{
					int type2 = Main.npc[i].type;
					Item ıtem = new Item();
					ıtem.SetDefaults(Main.npc[i].catchItem);
					Item.NewItem((int)Main.player[who].Center.X, (int)Main.player[who].Center.Y, 0, 0, Main.npc[i].catchItem, 1, false, 0, true);
					Main.npc[i].active = false;
					NetMessage.SendData(23, -1, -1, "", i);
				}
			}
		}

		public void DropBossBags()
		{
			int num = -1;
			if (type == 50)
			{
				num = 3318;
			}
			if (type == 4)
			{
				num = 3319;
			}
			if (type >= 13 && type <= 15)
			{
				num = 3320;
			}
			if (type == 266)
			{
				num = 3321;
			}
			if (type == 222)
			{
				num = 3322;
			}
			if (type == 35)
			{
				num = 3323;
			}
			if (type == 113)
			{
				num = 3324;
			}
			if (type == 134)
			{
				num = 3325;
			}
			if (type == 125 || type == 126)
			{
				num = 3326;
			}
			if (type == 127)
			{
				num = 3327;
			}
			if (type == 262)
			{
				num = 3328;
			}
			if (type == 245)
			{
				num = 3329;
			}
			if (type == 370)
			{
				num = 3330;
			}
			if (type == 439)
			{
				num = 3331;
			}
			if (type == 398)
			{
				num = 3332;
			}
			if (num <= 0)
			{
				return;
			}
			if (Main.netMode == 2)
			{
				int num2 = Item.NewItem((int)position.X, (int)position.Y, width, height, num, 1, true);
				Main.itemLockoutTime[num2] = 54000;
				for (int i = 0; i < 16; i++)
				{
					if (playerInteraction[i] && Main.player[i].active)
					{
						NetMessage.SendData(90, i, -1, "", num2);
					}
				}
				Main.item[num2].active = false;
			}
			else if (Main.netMode == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, num);
			}
			value = 0f;
		}

		public void PlayerInteraction(int player)
		{
			if (playerInteraction[player])
			{
				return;
			}
			if (type == 13 || type == 14 || type == 15)
			{
				for (int i = 0; i < 200; i++)
				{
					if (i != whoAmI && Main.npc[i].active && (Main.npc[i].type == 13 || Main.npc[i].type == 14 || Main.npc[i].type == 15))
					{
						Main.npc[i].ApplyInteraction(player);
					}
				}
			}
			if (type == 134 || type == 135 || type == 136)
			{
				for (int j = 0; j < 200; j++)
				{
					if (j != whoAmI && Main.npc[j].active && (Main.npc[j].type == 134 || Main.npc[j].type == 135 || Main.npc[j].type == 136))
					{
						Main.npc[j].ApplyInteraction(player);
					}
				}
			}
			if (type == 35 || type == 36)
			{
				for (int k = 0; k < 200; k++)
				{
					if (k != whoAmI && Main.npc[k].active && (Main.npc[k].type == 35 || Main.npc[k].type == 36))
					{
						Main.npc[k].ApplyInteraction(player);
					}
				}
			}
			if (type == 113 || type == 114)
			{
				for (int l = 0; l < 200; l++)
				{
					if (l != whoAmI && Main.npc[l].active && (Main.npc[l].type == 113 || Main.npc[l].type == 114))
					{
						Main.npc[l].ApplyInteraction(player);
					}
				}
			}
			if (type >= 127 && type <= 131)
			{
				for (int m = 0; m < 200; m++)
				{
					if (m != whoAmI && Main.npc[m].active && Main.npc[m].type >= 127 && Main.npc[m].type <= 131)
					{
						Main.npc[m].ApplyInteraction(player);
					}
				}
			}
			if (type >= 245 && type <= 249)
			{
				for (int n = 0; n < 200; n++)
				{
					if (n != whoAmI && Main.npc[n].active && Main.npc[n].type >= 245 && Main.npc[n].type <= 249)
					{
						Main.npc[n].ApplyInteraction(player);
					}
				}
			}
			if ((type == 396 || type == 397) && Main.npc[(int)ai[3]].active && Main.npc[(int)ai[3]].type == 398)
			{
				Main.npc[(int)ai[3]].ApplyInteraction(player);
			}
			if ((type == 393 || type == 394) && Main.npc[(int)ai[0]].active && Main.npc[(int)ai[0]].type == 395)
			{
				Main.npc[(int)ai[0]].ApplyInteraction(player);
			}
			if (type == 492 && Main.npc[(int)ai[0]].active && Main.npc[(int)ai[0]].type == 491)
			{
				Main.npc[(int)ai[0]].ApplyInteraction(player);
			}
			ApplyInteraction(player);
		}

		public void ApplyInteraction(int player)
		{
			playerInteraction[player] = true;
			if (player < 16)
			{
				lastInteraction = player;
			}
		}

		public static bool CanReleaseNPCs(int who)
		{
			float num = 0.7f;
			if (Main.netMode != 1)
			{
				num += 0.05f;
			}
			int num2 = 0;
			int num3 = 0;
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active)
				{
					num3++;
					if (Main.npc[i].releaseOwner == who)
					{
						num2++;
					}
				}
			}
			int num4 = 0;
			for (int j = 0; j < 16; j++)
			{
				if (Main.player[j].active)
				{
					num4++;
				}
			}
			int num5 = (int)(200f * num / (float)num4);
			if ((float)num3 < 200f * num && num2 < num5)
			{
				return true;
			}
			return false;
		}

		public static void ReleaseNPC(int x, int y, int Type, int Style, int who)
		{
			if (Main.netMode == 1)
			{
				NetMessage.SendData(71, -1, -1, "", x, y, Type, Style);
			}
			else
			{
				if (!Main.npcCatchable[Type] || !CanReleaseNPCs(who))
				{
					return;
				}
				if (Type == 148)
				{
					int num = Type + Main.rand.Next(2);
					int num2 = NewNPC(x, y, num);
					Main.npc[num2].releaseOwner = (short)who;
					return;
				}
				int num3 = NewNPC(x, y, Type);
				if (Type == 356)
				{
					Main.npc[num3].ai[2] = Style;
				}
				Main.npc[num3].releaseOwner = (short)who;
			}
		}

		public static void SlimeRainSpawns(int plr)
		{
			float num = 15f;
			Player player = Main.player[plr];
			if ((double)player.position.Y > Main.worldSurface * 16.0 + (double)(Main.maxScreenH / 2) || player.activeNPCs > num)
			{
				return;
			}
			float num2 = player.activeNPCs / num;
			int num3 = 45 + (int)(450f * num2);
			if (Main.expertMode)
			{
				num3 = (int)((double)num3 * 0.85);
			}
			if (Main.rand.Next(num3) != 0)
			{
				return;
			}
			int num4 = (int)(player.Center.X - (float)Main.maxScreenW);
			int maxValue = num4 + Main.maxScreenW * 2;
			int minValue = (int)((double)player.Center.Y - (double)Main.maxScreenH * 1.5);
			int maxValue2 = (int)((double)player.Center.Y - (double)Main.maxScreenH * 0.75);
			int num5 = Main.rand.Next(num4, maxValue);
			int num6 = Main.rand.Next(minValue, maxValue2);
			num5 /= 16;
			num6 /= 16;
			if (num5 < 10 || num5 > Main.maxTilesX + 10 || (double)num6 < Main.worldSurface * 0.3 || (double)num6 > Main.worldSurface || Collision.SolidTiles(num5 - 3, num5 + 3, num6 - 5, num6 + 2) || Main.wallHouse[Main.tile[num5, num6].wall])
			{
				return;
			}
			int num7 = NewNPC(num5 * 16 + 8, num6 * 16, 1);
			if (Main.rand.Next(200) == 0)
			{
				Main.npc[num7].netDefaults(-4);
			}
			else if (Main.expertMode)
			{
				if (Main.rand.Next(7) == 0)
				{
					Main.npc[num7].netDefaults(-7);
				}
				else if (Main.rand.Next(3) == 0)
				{
					Main.npc[num7].netDefaults(-3);
				}
			}
			else if (Main.rand.Next(10) == 0)
			{
				Main.npc[num7].netDefaults(-7);
			}
			else if (Main.rand.Next(5) < 2)
			{
				Main.npc[num7].netDefaults(-3);
			}
		}

		public static void SpawnNPC()
		{
			if (noSpawnCycle)
			{
				noSpawnCycle = false;
				return;
			}
			bool flag = false;
			bool flag2 = false;
			int num = 0;
			int num2 = 0;
			int num3 = 0;
			int num4 = 0;
			for (int i = 0; i < 16; i++)
			{
				if (Main.player[i].active)
				{
					num4++;
				}
			}
			int num5 = 0;
			bool flag3;
			bool flag4;
			bool flag5;
			bool flag6;
			bool flag8;
			bool flag9;
			bool flag10;
			bool flag11;
			bool flag12;
			bool flag13;
			bool flag14;
			while (true)
			{
				if (num5 >= 16)
				{
					return;
				}
				if (Main.player[num5].active && !Main.player[num5].dead)
				{
					if (Main.slimeRain)
					{
						SlimeRainSpawns(num5);
					}
					flag3 = false;
					flag4 = false;
					flag5 = false;
					flag6 = false;
					bool flag7 = false;
					flag8 = false;
					flag9 = false;
					flag10 = false;
					flag11 = false;
					flag12 = false;
					flag13 = (downedPlantBoss && Main.hardMode);
					if (Main.player[num5].active && Main.invasionType > 0 && Main.invasionDelay == 0 && Main.invasionSize > 0 && (double)Main.player[num5].position.Y < Main.worldSurface * 16.0 + (double)sHeight)
					{
						int num6 = 3000;
						if ((double)Main.player[num5].position.X > Main.invasionX * 16.0 - (double)num6 && (double)Main.player[num5].position.X < Main.invasionX * 16.0 + (double)num6)
						{
							flag5 = true;
						}
						else if (Main.invasionX >= (double)(Main.maxTilesX / 2 - 5) && Main.invasionX <= (double)(Main.maxTilesX / 2 + 5))
						{
							for (int j = 0; j < 200; j++)
							{
								if (Main.npc[j].townNPC && Math.Abs(Main.player[num5].position.X - Main.npc[j].Center.X) < (float)num6)
								{
									if (Main.rand.Next(3) == 0)
									{
										flag5 = true;
									}
									break;
								}
							}
						}
					}
					if (Main.player[num5].ZoneTowerSolar || Main.player[num5].ZoneTowerNebula || Main.player[num5].ZoneTowerVortex || Main.player[num5].ZoneTowerStardust)
					{
						flag5 = true;
					}
					flag = false;
					spawnRate = defaultSpawnRate;
					maxSpawns = defaultMaxSpawns;
					if (Main.hardMode)
					{
						spawnRate = (int)((double)defaultSpawnRate * 0.9);
						maxSpawns = defaultMaxSpawns + 1;
					}
					if (Main.player[num5].position.Y > (float)((Main.maxTilesY - 200) * 16))
					{
						maxSpawns = (int)((float)maxSpawns * 2f);
					}
					else if ((double)Main.player[num5].position.Y > Main.rockLayer * 16.0 + (double)sHeight)
					{
						spawnRate = (int)((double)spawnRate * 0.4);
						maxSpawns = (int)((float)maxSpawns * 1.9f);
					}
					else if ((double)Main.player[num5].position.Y > Main.worldSurface * 16.0 + (double)sHeight)
					{
						if (Main.hardMode)
						{
							spawnRate = (int)((double)spawnRate * 0.45);
							maxSpawns = (int)((float)maxSpawns * 1.8f);
						}
						else
						{
							spawnRate = (int)((double)spawnRate * 0.5);
							maxSpawns = (int)((float)maxSpawns * 1.7f);
						}
					}
					else if (!Main.dayTime)
					{
						spawnRate = (int)((double)spawnRate * 0.6);
						maxSpawns = (int)((float)maxSpawns * 1.3f);
						if (Main.bloodMoon)
						{
							spawnRate = (int)((double)spawnRate * 0.3);
							maxSpawns = (int)((float)maxSpawns * 1.8f);
						}
						if ((Main.pumpkinMoon || Main.snowMoon) && (double)Main.player[num5].position.Y < Main.worldSurface * 16.0)
						{
							spawnRate = (int)((double)spawnRate * 0.2);
							maxSpawns *= 2;
						}
					}
					else if (Main.dayTime && Main.eclipse)
					{
						spawnRate = (int)((double)spawnRate * 0.2);
						maxSpawns = (int)((float)maxSpawns * 1.9f);
					}
					if (Main.player[num5].ZoneSnow && (double)(Main.player[num5].position.Y / 16f) < Main.worldSurface)
					{
						maxSpawns = (int)((float)maxSpawns + (float)maxSpawns * Main.cloudAlpha);
						spawnRate = (int)((float)spawnRate * (1f - Main.cloudAlpha + 1f) / 2f);
					}
					if (Main.player[num5].ZoneDungeon)
					{
						spawnRate = (int)((double)spawnRate * 0.4);
						maxSpawns = (int)((float)maxSpawns * 1.7f);
					}
					else if (Main.player[num5].ZoneUndergroundDesert)
					{
						spawnRate = (int)((double)spawnRate * 0.3);
						maxSpawns = (int)((float)maxSpawns * 1.5f);
					}
					else if (Main.player[num5].ZoneJungle)
					{
						spawnRate = (int)((double)spawnRate * 0.4);
						maxSpawns = (int)((float)maxSpawns * 1.5f);
					}
					else if (Main.player[num5].ZoneCorrupt || Main.player[num5].ZoneCrimson)
					{
						spawnRate = (int)((double)spawnRate * 0.65);
						maxSpawns = (int)((float)maxSpawns * 1.3f);
					}
					else if (Main.player[num5].ZoneMeteor)
					{
						spawnRate = (int)((double)spawnRate * 0.4);
						maxSpawns = (int)((float)maxSpawns * 1.1f);
					}
					if (Main.player[num5].ZoneHoly && (double)Main.player[num5].position.Y > Main.rockLayer * 16.0 + (double)sHeight)
					{
						spawnRate = (int)((double)spawnRate * 0.65);
						maxSpawns = (int)((float)maxSpawns * 1.3f);
					}
					if (Main.wof >= 0 && Main.player[num5].position.Y > (float)((Main.maxTilesY - 200) * 16))
					{
						maxSpawns = (int)((float)maxSpawns * 0.3f);
						spawnRate *= 3;
					}
					if ((double)Main.player[num5].activeNPCs < (double)maxSpawns * 0.2)
					{
						spawnRate = (int)((float)spawnRate * 0.6f);
					}
					else if ((double)Main.player[num5].activeNPCs < (double)maxSpawns * 0.4)
					{
						spawnRate = (int)((float)spawnRate * 0.7f);
					}
					else if ((double)Main.player[num5].activeNPCs < (double)maxSpawns * 0.6)
					{
						spawnRate = (int)((float)spawnRate * 0.8f);
					}
					else if ((double)Main.player[num5].activeNPCs < (double)maxSpawns * 0.8)
					{
						spawnRate = (int)((float)spawnRate * 0.9f);
					}
					if ((double)(Main.player[num5].position.Y / 16f) > (Main.worldSurface + Main.rockLayer) / 2.0 || Main.player[num5].ZoneCorrupt || Main.player[num5].ZoneCrimson)
					{
						if ((double)Main.player[num5].activeNPCs < (double)maxSpawns * 0.2)
						{
							spawnRate = (int)((float)spawnRate * 0.7f);
						}
						else if ((double)Main.player[num5].activeNPCs < (double)maxSpawns * 0.4)
						{
							spawnRate = (int)((float)spawnRate * 0.9f);
						}
					}
					if (Main.player[num5].calmed)
					{
						spawnRate = (int)((float)spawnRate * 1.3f);
						maxSpawns = (int)((float)maxSpawns * 0.7f);
					}
					if (Main.player[num5].sunflower)
					{
						spawnRate = (int)((float)spawnRate * 1.2f);
						maxSpawns = (int)((float)maxSpawns * 0.8f);
					}
					if (Main.player[num5].enemySpawns)
					{
						spawnRate = (int)((double)spawnRate * 0.5);
						maxSpawns = (int)((float)maxSpawns * 2f);
					}
					if (Main.player[num5].ZoneWaterCandle || Main.player[num5].inventory[Main.player[num5].selectedItem].type == 148)
					{
						if (!Main.player[num5].ZonePeaceCandle && Main.player[num5].inventory[Main.player[num5].selectedItem].type != 3117)
						{
							spawnRate = (int)((double)spawnRate * 0.75);
							maxSpawns = (int)((float)maxSpawns * 1.5f);
						}
					}
					else if (Main.player[num5].ZonePeaceCandle || Main.player[num5].inventory[Main.player[num5].selectedItem].type == 3117)
					{
						spawnRate = (int)((double)spawnRate * 1.3);
						maxSpawns = (int)((float)maxSpawns * 0.7f);
					}
					if (Main.player[num5].ZoneWaterCandle && (double)(Main.player[num5].position.Y / 16f) < Main.worldSurface * 0.34999999403953552)
					{
						spawnRate = (int)((double)spawnRate * 0.5);
					}
					if ((double)spawnRate < (double)defaultSpawnRate * 0.1)
					{
						spawnRate = (int)((double)defaultSpawnRate * 0.1);
					}
					if (maxSpawns > defaultMaxSpawns * 3)
					{
						maxSpawns = defaultMaxSpawns * 3;
					}
					if ((Main.pumpkinMoon || Main.snowMoon) && (double)Main.player[num5].position.Y < Main.worldSurface * 16.0)
					{
						maxSpawns = (int)((double)defaultMaxSpawns * (2.0 + 0.3 * (double)num4));
						spawnRate = 20;
					}
					if (flag5)
					{
						maxSpawns = (int)((double)defaultMaxSpawns * (2.0 + 0.3 * (double)num4));
						spawnRate = 20;
					}
					if (Main.player[num5].ZoneDungeon && !downedBoss3)
					{
						spawnRate = 10;
					}
					if (!flag5 && ((!Main.bloodMoon && !Main.pumpkinMoon && !Main.snowMoon) || Main.dayTime) && (!Main.eclipse || !Main.dayTime) && !Main.player[num5].ZoneDungeon && !Main.player[num5].ZoneCorrupt && !Main.player[num5].ZoneCrimson && !Main.player[num5].ZoneMeteor)
					{
						if (Main.player[num5].Center.Y / 16f > (float)(Main.maxTilesY - 200))
						{
							if (Main.player[num5].townNPCs == 1f)
							{
								if (Main.rand.Next(2) == 0)
								{
									flag4 = true;
								}
								if (Main.rand.Next(10) == 0)
								{
									flag11 = true;
									maxSpawns = (int)((double)(float)maxSpawns * 0.5);
								}
								else
								{
									spawnRate = (int)((double)(float)spawnRate * 1.25);
								}
							}
							else if (Main.player[num5].townNPCs == 2f)
							{
								if (Main.rand.Next(4) != 0)
								{
									flag4 = true;
								}
								if (Main.rand.Next(5) == 0)
								{
									flag11 = true;
									maxSpawns = (int)((double)(float)maxSpawns * 0.5);
								}
								else
								{
									spawnRate = (int)((double)(float)spawnRate * 1.5);
								}
							}
							else if (Main.player[num5].townNPCs >= 3f)
							{
								if (Main.rand.Next(10) != 0)
								{
									flag4 = true;
								}
								if (Main.rand.Next(3) == 0)
								{
									flag11 = true;
									maxSpawns = (int)((double)(float)maxSpawns * 0.5);
								}
								else
								{
									spawnRate = (int)((float)spawnRate * 2f);
								}
							}
						}
						else if (Main.player[num5].townNPCs == 1f)
						{
							flag4 = true;
							if (Main.rand.Next(3) == 1)
							{
								flag11 = true;
								maxSpawns = (int)((double)(float)maxSpawns * 0.6);
							}
							else
							{
								spawnRate = (int)((float)spawnRate * 2f);
							}
						}
						else if (Main.player[num5].townNPCs == 2f)
						{
							flag4 = true;
							if (Main.rand.Next(3) != 0)
							{
								flag11 = true;
								maxSpawns = (int)((double)(float)maxSpawns * 0.6);
							}
							else
							{
								spawnRate = (int)((float)spawnRate * 3f);
							}
						}
						else if (Main.player[num5].townNPCs >= 3f)
						{
							flag4 = true;
							if (!Main.expertMode || Main.rand.Next(30) != 0)
							{
								flag11 = true;
							}
							maxSpawns = (int)((double)(float)maxSpawns * 0.6);
						}
					}
					int num7 = (int)(Main.player[num5].position.X + (float)(Main.player[num5].width / 2)) / 16;
					int num8 = (int)(Main.player[num5].position.Y + (float)(Main.player[num5].height / 2)) / 16;
					if (Main.wallHouse[Main.tile[num7, num8].wall])
					{
						flag4 = true;
					}
					if (Main.tile[num7, num8].wall == 87)
					{
						flag3 = true;
					}
					flag14 = false;
					if (Main.player[num5].active && !Main.player[num5].dead && Main.player[num5].activeNPCs < (float)maxSpawns && Main.rand.Next(spawnRate) == 0)
					{
						spawnRangeX = (int)((double)(sWidth / 16) * 0.7);
						spawnRangeY = (int)((double)(sHeight / 16) * 0.7);
						safeRangeX = (int)((double)(sWidth / 16) * 0.52);
						safeRangeY = (int)((double)(sHeight / 16) * 0.52);
						if (Main.player[num5].inventory[Main.player[num5].selectedItem].type == 1254 || Main.player[num5].inventory[Main.player[num5].selectedItem].type == 1299 || Main.player[num5].scope)
						{
							float num9 = 1.5f;
							if (Main.player[num5].inventory[Main.player[num5].selectedItem].type == 1254 && Main.player[num5].scope)
							{
								num9 = 1.25f;
							}
							else if (Main.player[num5].inventory[Main.player[num5].selectedItem].type == 1254)
							{
								num9 = 1.5f;
							}
							else if (Main.player[num5].inventory[Main.player[num5].selectedItem].type == 1299)
							{
								num9 = 1.5f;
							}
							else if (Main.player[num5].scope)
							{
								num9 = 2f;
							}
							spawnRangeX += (int)((double)(sWidth / 16) * 0.5 / (double)num9);
							spawnRangeY += (int)((double)(sHeight / 16) * 0.5 / (double)num9);
							safeRangeX += (int)((double)(sWidth / 16) * 0.5 / (double)num9);
							safeRangeY += (int)((double)(sHeight / 16) * 0.5 / (double)num9);
						}
						int num10 = (int)(Main.player[num5].position.X / 16f) - spawnRangeX;
						int num11 = (int)(Main.player[num5].position.X / 16f) + spawnRangeX;
						int num12 = (int)(Main.player[num5].position.Y / 16f) - spawnRangeY;
						int num13 = (int)(Main.player[num5].position.Y / 16f) + spawnRangeY;
						int num14 = (int)(Main.player[num5].position.X / 16f) - safeRangeX;
						int num15 = (int)(Main.player[num5].position.X / 16f) + safeRangeX;
						int num16 = (int)(Main.player[num5].position.Y / 16f) - safeRangeY;
						int num17 = (int)(Main.player[num5].position.Y / 16f) + safeRangeY;
						if (num10 < 0)
						{
							num10 = 0;
						}
						if (num11 > Main.maxTilesX)
						{
							num11 = Main.maxTilesX;
						}
						if (num12 < 0)
						{
							num12 = 0;
						}
						if (num13 > Main.maxTilesY)
						{
							num13 = Main.maxTilesY;
						}
						for (int k = 0; k < 50; k++)
						{
							int num18 = Main.rand.Next(num10, num11);
							int num19 = Main.rand.Next(num12, num13);
							if (!Main.tile[num18, num19].nactive() || !Main.tileSolid[Main.tile[num18, num19].type])
							{
								if (Main.wallHouse[Main.tile[num18, num19].wall])
								{
									continue;
								}
								if (!flag5 && (double)num19 < Main.worldSurface * 0.34999999403953552 && !flag11 && ((double)num18 < (double)Main.maxTilesX * 0.45 || (double)num18 > (double)Main.maxTilesX * 0.55 || Main.hardMode))
								{
									num3 = Main.tile[num18, num19].type;
									num = num18;
									num2 = num19;
									flag = true;
									flag2 = true;
								}
								else if (!flag5 && (double)num19 < Main.worldSurface * 0.44999998807907104 && !flag11 && Main.hardMode && Main.rand.Next(10) == 0)
								{
									num3 = Main.tile[num18, num19].type;
									num = num18;
									num2 = num19;
									flag = true;
									flag2 = true;
								}
								else
								{
									for (int l = num19; l < Main.maxTilesY; l++)
									{
										if (Main.tile[num18, l].nactive() && Main.tileSolid[Main.tile[num18, l].type])
										{
											if (num18 < num14 || num18 > num15 || l < num16 || l > num17)
											{
												num3 = Main.tile[num18, l].type;
												num = num18;
												num2 = l;
												flag = true;
											}
											break;
										}
									}
								}
								if (flag)
								{
									int num20 = num - spawnSpaceX / 2;
									int num21 = num + spawnSpaceX / 2;
									int num22 = num2 - spawnSpaceY;
									int num23 = num2;
									if (num20 < 0)
									{
										flag = false;
									}
									if (num21 > Main.maxTilesX)
									{
										flag = false;
									}
									if (num22 < 0)
									{
										flag = false;
									}
									if (num23 > Main.maxTilesY)
									{
										flag = false;
									}
									if (flag)
									{
										for (int m = num20; m < num21; m++)
										{
											for (int n = num22; n < num23; n++)
											{
												if (Main.tile[m, n].nactive() && Main.tileSolid[Main.tile[m, n].type])
												{
													flag = false;
													break;
												}
												if (Main.tile[m, n].lava())
												{
													flag = false;
													break;
												}
											}
										}
									}
									if (num >= num14 && num <= num15)
									{
										flag14 = true;
									}
								}
							}
							if (flag || flag)
							{
								break;
							}
						}
					}
					if (flag)
					{
						Rectangle rectangle = new Rectangle(num * 16, num2 * 16, 16, 16);
						for (int num24 = 0; num24 < 16; num24++)
						{
							if (Main.player[num24].active)
							{
								Rectangle rectangle2 = new Rectangle((int)(Main.player[num24].position.X + (float)(Main.player[num24].width / 2) - (float)(sWidth / 2) - (float)safeRangeX), (int)(Main.player[num24].position.Y + (float)(Main.player[num24].height / 2) - (float)(sHeight / 2) - (float)safeRangeY), sWidth + safeRangeX * 2, sHeight + safeRangeY * 2);
								if (rectangle.Intersects(rectangle2))
								{
									flag = false;
								}
							}
						}
					}
					if (flag)
					{
						if (Main.player[num5].ZoneDungeon && (!Main.tileDungeon[Main.tile[num, num2].type] || Main.tile[num, num2 - 1].wall == 0))
						{
							flag = false;
						}
						if (Main.tile[num, num2 - 1].liquid > 0 && Main.tile[num, num2 - 2].liquid > 0 && !Main.tile[num, num2 - 1].lava())
						{
							if (Main.tile[num, num2 - 1].honey())
							{
								flag7 = true;
							}
							else
							{
								flag6 = true;
							}
						}
						int num25 = (int)Main.player[num5].Center.X / 16;
						int num26 = (int)(Main.player[num5].Bottom.Y + 8f) / 16;
						if (Main.tile[num, num2].type == 367)
						{
							flag9 = true;
						}
						else if (Main.tile[num, num2].type == 368)
						{
							flag8 = true;
						}
						else if (Main.tile[num25, num26].type == 367)
						{
							flag9 = true;
						}
						else if (Main.tile[num25, num26].type == 368)
						{
							flag8 = true;
						}
						else
						{
							int num27 = Main.rand.Next(20, 31);
							int num28 = Main.rand.Next(1, 4);
							if (num - num27 < 0)
							{
								num27 = num;
							}
							if (num2 - num27 < 0)
							{
								num27 = num2;
							}
							if (num + num27 >= Main.maxTilesX)
							{
								num27 = Main.maxTilesX - num - 1;
							}
							if (num2 + num27 >= Main.maxTilesY)
							{
								num27 = Main.maxTilesY - num2 - 1;
							}
							for (int num29 = num - num27; num29 <= num + num27; num29 += num28)
							{
								int num30 = Main.rand.Next(1, 4);
								for (int num31 = num2 - num27; num31 <= num2 + num27; num31 += num30)
								{
									if (Main.tile[num29, num31].type == 367)
									{
										flag9 = true;
									}
									if (Main.tile[num29, num31].type == 368)
									{
										flag8 = true;
									}
								}
							}
							num27 = Main.rand.Next(30, 61);
							num28 = Main.rand.Next(3, 7);
							if (num25 - num27 < 0)
							{
								num27 = num25;
							}
							if (num26 - num27 < 0)
							{
								num27 = num26;
							}
							if (num25 + num27 >= Main.maxTilesX)
							{
								num27 = Main.maxTilesX - num25 - 2;
							}
							if (num26 + num27 >= Main.maxTilesY)
							{
								num27 = Main.maxTilesY - num26 - 2;
							}
							for (int num32 = num25 - num27; num32 <= num25 + num27; num32 += num28)
							{
								int num33 = Main.rand.Next(3, 7);
								for (int num34 = num26 - num27; num34 <= num26 + num27; num34 += num33)
								{
									if (Main.tile[num32, num34].type == 367)
									{
										flag9 = true;
									}
									if (Main.tile[num32, num34].type == 368)
									{
										flag8 = true;
									}
								}
							}
						}
					}
					if (flag7)
					{
						flag = false;
					}
					if (flag)
					{
						break;
					}
				}
				num5++;
			}
			if ((double)num2 > Main.rockLayer && num2 < Main.maxTilesY - 200 && !Main.player[num5].ZoneDungeon && !flag5)
			{
				if (Main.rand.Next(3) == 0)
				{
					int num35 = Main.rand.Next(5, 15);
					if (num - num35 >= 0 && num + num35 < Main.maxTilesX)
					{
						for (int num36 = num - num35; num36 < num + num35; num36++)
						{
							for (int num37 = num2 - num35; num37 < num2 + num35; num37++)
							{
								if (Main.tile[num36, num37].wall == 62)
								{
									flag10 = true;
								}
							}
						}
					}
				}
				else
				{
					int num38 = (int)Main.player[num5].position.X / 16;
					int num39 = (int)Main.player[num5].position.Y / 16;
					if (Main.tile[num38, num39].wall == 62)
					{
						flag10 = true;
					}
				}
			}
			if ((double)num2 < Main.rockLayer && num2 > 200 && !Main.player[num5].ZoneDungeon && !flag5)
			{
				if (Main.rand.Next(3) == 0)
				{
					int num40 = Main.rand.Next(5, 15);
					if (num - num40 >= 0 && num + num40 < Main.maxTilesX)
					{
						for (int num41 = num - num40; num41 < num + num40; num41++)
						{
							for (int num42 = num2 - num40; num42 < num2 + num40; num42++)
							{
								if (WallID.Sets.Conversion.Sandstone[Main.tile[num41, num42].wall] || WallID.Sets.Conversion.HardenedSand[Main.tile[num41, num42].wall])
								{
									flag12 = true;
								}
							}
						}
					}
				}
				else
				{
					int num43 = (int)Main.player[num5].position.X / 16;
					int num44 = (int)Main.player[num5].position.Y / 16;
					if (WallID.Sets.Conversion.Sandstone[Main.tile[num43, num44].wall] || WallID.Sets.Conversion.HardenedSand[Main.tile[num43, num44].wall])
					{
						flag12 = true;
					}
				}
			}
			flag = false;
			int num45 = Main.tile[num, num2].type;
			int num46 = 200;
			if (Main.player[num5].ZoneTowerNebula)
			{
				bool flag15 = true;
				int num47 = 0;
				while (flag15)
				{
					num47 = Utils.SelectRandom<int>(Main.rand, 424, 424, 424, 423, 423, 423, 421, 421, 421, 421, 421, 420);
					flag15 = false;
					if (num47 == 424 && CountNPCS(num47) >= 2)
					{
						flag15 = true;
					}
					if (num47 == 423 && CountNPCS(num47) >= 3)
					{
						flag15 = true;
					}
					if (num47 == 420 && CountNPCS(num47) >= 2)
					{
						flag15 = true;
					}
				}
				if (num47 != 0)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, num47, 1);
				}
			}
			else if (Main.player[num5].ZoneTowerVortex)
			{
				bool flag16 = true;
				int num48 = 0;
				while (flag16)
				{
					num48 = Utils.SelectRandom<int>(Main.rand, 429, 429, 429, 429, 427, 427, 425, 425, 426);
					flag16 = false;
					if (num48 == 425 && CountNPCS(num48) >= 3)
					{
						flag16 = true;
					}
					if (num48 == 426 && CountNPCS(num48) >= 3)
					{
						flag16 = true;
					}
					if (num48 == 429 && CountNPCS(num48) >= 4)
					{
						flag16 = true;
					}
				}
				if (num48 != 0)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, num48, 1);
				}
			}
			else if (Main.player[num5].ZoneTowerStardust)
			{
				int num49 = Utils.SelectRandom<int>(Main.rand, 411, 411, 411, 409, 409, 407, 402, 405);
				if (num49 != 0)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, num49, 1);
				}
			}
			else if (Main.player[num5].ZoneTowerSolar)
			{
				bool flag17 = true;
				int num50 = 0;
				while (flag17)
				{
					num50 = Utils.SelectRandom<int>(Main.rand, 518, 419, 418, 412, 417, 416, 415);
					flag17 = false;
					if (num50 == 415 && CountNPCS(num50) >= 2)
					{
						flag17 = true;
					}
					if (num50 == 416 && CountNPCS(num50) >= 1)
					{
						flag17 = true;
					}
					if (num50 == 518 && CountNPCS(num50) >= 2)
					{
						flag17 = true;
					}
					if (num50 == 412 && CountNPCS(num50) >= 1)
					{
						flag17 = true;
					}
				}
				if (num50 != 0)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, num50, 1);
				}
			}
			else if (flag2)
			{
				int maxValue = 8;
				int maxValue2 = 30;
				bool flag18 = (float)Math.Abs(num - Main.maxTilesX / 2) / (float)(Main.maxTilesX / 2) > 0.33f;
				if (flag18 && AnyDanger())
				{
					flag18 = false;
				}
				if (Main.player[num5].ZoneWaterCandle)
				{
					maxValue = 3;
					maxValue2 = 10;
				}
				if (flag5 && Main.invasionType == 4)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 388);
				}
				else if (flag18 && Main.hardMode && downedGolemBoss && ((!downedMartians && Main.rand.Next(maxValue) == 0) || Main.rand.Next(maxValue2) == 0) && !AnyNPCs(399))
				{
					NewNPC(num * 16 + 8, num2 * 16, 399);
				}
				else if (flag18 && Main.hardMode && downedGolemBoss && ((!downedMartians && Main.rand.Next(maxValue) == 0) || Main.rand.Next(maxValue2) == 0) && !AnyNPCs(399) && (Main.player[num5].inventory[Main.player[num5].selectedItem].type == 148 || Main.player[num5].ZoneWaterCandle))
				{
					NewNPC(num * 16 + 8, num2 * 16, 399);
				}
				else if (Main.hardMode && !AnyNPCs(87) && !flag4 && Main.rand.Next(10) == 0)
				{
					NewNPC(num * 16 + 8, num2 * 16, 87, 1);
				}
				else if (Main.hardMode && !AnyNPCs(87) && !flag4 && Main.rand.Next(10) == 0 && (Main.player[num5].inventory[Main.player[num5].selectedItem].type == 148 || Main.player[num5].ZoneWaterCandle))
				{
					NewNPC(num * 16 + 8, num2 * 16, 87, 1);
				}
				else
				{
					NewNPC(num * 16 + 8, num2 * 16, 48);
				}
			}
			else if (flag5)
			{
				if (Main.invasionType == 1)
				{
					if (Main.hardMode && !AnyNPCs(471) && Main.rand.Next(30) == 0)
					{
						NewNPC(num * 16 + 8, num2 * 16, 471);
					}
					else if (Main.rand.Next(9) == 0)
					{
						NewNPC(num * 16 + 8, num2 * 16, 29);
					}
					else if (Main.rand.Next(5) == 0)
					{
						NewNPC(num * 16 + 8, num2 * 16, 26);
					}
					else if (Main.rand.Next(3) == 0)
					{
						NewNPC(num * 16 + 8, num2 * 16, 111);
					}
					else if (Main.rand.Next(3) == 0)
					{
						NewNPC(num * 16 + 8, num2 * 16, 27);
					}
					else
					{
						NewNPC(num * 16 + 8, num2 * 16, 28);
					}
				}
				else if (Main.invasionType == 2)
				{
					if (Main.rand.Next(7) == 0)
					{
						NewNPC(num * 16 + 8, num2 * 16, 145);
					}
					else if (Main.rand.Next(3) == 0)
					{
						NewNPC(num * 16 + 8, num2 * 16, 143);
					}
					else
					{
						NewNPC(num * 16 + 8, num2 * 16, 144);
					}
				}
				else if (Main.invasionType == 3)
				{
					if (Main.invasionSize < Main.invasionSizeStart / 2 && Main.rand.Next(20) == 0 && !AnyNPCs(491) && !Collision.SolidTiles(num - 20, num + 20, num2 - 40, num2 - 10))
					{
						NewNPC(num * 16 + 8, (num2 - 10) * 16, 491);
					}
					else if (Main.rand.Next(30) == 0 && !AnyNPCs(216))
					{
						NewNPC(num * 16 + 8, num2 * 16, 216);
					}
					else if (Main.rand.Next(11) == 0)
					{
						NewNPC(num * 16 + 8, num2 * 16, 215);
					}
					else if (Main.rand.Next(9) == 0)
					{
						NewNPC(num * 16 + 8, num2 * 16, 252);
					}
					else if (Main.rand.Next(7) == 0)
					{
						NewNPC(num * 16 + 8, num2 * 16, 214);
					}
					else if (Main.rand.Next(3) == 0)
					{
						NewNPC(num * 16 + 8, num2 * 16, 213);
					}
					else
					{
						NewNPC(num * 16 + 8, num2 * 16, 212);
					}
				}
				else if (Main.invasionType == 4)
				{
					int num51 = 0;
					int num52 = Main.rand.Next(7);
					if (Main.invasionSize <= 100 && Main.rand.Next(10) == 0 && !AnyNPCs(395))
					{
						num51 = 395;
					}
					else if (num52 >= 6)
					{
						if (Main.rand.Next(10) == 0 && !AnyNPCs(395))
						{
							num51 = 395;
						}
						else
						{
							int num53 = Main.rand.Next(2);
							if (num53 == 0)
							{
								num51 = 390;
							}
							if (num53 == 1)
							{
								num51 = 386;
							}
						}
					}
					else if (num52 >= 4)
					{
						int num54 = Main.rand.Next(5);
						num51 = ((num54 < 2) ? 382 : ((num54 >= 4) ? 388 : 381));
					}
					else
					{
						int num55 = Main.rand.Next(4);
						if (num55 == 3)
						{
							if (!AnyNPCs(520))
							{
								num51 = 520;
							}
							else
							{
								num55 = Main.rand.Next(3);
							}
						}
						if (num55 == 0)
						{
							num51 = 385;
						}
						if (num55 == 1)
						{
							num51 = 389;
						}
						if (num55 == 2)
						{
							num51 = 383;
						}
					}
					if (num51 != 0)
					{
						num46 = NewNPC(num * 16 + 8, num2 * 16, num51, 1);
					}
				}
			}
			else if (Main.tile[num, num2].wall == 62 || flag10)
			{
				if (Main.tile[num, num2].wall == 62 && Main.rand.Next(8) == 0 && !flag6 && (double)num2 >= Main.rockLayer && num2 < Main.maxTilesY - 210 && !savedStylist && !AnyNPCs(354))
				{
					NewNPC(num * 16 + 8, num2 * 16, 354);
				}
				else if (Main.hardMode)
				{
					NewNPC(num * 16 + 8, num2 * 16, 163);
				}
				else
				{
					NewNPC(num * 16 + 8, num2 * 16, 164);
				}
			}
			else if ((WallID.Sets.Conversion.HardenedSand[Main.tile[num, num2].wall] || WallID.Sets.Conversion.Sandstone[Main.tile[num, num2].wall] || flag12) && WorldGen.checkUnderground(num, num2))
			{
				if (Main.hardMode && Main.rand.Next(33) == 0 && !flag4)
				{
					NewNPC(num * 16 + 8, num2 * 16, 510);
				}
				else if (Main.rand.Next(22) == 0 && !flag4)
				{
					NewNPC(num * 16 + 8, num2 * 16, 513);
				}
				else if (Main.hardMode && Main.rand.Next(5) != 0)
				{
					List<int> list = new List<int>();
					if (Main.player[num5].ZoneCorrupt)
					{
						list.Add(525);
						list.Add(525);
					}
					if (Main.player[num5].ZoneCrimson)
					{
						list.Add(526);
						list.Add(526);
					}
					if (Main.player[num5].ZoneHoly)
					{
						list.Add(527);
						list.Add(527);
					}
					if (list.Count == 0)
					{
						list.Add(524);
						list.Add(524);
					}
					if (Main.player[num5].ZoneCorrupt || Main.player[num5].ZoneCrimson)
					{
						list.Add(533);
						list.Add(529);
					}
					else
					{
						list.Add(530);
						list.Add(528);
					}
					list.Add(532);
					int num56 = Utils.SelectRandom(Main.rand, list.ToArray());
					NewNPC(num * 16 + 8, num2 * 16, num56);
					list.Clear();
				}
				else
				{
					int num57 = Utils.SelectRandom<int>(Main.rand, 69, 508, 508, 508, 509);
					NewNPC(num * 16 + 8, num2 * 16, num57);
				}
			}
			else if (Main.hardMode && flag6 && Main.player[num5].ZoneJungle && Main.rand.Next(3) != 0)
			{
				NewNPC(num * 16 + 8, num2 * 16, 157);
			}
			else if (Main.hardMode && flag6 && Main.player[num5].ZoneCrimson && Main.rand.Next(3) != 0)
			{
				NewNPC(num * 16 + 8, num2 * 16, 242);
			}
			else if (Main.hardMode && flag6 && Main.player[num5].ZoneCrimson && Main.rand.Next(3) != 0)
			{
				NewNPC(num * 16 + 8, num2 * 16, 241);
			}
			else if (flag6 && (num < 250 || num > Main.maxTilesX - 250) && Main.tileSand[num45] && (double)num2 < Main.rockLayer)
			{
				bool flag19 = false;
				if (!savedAngler && !AnyNPCs(376))
				{
					int num58 = -1;
					for (int num59 = num2 - 1; num59 > num2 - 50; num59--)
					{
						if (Main.tile[num, num59].liquid == 0 && !WorldGen.SolidTile(num, num59) && !WorldGen.SolidTile(num, num59 + 1) && !WorldGen.SolidTile(num, num59 + 2))
						{
							num58 = num59 + 2;
							break;
						}
					}
					if (num58 > num2)
					{
						num58 = num2;
					}
					if (num58 > 0 && !flag14)
					{
						NewNPC(num * 16 + 8, num58 * 16, 376);
						flag19 = true;
					}
				}
				if (!flag19)
				{
					if (Main.rand.Next(60) == 0)
					{
						NewNPC(num * 16 + 8, num2 * 16, 220);
					}
					else if (Main.rand.Next(25) == 0)
					{
						NewNPC(num * 16 + 8, num2 * 16, 221);
					}
					else if (Main.rand.Next(8) == 0)
					{
						NewNPC(num * 16 + 8, num2 * 16, 65);
					}
					else if (Main.rand.Next(3) == 0)
					{
						NewNPC(num * 16 + 8, num2 * 16, 67);
					}
					else
					{
						NewNPC(num * 16 + 8, num2 * 16, 64);
					}
				}
			}
			else if (!flag6 && !savedAngler && !AnyNPCs(376) && (num < 340 || num > Main.maxTilesX - 340) && Main.tileSand[num45] && (double)num2 < Main.worldSurface)
			{
				NewNPC(num * 16 + 8, num2 * 16, 376);
			}
			else if (flag6 && (((double)num2 > Main.rockLayer && Main.rand.Next(2) == 0) || num45 == 60))
			{
				if (Main.hardMode && Main.rand.Next(3) > 0)
				{
					NewNPC(num * 16 + 8, num2 * 16, 102);
				}
				else
				{
					NewNPC(num * 16 + 8, num2 * 16, 58);
				}
			}
			else if (flag6 && (double)num2 > Main.worldSurface && Main.rand.Next(3) == 0)
			{
				if (Main.hardMode)
				{
					NewNPC(num * 16 + 8, num2 * 16, 103);
				}
				else
				{
					NewNPC(num * 16 + 8, num2 * 16, 63);
				}
			}
			else if (flag6 && Main.rand.Next(4) == 0)
			{
				if (Main.player[num5].ZoneCorrupt)
				{
					NewNPC(num * 16 + 8, num2 * 16, 57);
				}
				else if ((double)num2 < Main.worldSurface && num2 > 50 && Main.rand.Next(3) != 0 && Main.dayTime)
				{
					int num60 = -1;
					for (int num61 = num2 - 1; num61 > num2 - 50; num61--)
					{
						if (Main.tile[num, num61].liquid == 0 && !WorldGen.SolidTile(num, num61) && !WorldGen.SolidTile(num, num61 + 1) && !WorldGen.SolidTile(num, num61 + 2))
						{
							num60 = num61 + 2;
							break;
						}
					}
					if (num60 > num2)
					{
						num60 = num2;
					}
					if (num60 > 0 && !flag14)
					{
						if (Main.rand.Next(2) == 0)
						{
							NewNPC(num * 16 + 8, num60 * 16, 362);
						}
						else
						{
							NewNPC(num * 16 + 8, num60 * 16, 364);
						}
					}
					else
					{
						NewNPC(num * 16 + 8, num2 * 16, 55);
					}
				}
				else
				{
					NewNPC(num * 16 + 8, num2 * 16, 55);
				}
			}
			else if (downedGoblins && Main.rand.Next(20) == 0 && !flag6 && (double)num2 >= Main.rockLayer && num2 < Main.maxTilesY - 210 && !savedGoblin && !AnyNPCs(105))
			{
				NewNPC(num * 16 + 8, num2 * 16, 105);
			}
			else if (Main.hardMode && Main.rand.Next(20) == 0 && !flag6 && (double)num2 >= Main.rockLayer && num2 < Main.maxTilesY - 210 && !savedWizard && !AnyNPCs(106))
			{
				NewNPC(num * 16 + 8, num2 * 16, 106);
			}
			else if (flag11)
			{
				if (flag6)
				{
					if ((double)num2 < Main.worldSurface && num2 > 50 && Main.rand.Next(3) != 0 && Main.dayTime)
					{
						int num62 = -1;
						for (int num63 = num2 - 1; num63 > num2 - 50; num63--)
						{
							if (Main.tile[num, num63].liquid == 0 && !WorldGen.SolidTile(num, num63) && !WorldGen.SolidTile(num, num63 + 1) && !WorldGen.SolidTile(num, num63 + 2))
							{
								num62 = num63 + 2;
								break;
							}
						}
						if (num62 > num2)
						{
							num62 = num2;
						}
						if (num62 > 0 && !flag14)
						{
							if (Main.rand.Next(2) == 0)
							{
								NewNPC(num * 16 + 8, num62 * 16, 362);
							}
							else
							{
								NewNPC(num * 16 + 8, num62 * 16, 364);
							}
						}
						else
						{
							NewNPC(num * 16 + 8, num2 * 16, 55);
						}
					}
					else
					{
						NewNPC(num * 16 + 8, num2 * 16, 55);
					}
				}
				else if (num45 == 147 || num45 == 161)
				{
					if (Main.rand.Next(2) == 0)
					{
						NewNPC(num * 16 + 8, num2 * 16, 148);
					}
					else
					{
						NewNPC(num * 16 + 8, num2 * 16, 149);
					}
				}
				else if (num45 == 60)
				{
					if (Main.rand.Next(goldCritterChance) == 0)
					{
						NewNPC(num * 16 + 8, num2 * 16, 445);
					}
					else
					{
						NewNPC(num * 16 + 8, num2 * 16, 361);
					}
				}
				else
				{
					if (num45 != 2 && num45 != 109 && !((double)num2 > Main.worldSurface))
					{
						return;
					}
					if (Main.raining)
					{
						if (Main.rand.Next(goldCritterChance) == 0)
						{
							NewNPC(num * 16 + 8, num2 * 16, 448);
						}
						else if (Main.rand.Next(3) != 0)
						{
							NewNPC(num * 16 + 8, num2 * 16, 357);
						}
						else
						{
							NewNPC(num * 16 + 8, num2 * 16, 230);
						}
					}
					else if (!Main.dayTime && Main.rand.Next(fireFlyFriendly) == 0 && (double)num2 <= Main.worldSurface)
					{
						int num64 = 355;
						if (num45 == 109)
						{
							num64 = 358;
						}
						NewNPC(num * 16 + 8, num2 * 16, num64);
						if (Main.rand.Next(fireFlyMultiple) == 0)
						{
							NewNPC(num * 16 + 8 - 16, num2 * 16, num64);
						}
						if (Main.rand.Next(fireFlyMultiple) == 0)
						{
							NewNPC(num * 16 + 8 + 16, num2 * 16, num64);
						}
						if (Main.rand.Next(fireFlyMultiple) == 0)
						{
							NewNPC(num * 16 + 8, num2 * 16 - 16, num64);
						}
						if (Main.rand.Next(fireFlyMultiple) == 0)
						{
							NewNPC(num * 16 + 8, num2 * 16 + 16, num64);
						}
					}
					else if (Main.dayTime && Main.time < 18000.0 && Main.rand.Next(3) != 0 && (double)num2 <= Main.worldSurface)
					{
						int num65 = Main.rand.Next(4);
						if (Main.rand.Next(goldCritterChance) == 0)
						{
							NewNPC(num * 16 + 8, num2 * 16, 442);
						}
						else
						{
							switch (num65)
							{
							case 0:
								NewNPC(num * 16 + 8, num2 * 16, 297);
								break;
							case 1:
								NewNPC(num * 16 + 8, num2 * 16, 298);
								break;
							default:
								NewNPC(num * 16 + 8, num2 * 16, 74);
								break;
							}
						}
					}
					else if (Main.dayTime && Main.rand.Next(butterflyChance) == 0 && (double)num2 <= Main.worldSurface)
					{
						if (Main.rand.Next(goldCritterChance) == 0)
						{
							NewNPC(num * 16 + 8, num2 * 16, 444);
						}
						else
						{
							NewNPC(num * 16 + 8, num2 * 16, 356);
						}
						if (Main.rand.Next(4) == 0)
						{
							NewNPC(num * 16 + 8 - 16, num2 * 16, 356);
						}
						if (Main.rand.Next(4) == 0)
						{
							NewNPC(num * 16 + 8 + 16, num2 * 16, 356);
						}
					}
					else if (Main.rand.Next(2) == 0 && (double)num2 <= Main.worldSurface)
					{
						int num66 = Main.rand.Next(4);
						if (Main.rand.Next(goldCritterChance) == 0)
						{
							NewNPC(num * 16 + 8, num2 * 16, 442);
						}
						else
						{
							switch (num66)
							{
							case 0:
								NewNPC(num * 16 + 8, num2 * 16, 297);
								break;
							case 1:
								NewNPC(num * 16 + 8, num2 * 16, 298);
								break;
							default:
								NewNPC(num * 16 + 8, num2 * 16, 74);
								break;
							}
						}
					}
					else if (num45 == 53)
					{
						NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(366, 368));
					}
					else if (Main.rand.Next(goldCritterChance) == 0)
					{
						NewNPC(num * 16 + 8, num2 * 16, 443);
					}
					else if (Main.rand.Next(goldCritterChance) == 0 && (double)num2 <= Main.worldSurface)
					{
						NewNPC(num * 16 + 8, num2 * 16, 539);
					}
					else if (Main.halloween && Main.rand.Next(3) != 0)
					{
						NewNPC(num * 16 + 8, num2 * 16, 303);
					}
					else if (Main.xMas && Main.rand.Next(3) != 0)
					{
						NewNPC(num * 16 + 8, num2 * 16, 337);
					}
					else if (Main.rand.Next(3) == 0 && (double)num2 <= Main.worldSurface)
					{
						NewNPC(num * 16 + 8, num2 * 16, Utils.SelectRandom(Main.rand, new short[2]
						{
							299,
							538
						}));
					}
					else
					{
						NewNPC(num * 16 + 8, num2 * 16, 46);
					}
				}
			}
			else if (Main.player[num5].ZoneDungeon)
			{
				int num67 = 0;
				if (Main.tile[num, num2].wall == 94 || Main.tile[num, num2].wall == 96 || Main.tile[num, num2].wall == 98)
				{
					num67 = 1;
				}
				if (Main.tile[num, num2].wall == 95 || Main.tile[num, num2].wall == 97 || Main.tile[num, num2].wall == 99)
				{
					num67 = 2;
				}
				if (Main.rand.Next(7) == 0)
				{
					num67 = Main.rand.Next(3);
				}
				if (!downedBoss3)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 68);
				}
				else if (!savedMech && Main.rand.Next(5) == 0 && !flag6 && !AnyNPCs(123) && (double)num2 > Main.rockLayer)
				{
					NewNPC(num * 16 + 8, num2 * 16, 123);
				}
				else if (flag13 && Main.rand.Next(30) == 0)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 287);
				}
				else if (flag13 && num67 == 0 && Main.rand.Next(15) == 0)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 293);
				}
				else if (flag13 && num67 == 1 && Main.rand.Next(15) == 0)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 291);
				}
				else if (flag13 && num67 == 2 && Main.rand.Next(15) == 0)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 292);
				}
				else if (flag13 && !AnyNPCs(290) && num67 == 0 && Main.rand.Next(35) == 0)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 290);
				}
				else if (flag13 && (num67 == 1 || num67 == 2) && Main.rand.Next(30) == 0)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 289);
				}
				else if (flag13 && Main.rand.Next(20) == 0)
				{
					int num68 = 281;
					if (num67 == 0)
					{
						num68 += 2;
					}
					if (num67 == 2)
					{
						num68 += 4;
					}
					num68 += Main.rand.Next(2);
					if (!AnyNPCs(num68))
					{
						num46 = NewNPC(num * 16 + 8, num2 * 16, num68);
					}
				}
				else if (flag13 && Main.rand.Next(3) != 0)
				{
					int num69 = 269;
					if (num67 == 0)
					{
						num69 += 4;
					}
					if (num67 == 2)
					{
						num69 += 8;
					}
					num46 = NewNPC(num * 16 + 8, num2 * 16, num69 + Main.rand.Next(4));
				}
				else if (Main.rand.Next(37) == 0)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 71);
				}
				else if (num67 == 1 && Main.rand.Next(4) == 0 && !NearSpikeBall(num, num2))
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 70);
				}
				else if (num67 == 2 && Main.rand.Next(15) == 0)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 72);
				}
				else if (num67 == 0 && Main.rand.Next(9) == 0)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 34);
				}
				else if (Main.rand.Next(7) == 0)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 32);
				}
				else
				{
					switch (Main.rand.Next(5))
					{
					case 0:
						num46 = NewNPC(num * 16 + 8, num2 * 16, 294);
						break;
					case 1:
						num46 = NewNPC(num * 16 + 8, num2 * 16, 295);
						break;
					case 2:
						num46 = NewNPC(num * 16 + 8, num2 * 16, 296);
						break;
					default:
						num46 = NewNPC(num * 16 + 8, num2 * 16, 31);
						if (Main.rand.Next(4) == 0)
						{
							Main.npc[num46].SetDefaults("Big Boned");
						}
						else if (Main.rand.Next(5) == 0)
						{
							Main.npc[num46].SetDefaults("Short Bones");
						}
						break;
					}
				}
			}
			else if (Main.player[num5].ZoneMeteor)
			{
				num46 = NewNPC(num * 16 + 8, num2 * 16, 23);
			}
			else if ((double)num2 <= Main.worldSurface && !Main.dayTime && Main.snowMoon)
			{
				if (Main.rand.Next(30) == 0 && CountNPCS(341) < 4)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 341);
				}
				else if (waveCount >= 20)
				{
					switch (Main.rand.Next(3))
					{
					case 0:
						num46 = NewNPC(num * 16 + 8, num2 * 16, 345);
						break;
					case 1:
						num46 = NewNPC(num * 16 + 8, num2 * 16, 346);
						break;
					default:
						num46 = NewNPC(num * 16 + 8, num2 * 16, 344);
						break;
					}
				}
				else if (waveCount >= 19)
				{
					num46 = ((Main.rand.Next(10) == 0 && CountNPCS(345) < 4) ? NewNPC(num * 16 + 8, num2 * 16, 345) : ((Main.rand.Next(10) == 0 && CountNPCS(346) < 5) ? NewNPC(num * 16 + 8, num2 * 16, 346) : ((Main.rand.Next(10) != 0 || CountNPCS(344) >= 7) ? NewNPC(num * 16 + 8, num2 * 16, 343) : NewNPC(num * 16 + 8, num2 * 16, 344))));
				}
				else if (waveCount >= 18)
				{
					num46 = ((Main.rand.Next(10) == 0 && CountNPCS(345) < 3) ? NewNPC(num * 16 + 8, num2 * 16, 345) : ((Main.rand.Next(10) == 0 && CountNPCS(346) < 4) ? NewNPC(num * 16 + 8, num2 * 16, 346) : ((Main.rand.Next(10) == 0 && CountNPCS(344) < 6) ? NewNPC(num * 16 + 8, num2 * 16, 344) : ((Main.rand.Next(3) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 348) : ((Main.rand.Next(3) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 343) : NewNPC(num * 16 + 8, num2 * 16, 351))))));
				}
				else if (waveCount >= 17)
				{
					num46 = ((Main.rand.Next(10) == 0 && CountNPCS(345) < 2) ? NewNPC(num * 16 + 8, num2 * 16, 345) : ((Main.rand.Next(10) == 0 && CountNPCS(346) < 3) ? NewNPC(num * 16 + 8, num2 * 16, 346) : ((Main.rand.Next(10) == 0 && CountNPCS(344) < 5) ? NewNPC(num * 16 + 8, num2 * 16, 344) : ((Main.rand.Next(4) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 347) : ((Main.rand.Next(2) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 343) : NewNPC(num * 16 + 8, num2 * 16, 351))))));
				}
				else if (waveCount >= 16)
				{
					num46 = ((Main.rand.Next(10) == 0 && CountNPCS(345) < 2) ? NewNPC(num * 16 + 8, num2 * 16, 345) : ((Main.rand.Next(10) == 0 && CountNPCS(346) < 2) ? NewNPC(num * 16 + 8, num2 * 16, 346) : ((Main.rand.Next(10) == 0 && CountNPCS(344) < 4) ? NewNPC(num * 16 + 8, num2 * 16, 344) : ((Main.rand.Next(2) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 343) : NewNPC(num * 16 + 8, num2 * 16, 352)))));
				}
				else if (waveCount >= 15)
				{
					num46 = ((Main.rand.Next(10) == 0 && !AnyNPCs(345)) ? NewNPC(num * 16 + 8, num2 * 16, 345) : ((Main.rand.Next(10) == 0 && CountNPCS(346) < 2) ? NewNPC(num * 16 + 8, num2 * 16, 346) : ((Main.rand.Next(10) == 0 && CountNPCS(344) < 3) ? NewNPC(num * 16 + 8, num2 * 16, 344) : ((Main.rand.Next(3) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 343) : NewNPC(num * 16 + 8, num2 * 16, 347)))));
				}
				else if (waveCount != 14)
				{
					num46 = ((waveCount == 13) ? ((Main.rand.Next(10) == 0 && !AnyNPCs(345)) ? NewNPC(num * 16 + 8, num2 * 16, 345) : ((Main.rand.Next(10) == 0 && !AnyNPCs(346)) ? NewNPC(num * 16 + 8, num2 * 16, 346) : ((Main.rand.Next(3) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 352) : ((Main.rand.Next(6) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 343) : ((Main.rand.Next(3) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 347) : NewNPC(num * 16 + 8, num2 * 16, 342)))))) : ((waveCount == 12) ? ((Main.rand.Next(10) == 0 && !AnyNPCs(345)) ? NewNPC(num * 16 + 8, num2 * 16, 345) : ((Main.rand.Next(10) == 0 && !AnyNPCs(344)) ? NewNPC(num * 16 + 8, num2 * 16, 344) : ((Main.rand.Next(8) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 343) : ((Main.rand.Next(3) != 0) ? NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(338, 341)) : NewNPC(num * 16 + 8, num2 * 16, 342))))) : ((waveCount == 11) ? ((Main.rand.Next(10) == 0 && !AnyNPCs(345)) ? NewNPC(num * 16 + 8, num2 * 16, 345) : ((Main.rand.Next(6) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 352) : ((Main.rand.Next(2) != 0) ? NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(338, 341)) : NewNPC(num * 16 + 8, num2 * 16, 342)))) : ((waveCount == 10) ? ((Main.rand.Next(10) == 0 && !AnyNPCs(346)) ? NewNPC(num * 16 + 8, num2 * 16, 346) : ((Main.rand.Next(10) == 0 && CountNPCS(344) < 2) ? NewNPC(num * 16 + 8, num2 * 16, 344) : ((Main.rand.Next(6) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 351) : ((Main.rand.Next(3) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 348) : ((Main.rand.Next(3) != 0) ? NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(338, 341)) : NewNPC(num * 16 + 8, num2 * 16, 347)))))) : ((waveCount == 9) ? ((Main.rand.Next(10) == 0 && !AnyNPCs(346)) ? NewNPC(num * 16 + 8, num2 * 16, 346) : ((Main.rand.Next(10) == 0 && !AnyNPCs(344)) ? NewNPC(num * 16 + 8, num2 * 16, 344) : ((Main.rand.Next(2) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 348) : ((Main.rand.Next(3) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 342) : NewNPC(num * 16 + 8, num2 * 16, 347))))) : ((waveCount == 8) ? ((Main.rand.Next(10) == 0 && !AnyNPCs(346)) ? NewNPC(num * 16 + 8, num2 * 16, 346) : ((Main.rand.Next(8) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 351) : ((Main.rand.Next(3) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 348) : ((Main.rand.Next(3) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 350) : NewNPC(num * 16 + 8, num2 * 16, 347))))) : ((waveCount == 7) ? ((Main.rand.Next(10) == 0 && !AnyNPCs(346)) ? NewNPC(num * 16 + 8, num2 * 16, 346) : ((Main.rand.Next(3) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 342) : ((Main.rand.Next(4) != 0) ? NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(338, 341)) : NewNPC(num * 16 + 8, num2 * 16, 350)))) : ((waveCount == 6) ? ((Main.rand.Next(10) == 0 && CountNPCS(344) < 2) ? NewNPC(num * 16 + 8, num2 * 16, 344) : ((Main.rand.Next(4) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 347) : ((Main.rand.Next(2) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 350) : NewNPC(num * 16 + 8, num2 * 16, 348)))) : ((waveCount == 5) ? ((Main.rand.Next(10) == 0 && !AnyNPCs(344)) ? NewNPC(num * 16 + 8, num2 * 16, 344) : ((Main.rand.Next(4) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 350) : ((Main.rand.Next(8) != 0) ? NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(338, 341)) : NewNPC(num * 16 + 8, num2 * 16, 348)))) : ((waveCount == 4) ? ((Main.rand.Next(10) == 0 && !AnyNPCs(344)) ? NewNPC(num * 16 + 8, num2 * 16, 344) : ((Main.rand.Next(4) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 350) : ((Main.rand.Next(3) != 0) ? NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(338, 341)) : NewNPC(num * 16 + 8, num2 * 16, 342)))) : ((waveCount == 3) ? ((Main.rand.Next(8) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 348) : ((Main.rand.Next(4) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 350) : ((Main.rand.Next(3) != 0) ? NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(338, 341)) : NewNPC(num * 16 + 8, num2 * 16, 342)))) : ((waveCount == 2) ? ((Main.rand.Next(3) != 0) ? NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(338, 341)) : NewNPC(num * 16 + 8, num2 * 16, 350)) : ((Main.rand.Next(3) != 0) ? NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(338, 341)) : NewNPC(num * 16 + 8, num2 * 16, 342))))))))))))));
				}
				else if (Main.rand.Next(10) == 0 && !AnyNPCs(345))
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 345);
				}
				else if (Main.rand.Next(10) == 0 && !AnyNPCs(346))
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 346);
				}
				else if (Main.rand.Next(10) == 0 && !AnyNPCs(344))
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 344);
				}
				else if (Main.rand.Next(3) == 0)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 343);
				}
			}
			else if ((double)num2 <= Main.worldSurface && !Main.dayTime && Main.pumpkinMoon)
			{
				if (waveCount >= 15)
				{
					num46 = ((Main.rand.Next(2) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 325) : NewNPC(num * 16 + 8, num2 * 16, 327));
				}
				else if (waveCount == 14)
				{
					num46 = ((Main.rand.Next(5) == 0 && CountNPCS(327) < 3) ? NewNPC(num * 16 + 8, num2 * 16, 327) : ((Main.rand.Next(5) != 0 || CountNPCS(325) >= 3) ? NewNPC(num * 16 + 8, num2 * 16, 315) : NewNPC(num * 16 + 8, num2 * 16, 325)));
				}
				else if (waveCount == 13)
				{
					if (Main.rand.Next(7) == 0 && CountNPCS(327) < 2)
					{
						num46 = NewNPC(num * 16 + 8, num2 * 16, 327);
					}
					num46 = ((Main.rand.Next(5) == 0 && CountNPCS(325) < 3) ? NewNPC(num * 16 + 8, num2 * 16, 325) : ((Main.rand.Next(5) == 0 && CountNPCS(315) < 3) ? NewNPC(num * 16 + 8, num2 * 16, 315) : ((Main.rand.Next(3) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 329) : NewNPC(num * 16 + 8, num2 * 16, 330))));
				}
				else if (waveCount == 12)
				{
					if (Main.rand.Next(7) == 0 && CountNPCS(327) < 2)
					{
						num46 = NewNPC(num * 16 + 8, num2 * 16, 327);
					}
					num46 = ((Main.rand.Next(7) == 0 && CountNPCS(325) < 2) ? NewNPC(num * 16 + 8, num2 * 16, 325) : ((Main.rand.Next(7) == 0 && CountNPCS(315) < 2) ? NewNPC(num * 16 + 8, num2 * 16, 315) : ((Main.rand.Next(7) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 330) : ((Main.rand.Next(5) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 326) : NewNPC(num * 16 + 8, num2 * 16, 329)))));
				}
				else if (waveCount != 11)
				{
					num46 = ((waveCount == 10) ? ((Main.rand.Next(10) == 0 && !AnyNPCs(327)) ? NewNPC(num * 16 + 8, num2 * 16, 327) : ((Main.rand.Next(10) == 0 && !AnyNPCs(325)) ? NewNPC(num * 16 + 8, num2 * 16, 325) : ((Main.rand.Next(10) == 0 && !AnyNPCs(315)) ? NewNPC(num * 16 + 8, num2 * 16, 315) : ((Main.rand.Next(8) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 330) : ((Main.rand.Next(5) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 326) : NewNPC(num * 16 + 8, num2 * 16, 329)))))) : ((waveCount == 9) ? ((Main.rand.Next(8) == 0 && !AnyNPCs(327)) ? NewNPC(num * 16 + 8, num2 * 16, 327) : ((Main.rand.Next(8) == 0 && !AnyNPCs(325)) ? NewNPC(num * 16 + 8, num2 * 16, 325) : ((Main.rand.Next(10) != 0 || AnyNPCs(315)) ? NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(305, 315)) : NewNPC(num * 16 + 8, num2 * 16, 315)))) : ((waveCount == 8) ? ((Main.rand.Next(10) == 0 && !AnyNPCs(327)) ? NewNPC(num * 16 + 8, num2 * 16, 327) : ((Main.rand.Next(5) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 330) : ((Main.rand.Next(3) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 326) : NewNPC(num * 16 + 8, num2 * 16, 329)))) : ((waveCount == 7) ? ((Main.rand.Next(10) == 0 && !AnyNPCs(327)) ? NewNPC(num * 16 + 8, num2 * 16, 327) : ((Main.rand.Next(8) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 330) : ((Main.rand.Next(5) != 0) ? NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(305, 315)) : NewNPC(num * 16 + 8, num2 * 16, 329)))) : ((waveCount == 6) ? ((Main.rand.Next(7) == 0 && CountNPCS(325) < 2) ? NewNPC(num * 16 + 8, num2 * 16, 325) : ((Main.rand.Next(6) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 330) : ((Main.rand.Next(3) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 326) : NewNPC(num * 16 + 8, num2 * 16, 329)))) : ((waveCount == 5) ? ((Main.rand.Next(10) == 0 && !AnyNPCs(325)) ? NewNPC(num * 16 + 8, num2 * 16, 325) : ((Main.rand.Next(8) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 330) : ((Main.rand.Next(5) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 329) : ((Main.rand.Next(2) != 0) ? NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(305, 315)) : NewNPC(num * 16 + 8, num2 * 16, 326))))) : ((waveCount == 4) ? ((Main.rand.Next(10) == 0 && !AnyNPCs(325)) ? NewNPC(num * 16 + 8, num2 * 16, 325) : ((Main.rand.Next(10) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 329) : ((Main.rand.Next(2) != 0) ? NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(305, 315)) : NewNPC(num * 16 + 8, num2 * 16, 326)))) : ((waveCount == 3) ? ((Main.rand.Next(6) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 329) : ((Main.rand.Next(3) != 0) ? NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(305, 315)) : NewNPC(num * 16 + 8, num2 * 16, 326))) : ((waveCount != 2) ? NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(305, 315)) : ((Main.rand.Next(3) != 0) ? NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(305, 315)) : NewNPC(num * 16 + 8, num2 * 16, 326)))))))))));
				}
				else
				{
					if (Main.rand.Next(10) == 0 && !AnyNPCs(327))
					{
						num46 = NewNPC(num * 16 + 8, num2 * 16, 327);
					}
					num46 = ((Main.rand.Next(7) == 0 && CountNPCS(325) < 2) ? NewNPC(num * 16 + 8, num2 * 16, 325) : ((Main.rand.Next(10) == 0 && !AnyNPCs(315)) ? NewNPC(num * 16 + 8, num2 * 16, 315) : ((Main.rand.Next(10) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 330) : ((Main.rand.Next(7) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 329) : ((Main.rand.Next(3) != 0) ? NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(305, 315)) : NewNPC(num * 16 + 8, num2 * 16, 326))))));
				}
			}
			else if ((double)num2 <= Main.worldSurface && Main.dayTime && Main.eclipse)
			{
				bool flag20 = false;
				if (downedMechBoss1 && downedMechBoss2 && downedMechBoss3)
				{
					flag20 = true;
				}
				num46 = ((flag20 && Main.rand.Next(80) == 0 && !AnyNPCs(477)) ? NewNPC(num * 16 + 8, num2 * 16, 477) : ((Main.rand.Next(50) == 0 && !AnyNPCs(251)) ? NewNPC(num * 16 + 8, num2 * 16, 251) : ((downedPlantBoss && Main.rand.Next(5) == 0 && !AnyNPCs(466)) ? NewNPC(num * 16 + 8, num2 * 16, 466) : ((downedPlantBoss && Main.rand.Next(20) == 0 && !AnyNPCs(463)) ? NewNPC(num * 16 + 8, num2 * 16, 463) : ((downedPlantBoss && Main.rand.Next(20) == 0 && CountNPCS(467) < 2) ? NewNPC(num * 16 + 8, num2 * 16, 467) : ((Main.rand.Next(15) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 159) : ((flag20 && Main.rand.Next(13) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 253) : ((Main.rand.Next(8) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 469) : ((downedPlantBoss && Main.rand.Next(7) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 468) : ((downedPlantBoss && Main.rand.Next(5) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 460) : ((Main.rand.Next(4) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 162) : ((Main.rand.Next(3) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 461) : ((Main.rand.Next(2) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 166) : NewNPC(num * 16 + 8, num2 * 16, 462))))))))))))));
			}
			else if (Main.hardMode && num3 == 70 && flag6)
			{
				num46 = NewNPC(num * 16 + 8, num2 * 16, 256);
			}
			else if (num3 == 70 && (double)num2 <= Main.worldSurface && Main.rand.Next(3) != 0)
			{
				if ((!Main.hardMode && Main.rand.Next(6) == 0) || Main.rand.Next(12) == 0)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 360);
				}
				else if (Main.rand.Next(3) != 0)
				{
					num46 = ((Main.rand.Next(2) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 255) : NewNPC(num * 16 + 8, num2 * 16, 254));
				}
				else if (Main.rand.Next(4) != 0)
				{
					num46 = ((Main.rand.Next(2) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 258) : NewNPC(num * 16 + 8, num2 * 16, 257));
				}
				else if (Main.hardMode && Main.rand.Next(3) != 0)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 260);
					Main.npc[num46].ai[0] = num;
					Main.npc[num46].ai[1] = num2;
					Main.npc[num46].netUpdate = true;
				}
				else
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 259);
					Main.npc[num46].ai[0] = num;
					Main.npc[num46].ai[1] = num2;
					Main.npc[num46].netUpdate = true;
				}
			}
			else if (num3 == 70 && Main.hardMode && (double)num2 >= Main.worldSurface && Main.rand.Next(3) != 0)
			{
				if (Main.hardMode && Main.rand.Next(5) == 0)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 374);
				}
				else if ((!Main.hardMode && Main.rand.Next(4) == 0) || Main.rand.Next(8) == 0)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 360);
				}
				else if (Main.rand.Next(4) != 0)
				{
					num46 = ((Main.rand.Next(2) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 258) : NewNPC(num * 16 + 8, num2 * 16, 257));
				}
				else if (Main.hardMode && Main.rand.Next(3) != 0)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 260);
					Main.npc[num46].ai[0] = num;
					Main.npc[num46].ai[1] = num2;
					Main.npc[num46].netUpdate = true;
				}
				else
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 259);
					Main.npc[num46].ai[0] = num;
					Main.npc[num46].ai[1] = num2;
					Main.npc[num46].netUpdate = true;
				}
			}
			else if (Main.player[num5].ZoneCorrupt && Main.rand.Next(65) == 0 && !flag4)
			{
				num46 = ((!Main.hardMode || Main.rand.Next(4) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 7, 1) : NewNPC(num * 16 + 8, num2 * 16, 98, 1));
			}
			else if (Main.hardMode && (double)num2 > Main.worldSurface && Main.rand.Next(75) == 0)
			{
				num46 = ((Main.rand.Next(2) == 0 && Main.player[num5].ZoneCorrupt && !AnyNPCs(473)) ? NewNPC(num * 16 + 8, num2 * 16, 473) : ((Main.rand.Next(2) == 0 && Main.player[num5].ZoneCrimson && !AnyNPCs(474)) ? NewNPC(num * 16 + 8, num2 * 16, 474) : ((Main.rand.Next(2) != 0 || !Main.player[num5].ZoneHoly || AnyNPCs(475)) ? NewNPC(num * 16 + 8, num2 * 16, 85) : NewNPC(num * 16 + 8, num2 * 16, 475))));
			}
			else if (Main.hardMode && Main.tile[num, num2 - 1].wall == 2 && Main.rand.Next(20) == 0)
			{
				num46 = NewNPC(num * 16 + 8, num2 * 16, 85);
			}
			else if (Main.hardMode && (double)num2 <= Main.worldSurface && !Main.dayTime && (Main.rand.Next(20) == 0 || (Main.rand.Next(5) == 0 && Main.moonPhase == 4)))
			{
				num46 = NewNPC(num * 16 + 8, num2 * 16, 82);
			}
			else if (Main.hardMode && Main.halloween && (double)num2 <= Main.worldSurface && !Main.dayTime && Main.rand.Next(10) == 0)
			{
				num46 = NewNPC(num * 16 + 8, num2 * 16, 304);
			}
			else if (num45 == 60 && Main.rand.Next(500) == 0 && !Main.dayTime)
			{
				num46 = NewNPC(num * 16 + 8, num2 * 16, 52);
			}
			else if (num45 == 60 && (double)num2 > Main.worldSurface && Main.rand.Next(60) == 0)
			{
				num46 = NewNPC(num * 16 + 8, num2 * 16, 219);
			}
			else if ((double)num2 > Main.worldSurface && num2 < Main.maxTilesY - 210 && !Main.player[num5].ZoneSnow && !Main.player[num5].ZoneCrimson && !Main.player[num5].ZoneCorrupt && !Main.player[num5].ZoneJungle && !Main.player[num5].ZoneHoly && Main.rand.Next(8) == 0)
			{
				if (Main.rand.Next(goldCritterChance) == 0)
				{
					NewNPC(num * 16 + 8, num2 * 16, 448);
				}
				else
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 357);
				}
			}
			else if ((double)num2 > Main.worldSurface && num2 < Main.maxTilesY - 210 && !Main.player[num5].ZoneSnow && !Main.player[num5].ZoneCrimson && !Main.player[num5].ZoneCorrupt && !Main.player[num5].ZoneJungle && !Main.player[num5].ZoneHoly && Main.rand.Next(13) == 0)
			{
				if (Main.rand.Next(goldCritterChance) == 0)
				{
					NewNPC(num * 16 + 8, num2 * 16, 447);
				}
				else
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 300);
				}
			}
			else if ((double)num2 > Main.worldSurface && (double)num2 < (Main.rockLayer + (double)Main.maxTilesY) / 2.0 && !Main.player[num5].ZoneSnow && !Main.player[num5].ZoneCrimson && !Main.player[num5].ZoneCorrupt && !Main.player[num5].ZoneHoly && Main.rand.Next(13) == 0)
			{
				num46 = NewNPC(num * 16 + 8, num2 * 16, 359);
			}
			else if ((double)num2 < Main.worldSurface && Main.player[num5].ZoneJungle && Main.rand.Next(9) == 0)
			{
				if (Main.rand.Next(goldCritterChance) == 0)
				{
					NewNPC(num * 16 + 8, num2 * 16, 445);
				}
				else
				{
					NewNPC(num * 16 + 8, num2 * 16, 361);
				}
			}
			else if (num45 == 60 && Main.hardMode && Main.rand.Next(3) != 0)
			{
				if ((double)num2 < Main.worldSurface && !Main.dayTime && Main.rand.Next(3) == 0)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 152);
				}
				else if ((double)num2 < Main.worldSurface && Main.dayTime && Main.rand.Next(4) != 0)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 177);
				}
				else if ((double)num2 > Main.worldSurface && Main.rand.Next(100) == 0)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 205);
				}
				else if ((double)num2 > Main.worldSurface && Main.rand.Next(5) == 0)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 236);
				}
				else if ((double)num2 > Main.worldSurface && Main.rand.Next(4) != 0)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 176);
					if (Main.rand.Next(10) == 0)
					{
						Main.npc[num46].SetDefaults("Tiny Moss Hornet");
					}
					if (Main.rand.Next(10) == 0)
					{
						Main.npc[num46].SetDefaults("Little Moss Hornet");
					}
					if (Main.rand.Next(10) == 0)
					{
						Main.npc[num46].SetDefaults("Big Moss Hornet");
					}
					if (Main.rand.Next(10) == 0)
					{
						Main.npc[num46].SetDefaults("Giant Moss Hornet");
					}
				}
				else if (Main.rand.Next(3) == 0)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 175);
					Main.npc[num46].ai[0] = num;
					Main.npc[num46].ai[1] = num2;
					Main.npc[num46].netUpdate = true;
				}
				else
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 153);
				}
			}
			else if (num45 == 226 && flag3)
			{
				num46 = ((Main.rand.Next(3) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 198) : NewNPC(num * 16 + 8, num2 * 16, 226));
			}
			else if (num45 == 60 && (double)num2 > (Main.worldSurface + Main.rockLayer) / 2.0)
			{
				if (Main.rand.Next(4) == 0)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 204);
				}
				else if (Main.rand.Next(4) == 0)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 43);
					Main.npc[num46].ai[0] = num;
					Main.npc[num46].ai[1] = num2;
					Main.npc[num46].netUpdate = true;
				}
				else
				{
					switch (Main.rand.Next(8))
					{
					case 0:
						num46 = NewNPC(num * 16 + 8, num2 * 16, 231);
						if (Main.rand.Next(4) == 0)
						{
							Main.npc[num46].SetDefaults("Little Hornet Fatty");
						}
						else if (Main.rand.Next(4) == 0)
						{
							Main.npc[num46].SetDefaults("Big Hornet Fatty");
						}
						break;
					case 1:
						num46 = NewNPC(num * 16 + 8, num2 * 16, 232);
						if (Main.rand.Next(4) == 0)
						{
							Main.npc[num46].SetDefaults("Little Hornet Honey");
						}
						else if (Main.rand.Next(4) == 0)
						{
							Main.npc[num46].SetDefaults("Big Hornet Honey");
						}
						break;
					case 2:
						num46 = NewNPC(num * 16 + 8, num2 * 16, 233);
						if (Main.rand.Next(4) == 0)
						{
							Main.npc[num46].SetDefaults("Little Hornet Leafy");
						}
						else if (Main.rand.Next(4) == 0)
						{
							Main.npc[num46].SetDefaults("Big Hornet Leafy");
						}
						break;
					case 3:
						num46 = NewNPC(num * 16 + 8, num2 * 16, 234);
						if (Main.rand.Next(4) == 0)
						{
							Main.npc[num46].SetDefaults("Little Hornet Spikey");
						}
						else if (Main.rand.Next(4) == 0)
						{
							Main.npc[num46].SetDefaults("Big Hornet Spikey");
						}
						break;
					case 4:
						num46 = NewNPC(num * 16 + 8, num2 * 16, 235);
						if (Main.rand.Next(4) == 0)
						{
							Main.npc[num46].SetDefaults("Little Hornet Stingy");
						}
						else if (Main.rand.Next(4) == 0)
						{
							Main.npc[num46].SetDefaults("Big Hornet Stingy");
						}
						break;
					default:
						num46 = NewNPC(num * 16 + 8, num2 * 16, 42);
						if (Main.rand.Next(4) == 0)
						{
							Main.npc[num46].SetDefaults("Little Stinger");
						}
						else if (Main.rand.Next(4) == 0)
						{
							Main.npc[num46].SetDefaults("Big Stinger");
						}
						break;
					}
				}
			}
			else if (num45 == 60 && Main.rand.Next(4) == 0)
			{
				num46 = NewNPC(num * 16 + 8, num2 * 16, 51);
			}
			else if (num45 == 60 && Main.rand.Next(8) == 0)
			{
				num46 = NewNPC(num * 16 + 8, num2 * 16, 56);
				Main.npc[num46].ai[0] = num;
				Main.npc[num46].ai[1] = num2;
				Main.npc[num46].netUpdate = true;
			}
			else if (Main.hardMode && num45 == 53 && Main.rand.Next(3) == 0)
			{
				num46 = NewNPC(num * 16 + 8, num2 * 16, 78);
			}
			else if (Main.hardMode && (num45 == 112 || num45 == 234) && Main.rand.Next(2) == 0)
			{
				num46 = NewNPC(num * 16 + 8, num2 * 16, 79);
			}
			else if (Main.hardMode && num45 == 116 && Main.rand.Next(2) == 0)
			{
				num46 = NewNPC(num * 16 + 8, num2 * 16, 80);
			}
			else if (Main.hardMode && !flag6 && (double)num2 < Main.rockLayer && (num45 == 116 || num45 == 117 || num45 == 109 || num45 == 164))
			{
				num46 = ((!Main.dayTime && Main.rand.Next(2) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 122) : ((Main.rand.Next(10) != 0 && (!Main.player[num5].ZoneWaterCandle || Main.rand.Next(10) != 0)) ? NewNPC(num * 16 + 8, num2 * 16, 75) : NewNPC(num * 16 + 8, num2 * 16, 86)));
			}
			else if (!flag4 && Main.hardMode && Main.rand.Next(50) == 0 && !flag6 && (double)num2 >= Main.rockLayer && (num45 == 116 || num45 == 117 || num45 == 109 || num45 == 164))
			{
				num46 = NewNPC(num * 16 + 8, num2 * 16, 84);
			}
			else if ((num45 == 204 && Main.player[num5].ZoneCrimson) || num45 == 199 || num45 == 200 || num45 == 203 || num45 == 234)
			{
				if (Main.hardMode && (double)num2 >= Main.rockLayer && Main.rand.Next(5) == 0 && !flag4)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 182);
				}
				else if (Main.hardMode && (double)num2 >= Main.rockLayer && Main.rand.Next(2) == 0)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 268);
				}
				else if (Main.hardMode && Main.rand.Next(3) == 0)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 183);
					if (Main.rand.Next(3) == 0)
					{
						Main.npc[num46].SetDefaults("Little Crimslime");
					}
					else if (Main.rand.Next(3) == 0)
					{
						Main.npc[num46].SetDefaults("Big Crimslime");
					}
				}
				else if (Main.hardMode && (double)num2 >= Main.rockLayer && Main.rand.Next(40) == 0 && !flag4)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 179);
				}
				else if (Main.hardMode && (Main.rand.Next(2) == 0 || (double)num2 > Main.worldSurface))
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 174);
				}
				else if ((Main.tile[num, num2].wall > 0 && Main.rand.Next(4) != 0) || Main.rand.Next(8) == 0)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 239);
				}
				else if (Main.rand.Next(2) == 0)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 181);
				}
				else
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 173);
					if (Main.rand.Next(3) == 0)
					{
						Main.npc[num46].SetDefaults("Little Crimera");
					}
					else if (Main.rand.Next(3) == 0)
					{
						Main.npc[num46].SetDefaults("Big Crimera");
					}
				}
			}
			else if ((num45 == 22 && Main.player[num5].ZoneCorrupt) || num45 == 23 || num45 == 25 || num45 == 112 || num45 == 163)
			{
				if (Main.hardMode && (double)num2 >= Main.rockLayer && Main.rand.Next(3) == 0)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 101);
					Main.npc[num46].ai[0] = num;
					Main.npc[num46].ai[1] = num2;
					Main.npc[num46].netUpdate = true;
				}
				else if (Main.hardMode && Main.rand.Next(3) == 0)
				{
					num46 = ((Main.rand.Next(3) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 81) : NewNPC(num * 16 + 8, num2 * 16, 121));
				}
				else if (Main.hardMode && (double)num2 >= Main.rockLayer && Main.rand.Next(40) == 0 && !flag4)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 83);
				}
				else if (Main.hardMode && (Main.rand.Next(2) == 0 || (double)num2 > Main.rockLayer))
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 94);
				}
				else
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 6);
					if (Main.rand.Next(3) == 0)
					{
						Main.npc[num46].SetDefaults("Little Eater");
					}
					else if (Main.rand.Next(3) == 0)
					{
						Main.npc[num46].SetDefaults("Big Eater");
					}
				}
			}
			else if ((double)num2 <= Main.worldSurface)
			{
				bool flag21 = (float)Math.Abs(num - Main.maxTilesX / 2) / (float)(Main.maxTilesX / 2) > 0.33f;
				if (flag21 && AnyDanger())
				{
					flag21 = false;
				}
				if (Main.player[num5].ZoneSnow && Main.hardMode && Main.cloudAlpha > 0f && !AnyNPCs(243) && Main.rand.Next(20) == 0)
				{
					NewNPC(num * 16 + 8, num2 * 16, 243);
				}
				else if (Main.player[num5].ZoneHoly && Main.hardMode && Main.cloudAlpha > 0f && !AnyNPCs(244) && Main.rand.Next(20) == 0)
				{
					NewNPC(num * 16 + 8, num2 * 16, 244);
				}
				else if (!Main.player[num5].ZoneSnow && Main.hardMode && Main.cloudAlpha > 0f && CountNPCS(250) < 2 && Main.rand.Next(10) == 0)
				{
					NewNPC(num * 16 + 8, num2 * 16, 250);
				}
				else if (flag21 && Main.hardMode && downedGolemBoss && ((!downedMartians && Main.rand.Next(100) == 0) || Main.rand.Next(400) == 0) && !AnyNPCs(399))
				{
					NewNPC(num * 16 + 8, num2 * 16, 399);
				}
				else if (Main.dayTime)
				{
					int num70 = Math.Abs(num - Main.spawnTileX);
					if (num70 < Main.maxTilesX / 3 && Main.rand.Next(15) == 0 && (num45 == 2 || num45 == 109 || num45 == 147 || num45 == 161))
					{
						if (num45 == 147 || num45 == 161)
						{
							if (Main.rand.Next(2) == 0)
							{
								NewNPC(num * 16 + 8, num2 * 16, 148);
							}
							else
							{
								NewNPC(num * 16 + 8, num2 * 16, 149);
							}
						}
						else if (Main.dayTime && Main.rand.Next(butterflyChance) == 0 && (double)num2 <= Main.worldSurface)
						{
							if (Main.rand.Next(goldCritterChance) == 0)
							{
								NewNPC(num * 16 + 8, num2 * 16, 444);
							}
							else
							{
								NewNPC(num * 16 + 8, num2 * 16, 356);
							}
							if (Main.rand.Next(4) == 0)
							{
								NewNPC(num * 16 + 8 - 16, num2 * 16, 356);
							}
							if (Main.rand.Next(4) == 0)
							{
								NewNPC(num * 16 + 8 + 16, num2 * 16, 356);
							}
						}
						else if (Main.rand.Next(goldCritterChance) == 0)
						{
							NewNPC(num * 16 + 8, num2 * 16, 443);
						}
						else if (Main.rand.Next(goldCritterChance) == 0 && (double)num2 <= Main.worldSurface)
						{
							NewNPC(num * 16 + 8, num2 * 16, 539);
						}
						else if (Main.halloween && Main.rand.Next(3) != 0)
						{
							NewNPC(num * 16 + 8, num2 * 16, 303);
						}
						else if (Main.xMas && Main.rand.Next(3) != 0)
						{
							NewNPC(num * 16 + 8, num2 * 16, 337);
						}
						else if (Main.rand.Next(3) == 0 && (double)num2 <= Main.worldSurface)
						{
							NewNPC(num * 16 + 8, num2 * 16, Utils.SelectRandom(Main.rand, new short[2]
							{
								299,
								538
							}));
						}
						else
						{
							NewNPC(num * 16 + 8, num2 * 16, 46);
						}
					}
					else if (num70 < Main.maxTilesX / 3 && Main.rand.Next(15) == 0 && num45 == 53)
					{
						NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(366, 368));
					}
					else if (num70 < Main.maxTilesX / 3 && Main.dayTime && Main.time < 18000.0 && (num45 == 2 || num45 == 109) && Main.rand.Next(4) == 0 && (double)num2 <= Main.worldSurface && CountNPCS(74) + CountNPCS(297) + CountNPCS(298) < 6)
					{
						int num71 = Main.rand.Next(4);
						if (Main.rand.Next(goldCritterChance) == 0)
						{
							NewNPC(num * 16 + 8, num2 * 16, 442);
						}
						else
						{
							switch (num71)
							{
							case 0:
								NewNPC(num * 16 + 8, num2 * 16, 297);
								break;
							case 1:
								NewNPC(num * 16 + 8, num2 * 16, 298);
								break;
							default:
								NewNPC(num * 16 + 8, num2 * 16, 74);
								break;
							}
						}
					}
					else if (num70 < Main.maxTilesX / 3 && Main.rand.Next(15) == 0 && (num45 == 2 || num45 == 109 || num45 == 147))
					{
						int num72 = Main.rand.Next(4);
						if (Main.rand.Next(goldCritterChance) == 0)
						{
							NewNPC(num * 16 + 8, num2 * 16, 442);
						}
						else
						{
							switch (num72)
							{
							case 0:
								NewNPC(num * 16 + 8, num2 * 16, 297);
								break;
							case 1:
								NewNPC(num * 16 + 8, num2 * 16, 298);
								break;
							default:
								NewNPC(num * 16 + 8, num2 * 16, 74);
								break;
							}
						}
					}
					else if (num70 > Main.maxTilesX / 3 && num45 == 2 && Main.rand.Next(300) == 0 && !AnyNPCs(50))
					{
						SpawnOnPlayer(num5, 50);
					}
					else if (num45 == 53 && Main.rand.Next(5) == 0 && !flag6)
					{
						num46 = NewNPC(num * 16 + 8, num2 * 16, 69);
					}
					else if (num45 == 53 && Main.rand.Next(3) == 0 && !flag6)
					{
						num46 = NewNPC(num * 16 + 8, num2 * 16, 537);
					}
					else if (downedBoss1 && num45 == 53 && Main.rand.Next(5) == 0 && !flag6)
					{
						num46 = NewNPC(num * 16 + 8, num2 * 16, 509);
					}
					else if (num45 == 53 && !flag6)
					{
						num46 = NewNPC(num * 16 + 8, num2 * 16, 61);
					}
					else if (num70 > Main.maxTilesX / 3 && (Main.rand.Next(15) == 0 || (!downedGoblins && WorldGen.shadowOrbSmashed && Main.rand.Next(7) == 0)))
					{
						num46 = NewNPC(num * 16 + 8, num2 * 16, 73);
					}
					else if (Main.raining && Main.rand.Next(3) == 0)
					{
						num46 = NewNPC(num * 16 + 8, num2 * 16, 224);
					}
					else if (Main.raining && Main.rand.Next(2) == 0)
					{
						num46 = NewNPC(num * 16 + 8, num2 * 16, 225);
					}
					else
					{
						num46 = NewNPC(num * 16 + 8, num2 * 16, 1);
						switch (num45)
						{
						case 60:
							Main.npc[num46].SetDefaults("Jungle Slime");
							break;
						case 147:
						case 161:
							Main.npc[num46].SetDefaults("Ice Slime");
							break;
						default:
							if (Main.halloween && Main.rand.Next(3) != 0)
							{
								Main.npc[num46].SetDefaults(302);
							}
							else if (Main.xMas && Main.rand.Next(3) != 0)
							{
								Main.npc[num46].SetDefaults(Main.rand.Next(333, 337));
							}
							else if (Main.rand.Next(3) == 0 || (num70 < 200 && !Main.expertMode))
							{
								Main.npc[num46].SetDefaults("Green Slime");
							}
							else if (Main.rand.Next(10) == 0 && (num70 > 400 || Main.expertMode))
							{
								Main.npc[num46].SetDefaults("Purple Slime");
							}
							break;
						}
					}
				}
				else if ((num3 == 2 || num3 == 109) && Main.rand.Next(fireFlyChance) == 0 && (double)num2 <= Main.worldSurface)
				{
					int num73 = 355;
					if (num45 == 109)
					{
						num73 = 358;
					}
					NewNPC(num * 16 + 8, num2 * 16, num73);
					if (Main.rand.Next(fireFlyMultiple) == 0)
					{
						NewNPC(num * 16 + 8 - 16, num2 * 16, num73);
					}
					if (Main.rand.Next(fireFlyMultiple) == 0)
					{
						NewNPC(num * 16 + 8 + 16, num2 * 16, num73);
					}
					if (Main.rand.Next(fireFlyMultiple) == 0)
					{
						NewNPC(num * 16 + 8, num2 * 16 - 16, num73);
					}
					if (Main.rand.Next(fireFlyMultiple) == 0)
					{
						NewNPC(num * 16 + 8, num2 * 16 + 16, num73);
					}
				}
				else if (Main.rand.Next(10) == 0 && Main.halloween)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 301);
				}
				else if (Main.rand.Next(6) == 0 || (Main.moonPhase == 4 && Main.rand.Next(2) == 0))
				{
					if (Main.hardMode && Main.rand.Next(3) == 0)
					{
						num46 = NewNPC(num * 16 + 8, num2 * 16, 133);
					}
					else if (Main.halloween && Main.rand.Next(2) == 0)
					{
						num46 = NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(317, 319));
					}
					else if (Main.rand.Next(2) == 0)
					{
						num46 = NewNPC(num * 16 + 8, num2 * 16, 2);
						if (Main.rand.Next(4) == 0)
						{
							Main.npc[num46].SetDefaults("Demon Eye 2");
						}
					}
					else
					{
						switch (Main.rand.Next(5))
						{
						case 0:
							num46 = NewNPC(num * 16 + 8, num2 * 16, 190);
							if (Main.rand.Next(3) == 0)
							{
								Main.npc[num46].SetDefaults("Cataract Eye 2");
							}
							break;
						case 1:
							num46 = NewNPC(num * 16 + 8, num2 * 16, 191);
							if (Main.rand.Next(3) == 0)
							{
								Main.npc[num46].SetDefaults("Sleepy Eye 2");
							}
							break;
						case 2:
							num46 = NewNPC(num * 16 + 8, num2 * 16, 192);
							if (Main.rand.Next(3) == 0)
							{
								Main.npc[num46].SetDefaults("Dialated Eye 2");
							}
							break;
						case 3:
							num46 = NewNPC(num * 16 + 8, num2 * 16, 193);
							if (Main.rand.Next(3) == 0)
							{
								Main.npc[num46].SetDefaults("Green Eye 2");
							}
							break;
						case 4:
							num46 = NewNPC(num * 16 + 8, num2 * 16, 194);
							if (Main.rand.Next(3) == 0)
							{
								Main.npc[num46].SetDefaults("Purple Eye 2");
							}
							break;
						}
					}
				}
				else if (Main.hardMode && Main.rand.Next(50) == 0 && Main.bloodMoon && !AnyNPCs(109))
				{
					NewNPC(num * 16 + 8, num2 * 16, 109);
				}
				else if (Main.rand.Next(250) == 0 && Main.bloodMoon)
				{
					NewNPC(num * 16 + 8, num2 * 16, 53);
				}
				else if (Main.rand.Next(250) == 0 && Main.bloodMoon)
				{
					NewNPC(num * 16 + 8, num2 * 16, 536);
				}
				else if (Main.moonPhase == 0 && Main.hardMode && Main.rand.Next(3) != 0)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 104);
				}
				else if (Main.hardMode && Main.rand.Next(3) == 0)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 140);
				}
				else if (Main.bloodMoon && Main.rand.Next(5) < 2)
				{
					num46 = ((Main.rand.Next(2) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 490) : NewNPC(num * 16 + 8, num2 * 16, 489));
				}
				else if (num3 == 147 || num3 == 161 || num3 == 163 || num3 == 164 || num3 == 162)
				{
					num46 = ((Main.hardMode && Main.rand.Next(4) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 169) : ((Main.hardMode && Main.rand.Next(3) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 155) : ((!Main.expertMode || Main.rand.Next(2) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 161) : NewNPC(num * 16 + 8, num2 * 16, 431))));
				}
				else if (Main.raining && Main.rand.Next(2) == 0)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 223);
					if (Main.rand.Next(3) == 0)
					{
						if (Main.rand.Next(2) == 0)
						{
							Main.npc[num46].SetDefaults("Small Rain Zombie");
						}
						else
						{
							Main.npc[num46].SetDefaults("Big Rain Zombie");
						}
					}
				}
				else
				{
					int num74 = Main.rand.Next(7);
					if (Main.halloween && Main.rand.Next(2) == 0)
					{
						num46 = NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(319, 322));
					}
					else if (Main.xMas && Main.rand.Next(2) == 0)
					{
						num46 = NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(331, 333));
					}
					else if (num74 == 0 && Main.expertMode && Main.rand.Next(3) == 0)
					{
						num46 = NewNPC(num * 16 + 8, num2 * 16, 430);
					}
					else if (num74 == 2 && Main.expertMode && Main.rand.Next(3) == 0)
					{
						num46 = NewNPC(num * 16 + 8, num2 * 16, 432);
					}
					else if (num74 == 3 && Main.expertMode && Main.rand.Next(3) == 0)
					{
						num46 = NewNPC(num * 16 + 8, num2 * 16, 433);
					}
					else if (num74 == 4 && Main.expertMode && Main.rand.Next(3) == 0)
					{
						num46 = NewNPC(num * 16 + 8, num2 * 16, 434);
					}
					else if (num74 == 5 && Main.expertMode && Main.rand.Next(3) == 0)
					{
						num46 = NewNPC(num * 16 + 8, num2 * 16, 435);
					}
					else if (num74 == 6 && Main.expertMode && Main.rand.Next(3) == 0)
					{
						num46 = NewNPC(num * 16 + 8, num2 * 16, 436);
					}
					else
					{
						switch (num74)
						{
						case 0:
							num46 = NewNPC(num * 16 + 8, num2 * 16, 3);
							if (Main.rand.Next(3) == 0)
							{
								if (Main.rand.Next(2) == 0)
								{
									Main.npc[num46].SetDefaults("Small Zombie");
								}
								else
								{
									Main.npc[num46].SetDefaults("Big Zombie");
								}
							}
							break;
						case 1:
							num46 = NewNPC(num * 16 + 8, num2 * 16, 132);
							if (Main.rand.Next(3) == 0)
							{
								if (Main.rand.Next(2) == 0)
								{
									Main.npc[num46].SetDefaults("Small Bald Zombie");
								}
								else
								{
									Main.npc[num46].SetDefaults("Big Bald Zombie");
								}
							}
							break;
						case 2:
							num46 = NewNPC(num * 16 + 8, num2 * 16, 186);
							if (Main.rand.Next(3) == 0)
							{
								if (Main.rand.Next(2) == 0)
								{
									Main.npc[num46].SetDefaults("Small Pincushion Zombie");
								}
								else
								{
									Main.npc[num46].SetDefaults("Big Pincushion Zombie");
								}
							}
							break;
						case 3:
							num46 = NewNPC(num * 16 + 8, num2 * 16, 187);
							if (Main.rand.Next(3) == 0)
							{
								if (Main.rand.Next(2) == 0)
								{
									Main.npc[num46].SetDefaults("Small Slimed Zombie");
								}
								else
								{
									Main.npc[num46].SetDefaults("Big Slimed Zombie");
								}
							}
							break;
						case 4:
							num46 = NewNPC(num * 16 + 8, num2 * 16, 188);
							if (Main.rand.Next(3) == 0)
							{
								if (Main.rand.Next(2) == 0)
								{
									Main.npc[num46].SetDefaults("Small Swamp Zombie");
								}
								else
								{
									Main.npc[num46].SetDefaults("Big Swamp Zombie");
								}
							}
							break;
						case 5:
							num46 = NewNPC(num * 16 + 8, num2 * 16, 189);
							if (Main.rand.Next(3) == 0)
							{
								if (Main.rand.Next(2) == 0)
								{
									Main.npc[num46].SetDefaults("Small Twiggy Zombie");
								}
								else
								{
									Main.npc[num46].SetDefaults("Big Twiggy Zombie");
								}
							}
							break;
						case 6:
							num46 = NewNPC(num * 16 + 8, num2 * 16, 200);
							if (Main.rand.Next(3) == 0)
							{
								if (Main.rand.Next(2) == 0)
								{
									Main.npc[num46].SetDefaults("Small Female Zombie");
								}
								else
								{
									Main.npc[num46].SetDefaults("Big Female Zombie");
								}
							}
							break;
						}
					}
				}
			}
			else if ((double)num2 <= Main.rockLayer)
			{
				if (!flag4 && Main.rand.Next(50) == 0 && !Main.player[num5].ZoneSnow)
				{
					num46 = (Main.hardMode ? NewNPC(num * 16 + 8, num2 * 16, 95, 1) : ((!Main.player[num5].ZoneSnow) ? NewNPC(num * 16 + 8, num2 * 16, 10, 1) : NewNPC(num * 16 + 8, num2 * 16, 185)));
				}
				else if (Main.hardMode && Main.rand.Next(3) == 0)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 140);
				}
				else if (Main.hardMode && Main.rand.Next(4) != 0)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 141);
				}
				else if (num45 == 147 || num45 == 161 || Main.player[num5].ZoneSnow)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 147);
				}
				else
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 1);
					if (Main.rand.Next(5) == 0)
					{
						Main.npc[num46].SetDefaults("Yellow Slime");
					}
					else if (Main.rand.Next(2) == 0)
					{
						Main.npc[num46].SetDefaults("Blue Slime");
					}
					else
					{
						Main.npc[num46].SetDefaults("Red Slime");
					}
				}
			}
			else if (num2 > Main.maxTilesY - 190)
			{
				num46 = ((Main.hardMode && !savedTaxCollector && Main.rand.Next(20) == 0 && !AnyNPCs(534)) ? NewNPC(num * 16 + 8, num2 * 16, 534) : ((Main.rand.Next(40) == 0 && !AnyNPCs(39)) ? NewNPC(num * 16 + 8, num2 * 16, 39, 1) : ((Main.rand.Next(14) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 24) : ((Main.rand.Next(7) == 0) ? ((Main.rand.Next(7) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 66) : ((!Main.hardMode || !downedMechBossAny || Main.rand.Next(5) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 62) : NewNPC(num * 16 + 8, num2 * 16, 156))) : ((Main.rand.Next(3) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 59) : ((!Main.hardMode || !downedMechBossAny || Main.rand.Next(5) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 60) : NewNPC(num * 16 + 8, num2 * 16, 151)))))));
			}
			else if (Main.rand.Next(60) == 0)
			{
				num46 = ((!Main.player[num5].ZoneSnow) ? NewNPC(num * 16 + 8, num2 * 16, 217) : NewNPC(num * 16 + 8, num2 * 16, 218));
			}
			else if ((num45 == 116 || num45 == 117 || num45 == 164) && Main.hardMode && !flag4 && Main.rand.Next(8) == 0)
			{
				num46 = NewNPC(num * 16 + 8, num2 * 16, 120);
			}
			else if ((num3 == 147 || num3 == 161 || num3 == 162 || num3 == 163 || num3 == 164) && !flag4 && Main.hardMode && Main.player[num5].ZoneCorrupt && Main.rand.Next(30) == 0)
			{
				num46 = NewNPC(num * 16 + 8, num2 * 16, 170);
			}
			else if ((num3 == 147 || num3 == 161 || num3 == 162 || num3 == 163 || num3 == 164) && !flag4 && Main.hardMode && Main.player[num5].ZoneHoly && Main.rand.Next(30) == 0)
			{
				num46 = NewNPC(num * 16 + 8, num2 * 16, 171);
			}
			else if ((num3 == 147 || num3 == 161 || num3 == 162 || num3 == 163 || num3 == 164) && !flag4 && Main.hardMode && Main.player[num5].ZoneCrimson && Main.rand.Next(30) == 0)
			{
				num46 = NewNPC(num * 16 + 8, num2 * 16, 180);
			}
			else if (Main.hardMode && Main.player[num5].ZoneSnow && Main.rand.Next(10) == 0)
			{
				num46 = NewNPC(num * 16 + 8, num2 * 16, 154);
			}
			else if (!flag4 && Main.rand.Next(100) == 0 && !Main.player[num5].ZoneHoly)
			{
				num46 = (Main.hardMode ? NewNPC(num * 16 + 8, num2 * 16, 95, 1) : ((!Main.player[num5].ZoneSnow) ? NewNPC(num * 16 + 8, num2 * 16, 10, 1) : NewNPC(num * 16 + 8, num2 * 16, 185)));
			}
			else if (Main.player[num5].ZoneSnow && Main.rand.Next(20) == 0)
			{
				num46 = NewNPC(num * 16 + 8, num2 * 16, 185);
			}
			else if (!Main.hardMode && Main.rand.Next(10) == 0)
			{
				if (Main.player[num5].ZoneSnow)
				{
					Main.npc[num46].SetDefaults(184);
				}
				else
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 16);
				}
			}
			else if (!Main.hardMode && Main.rand.Next(4) == 0)
			{
				num46 = NewNPC(num * 16 + 8, num2 * 16, 1);
				if (Main.player[num5].ZoneJungle)
				{
					Main.npc[num46].SetDefaults("Jungle Slime");
				}
				else if (Main.player[num5].ZoneSnow)
				{
					Main.npc[num46].SetDefaults(184);
				}
				else
				{
					Main.npc[num46].SetDefaults("Black Slime");
				}
			}
			else if (Main.rand.Next(2) != 0)
			{
				num46 = ((Main.hardMode && (Main.player[num5].ZoneHoly & (Main.rand.Next(2) == 0))) ? NewNPC(num * 16 + 8, num2 * 16, 138) : (Main.player[num5].ZoneJungle ? NewNPC(num * 16 + 8, num2 * 16, 51) : ((Main.hardMode && Main.player[num5].ZoneHoly) ? NewNPC(num * 16 + 8, num2 * 16, 137) : ((Main.hardMode && Main.rand.Next(6) > 0) ? NewNPC(num * 16 + 8, num2 * 16, 93) : ((num3 != 147 && num3 != 161 && num3 != 162) ? NewNPC(num * 16 + 8, num2 * 16, 49) : ((!Main.hardMode) ? NewNPC(num * 16 + 8, num2 * 16, 150) : NewNPC(num * 16 + 8, num2 * 16, 169)))))));
			}
			else if (Main.rand.Next(35) == 0 && CountNPCS(453) == 0)
			{
				num46 = NewNPC(num * 16 + 8, num2 * 16, 453);
			}
			else if ((!Main.hardMode && Main.rand.Next(80) == 0) || Main.rand.Next(200) == 0)
			{
				num46 = NewNPC(num * 16 + 8, num2 * 16, 195);
			}
			else if (Main.hardMode && (double)num2 > (Main.rockLayer + (double)Main.maxTilesY) / 2.0 && Main.rand.Next(300) == 0)
			{
				num46 = NewNPC(num * 16 + 8, num2 * 16, 172);
			}
			else if ((double)num2 > (Main.rockLayer + (double)Main.maxTilesY) / 2.0 && (Main.rand.Next(200) == 0 || (Main.rand.Next(50) == 0 && Main.player[num5].armor[1].type >= 1282 && Main.player[num5].armor[1].type <= 1287 && Main.player[num5].armor[0].type != 238)))
			{
				num46 = NewNPC(num * 16 + 8, num2 * 16, 45);
			}
			else if (flag9 && Main.rand.Next(5) != 0)
			{
				num46 = ((Main.rand.Next(6) == 0 || AnyNPCs(480)) ? NewNPC(num * 16 + 8, num2 * 16, 481) : NewNPC(num * 16 + 8, num2 * 16, 480));
			}
			else if (flag8 && Main.rand.Next(5) != 0)
			{
				num46 = ((Main.rand.Next(6) == 0 || AnyNPCs(483)) ? NewNPC(num * 16 + 8, num2 * 16, 482) : NewNPC(num * 16 + 8, num2 * 16, 483));
			}
			else if (Main.hardMode && Main.rand.Next(10) != 0)
			{
				if (Main.rand.Next(2) != 0)
				{
					num46 = ((!Main.player[num5].ZoneSnow) ? NewNPC(num * 16 + 8, num2 * 16, 110) : NewNPC(num * 16 + 8, num2 * 16, 206));
				}
				else if (Main.player[num5].ZoneSnow)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 197);
				}
				else if (Main.halloween && Main.rand.Next(5) == 0)
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 316);
				}
				else
				{
					num46 = NewNPC(num * 16 + 8, num2 * 16, 77);
					if ((double)num2 > (Main.rockLayer + (double)Main.maxTilesY) / 2.0 && Main.rand.Next(5) == 0)
					{
						Main.npc[num46].SetDefaults("Heavy Skeleton");
					}
				}
			}
			else if (Main.rand.Next(20) == 0)
			{
				num46 = NewNPC(num * 16 + 8, num2 * 16, 44);
			}
			else if (num3 == 147 || num3 == 161 || num3 == 162)
			{
				num46 = NewNPC(num * 16 + 8, num2 * 16, 167);
			}
			else if (Main.player[num5].ZoneSnow)
			{
				num46 = NewNPC(num * 16 + 8, num2 * 16, 185);
			}
			else if (Main.rand.Next(3) == 0)
			{
				num46 = NewNPC(num * 16 + 8, num2 * 16, cavernMonsterType[Main.rand.Next(2), Main.rand.Next(3)]);
			}
			else if (Main.halloween && Main.rand.Next(2) == 0)
			{
				num46 = NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(322, 325));
			}
			else if (Main.expertMode && Main.rand.Next(3) == 0)
			{
				int num75 = Main.rand.Next(4);
				num46 = ((num75 == 0) ? NewNPC(num * 16 + 8, num2 * 16, 449) : ((num75 == 0) ? NewNPC(num * 16 + 8, num2 * 16, 450) : ((num75 != 0) ? NewNPC(num * 16 + 8, num2 * 16, 452) : NewNPC(num * 16 + 8, num2 * 16, 451))));
			}
			else
			{
				switch (Main.rand.Next(4))
				{
				case 0:
					num46 = NewNPC(num * 16 + 8, num2 * 16, 21);
					if (Main.rand.Next(3) == 0)
					{
						if (Main.rand.Next(2) == 0)
						{
							Main.npc[num46].SetDefaults("Big Skeleton");
						}
						else
						{
							Main.npc[num46].SetDefaults("Small Skeleton");
						}
					}
					break;
				case 1:
					num46 = NewNPC(num * 16 + 8, num2 * 16, 201);
					if (Main.rand.Next(3) == 0)
					{
						if (Main.rand.Next(2) == 0)
						{
							Main.npc[num46].SetDefaults("Big Headache Skeleton");
						}
						else
						{
							Main.npc[num46].SetDefaults("Small Headache Skeleton");
						}
					}
					break;
				case 2:
					num46 = NewNPC(num * 16 + 8, num2 * 16, 202);
					if (Main.rand.Next(3) == 0)
					{
						if (Main.rand.Next(2) == 0)
						{
							Main.npc[num46].SetDefaults("Big Misassembled Skeleton");
						}
						else
						{
							Main.npc[num46].SetDefaults("Small Misassembled Skeleton");
						}
					}
					break;
				case 3:
					num46 = NewNPC(num * 16 + 8, num2 * 16, 203);
					if (Main.rand.Next(3) == 0)
					{
						if (Main.rand.Next(2) == 0)
						{
							Main.npc[num46].SetDefaults("Big Pantless Skeleton");
						}
						else
						{
							Main.npc[num46].SetDefaults("Small Pantless Skeleton");
						}
					}
					break;
				}
			}
			if (Main.npc[num46].type == 1 && Main.rand.Next(180) == 0)
			{
				Main.npc[num46].SetDefaults("Pinky");
			}
			if (Main.netMode == 2 && num46 < 200)
			{
				NetMessage.SendData(23, -1, -1, "", num46);
			}
		}

		public static bool AnyDanger()
		{
			bool flag = false;
			if (MoonLordCountdown > 0)
			{
				flag = true;
			}
			if (Main.invasionType > 0)
			{
				flag = true;
			}
			if (!flag)
			{
				for (int i = 0; i < 200; i++)
				{
					if (Main.npc[i].active && (Main.npc[i].boss || NPCID.Sets.TechnicallyABoss[Main.npc[i].type]))
					{
						flag = true;
					}
				}
			}
			return flag;
		}

		public static bool AnyoneNearCultists()
		{
			int num = FindFirstNPC(437);
			if (num == -1)
			{
				return false;
			}
			Rectangle rectangle = Utils.CenteredRectangle(Main.npc[num].Center, new Vector2(2500f, 1500f));
			Rectangle r = new Rectangle(0, 0, 2500, 1500);
			Vector2 vector = r.Size() / 2f;
			for (int i = 0; i < 16; i++)
			{
				if (Main.player[i].active)
				{
					r.X = (int)Main.player[i].Center.X - (int)vector.X;
					r.Y = (int)Main.player[i].Center.Y - (int)vector.Y;
					if (rectangle.Intersects(r))
					{
						return true;
					}
				}
			}
			return false;
		}

		public static void SpawnWOF(Vector2 pos)
		{
			if (pos.Y / 16f < (float)(Main.maxTilesY - 205) || Main.wof >= 0 || Main.netMode == 1)
			{
				return;
			}
			Player.FindClosest(pos, 16, 16);
			int num = 1;
			if (pos.X / 16f > (float)(Main.maxTilesX / 2))
			{
				num = -1;
			}
			bool flag = false;
			int num2 = (int)pos.X;
			while (!flag)
			{
				flag = true;
				for (int i = 0; i < 16; i++)
				{
					if (Main.player[i].active && Main.player[i].position.X > (float)(num2 - 1200) && Main.player[i].position.X < (float)(num2 + 1200))
					{
						num2 -= num * 16;
						flag = false;
					}
				}
				if (num2 / 16 < 20 || num2 / 16 > Main.maxTilesX - 20)
				{
					flag = true;
				}
			}
			int num3 = (int)pos.Y;
			int num4 = num2 / 16;
			int num5 = num3 / 16;
			int num6 = 0;
			try
			{
				while (true)
				{
					if (!WorldGen.SolidTile(num4, num5 - num6) && Main.tile[num4, num5 - num6].liquid < 100)
					{
						num5 -= num6;
						break;
					}
					if (!WorldGen.SolidTile(num4, num5 + num6) && Main.tile[num4, num5 + num6].liquid < 100)
					{
						num5 += num6;
						break;
					}
					num6++;
				}
			}
			catch
			{
			}
			num3 = num5 * 16;
			int num7 = NewNPC(num2, num3, 113);
			if (Main.netMode == 0)
			{
				Main.NewText(Language.GetTextValue("Announcement.HasAwoken", Main.npc[num7].TypeName), 175, 75);
			}
			else if (Main.netMode == 2)
			{
				NetMessage.SendData(25, -1, -1, Language.GetTextValue("Announcement.HasAwoken", Main.npc[num7].TypeName), 16, 175f, 75f, 255f);
			}
		}

		public static void SpawnSkeletron()
		{
			bool flag = true;
			bool flag2 = false;
			Vector2 vector = Vector2.Zero;
			int num = 0;
			int num2 = 0;
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type == 35)
				{
					flag = false;
					break;
				}
			}
			for (int j = 0; j < 200; j++)
			{
				if (!Main.npc[j].active)
				{
					continue;
				}
				if (Main.npc[j].type == 37)
				{
					flag2 = true;
					Main.npc[j].ai[3] = 1f;
					vector = Main.npc[j].position;
					num = Main.npc[j].width;
					num2 = Main.npc[j].height;
					if (Main.netMode == 2)
					{
						NetMessage.SendData(23, -1, -1, "", j);
					}
				}
				else if (Main.npc[j].type == 54)
				{
					flag2 = true;
					vector = Main.npc[j].position;
					num = Main.npc[j].width;
					num2 = Main.npc[j].height;
				}
			}
			if (flag && flag2)
			{
				int num3 = NewNPC((int)vector.X + num / 2, (int)vector.Y + num2 / 2, 35);
				Main.npc[num3].netUpdate = true;
				string nPCNameValue = Lang.GetNPCNameValue(35);
				if (Main.netMode == 0)
				{
					Main.NewText(Language.GetTextValue("Announcement.HasAwoken", nPCNameValue), 175, 75);
				}
				else if (Main.netMode == 2)
				{
					NetMessage.SendData(25, -1, -1, Language.GetTextValue("Announcement.HasAwoken", nPCNameValue), 16, 175f, 75f, 255f);
				}
			}
		}

		public static void SpawnOnPlayer(int plr, int Type)
		{
			if (Main.netMode == 1 || (Type == 262 && AnyNPCs(262)))
			{
				return;
			}
			switch (Type)
			{
			case 245:
				if (!AnyNPCs(245))
				{
					try
					{
						int num3 = (int)Main.player[plr].Center.X / 16;
						int num4 = (int)Main.player[plr].Center.Y / 16;
						int num5 = 0;
						int num6 = 0;
						for (int i = num3 - 20; i < num3 + 20; i++)
						{
							for (int j = num4 - 20; j < num4 + 20; j++)
							{
								if (Main.tile[i, j].active() && Main.tile[i, j].type == 237 && Main.tile[i, j].frameX == 18 && Main.tile[i, j].frameY == 0)
								{
									num5 = i;
									num6 = j;
								}
							}
						}
						if (num5 > 0 && num6 > 0)
						{
							int num7 = num6 - 15;
							int num8 = num6 - 15;
							for (int num9 = num6; num9 > num6 - 100; num9--)
							{
								if (WorldGen.SolidTile(num5, num9))
								{
									num7 = num9;
									break;
								}
							}
							for (int k = num6; k < num6 + 100; k++)
							{
								if (WorldGen.SolidTile(num5, k))
								{
									num8 = k;
									break;
								}
							}
							num6 = (num7 + num7 + num8) / 3;
							int num10 = NewNPC(num5 * 16 + 8, num6 * 16, 245, 100);
							Main.npc[num10].target = plr;
							string typeName2 = Main.npc[num10].TypeName;
							if (Main.netMode == 0)
							{
								Main.NewText(Language.GetTextValue("Announcement.HasAwoken", typeName2), 175, 75);
							}
							else if (Main.netMode == 2)
							{
								NetMessage.SendData(25, -1, -1, Language.GetTextValue("Announcement.HasAwoken", typeName2), 16, 175f, 75f, 255f);
							}
						}
					}
					catch
					{
					}
				}
				return;
			case 370:
			{
				Player player2 = Main.player[plr];
				if (!player2.active || player2.dead)
				{
					return;
				}
				int num = 0;
				Projectile projectile;
				while (true)
				{
					if (num < 1000)
					{
						projectile = Main.projectile[num];
						if (projectile.active && projectile.bobber && projectile.owner == plr)
						{
							break;
						}
						num++;
						continue;
					}
					return;
				}
				int num2 = NewNPC((int)projectile.Center.X, (int)projectile.Center.Y + 100, 370);
				string typeName = Main.npc[num2].TypeName;
				if (Main.netMode == 0)
				{
					Main.NewText(Language.GetTextValue("Announcement.HasAwoken", typeName), 175, 75);
				}
				else if (Main.netMode == 2)
				{
					NetMessage.SendData(25, -1, -1, Language.GetTextValue("Announcement.HasAwoken", typeName), 16, 175f, 75f, 255f);
				}
				return;
			}
			case 398:
				if (!AnyNPCs(Type))
				{
					Player player = Main.player[plr];
					NewNPC((int)player.Center.X, (int)player.Center.Y - 150, Type);
					if (Main.netMode == 0)
					{
						Main.NewText(Language.GetTextValue("Announcement.HasAwoken", Language.GetTextValue("Enemies.MoonLord")), 175, 75);
					}
					else if (Main.netMode == 2)
					{
						NetMessage.SendData(25, -1, -1, Language.GetTextValue("Announcement.HasAwoken", Language.GetTextValue("Enemies.MoonLord")), 16, 175f, 75f, 255f);
					}
				}
				return;
			}
			bool flag = false;
			int num11 = 0;
			int num12 = 0;
			int num13 = (int)(Main.player[plr].position.X / 16f) - spawnRangeX * 2;
			int num14 = (int)(Main.player[plr].position.X / 16f) + spawnRangeX * 2;
			int num15 = (int)(Main.player[plr].position.Y / 16f) - spawnRangeY * 2;
			int num16 = (int)(Main.player[plr].position.Y / 16f) + spawnRangeY * 2;
			int num17 = (int)(Main.player[plr].position.X / 16f) - safeRangeX;
			int num18 = (int)(Main.player[plr].position.X / 16f) + safeRangeX;
			int num19 = (int)(Main.player[plr].position.Y / 16f) - safeRangeY;
			int num20 = (int)(Main.player[plr].position.Y / 16f) + safeRangeY;
			if (num13 < 0)
			{
				num13 = 0;
			}
			if (num14 > Main.maxTilesX)
			{
				num14 = Main.maxTilesX;
			}
			if (num15 < 0)
			{
				num15 = 0;
			}
			if (num16 > Main.maxTilesY)
			{
				num16 = Main.maxTilesY;
			}
			for (int l = 0; l < 1000; l++)
			{
				for (int m = 0; m < 100; m++)
				{
					int num21 = Main.rand.Next(num13, num14);
					int num22 = Main.rand.Next(num15, num16);
					if (!Main.tile[num21, num22].nactive() || !Main.tileSolid[Main.tile[num21, num22].type])
					{
						if ((Main.wallHouse[Main.tile[num21, num22].wall] && l < 999) || (Type == 50 && l < 500 && Main.tile[num22, num22].wall > 0))
						{
							continue;
						}
						for (int n = num22; n < Main.maxTilesY; n++)
						{
							if (Main.tile[num21, n].nactive() && Main.tileSolid[Main.tile[num21, n].type])
							{
								if (num21 < num17 || num21 > num18 || n < num19 || n > num20 || l == 999)
								{
									ushort type2 = Main.tile[num21, n].type;
									num11 = num21;
									num12 = n;
									flag = true;
								}
								break;
							}
						}
						if (flag && Type == 50 && l < 900)
						{
							int num23 = 20;
							if (!Collision.CanHit(new Vector2(num11, num12 - 1) * 16f, 16, 16, new Vector2(num11, num12 - 1 - num23) * 16f, 16, 16) || !Collision.CanHit(new Vector2(num11, num12 - 1 - num23) * 16f, 16, 16, Main.player[plr].Center, 0, 0))
							{
								num11 = 0;
								num12 = 0;
								flag = false;
							}
						}
						if (flag && l < 999)
						{
							int num24 = num11 - spawnSpaceX / 2;
							int num25 = num11 + spawnSpaceX / 2;
							int num26 = num12 - spawnSpaceY;
							int num27 = num12;
							if (num24 < 0)
							{
								flag = false;
							}
							if (num25 > Main.maxTilesX)
							{
								flag = false;
							}
							if (num26 < 0)
							{
								flag = false;
							}
							if (num27 > Main.maxTilesY)
							{
								flag = false;
							}
							if (flag)
							{
								for (int num28 = num24; num28 < num25; num28++)
								{
									for (int num29 = num26; num29 < num27; num29++)
									{
										if (Main.tile[num28, num29].nactive() && Main.tileSolid[Main.tile[num28, num29].type])
										{
											flag = false;
											break;
										}
									}
								}
							}
						}
					}
					if (flag || flag)
					{
						break;
					}
				}
				if (flag && l < 999)
				{
					Rectangle rectangle = new Rectangle(num11 * 16, num12 * 16, 16, 16);
					for (int num30 = 0; num30 < 16; num30++)
					{
						if (Main.player[num30].active)
						{
							Rectangle rectangle2 = new Rectangle((int)(Main.player[num30].position.X + (float)(Main.player[num30].width / 2) - (float)(sWidth / 2) - (float)safeRangeX), (int)(Main.player[num30].position.Y + (float)(Main.player[num30].height / 2) - (float)(sHeight / 2) - (float)safeRangeY), sWidth + safeRangeX * 2, sHeight + safeRangeY * 2);
							if (rectangle.Intersects(rectangle2))
							{
								flag = false;
							}
						}
					}
				}
				if (flag)
				{
					break;
				}
			}
			if (!flag)
			{
				return;
			}
			int num31 = 200;
			num31 = NewNPC(num11 * 16 + 8, num12 * 16, Type, 1);
			if (num31 == 200)
			{
				return;
			}
			Main.npc[num31].target = plr;
			Main.npc[num31].timeLeft *= 20;
			string typeName3 = Main.npc[num31].TypeName;
			if (Main.netMode == 2 && num31 < 200)
			{
				NetMessage.SendData(23, -1, -1, "", num31);
			}
			if (Type == 134 || Type == 127 || Type == 126 || Type == 125)
			{
				AchievementsHelper.CheckMechaMayhem();
			}
			switch (Type)
			{
			case 50:
			case 82:
			case 126:
			case 398:
				break;
			case 125:
				if (Main.netMode == 0)
				{
					Main.NewText(Lang.misc[48].Value, 175, 75);
				}
				else if (Main.netMode == 2)
				{
					NetMessage.SendData(25, -1, -1, Lang.misc[48].Value, 16, 175f, 75f, 255f);
				}
				break;
			default:
				if (Main.netMode == 0)
				{
					Main.NewText(Language.GetTextValue("Announcement.HasAwoken", typeName3), 175, 75);
				}
				else if (Main.netMode == 2)
				{
					NetMessage.SendData(25, -1, -1, Language.GetTextValue("Announcement.HasAwoken", typeName3), 16, 175f, 75f, 255f);
				}
				break;
			}
		}

		public static int NewNPC(int X, int Y, int Type, int Start = 0, float ai0 = 0f, float ai1 = 0f, float ai2 = 0f, float ai3 = 0f, int Target = 16)
		{
			int num = -1;
			if (Type == 222)
			{
				for (int num2 = 199; num2 >= 0; num2--)
				{
					if (!Main.npc[num2].active)
					{
						num = num2;
						break;
					}
				}
			}
			else
			{
				for (int i = Start; i < 200; i++)
				{
					if (!Main.npc[i].active)
					{
						num = i;
						break;
					}
				}
			}
			if (num >= 0)
			{
				Main.npc[num] = new NPC();
				Main.npc[num].SetDefaults(Type);
				if (TypeToNum(Type) != -1 || Type == 453)
				{
					Main.npc[num].GivenName = getNewNPCName(Type);
				}
				Main.npc[num].position.X = X - Main.npc[num].width / 2;
				Main.npc[num].position.Y = Y - Main.npc[num].height;
				Main.npc[num].active = true;
				Main.npc[num].timeLeft = (int)((double)activeTime * 1.25);
				Main.npc[num].wet = Collision.WetCollision(Main.npc[num].position, Main.npc[num].width, Main.npc[num].height);
				Main.npc[num].ai[0] = ai0;
				Main.npc[num].ai[1] = ai1;
				Main.npc[num].ai[2] = ai2;
				Main.npc[num].ai[3] = ai3;
				Main.npc[num].target = Target;
				if (Type == 50)
				{
					if (Main.netMode == 0)
					{
						Main.NewText(Language.GetTextValue("Announcement.HasAwoken", Main.npc[num].TypeName), 175, 75);
					}
					else if (Main.netMode == 2)
					{
						NetMessage.SendData(25, -1, -1, Language.GetTextValue("Announcement.HasAwoken", Main.npc[num].TypeName), 16, 175f, 75f, 255f);
					}
				}
				return num;
			}
			return 200;
		}

		public void TransformVisuals(int oldType, int newType)
		{
			if ((oldType == 158 && newType == 159) || (oldType == 159 && newType == 158))
			{
				Main.PlaySound(2, (int)position.X, (int)position.Y, 8);
				int num = Gore.NewGore(new Vector2(position.X, position.Y - 10f), velocity, 99, scale);
				Main.gore[num].velocity *= 0.3f;
				num = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 10f), velocity, 99, scale);
				Main.gore[num].velocity *= 0.3f;
				num = Gore.NewGore(new Vector2(position.X, position.Y + (float)height - 10f), velocity, 99, scale);
				Main.gore[num].velocity *= 0.3f;
			}
			else if (oldType == 478 && newType == 479)
			{
				for (int i = 0; i < 30; i++)
				{
					int num2 = Dust.NewDust(position, width, height, 238, 0f, -2f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num2].noGravity = true;
					}
				}
				Gore.NewGore(position, velocity, 684, scale);
				Gore.NewGore(position, velocity, 685, scale);
				Gore.NewGore(position, velocity, 686, scale);
				Gore.NewGore(position, velocity, 684 + Main.rand.Next(3), scale);
			}
			else if (oldType == 406 && newType == 405)
			{
				float num3 = Main.rand.Next(10, 21);
				float num4 = (float)Math.PI * 2f * Main.rand.NextFloat();
				Vector2 value = new Vector2(22f, 22f);
				for (float num5 = 0f; num5 < num3; num5 += 1f)
				{
					Dust dust = Main.dust[Dust.NewDust(base.Center, 0, 0, 229)];
					Vector2 vector = Vector2.UnitY.RotatedBy(num5 * ((float)Math.PI * 2f) / num3 + num4);
					dust.position = base.Center + vector * value / 2f;
					dust.velocity = vector;
					dust.noGravity = true;
					dust.scale = 0.6f + Main.rand.NextFloat() * 1.8f;
					dust.velocity *= dust.scale;
					dust.fadeIn = Main.rand.NextFloat() * 2f;
				}
			}
			if (oldType == 428 && newType == 427)
			{
				for (int j = 0; j < 20; j++)
				{
					int num6 = Utils.SelectRandom<int>(Main.rand, 229, 240);
					Dust dust2 = Main.dust[Dust.NewDust(position, width, height, num6)];
					dust2.noGravity = true;
					dust2.scale = 0.6f + Main.rand.NextFloat() * 1.8f;
					dust2.fadeIn = 0.25f;
					dust2.velocity *= dust2.scale / 2f;
				}
			}
			if (oldType == 427 && newType == 426)
			{
				for (int k = 0; k < 30; k++)
				{
					int num7 = Utils.SelectRandom<int>(Main.rand, 229, 240, 240);
					Dust dust3 = Main.dust[Dust.NewDust(position, width, height, num7)];
					dust3.noGravity = true;
					dust3.scale = 0.6f + Main.rand.NextFloat() * 1.8f;
					dust3.fadeIn = 0.25f;
					dust3.velocity *= dust3.scale * 0.75f;
				}
			}
		}

		public void Teleport(Vector2 newPos, int Style = 0, int extraInfo = 0)
		{
			int extraInfo2 = 0;
			if (Style == 4)
			{
				extraInfo2 = lastPortalColorIndex;
			}
			Main.TeleportEffect(getRect(), Style, extraInfo2);
			position = newPos;
			if (Style == 4)
			{
				lastPortalColorIndex = extraInfo;
				extraInfo2 = lastPortalColorIndex;
			}
			Main.TeleportEffect(getRect(), Style, extraInfo2);
			teleportTime = 1f;
			teleportStyle = Style;
			if (Main.netMode == 2 && Style != 4)
			{
				NetMessage.SendData(65, -1, -1, "", 1, whoAmI, newPos.X, newPos.Y, Style);
			}
		}

		public void Transform(int newType)
		{
			if (Main.netMode != 1)
			{
				bool flag = false;
				if (value == 0f)
				{
					flag = true;
				}
				int[] array = new int[5];
				int[] array2 = new int[5];
				for (int i = 0; i < 5; i++)
				{
					array[i] = buffType[i];
					array2[i] = buffTime[i];
				}
				int height2 = height;
				int oldType = type;
				int num = life;
				int num2 = lifeMax;
				Vector2 velocity = base.velocity;
				position.Y += height;
				int num3 = spriteDirection;
				SetDefaults(newType);
				spriteDirection = num3;
				TargetClosest();
				base.velocity = velocity;
				position.Y -= height;
				if (flag)
				{
					value = 0f;
				}
				if (lifeMax == num2)
				{
					life = num;
				}
				if (newType == 107 || newType == 108)
				{
					homeTileX = (int)(position.X + (float)(width / 2)) / 16;
					homeTileY = (int)(position.Y + (float)height) / 16;
					homeless = true;
				}
				for (int j = 0; j < 5; j++)
				{
					buffType[j] = array[j];
					buffTime[j] = array2[j];
				}
				if (Main.netMode == 2)
				{
					netUpdate = true;
					NetMessage.SendData(23, -1, -1, "", whoAmI);
					NetMessage.SendData(54, -1, -1, "", whoAmI);
				}
				TransformVisuals(oldType, newType);
				if (TypeToNum(type) != -1)
				{
					Main.npc[whoAmI].GivenName = getNewNPCName(type);
				}
				npcNameLookup = 0;
				if (townNPC)
				{
					homeless = true;
				}
			}
		}

		public int checkArmorPenetration(int armorPenetration)
		{
			if (armorPenetration <= 0)
			{
				return 0;
			}
			if (armorPenetration > defense && defense >= 0)
			{
				return defense / 2;
			}
			return armorPenetration / 2;
		}

		public double StrikeNPCNoInteraction(int Damage, float knockBack, int hitDirection, bool crit = false, bool noEffect = false, bool fromNet = false)
		{
			if (Main.netMode == 0)
			{
				ignorePlayerInteractions++;
			}
			return StrikeNPC(Damage, knockBack, hitDirection, crit, noEffect, fromNet);
		}

		public double StrikeNPC(int Damage, float knockBack, int hitDirection, bool crit = false, bool noEffect = false, bool fromNet = false)
		{
			bool flag = Main.netMode == 0;
			if (flag && ignorePlayerInteractions > 0)
			{
				ignorePlayerInteractions--;
				flag = false;
			}
			if (!active || life <= 0)
			{
				return 0.0;
			}
			double num = Damage;
			int num2 = defense;
			if (ichor)
			{
				num2 -= 20;
			}
			if (num2 < 0)
			{
				num2 = 0;
			}
			num = Main.CalculateDamage((int)num, num2);
			if (crit)
			{
				num *= 2.0;
			}
			if (takenDamageMultiplier > 1f)
			{
				num *= (double)takenDamageMultiplier;
			}
			if ((takenDamageMultiplier > 1f || Damage != 9999) && lifeMax > 1)
			{
				if (friendly)
				{
					Color color = crit ? CombatText.DamagedFriendlyCrit : CombatText.DamagedFriendly;
					CombatText.NewText(new Rectangle((int)position.X, (int)position.Y, width, height), color, string.Concat((int)num), crit);
				}
				else
				{
					Color color2 = crit ? CombatText.DamagedHostileCrit : CombatText.DamagedHostile;
					if (fromNet)
					{
						color2 = (crit ? CombatText.OthersDamagedHostileCrit : CombatText.OthersDamagedHostile);
					}
					CombatText.NewText(new Rectangle((int)position.X, (int)position.Y, width, height), color2, string.Concat((int)num), crit);
				}
			}
			if (num >= 1.0)
			{
				if (flag)
				{
					PlayerInteraction(Main.myPlayer);
				}
				justHit = true;
				if (townNPC)
				{
					if (aiStyle == 7 && (ai[0] == 3f || ai[0] == 4f || ai[0] == 16f || ai[0] == 17f))
					{
						NPC nPC = Main.npc[(int)ai[2]];
						if (nPC.active)
						{
							nPC.ai[0] = 1f;
							nPC.ai[1] = 300 + Main.rand.Next(300);
							nPC.ai[2] = 0f;
							nPC.localAI[3] = 0f;
							nPC.direction = hitDirection;
							nPC.netUpdate = true;
						}
					}
					ai[0] = 1f;
					ai[1] = 300 + Main.rand.Next(300);
					ai[2] = 0f;
					localAI[3] = 0f;
					direction = hitDirection;
					netUpdate = true;
				}
				if (aiStyle == 8 && Main.netMode != 1)
				{
					if (type == 172)
					{
						ai[0] = 450f;
					}
					else if (type == 283 || type == 284)
					{
						if (Main.rand.Next(2) == 0)
						{
							ai[0] = 390f;
							netUpdate = true;
						}
					}
					else if (type == 533)
					{
						if (Main.rand.Next(3) != 0)
						{
							ai[0] = 181f;
							netUpdate = true;
						}
					}
					else
					{
						ai[0] = 400f;
					}
					TargetClosest();
				}
				if (aiStyle == 97 && Main.netMode != 1)
				{
					localAI[1] = 1f;
					TargetClosest();
				}
				if (type == 371)
				{
					num = 0.0;
					ai[0] = 1f;
					ai[1] = 4f;
					dontTakeDamage = true;
				}
				if (type == 346 && (double)life >= (double)lifeMax * 0.5 && (double)life - num < (double)lifeMax * 0.5)
				{
					Gore.NewGore(position, velocity, 517);
				}
				if (type == 184)
				{
					localAI[0] = 60f;
				}
				if (type == 535)
				{
					localAI[0] = 60f;
				}
				if (type == 185)
				{
					localAI[0] = 1f;
				}
				if (!immortal)
				{
					if (realLife >= 0)
					{
						Main.npc[realLife].life -= (int)num;
						life = Main.npc[realLife].life;
						lifeMax = Main.npc[realLife].lifeMax;
					}
					else
					{
						life -= (int)num;
					}
				}
				if (knockBack > 0f && knockBackResist > 0f)
				{
					float num3 = knockBack * knockBackResist;
					if (num3 > 8f)
					{
						float num4 = num3 - 8f;
						num4 *= 0.9f;
						num3 = 8f + num4;
					}
					if (num3 > 10f)
					{
						float num5 = num3 - 10f;
						num5 *= 0.8f;
						num3 = 10f + num5;
					}
					if (num3 > 12f)
					{
						float num6 = num3 - 12f;
						num6 *= 0.7f;
						num3 = 12f + num6;
					}
					if (num3 > 14f)
					{
						float num7 = num3 - 14f;
						num7 *= 0.6f;
						num3 = 14f + num7;
					}
					if (num3 > 16f)
					{
						num3 = 16f;
					}
					if (crit)
					{
						num3 *= 1.4f;
					}
					int num8 = (int)num * 10;
					if (Main.expertMode)
					{
						num8 = (int)num * 15;
					}
					if (num8 > lifeMax)
					{
						if (hitDirection < 0 && velocity.X > 0f - num3)
						{
							if (velocity.X > 0f)
							{
								velocity.X -= num3;
							}
							velocity.X -= num3;
							if (velocity.X < 0f - num3)
							{
								velocity.X = 0f - num3;
							}
						}
						else if (hitDirection > 0 && velocity.X < num3)
						{
							if (velocity.X < 0f)
							{
								velocity.X += num3;
							}
							velocity.X += num3;
							if (velocity.X > num3)
							{
								velocity.X = num3;
							}
						}
						if (type == 185)
						{
							num3 *= 1.5f;
						}
						num3 = (noGravity ? (num3 * -0.5f) : (num3 * -0.75f));
						if (velocity.Y > num3)
						{
							velocity.Y += num3;
							if (velocity.Y < num3)
							{
								velocity.Y = num3;
							}
						}
					}
					else
					{
						if (!noGravity)
						{
							velocity.Y = (0f - num3) * 0.75f * knockBackResist;
						}
						else
						{
							velocity.Y = (0f - num3) * 0.5f * knockBackResist;
						}
						velocity.X = num3 * (float)hitDirection * knockBackResist;
					}
				}
				if ((type == 113 || type == 114) && life <= 0)
				{
					for (int i = 0; i < 200; i++)
					{
						if (Main.npc[i].active && (Main.npc[i].type == 113 || Main.npc[i].type == 114))
						{
							Main.npc[i].HitEffect(hitDirection, num);
						}
					}
				}
				else
				{
					HitEffect(hitDirection, num);
				}
				if (soundHit > 0)
				{
					Main.PlaySound(3, (int)position.X, (int)position.Y, soundHit);
				}
				if (realLife >= 0)
				{
					Main.npc[realLife].checkDead();
				}
				else
				{
					checkDead();
				}
				return num;
			}
			return 0.0;
		}

		public void HitEffect(int hitDirection = 0, double dmg = 10.0)
		{
			if (!active)
			{
				return;
			}
			if (daybreak && life <= 0)
			{
				Rectangle hitbox = base.Hitbox;
				for (int i = 0; i < 20; i++)
				{
					int num = Utils.SelectRandom<int>(Main.rand, 6, 259, 158);
					int num2 = Dust.NewDust(hitbox.TopLeft(), width, height, num, 0f, -2.5f);
					Main.dust[num2].alpha = 200;
					Main.dust[num2].velocity *= 1.4f;
					Main.dust[num2].scale += Main.rand.NextFloat();
				}
				if (Main.netMode != 1)
				{
					for (int j = 0; j < 200; j++)
					{
						NPC nPC = Main.npc[j];
						if (nPC.active && !nPC.buffImmune[189] && Distance(nPC.Center) < 100f && !nPC.dontTakeDamage && nPC.lifeMax > 5 && !nPC.friendly && !nPC.townNPC)
						{
							nPC.AddBuff(189, 300);
						}
					}
				}
			}
			if (type == 378)
			{
				if (life > 0)
				{
					for (int k = 0; (double)k < dmg / (double)lifeMax * 50.0; k++)
					{
						Dust.NewDust(position, width, height, 7);
					}
				}
				else
				{
					for (int l = 0; l < 20; l++)
					{
						Dust.NewDust(position, width, height, 7);
					}
				}
			}
			if (type == 437 && dmg == 9999.0)
			{
				for (int m = 0; m < 6; m++)
				{
					Gore.NewGore(base.Center - new Vector2(10f), Vector2.UnitY.RotatedByRandom(6.2831854820251465) * 5f, 728 + m);
				}
			}
			if (type == 398 && dmg == 1337.0)
			{
				MoonlordDeathDrama.ThrowPieces(base.Center, Main.rand.Next(100));
			}
			if (type == 488)
			{
				localAI[0] = (int)dmg;
				if (localAI[0] < 20f)
				{
					localAI[0] = 20f;
				}
				if (localAI[0] > 120f)
				{
					localAI[0] = 120f;
				}
				localAI[1] = hitDirection;
			}
			else if (type >= 513 && type <= 515)
			{
				if (life > 0)
				{
					for (int n = 0; (double)n < dmg / (double)lifeMax * 100.0; n++)
					{
						Dust.NewDust(position, width, height, 250, hitDirection, -1f, alpha, color, scale);
					}
				}
				else
				{
					for (int num3 = 0; num3 < 50; num3++)
					{
						Dust.NewDust(position, width, height, 250, hitDirection, -2f, alpha, color, scale);
					}
					int num4 = Gore.NewGore(position, base.velocity, type - 513 + 822);
					Main.gore[num4].alpha = alpha;
				}
			}
			else if (type >= 510 && type <= 512)
			{
				if (life > 0)
				{
					for (int num5 = 0; (double)num5 < dmg / (double)lifeMax * 100.0; num5++)
					{
						Dust.NewDust(position, width, height, 250, hitDirection, -1f, alpha, color, scale);
					}
				}
				else
				{
					for (int num6 = 0; num6 < 50; num6++)
					{
						Dust.NewDust(position, width, height, 250, hitDirection, -2f, alpha, color, scale);
					}
					int num7 = Gore.NewGore(position, base.velocity, type - 510 + 819);
					Main.gore[num7].alpha = alpha;
				}
			}
			else if (type == 518 || type == 416)
			{
				if (life > 0)
				{
					for (int num8 = 0; (double)num8 < dmg / (double)lifeMax * 20.0; num8++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust = Main.dust[Dust.NewDust(position, width, height, 6)];
							dust.noGravity = true;
							dust.scale = 1.5f;
							dust.fadeIn = 1f;
							dust.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num9 = 0; num9 < 20; num9++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(3) == 0)
						{
							Dust dust2 = Main.dust[Dust.NewDust(position, width, height, 6)];
							dust2.noGravity = true;
							dust2.scale = 1.5f;
							dust2.fadeIn = 1f;
							dust2.velocity *= 3f;
						}
					}
					Gore.NewGore(position, base.velocity, 844, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 845, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 847, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 835, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 836, scale);
				}
			}
			else if (type == 419)
			{
				if (life > 0)
				{
					for (int num10 = 0; (double)num10 < dmg / (double)lifeMax * 20.0; num10++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust3 = Main.dust[Dust.NewDust(position, width, height, 6)];
							dust3.noGravity = true;
							dust3.scale = 1.5f;
							dust3.fadeIn = 1f;
							dust3.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num11 = 0; num11 < 20; num11++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(3) == 0)
						{
							Dust dust4 = Main.dust[Dust.NewDust(position, width, height, 6)];
							dust4.noGravity = true;
							dust4.scale = 1.5f;
							dust4.fadeIn = 1f;
							dust4.velocity *= 3f;
						}
					}
					Gore.NewGore(position, base.velocity, 844, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 845, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 846, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 846, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 847, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 847, scale);
				}
			}
			else if (type == 412 || type == 413 || type == 414)
			{
				if (life > 0)
				{
					for (int num12 = 0; (double)num12 < dmg / (double)lifeMax * 50.0; num12++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
					}
				}
				else
				{
					for (int num13 = 0; num13 < 6; num13++)
					{
						Dust.NewDust(position, width, height, 241, 2.5f * (float)hitDirection, -2.5f);
					}
					for (int num14 = 0; num14 < 2; num14++)
					{
						Dust.NewDust(position, width, height, 6, 2.5f * (float)hitDirection, -2.5f, 100, Color.Transparent, 2f);
					}
					Gore.NewGore(position, base.velocity, type - 412 + 828);
				}
			}
			else if (type == 415)
			{
				if (life > 0)
				{
					for (int num15 = 0; (double)num15 < dmg / (double)lifeMax * 20.0; num15++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust5 = Main.dust[Dust.NewDust(position, width, height, 6)];
							dust5.noGravity = true;
							dust5.scale = 1.5f;
							dust5.fadeIn = 1f;
							dust5.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num16 = 0; num16 < 40; num16++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
						Dust dust6 = Main.dust[Dust.NewDust(position, width, height, 6)];
						dust6.noGravity = true;
						dust6.scale = 1.5f;
						dust6.fadeIn = 1f;
						dust6.velocity *= 3f;
					}
					Gore.NewGore(base.Center, base.velocity * 0.8f, 831);
					Gore.NewGore(base.Center, base.velocity * 0.8f, 832);
					Gore.NewGore(base.Center, base.velocity * 0.9f, 833);
					Gore.NewGore(base.Center, base.velocity * 0.9f, 834);
				}
			}
			else if (type == 417)
			{
				if (life > 0)
				{
					for (int num17 = 0; (double)num17 < dmg / (double)lifeMax * 20.0; num17++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust7 = Main.dust[Dust.NewDust(position, width, height, 6)];
							dust7.noGravity = true;
							dust7.scale = 1.5f;
							dust7.fadeIn = 1f;
							dust7.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num18 = 0; num18 < 30; num18++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust8 = Main.dust[Dust.NewDust(position, width, height, 6)];
							dust8.noGravity = true;
							dust8.scale = 1.5f;
							dust8.fadeIn = 1f;
							dust8.velocity *= 3f;
						}
					}
					Gore.NewGore(position, base.velocity, 837, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 838, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 838, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 838, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 839, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 839, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 38f), base.velocity, 840, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 38f), base.velocity, 840, scale);
				}
			}
			else if (type == 418)
			{
				if (life > 0)
				{
					for (int num19 = 0; (double)num19 < dmg / (double)lifeMax * 20.0; num19++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust9 = Main.dust[Dust.NewDust(position, width, height, 6)];
							dust9.noGravity = true;
							dust9.scale = 1.5f;
							dust9.fadeIn = 1f;
							dust9.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num20 = 0; num20 < 20; num20++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
						Dust dust10 = Main.dust[Dust.NewDust(position, width, height, 6)];
						dust10.noGravity = true;
						dust10.scale = 1.5f;
						dust10.fadeIn = 1f;
						dust10.velocity *= 3f;
					}
					Gore.NewGore(base.Center, base.velocity * 0.8f, 841);
					Gore.NewGore(base.Center, base.velocity * 0.8f, 842);
					Gore.NewGore(base.Center, base.velocity * 0.8f, 842);
					Gore.NewGore(base.Center, base.velocity * 0.9f, 843);
					Gore.NewGore(base.Center, base.velocity * 0.9f, 843);
				}
			}
			if (type == 516)
			{
				for (int num21 = 0; num21 < 20; num21++)
				{
					int num22 = Dust.NewDust(position, width, height, 6, 2.5f * (float)hitDirection, -2.5f);
					Main.dust[num22].velocity *= 3f;
					Main.dust[num22].scale += Main.rand.NextFloat();
					if (Main.rand.Next(2) == 0)
					{
						num22 = Dust.NewDust(position, width, height, 259, 2.5f * (float)hitDirection, -2.5f);
						Main.dust[num22].noGravity = true;
					}
				}
			}
			if (type == 519)
			{
				Rectangle hitbox2 = base.Hitbox;
				for (int num23 = 0; num23 < oldPos.Length; num23 += 3)
				{
					hitbox2.X = (int)oldPos[num23].X;
					hitbox2.Y = (int)oldPos[num23].Y;
					for (int num24 = 0; num24 < 5; num24++)
					{
						int num25 = Utils.SelectRandom<int>(Main.rand, 6, 259, 158);
						int num26 = Dust.NewDust(hitbox2.TopLeft(), width, height, num25, 2.5f * (float)hitDirection, -2.5f);
						Main.dust[num26].alpha = 200;
						Main.dust[num26].velocity *= 2.4f;
						Main.dust[num26].scale += Main.rand.NextFloat();
					}
				}
			}
			if (type == 522)
			{
				Vector2 spinningpoint = new Vector2(0f, -3f).RotatedByRandom(3.1415927410125732);
				float num27 = 24f;
				Vector2 value = new Vector2(1.05f, 1f);
				for (float num28 = 0f; num28 < num27; num28 += 1f)
				{
					int num29 = Dust.NewDust(base.Center, 0, 0, 66, 0f, 0f, 0, Color.Transparent);
					Main.dust[num29].position = base.Center;
					Main.dust[num29].velocity = spinningpoint.RotatedBy((float)Math.PI * 2f * num28 / num27) * value * (0.8f + Main.rand.NextFloat() * 0.4f) * 2f;
					Main.dust[num29].color = Color.SkyBlue;
					Main.dust[num29].noGravity = true;
					Main.dust[num29].scale += 0.5f + Main.rand.NextFloat();
				}
			}
			else if (type == 426)
			{
				if (life > 0)
				{
					for (int num30 = 0; (double)num30 < dmg / (double)lifeMax * 50.0; num30++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust11 = Main.dust[Dust.NewDust(position, width, height, 229)];
							dust11.noGravity = true;
							dust11.scale = 1.5f;
							dust11.fadeIn = 1f;
							dust11.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num31 = 0; num31 < 20; num31++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
					}
					for (int num32 = 0; num32 < 30; num32++)
					{
						int num33 = Utils.SelectRandom<int>(Main.rand, 229, 240, 161);
						Dust dust12 = Main.dust[Dust.NewDust(position, width, height, num33)];
						dust12.noGravity = true;
						dust12.scale = 1.25f + Main.rand.NextFloat();
						dust12.fadeIn = 0.25f;
						dust12.velocity *= 2f;
						dust12.noLight = true;
					}
					Gore.NewGore(base.Top, base.velocity * 0.7f, 799);
					Gore.NewGore(base.Center, base.velocity * 0.8f, 800);
					Gore.NewGore(base.Center, base.velocity * 0.9f, 801);
					if (Main.netMode != 1)
					{
						for (int num34 = 0; num34 < 3; num34++)
						{
							int num35 = NewNPC((int)base.Center.X, (int)base.Center.Y, 428, whoAmI);
							Main.npc[num35].velocity = -Vector2.UnitY.RotatedByRandom(6.2831854820251465) * Main.rand.Next(3, 6) - Vector2.UnitY * 2f;
							Main.npc[num35].netUpdate = true;
						}
					}
				}
			}
			else if (type == 427)
			{
				if (life > 0)
				{
					for (int num36 = 0; (double)num36 < dmg / (double)lifeMax * 20.0; num36++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust13 = Main.dust[Dust.NewDust(position, width, height, 229)];
							dust13.noGravity = true;
							dust13.scale = 1.5f;
							dust13.fadeIn = 1f;
							dust13.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num37 = 0; num37 < 10; num37++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
					}
					for (int num38 = 0; num38 < 20; num38++)
					{
						int num39 = Utils.SelectRandom<int>(Main.rand, 229, 229, 240);
						Dust dust14 = Main.dust[Dust.NewDust(position, width, height, num39)];
						dust14.noGravity = true;
						dust14.scale = 1.25f + Main.rand.NextFloat();
						dust14.fadeIn = 0.25f;
						dust14.velocity *= 3f;
						dust14.noLight = true;
					}
					Gore.NewGore(base.Center, base.velocity * 0.8f, 802);
					Gore.NewGore(base.Center, base.velocity * 0.9f, 803);
					Gore.NewGore(base.Center, base.velocity * 0.9f, 804);
					Gore.NewGore(base.Center, base.velocity * 0.8f, 805);
				}
			}
			else if (type == 429)
			{
				if (life > 0)
				{
					for (int num40 = 0; (double)num40 < dmg / (double)lifeMax * 20.0; num40++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust15 = Main.dust[Dust.NewDust(position, width, height, 229)];
							dust15.noGravity = true;
							dust15.scale = 1.5f;
							dust15.fadeIn = 1f;
							dust15.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num41 = 0; num41 < 20; num41++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(3) == 0)
						{
							Dust dust16 = Main.dust[Dust.NewDust(position, width, height, 229)];
							dust16.noGravity = true;
							dust16.scale = 1.5f;
							dust16.fadeIn = 1f;
							dust16.velocity *= 3f;
						}
					}
					Gore.NewGore(position, base.velocity, 808, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 809, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 809, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 810, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 810, scale);
					if (Main.netMode != 1)
					{
						Point point = base.Center.ToTileCoordinates();
						Point point2 = Main.player[target].Center.ToTileCoordinates();
						Vector2 vector = Main.player[target].Center - base.Center;
						int num42 = 20;
						int num43 = 3;
						int num44 = 7;
						int num45 = 2;
						int num46 = 0;
						bool flag = false;
						if (vector.Length() > 2000f)
						{
							flag = true;
						}
						while (!flag && num46 < 100)
						{
							num46++;
							int num47 = Main.rand.Next(point2.X - num42, point2.X + num42 + 1);
							int num48 = Main.rand.Next(point2.Y - num42, point2.Y - Math.Abs(num47 - point2.X) + 1);
							if ((num48 < point2.Y - num44 || num48 > point2.Y + num44 || num47 < point2.X - num44 || num47 > point2.X + num44) && (num48 < point.Y - num43 || num48 > point.Y + num43 || num47 < point.X - num43 || num47 > point.X + num43) && !Main.tile[num47, num48].nactive())
							{
								bool flag2 = true;
								if (flag2 && Main.tile[num47, num48].lava())
								{
									flag2 = false;
								}
								if (flag2 && Collision.SolidTiles(num47 - num45, num47 + num45, num48 - num45, num48 + num45))
								{
									flag2 = false;
								}
								if (flag2 && !Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0))
								{
									flag2 = false;
								}
								if (flag2)
								{
									Projectile.NewProjectile(num47 * 16 + 8, num48 * 16 + 8, 0f, 0f, 578, 0, 1f, Main.myPlayer);
									flag = true;
									break;
								}
							}
						}
					}
				}
			}
			else if (type == 425)
			{
				if (life > 0)
				{
					for (int num49 = 0; (double)num49 < dmg / (double)lifeMax * 20.0; num49++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust17 = Main.dust[Dust.NewDust(position, width, height, 229)];
							dust17.noGravity = true;
							dust17.scale = 1.5f;
							dust17.fadeIn = 1f;
							dust17.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num50 = 0; num50 < 20; num50++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(3) == 0)
						{
							Dust dust18 = Main.dust[Dust.NewDust(position, width, height, 229)];
							dust18.noGravity = true;
							dust18.scale = 1.5f;
							dust18.fadeIn = 1f;
							dust18.velocity *= 3f;
						}
					}
					Gore.NewGore(position, base.velocity, 796, scale);
					Gore.NewGore(base.Center, base.velocity, 797, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 798, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 809, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 809, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 810, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 810, scale);
				}
			}
			else if (type == 428)
			{
				if (life > 0)
				{
					for (int num51 = 0; (double)num51 < dmg / (double)lifeMax * 20.0; num51++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
					}
				}
				else
				{
					for (int num52 = 0; num52 < 10; num52++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(2) == 0)
						{
							Dust.NewDust(position, width, height, 229);
						}
						else
						{
							Dust.NewDust(position, width, height, 240);
						}
					}
					Gore.NewGore(position, base.velocity * 0.8f, 806);
					Gore.NewGore(position, base.velocity * 0.8f, 807);
				}
			}
			else if (type == 424)
			{
				if (life > 0)
				{
					for (int num53 = 0; (double)num53 < dmg / (double)lifeMax * 20.0; num53++)
					{
						Dust.NewDust(position, width, height, 249, hitDirection, -1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust19 = Main.dust[Dust.NewDust(position, width, height, 242)];
							dust19.noGravity = true;
							dust19.scale = 1.5f;
							dust19.fadeIn = 1f;
							dust19.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num54 = 0; num54 < 20; num54++)
					{
						Dust.NewDust(position, width, height, 249, hitDirection, -1f);
						if (Main.rand.Next(3) == 0)
						{
							Dust dust20 = Main.dust[Dust.NewDust(position, width, height, 242)];
							dust20.noGravity = true;
							dust20.scale = 1.5f;
							dust20.fadeIn = 1f;
							dust20.velocity *= 3f;
						}
					}
					Gore.NewGore(position, base.velocity, 793, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 794, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 794, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 795, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 795, scale);
				}
			}
			else if (type == 423)
			{
				if (life > 0)
				{
					for (int num55 = 0; (double)num55 < dmg / (double)lifeMax * 50.0; num55++)
					{
						Dust.NewDust(position, width, height, 249, hitDirection, -1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust21 = Main.dust[Dust.NewDust(position, width, height, 242)];
							dust21.noGravity = true;
							dust21.scale = 1.5f;
							dust21.fadeIn = 1f;
							dust21.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num56 = 0; num56 < 20; num56++)
					{
						Dust.NewDust(position, width, height, 249, hitDirection, -1f);
						Dust dust22 = Main.dust[Dust.NewDust(position, width, height, 242)];
						dust22.noGravity = true;
						dust22.scale = 1.5f;
						dust22.fadeIn = 1f;
						dust22.velocity *= 3f;
					}
					Gore.NewGore(base.Center, base.velocity * 0.8f, 790);
					Gore.NewGore(base.Center, base.velocity * 0.8f, 791);
					Gore.NewGore(base.Center, base.velocity * 0.9f, 792);
				}
			}
			else if (type == 421)
			{
				if (life > 0)
				{
					for (int num57 = 0; (double)num57 < dmg / (double)lifeMax * 20.0; num57++)
					{
						Dust.NewDust(position, width, height, 249, hitDirection, -1f);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust23 = Main.dust[Dust.NewDust(position, width, height, 242)];
							dust23.noGravity = true;
							dust23.scale = 1.5f;
							dust23.fadeIn = 1f;
							dust23.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num58 = 0; num58 < 10; num58++)
					{
						Dust.NewDust(position, width, height, 249, hitDirection, -1f);
						Dust dust24 = Main.dust[Dust.NewDust(position, width, height, 242)];
						dust24.noGravity = true;
						dust24.scale = 1.5f;
						dust24.fadeIn = 1f;
						dust24.velocity *= 3f;
					}
					Gore.NewGore(base.Center, base.velocity * 0.8f, 785);
					Gore.NewGore(base.Center, base.velocity * 0.8f, 786);
					Gore.NewGore(base.Center, base.velocity * 0.9f, 787);
				}
			}
			else if (type == 420)
			{
				if (life > 0)
				{
					for (int num59 = 0; (double)num59 < dmg / (double)lifeMax * 20.0; num59++)
					{
						Dust.NewDust(position, width, height, 249, hitDirection, -1f);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust25 = Main.dust[Dust.NewDust(position, width, height, 242)];
							dust25.noGravity = true;
							dust25.scale = 1.5f;
							dust25.fadeIn = 1f;
							dust25.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num60 = 0; num60 < 10; num60++)
					{
						Dust.NewDust(position, width, height, 249, hitDirection, -1f);
						Dust dust26 = Main.dust[Dust.NewDust(position, width, height, 242)];
						dust26.noGravity = true;
						dust26.scale = 1.5f;
						dust26.fadeIn = 1f;
						dust26.velocity *= 3f;
					}
					Gore.NewGore(base.Center, base.velocity * 0.8f, 782);
					Gore.NewGore(base.Center, base.velocity * 0.8f, 783);
					Gore.NewGore(base.Center, base.velocity * 0.9f, 784);
				}
			}
			else if (type == 406 || type == 405)
			{
				if (life > 0)
				{
					for (int num61 = 0; (double)num61 < 10.0 + dmg / 10.0; num61++)
					{
						int num62 = width / 4;
						Vector2 vector7 = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * Main.rand.Next(24, 41) / 8f;
						int num63 = Dust.NewDust(base.Center - Vector2.One * num62, num62 * 2, num62 * 2, 229);
						Dust dust27 = Main.dust[num63];
						Vector2 vector2 = Vector2.Normalize(dust27.position - base.Center);
						dust27.position = base.Center + vector2 * num62 * scale - new Vector2(4f);
						if (num61 < 30)
						{
							dust27.velocity = vector2 * dust27.velocity.Length() * 2f;
						}
						else
						{
							dust27.velocity = 2f * vector2 * Main.rand.Next(45, 91) / 10f;
						}
						dust27.noGravity = true;
						dust27.scale = 0.7f + Main.rand.NextFloat();
					}
				}
				else
				{
					for (int num64 = 0; num64 < 60; num64++)
					{
						int num65 = width / 4;
						Vector2 vector8 = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * Main.rand.Next(24, 41) / 8f;
						int num66 = Dust.NewDust(base.Center - Vector2.One * num65, num65 * 2, num65 * 2, 229);
						Dust dust28 = Main.dust[num66];
						Vector2 vector3 = Vector2.Normalize(dust28.position - base.Center);
						dust28.position = base.Center + vector3 * num65 * scale - new Vector2(4f);
						if (num64 < 30)
						{
							dust28.velocity = vector3 * dust28.velocity.Length() * 2f;
						}
						else
						{
							dust28.velocity = 2f * vector3 * Main.rand.Next(45, 91) / 10f;
						}
						dust28.noGravity = true;
						dust28.scale = 0.7f;
					}
					if (type == 405)
					{
						int num67 = CountNPCS(406) + CountNPCS(405);
						int num68 = 4;
						if (num67 >= 4)
						{
							num68 = 3;
						}
						if (num67 >= 7)
						{
							num68 = 2;
						}
						if (num67 >= 10)
						{
							num68 = 1;
						}
						for (int num69 = 0; num69 < num68; num69++)
						{
							Vector2 velocity = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (3f + Main.rand.NextFloat() * 4f);
							int num70 = NewNPC((int)base.Center.X, (int)base.Bottom.Y, 406, whoAmI);
							Main.npc[num70].velocity = velocity;
						}
					}
				}
			}
			else if (type == 409)
			{
				if (life > 0)
				{
					for (int num71 = 0; (double)num71 < dmg / (double)lifeMax * 50.0; num71++)
					{
						Dust.NewDust(position, width, height, 17, hitDirection, -1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust29 = Main.dust[Dust.NewDust(position, width, height, 229)];
							dust29.noGravity = true;
						}
					}
				}
				else
				{
					for (int num72 = 0; num72 < 20; num72++)
					{
						Dust.NewDust(position, width, height, 17, hitDirection, -1f);
						Dust dust30 = Main.dust[Dust.NewDust(position, width, height, 229)];
						dust30.noGravity = true;
						dust30.velocity *= 3f;
					}
					Gore.NewGore(base.Center, base.velocity * 0.8f, 775);
					Gore.NewGore(base.Center, base.velocity * 0.8f, 776);
					Gore.NewGore(base.Center, base.velocity * 0.9f, 777);
				}
			}
			else if (type == 410)
			{
				if (life > 0)
				{
					for (int num73 = 0; (double)num73 < dmg / (double)lifeMax * 10.0; num73++)
					{
						Dust.NewDust(position, width, height, 17, hitDirection, -1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust31 = Main.dust[Dust.NewDust(position, width, height, 229)];
							dust31.noGravity = true;
						}
					}
				}
				else
				{
					for (int num74 = 0; num74 < 5; num74++)
					{
						Dust.NewDust(position, width, height, 17, hitDirection, -1f);
						Dust dust32 = Main.dust[Dust.NewDust(position, width, height, 229)];
						dust32.noGravity = true;
						dust32.velocity *= 3f;
					}
				}
			}
			else if (type == 407)
			{
				if (life > 0)
				{
					for (int num75 = 0; (double)num75 < dmg / (double)lifeMax * 50.0; num75++)
					{
						Dust.NewDust(position, width, height, 17, hitDirection, -1f, 0, Color.Transparent, 0.75f);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust33 = Main.dust[Dust.NewDust(position, width, height, 229)];
							dust33.noGravity = true;
						}
					}
				}
				else
				{
					for (int num76 = 0; num76 < 20; num76++)
					{
						if (Main.rand.Next(3) != 0)
						{
							Dust.NewDust(position, width, height, 17, hitDirection, -1f);
						}
						Dust dust34 = Main.dust[Dust.NewDust(position, width, height, 229)];
						dust34.noGravity = true;
						dust34.velocity *= 3f;
					}
					Gore.NewGore(base.Top, base.velocity * 0.8f, 778);
					Gore.NewGore(base.Top, base.velocity * 0.8f, 779);
					Gore.NewGore(base.Center, base.velocity * 0.9f, 780);
					Gore.NewGore(base.Center, base.velocity * 0.9f, 781);
					Gore.NewGore(base.Center, base.velocity * 0.9f, 780);
					Gore.NewGore(base.Center, base.velocity * 0.9f, 781);
				}
			}
			else if (type == 402)
			{
				if (life > 0)
				{
					for (int num77 = 0; (double)num77 < dmg / (double)lifeMax * 3.0; num77++)
					{
						if (Main.rand.Next(3) == 0)
						{
							Dust.NewDust(position, width, height, 17, hitDirection, -1f, 0, Color.Transparent, 0.75f);
						}
						if (Main.rand.Next(2) == 0)
						{
							Dust dust35 = Main.dust[Dust.NewDust(position, width, height, 229)];
							dust35.noGravity = true;
						}
						for (int num78 = 0; num78 < oldPos.Length; num78++)
						{
							if (Main.rand.Next(4) == 0)
							{
								if (oldPos[num78] == Vector2.Zero)
								{
									break;
								}
								if (Main.rand.Next(3) == 0)
								{
									Dust.NewDust(oldPos[num78], width, height, 17, hitDirection, -1f, 0, Color.Transparent, 0.75f);
								}
								if (Main.rand.Next(2) == 0)
								{
									Dust dust36 = Main.dust[Dust.NewDust(oldPos[num78], width, height, 229)];
									dust36.noGravity = true;
								}
							}
						}
					}
				}
				else
				{
					for (int num79 = 0; num79 < 5; num79++)
					{
						if (Main.rand.Next(3) == 0)
						{
							Dust.NewDust(position, width, height, 17, hitDirection, -1f);
						}
						Dust dust37 = Main.dust[Dust.NewDust(position, width, height, 229)];
						dust37.noGravity = true;
						dust37.velocity *= 3f;
					}
					for (int num80 = 0; num80 < oldPos.Length; num80++)
					{
						if (Main.rand.Next(4) != 0)
						{
							continue;
						}
						if (oldPos[num80] == Vector2.Zero)
						{
							break;
						}
						for (int num81 = 0; num81 < 2; num81++)
						{
							if (Main.rand.Next(3) == 0)
							{
								Dust.NewDust(oldPos[num80], width, height, 17, hitDirection, -1f);
							}
							Dust dust38 = Main.dust[Dust.NewDust(oldPos[num80], width, height, 229)];
							dust38.noGravity = true;
							dust38.velocity *= 3f;
						}
					}
				}
			}
			else if (type == 411)
			{
				if (life > 0)
				{
					for (int num82 = 0; (double)num82 < dmg / (double)lifeMax * 20.0; num82++)
					{
						Dust.NewDust(position, width, height, 17, hitDirection, -1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust39 = Main.dust[Dust.NewDust(position, width, height, 229)];
							dust39.noGravity = true;
						}
					}
				}
				else
				{
					for (int num83 = 0; num83 < 20; num83++)
					{
						Dust.NewDust(position, width, height, 17, hitDirection, -1f);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust40 = Main.dust[Dust.NewDust(position, width, height, 229)];
							dust40.noGravity = true;
						}
					}
					Gore.NewGore(position, base.velocity, 772, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 773, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 773, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 774, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 774, scale);
				}
			}
			else if (type == 491)
			{
				if (life <= 0)
				{
					Vector2 value2 = base.Center - new Vector2(60f);
					Vector2 vector4 = new Vector2((spriteDirection != 1) ? 1 : (-1), 0f).RotatedBy(rotation);
					Gore.NewGore(value2 + vector4 * (width / 2), base.velocity, 858, scale);
					Gore.NewGore(value2 + vector4 * (width / 3), base.velocity, 857, scale);
					for (int num84 = -1; num84 < 2; num84++)
					{
						Gore.NewGore(value2 + vector4 * ((float)width * (0.45f + (float)num84 * 0.1f)), base.velocity, 859, scale);
						Gore.NewGore(value2 + vector4 * ((float)width * (0.4f + (float)num84 * 0.1f)), base.velocity, 859, scale);
						Gore.NewGore(value2 + vector4 * ((float)width * (0.35f + (float)num84 * 0.1f)), base.velocity, 859, scale);
					}
					for (int num85 = -1; num85 < 2; num85++)
					{
						Gore.NewGore(value2 + vector4 * ((float)width * 0.35f) - new Vector2(0f, 200f) + Utils.RandomVector2(Main.rand, -40f, 40f), base.velocity, Utils.SelectRandom<int>(Main.rand, 860, 892, 893), scale);
						Gore.NewGore(value2 + vector4 * ((float)width * 0.15f) - new Vector2(0f, 200f) + Utils.RandomVector2(Main.rand, -40f, 40f), base.velocity, Utils.SelectRandom<int>(Main.rand, 860, 892, 893), scale);
						Gore.NewGore(value2 + vector4 * ((float)width * -0.35f) - new Vector2(0f, 200f) + Utils.RandomVector2(Main.rand, -40f, 40f), base.velocity, Utils.SelectRandom<int>(Main.rand, 860, 892, 893), scale);
						Gore.NewGore(value2 + vector4 * ((float)width * -0.15f) - new Vector2(0f, 300f) + Utils.RandomVector2(Main.rand, -40f, 40f), base.velocity, Utils.SelectRandom<int>(Main.rand, 860, 892, 893), scale);
						Gore.NewGore(value2 + vector4 * ((float)width * -0.15f) - new Vector2(0f, 300f) + Utils.RandomVector2(Main.rand, -40f, 40f), base.velocity, Utils.SelectRandom<int>(Main.rand, 860, 892, 893), scale);
					}
					for (int num86 = 0; num86 < 2; num86++)
					{
						Gore.NewGore(value2 + vector4 * ((float)width * 0.15f) - new Vector2(0f, 160 + 60 * num86), base.velocity, 855, scale);
						Gore.NewGore(value2 + vector4 * ((float)width * -0.15f) - new Vector2(0f, 160 + 60 * num86), base.velocity, 855, scale);
					}
					for (int num87 = -1; num87 < 2; num87++)
					{
						Gore.NewGore(value2 + vector4 * ((float)width * (0.25f + (float)num87 * 0.1f)) - new Vector2(0f, 20 + 40 * num87), base.velocity, 854, scale);
						Gore.NewGore(value2 + vector4 * ((float)width * (-0.45f + (float)num87 * 0.1f)) - new Vector2(0f, 20 + 40 * num87), base.velocity, 853, scale);
						Gore.NewGore(value2 + vector4 * ((float)width * (0.05f + (float)num87 * 0.1f)) - new Vector2(0f, 20 + 40 * num87), base.velocity, 856, scale);
					}
					for (int num88 = 0; num88 < 30; num88++)
					{
						int num89 = Main.rand.Next(861, 863);
						int num90 = Gore.NewGore(base.Center - new Vector2(60f), Vector2.Zero, num89);
						Main.gore[num90].alpha = 100;
						Main.gore[num90].velocity = Vector2.Transform(new Vector2(4f, 0f), Matrix.CreateRotationZ((float)(Main.rand.NextDouble() * 6.2831854820251465)));
						Main.gore[num90].position = new Vector2(position.X - 20f + ((float)width + 40f) * Main.rand.NextFloat(), position.Y - 240f + (float)(height + 240 - 20) * Main.rand.NextFloat());
					}
					for (int num91 = 0; num91 < 120; num91++)
					{
						int num92 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num92].noGravity = true;
						Main.dust[num92].velocity *= 5f;
						num92 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num92].velocity *= 4f;
						Main.dust[num92].noGravity = true;
					}
					if (Main.netMode != 1)
					{
						for (int num93 = 0; num93 < 4; num93++)
						{
							float num94 = (float)(num93 < 2).ToDirectionInt() * ((float)Math.PI / 8f + (float)Math.PI / 4f * Main.rand.NextFloat());
							Vector2 vector5 = new Vector2(0f, (0f - Main.rand.NextFloat()) * 0.5f - 0.5f).RotatedBy(num94) * 6f;
							Projectile.NewProjectile(base.Center.X, base.Center.Y, vector5.X, vector5.Y, 594, 0, 0f, Main.myPlayer);
						}
					}
				}
			}
			else if (type == 492)
			{
				if (life <= 0)
				{
					for (int num95 = 0; num95 < 7; num95++)
					{
						int num96 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num96].velocity *= 1.4f;
					}
					for (int num97 = 0; num97 < 10; num97++)
					{
						int num98 = Main.rand.Next(61, 64);
						int num99 = Gore.NewGore(position, Vector2.Zero, num98);
						Main.gore[num99].alpha = 100;
						Main.gore[num99].velocity = Vector2.Transform(new Vector2(1f, 0f), Matrix.CreateRotationZ((float)(Main.rand.NextDouble() * 6.2831854820251465)));
					}
				}
			}
			else if (type >= 524 && type <= 527)
			{
				int num100 = 0;
				int num101 = 5;
				int num102 = 863;
				if (type == 525)
				{
					num100 = 75;
					num102 = 867;
				}
				else if (type == 526)
				{
					num100 = 170;
					num102 = 871;
				}
				else if (type == 527)
				{
					num100 = 67;
					num102 = 879;
				}
				if (life > 0)
				{
					for (int num103 = 0; (double)num103 < dmg / (double)lifeMax * 20.0; num103++)
					{
						Dust.NewDust(position, width, height, num101, hitDirection, -1f);
						if (Main.rand.Next(4) == 0 && num100 > 0)
						{
							Dust dust41 = Main.dust[Dust.NewDust(position, width, height, num100)];
							dust41.noGravity = true;
							dust41.scale = 1.5f;
							dust41.fadeIn = 1f;
							dust41.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num104 = 0; num104 < 20; num104++)
					{
						Dust.NewDust(position, width, height, num101, hitDirection, -1f);
						if (Main.rand.Next(3) == 0 && num100 > 0)
						{
							Dust dust42 = Main.dust[Dust.NewDust(position, width, height, num100)];
							dust42.noGravity = true;
							dust42.scale = 1.5f;
							dust42.fadeIn = 1f;
							dust42.velocity *= 3f;
						}
					}
					Gore.NewGore(position, base.velocity, num102, scale);
					Gore.NewGore(position, base.velocity, num102 + 1, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, num102 + 2, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, num102 + 2, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, num102 + 3, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, num102 + 3, scale);
				}
			}
			else if (type >= 528 && type <= 529)
			{
				int num105 = 5;
				int num106 = 875;
				if (type == 529)
				{
					num106 = 876;
				}
				if (life > 0)
				{
					for (int num107 = 0; (double)num107 < dmg / (double)lifeMax * 20.0; num107++)
					{
						Dust.NewDust(position, width, height, num105, hitDirection, -1f);
					}
				}
				else
				{
					for (int num108 = 0; num108 < 20; num108++)
					{
						Dust.NewDust(position, width, height, num105, hitDirection, -1f);
					}
					Gore.NewGore(position, base.velocity, num106, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 877, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 877, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 878, scale);
				}
			}
			else if (type == 530 || type == 531)
			{
				if (life > 0)
				{
					for (int num109 = 0; (double)num109 < dmg / (double)lifeMax * 30.0; num109++)
					{
						Dust.NewDust(position, width, height, 250, hitDirection, -1f, 100);
					}
				}
				else
				{
					for (int num110 = 0; num110 < 20; num110++)
					{
						Dust.NewDust(position, width, height, 250, 2.5f * (float)hitDirection, -2.5f, 100);
					}
					Gore.NewGore(position, base.velocity, 883);
					Gore.NewGore(position, base.velocity, 884);
					Gore.NewGore(position, base.velocity, 885);
					Gore.NewGore(position, base.velocity, 886);
					Gore.NewGore(position, base.velocity, 887);
				}
			}
			else if (type == 532)
			{
				if (life > 0)
				{
					for (int num111 = 0; (double)num111 < dmg / (double)lifeMax * 50.0; num111++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f, 100);
					}
				}
				else
				{
					for (int num112 = 0; num112 < 50; num112++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f, 100);
					}
					Gore.NewGore(position, base.velocity, 888);
					Gore.NewGore(position, base.velocity, 889);
					Gore.NewGore(position, base.velocity, 890);
					Gore.NewGore(position, base.velocity, 891);
				}
			}
			else if (type == 533)
			{
				if (life > 0)
				{
					for (int num113 = 0; (double)num113 < dmg / (double)lifeMax * 50.0; num113++)
					{
						int num114 = Dust.NewDust(position, width, height, 27, 0f, 0f, 50, default(Color), 1.5f);
						Main.dust[num114].velocity *= 2f;
						Main.dust[num114].noGravity = true;
					}
				}
				else
				{
					for (int num115 = 0; num115 < 40; num115++)
					{
						int num116 = Dust.NewDust(position, width, height, 27, 0f, 0f, 50, default(Color), 1.5f);
						Main.dust[num116].velocity *= 2f;
						Main.dust[num116].noGravity = true;
						Main.dust[num116].fadeIn = 1f;
					}
				}
			}
			else if (type == 460)
			{
				if (life > 0)
				{
					for (int num117 = 0; (double)num117 < dmg / (double)lifeMax * 100.0; num117++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num118 = 0; num118 < 50; num118++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, base.velocity, 643, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 645, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 644, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 646, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 646, scale);
				}
			}
			else if (type == 477)
			{
				if (life > 0)
				{
					for (int num119 = 0; (double)num119 < dmg / (double)lifeMax * 100.0; num119++)
					{
						Dust.NewDust(position, width, height, 237, hitDirection, -1f);
					}
				}
				else
				{
					for (int num120 = 0; num120 < 50; num120++)
					{
						Dust.NewDust(position, width, height, 237, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, base.velocity, 687, scale);
					Gore.NewGore(position, base.velocity, 688, scale);
					Gore.NewGore(position, base.velocity, 689, scale);
					Gore.NewGore(position, base.velocity, 690, scale);
					Gore.NewGore(position, base.velocity, 691, scale);
				}
			}
			else if (type == 479)
			{
				if (life > 0)
				{
					for (int num121 = 0; (double)num121 < dmg / (double)lifeMax * 100.0; num121++)
					{
						Dust.NewDust(position, width, height, 237, hitDirection, -1f);
					}
				}
				else
				{
					for (int num122 = 0; num122 < 50; num122++)
					{
						Dust.NewDust(position, width, height, 237, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, base.velocity, 681, scale);
					Gore.NewGore(position, base.velocity, 682, scale);
					Gore.NewGore(position, base.velocity, 683, scale);
				}
			}
			else if (type == 478)
			{
				if (life > 0)
				{
					for (int num123 = 0; num123 < 10; num123++)
					{
						int num124 = Dust.NewDust(position, width, height, 238, hitDirection, -1f);
						Main.dust[num124].noGravity = true;
					}
				}
				else
				{
					for (int num125 = 0; num125 < 50; num125++)
					{
						Dust.NewDust(position, width, height, 237 + Main.rand.Next(2), 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, base.velocity, 684, scale);
					Gore.NewGore(position, base.velocity, 685, scale);
					Gore.NewGore(position, base.velocity, 686, scale);
					Gore.NewGore(position, base.velocity, 684 + Main.rand.Next(3), scale);
				}
			}
			else if (type == 466)
			{
				if (life > 0)
				{
					for (int num126 = 0; (double)num126 < dmg / (double)lifeMax * 100.0; num126++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num127 = 0; num127 < 50; num127++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, base.velocity, 656, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 657, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 659, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 658, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 658, scale);
				}
			}
			else if (type == 468)
			{
				if (life > 0)
				{
					for (int num128 = 0; (double)num128 < dmg / (double)lifeMax * 100.0; num128++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num129 = 0; num129 < 50; num129++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, base.velocity, 662, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 663, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 663, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 664, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 664, scale);
				}
			}
			else if (type == 469)
			{
				if (life > 0)
				{
					for (int num130 = 0; (double)num130 < dmg / (double)lifeMax * 100.0; num130++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num131 = 0; num131 < 50; num131++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, base.velocity, 665, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 666, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 666, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 667, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 667, scale);
				}
			}
			else if (type == 463)
			{
				if (life > 0)
				{
					for (int num132 = 0; (double)num132 < dmg / (double)lifeMax * 100.0; num132++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num133 = 0; num133 < 50; num133++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, base.velocity, 653, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 654, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 654, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 655, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 655, scale);
				}
			}
			else if (type == 461)
			{
				if (life > 0)
				{
					for (int num134 = 0; (double)num134 < dmg / (double)lifeMax * 100.0; num134++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num135 = 0; num135 < 50; num135++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, base.velocity, 647, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 648, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 648, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 649, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 649, scale);
				}
			}
			else if (type == 462)
			{
				if (life > 0)
				{
					for (int num136 = 0; (double)num136 < dmg / (double)lifeMax * 100.0; num136++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num137 = 0; num137 < 50; num137++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, base.velocity, 650, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 651, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 651, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 652, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 652, scale);
				}
			}
			else if (type == 379 || type == 438)
			{
				if (life > 0)
				{
					for (int num138 = 0; (double)num138 < dmg / (double)(lifeMax * 50); num138++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num139 = 0; num139 < 30; num139++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, base.velocity, 900, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 901, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 901, scale);
				}
			}
			else if (type == 439)
			{
				if (life > 0)
				{
					for (int num140 = 0; (double)num140 < dmg / (double)lifeMax * 100.0; num140++)
					{
						int num141 = Dust.NewDust(position, width, height, 5, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num141].velocity *= 1.5f;
						Main.dust[num141].noGravity = true;
					}
				}
				else
				{
					for (int num142 = 0; num142 < 30; num142++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					for (int num143 = 0; num143 < 10; num143++)
					{
						int num144 = Dust.NewDust(position, width, height, 16, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num144].velocity *= 2f;
						Main.dust[num144].noGravity = true;
					}
					int num145 = Main.rand.Next(1, 4);
					for (int num146 = 0; num146 < num145; num146++)
					{
						int num147 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 10f), new Vector2(hitDirection, 0f), Main.rand.Next(11, 14), scale);
						Main.gore[num147].velocity *= 0.8f;
					}
					Gore.NewGore(position, base.velocity, 902, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 10f), base.velocity, 903, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 901, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 901, scale);
				}
			}
			else if (type == 440)
			{
				if (life <= 0)
				{
					for (int num148 = 0; num148 < 10; num148++)
					{
						int num149 = Dust.NewDust(position, width, height, 16, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num149].velocity *= 2f;
						Main.dust[num149].noGravity = true;
					}
					int num150 = Main.rand.Next(1, 4);
					for (int num151 = 0; num151 < num150; num151++)
					{
						int num152 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 10f), new Vector2(hitDirection, 0f), Main.rand.Next(11, 14), scale);
						Main.gore[num152].velocity *= 0.8f;
					}
				}
			}
			else if (type >= 454 && type <= 459)
			{
				if (life > 0)
				{
					for (int num153 = 0; (double)num153 < dmg / (double)lifeMax * 50.0; num153++)
					{
						int num154 = Dust.NewDust(position, width, height, 16, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num154].velocity *= 1.5f;
						Main.dust[num154].noGravity = true;
					}
				}
				else
				{
					for (int num155 = 0; num155 < 10; num155++)
					{
						int num156 = Dust.NewDust(position, width, height, 16, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num156].velocity *= 2f;
						Main.dust[num156].noGravity = true;
					}
					int num157 = Main.rand.Next(1, 4);
					for (int num158 = 0; num158 < num157; num158++)
					{
						int num159 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 10f), new Vector2(hitDirection, 0f), Main.rand.Next(11, 14), scale);
						Main.gore[num159].velocity *= 0.8f;
					}
				}
			}
			if (type == 372 || type == 373)
			{
				if (life > 0)
				{
					for (int num160 = 0; (double)num160 < dmg / (double)lifeMax * 100.0; num160++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num161 = 0; num161 < 75; num161++)
					{
						int num162 = Dust.NewDust(base.Center - Vector2.One * 25f, 50, 50, 5, 2 * hitDirection, -2f);
						Main.dust[num162].velocity /= 2f;
					}
					Gore.NewGore(base.Center, base.velocity * 0.8f, 583);
					Gore.NewGore(base.Center, base.velocity * 0.8f, 577);
					Gore.NewGore(base.Center, base.velocity * 0.9f, 578);
					Gore.NewGore(base.Center, base.velocity, 579);
				}
			}
			if (type == 371)
			{
				Main.PlaySound(4, (int)position.X, (int)position.Y, 3);
				if (life <= 0)
				{
					Vector2 center2 = base.Center;
					for (int num163 = 0; num163 < 60; num163++)
					{
						int num164 = 25;
						Vector2 vector9 = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * Main.rand.Next(24, 41) / 8f;
						int num165 = Dust.NewDust(base.Center - Vector2.One * num164, num164 * 2, num164 * 2, 212);
						Dust dust43 = Main.dust[num165];
						Vector2 vector6 = Vector2.Normalize(dust43.position - base.Center);
						dust43.position = base.Center + vector6 * 25f * scale;
						if (num163 < 30)
						{
							dust43.velocity = vector6 * dust43.velocity.Length();
						}
						else
						{
							dust43.velocity = vector6 * Main.rand.Next(45, 91) / 10f;
						}
						dust43.color = Main.hslToRgb((float)(0.40000000596046448 + Main.rand.NextDouble() * 0.20000000298023224), 0.9f, 0.5f);
						dust43.color = Color.Lerp(dust43.color, Color.White, 0.3f);
						dust43.noGravity = true;
						dust43.scale = 0.7f;
					}
				}
			}
			if (type == 370)
			{
				if (life > 0)
				{
					for (int num166 = 0; (double)num166 < dmg / (double)lifeMax * 100.0; num166++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num167 = 0; num167 < 150; num167++)
					{
						Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
					}
					Gore.NewGore(base.Center - Vector2.UnitX * 20f * direction, base.velocity, 576, scale);
					Gore.NewGore(base.Center - Vector2.UnitY * 30f, base.velocity, 574, scale);
					Gore.NewGore(base.Center, base.velocity, 575, scale);
					Gore.NewGore(base.Center + Vector2.UnitX * 20f * direction, base.velocity, 573, scale);
					Gore.NewGore(base.Center - Vector2.UnitY * 30f, base.velocity, 574, scale);
					Gore.NewGore(base.Center, base.velocity, 575, scale);
				}
			}
			else if (type == 381)
			{
				if (life > 0)
				{
					for (int num168 = 0; (double)num168 < dmg / (double)(lifeMax * 50); num168++)
					{
						Dust.NewDust(position, width, height, 227, hitDirection, -1f);
					}
				}
				else
				{
					for (int num169 = 0; num169 < 30; num169++)
					{
						Dust.NewDust(position, width, height, 227, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, base.velocity, 587, scale);
					Gore.NewGore(position, base.velocity, 590, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 588, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 589, scale);
				}
			}
			else if (type == 382 || type == 390)
			{
				if (life > 0)
				{
					for (int num170 = 0; (double)num170 < dmg / (double)(lifeMax * 50); num170++)
					{
						Dust.NewDust(position, width, height, 227, hitDirection, -1f);
					}
				}
				else
				{
					for (int num171 = 0; num171 < 30; num171++)
					{
						Dust.NewDust(position, width, height, 227, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, base.velocity, 591, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 592, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 593, scale);
				}
			}
			else if (type == 383)
			{
				if (life > 0)
				{
					for (int num172 = 0; (double)num172 < dmg / (double)(lifeMax * 50); num172++)
					{
						Dust.NewDust(position, width, height, 227, hitDirection, -1f);
					}
				}
				else
				{
					for (int num173 = 0; num173 < 30; num173++)
					{
						Dust.NewDust(position, width, height, 227, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, base.velocity, 594, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 595, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 596, scale);
				}
			}
			else if (type == 384)
			{
				if (life > 0)
				{
					for (int num174 = 0; (double)num174 < dmg / (double)lifeMax * 50.0; num174++)
					{
						int num175 = Dust.NewDust(position, width, height, 226, -1 * hitDirection, -1f);
						Main.dust[num175].position = Vector2.Lerp(Main.dust[num175].position, base.Center, 0.25f);
						Main.dust[num175].scale = 0.5f;
					}
				}
				else
				{
					for (int num176 = 0; num176 < 70; num176++)
					{
						int num177 = Dust.NewDust(position, width, height, 226, -2.5f * (float)hitDirection, -2.5f);
						Main.dust[num177].scale = 0.5f;
					}
				}
			}
			else if (type == 385)
			{
				if (life > 0)
				{
					for (int num178 = 0; (double)num178 < dmg / (double)(lifeMax * 50); num178++)
					{
						Dust.NewDust(position, width, height, 227, hitDirection, -1f);
					}
				}
				else
				{
					for (int num179 = 0; num179 < 30; num179++)
					{
						Dust.NewDust(position, width, height, 227, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, base.velocity, 597, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 598, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 599, scale);
				}
			}
			else if (type == 386)
			{
				if (life > 0)
				{
					for (int num180 = 0; (double)num180 < dmg / (double)(lifeMax * 50); num180++)
					{
						Dust.NewDust(position, width, height, 227, hitDirection, -1f);
					}
				}
				else
				{
					for (int num181 = 0; num181 < 30; num181++)
					{
						Dust.NewDust(position, width, height, 227, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, base.velocity, 600, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 601, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 602, scale);
				}
			}
			if (type == 387)
			{
				if (life > 0)
				{
					for (int num182 = 0; (double)num182 < dmg / (double)lifeMax * 20.0; num182++)
					{
						int num183 = Dust.NewDust(position, width, height, 226, -1 * hitDirection, -1f);
						Main.dust[num183].position = Vector2.Lerp(Main.dust[num183].position, base.Center, 0.25f);
						Main.dust[num183].scale = 0.5f;
					}
				}
				else
				{
					for (int num184 = 0; num184 < 30; num184++)
					{
						int num185 = Dust.NewDust(position, width, height, 226, -1.5f * (float)hitDirection, -1.5f);
						Main.dust[num185].scale = 0.5f;
					}
					Gore.NewGore(position, base.velocity, 603, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 603, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 604, scale);
				}
			}
			if (type == 520)
			{
				if (life > 0)
				{
					for (int num186 = 0; (double)num186 < dmg / (double)lifeMax * 20.0; num186++)
					{
						int num187 = Dust.NewDust(position, width, height, 226, -1 * hitDirection, -1f);
						Main.dust[num187].position = Vector2.Lerp(Main.dust[num187].position, base.Center, 0.25f);
						Main.dust[num187].scale = 0.5f;
					}
				}
				else
				{
					for (int num188 = 0; num188 < 30; num188++)
					{
						int num189 = Dust.NewDust(position, width, height, 226, -1.5f * (float)hitDirection, -1.5f);
						Main.dust[num189].scale = 0.5f;
					}
					Gore.NewGore(position, base.velocity, 851, scale);
					Gore.NewGore(position, base.velocity, 852, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 80f), base.velocity, 848, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 80f), base.velocity, 849, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 80f), base.velocity, 850, scale);
				}
			}
			else if (type == 389)
			{
				if (life > 0)
				{
					for (int num190 = 0; (double)num190 < dmg / (double)(lifeMax * 50); num190++)
					{
						Dust.NewDust(position, width, height, 227, hitDirection, -1f);
					}
				}
				else
				{
					for (int num191 = 0; num191 < 30; num191++)
					{
						Dust.NewDust(position, width, height, 227, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, base.velocity, 904, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 905, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 906, scale);
				}
			}
			else if (type == 388)
			{
				if (life > 0)
				{
					for (int num192 = 0; (double)num192 < dmg / (double)(lifeMax * 50); num192++)
					{
						int num193 = Dust.NewDust(position, width, height, 226, -1 * hitDirection, -1f);
						Main.dust[num193].position = Vector2.Lerp(Main.dust[num193].position, base.Center, 0.25f);
						Main.dust[num193].scale = 0.5f;
					}
				}
				else
				{
					for (int num194 = 0; num194 < 10; num194++)
					{
						int num195 = Dust.NewDust(position, width, height, 226, -2.5f * (float)hitDirection, -2.5f);
						Main.dust[num195].scale = 0.5f;
					}
					Vector2 velocity2 = base.velocity;
					if (ai[0] == 3f)
					{
						velocity2 = rotation.ToRotationVector2();
						if (spriteDirection == 1)
						{
							velocity2.X *= -1f;
						}
						velocity2 *= 5f;
					}
					Gore.NewGore(base.Center - new Vector2(10f, 10f), velocity2, 605, scale);
					Gore.NewGore(base.Center - new Vector2(10f, 10f), velocity2, 606, scale);
				}
			}
			else if (type == 399)
			{
				if (life > 0)
				{
					for (int num196 = 0; (double)num196 < dmg / (double)(lifeMax * 50); num196++)
					{
						int num197 = Dust.NewDust(position, width, height, 226, -1 * hitDirection, -1f);
						Main.dust[num197].position = Vector2.Lerp(Main.dust[num197].position, base.Center, 0.25f);
						Main.dust[num197].scale = 0.5f;
					}
				}
				else
				{
					for (int num198 = 0; num198 < 10; num198++)
					{
						int num199 = Dust.NewDust(position, width, height, 226, -2.5f * (float)hitDirection, -2.5f);
						Main.dust[num199].scale = 0.5f;
					}
					Vector2 velocity3 = base.velocity;
					if (ai[0] == 3f)
					{
						velocity3 = rotation.ToRotationVector2();
						if (spriteDirection == 1)
						{
							velocity3.X *= -1f;
						}
						velocity3 *= 5f;
					}
					Gore.NewGore(base.Center - new Vector2(10f, 10f), velocity3, 898, scale);
					Gore.NewGore(base.Center - new Vector2(10f, 10f), velocity3, 899, scale);
				}
			}
			else if (type == 391)
			{
				if (life > 0)
				{
					for (int num200 = 0; (double)num200 < dmg / (double)(lifeMax * 50); num200++)
					{
						Dust.NewDust(position, width, height, 227, hitDirection, -1f);
					}
				}
				else
				{
					for (int num201 = 0; num201 < 30; num201++)
					{
						Dust.NewDust(position, width, height, 227, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position + Vector2.UnitX * width / 2f, base.velocity, 607, scale);
					Gore.NewGore(position + Vector2.UnitX * width / 2f, base.velocity, 608, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 609, scale);
				}
			}
			if (type == 392 || type == 394 || type == 393 || type == 395)
			{
				if (life > 0)
				{
					for (int num202 = 0; (double)num202 < dmg / (double)lifeMax * 20.0; num202++)
					{
						int num203 = Dust.NewDust(position, width, height, 228, -1 * hitDirection, -1f);
						Main.dust[num203].position = Vector2.Lerp(Main.dust[num203].position, base.Center, 0.25f);
						Main.dust[num203].scale = 0.5f;
					}
				}
				else
				{
					for (int num204 = 0; num204 < 30; num204++)
					{
						int num205 = Dust.NewDust(position, width, height, 228, -1.5f * (float)hitDirection, -1.5f);
						Main.dust[num205].scale = 0.5f;
					}
					Vector2 center = base.Center;
					if (type == 395)
					{
						Gore.NewGore(center + new Vector2(-20f, -10f), base.velocity, 610, scale);
						Gore.NewGore(center + new Vector2(20f, -10f), base.velocity, 611, scale);
						Gore.NewGore(center + new Vector2(-50f, 0f), base.velocity, 612, scale);
						Gore.NewGore(center + new Vector2(50f, 0f), base.velocity, 613, scale);
						Gore.NewGore(center + new Vector2(-60f, 10f), base.velocity, 614, scale);
						Gore.NewGore(center + new Vector2(0f, 30f), base.velocity, 615, scale);
					}
					if (type == 393)
					{
						Gore.NewGore(center, base.velocity, 616, scale);
					}
					if (type == 394)
					{
						Gore.NewGore(center, base.velocity, 617, scale);
					}
				}
			}
			else if (type == 482 || type == 483)
			{
				if (life > 0)
				{
					for (int num206 = 0; (double)num206 < dmg / (double)(lifeMax * 50); num206++)
					{
						Dust.NewDust(position, width, height, 240, hitDirection, -1f);
					}
				}
				else
				{
					for (int num207 = 0; num207 < 30; num207++)
					{
						Dust.NewDust(position, width, height, 240, 2.5f * (float)hitDirection, -2.5f);
					}
					if (type == 482)
					{
						Gore.NewGore(new Vector2(position.X, position.Y), base.velocity, 718, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 10f), base.velocity, 719, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 720, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 40f), base.velocity, 721, scale);
					}
				}
			}
			if ((type >= 442 && type <= 448) || type == 539)
			{
				if (life > 0)
				{
					for (int num208 = 0; num208 < 10; num208++)
					{
						Dust.NewDust(position, width, height, Main.rand.Next(232, 234), hitDirection, -1f);
					}
				}
				else
				{
					for (int num209 = 0; num209 < 20; num209++)
					{
						Dust.NewDust(position, width, height, Main.rand.Next(232, 234), 2 * hitDirection, -2f);
					}
				}
			}
			if (type == 333 || type == 334 || type == 335 || type == 336)
			{
				Color newColor = Color.White;
				if (type == 333)
				{
					newColor = new Color(73, 147, 221, 200);
				}
				if (type == 334)
				{
					newColor = new Color(24, 146, 79, 200);
				}
				if (type == 335)
				{
					newColor = new Color(194, 46, 50, 200);
				}
				if (type == 336)
				{
					newColor = new Color(228, 200, 1, 200);
				}
				if (life > 0)
				{
					for (int num210 = 0; (double)num210 < dmg / (double)lifeMax * 100.0; num210++)
					{
						Dust.NewDust(position, width, height, 4, hitDirection, -1f, 150, newColor);
					}
				}
				else
				{
					for (int num211 = 0; num211 < 50; num211++)
					{
						Dust.NewDust(position, width, height, 4, 2 * hitDirection, -2f, 150, newColor);
					}
				}
			}
			if (type == 537)
			{
				if (life > 0)
				{
					for (int num212 = 0; (double)num212 < dmg / (double)lifeMax * 100.0; num212++)
					{
						Dust.NewDust(position, width, height, 32, hitDirection, -1f);
					}
				}
				else
				{
					for (int num213 = 0; num213 < 50; num213++)
					{
						Dust.NewDust(position, width, height, 32, 2 * hitDirection, -2f);
					}
				}
			}
			if (type == 1 || type == 16 || type == 71 || type == 244 || type == 535)
			{
				if (life > 0)
				{
					for (int num214 = 0; (double)num214 < dmg / (double)lifeMax * 100.0; num214++)
					{
						Dust.NewDust(position, width, height, 4, hitDirection, -1f, alpha, color);
					}
				}
				else
				{
					for (int num215 = 0; num215 < 50; num215++)
					{
						Dust.NewDust(position, width, height, 4, 2 * hitDirection, -2f, alpha, color);
					}
					if (Main.netMode != 1 && type == 16)
					{
						int num216 = Main.rand.Next(2) + 2;
						for (int num217 = 0; num217 < num216; num217++)
						{
							int num218 = NewNPC((int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), 1);
							Main.npc[num218].SetDefaults("Baby Slime");
							Main.npc[num218].velocity.X = base.velocity.X * 2f;
							Main.npc[num218].velocity.Y = base.velocity.Y;
							Main.npc[num218].velocity.X += (float)Main.rand.Next(-20, 20) * 0.1f + (float)(num217 * direction) * 0.3f;
							Main.npc[num218].velocity.Y -= (float)Main.rand.Next(0, 10) * 0.1f + (float)num217;
							Main.npc[num218].ai[0] = -1000 * Main.rand.Next(3);
							if (Main.netMode == 2 && num218 < 200)
							{
								NetMessage.SendData(23, -1, -1, "", num218);
							}
						}
					}
				}
			}
			if (type == 352)
			{
				if (life > 0)
				{
					for (int num219 = 0; (double)num219 < dmg / (double)lifeMax * 100.0; num219++)
					{
						int num220 = Dust.NewDust(position, width, height, 67, hitDirection, -1f);
						Main.dust[num220].noGravity = true;
					}
				}
				else
				{
					for (int num221 = 0; num221 < 60; num221++)
					{
						int num222 = Dust.NewDust(position, width, height, 67, 2 * hitDirection, -2f);
						Main.dust[num222].noGravity = true;
					}
				}
			}
			if (type >= 305 && type <= 314)
			{
				if (life > 0)
				{
					for (int num223 = 0; (double)num223 < dmg / (double)lifeMax * 100.0; num223++)
					{
						Dust.NewDust(position, width, height, 194, hitDirection, -1f, 0, default(Color), 1.1f);
					}
				}
				else
				{
					for (int num224 = 0; num224 < 60; num224++)
					{
						Dust.NewDust(position, width, height, 194, 2 * hitDirection, -2f, 0, default(Color), 1.1f);
					}
					Gore.NewGore(position, base.velocity, 441, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 442, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 443, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 444, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 445, scale);
				}
			}
			if (type == 327)
			{
				if (life > 0)
				{
					for (int num225 = 0; (double)num225 < dmg / (double)lifeMax * 100.0; num225++)
					{
						Dust.NewDust(position, width, height, 189, hitDirection, -1f, 0, default(Color), 1.1f);
					}
				}
				else
				{
					for (int num226 = 0; num226 < 60; num226++)
					{
						Dust.NewDust(position, width, height, 189, 2 * hitDirection, -2f, 0, default(Color), 1.1f);
					}
					for (int num227 = 476; num227 <= 484; num227++)
					{
						Gore.NewGore(new Vector2(position.X, position.Y), base.velocity * 0f, num227, scale);
					}
				}
			}
			if (type == 325)
			{
				if (life > 0)
				{
					for (int num228 = 0; (double)num228 < dmg / (double)lifeMax * 100.0; num228++)
					{
						Dust.NewDust(position, width, height, 191, hitDirection, -1f, 0, default(Color), 1.1f);
					}
				}
				else
				{
					for (int num229 = 0; num229 < 60; num229++)
					{
						Dust.NewDust(position, width, height, 191, 2 * hitDirection, -2f, 0, default(Color), 1.1f);
					}
					for (int num230 = 469; num230 <= 475; num230++)
					{
						Gore.NewGore(new Vector2(position.X, position.Y), base.velocity * 0f, num230, scale);
					}
				}
			}
			if (type == 345 && life <= 0)
			{
				Gore.NewGore(new Vector2(position.X, position.Y), base.velocity * 0f, 513, scale);
				Gore.NewGore(new Vector2(position.X, position.Y), base.velocity * 0f, 514, scale);
				Gore.NewGore(new Vector2(position.X, position.Y), base.velocity * 0f, 514, scale);
				Gore.NewGore(new Vector2(position.X, position.Y), base.velocity * 0f, 515, scale);
				Gore.NewGore(new Vector2(position.X, position.Y), base.velocity * 0f, 516, scale);
			}
			if (type == 344)
			{
				if (life > 0)
				{
					for (int num231 = 0; (double)num231 < dmg / (double)lifeMax * 100.0; num231++)
					{
						Dust.NewDust(position, width, height, 196, hitDirection, -1f);
					}
				}
				else
				{
					for (int num232 = 0; num232 < 60; num232++)
					{
						Dust.NewDust(position, width, height, 196, 2 * hitDirection, -2f);
					}
					for (int num233 = 508; num233 <= 512; num233++)
					{
						Gore.NewGore(new Vector2(position.X, position.Y), base.velocity * 0f, num233, scale);
					}
					for (int num234 = 509; num234 <= 512; num234++)
					{
						Gore.NewGore(new Vector2(position.X, position.Y), base.velocity * 0f, num234, scale);
					}
				}
			}
			if (type == 326)
			{
				if (life > 0)
				{
					for (int num235 = 0; (double)num235 < dmg / (double)lifeMax * 100.0; num235++)
					{
						Dust.NewDust(position, width, height, 191, hitDirection, -1f, 0, default(Color), 1.1f);
					}
				}
				else
				{
					for (int num236 = 0; num236 < 60; num236++)
					{
						Dust.NewDust(position, width, height, 191, 2 * hitDirection, -2f, 0, default(Color), 1.1f);
					}
				}
			}
			if (type == 304)
			{
				if (life > 0)
				{
					for (int num237 = 0; (double)num237 < dmg / (double)lifeMax * 100.0; num237++)
					{
						Dust.NewDust(position, width, height, 189, hitDirection, -1f, 0, default(Color), 1.3f);
					}
				}
				else
				{
					for (int num238 = 0; num238 < 60; num238++)
					{
						Dust.NewDust(position, width, height, 189, 2 * hitDirection, -2f, 0, default(Color), 1.3f);
					}
				}
			}
			if (type == 302)
			{
				if (life > 0)
				{
					for (int num239 = 0; (double)num239 < dmg / (double)lifeMax * 100.0; num239++)
					{
						Dust.NewDust(position, width, height, 192, hitDirection, -1f, 100, new Color(100, 100, 100, 100));
					}
				}
				else
				{
					for (int num240 = 0; num240 < 50; num240++)
					{
						Dust.NewDust(position, width, height, 192, 2 * hitDirection, -2f, 100, new Color(100, 100, 100, 100));
					}
					Gore.NewGore(position, base.velocity, 440, scale);
				}
			}
			if (type >= 245 && type <= 249)
			{
				if (life > 0)
				{
					for (int num241 = 0; (double)num241 < dmg / (double)lifeMax * 100.0; num241++)
					{
						Dust.NewDust(position, width, height, 148, hitDirection, -1f);
					}
				}
				else if (type == 246)
				{
					if (Main.netMode != 1)
					{
						NewNPC((int)base.Center.X, (int)position.Y + height, 249, whoAmI);
					}
				}
				else
				{
					for (int num242 = 0; num242 < 50; num242++)
					{
						Dust.NewDust(position, width, height, 148, 2 * hitDirection, -2f);
					}
					if (type == 245)
					{
						Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), base.velocity, 368, scale);
						Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), base.velocity, 370, scale);
						Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), base.velocity, 368, scale);
						Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), base.velocity, 370, scale);
						Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), base.velocity, 368, scale);
						Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), base.velocity, 370, scale);
						Gore.NewGore(position, base.velocity, 360, scale);
						Gore.NewGore(position, base.velocity, 361, scale);
						Gore.NewGore(position, base.velocity, 362, scale);
						Gore.NewGore(position, base.velocity, 363, scale);
						Gore.NewGore(position, base.velocity, 364, scale);
						Gore.NewGore(position, base.velocity, 367, scale);
						Gore.NewGore(position, base.velocity, 366, scale);
					}
					else if (type == 249)
					{
						Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), base.velocity, 368, scale);
						Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), base.velocity, 370, scale);
						Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), base.velocity, 368, scale);
						Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), base.velocity, 370, scale);
						Gore.NewGore(position, base.velocity, 365, scale);
						Gore.NewGore(position, base.velocity, 363, scale);
						Gore.NewGore(position, base.velocity, 362, scale);
					}
					else
					{
						Gore.NewGore(position, base.velocity, 369, scale);
						Gore.NewGore(position, base.velocity, 371, scale);
						Gore.NewGore(position, base.velocity, 370, scale);
					}
				}
			}
			if (type == 288 && life <= 0)
			{
				for (int num243 = 0; num243 < 50; num243++)
				{
					int num244 = Dust.NewDust(position, width, height, 180, base.velocity.X, base.velocity.Y);
					Main.dust[num244].velocity *= 2f;
					Main.dust[num244].noGravity = true;
					Main.dust[num244].scale = 1.4f;
				}
			}
			if (type == 204)
			{
				if (life > 0)
				{
					for (int num245 = 0; (double)num245 < dmg / (double)lifeMax * 100.0; num245++)
					{
						Dust.NewDust(position, width, height, 4, hitDirection, -1f, 100, new Color(149, 208, 104));
					}
				}
				else
				{
					for (int num246 = 0; num246 < 50; num246++)
					{
						Dust.NewDust(position, width, height, 4, 2 * hitDirection, -2f, 100, new Color(149, 208, 104));
					}
				}
			}
			if (type == 225)
			{
				if (life > 0)
				{
					for (int num247 = 0; (double)num247 < dmg / (double)lifeMax * 100.0; num247++)
					{
						Dust.NewDust(position, width, height, 4, hitDirection, -1f, 100, new Color(0, 80, 255, 100));
					}
				}
				else
				{
					for (int num248 = 0; num248 < 50; num248++)
					{
						Dust.NewDust(position, width, height, 4, 2 * hitDirection, -2f, 100, new Color(0, 80, 255, 100));
					}
					Gore.NewGore(position, base.velocity, 314, scale);
				}
			}
			if (type == 243)
			{
				if (life > 0)
				{
					for (int num249 = 0; (double)num249 < dmg / (double)lifeMax * 150.0; num249++)
					{
						Dust.NewDust(position, width, height, 161, hitDirection, -1f);
					}
				}
				else
				{
					for (int num250 = 0; num250 < 200; num250++)
					{
						Dust.NewDust(position, width, height, 161, 2 * hitDirection, -2f);
					}
					Gore.NewGore(position, base.velocity, 359, scale);
				}
			}
			if ((type == 210 || type == 211) && life <= 0)
			{
				for (int num251 = 0; num251 < 6; num251++)
				{
					int num252 = Dust.NewDust(position, width, height, 150, 2 * hitDirection, -2f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num252].noGravity = true;
						Main.dust[num252].scale = 1.5f;
					}
					else
					{
						Main.dust[num252].scale = 0.8f;
					}
				}
			}
			if ((type == 355 || type == 358) && life <= 0)
			{
				for (int num253 = 0; num253 < 6; num253++)
				{
					int num254 = Dust.NewDust(position, width, height, 198, 2 * hitDirection, -2f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num254].noGravity = true;
						Main.dust[num254].scale = 1.5f * scale;
					}
					else
					{
						Main.dust[num254].scale = 0.8f * scale;
					}
				}
			}
			if (type == 356 && life <= 0)
			{
				for (int num255 = 0; num255 < 6; num255++)
				{
					int num256 = Dust.NewDust(position, width, height, 199, 2 * hitDirection, -2f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num256].noGravity = true;
						Main.dust[num256].scale = 1.5f * scale;
					}
					else
					{
						Main.dust[num256].scale = 0.8f * scale;
					}
				}
			}
			if (type >= 484 && type <= 487 && life <= 0)
			{
				for (int num257 = 0; num257 < 6; num257++)
				{
					int num258 = Dust.NewDust(position, width, height, 248 + type - 484, 2 * hitDirection, -2f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num258].noGravity = true;
						Main.dust[num258].scale = 1.2f * scale;
					}
					else
					{
						Main.dust[num258].scale = 0.7f * scale;
					}
				}
			}
			if (type == 357 && life <= 0)
			{
				for (int num259 = 0; num259 < 6; num259++)
				{
					int num260 = Dust.NewDust(position, width, height, 200, 2 * hitDirection, -2f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num260].noGravity = true;
						Main.dust[num260].scale = 1.2f * scale;
					}
					else
					{
						Main.dust[num260].scale = 0.7f * scale;
					}
				}
			}
			if (type == 377 && life <= 0)
			{
				for (int num261 = 0; num261 < 6; num261++)
				{
					int num262 = Dust.NewDust(position, width, height, 40, 2 * hitDirection, -2f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num262].noGravity = true;
						Main.dust[num262].scale = 1.2f * scale;
					}
					else
					{
						Main.dust[num262].scale = 0.7f * scale;
					}
				}
			}
			if (type == 374 || type == 375)
			{
				for (int num263 = 0; num263 < 6; num263++)
				{
					int num264 = Dust.NewDust(position, width, height, 165, 0f, 0f, 50, default(Color), 1.5f);
					Main.dust[num264].velocity *= 2f;
					Main.dust[num264].noGravity = true;
				}
			}
			if (type == 359)
			{
				if (life <= 0)
				{
					for (int num265 = 0; num265 < 6; num265++)
					{
						int num266 = Dust.NewDust(position, width, height, 201, 2 * hitDirection, -2f);
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num266].noGravity = true;
							Main.dust[num266].scale = 1.2f * scale;
						}
						else
						{
							Main.dust[num266].scale = 0.7f * scale;
						}
					}
				}
				Gore.NewGore(position, base.velocity, 547, scale);
				Gore.NewGore(position, base.velocity, 548, scale);
			}
			if (type == 360)
			{
				if (life <= 0)
				{
					for (int num267 = 0; num267 < 6; num267++)
					{
						int num268 = Dust.NewDust(position, width, height, 202, 2 * hitDirection, -2f);
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num268].noGravity = true;
							Main.dust[num268].scale = 1.2f * scale;
						}
						else
						{
							Main.dust[num268].scale = 0.7f * scale;
						}
					}
				}
				Gore.NewGore(position, base.velocity, 549, scale);
				Gore.NewGore(position, base.velocity, 550, scale);
			}
			if (type == 154)
			{
				if (life > 0)
				{
					for (int num269 = 0; (double)num269 < dmg / (double)lifeMax * 50.0; num269++)
					{
						int num270 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 67, base.velocity.X, base.velocity.Y, 90, default(Color), 1.5f);
						Main.dust[num270].noGravity = true;
						Main.dust[num270].velocity *= 0.2f;
					}
				}
				else
				{
					for (int num271 = 0; num271 < 50; num271++)
					{
						int num272 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 67, base.velocity.X, base.velocity.Y, 90, default(Color), 1.5f);
						Main.dust[num272].noGravity = true;
						Main.dust[num272].velocity *= 0.2f;
					}
					Gore.NewGore(position, base.velocity, 180, scale);
				}
			}
			if (type == 147 || type == 184)
			{
				if (life > 0)
				{
					for (int num273 = 0; (double)num273 < dmg / (double)lifeMax * 50.0; num273++)
					{
						int num274 = Dust.NewDust(position, width, height, 76, hitDirection, -1f);
						Main.dust[num274].noGravity = true;
						Dust.NewDust(position, width, height, 4, hitDirection, -1f, 100, new Color(97, 200, 255, 100));
					}
				}
				else
				{
					for (int num275 = 0; num275 < 30; num275++)
					{
						int num276 = Dust.NewDust(position, width, height, 76, hitDirection, -2f);
						Main.dust[num276].noGravity = true;
						Dust.NewDust(position, width, height, 4, hitDirection, -2f, 100, new Color(97, 200, 255, 100));
					}
				}
			}
			if (type == 143 || type == 144 || type == 145)
			{
				if (life > 0)
				{
					for (int num277 = 0; (double)num277 < dmg / (double)lifeMax * 100.0; num277++)
					{
						int num278 = Dust.NewDust(position, width, height, 76, hitDirection, -1f);
						Main.dust[num278].noGravity = true;
					}
				}
				else
				{
					for (int num279 = 0; num279 < 50; num279++)
					{
						int num280 = Dust.NewDust(position, width, height, 76, hitDirection, -1f);
						Main.dust[num280].noGravity = true;
						Main.dust[num280].scale *= 1.2f;
					}
				}
			}
			if (type == 141)
			{
				if (life > 0)
				{
					for (int num281 = 0; (double)num281 < dmg / (double)lifeMax * 100.0; num281++)
					{
						Dust.NewDust(position, width, height, 4, hitDirection, -1f, alpha, new Color(210, 230, 140));
					}
				}
				else
				{
					for (int num282 = 0; num282 < 50; num282++)
					{
						Dust.NewDust(position, width, height, 4, 2 * hitDirection, -2f, alpha, new Color(210, 230, 140));
					}
				}
			}
			if (type == 112)
			{
				for (int num283 = 0; num283 < 20; num283++)
				{
					int num284 = Dust.NewDust(new Vector2(position.X, position.Y + 2f), width, height, 18, 0f, 0f, 100, default(Color), 2f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num284].scale *= 0.6f;
						continue;
					}
					Main.dust[num284].velocity *= 1.4f;
					Main.dust[num284].noGravity = true;
				}
			}
			if (type == 183)
			{
				if (life > 0)
				{
					for (int num285 = 0; (double)num285 < dmg / (double)lifeMax * 100.0; num285++)
					{
						Dust.NewDust(position, width, height, 136, 0f, 0f, alpha, color);
					}
				}
				else
				{
					for (int num286 = 0; num286 < 50; num286++)
					{
						int num287 = Dust.NewDust(position, width, height, 136, hitDirection, 0f, alpha, color);
						Main.dust[num287].velocity *= 2f;
					}
				}
			}
			if (type == 81 || type == 121)
			{
				if (life > 0)
				{
					for (int num288 = 0; (double)num288 < dmg / (double)lifeMax * 100.0; num288++)
					{
						Dust.NewDust(position, width, height, 14, 0f, 0f, alpha, color);
					}
				}
				else
				{
					for (int num289 = 0; num289 < 50; num289++)
					{
						int num290 = Dust.NewDust(position, width, height, 14, hitDirection, 0f, alpha, color);
						Main.dust[num290].velocity *= 2f;
					}
					if (Main.netMode != 1)
					{
						if (type == 121)
						{
							int num291 = NewNPC((int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), 81);
							Main.npc[num291].SetDefaults("Slimer2");
							Main.npc[num291].velocity.X = base.velocity.X;
							Main.npc[num291].velocity.Y = base.velocity.Y;
							Gore.NewGore(position, base.velocity, 94, scale);
							if (Main.netMode == 2 && num291 < 200)
							{
								NetMessage.SendData(23, -1, -1, "", num291);
							}
						}
						else if (scale >= 1f)
						{
							int num292 = Main.rand.Next(2) + 2;
							for (int num293 = 0; num293 < num292; num293++)
							{
								int num294 = NewNPC((int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), 1);
								Main.npc[num294].SetDefaults("Slimeling");
								Main.npc[num294].velocity.X = base.velocity.X * 3f;
								Main.npc[num294].velocity.Y = base.velocity.Y;
								Main.npc[num294].velocity.X += (float)Main.rand.Next(-10, 10) * 0.1f + (float)(num293 * direction) * 0.3f;
								Main.npc[num294].velocity.Y -= (float)Main.rand.Next(0, 10) * 0.1f + (float)num293;
								Main.npc[num294].ai[1] = num293;
								if (Main.netMode == 2 && num294 < 200)
								{
									NetMessage.SendData(23, -1, -1, "", num294);
								}
							}
						}
					}
				}
			}
			if (type == 120 || type == 137 || type == 138)
			{
				if (life > 0)
				{
					for (int num295 = 0; (double)num295 < dmg / (double)lifeMax * 50.0; num295++)
					{
						int num296 = Dust.NewDust(position, width, height, 71, 0f, 0f, 200);
						Main.dust[num296].velocity *= 1.5f;
					}
				}
				else
				{
					for (int num297 = 0; num297 < 50; num297++)
					{
						int num298 = Dust.NewDust(position, width, height, 71, hitDirection, 0f, 200);
						Main.dust[num298].velocity *= 1.5f;
					}
				}
			}
			if (type == 122)
			{
				if (life > 0)
				{
					for (int num299 = 0; (double)num299 < dmg / (double)lifeMax * 50.0; num299++)
					{
						int num300 = Dust.NewDust(position, width, height, 72, 0f, 0f, 200);
						Main.dust[num300].velocity *= 1.5f;
					}
				}
				else
				{
					for (int num301 = 0; num301 < 50; num301++)
					{
						int num302 = Dust.NewDust(position, width, height, 72, hitDirection, 0f, 200);
						Main.dust[num302].velocity *= 1.5f;
					}
				}
			}
			if (type == 75)
			{
				if (life > 0)
				{
					for (int num303 = 0; (double)num303 < dmg / (double)lifeMax * 50.0; num303++)
					{
						Dust.NewDust(position, width, height, 55, 0f, 0f, 200, color);
					}
				}
				else
				{
					for (int num304 = 0; num304 < 50; num304++)
					{
						int num305 = Dust.NewDust(position, width, height, 55, hitDirection, 0f, 200, color);
						Main.dust[num305].velocity *= 2f;
					}
				}
			}
			if (type == 63 || type == 64 || type == 103)
			{
				Color newColor2 = new Color(50, 120, 255, 100);
				if (type == 64)
				{
					newColor2 = new Color(225, 70, 140, 100);
				}
				if (type == 103)
				{
					newColor2 = new Color(70, 225, 140, 100);
				}
				if (life > 0)
				{
					for (int num306 = 0; (double)num306 < dmg / (double)lifeMax * 50.0; num306++)
					{
						Dust.NewDust(position, width, height, 4, hitDirection, -1f, 0, newColor2);
					}
				}
				else
				{
					for (int num307 = 0; num307 < 25; num307++)
					{
						Dust.NewDust(position, width, height, 4, 2 * hitDirection, -2f, 0, newColor2);
					}
				}
			}
			else if (type == 59 || type == 60 || type == 151)
			{
				if (life > 0)
				{
					for (int num308 = 0; (double)num308 < dmg / (double)lifeMax * 80.0; num308++)
					{
						int num309 = Dust.NewDust(position, width, height, 6, hitDirection * 2, -1f, alpha, default(Color), 1.5f);
						if (Main.rand.Next(8) != 0)
						{
							Main.dust[num309].noGravity = true;
						}
					}
					return;
				}
				for (int num310 = 0; num310 < 40; num310++)
				{
					int num311 = Dust.NewDust(position, width, height, 6, hitDirection * 2, -1f, alpha, default(Color), 1.5f);
					if (Main.rand.Next(8) != 0)
					{
						Main.dust[num311].noGravity = true;
					}
				}
				if (Main.expertMode && type == 59 && Main.netMode != 1)
				{
					try
					{
						int num312 = (int)(base.Center.X / 16f);
						int num313 = (int)(base.Center.Y / 16f);
						if (!WorldGen.SolidTile(num312, num313) && Main.tile[num312, num313].liquid == 0)
						{
							Main.tile[num312, num313].liquid = (byte)Main.rand.Next(50, 150);
							Main.tile[num312, num313].lava(true);
							Main.tile[num312, num313].honey(false);
							WorldGen.SquareTileFrame(num312, num313);
						}
					}
					catch
					{
					}
				}
			}
			else if (type == 50)
			{
				if (life > 0)
				{
					for (int num314 = 0; (double)num314 < dmg / (double)lifeMax * 300.0; num314++)
					{
						Dust.NewDust(position, width, height, 4, hitDirection, -1f, 175, new Color(0, 80, 255, 100));
					}
					return;
				}
				for (int num315 = 0; num315 < 200; num315++)
				{
					Dust.NewDust(position, width, height, 4, 2 * hitDirection, -2f, 175, new Color(0, 80, 255, 100));
				}
				Gore.NewGore(base.Center + new Vector2(-40f, -height / 2), base.velocity, 734);
				if (Main.netMode == 1)
				{
					return;
				}
				int num316 = Main.rand.Next(4) + 4;
				for (int num317 = 0; num317 < num316; num317++)
				{
					int x = (int)(position.X + (float)Main.rand.Next(width - 32));
					int y = (int)(position.Y + (float)Main.rand.Next(height - 32));
					int num318 = NewNPC(x, y, 1);
					Main.npc[num318].SetDefaults(1);
					Main.npc[num318].velocity.X = (float)Main.rand.Next(-15, 16) * 0.1f;
					Main.npc[num318].velocity.Y = (float)Main.rand.Next(-30, 1) * 0.1f;
					Main.npc[num318].ai[0] = -1000 * Main.rand.Next(3);
					Main.npc[num318].ai[1] = 0f;
					if (Main.netMode == 2 && num318 < 200)
					{
						NetMessage.SendData(23, -1, -1, "", num318);
					}
				}
			}
			else if (type == 153)
			{
				if (life > 0)
				{
					for (int num319 = 0; (double)num319 < dmg / (double)lifeMax * 30.0; num319++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num320 = 0; num320 < 15; num320++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, base.velocity, 177);
				Gore.NewGore(position, base.velocity, 178);
				Gore.NewGore(position, base.velocity, 179);
				Gore.NewGore(position, base.velocity, 179);
			}
			else if (type == 177)
			{
				if (life > 0)
				{
					for (int num321 = 0; (double)num321 < dmg / (double)lifeMax * 30.0; num321++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num322 = 0; num322 < 15; num322++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, base.velocity, 234);
				Gore.NewGore(position, base.velocity, 235);
				Gore.NewGore(position, base.velocity, 236);
				Gore.NewGore(position, base.velocity, 236);
			}
			else if (type >= 494 && type <= 495)
			{
				if (life > 0)
				{
					for (int num323 = 0; (double)num323 < dmg / (double)lifeMax * 30.0; num323++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num324 = 0; num324 < 15; num324++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				int num325 = (type - 494) * 2;
				Gore.NewGore(position, base.velocity, 736 + num325);
				Gore.NewGore(position, base.velocity, 735 + num325);
			}
			else if (type >= 496 && type <= 497)
			{
				if (life > 0)
				{
					for (int num326 = 0; (double)num326 < dmg / (double)lifeMax * 30.0; num326++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num327 = 0; num327 < 15; num327++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				int num328 = type - 496;
				Gore.NewGore(position, base.velocity, 739 + num328);
			}
			else if (type >= 498 && type <= 506)
			{
				if (life > 0)
				{
					for (int num329 = 0; (double)num329 < dmg / (double)lifeMax * 30.0; num329++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num330 = 0; num330 < 15; num330++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				int num331 = type - 498;
				Gore.NewGore(position, base.velocity, 750 + num331);
				Gore.NewGore(new Vector2(position.X, position.Y + 16f), base.velocity, 741 + num331);
				Gore.NewGore(new Vector2(position.X, position.Y + 18f), base.velocity, 759 + num331);
			}
			else if (type == 49 || type == 51 || type == 93 || type == 150 || type == 152 || type == 226)
			{
				if (life > 0)
				{
					for (int num332 = 0; (double)num332 < dmg / (double)lifeMax * 30.0; num332++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num333 = 0; num333 < 15; num333++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				if (type == 51)
				{
					Gore.NewGore(position, base.velocity, 83);
				}
				else if (type == 93)
				{
					Gore.NewGore(position, base.velocity, 107);
				}
				else if (type == 150)
				{
					Gore.NewGore(position, base.velocity, 164);
					Gore.NewGore(position, base.velocity, 165);
				}
				else if (type == 152)
				{
					Gore.NewGore(position, base.velocity, 175);
					Gore.NewGore(position, base.velocity, 176);
					Gore.NewGore(position, base.velocity, 176);
				}
				else if (type == 226)
				{
					Gore.NewGore(position, base.velocity, 317);
					Gore.NewGore(position, base.velocity, 318);
					Gore.NewGore(position, base.velocity, 318);
					Gore.NewGore(position, base.velocity, 319);
				}
				else
				{
					Gore.NewGore(position, base.velocity, 82);
				}
			}
			else if (type == 46 || type == 55 || type == 67 || type == 74 || type == 102 || type == 224 || type == 230 || type == 297 || type == 298 || type == 299 || type == 300 || type == 303 || type == 337 || type == 538)
			{
				if (life > 0)
				{
					for (int num334 = 0; (double)num334 < dmg / (double)lifeMax * 20.0; num334++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num335 = 0; num335 < 10; num335++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				if (type == 46 || type == 303 || type == 337)
				{
					Gore.NewGore(position, base.velocity, 76);
					Gore.NewGore(new Vector2(position.X, position.Y), base.velocity, 77);
					if (type == 303)
					{
						for (int num336 = 0; num336 < 10; num336++)
						{
							Dust.NewDust(position, width, height, 193, 2 * hitDirection, -2f);
						}
					}
				}
				else if (type == 67)
				{
					Gore.NewGore(position, base.velocity, 95);
					Gore.NewGore(position, base.velocity, 95);
					Gore.NewGore(position, base.velocity, 96);
				}
				else if (type == 55 || type == 230)
				{
					Gore.NewGore(position, base.velocity, 553);
					Gore.NewGore(position, base.velocity, 554);
				}
				else if (type == 74)
				{
					Gore.NewGore(position, base.velocity, 100);
				}
				else if (type == 297)
				{
					Gore.NewGore(position, base.velocity, 431);
				}
				else if (type == 298)
				{
					Gore.NewGore(position, base.velocity, 432);
				}
				else if (type == 299)
				{
					Gore.NewGore(position, base.velocity, 433);
				}
				else if (type == 538)
				{
					Gore.NewGore(position, base.velocity, 897);
				}
				else if (type == 300)
				{
					Gore.NewGore(position, base.velocity, 434);
				}
				else if (type == 102)
				{
					Gore.NewGore(position, base.velocity, 116);
				}
				else if (type == 224)
				{
					Gore.NewGore(position, base.velocity, 312);
					Gore.NewGore(position, base.velocity, 313);
				}
			}
			else if (type == 148 || type == 149 || type == 168 || type == 470)
			{
				if (life > 0)
				{
					for (int num337 = 0; (double)num337 < dmg / (double)lifeMax * 20.0; num337++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num338 = 0; num338 < 10; num338++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				if (type == 148)
				{
					Gore.NewGore(position, base.velocity, 160);
					Gore.NewGore(new Vector2(position.X, position.Y), base.velocity, 161);
				}
				else if (type == 149)
				{
					Gore.NewGore(position, base.velocity, 162);
					Gore.NewGore(new Vector2(position.X, position.Y), base.velocity, 163);
				}
				else if (type == 168)
				{
					Gore.NewGore(position, base.velocity, 215);
					Gore.NewGore(new Vector2(position.X, position.Y), base.velocity, 216);
				}
				else if (type == 470)
				{
					Gore.NewGore(position, base.velocity, 673);
					Gore.NewGore(position, base.velocity, 672);
					Gore.NewGore(position, base.velocity, 674);
				}
			}
			else if (type == 361)
			{
				if (life > 0)
				{
					for (int num339 = 0; (double)num339 < dmg / (double)lifeMax * 20.0; num339++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num340 = 0; num340 < 10; num340++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, base.velocity, 551);
				Gore.NewGore(new Vector2(position.X, position.Y), base.velocity, 552);
			}
			else if (type == 366 || type == 367)
			{
				if (life > 0)
				{
					for (int num341 = 0; (double)num341 < dmg / (double)lifeMax * 20.0; num341++)
					{
						Dust.NewDust(position, width, height, 203, hitDirection, -1f);
					}
					return;
				}
				for (int num342 = 0; num342 < 10; num342++)
				{
					Dust.NewDust(position, width, height, 203, 2 * hitDirection, -2f);
				}
				if (type == 366)
				{
					Gore.NewGore(position, base.velocity, 561);
					Gore.NewGore(new Vector2(position.X, position.Y), base.velocity, 562);
					Gore.NewGore(new Vector2(position.X, position.Y), base.velocity, 563);
				}
				else
				{
					Gore.NewGore(position, base.velocity, 564);
					Gore.NewGore(new Vector2(position.X, position.Y), base.velocity, 565);
					Gore.NewGore(new Vector2(position.X, position.Y), base.velocity, 566);
				}
			}
			else if (type >= 362 && type <= 365)
			{
				if (life > 0)
				{
					for (int num343 = 0; (double)num343 < dmg / (double)lifeMax * 20.0; num343++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num344 = 0; num344 < 10; num344++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				if (type == 362 || type == 363)
				{
					Gore.NewGore(position, base.velocity, 555);
					Gore.NewGore(new Vector2(position.X, position.Y), base.velocity, 556);
					Gore.NewGore(new Vector2(position.X, position.Y), base.velocity, 557);
				}
				else
				{
					Gore.NewGore(position, base.velocity, 558);
					Gore.NewGore(new Vector2(position.X, position.Y), base.velocity, 559);
					Gore.NewGore(new Vector2(position.X, position.Y), base.velocity, 560);
				}
			}
			else if (type == 348 || type == 349)
			{
				if (life > 0)
				{
					for (int num345 = 0; (double)num345 < dmg / (double)lifeMax * 20.0; num345++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num346 = 0; num346 < 10; num346++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, base.velocity, 528);
				Gore.NewGore(position, base.velocity, 529);
				Gore.NewGore(position, base.velocity, 530);
				Gore.NewGore(position, base.velocity, 531);
				Gore.NewGore(position, base.velocity, 532);
			}
			else if (type == 351)
			{
				if (life > 0)
				{
					for (int num347 = 0; (double)num347 < dmg / (double)lifeMax * 20.0; num347++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num348 = 0; num348 < 10; num348++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, base.velocity, 538);
				Gore.NewGore(position, base.velocity, 539);
				Gore.NewGore(position, base.velocity, 540);
				Gore.NewGore(position, base.velocity, 541);
				Gore.NewGore(position, base.velocity, 542);
			}
			else if (type == 350)
			{
				if (life > 0)
				{
					for (int num349 = 0; (double)num349 < dmg / (double)lifeMax * 20.0; num349++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num350 = 0; num350 < 10; num350++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, base.velocity, 533);
				Gore.NewGore(position, base.velocity, 534);
				Gore.NewGore(position, base.velocity, 535);
				Gore.NewGore(position, base.velocity, 536);
			}
			else if (type == 47 || type == 57 || type == 58 || type == 464 || type == 465)
			{
				if (life > 0)
				{
					for (int num351 = 0; (double)num351 < dmg / (double)lifeMax * 20.0; num351++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num352 = 0; num352 < 10; num352++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				if (type == 57)
				{
					Gore.NewGore(new Vector2(position.X, position.Y), base.velocity, 84);
				}
				else if (type == 58)
				{
					Gore.NewGore(new Vector2(position.X, position.Y), base.velocity, 85);
				}
				else if (type == 464)
				{
					Gore.NewGore(position, base.velocity, 668);
					Gore.NewGore(position, base.velocity, 669);
				}
				else if (type == 465)
				{
					Gore.NewGore(position, base.velocity, 670);
					Gore.NewGore(position, base.velocity, 671);
				}
				else
				{
					Gore.NewGore(position, base.velocity, 78);
					Gore.NewGore(new Vector2(position.X, position.Y), base.velocity, 79);
				}
			}
			else if (type == 173 || type == 174 || type == 181 || type == 182 || type == 268)
			{
				if (life > 0)
				{
					for (int num353 = 0; (double)num353 < dmg / (double)lifeMax * 100.0; num353++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f, alpha);
					}
					return;
				}
				for (int num354 = 0; num354 < 50; num354++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f, alpha);
				}
				if (type == 173)
				{
					Gore.NewGore(position, base.velocity, 223);
					Gore.NewGore(position, base.velocity, 224);
				}
				else if (type == 174)
				{
					Gore.NewGore(position, base.velocity, 225);
					Gore.NewGore(position, base.velocity, 226);
				}
				else if (type == 181)
				{
					Gore.NewGore(position, base.velocity, 237);
				}
				else if (type == 182)
				{
					Gore.NewGore(position, base.velocity, 238);
					Gore.NewGore(position, base.velocity, 239);
				}
				else if (type == 268)
				{
					Gore.NewGore(position, base.velocity, 403);
					Gore.NewGore(position, base.velocity, 404);
					Gore.NewGore(position, base.velocity, 405);
				}
			}
			else if (type == 2 || type == 190 || type == 191 || type == 192 || type == 193 || type == 194 || type == 317 || type == 318)
			{
				if (life > 0)
				{
					for (int num355 = 0; (double)num355 < dmg / (double)lifeMax * 100.0; num355++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num356 = 0; num356 < 50; num356++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				if (type == 190)
				{
					Gore.NewGore(position, base.velocity, 249, scale);
					Gore.NewGore(new Vector2(position.X + 14f, position.Y), base.velocity, 2, scale);
				}
				else if (type == 191)
				{
					Gore.NewGore(position, base.velocity, 248, scale);
					Gore.NewGore(new Vector2(position.X + 14f, position.Y), base.velocity, 2, scale);
				}
				else if (type == 192)
				{
					Gore.NewGore(position, base.velocity, 247, scale);
					Gore.NewGore(new Vector2(position.X + 14f, position.Y), base.velocity, 2, scale);
				}
				else if (type == 193)
				{
					Gore.NewGore(position, base.velocity, 252, scale);
					Gore.NewGore(new Vector2(position.X + 14f, position.Y), base.velocity, 253, scale);
				}
				else if (type == 194)
				{
					Gore.NewGore(position, base.velocity, 250, scale);
					Gore.NewGore(new Vector2(position.X + 14f, position.Y), base.velocity, 251, scale);
				}
				else if (type == 317)
				{
					Gore.NewGore(position, base.velocity, 447, scale);
					Gore.NewGore(new Vector2(position.X + 14f, position.Y), base.velocity, 448, scale);
				}
				else if (type == 318)
				{
					Gore.NewGore(position, base.velocity, 449, scale);
					Gore.NewGore(new Vector2(position.X + 14f, position.Y), base.velocity, 450, scale);
				}
				else
				{
					Gore.NewGore(position, base.velocity, 1, scale);
					Gore.NewGore(new Vector2(position.X + 14f, position.Y), base.velocity, 2, scale);
				}
			}
			else if (type == 157)
			{
				if (life > 0)
				{
					for (int num357 = 0; (double)num357 < dmg / (double)lifeMax * 100.0; num357++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num358 = 0; num358 < 50; num358++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, base.velocity, 186);
				Gore.NewGore(new Vector2(position.X + 14f, position.Y), base.velocity, 187);
			}
			else if (type == 133)
			{
				if (life > 0)
				{
					for (int num359 = 0; (double)num359 < dmg / (double)lifeMax * 100.0; num359++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					if ((float)life < (float)lifeMax * 0.5f && localAI[0] == 0f)
					{
						localAI[0] = 1f;
						Gore.NewGore(position, base.velocity, 1);
					}
				}
				else
				{
					for (int num360 = 0; num360 < 50; num360++)
					{
						Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
					}
					Gore.NewGore(position, base.velocity, 155);
					Gore.NewGore(new Vector2(position.X, position.Y + 14f), base.velocity, 155);
				}
			}
			else if (type == 69 || type == 509 || type == 508)
			{
				if (life > 0)
				{
					for (int num361 = 0; (double)num361 < dmg / (double)lifeMax * 100.0; num361++)
					{
						Dust.NewDust(position, width, height, 250, hitDirection, -1f);
					}
					return;
				}
				for (int num362 = 0; num362 < 50; num362++)
				{
					Dust.NewDust(position, width, height, 250, 2 * hitDirection, -2f);
				}
				if (type == 69)
				{
					Gore.NewGore(position, base.velocity, 97);
					Gore.NewGore(position, base.velocity, 98);
				}
				else if (type == 508)
				{
					Gore.NewGore(position, base.velocity, 811);
					Gore.NewGore(position, base.velocity, 812);
					Gore.NewGore(position, base.velocity, 813);
					Gore.NewGore(position, base.velocity, 814);
				}
				else if (type == 509)
				{
					Gore.NewGore(position, base.velocity, 815);
					Gore.NewGore(position, base.velocity, 816);
					Gore.NewGore(position, base.velocity, 817);
					Gore.NewGore(position, base.velocity, 818);
					Gore.NewGore(position, base.velocity, 818);
				}
			}
			else if (type == 61)
			{
				if (life > 0)
				{
					for (int num363 = 0; (double)num363 < dmg / (double)lifeMax * 100.0; num363++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num364 = 0; num364 < 50; num364++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, base.velocity, 86);
				Gore.NewGore(new Vector2(position.X + 14f, position.Y), base.velocity, 87);
				Gore.NewGore(new Vector2(position.X + 14f, position.Y), base.velocity, 88);
			}
			else if (type == 301)
			{
				if (life > 0)
				{
					for (int num365 = 0; (double)num365 < dmg / (double)lifeMax * 100.0; num365++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num366 = 0; num366 < 50; num366++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, base.velocity, 438);
				Gore.NewGore(new Vector2(position.X + 14f, position.Y), base.velocity, 439);
			}
			else if (type == 252)
			{
				if (life > 0)
				{
					for (int num367 = 0; (double)num367 < dmg / (double)lifeMax * 100.0; num367++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num368 = 0; num368 < 50; num368++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, base.velocity, 373);
				Gore.NewGore(position, base.velocity, 374);
			}
			else if (type == 489)
			{
				if (life > 0)
				{
					for (int num369 = 0; (double)num369 < dmg / (double)lifeMax * 100.0; num369++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num370 = 0; num370 < 50; num370++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, 722, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 723, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 723, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 724, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 724, scale);
			}
			else if (type == 534)
			{
				if (life > 0)
				{
					for (int num371 = 0; (double)num371 < dmg / (double)lifeMax * 100.0; num371++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num372 = 0; num372 < 50; num372++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, 894, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 895, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 895, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 896, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 896, scale);
			}
			else if (type == 490)
			{
				if (life > 0)
				{
					for (int num373 = 0; (double)num373 < dmg / (double)lifeMax * 100.0; num373++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num374 = 0; num374 < 50; num374++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, 725, scale);
				Gore.NewGore(position, base.velocity, 726, scale);
				Gore.NewGore(position, base.velocity, 727, scale);
				Gore.NewGore(position, base.velocity, 725 + Main.rand.Next(3), scale);
				Gore.NewGore(position, base.velocity, 725 + Main.rand.Next(3), scale);
			}
			else if (type == 65)
			{
				if (life > 0)
				{
					for (int num375 = 0; (double)num375 < dmg / (double)lifeMax * 150.0; num375++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num376 = 0; num376 < 75; num376++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, base.velocity * 0.8f, 89);
				Gore.NewGore(new Vector2(position.X + 14f, position.Y), base.velocity * 0.8f, 90);
				Gore.NewGore(new Vector2(position.X + 14f, position.Y), base.velocity * 0.8f, 91);
				Gore.NewGore(new Vector2(position.X + 14f, position.Y), base.velocity * 0.8f, 92);
			}
			else if (type == 195 || type == 196)
			{
				if (life > 0)
				{
					for (int num377 = 0; (double)num377 < dmg / (double)lifeMax * 150.0; num377++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num378 = 0; num378 < 75; num378++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, base.velocity, 254, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 255, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 255, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 256, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 256, scale);
			}
			else if (type == 198 || type == 199)
			{
				if (life > 0)
				{
					for (int num379 = 0; (double)num379 < dmg / (double)lifeMax * 150.0; num379++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num380 = 0; num380 < 75; num380++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, base.velocity, 258, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 259, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 259, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 260, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 260, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 261, scale);
			}
			else if (type == 206)
			{
				if (life > 0)
				{
					for (int num381 = 0; (double)num381 < dmg / (double)lifeMax * 150.0; num381++)
					{
						Dust.NewDust(position, width, height, 137, hitDirection, -1f);
					}
					return;
				}
				for (int num382 = 0; num382 < 75; num382++)
				{
					Dust.NewDust(position, width, height, 137, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, base.velocity, 273, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 274, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 274, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 275, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 275, scale);
			}
			else if (type == 342)
			{
				if (life > 0)
				{
					for (int num383 = 0; (double)num383 < dmg / (double)lifeMax * 100.0; num383++)
					{
						Dust.NewDust(position, width, height, 0, hitDirection, -1f);
					}
					return;
				}
				for (int num384 = 0; num384 < 50; num384++)
				{
					Dust.NewDust(position, width, height, 0, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, 500, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 501, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 501, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 502, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 502, scale);
			}
			else if (type >= 338 && type <= 340)
			{
				if (life > 0)
				{
					for (int num385 = 0; (double)num385 < dmg / (double)lifeMax * 100.0; num385++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num386 = 0; num386 < 50; num386++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				if (type == 338)
				{
					Gore.NewGore(position, base.velocity, 494, scale);
				}
				if (type == 339)
				{
					Gore.NewGore(position, base.velocity, 495, scale);
				}
				if (type == 340)
				{
					Gore.NewGore(position, base.velocity, 496, scale);
				}
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 497, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 498, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 499, scale);
			}
			else if (type == 343)
			{
				if (life > 0)
				{
					for (int num387 = 0; (double)num387 < dmg / (double)lifeMax * 100.0; num387++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num388 = 0; num388 < 50; num388++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, 503, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 504, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 505, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 506, scale);
			}
			else if ((type >= 430 && type <= 436) || type == 3 || type == 52 || type == 53 || type == 536 || type == 104 || type == 109 || type == 331 || type == 332 || type == 132 || type == 161 || type == 162 || type == 186 || type == 187 || type == 188 || type == 189 || type == 200 || type == 223 || type == 251 || type == 319 || type == 320 || type == 321)
			{
				if (life > 0)
				{
					for (int num389 = 0; (double)num389 < dmg / (double)lifeMax * 100.0; num389++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					if (type == 186 && Main.rand.Next(5) == 0)
					{
						Gore.NewGore(position, base.velocity, 242);
					}
					if (type == 187)
					{
						for (int num390 = 0; (double)num390 < dmg / (double)lifeMax * 200.0; num390++)
						{
							Dust.NewDust(position, width, 24, 4, hitDirection, -1f, 125, new Color(0, 80, 255, 100));
						}
					}
					return;
				}
				for (int num391 = 0; num391 < 50; num391++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				if (type == 187 || type == 433)
				{
					for (int num392 = 0; num392 < 25; num392++)
					{
						Dust.NewDust(position, width, 24, 4, hitDirection, -1f, 125, new Color(0, 80, 255, 100));
					}
				}
				if (type == 104)
				{
					Gore.NewGore(position, base.velocity, 117, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 118, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 118, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 119, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 119, scale);
					return;
				}
				if (type == 331)
				{
					Gore.NewGore(position, base.velocity, 488, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 489, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 489, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 490, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 490, scale);
					return;
				}
				if (type == 332)
				{
					Gore.NewGore(position, base.velocity, 491, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 492, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 492, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 493, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 493, scale);
					return;
				}
				if (type == 109)
				{
					Gore.NewGore(position, base.velocity, 121, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 122, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 122, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 123, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 123, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 46f), base.velocity, 120, scale);
					return;
				}
				if (type == 161 || type == 431)
				{
					Gore.NewGore(position, base.velocity, 191, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 192, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 192, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 193, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 193, scale);
					return;
				}
				if (type == 162)
				{
					Gore.NewGore(position, base.velocity, 194, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 195, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 195, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 196, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 196, scale);
					return;
				}
				if (type == 188 || type == 434)
				{
					Gore.NewGore(position, base.velocity, 243, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 244, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 244, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 245, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 245, scale);
					return;
				}
				if (type == 200 || type == 436)
				{
					Gore.NewGore(position, base.velocity, 262, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 263, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 263, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 264, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 264, scale);
					return;
				}
				if (type == 319)
				{
					Gore.NewGore(position, base.velocity, 451, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 453, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 453, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 452, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 452, scale);
					return;
				}
				if (type == 320)
				{
					Gore.NewGore(position, base.velocity, 454, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 455, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 456, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 456, scale);
					return;
				}
				if (type == 321)
				{
					Gore.NewGore(position, base.velocity, 457, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 458, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 458, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 459, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 459, scale);
					return;
				}
				if (type == 223)
				{
					Gore.NewGore(position, base.velocity, 309, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 310, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 310, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 311, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 311, scale);
					return;
				}
				if (type == 132)
				{
					Gore.NewGore(position, base.velocity, 154);
				}
				else if (type == 186 || type == 432)
				{
					Gore.NewGore(position, base.velocity, 241);
				}
				else if (type == 189 || type == 435)
				{
					Gore.NewGore(position, base.velocity, 246);
				}
				else if (type == 251)
				{
					Gore.NewGore(position, base.velocity, 372);
				}
				else if (type != 187 && type != 433)
				{
					Gore.NewGore(position, base.velocity, 3);
				}
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 4);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 4);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 5);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 5);
				if (type == 186 || type == 432)
				{
					Gore.NewGore(position, base.velocity, 242);
				}
				if ((type == 186 || type == 432) && Main.rand.Next(2) == 0)
				{
					Gore.NewGore(position, base.velocity, 242);
				}
			}
			else if (type == 83 || type == 84 || type == 179)
			{
				if (life > 0)
				{
					for (int num393 = 0; (double)num393 < dmg / (double)lifeMax * 50.0; num393++)
					{
						int num394 = Dust.NewDust(position, width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num394].noGravity = true;
					}
					return;
				}
				for (int num395 = 0; num395 < 20; num395++)
				{
					int num396 = Dust.NewDust(position, width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num396].velocity *= 2f;
					Main.dust[num396].noGravity = true;
				}
				int num397 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 10f), new Vector2(Main.rand.Next(-2, 3), Main.rand.Next(-2, 3)), 61, scale);
				Main.gore[num397].velocity *= 0.5f;
				num397 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 10f), new Vector2(Main.rand.Next(-2, 3), Main.rand.Next(-2, 3)), 61, scale);
				Main.gore[num397].velocity *= 0.5f;
				num397 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 10f), new Vector2(Main.rand.Next(-2, 3), Main.rand.Next(-2, 3)), 61, scale);
				Main.gore[num397].velocity *= 0.5f;
			}
			else if (type == 262 || type == 263 || type == 264)
			{
				if (life > 0)
				{
					for (int num398 = 0; (double)num398 < dmg / (double)lifeMax * 100.0; num398++)
					{
						if (type == 262 && life > lifeMax / 2 && Main.rand.Next(3) != 0)
						{
							Dust.NewDust(position, width, height, 166, hitDirection, -1f);
						}
						else if (type == 265 && Main.rand.Next(3) != 0)
						{
							Dust.NewDust(position, width, height, 166, hitDirection, -1f);
						}
						else
						{
							Dust.NewDust(position, width, height, 167, hitDirection, -1f);
						}
					}
					return;
				}
				for (int num399 = 0; num399 < 150; num399++)
				{
					if (type == 265 && Main.rand.Next(3) != 0)
					{
						Dust.NewDust(position, width, height, 166, 2 * hitDirection, -2f);
					}
					else
					{
						Dust.NewDust(position, width, height, 167, 2 * hitDirection, -2f);
					}
				}
				if (type == 262)
				{
					Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), base.velocity, 381, scale);
					Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), base.velocity, 382, scale);
					Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), base.velocity, 383, scale);
					Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), base.velocity, 384, scale);
					Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), base.velocity, 385, scale);
					Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), base.velocity, 386, scale);
					Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), base.velocity, 386, scale);
					Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), base.velocity, 387, scale);
					Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), base.velocity, 387, scale);
				}
				if (type == 263)
				{
					Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), base.velocity, 390, scale);
					Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), base.velocity, 391, scale);
				}
				if (type == 264)
				{
					Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), base.velocity, 388, scale);
					Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), base.velocity, 389, scale);
				}
			}
			else if (type == 265)
			{
				if (life >= 0)
				{
					return;
				}
				for (int num400 = 0; num400 < 15; num400++)
				{
					if (Main.rand.Next(3) != 0)
					{
						Dust.NewDust(position, width, height, 166, hitDirection, -1f);
					}
					else
					{
						Dust.NewDust(position, width, height, 167, hitDirection, -1f);
					}
				}
			}
			else if (type == 266)
			{
				if (life > 0)
				{
					for (int num401 = 0; (double)num401 < dmg / (double)lifeMax * 100.0; num401++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num402 = 0; num402 < 150; num402++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 396);
				Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 397);
				Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 398);
				Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 399);
				Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 400);
				Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 401);
			}
			else if (type == 267)
			{
				if (life > 0)
				{
					for (int num403 = 0; (double)num403 < dmg / (double)lifeMax * 50.0; num403++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num404 = 0; num404 < 20; num404++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, base.velocity, 402);
			}
			else if (type == 4 || type == 126 || type == 125)
			{
				if (life > 0)
				{
					for (int num405 = 0; (double)num405 < dmg / (double)lifeMax * 100.0; num405++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num406 = 0; num406 < 150; num406++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				for (int num407 = 0; num407 < 2; num407++)
				{
					Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 2);
					Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 7);
					Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 9);
					if (type == 4)
					{
						Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 10);
						Main.PlaySound(15, (int)position.X, (int)position.Y, 0);
					}
					else if (type == 125)
					{
						Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 146);
					}
					else if (type == 126)
					{
						Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 145);
					}
				}
				if (type == 125 || type == 126)
				{
					for (int num408 = 0; num408 < 10; num408++)
					{
						int num409 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num409].velocity *= 1.4f;
					}
					for (int num410 = 0; num410 < 5; num410++)
					{
						int num411 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num411].noGravity = true;
						Main.dust[num411].velocity *= 5f;
						num411 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num411].velocity *= 3f;
					}
					int num412 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num412].velocity *= 0.4f;
					Main.gore[num412].velocity.X += 1f;
					Main.gore[num412].velocity.Y += 1f;
					num412 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num412].velocity *= 0.4f;
					Main.gore[num412].velocity.X -= 1f;
					Main.gore[num412].velocity.Y += 1f;
					num412 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num412].velocity *= 0.4f;
					Main.gore[num412].velocity.X += 1f;
					Main.gore[num412].velocity.Y -= 1f;
					num412 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num412].velocity *= 0.4f;
					Main.gore[num412].velocity.X -= 1f;
					Main.gore[num412].velocity.Y -= 1f;
				}
			}
			else if (type == 5)
			{
				if (life > 0)
				{
					for (int num413 = 0; (double)num413 < dmg / (double)lifeMax * 50.0; num413++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num414 = 0; num414 < 20; num414++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, base.velocity, 6);
				Gore.NewGore(position, base.velocity, 7);
			}
			else if (type == 113 || type == 114)
			{
				if (life > 0)
				{
					for (int num415 = 0; num415 < 20; num415++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num416 = 0; num416 < 50; num416++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -1f);
				}
				if (type == 114)
				{
					Gore.NewGore(new Vector2(position.X, position.Y), base.velocity, 137, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2)), base.velocity, 139, scale);
					Gore.NewGore(new Vector2(position.X + (float)(width / 2), position.Y), base.velocity, 139, scale);
					Gore.NewGore(new Vector2(position.X + (float)(width / 2), position.Y + (float)(height / 2)), base.velocity, 137, scale);
					return;
				}
				Gore.NewGore(new Vector2(position.X, position.Y), base.velocity, 137, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2)), base.velocity, 138, scale);
				Gore.NewGore(new Vector2(position.X + (float)(width / 2), position.Y), base.velocity, 138, scale);
				Gore.NewGore(new Vector2(position.X + (float)(width / 2), position.Y + (float)(height / 2)), base.velocity, 137, scale);
				if (!(Main.player[Main.myPlayer].position.Y / 16f > (float)(Main.maxTilesY - 250)))
				{
					return;
				}
				int num417 = (int)Main.screenPosition.Y;
				int num418 = num417 + Main.screenWidth;
				int num419 = (int)position.X;
				if (direction > 0)
				{
					num419 -= 80;
				}
				int num420 = num419 + 140;
				int num421 = num419;
				for (int num422 = num417; num422 < num418; num422 += 50)
				{
					for (; num421 < num420; num421 += 46)
					{
						for (int num423 = 0; num423 < 5; num423++)
						{
							Dust.NewDust(new Vector2(num421, num422), 32, 32, 5, (float)Main.rand.Next(-60, 61) * 0.1f, (float)Main.rand.Next(-60, 61) * 0.1f);
						}
						Gore.NewGore(Velocity: new Vector2((float)Main.rand.Next(-80, 81) * 0.1f, (float)Main.rand.Next(-60, 21) * 0.1f), Position: new Vector2(num421, num422), Type: Main.rand.Next(140, 143));
					}
					num421 = num419;
				}
			}
			else if (type == 115 || type == 116)
			{
				if (life > 0)
				{
					for (int num424 = 0; num424 < 5; num424++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				if (type == 115 && Main.netMode != 1)
				{
					NewNPC((int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), 116);
					for (int num425 = 0; num425 < 10; num425++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num426 = 0; num426 < 20; num426++)
				{
					Dust.NewDust(position, width, height, 5, hitDirection, -1f);
				}
				Gore.NewGore(position, base.velocity, 132, scale);
				Gore.NewGore(position, base.velocity, 133, scale);
			}
			else if (type >= 117 && type <= 119)
			{
				if (life > 0)
				{
					for (int num427 = 0; num427 < 5; num427++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num428 = 0; num428 < 10; num428++)
				{
					Dust.NewDust(position, width, height, 5, hitDirection, -1f);
				}
				Gore.NewGore(position, base.velocity, 134 + type - 117, scale);
			}
			else if (type == 217 || type == 218 || type == 219)
			{
				if (life > 0)
				{
					for (int num429 = 0; (double)num429 < dmg / (double)lifeMax * 100.0; num429++)
					{
						Dust.NewDust(position, width, height, 18, hitDirection, -1f, alpha, color, scale);
					}
					return;
				}
				for (int num430 = 0; num430 < 50; num430++)
				{
					Dust.NewDust(position, width, height, 18, hitDirection, -2f, alpha, color, scale);
				}
				if (type == 217)
				{
					Gore.NewGore(position, base.velocity, 292, scale);
					Gore.NewGore(position, base.velocity, 293, scale);
				}
				if (type == 218)
				{
					Gore.NewGore(position, base.velocity, 295, scale);
					Gore.NewGore(position, base.velocity, 296, scale);
				}
				if (type == 219)
				{
					Gore.NewGore(position, base.velocity, 294, scale);
				}
			}
			else if (type == 222)
			{
				if (life > 0)
				{
					for (int num431 = 0; (double)num431 < dmg / (double)lifeMax * 100.0; num431++)
					{
						Dust.NewDust(position, width, height, 18, hitDirection, -1f, alpha, color, scale);
					}
					return;
				}
				for (int num432 = 0; num432 < 50; num432++)
				{
					Dust.NewDust(position, width, height, 18, hitDirection, -2f, alpha, color, scale);
				}
				Gore.NewGore(new Vector2(position.X, position.Y - 35f), base.velocity, 303, scale);
				Gore.NewGore(new Vector2(position.X, position.Y - 45f), base.velocity, 304, scale);
				Gore.NewGore(new Vector2(position.X, position.Y), base.velocity, 305, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 306, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 10f), base.velocity, 307, scale);
				Gore.NewGore(new Vector2(position.X, position.Y - 10f), base.velocity, 308, scale);
			}
			else if (type == 6 || type == 94 || type == 166)
			{
				if (life > 0)
				{
					for (int num433 = 0; (double)num433 < dmg / (double)lifeMax * 100.0; num433++)
					{
						Dust.NewDust(position, width, height, 18, hitDirection, -1f, alpha, color, scale);
					}
					return;
				}
				for (int num434 = 0; num434 < 50; num434++)
				{
					Dust.NewDust(position, width, height, 18, hitDirection, -2f, alpha, color, scale);
				}
				if (type == 94)
				{
					int num435 = Gore.NewGore(position, base.velocity, 108, scale);
					num435 = Gore.NewGore(position, base.velocity, 108, scale);
					num435 = Gore.NewGore(position, base.velocity, 109, scale);
					num435 = Gore.NewGore(position, base.velocity, 110, scale);
				}
				else if (type == 166)
				{
					int num435 = Gore.NewGore(position, base.velocity, 209, scale);
					num435 = Gore.NewGore(position, base.velocity, 210, scale);
					num435 = Gore.NewGore(position, base.velocity, 211, scale);
				}
				else
				{
					int num435 = Gore.NewGore(position, base.velocity, 14, scale);
					Main.gore[num435].alpha = alpha;
					num435 = Gore.NewGore(position, base.velocity, 15, scale);
					Main.gore[num435].alpha = alpha;
				}
			}
			else if (type == 101)
			{
				if (life > 0)
				{
					for (int num436 = 0; (double)num436 < dmg / (double)lifeMax * 100.0; num436++)
					{
						Dust.NewDust(position, width, height, 18, hitDirection, -1f, alpha, color, scale);
					}
					return;
				}
				for (int num437 = 0; num437 < 50; num437++)
				{
					Dust.NewDust(position, width, height, 18, hitDirection, -2f, alpha, color, scale);
				}
				Gore.NewGore(position, base.velocity, 110, scale);
				Gore.NewGore(position, base.velocity, 114, scale);
				Gore.NewGore(position, base.velocity, 114, scale);
				Gore.NewGore(position, base.velocity, 115, scale);
			}
			else if (type == 7 || type == 8 || type == 9)
			{
				if (life > 0)
				{
					for (int num438 = 0; (double)num438 < dmg / (double)lifeMax * 100.0; num438++)
					{
						Dust.NewDust(position, width, height, 18, hitDirection, -1f, alpha, color, scale);
					}
					return;
				}
				for (int num439 = 0; num439 < 50; num439++)
				{
					Dust.NewDust(position, width, height, 18, hitDirection, -2f, alpha, color, scale);
				}
				int num440 = Gore.NewGore(position, base.velocity, type - 7 + 18);
				Main.gore[num440].alpha = alpha;
			}
			else if (type == 98 || type == 99 || type == 100)
			{
				if (life > 0)
				{
					for (int num441 = 0; (double)num441 < dmg / (double)lifeMax * 100.0; num441++)
					{
						Dust.NewDust(position, width, height, 18, hitDirection, -1f, alpha, color, scale);
					}
					return;
				}
				for (int num442 = 0; num442 < 50; num442++)
				{
					Dust.NewDust(position, width, height, 18, hitDirection, -2f, alpha, color, scale);
				}
				int num443 = Gore.NewGore(position, base.velocity, 110);
				Main.gore[num443].alpha = alpha;
			}
			else if (type == 10 || type == 11 || type == 12)
			{
				if (life > 0)
				{
					for (int num444 = 0; (double)num444 < dmg / (double)lifeMax * 50.0; num444++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num445 = 0; num445 < 10; num445++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, type - 7 + 18);
			}
			else if (type == 95 || type == 96 || type == 97)
			{
				if (life > 0)
				{
					for (int num446 = 0; (double)num446 < dmg / (double)lifeMax * 50.0; num446++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num447 = 0; num447 < 10; num447++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, type - 95 + 111);
			}
			else if (type == 13 || type == 14 || type == 15)
			{
				if (life > 0)
				{
					for (int num448 = 0; (double)num448 < dmg / (double)lifeMax * 100.0; num448++)
					{
						Dust.NewDust(position, width, height, 18, hitDirection, -1f, alpha, color, scale);
					}
					return;
				}
				for (int num449 = 0; num449 < 50; num449++)
				{
					Dust.NewDust(position, width, height, 18, hitDirection, -2f, alpha, color, scale);
				}
				if (type == 13)
				{
					Gore.NewGore(position, base.velocity, 24);
					Gore.NewGore(position, base.velocity, 25);
				}
				else if (type == 14)
				{
					Gore.NewGore(position, base.velocity, 26);
					Gore.NewGore(position, base.velocity, 27);
				}
				else
				{
					Gore.NewGore(position, base.velocity, 28);
					Gore.NewGore(position, base.velocity, 29);
				}
			}
			else if (type == 17)
			{
				if (life > 0)
				{
					for (int num450 = 0; (double)num450 < dmg / (double)lifeMax * 100.0; num450++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num451 = 0; num451 < 50; num451++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, 30);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 31);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 31);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 32);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 32);
			}
			else if (type == 441)
			{
				if (life > 0)
				{
					for (int num452 = 0; (double)num452 < dmg / (double)lifeMax * 100.0; num452++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num453 = 0; num453 < 50; num453++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, 768);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 769);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 770);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 771);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 771);
			}
			else if (type == 86)
			{
				if (life > 0)
				{
					for (int num454 = 0; (double)num454 < dmg / (double)lifeMax * 100.0; num454++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num455 = 0; num455 < 50; num455++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, 101);
				Gore.NewGore(position, base.velocity, 102);
				Gore.NewGore(position, base.velocity, 103);
				Gore.NewGore(position, base.velocity, 103);
				Gore.NewGore(position, base.velocity, 104);
				Gore.NewGore(position, base.velocity, 104);
				Gore.NewGore(position, base.velocity, 105);
			}
			else if (type == 155)
			{
				if (life > 0)
				{
					for (int num456 = 0; (double)num456 < dmg / (double)lifeMax * 100.0; num456++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num457 = 0; num457 < 50; num457++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, 181);
				Gore.NewGore(position, base.velocity, 182);
				Gore.NewGore(position, base.velocity, 183);
				Gore.NewGore(position, base.velocity, 183);
			}
			else if (type == 329)
			{
				if (life > 0)
				{
					for (int num458 = 0; (double)num458 < dmg / (double)lifeMax * 100.0; num458++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num459 = 0; num459 < 50; num459++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, 485);
				Gore.NewGore(position, base.velocity, 486);
				Gore.NewGore(position, base.velocity, 487);
			}
			else if (type == 163 || type == 238)
			{
				if (life > 0)
				{
					for (int num460 = 0; (double)num460 < dmg / (double)lifeMax * 100.0; num460++)
					{
						Dust.NewDust(position, width, height, 18, hitDirection, -1f);
					}
					return;
				}
				for (int num461 = 0; num461 < 50; num461++)
				{
					Dust.NewDust(position, width, height, 18, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, 205);
				Gore.NewGore(position, base.velocity, 206);
				Gore.NewGore(position, base.velocity, 206);
				Gore.NewGore(position, base.velocity, 206);
				Gore.NewGore(position, base.velocity, 206);
			}
			else if (type == 164 || type == 165)
			{
				if (life > 0)
				{
					for (int num462 = 0; (double)num462 < dmg / (double)lifeMax * 100.0; num462++)
					{
						Dust.NewDust(position, width, height, 18, hitDirection, -1f);
					}
					return;
				}
				for (int num463 = 0; num463 < 50; num463++)
				{
					Dust.NewDust(position, width, height, 18, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, 207);
				Gore.NewGore(position, base.velocity, 208);
				Gore.NewGore(position, base.velocity, 208);
				Gore.NewGore(position, base.velocity, 208);
				Gore.NewGore(position, base.velocity, 208);
			}
			else if (type == 239 || type == 240)
			{
				if (life > 0)
				{
					for (int num464 = 0; (double)num464 < dmg / (double)lifeMax * 100.0; num464++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num465 = 0; num465 < 50; num465++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, 351);
				Gore.NewGore(position, base.velocity, 352);
				Gore.NewGore(position, base.velocity, 352);
				Gore.NewGore(position, base.velocity, 353);
				Gore.NewGore(position, base.velocity, 353);
			}
			else if (type == 236 || type == 237)
			{
				if (life > 0)
				{
					for (int num466 = 0; (double)num466 < dmg / (double)lifeMax * 100.0; num466++)
					{
						Dust.NewDust(position, width, height, 18, hitDirection, -1f);
					}
					return;
				}
				for (int num467 = 0; num467 < 50; num467++)
				{
					Dust.NewDust(position, width, height, 18, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, 332);
				Gore.NewGore(position, base.velocity, 333);
				Gore.NewGore(position, base.velocity, 334);
				Gore.NewGore(position, base.velocity, 335);
				Gore.NewGore(position, base.velocity, 335);
			}
			else if (type == 241)
			{
				if (life > 0)
				{
					for (int num468 = 0; (double)num468 < dmg / (double)lifeMax * 100.0; num468++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num469 = 0; num469 < 50; num469++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, 354);
				Gore.NewGore(position, base.velocity, 355);
			}
			else if (type == 242)
			{
				if (life > 0)
				{
					for (int num470 = 0; (double)num470 < dmg / (double)lifeMax * 100.0; num470++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num471 = 0; num471 < 50; num471++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, 356);
				Gore.NewGore(position, base.velocity, 357);
				Gore.NewGore(position, base.velocity, 357);
				Gore.NewGore(position, base.velocity, 358);
				Gore.NewGore(position, base.velocity, 358);
			}
			else if (type >= 105 && type <= 108)
			{
				if (life > 0)
				{
					for (int num472 = 0; (double)num472 < dmg / (double)lifeMax * 100.0; num472++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num473 = 0; num473 < 50; num473++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				if (type == 105 || type == 107)
				{
					Gore.NewGore(position, base.velocity, 124);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 125);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 125);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 126);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 126);
				}
				else
				{
					Gore.NewGore(position, base.velocity, 127);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 128);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 128);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 129);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 129);
				}
			}
			else if (type == 123 || type == 124)
			{
				if (life > 0)
				{
					for (int num474 = 0; (double)num474 < dmg / (double)lifeMax * 100.0; num474++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num475 = 0; num475 < 50; num475++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, 151);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 152);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 152);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 153);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 153);
			}
			else if (type == 22)
			{
				if (life > 0)
				{
					for (int num476 = 0; (double)num476 < dmg / (double)lifeMax * 100.0; num476++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num477 = 0; num477 < 50; num477++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, 73);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 74);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 74);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 75);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 75);
			}
			else if (type == 368)
			{
				if (life > 0)
				{
					for (int num478 = 0; (double)num478 < dmg / (double)lifeMax * 100.0; num478++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num479 = 0; num479 < 50; num479++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, 567);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 568);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 568);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 569);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 569);
			}
			else if (type == 369 || type == 376)
			{
				if (life <= 0)
				{
					for (int num480 = 0; num480 < 25; num480++)
					{
						int num481 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 2f);
						Main.dust[num481].velocity *= 1.4f;
						Main.dust[num481].noLight = true;
						Main.dust[num481].noGravity = true;
					}
					int num482 = 0;
					num482 = Gore.NewGore(new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num482].scale = 1f;
					Main.gore[num482].velocity.X += 1f;
					Main.gore[num482].velocity.Y += 1f;
					num482 = Gore.NewGore(new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num482].scale = 1f;
					Main.gore[num482].velocity.X -= 1f;
					Main.gore[num482].velocity.Y += 1f;
					num482 = Gore.NewGore(new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num482].scale = 1f;
					Main.gore[num482].velocity.X += 1f;
					Main.gore[num482].velocity.Y -= 1f;
					num482 = Gore.NewGore(new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num482].scale = 1f;
					Main.gore[num482].velocity.X -= 1f;
					Main.gore[num482].velocity.Y -= 1f;
				}
			}
			else if (type == 227)
			{
				if (life > 0)
				{
					for (int num483 = 0; (double)num483 < dmg / (double)lifeMax * 100.0; num483++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num484 = 0; num484 < 50; num484++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, 320);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 321);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 322);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 323);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 323);
			}
			else if (type == 228)
			{
				if (life > 0)
				{
					for (int num485 = 0; (double)num485 < dmg / (double)lifeMax * 100.0; num485++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num486 = 0; num486 < 50; num486++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, 324);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 325);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 326);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 327);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 327);
			}
			else if (type == 229)
			{
				if (life > 0)
				{
					for (int num487 = 0; (double)num487 < dmg / (double)lifeMax * 100.0; num487++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num488 = 0; num488 < 50; num488++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, 328);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 329);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 329);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 330);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 330);
			}
			else if (type == 142)
			{
				if (life > 0)
				{
					for (int num489 = 0; (double)num489 < dmg / (double)lifeMax * 100.0; num489++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num490 = 0; num490 < 50; num490++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, 157);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 158);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 158);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 159);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 159);
			}
			else if (type == 178)
			{
				if (life > 0)
				{
					for (int num491 = 0; (double)num491 < dmg / (double)lifeMax * 100.0; num491++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num492 = 0; num492 < 50; num492++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, 231);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 232);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 232);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 233);
			}
			else if (type == 353 || type == 354)
			{
				if (life > 0)
				{
					for (int num493 = 0; (double)num493 < dmg / (double)lifeMax * 100.0; num493++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num494 = 0; num494 < 50; num494++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, 543);
				Gore.NewGore(position, base.velocity, 545);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 546);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 546);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 545);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 545);
			}
			else if (type == 37 || type == 54)
			{
				if (life > 0)
				{
					for (int num495 = 0; (double)num495 < dmg / (double)lifeMax * 100.0; num495++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num496 = 0; num496 < 50; num496++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, 58);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 59);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 59);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 60);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 60);
			}
			else if (type == 441)
			{
				if (life > 0)
				{
					for (int num497 = 0; (double)num497 < dmg / (double)lifeMax * 100.0; num497++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num498 = 0; num498 < 50; num498++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, 768);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 769);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 770);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 771);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 771);
			}
			else if (type == 160)
			{
				if (life > 0)
				{
					for (int num499 = 0; (double)num499 < dmg / (double)lifeMax * 100.0; num499++)
					{
						Dust.NewDust(position, width, height, 26, hitDirection, -1f);
					}
					return;
				}
				for (int num500 = 0; num500 < 50; num500++)
				{
					Dust.NewDust(position, width, height, 26, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, 188);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 189);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 189);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 190);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 190);
			}
			else if (type == 18)
			{
				if (life > 0)
				{
					for (int num501 = 0; (double)num501 < dmg / (double)lifeMax * 100.0; num501++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num502 = 0; num502 < 50; num502++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, 33);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 34);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 34);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 35);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 35);
			}
			else if (type == 19)
			{
				if (life > 0)
				{
					for (int num503 = 0; (double)num503 < dmg / (double)lifeMax * 100.0; num503++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num504 = 0; num504 < 50; num504++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, 36);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 37);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 37);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 38);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 38);
			}
			else if (type == 38)
			{
				if (life > 0)
				{
					for (int num505 = 0; (double)num505 < dmg / (double)lifeMax * 100.0; num505++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num506 = 0; num506 < 50; num506++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, 64);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 65);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 65);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 66);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 66);
			}
			else if (type == 20)
			{
				if (life > 0)
				{
					for (int num507 = 0; (double)num507 < dmg / (double)lifeMax * 100.0; num507++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num508 = 0; num508 < 50; num508++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, 39);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 40);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 40);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 41);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 41);
			}
			else if (type == 207)
			{
				if (life > 0)
				{
					for (int num509 = 0; (double)num509 < dmg / (double)lifeMax * 100.0; num509++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num510 = 0; num510 < 50; num510++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, 283);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 284);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 284);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 285);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 285);
			}
			else if (type == 208)
			{
				if (life > 0)
				{
					for (int num511 = 0; (double)num511 < dmg / (double)lifeMax * 100.0; num511++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num512 = 0; num512 < 50; num512++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, 286);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 287);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 287);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 288);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 288);
			}
			else if (type == 209)
			{
				if (life > 0)
				{
					for (int num513 = 0; (double)num513 < dmg / (double)lifeMax * 100.0; num513++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num514 = 0; num514 < 50; num514++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, 289);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 290);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 290);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 291);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 291);
			}
			else if (type >= 212 && type <= 216)
			{
				if (life > 0)
				{
					for (int num515 = 0; (double)num515 < dmg / (double)lifeMax * 100.0; num515++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num516 = 0; num516 < 50; num516++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				if (type == 212)
				{
					Gore.NewGore(position, base.velocity, 336);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 337);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 337);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 338);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 338);
				}
				else if (type == 213)
				{
					Gore.NewGore(position, base.velocity, 339);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 340);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 340);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 341);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 341);
				}
				else if (type == 214)
				{
					Gore.NewGore(position, base.velocity, 342);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 343);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 343);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 344);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 344);
				}
				else if (type == 215)
				{
					Gore.NewGore(position, base.velocity, 345);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 346);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 346);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 347);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 347);
				}
				else if (type == 216)
				{
					Gore.NewGore(position, base.velocity, 348);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 349);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 349);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 350);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 350);
				}
			}
			else if (type == 220 || type == 221)
			{
				if (life > 0)
				{
					for (int num517 = 0; (double)num517 < dmg / (double)lifeMax * 50.0; num517++)
					{
						Dust.NewDust(position, width, height, 151, hitDirection, -1f, 0, default(Color), 0.7f);
					}
					return;
				}
				for (int num518 = 0; num518 < 20; num518++)
				{
					Dust.NewDust(position, width, height, 151, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 0.7f);
				}
				if (type == 221)
				{
					Gore.NewGore(position, base.velocity, 298, scale);
					Gore.NewGore(position, base.velocity, 299, scale);
				}
				else
				{
					Gore.NewGore(position, base.velocity, 297, scale);
				}
			}
			else if (type == 21 || type == 31 || type == 294 || type == 295 || type == 296 || type == 32 || type == 44 || type == 45 || type == 77 || type == 110 || type == 167 || type == 197 || type == 201 || type == 202 || type == 203 || type == 287 || type == 291 || type == 292 || type == 293 || (type >= 322 && type <= 324) || type == 481 || (type >= 449 && type <= 452))
			{
				if (life > 0)
				{
					for (int num519 = 0; (double)num519 < dmg / (double)lifeMax * 50.0; num519++)
					{
						Dust.NewDust(position, width, height, 26, hitDirection, -1f);
					}
					return;
				}
				for (int num520 = 0; num520 < 20; num520++)
				{
					Dust.NewDust(position, width, height, 26, 2.5f * (float)hitDirection, -2.5f);
				}
				if (type == 167)
				{
					Gore.NewGore(position, base.velocity, 213, scale);
					Gore.NewGore(position, base.velocity, 214, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 43, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 43, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 212, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 212, scale);
					return;
				}
				if (type == 197)
				{
					Gore.NewGore(position, base.velocity, 257, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 43, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 43, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 212, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 212, scale);
					return;
				}
				if (type == 481)
				{
					Gore.NewGore(position, base.velocity, 695, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 696, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 696, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 697, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 697, scale);
					return;
				}
				if (type == 201 || type == 450)
				{
					Gore.NewGore(position, base.velocity, 265, scale);
					Gore.NewGore(position, base.velocity, 267, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 43, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 43, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 44, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 44, scale);
					return;
				}
				if (type == 202 || type == 451)
				{
					Gore.NewGore(position, base.velocity, 268, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 43, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 43, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 44, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 44, scale);
					return;
				}
				if (type == 203 || type == 452)
				{
					Gore.NewGore(position, base.velocity, 269, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 43, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 43, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 266, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 266, scale);
					return;
				}
				if (type == 322)
				{
					Gore.NewGore(position, base.velocity, 460, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 461, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 462, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 461, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 462, scale);
					return;
				}
				if (type == 323)
				{
					Gore.NewGore(position, base.velocity, 463, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 465, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 464, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 464, scale);
					return;
				}
				if (type == 324)
				{
					Gore.NewGore(position, base.velocity, 466, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 467, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 467, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 468, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 468, scale);
					return;
				}
				Gore.NewGore(position, base.velocity, 42, scale);
				if (type == 77)
				{
					Gore.NewGore(position, base.velocity, 106, scale);
				}
				if (type == 110)
				{
					Gore.NewGore(position, base.velocity, 130, scale);
				}
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 43, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 43, scale);
				if (type == 110)
				{
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 131, scale);
				}
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 44, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 44, scale);
			}
			else if (type == 453)
			{
				if (life > 0)
				{
					for (int num521 = 0; (double)num521 < dmg / (double)lifeMax * 50.0; num521++)
					{
						Dust.NewDust(position, width, height, 26, hitDirection, -1f);
					}
					return;
				}
				for (int num522 = 0; num522 < 20; num522++)
				{
					Dust.NewDust(position, width, height, 26, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, 638, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 639, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 640, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 641, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 642, scale);
			}
			else if ((type >= 269 && type <= 276) || (type >= 281 && type <= 286))
			{
				if (life > 0)
				{
					for (int num523 = 0; (double)num523 < dmg / (double)lifeMax * 50.0; num523++)
					{
						Dust.NewDust(position, width, height, 26, hitDirection, -1f);
					}
					return;
				}
				for (int num524 = 0; num524 < 20; num524++)
				{
					Dust.NewDust(position, width, height, 26, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, 42, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 43, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 43, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 44, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 44, scale);
				if (type == 269)
				{
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 406, scale);
				}
				if (type == 270)
				{
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 407, scale);
				}
				if (type == 271 || type == 272)
				{
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 408, scale);
				}
				if (type == 274)
				{
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 409, scale);
				}
				if (type == 276)
				{
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 410, scale);
				}
			}
			else if (type >= 277 && type <= 280)
			{
				if (life > 0)
				{
					for (int num525 = 0; (double)num525 < dmg / (double)lifeMax * 100.0; num525++)
					{
						int num526 = Dust.NewDust(position, width, height, 174, hitDirection, -1f);
						Main.dust[num526].scale = 1.1f;
						Main.dust[num526].noGravity = true;
					}
					return;
				}
				for (int num527 = 0; num527 < 75; num527++)
				{
					int num528 = Dust.NewDust(position, width, height, 174, 1.5f * (float)hitDirection, -0.5f);
					Main.dust[num528].velocity *= 2f;
					Main.dust[num528].scale = 1.4f;
					Main.dust[num528].noGravity = true;
				}
			}
			else if (type == 341)
			{
				int num529 = 196;
				if (life > 0)
				{
					for (int num530 = 0; (double)num530 < dmg / (double)lifeMax * 50.0; num530++)
					{
						Dust.NewDust(position, width, height, num529);
					}
					return;
				}
				for (int num531 = 0; num531 < 20; num531++)
				{
					Dust.NewDust(position, width, height, num529);
				}
				int num532 = Gore.NewGore(new Vector2(position.X, position.Y - 10f), new Vector2(hitDirection, 0f), 61, scale);
				Main.gore[num532].velocity *= 0.3f;
				num532 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 10f), new Vector2(hitDirection, 0f), 62, scale);
				Main.gore[num532].velocity *= 0.3f;
				num532 = Gore.NewGore(new Vector2(position.X, position.Y + (float)height - 10f), new Vector2(hitDirection, 0f), 63, scale);
				Main.gore[num532].velocity *= 0.3f;
			}
			else if (type == 85)
			{
				int num533 = 7;
				if (ai[3] == 2f)
				{
					num533 = 10;
				}
				if (ai[3] == 3f)
				{
					num533 = 37;
				}
				if (life > 0)
				{
					for (int num534 = 0; (double)num534 < dmg / (double)lifeMax * 50.0; num534++)
					{
						Dust.NewDust(position, width, height, num533);
					}
					return;
				}
				for (int num535 = 0; num535 < 20; num535++)
				{
					Dust.NewDust(position, width, height, num533);
				}
				int num536 = Gore.NewGore(new Vector2(position.X, position.Y - 10f), new Vector2(hitDirection, 0f), 61, scale);
				Main.gore[num536].velocity *= 0.3f;
				num536 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 10f), new Vector2(hitDirection, 0f), 62, scale);
				Main.gore[num536].velocity *= 0.3f;
				num536 = Gore.NewGore(new Vector2(position.X, position.Y + (float)height - 10f), new Vector2(hitDirection, 0f), 63, scale);
				Main.gore[num536].velocity *= 0.3f;
			}
			else if (type == 473 || type == 474 || type == 475 || type == 476)
			{
				int num537 = 31;
				if (life > 0)
				{
					for (int num538 = 0; (double)num538 < dmg / (double)lifeMax * 50.0; num538++)
					{
						Dust.NewDust(position, width, height, num537);
					}
					return;
				}
				for (int num539 = 0; num539 < 20; num539++)
				{
					Dust.NewDust(position, width, height, num537);
				}
				int num540 = Gore.NewGore(base.Center, new Vector2(hitDirection, 0f), 61, scale);
				Main.gore[num540].velocity *= 0.3f;
				num540 = Gore.NewGore(base.Center, new Vector2(hitDirection, 0f), 62, scale);
				Main.gore[num540].velocity *= 0.3f;
				num540 = Gore.NewGore(base.Center, new Vector2(hitDirection, 0f), 63, scale);
				Main.gore[num540].velocity *= 0.3f;
			}
			else if (type == 169)
			{
				if (life > 0)
				{
					for (int num541 = 0; (double)num541 < dmg / (double)lifeMax * 50.0; num541++)
					{
						int num542 = Dust.NewDust(position, width, height, 92, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num542].velocity *= 1.5f;
						Main.dust[num542].noGravity = true;
					}
					return;
				}
				for (int num543 = 0; num543 < 100; num543++)
				{
					int num544 = Dust.NewDust(position, width, height, 92, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num544].scale = 1.5f;
					Main.dust[num544].velocity *= 2f;
					Main.dust[num544].noGravity = true;
				}
			}
			else if (type == 170 || type == 180)
			{
				if (life > 0)
				{
					for (int num545 = 0; (double)num545 < dmg / (double)lifeMax * 50.0; num545++)
					{
						int num546 = Dust.NewDust(position, width, height, 54, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num546].velocity *= 1.5f;
						Main.dust[num546].noGravity = true;
					}
					return;
				}
				for (int num547 = 0; num547 < 10; num547++)
				{
					int num548 = Dust.NewDust(position, width, height, 54, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num548].velocity *= 2f;
					Main.dust[num548].noGravity = true;
				}
				for (int num549 = 0; num549 < 4; num549++)
				{
					int num550 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 10f), new Vector2(hitDirection, 0f), 99, scale);
					Main.gore[num550].velocity *= 0.3f;
				}
			}
			else if (type == 171)
			{
				if (life > 0)
				{
					for (int num551 = 0; (double)num551 < dmg / (double)lifeMax * 50.0; num551++)
					{
						int num552 = Dust.NewDust(position, width, height, 16, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num552].velocity *= 1.5f;
						Main.dust[num552].noGravity = true;
					}
					return;
				}
				for (int num553 = 0; num553 < 10; num553++)
				{
					int num554 = Dust.NewDust(position, width, height, 16, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num554].velocity *= 2f;
					Main.dust[num554].noGravity = true;
				}
				for (int num555 = 0; num555 < 4; num555++)
				{
					int num556 = 11 + num555;
					if (num556 > 13)
					{
						num556 = Main.rand.Next(11, 14);
					}
					int num557 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 10f), new Vector2(hitDirection, 0f), num556, scale);
					Main.gore[num557].velocity *= 0.3f;
				}
			}
			else if (type == 290)
			{
				if (life <= 0)
				{
					for (int num558 = 0; num558 < 10; num558++)
					{
						int num559 = Dust.NewDust(position, width, height, 16, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num559].velocity *= 2f;
						Main.dust[num559].noGravity = true;
					}
					int num560 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(11, 14), scale);
					Main.gore[num560].velocity *= 0.5f;
					num560 = Gore.NewGore(new Vector2(position.X, position.Y + 20f), default(Vector2), Main.rand.Next(11, 14), scale);
					Main.gore[num560].velocity *= 0.5f;
					num560 = Gore.NewGore(new Vector2(position.X, position.Y + 40f), default(Vector2), Main.rand.Next(11, 14), scale);
					Main.gore[num560].velocity *= 0.5f;
				}
			}
			else if (type >= 87 && type <= 92)
			{
				if (life > 0)
				{
					for (int num561 = 0; (double)num561 < dmg / (double)lifeMax * 50.0; num561++)
					{
						int num562 = Dust.NewDust(position, width, height, 16, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num562].velocity *= 1.5f;
						Main.dust[num562].noGravity = true;
					}
					return;
				}
				for (int num563 = 0; num563 < 10; num563++)
				{
					int num564 = Dust.NewDust(position, width, height, 16, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num564].velocity *= 2f;
					Main.dust[num564].noGravity = true;
				}
				int num565 = Main.rand.Next(1, 4);
				for (int num566 = 0; num566 < num565; num566++)
				{
					int num567 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 10f), new Vector2(hitDirection, 0f), Main.rand.Next(11, 14), scale);
					Main.gore[num567].velocity *= 0.8f;
				}
			}
			else if (type == 78 || type == 79 || type == 80)
			{
				if (life > 0)
				{
					for (int num568 = 0; (double)num568 < dmg / (double)lifeMax * 50.0; num568++)
					{
						int num569 = Dust.NewDust(position, width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num569].velocity *= 2f;
						Main.dust[num569].noGravity = true;
					}
					return;
				}
				for (int num570 = 0; num570 < 20; num570++)
				{
					int num571 = Dust.NewDust(position, width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num571].velocity *= 2f;
					Main.dust[num571].noGravity = true;
				}
				int num572 = Gore.NewGore(new Vector2(position.X, position.Y - 10f), new Vector2(hitDirection, 0f), 61, scale);
				Main.gore[num572].velocity *= 0.3f;
				num572 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 10f), new Vector2(hitDirection, 0f), 62, scale);
				Main.gore[num572].velocity *= 0.3f;
				num572 = Gore.NewGore(new Vector2(position.X, position.Y + (float)height - 10f), new Vector2(hitDirection, 0f), 63, scale);
				Main.gore[num572].velocity *= 0.3f;
			}
			else if (type == 82 || type == 158 || type == 159 || type == 250 || type == 253)
			{
				if (life > 0)
				{
					for (int num573 = 0; (double)num573 < dmg / (double)lifeMax * 50.0; num573++)
					{
						int num574 = Dust.NewDust(position, width, height, 54, 0f, 0f, 50, default(Color), 1.5f);
						Main.dust[num574].velocity *= 2f;
						Main.dust[num574].noGravity = true;
					}
					return;
				}
				for (int num575 = 0; num575 < 20; num575++)
				{
					int num576 = Dust.NewDust(position, width, height, 54, 0f, 0f, 50, default(Color), 1.5f);
					Main.dust[num576].velocity *= 2f;
					Main.dust[num576].noGravity = true;
				}
				int num577 = Gore.NewGore(new Vector2(position.X, position.Y - 10f), new Vector2(hitDirection, 0f), 99, scale);
				Main.gore[num577].velocity *= 0.3f;
				num577 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 15f), new Vector2(hitDirection, 0f), 99, scale);
				Main.gore[num577].velocity *= 0.3f;
				num577 = Gore.NewGore(new Vector2(position.X, position.Y + (float)height - 20f), new Vector2(hitDirection, 0f), 99, scale);
				Main.gore[num577].velocity *= 0.3f;
			}
			else if (type == 316 || type == 330)
			{
				if (life > 0)
				{
					for (int num578 = 0; (double)num578 < dmg / (double)lifeMax * 100.0; num578++)
					{
						int num579 = Dust.NewDust(position, width, height, 192, hitDirection, -1f, 100, new Color(100, 100, 100, 100));
						Main.dust[num579].noGravity = true;
					}
				}
				else
				{
					for (int num580 = 0; num580 < 50; num580++)
					{
						int num581 = Dust.NewDust(position, width, height, 192, 2 * hitDirection, -2f, 100, new Color(100, 100, 100, 100));
						Main.dust[num581].noGravity = true;
					}
				}
			}
			else if (type == 315)
			{
				if (life > 0)
				{
					for (int num582 = 0; (double)num582 < dmg / (double)lifeMax * 50.0; num582++)
					{
						int num583 = Dust.NewDust(position, width, height, 54, 0f, 0f, 50, default(Color), 1.5f);
						Main.dust[num583].velocity *= 2f;
						Main.dust[num583].noGravity = true;
					}
					return;
				}
				for (int num584 = 0; num584 < 20; num584++)
				{
					int num585 = Dust.NewDust(position, width, height, 54, 0f, 0f, 50, default(Color), 1.5f);
					Main.dust[num585].velocity *= 2f;
					Main.dust[num585].noGravity = true;
				}
				int num586 = Gore.NewGore(new Vector2(position.X, position.Y - 10f), new Vector2(hitDirection, 0f), 99, scale);
				Main.gore[num586].velocity *= 0.3f;
				num586 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 15f), new Vector2(hitDirection, 0f), 99, scale);
				Main.gore[num586].velocity *= 0.3f;
				num586 = Gore.NewGore(new Vector2(position.X, position.Y + (float)height - 20f), new Vector2(hitDirection, 0f), 99, scale);
				Main.gore[num586].velocity *= 0.3f;
				num586 = Gore.NewGore(new Vector2(position.X, position.Y), new Vector2(hitDirection, 0f), 446, scale);
				Main.gore[num586].velocity *= 0.1f;
			}
			else if (type == 254 || type == 255 || type == 256 || type == 257 || type == 258 || type == 259 || type == 260 || type == 261)
			{
				if (life > 0)
				{
					for (int num587 = 0; (double)num587 < dmg / (double)lifeMax * 50.0; num587++)
					{
						int num588 = Dust.NewDust(position, width, height, 165, 0f, 0f, 50, default(Color), 1.5f);
						Main.dust[num588].velocity *= 2f;
						Main.dust[num588].noGravity = true;
					}
					return;
				}
				for (int num589 = 0; num589 < 20; num589++)
				{
					int num590 = Dust.NewDust(position, width, height, 165, 0f, 0f, 50, default(Color), 1.5f);
					Main.dust[num590].velocity *= 2f;
					Main.dust[num590].noGravity = true;
				}
				if (type != 261)
				{
					int num591 = Gore.NewGore(new Vector2(position.X, position.Y - 10f), new Vector2(hitDirection, 0f), 375, scale);
					Main.gore[num591].velocity *= 0.3f;
					num591 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 15f), new Vector2(hitDirection, 0f), 376, scale);
					Main.gore[num591].velocity *= 0.3f;
					num591 = Gore.NewGore(new Vector2(position.X, position.Y + (float)height - 20f), new Vector2(hitDirection, 0f), 377, scale);
					Main.gore[num591].velocity *= 0.3f;
				}
			}
			else if (type == 140)
			{
				if (life <= 0)
				{
					for (int num592 = 0; num592 < 20; num592++)
					{
						int num593 = Dust.NewDust(position, width, height, 54, 0f, 0f, 50, default(Color), 1.5f);
						Main.dust[num593].velocity *= 2f;
						Main.dust[num593].noGravity = true;
					}
					int num594 = Gore.NewGore(new Vector2(position.X, position.Y - 10f), new Vector2(hitDirection, 0f), 99, scale);
					Main.gore[num594].velocity *= 0.3f;
					num594 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 15f), new Vector2(hitDirection, 0f), 99, scale);
					Main.gore[num594].velocity *= 0.3f;
					num594 = Gore.NewGore(new Vector2(position.X, position.Y + (float)height - 20f), new Vector2(hitDirection, 0f), 99, scale);
					Main.gore[num594].velocity *= 0.3f;
				}
			}
			else if (type == 39 || type == 40 || type == 41)
			{
				if (life > 0)
				{
					for (int num595 = 0; (double)num595 < dmg / (double)lifeMax * 50.0; num595++)
					{
						Dust.NewDust(position, width, height, 26, hitDirection, -1f);
					}
					return;
				}
				for (int num596 = 0; num596 < 20; num596++)
				{
					Dust.NewDust(position, width, height, 26, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, type - 39 + 67);
			}
			else if (type == 34)
			{
				if (life > 0)
				{
					for (int num597 = 0; (double)num597 < dmg / (double)lifeMax * 30.0; num597++)
					{
						int num598 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 15, (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 100, default(Color), 1.8f);
						Main.dust[num598].noLight = true;
						Main.dust[num598].noGravity = true;
						Main.dust[num598].velocity *= 1.3f;
						num598 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 26, (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 0, default(Color), 0.9f);
						Main.dust[num598].noLight = true;
						Main.dust[num598].velocity *= 1.3f;
					}
				}
				else
				{
					for (int num599 = 0; num599 < 15; num599++)
					{
						int num600 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 15, (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 100, default(Color), 1.8f);
						Main.dust[num600].noLight = true;
						Main.dust[num600].noGravity = true;
						Main.dust[num600].velocity *= 1.3f;
						num600 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 26, (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 0, default(Color), 0.9f);
						Main.dust[num600].noLight = true;
						Main.dust[num600].velocity *= 1.3f;
					}
				}
			}
			else if (type == 289)
			{
				if (life > 0)
				{
					for (int num601 = 0; (double)num601 < dmg / (double)lifeMax * 30.0; num601++)
					{
						int num602 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 181, (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 100, default(Color), 1.8f);
						Main.dust[num602].noLight = true;
						Main.dust[num602].noGravity = true;
						Main.dust[num602].velocity *= 1.3f;
					}
				}
				else
				{
					for (int num603 = 0; num603 < 50; num603++)
					{
						int num604 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 181, (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 100, default(Color), 1.8f);
						Main.dust[num604].noLight = true;
						Main.dust[num604].noGravity = true;
						Main.dust[num604].velocity *= 1.3f;
					}
				}
			}
			else if (type == 35 || type == 36)
			{
				if (life > 0)
				{
					for (int num605 = 0; (double)num605 < dmg / (double)lifeMax * 100.0; num605++)
					{
						Dust.NewDust(position, width, height, 26, hitDirection, -1f);
					}
					return;
				}
				for (int num606 = 0; num606 < 150; num606++)
				{
					Dust.NewDust(position, width, height, 26, 2.5f * (float)hitDirection, -2.5f);
				}
				if (type == 35)
				{
					Gore.NewGore(position, base.velocity, 54);
					Gore.NewGore(position, base.velocity, 55);
					return;
				}
				Gore.NewGore(position, base.velocity, 56);
				Gore.NewGore(position, base.velocity, 57);
				Gore.NewGore(position, base.velocity, 57);
				Gore.NewGore(position, base.velocity, 57);
			}
			else if (type == 139)
			{
				if (life <= 0)
				{
					for (int num607 = 0; num607 < 10; num607++)
					{
						int num608 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num608].velocity *= 1.4f;
					}
					for (int num609 = 0; num609 < 5; num609++)
					{
						int num610 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num610].noGravity = true;
						Main.dust[num610].velocity *= 5f;
						num610 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num610].velocity *= 3f;
					}
					int num611 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num611].velocity *= 0.4f;
					Main.gore[num611].velocity.X += 1f;
					Main.gore[num611].velocity.Y += 1f;
					num611 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num611].velocity *= 0.4f;
					Main.gore[num611].velocity.X -= 1f;
					Main.gore[num611].velocity.Y += 1f;
					num611 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num611].velocity *= 0.4f;
					Main.gore[num611].velocity.X += 1f;
					Main.gore[num611].velocity.Y -= 1f;
					num611 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num611].velocity *= 0.4f;
					Main.gore[num611].velocity.X -= 1f;
					Main.gore[num611].velocity.Y -= 1f;
				}
			}
			else if (type == 467)
			{
				if (life <= 0)
				{
					for (int num612 = 0; num612 < 7; num612++)
					{
						int num613 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num613].velocity *= 1.4f;
					}
					for (int num614 = 0; num614 < 3; num614++)
					{
						int num615 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num615].noGravity = true;
						Main.dust[num615].velocity *= 5f;
						num615 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num615].velocity *= 3f;
					}
					Gore.NewGore(position, base.velocity, 660);
					Gore.NewGore(position, base.velocity, 660);
				}
			}
			else if (type >= 134 && type <= 136)
			{
				if (type == 135 && life > 0 && Main.netMode != 1 && ai[2] == 0f && Main.rand.Next(25) == 0)
				{
					ai[2] = 1f;
					int num616 = NewNPC((int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), 139);
					if (Main.netMode == 2 && num616 < 200)
					{
						NetMessage.SendData(23, -1, -1, "", num616);
					}
					netUpdate = true;
				}
				if (life > 0)
				{
					return;
				}
				Gore.NewGore(position, base.velocity, 156);
				if (Main.rand.Next(2) == 0)
				{
					for (int num617 = 0; num617 < 10; num617++)
					{
						int num618 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num618].velocity *= 1.4f;
					}
					for (int num619 = 0; num619 < 5; num619++)
					{
						int num620 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num620].noGravity = true;
						Main.dust[num620].velocity *= 5f;
						num620 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num620].velocity *= 3f;
					}
					int num621 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num621].velocity *= 0.4f;
					Main.gore[num621].velocity.X += 1f;
					Main.gore[num621].velocity.Y += 1f;
					num621 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num621].velocity *= 0.4f;
					Main.gore[num621].velocity.X -= 1f;
					Main.gore[num621].velocity.Y += 1f;
					num621 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num621].velocity *= 0.4f;
					Main.gore[num621].velocity.X += 1f;
					Main.gore[num621].velocity.Y -= 1f;
					num621 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num621].velocity *= 0.4f;
					Main.gore[num621].velocity.X -= 1f;
					Main.gore[num621].velocity.Y -= 1f;
				}
			}
			else if (type == 347)
			{
				if (life <= 0)
				{
					Gore.NewGore(position, base.velocity, 524);
					Gore.NewGore(position, base.velocity, 525);
					Gore.NewGore(position, base.velocity, 526);
					Gore.NewGore(position, base.velocity, 527);
					for (int num622 = 0; num622 < 7; num622++)
					{
						int num623 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num623].velocity *= 1.4f;
					}
					for (int num624 = 0; num624 < 4; num624++)
					{
						int num625 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num625].noGravity = true;
						Main.dust[num625].velocity *= 5f;
						num625 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num625].velocity *= 3f;
					}
					int num626 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num626].velocity *= 0.4f;
					Main.gore[num626].velocity.X += 1f;
					Main.gore[num626].velocity.Y += 1f;
					num626 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num626].velocity *= 0.4f;
					Main.gore[num626].velocity.X -= 1f;
					Main.gore[num626].velocity.Y -= 1f;
				}
			}
			else if (type == 346)
			{
				if (life <= 0)
				{
					Gore.NewGore(position, base.velocity, 518);
					Gore.NewGore(position, base.velocity, 519);
					Gore.NewGore(position, base.velocity, 520);
					Gore.NewGore(position, base.velocity, 521);
					Gore.NewGore(position, base.velocity, 522);
					Gore.NewGore(position, base.velocity, 523);
					for (int num627 = 0; num627 < 10; num627++)
					{
						int num628 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num628].velocity *= 1.4f;
					}
					for (int num629 = 0; num629 < 5; num629++)
					{
						int num630 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num630].noGravity = true;
						Main.dust[num630].velocity *= 5f;
						num630 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num630].velocity *= 3f;
					}
					int num631 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num631].velocity *= 0.4f;
					Main.gore[num631].velocity.X += 1f;
					Main.gore[num631].velocity.Y += 1f;
					num631 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num631].velocity *= 0.4f;
					Main.gore[num631].velocity.X -= 1f;
					Main.gore[num631].velocity.Y += 1f;
					num631 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num631].velocity *= 0.4f;
					Main.gore[num631].velocity.X += 1f;
					Main.gore[num631].velocity.Y -= 1f;
					num631 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num631].velocity *= 0.4f;
					Main.gore[num631].velocity.X -= 1f;
					Main.gore[num631].velocity.Y -= 1f;
				}
			}
			else if (type == 127)
			{
				if (life <= 0)
				{
					Gore.NewGore(position, base.velocity, 149);
					Gore.NewGore(position, base.velocity, 150);
					for (int num632 = 0; num632 < 10; num632++)
					{
						int num633 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num633].velocity *= 1.4f;
					}
					for (int num634 = 0; num634 < 5; num634++)
					{
						int num635 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num635].noGravity = true;
						Main.dust[num635].velocity *= 5f;
						num635 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num635].velocity *= 3f;
					}
					int num636 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num636].velocity *= 0.4f;
					Main.gore[num636].velocity.X += 1f;
					Main.gore[num636].velocity.Y += 1f;
					num636 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num636].velocity *= 0.4f;
					Main.gore[num636].velocity.X -= 1f;
					Main.gore[num636].velocity.Y += 1f;
					num636 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num636].velocity *= 0.4f;
					Main.gore[num636].velocity.X += 1f;
					Main.gore[num636].velocity.Y -= 1f;
					num636 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num636].velocity *= 0.4f;
					Main.gore[num636].velocity.X -= 1f;
					Main.gore[num636].velocity.Y -= 1f;
				}
			}
			else if (type >= 128 && type <= 131)
			{
				if (life <= 0)
				{
					Gore.NewGore(position, base.velocity, 147);
					Gore.NewGore(position, base.velocity, 148);
					for (int num637 = 0; num637 < 10; num637++)
					{
						int num638 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num638].velocity *= 1.4f;
					}
					for (int num639 = 0; num639 < 5; num639++)
					{
						int num640 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num640].noGravity = true;
						Main.dust[num640].velocity *= 5f;
						num640 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num640].velocity *= 3f;
					}
					int num641 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num641].velocity *= 0.4f;
					Main.gore[num641].velocity.X += 1f;
					Main.gore[num641].velocity.Y += 1f;
					num641 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num641].velocity *= 0.4f;
					Main.gore[num641].velocity.X -= 1f;
					Main.gore[num641].velocity.Y += 1f;
					num641 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num641].velocity *= 0.4f;
					Main.gore[num641].velocity.X += 1f;
					Main.gore[num641].velocity.Y -= 1f;
					num641 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num641].velocity *= 0.4f;
					Main.gore[num641].velocity.X -= 1f;
					Main.gore[num641].velocity.Y -= 1f;
				}
			}
			else if (type == 23)
			{
				if (life > 0)
				{
					for (int num642 = 0; (double)num642 < dmg / (double)lifeMax * 100.0; num642++)
					{
						int num643 = 25;
						if (Main.rand.Next(2) == 0)
						{
							num643 = 6;
						}
						Dust.NewDust(position, width, height, num643, hitDirection, -1f);
						int num644 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100, default(Color), 2f);
						Main.dust[num644].noGravity = true;
					}
					return;
				}
				for (int num645 = 0; num645 < 50; num645++)
				{
					int num646 = 25;
					if (Main.rand.Next(2) == 0)
					{
						num646 = 6;
					}
					Dust.NewDust(position, width, height, num646, 2 * hitDirection, -2f);
				}
				for (int num647 = 0; num647 < 50; num647++)
				{
					int num648 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100, default(Color), 2.5f);
					Main.dust[num648].velocity *= 6f;
					Main.dust[num648].noGravity = true;
				}
			}
			else if (type == 24)
			{
				if (life > 0)
				{
					for (int num649 = 0; (double)num649 < dmg / (double)lifeMax * 100.0; num649++)
					{
						int num650 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, base.velocity.X, base.velocity.Y, 100, default(Color), 2.5f);
						Main.dust[num650].noGravity = true;
					}
					return;
				}
				for (int num651 = 0; num651 < 50; num651++)
				{
					int num652 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, base.velocity.X, base.velocity.Y, 100, default(Color), 2.5f);
					Main.dust[num652].noGravity = true;
					Main.dust[num652].velocity *= 2f;
				}
				Gore.NewGore(position, base.velocity, 45);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 46);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 46);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 47);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 47);
			}
			else if (type == 25)
			{
				Main.PlaySound(2, (int)position.X, (int)position.Y, 10);
				for (int num653 = 0; num653 < 20; num653++)
				{
					int num654 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 100, default(Color), 2f);
					Main.dust[num654].noGravity = true;
					Main.dust[num654].velocity *= 2f;
					num654 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 100);
					Main.dust[num654].velocity *= 2f;
				}
			}
			else if (type == 33)
			{
				Main.PlaySound(2, (int)position.X, (int)position.Y, 10);
				for (int num655 = 0; num655 < 20; num655++)
				{
					int num656 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 172, (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 100, default(Color), 1.2f);
					Main.dust[num656].noGravity = true;
					Main.dust[num656].velocity *= 2f;
					num656 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 172, (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 100, default(Color), 0.6f);
					Main.dust[num656].velocity *= 2f;
				}
			}
			else if (type == 26 || type == 27 || type == 28 || type == 29 || type == 73 || type == 111)
			{
				if (life > 0)
				{
					for (int num657 = 0; (double)num657 < dmg / (double)lifeMax * 100.0; num657++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num658 = 0; num658 < 50; num658++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				int num659 = 48;
				int num660 = 49;
				int num661 = 50;
				if (type == 111)
				{
					num659 = 623;
					num660 = 624;
					num661 = 625;
				}
				else if (type == 26)
				{
					num659 = 626;
					num660 = 627;
					num661 = 628;
				}
				else if (type == 73)
				{
					num659 = 629;
					num660 = 630;
					num661 = 631;
				}
				else if (type == 27)
				{
					num659 = 632;
					num660 = 633;
					num661 = 634;
				}
				else if (type == 28)
				{
					num659 = 635;
					num660 = 636;
					num661 = 637;
				}
				Gore.NewGore(position, base.velocity, num659, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, num660, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, num660, scale);
				if (type == 111)
				{
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 131, scale);
				}
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, num661, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, num661, scale);
			}
			else if (type == 471)
			{
				if (life > 0)
				{
					for (int num662 = 0; (double)num662 < dmg / (double)lifeMax * 100.0; num662++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num663 = 0; num663 < 50; num663++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, 675, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 676, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 677, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 678, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 678, scale);
			}
			else if (type == 472)
			{
				if (life > 0)
				{
					for (int num664 = 0; (double)num664 < dmg / (double)lifeMax * 100.0; num664++)
					{
						int num665 = Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						if (Main.rand.Next(3) != 0)
						{
							Main.dust[num665].noGravity = true;
						}
						Main.dust[num665].alpha = 100;
					}
					return;
				}
				for (int num666 = 0; num666 < 50; num666++)
				{
					int num667 = Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					if (Main.rand.Next(3) != 0)
					{
						Main.dust[num667].noGravity = true;
					}
					Main.dust[num667].alpha = 100;
				}
				Gore.NewGore(position, base.velocity, 679, scale);
				Gore.NewGore(position, base.velocity, 680, scale);
			}
			else if (type == 480)
			{
				if (life > 0)
				{
					for (int num668 = 0; (double)num668 < dmg / (double)lifeMax * 100.0; num668++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num669 = 0; num669 < 50; num669++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, 692, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 693, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 693, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 694, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 694, scale);
			}
			else if (type == 185)
			{
				if (life > 0)
				{
					for (int num670 = 0; (double)num670 < dmg / (double)lifeMax * 100.0; num670++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num671 = 0; num671 < 50; num671++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, base.velocity, 240, scale);
			}
			else if (type == 30)
			{
				Main.PlaySound(2, (int)position.X, (int)position.Y, 10);
				for (int num672 = 0; num672 < 20; num672++)
				{
					int num673 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 27, (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 100, default(Color), 2f);
					Main.dust[num673].noGravity = true;
					Main.dust[num673].velocity *= 2f;
					num673 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 27, (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 100);
					Main.dust[num673].velocity *= 2f;
				}
			}
			else if (type == 42 || type == 176 || type == 205 || (type >= 231 && type <= 235))
			{
				if (life > 0)
				{
					for (int num674 = 0; (double)num674 < dmg / (double)lifeMax * 100.0; num674++)
					{
						Dust.NewDust(position, width, height, 18, hitDirection, -1f, alpha, color, scale);
					}
					return;
				}
				for (int num675 = 0; num675 < 50; num675++)
				{
					Dust.NewDust(position, width, height, 18, hitDirection, -2f, alpha, color, scale);
				}
				if (type == 205)
				{
					Gore.NewGore(position, base.velocity, 270, scale);
					Gore.NewGore(position, base.velocity, 271, scale);
					Gore.NewGore(position, base.velocity, 271, scale);
					Gore.NewGore(position, base.velocity, 272, scale);
				}
				else if (type == 176)
				{
					Gore.NewGore(position, base.velocity, 229, scale);
					Gore.NewGore(position, base.velocity, 230, scale);
				}
				else
				{
					Gore.NewGore(position, base.velocity, 70, scale);
					Gore.NewGore(position, base.velocity, 71, scale);
				}
			}
			else if (type == 43 || type == 56)
			{
				if (life > 0)
				{
					for (int num676 = 0; (double)num676 < dmg / (double)lifeMax * 100.0; num676++)
					{
						Dust.NewDust(position, width, height, 40, hitDirection, -1f, alpha, color, 1.2f);
					}
					return;
				}
				for (int num677 = 0; num677 < 50; num677++)
				{
					Dust.NewDust(position, width, height, 40, hitDirection, -2f, alpha, color, 1.2f);
				}
				Gore.NewGore(position, base.velocity, 72);
				Gore.NewGore(position, base.velocity, 72);
			}
			else if (type == 175)
			{
				if (life > 0)
				{
					for (int num678 = 0; (double)num678 < dmg / (double)lifeMax * 100.0; num678++)
					{
						Dust.NewDust(position, width, height, 40, hitDirection, -1f, alpha, color, 1.2f);
					}
					return;
				}
				for (int num679 = 0; num679 < 50; num679++)
				{
					Dust.NewDust(position, width, height, 40, hitDirection, -2f, alpha, color, 1.2f);
				}
				Gore.NewGore(position, base.velocity, 227);
				Gore.NewGore(position, base.velocity, 228);
			}
			else if (type == 48)
			{
				if (life > 0)
				{
					for (int num680 = 0; (double)num680 < dmg / (double)lifeMax * 100.0; num680++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num681 = 0; num681 < 50; num681++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, base.velocity, 80);
				Gore.NewGore(position, base.velocity, 81);
			}
			else if (type == 62 || type == 66)
			{
				if (life > 0)
				{
					for (int num682 = 0; (double)num682 < dmg / (double)lifeMax * 100.0; num682++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num683 = 0; num683 < 50; num683++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, base.velocity, 93);
				Gore.NewGore(position, base.velocity, 94);
				Gore.NewGore(position, base.velocity, 94);
			}
			else
			{
				if (type != 156)
				{
					return;
				}
				if (life > 0)
				{
					for (int num684 = 0; (double)num684 < dmg / (double)lifeMax * 100.0; num684++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num685 = 0; num685 < 50; num685++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, base.velocity, 184);
				Gore.NewGore(position, base.velocity, 185);
				Gore.NewGore(position, base.velocity, 185);
			}
		}

		public static int CountNPCS(int Type)
		{
			int num = 0;
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type == Type)
				{
					num++;
				}
			}
			return num;
		}

		public static bool AnyNPCs(int Type)
		{
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type == Type)
				{
					return true;
				}
			}
			return false;
		}

		public static int FindFirstNPC(int Type)
		{
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type == Type)
				{
					return i;
				}
			}
			return -1;
		}

		public static bool NearSpikeBall(int x, int y)
		{
			Rectangle rectangle = new Rectangle(x * 16 - 300, y * 16 - 300, 600, 600);
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].aiStyle == 20)
				{
					Rectangle rectangle2 = new Rectangle((int)Main.npc[i].ai[1], (int)Main.npc[i].ai[2], 20, 20);
					if (rectangle.Intersects(rectangle2))
					{
						return true;
					}
				}
			}
			return false;
		}

		public int HasBuff(int type)
		{
			if (buffImmune[type])
			{
				return -1;
			}
			for (int i = 0; i < 5; i++)
			{
				if (buffTime[i] >= 1 && buffType[i] == type)
				{
					return i;
				}
			}
			return -1;
		}

		public void AddBuff(int type, int time, bool quiet = false)
		{
			if (buffImmune[type])
			{
				return;
			}
			if (!quiet)
			{
				if (Main.netMode == 1)
				{
					NetMessage.SendData(53, -1, -1, "", whoAmI, type, time);
				}
				else if (Main.netMode == 2)
				{
					NetMessage.SendData(54, -1, -1, "", whoAmI);
				}
			}
			int num = -1;
			for (int i = 0; i < 5; i++)
			{
				if (buffType[i] == type)
				{
					if (buffTime[i] < time)
					{
						buffTime[i] = time;
					}
					return;
				}
			}
			while (num == -1)
			{
				int num2 = -1;
				for (int j = 0; j < 5; j++)
				{
					if (!Main.debuff[buffType[j]])
					{
						num2 = j;
						break;
					}
				}
				if (num2 == -1)
				{
					return;
				}
				for (int k = num2; k < 5; k++)
				{
					if (buffType[k] == 0)
					{
						num = k;
						break;
					}
				}
				if (num == -1)
				{
					DelBuff(num2);
				}
			}
			buffType[num] = type;
			buffTime[num] = time;
		}

		public void DelBuff(int b)
		{
			buffTime[b] = 0;
			buffType[b] = 0;
			for (int i = 0; i < 4; i++)
			{
				if (buffTime[i] == 0 || buffType[i] == 0)
				{
					for (int j = i + 1; j < 5; j++)
					{
						buffTime[j - 1] = buffTime[j];
						buffType[j - 1] = buffType[j];
						buffTime[j] = 0;
						buffType[j] = 0;
					}
				}
			}
			if (Main.netMode == 2)
			{
				NetMessage.SendData(54, -1, -1, "", whoAmI);
			}
		}

		public Rectangle getRect()
		{
			return new Rectangle((int)position.X, (int)position.Y, width, height);
		}

		public bool CanBeChasedBy(object attacker = null, bool ignoreDontTakeDamage = false)
		{
			if (active && chaseable && lifeMax > 5 && (!dontTakeDamage || ignoreDontTakeDamage) && !friendly)
			{
				return !immortal;
			}
			return false;
		}

		public void moneyPing(Vector2 pos)
		{
			Main.PlaySound(38, pos);
			int num = 244;
			if (extraValue >= 1000000f)
			{
				num = 247;
			}
			else if (extraValue >= 10000f)
			{
				num = 246;
			}
			else if (extraValue >= 100f)
			{
				num = 245;
			}
			for (int i = 0; i < 20; i++)
			{
				int num2 = Dust.NewDust(pos - new Vector2(1f, 2f), 10, 14, num, 0f, 0f, 254, default(Color), 0.25f);
				Main.dust[num2].velocity *= 0.2f;
			}
		}

		public void IdleSounds()
		{
			if ((type == 239 || type == 240) && Main.rand.Next(900) == 0)
			{
				Main.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(24, 26));
			}
			else if ((type == 62 || type == 156) && Main.rand.Next(700) == 0)
			{
				Main.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(26, 30));
			}
			else if (type == 177 && Main.rand.Next(600) == 0)
			{
				Main.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(30, 32));
			}
			else if (type == 226 && Main.rand.Next(800) == 0)
			{
				Main.PlaySound(29, (int)position.X, (int)position.Y, 32);
			}
			else if (type == 153 && Main.rand.Next(1000) == 0)
			{
				Main.PlaySound(29, (int)position.X, (int)position.Y, 33);
			}
			else if (wet && (type == 63 || type == 64 || type == 103) && Main.rand.Next(1000) == 0)
			{
				Main.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(34, 36));
			}
			else if ((type == 198 || type == 199) && Main.rand.Next(1000) == 0)
			{
				Main.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(36, 38));
			}
			else if ((type == 170 || type == 180 || type == 171) && Main.rand.Next(600) == 0)
			{
				Main.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(38, 41));
			}
			else if (type == 250 && Main.rand.Next(700) == 0)
			{
				Main.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(41, 44));
			}
			else if (type == 508 && Main.rand.Next(800) == 0)
			{
				Main.PlaySound(29, (int)position.X, (int)position.Y, 44);
			}
			else if (type == 509 && Main.rand.Next(800) == 0)
			{
				Main.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(44, 47));
			}
			else if (type == 494 && Main.rand.Next(600) == 0)
			{
				Main.PlaySound(29, (int)position.X, (int)position.Y, 47);
			}
			else if (type == 467 && Main.rand.Next(700) == 0)
			{
				Main.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(48, 50));
			}
			else if (type == 468 && Main.rand.Next(700) == 0)
			{
				Main.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(50, 53));
			}
			else if (type == 288 && Main.rand.Next(400) == 0)
			{
				Main.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(53, 55));
			}
			else if ((type == 524 || type == 525 || type == 526 || type == 527) && Main.rand.Next(700) == 0)
			{
				Main.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(55, 57));
			}
			else if ((type == 496 || type == 497) && Main.rand.Next(600) == 0)
			{
				Main.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(57, 59));
			}
			else if (type == 389 && Main.rand.Next(800) == 0)
			{
				Main.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(59, 61));
			}
			else if (type == 471 && Main.rand.Next(600) == 0)
			{
				Main.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(61, 63));
			}
			else if (type == 482 && Main.rand.Next(600) == 0)
			{
				Main.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(63, 66));
			}
			else if (type == 388 && Main.rand.Next(700) == 0)
			{
				Main.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(66, 69));
			}
			else if (type == 520 && Main.rand.Next(800) == 0)
			{
				Main.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(69, 73));
			}
			else if (type == 477 && Main.rand.Next(600) == 0)
			{
				Main.PlaySound(29, (int)position.X, (int)position.Y, 73);
			}
			else if (type == 258 && Main.rand.Next(700) == 0)
			{
				Main.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(74, 78));
			}
			else if (type == 252 && Main.rand.Next(700) == 0)
			{
				Main.PlaySound(29, (int)position.X, (int)position.Y, 78);
			}
			else if (type == 469 && Main.rand.Next(700) == 0)
			{
				Main.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(79, 81));
			}
			else if ((type == 253 || type == 82) && Main.rand.Next(700) == 0)
			{
				Main.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(81, 84));
			}
			else if (type >= 498 && type <= 506 && Main.rand.Next(600) == 0)
			{
				Main.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(84, 86));
			}
			else if (type == 391 && Main.rand.Next(700) == 0)
			{
				Main.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(86, 87));
			}
		}

		public void UpdateNPC(int i)
		{
			base.whoAmI = i;
			if (!active)
			{
				return;
			}
			if (type == 368)
			{
				travelNPC = true;
			}
			if ((type >= 442 && type <= 448) || type == 539)
			{
				Color color = Lighting.GetColor((int)base.Center.X / 16, (int)base.Center.Y / 16);
				if (color.R > 20 || color.B > 20 || color.G > 20)
				{
					int num = color.R;
					if (color.G > num)
					{
						num = color.G;
					}
					if (color.B > num)
					{
						num = color.B;
					}
					num /= 30;
					if (Main.rand.Next(300) < num)
					{
						int num2 = Dust.NewDust(base.position, base.width, height, 43, 0f, 0f, 254, new Color(255, 255, 0), 0.5f);
						Main.dust[num2].velocity *= 0f;
					}
				}
			}
			if ((type >= 254 && type <= 261) || type == 160)
			{
				float num3 = (float)Main.rand.Next(28, 42) * 0.005f;
				num3 += (float)(270 - Main.mouseTextColor) / 500f;
				float num4 = 0.1f;
				float num5 = 0.3f + num3 / 2f;
				float num6 = 0.6f + num3;
				float num7 = 0.35f;
				num4 *= num7;
				num5 *= num7;
				num6 *= num7;
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, num4, num5, num6);
			}
			if (type == 209)
			{
				float num8 = (float)Main.rand.Next(28, 42) * 0.005f;
				num8 += (float)(270 - Main.mouseTextColor) / 500f;
				float num9 = 0.1f;
				float num10 = 0.3f + num8 / 2f;
				float num11 = 0.4f + num8 / 2f;
				float num12 = 0.35f;
				num9 *= num12;
				num10 *= num12;
				num11 *= num12;
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, num9, num10, num11);
				if (ai[0] == 12f)
				{
					Lighting.AddLight(base.Top, 0.3f, 0.1f, 0.1f);
				}
			}
			if (type == 44)
			{
				Lighting.AddLight((int)(base.position.X + (float)(base.width / 2)) / 16, (int)(base.position.Y + 4f) / 16, 0.9f, 0.75f, 0.5f);
			}
			if (teleportTime > 0f)
			{
				if (teleportStyle == 0)
				{
					if ((float)Main.rand.Next(100) <= 100f * teleportTime * 2f)
					{
						int num13 = Dust.NewDust(new Vector2(getRect().X, getRect().Y), getRect().Width, getRect().Height, 159);
						Main.dust[num13].scale = teleportTime * 1.5f;
						Main.dust[num13].noGravity = true;
						Main.dust[num13].velocity *= 1.1f;
					}
				}
				else if (teleportStyle == 4)
				{
					teleportTime -= 0.02f;
					if ((float)Main.rand.Next(100) <= 100f * teleportTime)
					{
						Dust dust = Main.dust[Dust.NewDust(base.position, base.width, height, 263)];
						dust.color = PortalHelper.GetPortalColor(lastPortalColorIndex);
						dust.noLight = true;
						dust.noGravity = true;
						dust.scale = 1.2f;
						dust.fadeIn = 0.4f;
					}
				}
				teleportTime -= 0.005f;
			}
			if (Main.netMode != 2)
			{
				if (type >= 362 && type <= 365)
				{
					if (Main.dayTime && Main.rand.Next(200) == 0)
					{
						Main.PlaySound(30, (int)base.position.X, (int)base.position.Y);
					}
				}
				else if (type == 361 || type == 445)
				{
					if ((double)Math.Abs(base.velocity.X) < 0.5 && (!Main.dayTime || (double)base.position.Y > Main.worldSurface * 16.0) && Main.rand.Next(200) == 0)
					{
						Main.PlaySound(31, (int)base.position.X, (int)base.position.Y);
					}
				}
				else if (type == 74 || type == 297 || type == 298 || type == 442)
				{
					if (Main.dayTime && Main.time < 18000.0 && Main.rand.Next(400) == 0)
					{
						if (type == 74)
						{
							if (Main.rand.Next(3) != 0)
							{
								Main.PlaySound(32, (int)base.position.X, (int)base.position.Y, 14);
							}
							else
							{
								Main.PlaySound(32, (int)base.position.X, (int)base.position.Y, 18);
							}
						}
						if (type == 297)
						{
							Main.PlaySound(32, (int)base.position.X, (int)base.position.Y, 16);
						}
						if (type == 298)
						{
							if (Main.rand.Next(3) != 0)
							{
								Main.PlaySound(32, (int)base.position.X, (int)base.position.Y, 17);
							}
							else
							{
								Main.PlaySound(32, (int)base.position.X, (int)base.position.Y, 19);
							}
						}
						if (type == 442)
						{
							switch (Main.rand.Next(5))
							{
							case 0:
								Main.PlaySound(32, (int)base.position.X, (int)base.position.Y, 16);
								break;
							case 1:
								Main.PlaySound(32, (int)base.position.X, (int)base.position.Y, 17);
								break;
							case 2:
								Main.PlaySound(32, (int)base.position.X, (int)base.position.Y, 19);
								break;
							case 3:
								Main.PlaySound(32, (int)base.position.X, (int)base.position.Y, 14);
								break;
							default:
								Main.PlaySound(32, (int)base.position.X, (int)base.position.Y, 18);
								break;
							}
						}
					}
				}
				else if ((type == 300 || type == 447) && Main.rand.Next(1800) == 0)
				{
					Main.PlaySound(33, (int)base.position.X, (int)base.position.Y);
				}
			}
			if (Main.netMode == 1 && (townNPC || type == 453) && type != 37 && npcNameLookup == 0)
			{
				npcNameLookup = 1;
				int number = -1;
				for (int j = 0; j < 200; j++)
				{
					if (Main.npc[j] == this)
					{
						number = j;
						break;
					}
				}
				NetMessage.SendData(56, -1, -1, "", number);
			}
			if (Main.netMode == 1)
			{
				bool flag = false;
				int num14 = (int)(base.position.X + (float)(base.width / 2)) / 16;
				int num15 = (int)(base.position.Y + (float)(height / 2)) / 16;
				try
				{
					if (num14 >= 4 && num14 <= Main.maxTilesX - 4 && num15 >= 4 && num15 <= Main.maxTilesY - 4)
					{
						if (Main.tile[num14, num15] == null)
						{
							flag = true;
						}
						else if (Main.tile[num14 - 3, num15] == null)
						{
							flag = true;
						}
						else if (Main.tile[num14 + 3, num15] == null)
						{
							flag = true;
						}
						else if (Main.tile[num14, num15 - 3] == null)
						{
							flag = true;
						}
						else if (Main.tile[num14, num15 + 3] == null)
						{
							flag = true;
						}
					}
				}
				catch
				{
					flag = true;
				}
				if (flag)
				{
					return;
				}
			}
			lifeRegen = 0;
			soulDrain = false;
			poisoned = false;
			venom = false;
			shadowFlame = false;
			onFire = false;
			midas = false;
			ichor = false;
			onFrostBurn = false;
			onFire2 = false;
			confused = false;
			loveStruck = false;
			dryadWard = false;
			stinky = false;
			dripping = false;
			drippingSlime = false;
			daybreak = false;
			javelined = false;
			celled = false;
			dryadBane = false;
			for (int k = 0; k < 5; k++)
			{
				if (buffType[k] > 0 && buffTime[k] > 0)
				{
					buffTime[k]--;
					if (buffType[k] == 20)
					{
						poisoned = true;
					}
					if (buffType[k] == 70)
					{
						venom = true;
					}
					if (buffType[k] == 24)
					{
						onFire = true;
					}
					if (buffType[k] == 72)
					{
						midas = true;
					}
					if (buffType[k] == 69)
					{
						ichor = true;
					}
					if (buffType[k] == 31)
					{
						confused = true;
					}
					if (buffType[k] == 39)
					{
						onFire2 = true;
					}
					if (buffType[k] == 44)
					{
						onFrostBurn = true;
					}
					if (buffType[k] == 103)
					{
						dripping = true;
					}
					if (buffType[k] == 137)
					{
						drippingSlime = true;
					}
					if (buffType[k] == 119)
					{
						loveStruck = true;
					}
					if (buffType[k] == 120)
					{
						stinky = true;
					}
					if (buffType[k] == 151)
					{
						soulDrain = true;
					}
					if (buffType[k] == 153)
					{
						shadowFlame = true;
					}
					if (buffType[k] == 165)
					{
						dryadWard = true;
					}
					if (buffType[k] == 169)
					{
						javelined = true;
					}
					if (buffType[k] == 183)
					{
						celled = true;
					}
					if (buffType[k] == 186)
					{
						dryadBane = true;
					}
					if (buffType[k] == 189)
					{
						daybreak = true;
					}
				}
			}
			if (soulDrain)
			{
				int num16 = 1100;
				for (int l = 0; l < 16; l++)
				{
					if (Main.player[l].active && !Main.player[l].dead && (base.Center - Main.player[l].position).Length() < (float)num16 && Main.player[l].inventory[Main.player[l].selectedItem].type == 3006 && Main.player[l].itemAnimation > 0)
					{
						if (l == Main.myPlayer)
						{
							Main.player[l].soulDrain++;
						}
						if (Main.rand.Next(3) != 0)
						{
							Vector2 center = base.Center;
							center.X += (float)Main.rand.Next(-100, 100) * 0.05f;
							center.Y += (float)Main.rand.Next(-100, 100) * 0.05f;
							center += base.velocity;
							int num17 = Dust.NewDust(center, 1, 1, 235);
							Main.dust[num17].velocity *= 0f;
							Main.dust[num17].scale = (float)Main.rand.Next(70, 85) * 0.01f;
							Main.dust[num17].fadeIn = l + 1;
						}
					}
				}
			}
			if (Main.netMode != 1)
			{
				for (int m = 0; m < 5; m++)
				{
					if (buffType[m] > 0 && buffTime[m] <= 0)
					{
						DelBuff(m);
						if (Main.netMode == 2)
						{
							NetMessage.SendData(54, -1, -1, "", base.whoAmI);
						}
					}
				}
			}
			if (!dontTakeDamage)
			{
				int num18 = -1;
				if (poisoned)
				{
					if (lifeRegen > 0)
					{
						lifeRegen = 0;
					}
					lifeRegen -= 4;
				}
				if (onFire)
				{
					if (lifeRegen > 0)
					{
						lifeRegen = 0;
					}
					lifeRegen -= 8;
				}
				if (onFrostBurn)
				{
					if (lifeRegen > 0)
					{
						lifeRegen = 0;
					}
					lifeRegen -= 16;
					if (num18 < 2)
					{
						num18 = 2;
					}
				}
				if (onFire2)
				{
					if (lifeRegen > 0)
					{
						lifeRegen = 0;
					}
					lifeRegen -= 12;
				}
				if (venom)
				{
					if (lifeRegen > 0)
					{
						lifeRegen = 0;
					}
					lifeRegen -= 12;
					if (num18 < 2)
					{
						num18 = 2;
					}
				}
				if (shadowFlame)
				{
					if (lifeRegen > 0)
					{
						lifeRegen = 0;
					}
					lifeRegen -= 30;
					if (num18 < 5)
					{
						num18 = 5;
					}
				}
				if (javelined)
				{
					if (lifeRegen > 0)
					{
						lifeRegen = 0;
					}
					int num19 = 0;
					int num20 = 1;
					for (int n = 0; n < 1000; n++)
					{
						if (Main.projectile[n].active && Main.projectile[n].type == 598 && Main.projectile[n].ai[0] == 1f && Main.projectile[n].ai[1] == (float)base.whoAmI)
						{
							num19++;
						}
					}
					lifeRegen -= num19 * 2 * 3;
					if (num18 < num19 * 3 / num20)
					{
						num18 = num19 * 3 / num20;
					}
				}
				if (daybreak)
				{
					if (lifeRegen > 0)
					{
						lifeRegen = 0;
					}
					int num21 = 0;
					int num22 = 4;
					for (int num23 = 0; num23 < 1000; num23++)
					{
						if (Main.projectile[num23].active && Main.projectile[num23].type == 636 && Main.projectile[num23].ai[0] == 1f && Main.projectile[num23].ai[1] == (float)base.whoAmI)
						{
							num21++;
						}
					}
					if (num21 == 0)
					{
						num21 = 1;
					}
					lifeRegen -= num21 * 2 * 100;
					if (num18 < num21 * 100 / num22)
					{
						num18 = num21 * 100 / num22;
					}
				}
				if (celled)
				{
					if (lifeRegen > 0)
					{
						lifeRegen = 0;
					}
					int num24 = 0;
					for (int num25 = 0; num25 < 1000; num25++)
					{
						if (Main.projectile[num25].active && Main.projectile[num25].type == 614 && Main.projectile[num25].ai[0] == 1f && Main.projectile[num25].ai[1] == (float)base.whoAmI)
						{
							num24++;
						}
					}
					lifeRegen -= num24 * 2 * 20;
					if (num18 < num24 * 20)
					{
						num18 = num24 * 20 / 2;
					}
				}
				if (dryadBane)
				{
					int num26 = 4;
					float num27 = 1f;
					if (lifeRegen > 0)
					{
						lifeRegen = 0;
					}
					if (downedBoss1)
					{
						num27 += 0.1f;
					}
					if (downedBoss2)
					{
						num27 += 0.1f;
					}
					if (downedBoss3)
					{
						num27 += 0.1f;
					}
					if (downedQueenBee)
					{
						num27 += 0.1f;
					}
					if (Main.hardMode)
					{
						num27 += 0.4f;
					}
					if (downedMechBoss1)
					{
						num27 += 0.15f;
					}
					if (downedMechBoss2)
					{
						num27 += 0.15f;
					}
					if (downedMechBoss3)
					{
						num27 += 0.15f;
					}
					if (downedPlantBoss)
					{
						num27 += 0.15f;
					}
					if (downedGolemBoss)
					{
						num27 += 0.15f;
					}
					if (downedAncientCultist)
					{
						num27 += 0.15f;
					}
					if (Main.expertMode)
					{
						num27 *= Main.expertNPCDamage;
					}
					num26 = (int)((float)num26 * num27);
					lifeRegen -= 2 * num26;
					if (num18 < num26)
					{
						num18 = num26 / 3;
					}
				}
				if (soulDrain && realLife == -1)
				{
					if (lifeRegen > 0)
					{
						lifeRegen = 0;
					}
					lifeRegen -= 50;
					if (num18 < 5)
					{
						num18 = 5;
					}
				}
				if (lifeRegen <= -240 && num18 < 2)
				{
					num18 = 2;
				}
				lifeRegenCount += lifeRegen;
				while (lifeRegenCount >= 120)
				{
					lifeRegenCount -= 120;
					if (!immortal)
					{
						if (life < lifeMax)
						{
							life++;
						}
						if (life > lifeMax)
						{
							life = lifeMax;
						}
					}
				}
				if (num18 > 0)
				{
					while (lifeRegenCount <= -120 * num18)
					{
						lifeRegenCount += 120 * num18;
						int whoAmI = base.whoAmI;
						if (realLife >= 0)
						{
							whoAmI = realLife;
						}
						if (!Main.npc[whoAmI].immortal)
						{
							Main.npc[whoAmI].life -= num18;
						}
						CombatText.NewText(new Rectangle((int)base.position.X, (int)base.position.Y, base.width, height), CombatText.LifeRegenNegative, string.Concat(num18), false, true);
						if (Main.npc[whoAmI].life > 0 || Main.npc[whoAmI].immortal)
						{
							continue;
						}
						Main.npc[whoAmI].life = 1;
						if (Main.netMode != 1)
						{
							Main.npc[whoAmI].StrikeNPCNoInteraction(9999, 0f, 0);
							if (Main.netMode == 2)
							{
								NetMessage.SendData(28, -1, -1, "", whoAmI, 9999f);
							}
						}
					}
				}
				else
				{
					while (lifeRegenCount <= -120)
					{
						lifeRegenCount += 120;
						int whoAmI2 = base.whoAmI;
						if (realLife >= 0)
						{
							whoAmI2 = realLife;
						}
						if (!Main.npc[whoAmI2].immortal)
						{
							Main.npc[whoAmI2].life--;
						}
						CombatText.NewText(new Rectangle((int)base.position.X, (int)base.position.Y, base.width, height), CombatText.LifeRegenNegative, string.Concat(1), false, true);
						if (Main.npc[whoAmI2].life > 0 || Main.npc[whoAmI2].immortal)
						{
							continue;
						}
						Main.npc[whoAmI2].life = 1;
						if (Main.netMode != 1)
						{
							Main.npc[whoAmI2].StrikeNPCNoInteraction(9999, 0f, 0);
							if (Main.netMode == 2)
							{
								NetMessage.SendData(28, -1, -1, "", whoAmI2, 9999f);
							}
						}
					}
				}
			}
			if (Main.netMode != 1 && Main.bloodMoon)
			{
				bool flag2 = false;
				if (value == 0f)
				{
					flag2 = true;
				}
				if (type == 46 || type == 303 || type == 337 || type == 443)
				{
					if (WorldGen.crimson)
					{
						Transform(464);
					}
					else
					{
						Transform(47);
					}
				}
				else if (type == 55 || type == 230)
				{
					if (WorldGen.crimson)
					{
						Transform(465);
					}
					else
					{
						Transform(57);
					}
				}
				else if (type == 148 || type == 149)
				{
					if (WorldGen.crimson)
					{
						Transform(470);
					}
					else
					{
						Transform(168);
					}
				}
				if (flag2)
				{
					value = 0f;
				}
			}
			float num28 = 10f;
			gravity = 0.3f;
			if (type == 258)
			{
				gravity = 0.1f;
				if (base.velocity.Y > 3f)
				{
					base.velocity.Y = 3f;
				}
			}
			else if (type == 425 && ai[2] == 1f)
			{
				gravity = 0.1f;
				if (base.velocity.Y > 2f)
				{
					base.velocity.Y = 2f;
				}
			}
			else if (type == 427 && ai[2] == 1f)
			{
				gravity = 0.1f;
				if (base.velocity.Y > 4f)
				{
					base.velocity.Y = 4f;
				}
			}
			else if (type == 426)
			{
				gravity = 0.1f;
				if (base.velocity.Y > 3f)
				{
					base.velocity.Y = 3f;
				}
			}
			float num29 = Main.maxTilesX / 4200;
			if (Main.maxTilesX == 1750)
			{
				num29 = (float)Main.maxTilesX / 4200f;
			}
			num29 *= num29;
			float num30 = (float)((double)(base.position.Y / 16f - (60f + 10f * num29)) / (Main.worldSurface / 6.0));
			if ((double)num30 < 0.25)
			{
				num30 = 0.25f;
			}
			if (num30 > 1f)
			{
				num30 = 1f;
			}
			gravity *= num30;
			if (wet)
			{
				if (honeyWet)
				{
					gravity = 0.1f;
					num28 = 4f;
				}
				else
				{
					gravity = 0.2f;
					num28 = 7f;
				}
			}
			if (soundDelay > 0)
			{
				soundDelay--;
			}
			if (life <= 0)
			{
				active = false;
			}
			oldTarget = target;
			oldDirection = base.direction;
			oldDirectionY = directionY;
			float num31 = 1f + Math.Abs(base.velocity.X) / 3f;
			if (gfxOffY > 0f)
			{
				gfxOffY -= num31 * stepSpeed;
				if (gfxOffY < 0f)
				{
					gfxOffY = 0f;
				}
			}
			else if (gfxOffY < 0f)
			{
				gfxOffY += num31 * stepSpeed;
				if (gfxOffY > 0f)
				{
					gfxOffY = 0f;
				}
			}
			if (gfxOffY > 16f)
			{
				gfxOffY = 16f;
			}
			if (gfxOffY < -16f)
			{
				gfxOffY = -16f;
			}
			TryPortalJumping();
			IdleSounds();
			AI();
			if (Main.netMode != 2 && extraValue > 0f)
			{
				int num32 = 244;
				float num33 = 30f;
				if (extraValue >= 1000000f)
				{
					num32 = 247;
					num33 *= 0.25f;
				}
				else if (extraValue >= 10000f)
				{
					num32 = 246;
					num33 *= 0.5f;
				}
				else if (extraValue >= 100f)
				{
					num32 = 245;
					num33 *= 0.75f;
				}
				if (Main.rand.Next((int)num33) == 0)
				{
					int num34 = Dust.NewDust(base.position, base.width, height, num32, 0f, 0f, 254, default(Color), 0.25f);
					Main.dust[num34].velocity *= 0.1f;
				}
			}
			for (int num35 = 0; num35 < 17; num35++)
			{
				if (immune[num35] > 0)
				{
					immune[num35]--;
				}
			}
			if (!noGravity && !noTileCollide)
			{
				int num36 = (int)(base.position.X + (float)(base.width / 2)) / 16;
				int num37 = (int)(base.position.Y + (float)(height / 2)) / 16;
				if (WorldGen.InWorld(num36, num37) && Main.tile[num36, num37] == null)
				{
					gravity = 0f;
					base.velocity.X = 0f;
					base.velocity.Y = 0f;
				}
			}
			if (!noGravity)
			{
				base.velocity.Y += gravity;
				if (base.velocity.Y > num28)
				{
					base.velocity.Y = num28;
				}
			}
			if ((double)base.velocity.X < 0.005 && (double)base.velocity.X > -0.005)
			{
				base.velocity.X = 0f;
			}
			if ((Main.netMode != 1 && type != 37 && (friendly || type == 46 || type == 55 || type == 74 || type == 148 || type == 149 || type == 230 || type == 297 || type == 298 || type == 299 || type == 303 || type == 355 || type == 356 || type == 358 || type == 359 || type == 360 || type == 361 || type == 362 || type == 363 || type == 364 || type == 365 || type == 366 || type == 367 || type == 377 || type == 357 || type == 374 || (type >= 442 && type <= 448 && type != 447))) || type == 538 || type == 539 || type == 337 || (type >= 484 && type <= 487))
			{
				if (townNPC)
				{
					CheckDrowning();
				}
				if (life < lifeMax)
				{
					friendlyRegen++;
					if (dryadWard)
					{
						friendlyRegen += 10;
					}
					if (friendlyRegen > 180)
					{
						friendlyRegen = 0;
						life++;
						netUpdate = true;
					}
				}
				if (immune[16] == 0)
				{
					Rectangle rectangle = new Rectangle((int)base.position.X, (int)base.position.Y, base.width, height);
					for (int num38 = 0; num38 < 200; num38++)
					{
						if (!Main.npc[num38].active || Main.npc[num38].friendly || Main.npc[num38].damage <= 0)
						{
							continue;
						}
						Rectangle rectangle2 = new Rectangle((int)Main.npc[num38].position.X, (int)Main.npc[num38].position.Y, Main.npc[num38].width, Main.npc[num38].height);
						if (!rectangle.Intersects(rectangle2) || (type == 453 && NPCID.Sets.Skeletons.Contains(Main.npc[num38].netID)))
						{
							continue;
						}
						double num39 = 0.0;
						int num40 = Main.npc[num38].damage;
						int num41 = 6;
						int num42 = 1;
						if (Main.npc[num38].position.X + (float)(Main.npc[num38].width / 2) > base.position.X + (float)(base.width / 2))
						{
							num42 = -1;
						}
						num39 = Main.npc[i].StrikeNPCNoInteraction(num40, num41, num42);
						if (Main.netMode != 0)
						{
							NetMessage.SendData(28, -1, -1, "", i, num40, num41, num42);
						}
						netUpdate = true;
						immune[16] = 30;
						if (dryadWard)
						{
							num40 = (int)num39 / 3;
							num41 = 6;
							num42 *= -1;
							Main.npc[num38].StrikeNPCNoInteraction(num40, num41, num42);
							if (Main.netMode != 0)
							{
								NetMessage.SendData(28, -1, -1, "", num38, num40, num41, num42);
							}
							Main.npc[num38].netUpdate = true;
							Main.npc[num38].immune[16] = 30;
						}
					}
				}
			}
			if (!noTileCollide)
			{
				float y = base.velocity.Y;
				Vector4 vector = Collision.WalkDownSlope(base.position, base.velocity, base.width, height, gravity);
				base.position.X = vector.X;
				base.position.Y = vector.Y;
				base.velocity.X = vector.Z;
				base.velocity.Y = vector.W;
				bool flag3 = Collision.LavaCollision(base.position, base.width, height);
				if (flag3)
				{
					lavaWet = true;
					if (!lavaImmune && !dontTakeDamage && Main.netMode != 1 && immune[16] == 0)
					{
						AddBuff(24, 420);
						immune[16] = 30;
						StrikeNPCNoInteraction(50, 0f, 0);
						if (Main.netMode == 2 && Main.netMode != 0)
						{
							NetMessage.SendData(28, -1, -1, "", base.whoAmI, 50f);
						}
					}
				}
				bool flag4 = false;
				if (type == 72 || aiStyle == 21 || aiStyle == 67 || type == 376)
				{
					flag4 = false;
					wetCount = 0;
					flag3 = false;
				}
				else
				{
					flag4 = Collision.WetCollision(base.position, base.width, height);
					if (Collision.honey)
					{
						honeyWet = true;
					}
				}
				if (flag4)
				{
					if (onFire && !lavaWet && Main.netMode != 1)
					{
						for (int num43 = 0; num43 < 5; num43++)
						{
							if (buffType[num43] == 24)
							{
								DelBuff(num43);
							}
						}
					}
					if (!wet && wetCount == 0)
					{
						wetCount = 10;
						if (!flag3)
						{
							if (honeyWet)
							{
								for (int num44 = 0; num44 < 10; num44++)
								{
									int num45 = Dust.NewDust(new Vector2(base.position.X - 6f, base.position.Y + (float)(height / 2) - 8f), base.width + 12, 24, 152);
									Main.dust[num45].velocity.Y -= 1f;
									Main.dust[num45].velocity.X *= 2.5f;
									Main.dust[num45].scale = 1.3f;
									Main.dust[num45].alpha = 100;
									Main.dust[num45].noGravity = true;
								}
								if (aiStyle != 1 && type != 1 && type != 16 && type != 147 && type != 59 && type != 300 && aiStyle != 39 && !noGravity)
								{
									Main.PlaySound(19, (int)base.position.X, (int)base.position.Y);
								}
							}
							else
							{
								for (int num46 = 0; num46 < 30; num46++)
								{
									int num47 = Dust.NewDust(new Vector2(base.position.X - 6f, base.position.Y + (float)(height / 2) - 8f), base.width + 12, 24, Dust.dustWater());
									Main.dust[num47].velocity.Y -= 4f;
									Main.dust[num47].velocity.X *= 2.5f;
									Main.dust[num47].scale *= 0.8f;
									Main.dust[num47].alpha = 100;
									Main.dust[num47].noGravity = true;
								}
								if (type != 376 && aiStyle != 1 && type != 1 && type != 16 && type != 147 && type != 59 && type != 300 && aiStyle != 39 && aiStyle != 68 && type != 362 && type != 364 && type != 361 && type != 445 && !noGravity)
								{
									Main.PlaySound(19, (int)base.position.X, (int)base.position.Y, 0);
								}
							}
						}
						else
						{
							for (int num48 = 0; num48 < 10; num48++)
							{
								int num49 = Dust.NewDust(new Vector2(base.position.X - 6f, base.position.Y + (float)(height / 2) - 8f), base.width + 12, 24, 35);
								Main.dust[num49].velocity.Y -= 1.5f;
								Main.dust[num49].velocity.X *= 2.5f;
								Main.dust[num49].scale = 1.3f;
								Main.dust[num49].alpha = 100;
								Main.dust[num49].noGravity = true;
							}
							if (aiStyle != 1 && type != 1 && type != 16 && type != 147 && type != 59 && type != 300 && aiStyle != 39 && !noGravity)
							{
								Main.PlaySound(19, (int)base.position.X, (int)base.position.Y);
							}
						}
					}
					wet = true;
				}
				else if (wet)
				{
					base.velocity.X *= 0.5f;
					wet = false;
					if (wetCount == 0)
					{
						wetCount = 10;
						if (!lavaWet)
						{
							if (honeyWet)
							{
								for (int num50 = 0; num50 < 10; num50++)
								{
									int num51 = Dust.NewDust(new Vector2(base.position.X - 6f, base.position.Y + (float)(height / 2) - 8f), base.width + 12, 24, 152);
									Main.dust[num51].velocity.Y -= 1f;
									Main.dust[num51].velocity.X *= 2.5f;
									Main.dust[num51].scale = 1.3f;
									Main.dust[num51].alpha = 100;
									Main.dust[num51].noGravity = true;
								}
								if (aiStyle != 1 && type != 1 && type != 16 && type != 147 && type != 300 && type != 59 && aiStyle != 39 && !noGravity)
								{
									Main.PlaySound(19, (int)base.position.X, (int)base.position.Y);
								}
							}
							else
							{
								for (int num52 = 0; num52 < 30; num52++)
								{
									int num53 = Dust.NewDust(new Vector2(base.position.X - 6f, base.position.Y + (float)(height / 2) - 8f), base.width + 12, 24, Dust.dustWater());
									Main.dust[num53].velocity.Y -= 4f;
									Main.dust[num53].velocity.X *= 2.5f;
									Main.dust[num53].scale *= 0.8f;
									Main.dust[num53].alpha = 100;
									Main.dust[num53].noGravity = true;
								}
								if (type != 376 && aiStyle != 1 && type != 1 && type != 16 && type != 59 && type != 300 && aiStyle != 39 && aiStyle != 68 && type != 362 && type != 364 && type != 361 && type != 445 && !noGravity)
								{
									Main.PlaySound(19, (int)base.position.X, (int)base.position.Y, 0);
								}
							}
						}
						else
						{
							for (int num54 = 0; num54 < 10; num54++)
							{
								int num55 = Dust.NewDust(new Vector2(base.position.X - 6f, base.position.Y + (float)(height / 2) - 8f), base.width + 12, 24, 35);
								Main.dust[num55].velocity.Y -= 1.5f;
								Main.dust[num55].velocity.X *= 2.5f;
								Main.dust[num55].scale = 1.3f;
								Main.dust[num55].alpha = 100;
								Main.dust[num55].noGravity = true;
							}
							if (aiStyle != 1 && type != 1 && type != 16 && type != 59 && type != 300 && aiStyle != 39 && !noGravity)
							{
								Main.PlaySound(19, (int)base.position.X, (int)base.position.Y);
							}
						}
					}
				}
				if (!wet)
				{
					lavaWet = false;
					honeyWet = false;
				}
				if (wetCount > 0)
				{
					wetCount--;
				}
				bool flag5 = false;
				if (type == 2 || type == -43 || type == 317 || type == 318 || type == 133)
				{
					flag5 = true;
				}
				if (aiStyle == 10)
				{
					flag5 = true;
				}
				if (aiStyle == 40)
				{
					flag5 = true;
				}
				if (type == 467)
				{
					flag5 = true;
				}
				if (type == 477)
				{
					flag5 = true;
				}
				if (aiStyle == 14)
				{
					flag5 = true;
				}
				if (type == 173)
				{
					flag5 = true;
				}
				if (type == 469 && ai[2] == 1f)
				{
					flag5 = true;
				}
				if (aiStyle == 3 && directionY == 1)
				{
					flag5 = true;
				}
				if (type == 210 || type == 211)
				{
					flag5 = true;
				}
				if (type == 50 && target >= 0 && Main.player[target].position.Y > base.position.Y + (float)height)
				{
					flag5 = true;
				}
				if (type == 247 || type == 248)
				{
					flag5 = true;
				}
				if (type == 245 && target >= 0 && Main.player[target].position.Y > base.position.Y + (float)height)
				{
					flag5 = true;
				}
				if (type == 418)
				{
					flag5 = true;
				}
				if (aiStyle == 87 && Main.player[target].position.Y > base.position.Y + (float)height)
				{
					flag5 = true;
				}
				oldVelocity = base.velocity;
				collideX = false;
				collideY = false;
				int num56 = 16;
				if (aiStyle == 7)
				{
					bool flag6 = false;
					if (!Main.dayTime || Main.invasionType > 0 || Main.eclipse)
					{
						flag6 = true;
					}
					else
					{
						int num57 = (int)(base.position.Y + (float)height) / 16;
						if (homeTileY - num57 > num56)
						{
							flag5 = true;
						}
					}
					if (flag6 && (base.position.Y + (float)height - 8f) / 16f < (float)(homeTileY - 1))
					{
						flag5 = true;
					}
				}
				if (Main.netMode != 1)
				{
					if (type == 230 && wet)
					{
						int direction = base.direction;
						Vector2 velocity = base.velocity;
						Transform(55);
						base.direction = direction;
						base.velocity = velocity;
						wet = true;
						if (base.velocity.Y < 0f)
						{
							base.velocity.Y = 0f;
						}
					}
					else if (type == 55 && !wet && Main.raining)
					{
						int direction2 = base.direction;
						Vector2 velocity2 = base.velocity;
						Transform(230);
						base.direction = direction2;
						base.velocity = velocity2;
						homeTileX = (int)(base.position.X / 16f) + 10 * base.direction;
					}
				}
				Vector2 position = base.position;
				int width = base.width;
				int num58 = height;
				if (type == 243)
				{
					num58 = 90;
				}
				if (type == 290)
				{
					num58 = 40;
				}
				if (type == 351)
				{
					num58 = 40;
				}
				if (type == 482)
				{
					num58 = 40;
				}
				if (type == 351 || type == 343 || type == 348 || type == 349)
				{
					num58 = 40;
				}
				if (type == 391)
				{
					for (int num59 = 0; num59 < 200; num59++)
					{
						if (Main.npc[num59].active && Main.npc[num59].type == 390 && Main.npc[num59].ai[0] == (float)base.whoAmI)
						{
							num58 = 62;
							break;
						}
					}
				}
				if (type == 415)
				{
					for (int num60 = 0; num60 < 200; num60++)
					{
						if (Main.npc[num60].active && Main.npc[num60].type == 416 && Main.npc[num60].ai[0] == (float)base.whoAmI)
						{
							num58 = 62;
							break;
						}
					}
				}
				if (num58 != height)
				{
					position.Y += height - num58;
				}
				if (wet)
				{
					if (honeyWet)
					{
						Vector2 velocity3 = base.velocity;
						base.velocity = Collision.TileCollision(position, base.velocity, width, num58, flag5, flag5);
						if (Collision.up)
						{
							base.velocity.Y = 0.01f;
						}
						Vector2 vector2 = base.velocity * 0.25f;
						if (base.velocity.X != velocity3.X)
						{
							vector2.X = base.velocity.X;
							collideX = true;
						}
						if (base.velocity.Y != velocity3.Y)
						{
							vector2.Y = base.velocity.Y;
							collideY = true;
						}
						oldPosition = base.position;
						oldDirection = base.direction;
						base.position += vector2;
					}
					else
					{
						Vector2 velocity4 = base.velocity;
						base.velocity = Collision.TileCollision(position, base.velocity, width, num58, flag5, flag5);
						if (Collision.up)
						{
							base.velocity.Y = 0.01f;
						}
						Vector2 vector3 = base.velocity * 0.5f;
						if (base.velocity.X != velocity4.X)
						{
							vector3.X = base.velocity.X;
							collideX = true;
						}
						if (base.velocity.Y != velocity4.Y)
						{
							vector3.Y = base.velocity.Y;
							collideY = true;
						}
						oldPosition = base.position;
						oldDirection = base.direction;
						base.position += vector3;
					}
				}
				else
				{
					if (type == 72)
					{
						Vector2 position2 = new Vector2(base.position.X + (float)(base.width / 2), base.position.Y + (float)(height / 2));
						int num61 = 12;
						int num62 = 12;
						position2.X -= num61 / 2;
						position2.Y -= num62 / 2;
						base.velocity = Collision.noSlopeCollision(position2, base.velocity, num61, num62, true, true);
					}
					else if (type == 405 || type == 406)
					{
						base.velocity = Collision.TileCollision(position, base.velocity, width, num58, flag5, flag5);
						if (base.velocity != oldVelocity)
						{
							if (base.velocity.X != 0f && base.velocity.X != oldVelocity.X)
							{
								base.velocity.X = (0f - oldVelocity.X) * 0.8f;
							}
							if (base.velocity.Y != 0f && base.velocity.Y != oldVelocity.Y)
							{
								base.velocity.Y = (0f - oldVelocity.Y) * 0.8f;
							}
						}
					}
					else if (type == 417)
					{
						base.velocity = Collision.TileCollision(position, base.velocity, width, num58, flag5, flag5);
						if (ai[0] == 6f && base.velocity != oldVelocity)
						{
							ai[2] -= 1f;
							ai[3] = 1f;
							if (ai[2] > 0f)
							{
								if (base.velocity.X != 0f && base.velocity.X != oldVelocity.X)
								{
									base.velocity.X = (0f - oldVelocity.X) * 0.9f;
									base.direction *= -1;
								}
								if (base.velocity.Y != 0f && base.velocity.Y != oldVelocity.Y)
								{
									base.velocity.Y = (0f - oldVelocity.Y) * 0.9f;
								}
							}
						}
					}
					else
					{
						base.velocity = Collision.TileCollision(position, base.velocity, width, num58, flag5, flag5);
					}
					if (Collision.up)
					{
						base.velocity.Y = 0.01f;
					}
					if (oldVelocity.X != base.velocity.X)
					{
						collideX = true;
					}
					if (oldVelocity.Y != base.velocity.Y)
					{
						collideY = true;
					}
					oldPosition = base.position;
					oldDirection = base.direction;
					base.position += base.velocity;
				}
				if (aiStyle == 67)
				{
					Vector4 vector4 = Collision.SlopeCollision(base.position, base.velocity, base.width, height, gravity);
					if (base.position.X != vector4.X || base.position.Y != vector4.Y)
					{
						if (ai[2] == 0f && base.velocity.Y > 0f && ((base.direction < 0 && rotation == 1.57f && spriteDirection == 1) || (base.direction > 0 && rotation == 4.71f && spriteDirection == -1)))
						{
							base.direction *= -base.direction;
						}
						ai[2] = 2f;
						directionY = 1;
						rotation = 0f;
					}
					base.position.X = vector4.X;
					base.position.Y = vector4.Y;
					base.velocity.X = vector4.Z;
					base.velocity.Y = vector4.W;
				}
				else if (type != 72 && type != 247 && type != 248)
				{
					if (flag5)
					{
						stairFall = true;
					}
					if (aiStyle == 7)
					{
						int num63 = (int)base.Center.X / 16;
						int num64 = (int)base.position.Y / 16;
						if (WorldGen.InWorld(num63, num64))
						{
							bool flag7 = false;
							if (Main.tile[num63, num64] != null && Main.tile[num63, num64].active() && Main.tileSolid[Main.tile[num63, num64].type])
							{
								flag7 = true;
							}
							if (!Main.dayTime || Main.eclipse)
							{
								flag7 = true;
							}
							else
							{
								int num65 = (int)(base.position.Y + (float)height) / 16;
								if (homeTileY - num65 > num56)
								{
									flag7 = true;
								}
							}
							if (flag7)
							{
								if ((base.position.Y + (float)height - 8f) / 16f < (float)homeTileY)
								{
									stairFall = true;
								}
								else
								{
									stairFall = false;
								}
							}
						}
					}
					Vector4 vector5 = Collision.SlopeCollision(base.position, base.velocity, base.width, height, gravity, stairFall);
					if (Collision.stairFall)
					{
						stairFall = true;
					}
					else if (!flag5)
					{
						stairFall = false;
					}
					if (Collision.stair && Math.Abs(vector5.Y - base.position.Y) > 8f)
					{
						gfxOffY -= vector5.Y - base.position.Y;
						stepSpeed = 2f;
					}
					base.position.X = vector5.X;
					base.position.Y = vector5.Y;
					base.velocity.X = vector5.Z;
					base.velocity.Y = vector5.W;
				}
			}
			else
			{
				oldPosition = base.position;
				oldDirection = base.direction;
				base.position += base.velocity;
			}
			if (Main.netMode != 1 && !noTileCollide && lifeMax > 1 && Collision.SwitchTiles(base.position, base.width, height, oldPosition, 2) && (type == 46 || type == 148 || type == 149 || type == 303 || type == 361 || type == 362 || type == 364 || type == 366 || type == 367 || (type >= 442 && type <= 448)))
			{
				ai[0] = 1f;
				ai[1] = 400f;
				ai[2] = 0f;
			}
			FindFrame();
			if (type == 439 || type == 440)
			{
				if (localAI[3] <= 0f)
				{
					localAI[3] = 2f;
					for (int num66 = oldPos.Length - 1; num66 > 0; num66--)
					{
						oldPos[num66] = oldPos[num66 - 1];
					}
					oldPos[0] = base.position;
				}
				localAI[3] -= 1f;
			}
			if (type == 370 || type == 372 || type == 373 || type == 396 || type == 400 || type == 401)
			{
				for (int num67 = oldPos.Length - 1; num67 > 0; num67--)
				{
					oldPos[num67] = oldPos[num67 - 1];
				}
				oldPos[0] = base.position;
			}
			if (aiStyle == 87)
			{
				if ((int)ai[0] == 4 || ai[0] == 5f || ai[0] == 6f)
				{
					for (int num68 = oldPos.Length - 1; num68 > 0; num68--)
					{
						oldPos[num68] = oldPos[num68 - 1];
						oldRot[num68] = oldRot[num68 - 1];
					}
					oldPos[0] = base.position;
					oldRot[0] = rotation;
				}
				else
				{
					for (int num69 = oldPos.Length - 1; num69 >= 0; num69--)
					{
						oldPos[num69] = base.position;
						oldRot[num69] = rotation;
					}
				}
			}
			if (type == 4 || type == 471 || type == 477 || type == 479)
			{
				for (int num70 = oldPos.Length - 1; num70 > 0; num70--)
				{
					oldPos[num70] = oldPos[num70 - 1];
					oldRot[num70] = oldRot[num70 - 1];
				}
				oldPos[0] = base.position;
				oldRot[0] = rotation;
			}
			if (type == 120 || type == 137 || type == 138)
			{
				for (int num71 = oldPos.Length - 1; num71 > 0; num71--)
				{
					oldPos[num71] = oldPos[num71 - 1];
					Lighting.AddLight((int)base.position.X / 16, (int)base.position.Y / 16, 0.3f, 0f, 0.2f);
				}
				oldPos[0] = base.position;
			}
			else if (type == 94)
			{
				for (int num72 = oldPos.Length - 1; num72 > 0; num72--)
				{
					oldPos[num72] = oldPos[num72 - 1];
				}
				oldPos[0] = base.position;
			}
			else if (type == 125 || type == 126 || type == 127 || type == 128 || type == 129 || type == 130 || type == 131 || type == 139 || type == 140 || type == 407 || type == 420 || type == 425 || type == 427 || type == 426 || type == 509 || type == 516)
			{
				for (int num73 = oldPos.Length - 1; num73 > 0; num73--)
				{
					oldPos[num73] = oldPos[num73 - 1];
				}
				oldPos[0] = base.position;
			}
			else if (type == 402 || type == 417 || type == 419 || type == 418 || type == 519 || type == 521 || type == 522)
			{
				for (int num74 = oldPos.Length - 1; num74 > 0; num74--)
				{
					oldPos[num74] = oldPos[num74 - 1];
					oldRot[num74] = oldRot[num74 - 1];
				}
				oldPos[0] = base.position;
				oldRot[0] = rotation;
			}
			if (!active)
			{
				netUpdate = true;
			}
			if (Main.netMode == 2)
			{
				if (Main.npcStreamSpeed > 0 && !townNPC && Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y) > 1f)
				{
					netStream++;
					if (netStream > Main.npcStreamSpeed)
					{
						for (int num75 = 0; num75 < 16; num75++)
						{
							if (Main.player[num75].active)
							{
								float num76 = Math.Abs(base.Center.X - Main.player[num75].Center.X) + Math.Abs(base.Center.Y - Main.player[num75].Center.Y);
								if (num76 < 250f)
								{
									streamPlayer[num75] -= 8;
								}
								else if (num76 < 500f)
								{
									streamPlayer[num75] -= 4;
								}
								else if (num76 < 1000f)
								{
									streamPlayer[num75] -= 2;
								}
								else if (num76 < 1500f)
								{
									streamPlayer[num75]--;
								}
								if (streamPlayer[num75] <= 0)
								{
									streamPlayer[num75] = 8;
									NetMessage.SendData(23, num75, -1, "", i);
								}
							}
						}
					}
				}
				if (townNPC)
				{
					netSpam = 0;
				}
				if (netUpdate2)
				{
					netUpdate = true;
				}
				if (!active)
				{
					netSpam = 0;
				}
				if (netUpdate)
				{
					if (boss)
					{
						Vector2 vector6 = oldPosition - base.position;
						if (netSpam <= 15)
						{
							netSpam += 5;
							NetMessage.SendData(23, -1, -1, "", i);
							netUpdate2 = false;
						}
						else
						{
							netUpdate2 = true;
						}
					}
					else if (netSpam <= 90)
					{
						netSpam += 30;
						NetMessage.SendData(23, -1, -1, "", i);
						netUpdate2 = false;
					}
					else
					{
						netUpdate2 = true;
					}
				}
				if (netSpam > 0)
				{
					netSpam--;
				}
				if (active && townNPC && TypeToNum(type) != -1)
				{
					if (homeless != oldHomeless || homeTileX != oldHomeTileX || homeTileY != oldHomeTileY)
					{
						int num77 = 0;
						if (homeless)
						{
							num77 = 1;
						}
						NetMessage.SendData(60, -1, -1, "", i, Main.npc[i].homeTileX, Main.npc[i].homeTileY, num77);
					}
					oldHomeless = homeless;
					oldHomeTileX = homeTileX;
					oldHomeTileY = homeTileY;
				}
			}
			CheckActive();
			netUpdate = false;
			justHit = false;
		}

		public static void setFireFlyChance()
		{
			if (Main.rand == null)
			{
				Main.rand = new Random((int)DateTime.Now.Ticks);
			}
			if (WorldGen.genRand.Next(9) == 0)
			{
				fireFlyChance = Main.rand.Next(5, 10);
				fireFlyFriendly = Main.rand.Next(1, 4);
				fireFlyMultiple = Main.rand.Next(3, 8);
			}
			else if (WorldGen.genRand.Next(3) == 0)
			{
				fireFlyChance = 999999;
				fireFlyFriendly = 999999;
				fireFlyMultiple = 999999;
			}
			else
			{
				fireFlyChance = Main.rand.Next(10, 60);
				fireFlyFriendly = Main.rand.Next(2, 15);
				fireFlyMultiple = Main.rand.Next(6, 30);
			}
			butterflyChance = Main.rand.Next(1, 25);
			if (WorldGen.genRand.Next(3) == 0)
			{
				butterflyChance = 999999;
			}
		}

		public Color GetAlpha(Color newColor)
		{
			float num = (float)(255 - alpha) / 255f;
			int num2 = (int)((float)(int)newColor.R * num);
			int num3 = (int)((float)(int)newColor.G * num);
			int num4 = (int)((float)(int)newColor.B * num);
			int num5 = newColor.A - alpha;
			if (type == 402)
			{
				return new Color(255, 255, 255, 255);
			}
			if (type == 484)
			{
				return new Color(250, 250, 250, 200);
			}
			if ((type >= 454 && type <= 459) || type == 521)
			{
				newColor = Color.Lerp(newColor, Color.White, 0.4f);
				newColor.A = 150;
				newColor *= (float)num5 / 255f;
				return newColor;
			}
			if (type == 440)
			{
				byte b = 180;
				if (Main.expertMode)
				{
					b = 210;
				}
				b = (byte)((float)(int)b * num);
				return new Color(b, b, b, b);
			}
			if (type == 516)
			{
				return new Color(alpha, alpha, alpha, alpha);
			}
			if (type == 522)
			{
				return new Color(255 - alpha, 255 - alpha, 255 - alpha, 255 - alpha);
			}
			if (type == 523)
			{
				return new Color(255 - alpha, 255 - alpha, 255 - alpha, 255 - alpha);
			}
			if (type == 395 || type == 519)
			{
				newColor = Color.Lerp(newColor, Color.White, 0.4f);
				return newColor;
			}
			if (type == 370 && ai[0] != -1f && ai[0] < 9f)
			{
				float num6 = MathHelper.Lerp(num, 1f, 0.25f);
				if (num6 > 1f)
				{
					num6 = 1f;
				}
				num4 = (int)((float)(int)newColor.B * num6);
			}
			if (type == 30)
			{
				return new Color(250, 250, 250, 100);
			}
			if (type == 25 || type == 30 || type == 59 || type == 60)
			{
				return new Color(200, 200, 200, 0);
			}
			if (type == 360)
			{
				num2 = newColor.R;
				num3 = newColor.G;
				num4 = newColor.B;
				if (num2 < 75)
				{
					num2 = 75;
				}
				if (num3 < 175)
				{
					num3 = 175;
				}
				if (num4 < 255)
				{
					num4 = 255;
				}
				return new Color(num2, num3, num4, 255);
			}
			if (type == 352)
			{
				return new Color(255, 255, 255, 200);
			}
			if (type == 72)
			{
				num2 = newColor.R;
				num3 = newColor.G;
				num4 = newColor.B;
			}
			else
			{
				if (type == 288)
				{
					return new Color(200, 200, 200, 0);
				}
				if (type == 289)
				{
					return new Color(250, 250, 250, 50);
				}
				if (type >= 254 && type <= 261)
				{
					num4 = 255;
					if (num2 < 100)
					{
						num2 = 100;
					}
					if (num3 < 150)
					{
						num3 = 150;
					}
				}
				else if (type == 374)
				{
					num4 = 255;
					if (num2 < 100)
					{
						num2 = 100;
					}
					if (num3 < 150)
					{
						num3 = 150;
					}
				}
				else if (type == 64 || type == 63 || type == 75 || type == 103 || type == 400)
				{
					num2 = (int)((double)(int)newColor.R * 1.5);
					num3 = (int)((double)(int)newColor.G * 1.5);
					num4 = (int)((double)(int)newColor.B * 1.5);
					if (num2 > 255)
					{
						num2 = 255;
					}
					if (num3 > 255)
					{
						num3 = 255;
					}
					if (num4 > 255)
					{
						num4 = 255;
					}
				}
			}
			if (num5 < 0)
			{
				num5 = 0;
			}
			if (num5 > 255)
			{
				num5 = 255;
			}
			return new Color(num2, num3, num4, num5);
		}

		public Color GetColor(Color newColor)
		{
			int num = color.R - (255 - newColor.R);
			int num2 = color.G - (255 - newColor.G);
			int num3 = color.B - (255 - newColor.B);
			int num4 = color.A - (255 - newColor.A);
			if (num < 0)
			{
				num = 0;
			}
			if (num > 255)
			{
				num = 255;
			}
			if (num2 < 0)
			{
				num2 = 0;
			}
			if (num2 > 255)
			{
				num2 = 255;
			}
			if (num3 < 0)
			{
				num3 = 0;
			}
			if (num3 > 255)
			{
				num3 = 255;
			}
			if (num4 < 0)
			{
				num4 = 0;
			}
			if (num4 > 255)
			{
				num4 = 255;
			}
			return new Color(num, num2, num3, num4);
		}

		public string GetChat()
		{
			Recipe.FindRecipes();
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			bool flag4 = false;
			bool flag5 = false;
			bool flag6 = false;
			bool flag7 = false;
			bool flag8 = false;
			bool flag9 = false;
			bool flag10 = false;
			bool flag11 = false;
			bool flag12 = false;
			bool flag13 = false;
			bool flag14 = false;
			bool flag15 = false;
			bool flag16 = false;
			bool flag17 = false;
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active)
				{
					if (Main.npc[i].type == 17)
					{
						flag = true;
					}
					else if (Main.npc[i].type == 18)
					{
						flag2 = true;
					}
					else if (Main.npc[i].type == 19)
					{
						flag3 = true;
					}
					else if (Main.npc[i].type == 20)
					{
						flag4 = true;
					}
					else if (Main.npc[i].type == 37)
					{
						flag5 = true;
					}
					else if (Main.npc[i].type == 38)
					{
						flag6 = true;
					}
					else if (Main.npc[i].type == 124)
					{
						flag7 = true;
					}
					else if (Main.npc[i].type == 107)
					{
						flag8 = true;
					}
					else if (Main.npc[i].type == 54)
					{
						flag9 = true;
					}
					else if (Main.npc[i].type == 160)
					{
						flag10 = true;
					}
					else if (Main.npc[i].type == 178)
					{
						flag11 = true;
					}
					else if (Main.npc[i].type == 229)
					{
						flag12 = true;
					}
					else if (Main.npc[i].type == 209)
					{
						flag13 = true;
					}
					else if (Main.npc[i].type == 208)
					{
						flag14 = true;
					}
					else if (Main.npc[i].type == 353)
					{
						flag15 = true;
					}
					else if (Main.npc[i].type == 22)
					{
						flag16 = true;
					}
					else if (Main.npc[i].type == 2)
					{
						flag17 = true;
					}
				}
			}
			string result = "";
			if (type == 17)
			{
				if (!downedBoss1 && Main.rand.Next(3) == 0)
				{
					result = ((Main.player[Main.myPlayer].statLifeMax < 200) ? Lang.dialog(1) : ((Main.player[Main.myPlayer].statDefense > 10) ? Lang.dialog(3) : Lang.dialog(2)));
				}
				else if (Main.dayTime)
				{
					if (Main.time < 16200.0)
					{
						switch (Main.rand.Next(3))
						{
						case 0:
							result = Lang.dialog(4);
							break;
						case 1:
							result = Lang.dialog(5);
							break;
						default:
							result = Lang.dialog(6);
							break;
						}
					}
					else if (Main.time > 37800.0)
					{
						switch (Main.rand.Next(3))
						{
						case 0:
							result = Lang.dialog(7);
							break;
						case 1:
							result = Lang.dialog(8);
							break;
						default:
							result = Lang.dialog(9);
							break;
						}
					}
					else
					{
						switch (Main.rand.Next(3))
						{
						case 0:
							result = Lang.dialog(10);
							break;
						case 1:
							result = Lang.dialog(11);
							break;
						default:
							result = Lang.dialog(12);
							break;
						}
					}
				}
				else if (Main.bloodMoon)
				{
					if (flag2 && flag7 && Main.rand.Next(3) == 0)
					{
						result = Lang.dialog(13);
					}
					else
					{
						switch (Main.rand.Next(4))
						{
						case 0:
							result = Lang.dialog(14);
							break;
						case 1:
							result = Lang.dialog(15);
							break;
						case 2:
							result = Lang.dialog(16);
							break;
						default:
							result = Lang.dialog(17);
							break;
						}
					}
				}
				else if (Main.time < 9720.0)
				{
					result = ((Main.rand.Next(2) != 0) ? Lang.dialog(19) : Lang.dialog(18));
				}
				else if (Main.time > 22680.0)
				{
					result = ((Main.rand.Next(2) != 0) ? Lang.dialog(21) : Lang.dialog(20));
				}
				else
				{
					switch (Main.rand.Next(3))
					{
					case 0:
						result = Lang.dialog(22);
						break;
					case 1:
						result = Lang.dialog(23);
						break;
					default:
						result = Lang.dialog(24);
						break;
					}
				}
			}
			else if (type == 18)
			{
				if (Main.bloodMoon)
				{
					if ((double)Main.player[Main.myPlayer].statLife < (double)Main.player[Main.myPlayer].statLifeMax2 * 0.66)
					{
						switch (Main.rand.Next(3))
						{
						case 0:
							result = Lang.dialog(25);
							break;
						case 1:
							result = Lang.dialog(26);
							break;
						default:
							result = Lang.dialog(27);
							break;
						}
					}
					else
					{
						switch (Main.rand.Next(4))
						{
						case 0:
							result = Lang.dialog(28);
							break;
						case 1:
							result = Lang.dialog(29);
							break;
						case 2:
							result = Lang.dialog(30);
							break;
						default:
							result = Lang.dialog(31);
							break;
						}
					}
				}
				else if (Main.rand.Next(3) == 0 && !downedBoss3)
				{
					result = Lang.dialog(32);
				}
				else if (flag6 && Main.rand.Next(4) == 0)
				{
					result = Lang.dialog(33);
				}
				else if (flag3 && Main.rand.Next(4) == 0)
				{
					result = Lang.dialog(34);
				}
				else if (flag17 && Main.rand.Next(4) == 0)
				{
					result = Lang.dialog(35);
				}
				else if ((double)Main.player[Main.myPlayer].statLife < (double)Main.player[Main.myPlayer].statLifeMax2 * 0.33)
				{
					switch (Main.rand.Next(5))
					{
					case 0:
						result = Lang.dialog(36);
						break;
					case 1:
						result = Lang.dialog(37);
						break;
					case 2:
						result = Lang.dialog(38);
						break;
					case 3:
						result = Lang.dialog(39);
						break;
					default:
						result = Lang.dialog(40);
						break;
					}
				}
				else if ((double)Main.player[Main.myPlayer].statLife < (double)Main.player[Main.myPlayer].statLifeMax2 * 0.66)
				{
					switch (Main.rand.Next(7))
					{
					case 0:
						result = Lang.dialog(41);
						break;
					case 1:
						result = Lang.dialog(42);
						break;
					case 2:
						result = Lang.dialog(43);
						break;
					case 3:
						result = Lang.dialog(44);
						break;
					case 4:
						result = Lang.dialog(45);
						break;
					case 5:
						result = Lang.dialog(46);
						break;
					default:
						result = Lang.dialog(47);
						break;
					}
				}
				else
				{
					switch (Main.rand.Next(4))
					{
					case 0:
						result = Lang.dialog(48);
						break;
					case 1:
						result = Lang.dialog(49);
						break;
					case 2:
						result = Lang.dialog(50);
						break;
					default:
						result = Lang.dialog(51);
						break;
					}
				}
			}
			else if (type == 19)
			{
				if (downedBoss3 && !Main.hardMode)
				{
					result = Lang.dialog(58);
				}
				else if (flag2 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(59);
				}
				else if (flag2 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(60);
				}
				else if (flag4 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(61);
				}
				else if (flag6 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(62);
				}
				else if (flag6 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(63);
				}
				else if (Main.bloodMoon)
				{
					result = ((Main.rand.Next(2) != 0) ? Lang.dialog(65) : Lang.dialog(64));
				}
				else
				{
					switch (Main.rand.Next(3))
					{
					case 0:
						result = Lang.dialog(66);
						break;
					case 1:
						result = Lang.dialog(67);
						break;
					default:
						result = Lang.dialog(68);
						break;
					}
				}
			}
			else if (type == 20)
			{
				if (!downedBoss2 && Main.rand.Next(3) == 0)
				{
					result = ((!WorldGen.crimson) ? Lang.dialog(69) : Lang.dialog(332));
				}
				else if (flag3 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(70);
				}
				else if (flag && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(71);
				}
				else if (flag5 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(72);
				}
				else if (flag10 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(238);
				}
				else if (Main.bloodMoon)
				{
					switch (Main.rand.Next(4))
					{
					case 0:
						result = Lang.dialog(73);
						break;
					case 1:
						result = Lang.dialog(74);
						break;
					case 2:
						result = Lang.dialog(75);
						break;
					default:
						result = Lang.dialog(76);
						break;
					}
				}
				else
				{
					switch (Main.rand.Next(5))
					{
					case 0:
						result = ((!WorldGen.crimson) ? Lang.dialog(77) : Lang.dialog(333));
						break;
					case 1:
						result = Lang.dialog(78);
						break;
					case 2:
						result = Lang.dialog(79);
						break;
					case 3:
						result = Lang.dialog(80);
						break;
					default:
						result = Lang.dialog(81);
						break;
					}
				}
			}
			else if (type == 37)
			{
				if (Main.dayTime)
				{
					switch (Main.rand.Next(3))
					{
					case 0:
						result = Lang.dialog(82);
						break;
					case 1:
						result = Lang.dialog(83);
						break;
					default:
						result = Lang.dialog(84);
						break;
					}
				}
				else if (Main.player[Main.myPlayer].statLifeMax < 300 || Main.player[Main.myPlayer].statDefense < 10)
				{
					switch (Main.rand.Next(4))
					{
					case 0:
						result = Lang.dialog(85);
						break;
					case 1:
						result = Lang.dialog(86);
						break;
					case 2:
						result = Lang.dialog(87);
						break;
					default:
						result = Lang.dialog(88);
						break;
					}
				}
				else
				{
					switch (Main.rand.Next(4))
					{
					case 0:
						result = Lang.dialog(89);
						break;
					case 1:
						result = Lang.dialog(90);
						break;
					case 2:
						result = Lang.dialog(91);
						break;
					default:
						result = Lang.dialog(92);
						break;
					}
				}
			}
			else if (type == 38)
			{
				if (!downedBoss2 && Main.rand.Next(3) == 0)
				{
					result = Lang.dialog(93);
				}
				if (Main.bloodMoon)
				{
					switch (Main.rand.Next(3))
					{
					case 0:
						result = Lang.dialog(94);
						break;
					case 1:
						result = Lang.dialog(95);
						break;
					default:
						result = Lang.dialog(96);
						break;
					}
				}
				else if (flag3 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(97);
				}
				else if (flag3 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(98);
				}
				else if (flag2 && Main.rand.Next(4) == 0)
				{
					result = Lang.dialog(99);
				}
				else if (flag4 && Main.rand.Next(4) == 0)
				{
					result = Lang.dialog(100);
				}
				else if (!Main.dayTime)
				{
					switch (Main.rand.Next(4))
					{
					case 0:
						result = Lang.dialog(101);
						break;
					case 1:
						result = Lang.dialog(102);
						break;
					case 2:
						result = Lang.dialog(103);
						break;
					default:
						result = Lang.dialog(104);
						break;
					}
				}
				else
				{
					switch (Main.rand.Next(5))
					{
					case 0:
						result = Lang.dialog(105);
						break;
					case 1:
						result = Lang.dialog(106);
						break;
					case 2:
						result = Lang.dialog(107);
						break;
					case 3:
						result = Lang.dialog(108);
						break;
					default:
						result = Lang.dialog(109);
						break;
					}
				}
			}
			else if (type == 54)
			{
				if (!flag7 && Main.rand.Next(2) == 0)
				{
					result = Lang.dialog(110);
				}
				else if (flag10 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(237);
				}
				else if (Main.bloodMoon)
				{
					result = Lang.dialog(111);
				}
				else if (flag2 && Main.rand.Next(4) == 0)
				{
					result = Lang.dialog(112);
				}
				else if (Main.player[Main.myPlayer].head == 24)
				{
					result = Lang.dialog(113);
				}
				else
				{
					switch (Main.rand.Next(6))
					{
					case 0:
						result = Lang.dialog(114);
						break;
					case 1:
						result = Lang.dialog(115);
						break;
					case 2:
						result = Lang.dialog(116);
						break;
					case 3:
						result = Lang.dialog(117);
						break;
					case 4:
						result = Lang.dialog(118);
						break;
					default:
						result = Lang.dialog(119);
						break;
					}
				}
			}
			else if (type == 105)
			{
				result = Lang.dialog(120);
			}
			else if (type == 107)
			{
				if (homeless)
				{
					switch (Main.rand.Next(5))
					{
					case 0:
						result = Lang.dialog(121);
						break;
					case 1:
						result = Lang.dialog(122);
						break;
					case 2:
						result = Lang.dialog(123);
						break;
					case 3:
						result = Lang.dialog(124);
						break;
					default:
						result = Lang.dialog(125);
						break;
					}
				}
				else if (flag7 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(126);
				}
				else if (flag15 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(309);
				}
				else if (!Main.dayTime)
				{
					switch (Main.rand.Next(5))
					{
					case 0:
						result = Lang.dialog(127);
						break;
					case 1:
						result = Lang.dialog(128);
						break;
					case 2:
						result = Lang.dialog(129);
						break;
					case 3:
						result = Lang.dialog(130);
						break;
					default:
						result = Lang.dialog(131);
						break;
					}
				}
				else
				{
					switch (Main.rand.Next(5))
					{
					case 0:
						result = Lang.dialog(132);
						break;
					case 1:
						result = Lang.dialog(133);
						break;
					case 2:
						result = Lang.dialog(134);
						break;
					case 3:
						result = Lang.dialog(135);
						break;
					default:
						result = Lang.dialog(136);
						break;
					}
				}
			}
			else if (type == 106)
			{
				result = Lang.dialog(137);
			}
			else if (type == 108)
			{
				if (homeless)
				{
					int num = Main.rand.Next(3);
					if (num == 0)
					{
						result = Lang.dialog(138);
					}
					else if (num == 1 && !Main.player[Main.myPlayer].Male)
					{
						result = Lang.dialog(139);
					}
					else
					{
						switch (num)
						{
						case 1:
							result = Lang.dialog(140);
							break;
						case 2:
							result = Lang.dialog(141);
							break;
						}
					}
				}
				else if (Main.player[Main.myPlayer].Male && flag17 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(142);
				}
				else if (Main.player[Main.myPlayer].Male && flag6 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(143);
				}
				else if (Main.player[Main.myPlayer].Male && flag8 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(144);
				}
				else if (!Main.player[Main.myPlayer].Male && flag2 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(145);
				}
				else if (!Main.player[Main.myPlayer].Male && flag7 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(146);
				}
				else if (!Main.player[Main.myPlayer].Male && flag4 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(147);
				}
				else if (!Main.dayTime)
				{
					switch (Main.rand.Next(3))
					{
					case 0:
						result = Lang.dialog(148);
						break;
					case 1:
						result = Lang.dialog(149);
						break;
					case 2:
						result = Lang.dialog(150);
						break;
					}
				}
				else
				{
					switch (Main.rand.Next(5))
					{
					case 0:
						result = Lang.dialog(151);
						break;
					case 1:
						result = Lang.dialog(152);
						break;
					case 2:
						result = Lang.dialog(153);
						break;
					case 3:
						result = Lang.dialog(154);
						break;
					default:
						result = Lang.dialog(155);
						break;
					}
				}
			}
			else if (type == 123)
			{
				result = Lang.dialog(156);
			}
			else if (type == 124)
			{
				if (homeless)
				{
					switch (Main.rand.Next(4))
					{
					case 0:
						result = Lang.dialog(157);
						break;
					case 1:
						result = Lang.dialog(158);
						break;
					case 2:
						result = Lang.dialog(159);
						break;
					default:
						result = Lang.dialog(160);
						break;
					}
				}
				else if (Main.bloodMoon)
				{
					switch (Main.rand.Next(4))
					{
					case 0:
						result = Lang.dialog(161);
						break;
					case 1:
						result = Lang.dialog(162);
						break;
					case 2:
						result = Lang.dialog(163);
						break;
					default:
						result = Lang.dialog(164);
						break;
					}
				}
				else if (flag8 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(165);
				}
				else if (flag3 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(166);
				}
				else
				{
					switch (Main.rand.Next(3))
					{
					case 0:
						result = Lang.dialog(167);
						break;
					case 1:
						result = Lang.dialog(168);
						break;
					default:
						result = Lang.dialog(169);
						break;
					}
				}
			}
			else if (type == 22)
			{
				if (Main.bloodMoon)
				{
					switch (Main.rand.Next(3))
					{
					case 0:
						result = Lang.dialog(170);
						break;
					case 1:
						result = Lang.dialog(171);
						break;
					default:
						result = Lang.dialog(172);
						break;
					}
				}
				else if (!Main.dayTime)
				{
					result = Lang.dialog(173);
				}
				else
				{
					switch (Main.rand.Next(3))
					{
					case 0:
						result = Lang.dialog(174);
						break;
					case 1:
						result = Lang.dialog(175);
						break;
					default:
						result = Lang.dialog(176);
						break;
					}
				}
			}
			else if (type == 142)
			{
				switch (Main.rand.Next(3))
				{
				case 0:
					result = Lang.dialog(224);
					break;
				case 1:
					result = Lang.dialog(225);
					break;
				case 2:
					result = Lang.dialog(226);
					break;
				}
			}
			else if (type == 160)
			{
				int num2 = Main.rand.Next(6);
				if (flag4 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(232);
				}
				else if (flag9 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(236);
				}
				else
				{
					switch (num2)
					{
					case 0:
						result = Lang.dialog(231);
						break;
					case 1:
						result = Lang.dialog(233);
						break;
					case 2:
						result = Lang.dialog(234);
						break;
					case 3:
						result = Lang.dialog(235);
						break;
					case 4:
						result = Lang.dialog(240);
						break;
					case 5:
						result = Lang.dialog(241);
						break;
					}
				}
			}
			else if (type == 178)
			{
				int num3 = Main.rand.Next(5);
				if (Main.bloodMoon && Main.rand.Next(3) == 0)
				{
					result = Lang.dialog(245);
				}
				else if (flag13 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(246);
				}
				else if (flag12 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(247);
				}
				else
				{
					switch (num3)
					{
					case 0:
						result = Lang.dialog(242);
						break;
					case 1:
						result = Lang.dialog(243);
						break;
					case 2:
						result = Lang.dialog(244);
						break;
					case 3:
						result = Lang.dialog(248);
						break;
					case 4:
						result = Lang.dialog(249);
						break;
					}
				}
			}
			else if (type == 207)
			{
				int num4 = Main.rand.Next(3);
				if (flag12 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(260);
				}
				else
				{
					switch (num4)
					{
					case 0:
						result = Lang.dialog(257);
						break;
					case 1:
						result = Lang.dialog(258);
						break;
					case 2:
						result = Lang.dialog(259);
						break;
					}
				}
			}
			else if (type == 208)
			{
				int num5 = Main.rand.Next(7);
				if (Main.player[Main.myPlayer].Male && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(268);
				}
				else if (flag15 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(310);
				}
				else
				{
					switch (num5)
					{
					case 0:
						result = Lang.dialog(265);
						break;
					case 1:
						result = Lang.dialog(266);
						break;
					case 2:
						result = Lang.dialog(267);
						break;
					case 3:
						result = Lang.dialog(269);
						break;
					case 4:
						result = Lang.dialog(270);
						break;
					case 5:
						result = Lang.dialog(271);
						break;
					case 6:
						result = Lang.dialog(272);
						break;
					}
				}
			}
			else if (type == 209)
			{
				int num6 = Main.rand.Next(5);
				if (flag12 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(284);
				}
				else if (flag11 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(283);
				}
				else
				{
					switch (num6)
					{
					case 0:
						result = Lang.dialog(280);
						break;
					case 1:
						result = Lang.dialog(281);
						break;
					case 2:
						result = Lang.dialog(282);
						break;
					case 3:
						result = Lang.dialog(285);
						break;
					case 4:
						result = Lang.dialog(286);
						break;
					}
				}
			}
			else if (type == 227)
			{
				int num7 = Main.rand.Next(5);
				if (Main.hardMode && Main.rand.Next(7) == 0)
				{
					result = Lang.dialog(250);
				}
				else if (flag14 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(251);
				}
				else
				{
					switch (num7)
					{
					case 0:
						result = Lang.dialog(252);
						break;
					case 1:
						result = Lang.dialog(253);
						break;
					case 2:
						result = Lang.dialog(254);
						break;
					case 3:
						result = Lang.dialog(255);
						break;
					case 4:
						result = Lang.dialog(256);
						break;
					}
				}
			}
			else if (type == 228)
			{
				int num8 = Main.rand.Next(3);
				if (flag2 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(263);
				}
				else
				{
					switch (num8)
					{
					case 0:
						result = Lang.dialog(261);
						break;
					case 1:
						result = Lang.dialog(262);
						break;
					case 2:
						result = Lang.dialog(264);
						break;
					}
				}
			}
			else if (type == 229)
			{
				int num9 = Main.rand.Next(6);
				if (!Main.player[Main.myPlayer].Male && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(276);
				}
				else
				{
					switch (num9)
					{
					case 0:
						result = Lang.dialog(273);
						break;
					case 1:
						result = Lang.dialog(274);
						break;
					case 2:
						result = Lang.dialog(275);
						break;
					case 3:
						result = Lang.dialog(277);
						break;
					case 4:
						result = Lang.dialog(278);
						break;
					case 5:
						result = Lang.dialog(279);
						break;
					}
				}
			}
			else if (type == 354)
			{
				result = Lang.dialog(Main.rand.Next(315, 319));
			}
			else if (type == 353)
			{
				if (Main.bloodMoon)
				{
					switch (Main.rand.Next(3))
					{
					case 0:
						result = Lang.dialog(304);
						break;
					case 1:
						result = Lang.dialog(305);
						break;
					case 2:
						result = Lang.dialog(306);
						break;
					}
				}
				else if (Main.dayTime && Main.time < 16200.0 && Main.rand.Next(3) == 0)
				{
					result = Lang.dialog(311);
				}
				else if (Main.player[Main.myPlayer].Male && Main.rand.Next(3) == 0)
				{
					switch (Main.rand.Next(2))
					{
					case 0:
						result = Lang.dialog(293);
						break;
					case 1:
						result = Lang.dialog(300);
						break;
					}
				}
				else if (!Main.player[Main.myPlayer].Male && Main.rand.Next(3) == 0)
				{
					switch (Main.rand.Next(3))
					{
					case 0:
						result = Lang.dialog(291);
						break;
					case 1:
						result = Lang.dialog(292);
						break;
					case 2:
						result = Lang.dialog(312);
						break;
					}
				}
				else if (flag14 && flag7 && flag2 && flag3 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(307);
				}
				else if (flag14 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(302);
				}
				else if (flag6 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(303);
				}
				else if (flag13 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(308);
				}
				else if (Main.moonPhase < 3)
				{
					switch (Main.rand.Next(5))
					{
					case 0:
						result = Lang.dialog(287);
						break;
					case 1:
						result = Lang.dialog(288);
						break;
					case 2:
						result = Lang.dialog(289);
						break;
					case 3:
						result = Lang.dialog(290);
						break;
					case 4:
						result = Lang.dialog(294);
						break;
					}
				}
				else if (Main.moonPhase < 6)
				{
					switch (Main.rand.Next(4))
					{
					case 0:
						result = Lang.dialog(295);
						break;
					case 1:
						result = Lang.dialog(296);
						break;
					case 2:
						result = Lang.dialog(297);
						break;
					case 3:
						result = Lang.dialog(298);
						break;
					}
				}
				else
				{
					switch (Main.rand.Next(4))
					{
					case 0:
						result = Lang.dialog(299);
						break;
					case 1:
						result = Lang.dialog(301);
						break;
					case 2:
						result = Lang.dialog(313);
						break;
					case 3:
						result = Lang.dialog(314);
						break;
					}
				}
			}
			else if (type == 368)
			{
				result = ((flag16 && Main.rand.Next(5) == 0) ? Lang.dialog(319) : ((flag && Main.rand.Next(5) == 0) ? Lang.dialog(320) : ((!flag9 || Main.rand.Next(5) != 0) ? Lang.dialog(Main.rand.Next(322, 331)) : Lang.dialog(321))));
			}
			else if (type == 376)
			{
				result = Lang.dialog(Main.rand.Next(353, 356));
			}
			else if (type == 369)
			{
				result = (Main.bloodMoon ? (Main.anglerQuestFinished ? Lang.dialog(Main.rand.Next(350, 353)) : Lang.dialog(Main.rand.Next(348, 350))) : ((!Main.anglerQuestFinished) ? Lang.dialog(Main.rand.Next(334, 338)) : ((!flag4 || Main.rand.Next(5) != 0) ? Lang.dialog(Main.rand.Next(338, 347)) : Lang.dialog(347))));
			}
			else if (type == 453)
			{
				result = Lang.dialog(Main.rand.Next(356, 364));
			}
			else if (type == 441)
			{
				if (Main.rand.Next(6) == 0 && flag4)
				{
					result = Lang.dialog(371);
				}
				if (Main.rand.Next(6) == 0 && flag3)
				{
					result = Lang.dialog(372);
				}
				if (Main.rand.Next(6) == 0 && flag6)
				{
					result = Lang.dialog(373);
				}
				result = ((Main.rand.Next(6) != 0 || !flag) ? Lang.dialog(Main.rand.Next(364, 370)) : Lang.dialog(374));
			}
			return result;
		}

		public object Clone()
		{
			return MemberwiseClone();
		}

		public void CheckDrowning()
		{
			bool flag = Collision.DrownCollision(position, width, height, 1f);
			if (Main.netMode != 1)
			{
				if (flag)
				{
					if (++breathCounter >= 7)
					{
						breathCounter = 0;
						breath--;
						if (breath <= 0)
						{
							friendlyRegen = 0;
							breath = 0;
							life -= 2;
							if (life % 24 < 2)
							{
								netUpdate = true;
							}
							if (life <= 0)
							{
								life = 1;
								StrikeNPCNoInteraction(2, 0f, 0);
								if (Main.netMode != 0)
								{
									NetMessage.SendData(28, -1, -1, "", whoAmI, 2f);
								}
							}
						}
					}
				}
				else
				{
					breath += 3;
					if (breath > 200)
					{
						breath = 200;
					}
					breathCounter = 0;
				}
			}
			if (flag && Main.rand.Next(20) == 0 && !lavaWet && !honeyWet)
			{
				int num = 0;
				int num2 = 0;
				if (type == 369)
				{
					num2 = 8;
				}
				Dust.NewDust(new Vector2(position.X + (float)((10 + num) * direction), position.Y + (float)num2 + 4f), width - 8, 8, 34, 0f, 0f, 0, default(Color), 1.2f);
			}
		}

		public void TryPortalJumping()
		{
			if (townNPC && Main.netMode != 1)
			{
				PortalHelper.TryGoingThroughPortals(this);
			}
		}

		public override string ToString()
		{
			return "name:" + name + ", active:" + active + ", whoAmI:" + whoAmI;
		}
	}
}
