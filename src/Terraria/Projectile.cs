using Microsoft.Xna.Framework;
using System;
using System.Collections.Generic;
using Terraria.GameContent;
using Terraria.GameContent.Achievements;
using Terraria.Graphics.Shaders;
using Terraria.ID;
using Terraria.Localization;

namespace Terraria
{
	public class Projectile : Entity
	{
		private static Tile p;

		public bool arrow;

		public int numHits;

		public bool bobber;

		public bool netImportant;

		public bool noDropItem;

		public static int maxAI = 2;

		public bool counterweight;

		public float scale = 1f;

		public float rotation;

		public int type;

		public int alpha;

		public short glowMask;

		public int owner = 16;

		public float[] ai = new float[maxAI];

		public float[] localAI = new float[maxAI];

		public float gfxOffY;

		public float stepSpeed = 1f;

		public int aiStyle;

		public int timeLeft;

		public int soundDelay;

		public int damage;

		public int spriteDirection = 1;

		public bool hostile;

		public float knockBack;

		public bool friendly;

		public int penetrate = 1;

		private int[] npcImmune = new int[200];

		private bool updatedNPCImmunity;

		public int maxPenetrate = 1;

		public int identity;

		public float light;

		public bool netUpdate;

		public bool netUpdate2;

		public int netSpam;

		public Vector2[] oldPos = new Vector2[10];

		public float[] oldRot = new float[10];

		public int[] oldSpriteDirection = new int[10];

		public bool minion;

		public float minionSlots;

		public int minionPos;

		public int restrikeDelay;

		public bool tileCollide;

		public int extraUpdates;

		public int numUpdates;

		public bool ignoreWater;

		public bool hide;

		public bool ownerHitCheck;

		public int[] playerImmune = new int[16];

		public string miscText = "";

		public bool melee;

		public bool ranged;

		public bool thrown;

		public bool magic;

		public bool coldDamage;

		public bool noEnchantments;

		public bool trap;

		public bool npcProj;

		public int frameCounter;

		public int frame;

		public bool manualDirectionChange;

		public int projUUID = -1;

		public string Name => Lang.GetProjectileName(type).Value;

		public float Opacity
		{
			get
			{
				return 1f - (float)alpha / 255f;
			}
			set
			{
				alpha = (int)MathHelper.Clamp((1f - value) * 255f, 0f, 255f);
			}
		}

		public int MaxUpdates
		{
			get
			{
				return extraUpdates + 1;
			}
			set
			{
				extraUpdates = value - 1;
			}
		}

		public void SetDefaults(int Type)
		{
			counterweight = false;
			arrow = false;
			bobber = false;
			numHits = 0;
			netImportant = false;
			manualDirectionChange = false;
			int num = 10;
			if (Type >= 0)
			{
				num = ProjectileID.Sets.TrailCacheLength[Type];
			}
			if (num != oldPos.Length)
			{
				Array.Resize(ref oldPos, num);
				Array.Resize(ref oldRot, num);
				Array.Resize(ref oldSpriteDirection, num);
			}
			for (int i = 0; i < oldPos.Length; i++)
			{
				oldPos[i].X = 0f;
				oldPos[i].Y = 0f;
				oldRot[i] = 0f;
				oldSpriteDirection[i] = 0;
			}
			for (int j = 0; j < maxAI; j++)
			{
				ai[j] = 0f;
				localAI[j] = 0f;
			}
			for (int k = 0; k < 16; k++)
			{
				playerImmune[k] = 0;
			}
			for (int l = 0; l < 200; l++)
			{
				npcImmune[l] = 0;
			}
			noDropItem = false;
			minion = false;
			minionSlots = 0f;
			soundDelay = 0;
			spriteDirection = 1;
			melee = false;
			ranged = false;
			thrown = false;
			magic = false;
			ownerHitCheck = false;
			hide = false;
			lavaWet = false;
			wetCount = 0;
			wet = false;
			ignoreWater = false;
			hostile = false;
			netUpdate = false;
			netUpdate2 = false;
			netSpam = 0;
			numUpdates = 0;
			extraUpdates = 0;
			identity = 0;
			restrikeDelay = 0;
			light = 0f;
			penetrate = 1;
			tileCollide = true;
			position = Vector2.Zero;
			velocity = Vector2.Zero;
			aiStyle = 0;
			alpha = 0;
			glowMask = -1;
			type = Type;
			active = true;
			rotation = 0f;
			scale = 1f;
			owner = 16;
			timeLeft = 3600;
			friendly = false;
			damage = 0;
			knockBack = 0f;
			miscText = "";
			coldDamage = false;
			noEnchantments = false;
			trap = false;
			npcProj = false;
			projUUID = -1;
			frame = 0;
			frameCounter = 0;
			if (type == 1)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				ranged = true;
			}
			else if (type == 2)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				light = 1f;
				ranged = true;
			}
			else if (type == 3)
			{
				width = 22;
				height = 22;
				aiStyle = 2;
				friendly = true;
				penetrate = 4;
				thrown = true;
			}
			else if (type == 4)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				light = 0.35f;
				penetrate = 5;
				ranged = true;
			}
			else if (type == 5)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				light = 0.4f;
				penetrate = -1;
				timeLeft = 120;
				alpha = 100;
				ignoreWater = true;
				ranged = true;
				extraUpdates = 1;
			}
			else if (type == 6)
			{
				width = 22;
				height = 22;
				aiStyle = 3;
				friendly = true;
				penetrate = -1;
				melee = true;
				light = 0.4f;
			}
			else if (type == 7 || type == 8)
			{
				width = 28;
				height = 28;
				aiStyle = 4;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				alpha = 255;
				ignoreWater = true;
				magic = true;
			}
			else if (type == 9)
			{
				width = 24;
				height = 24;
				aiStyle = 5;
				friendly = true;
				penetrate = 2;
				alpha = 50;
				scale = 0.8f;
				tileCollide = false;
				melee = true;
			}
			else if (type == 10)
			{
				width = 64;
				height = 64;
				aiStyle = 6;
				friendly = true;
				tileCollide = false;
				penetrate = -1;
				alpha = 255;
				ignoreWater = true;
			}
			else if (type == 11)
			{
				width = 48;
				height = 48;
				aiStyle = 6;
				friendly = true;
				tileCollide = false;
				penetrate = -1;
				alpha = 255;
				ignoreWater = true;
			}
			else if (type == 12)
			{
				width = 16;
				height = 16;
				aiStyle = 5;
				friendly = true;
				penetrate = -1;
				alpha = 50;
				light = 1f;
			}
			else if (type == 13)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
			}
			else if (type == 14)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				light = 0.5f;
				alpha = 255;
				scale = 1.2f;
				timeLeft = 600;
				ranged = true;
				extraUpdates = 1;
			}
			else if (type == 15)
			{
				width = 16;
				height = 16;
				aiStyle = 8;
				friendly = true;
				light = 0.8f;
				alpha = 100;
				magic = true;
			}
			else if (type == 16)
			{
				width = 10;
				height = 10;
				aiStyle = 9;
				friendly = true;
				light = 0.8f;
				alpha = 100;
				magic = true;
			}
			else if (type == 17)
			{
				width = 10;
				height = 10;
				aiStyle = 10;
				friendly = true;
				ignoreWater = true;
			}
			else if (type == 18)
			{
				netImportant = true;
				width = 32;
				height = 32;
				aiStyle = 11;
				friendly = true;
				light = 0.9f;
				alpha = 150;
				tileCollide = false;
				penetrate = -1;
				timeLeft *= 5;
				ignoreWater = true;
				scale = 0.8f;
			}
			else if (type == 19)
			{
				width = 22;
				height = 22;
				aiStyle = 3;
				friendly = true;
				penetrate = -1;
				light = 1f;
				melee = true;
			}
			else if (type == 20)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 3;
				light = 0.75f;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.4f;
				timeLeft = 600;
				magic = true;
			}
			else if (type == 21)
			{
				width = 16;
				height = 16;
				aiStyle = 2;
				scale = 1.2f;
				friendly = true;
				thrown = true;
			}
			else if (type == 22)
			{
				width = 18;
				height = 18;
				aiStyle = 12;
				friendly = true;
				alpha = 255;
				penetrate = -1;
				extraUpdates = 2;
				ignoreWater = true;
				magic = true;
			}
			else if (type == 23)
			{
				width = 4;
				height = 4;
				aiStyle = 13;
				friendly = true;
				penetrate = -1;
				alpha = 255;
				ranged = true;
			}
			else if (type == 24)
			{
				width = 14;
				height = 14;
				aiStyle = 14;
				friendly = true;
				penetrate = 6;
				thrown = true;
			}
			else if (type == 25)
			{
				width = 22;
				height = 22;
				aiStyle = 15;
				friendly = true;
				penetrate = -1;
				melee = true;
				scale = 0.8f;
			}
			else if (type == 26)
			{
				width = 22;
				height = 22;
				aiStyle = 15;
				friendly = true;
				penetrate = -1;
				melee = true;
				scale = 0.8f;
			}
			else if (type == 27)
			{
				width = 16;
				height = 16;
				aiStyle = 8;
				friendly = true;
				alpha = 255;
				timeLeft /= 2;
				penetrate = 10;
				magic = true;
			}
			else if (type == 28)
			{
				width = 22;
				height = 22;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
			}
			else if (type == 29)
			{
				width = 10;
				height = 10;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
			}
			else if (type == 30)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				thrown = true;
			}
			else if (type == 31)
			{
				knockBack = 6f;
				width = 10;
				height = 10;
				aiStyle = 10;
				friendly = true;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 32)
			{
				width = 18;
				height = 18;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
			}
			else if (type == 33)
			{
				width = 38;
				height = 38;
				aiStyle = 3;
				friendly = true;
				scale = 0.9f;
				penetrate = -1;
				melee = true;
			}
			else if (type == 34)
			{
				width = 14;
				height = 14;
				aiStyle = 9;
				friendly = true;
				light = 0.8f;
				alpha = 100;
				penetrate = 1;
				magic = true;
			}
			else if (type == 35)
			{
				width = 22;
				height = 22;
				aiStyle = 15;
				friendly = true;
				penetrate = -1;
				melee = true;
				scale = 0.8f;
			}
			else if (type == 36)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 2;
				light = 0.6f;
				alpha = 255;
				scale = 1.4f;
				timeLeft = 600;
				ranged = true;
				extraUpdates = 1;
			}
			else if (type == 37)
			{
				width = 22;
				height = 22;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
			}
			else if (type == 38)
			{
				width = 14;
				height = 14;
				aiStyle = 0;
				hostile = true;
				penetrate = -1;
				aiStyle = 1;
				tileCollide = true;
			}
			else if (type == 39)
			{
				knockBack = 6f;
				width = 10;
				height = 10;
				aiStyle = 10;
				friendly = true;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 40)
			{
				knockBack = 6f;
				width = 10;
				height = 10;
				aiStyle = 10;
				friendly = true;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 41)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				penetrate = -1;
				ranged = true;
				light = 0.3f;
			}
			else if (type == 42)
			{
				knockBack = 8f;
				width = 10;
				height = 10;
				aiStyle = 10;
				friendly = true;
				extraUpdates = 1;
			}
			else if (type == 43)
			{
				knockBack = 12f;
				width = 24;
				height = 24;
				aiStyle = 17;
				penetrate = -1;
			}
			else if (type == 44)
			{
				width = 48;
				height = 48;
				alpha = 100;
				light = 0.2f;
				aiStyle = 18;
				hostile = true;
				penetrate = -1;
				tileCollide = true;
				scale = 0.9f;
			}
			else if (type == 45)
			{
				width = 48;
				height = 48;
				alpha = 100;
				light = 0.2f;
				aiStyle = 18;
				friendly = true;
				penetrate = 5;
				tileCollide = true;
				scale = 0.9f;
				magic = true;
			}
			else if (type == 46)
			{
				width = 20;
				height = 20;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.1f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 47)
			{
				width = 18;
				height = 18;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.1f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 48)
			{
				width = 12;
				height = 12;
				aiStyle = 2;
				friendly = true;
				penetrate = 2;
				thrown = true;
			}
			else if (type == 49)
			{
				width = 18;
				height = 18;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.2f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 50)
			{
				netImportant = true;
				width = 6;
				height = 6;
				aiStyle = 14;
				penetrate = -1;
				alpha = 75;
				light = 1f;
				timeLeft *= 5;
			}
			else if (type == 51)
			{
				width = 8;
				height = 8;
				aiStyle = 1;
				friendly = true;
			}
			else if (type == 52)
			{
				width = 22;
				height = 22;
				aiStyle = 3;
				friendly = true;
				penetrate = -1;
				melee = true;
			}
			else if (type == 53)
			{
				netImportant = true;
				width = 6;
				height = 6;
				aiStyle = 14;
				penetrate = -1;
				alpha = 75;
				light = 1f;
				timeLeft *= 5;
				tileCollide = false;
			}
			else if (type == 54)
			{
				width = 12;
				height = 12;
				aiStyle = 2;
				friendly = true;
				penetrate = 2;
				thrown = true;
			}
			else if (type == 55)
			{
				width = 10;
				height = 10;
				aiStyle = 0;
				hostile = true;
				penetrate = -1;
				aiStyle = 1;
				tileCollide = true;
			}
			else if (type == 56)
			{
				knockBack = 6f;
				width = 10;
				height = 10;
				aiStyle = 10;
				friendly = true;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 57)
			{
				width = 18;
				height = 18;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 58)
			{
				width = 18;
				height = 18;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 1.08f;
			}
			else if (type == 59)
			{
				width = 22;
				height = 22;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 0.9f;
			}
			else if (type == 60)
			{
				width = 22;
				height = 22;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 0.9f;
			}
			else if (type == 61)
			{
				width = 18;
				height = 18;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 1.16f;
			}
			else if (type == 62)
			{
				width = 22;
				height = 22;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 0.9f;
			}
			else if (type == 63)
			{
				width = 22;
				height = 22;
				aiStyle = 15;
				friendly = true;
				penetrate = -1;
				melee = true;
			}
			else if (type == 64)
			{
				width = 18;
				height = 18;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.25f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 65)
			{
				knockBack = 6f;
				width = 10;
				height = 10;
				aiStyle = 10;
				friendly = true;
				penetrate = -1;
				extraUpdates = 1;
			}
			else if (type == 66)
			{
				width = 18;
				height = 18;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.27f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 67)
			{
				knockBack = 6f;
				width = 10;
				height = 10;
				aiStyle = 10;
				friendly = true;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 68)
			{
				knockBack = 6f;
				width = 10;
				height = 10;
				aiStyle = 10;
				friendly = true;
				penetrate = -1;
				extraUpdates = 1;
			}
			else if (type == 69)
			{
				width = 14;
				height = 14;
				aiStyle = 2;
				friendly = true;
				penetrate = 1;
			}
			else if (type == 70)
			{
				width = 14;
				height = 14;
				aiStyle = 2;
				friendly = true;
				penetrate = 1;
			}
			else if (type == 621)
			{
				width = 14;
				height = 14;
				aiStyle = 2;
				friendly = true;
				penetrate = 1;
			}
			else if (type == 71)
			{
				knockBack = 6f;
				width = 10;
				height = 10;
				aiStyle = 10;
				friendly = true;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 72)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 11;
				friendly = true;
				light = 0.9f;
				tileCollide = false;
				penetrate = -1;
				timeLeft *= 5;
				ignoreWater = true;
				scale = 0.8f;
			}
			else if (type == 73 || type == 74)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
				light = 0.4f;
			}
			else if (type == 75)
			{
				width = 22;
				height = 22;
				aiStyle = 16;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 76 || type == 77 || type == 78)
			{
				if (type == 76)
				{
					width = 10;
					height = 22;
				}
				else if (type == 77)
				{
					width = 18;
					height = 24;
				}
				else
				{
					width = 22;
					height = 24;
				}
				aiStyle = 21;
				friendly = true;
				ranged = true;
				alpha = 100;
				light = 0.3f;
				penetrate = -1;
				timeLeft = 180;
				magic = true;
			}
			else if (type == 79)
			{
				width = 10;
				height = 10;
				aiStyle = 9;
				friendly = true;
				light = 0.8f;
				alpha = 255;
				magic = true;
			}
			else if (type == 80)
			{
				width = 16;
				height = 16;
				aiStyle = 22;
				friendly = true;
				magic = true;
				tileCollide = false;
				light = 0.5f;
				coldDamage = true;
			}
			else if (type == 81)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				hostile = true;
				ranged = true;
			}
			else if (type == 82)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				hostile = true;
				ranged = true;
			}
			else if (type == 83)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				hostile = true;
				penetrate = 3;
				light = 0.75f;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.7f;
				timeLeft = 600;
				magic = true;
			}
			else if (type == 84)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				hostile = true;
				penetrate = 3;
				light = 0.75f;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.2f;
				timeLeft = 600;
				magic = true;
			}
			else if (type == 85)
			{
				width = 6;
				height = 6;
				aiStyle = 23;
				friendly = true;
				alpha = 255;
				penetrate = 3;
				extraUpdates = 2;
				ranged = true;
			}
			else if (type == 86)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 11;
				friendly = true;
				light = 0.9f;
				tileCollide = false;
				penetrate = -1;
				timeLeft *= 5;
				ignoreWater = true;
				scale = 0.8f;
			}
			else if (type == 87)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 11;
				friendly = true;
				light = 0.9f;
				tileCollide = false;
				penetrate = -1;
				timeLeft *= 5;
				ignoreWater = true;
				scale = 0.8f;
			}
			else if (type == 88)
			{
				width = 6;
				height = 6;
				aiStyle = 1;
				friendly = true;
				penetrate = 3;
				light = 0.75f;
				alpha = 255;
				extraUpdates = 4;
				scale = 1.4f;
				timeLeft = 600;
				magic = true;
			}
			else if (type == 89)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				light = 0.5f;
				alpha = 255;
				scale = 1.2f;
				timeLeft = 600;
				ranged = true;
				extraUpdates = 1;
			}
			else if (type == 90)
			{
				width = 6;
				height = 6;
				aiStyle = 24;
				friendly = true;
				penetrate = 1;
				light = 0.5f;
				alpha = 50;
				scale = 1.2f;
				timeLeft = 600;
				ranged = true;
				tileCollide = false;
			}
			else if (type == 91)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				ranged = true;
			}
			else if (type == 92)
			{
				width = 24;
				height = 24;
				aiStyle = 5;
				friendly = true;
				penetrate = 2;
				alpha = 50;
				scale = 0.8f;
				tileCollide = false;
				magic = true;
			}
			else if (type == 93)
			{
				light = 0.15f;
				width = 12;
				height = 12;
				aiStyle = 2;
				friendly = true;
				penetrate = 2;
				magic = true;
			}
			else if (type == 94)
			{
				ignoreWater = true;
				width = 8;
				height = 8;
				aiStyle = 24;
				friendly = true;
				light = 0.5f;
				alpha = 50;
				scale = 1.2f;
				timeLeft = 600;
				magic = true;
				tileCollide = true;
				penetrate = 1;
			}
			else if (type == 95)
			{
				width = 16;
				height = 16;
				aiStyle = 8;
				friendly = true;
				light = 0.8f;
				alpha = 100;
				magic = true;
				penetrate = 2;
			}
			else if (type == 96)
			{
				width = 16;
				height = 16;
				aiStyle = 8;
				hostile = true;
				light = 0.8f;
				alpha = 100;
				magic = true;
				penetrate = -1;
				scale = 0.9f;
				scale = 1.3f;
			}
			else if (type == 97)
			{
				width = 18;
				height = 18;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.1f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 98)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				hostile = true;
				penetrate = -1;
				trap = true;
			}
			else if (type == 99)
			{
				width = 31;
				height = 31;
				aiStyle = 25;
				friendly = true;
				hostile = true;
				ranged = true;
				penetrate = -1;
				trap = true;
			}
			else if (type == 100)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				hostile = true;
				penetrate = 3;
				light = 0.75f;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.8f;
				timeLeft = 2700;
				magic = true;
			}
			else if (type == 101)
			{
				width = 6;
				height = 6;
				aiStyle = 23;
				hostile = true;
				alpha = 255;
				penetrate = -1;
				extraUpdates = 3;
				magic = true;
			}
			else if (type == 102)
			{
				width = 22;
				height = 22;
				aiStyle = 16;
				hostile = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 103)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				light = 1f;
				ranged = true;
			}
			else if (type == 104)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				light = 0.5f;
				alpha = 255;
				scale = 1.2f;
				timeLeft = 600;
				ranged = true;
				extraUpdates = 1;
			}
			else if (type == 105)
			{
				width = 18;
				height = 18;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.3f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 106)
			{
				width = 32;
				height = 32;
				aiStyle = 3;
				friendly = true;
				penetrate = -1;
				melee = true;
				light = 0.4f;
			}
			else if (type == 107)
			{
				width = 22;
				height = 22;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 1.1f;
			}
			else if (type == 108)
			{
				width = 260;
				height = 260;
				aiStyle = 16;
				friendly = true;
				hostile = true;
				penetrate = -1;
				tileCollide = false;
				alpha = 255;
				timeLeft = 2;
				trap = true;
			}
			else if (type == 109)
			{
				knockBack = 6f;
				width = 10;
				height = 10;
				aiStyle = 10;
				hostile = true;
				scale = 0.9f;
				penetrate = -1;
				coldDamage = true;
				thrown = true;
			}
			else if (type == 110)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				hostile = true;
				penetrate = -1;
				light = 0.5f;
				alpha = 255;
				scale = 1.2f;
				timeLeft = 600;
				ranged = true;
				extraUpdates = 1;
			}
			else if (type == 111)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 112)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 113)
			{
				width = 22;
				height = 22;
				aiStyle = 3;
				friendly = true;
				penetrate = -1;
				melee = true;
				light = 0.4f;
				coldDamage = true;
			}
			else if (type == 114)
			{
				width = 16;
				height = 16;
				aiStyle = 27;
				magic = true;
				penetrate = 3;
				light = 0.5f;
				alpha = 255;
				friendly = true;
			}
			else if (type == 115)
			{
				width = 16;
				height = 16;
				aiStyle = 27;
				hostile = true;
				magic = true;
				penetrate = -1;
				light = 0.5f;
				alpha = 255;
			}
			else if (type == 116)
			{
				width = 16;
				height = 16;
				aiStyle = 27;
				melee = true;
				penetrate = 1;
				light = 0.5f;
				alpha = 255;
				friendly = true;
			}
			else if (type == 117)
			{
				arrow = true;
				extraUpdates = 2;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				ranged = true;
			}
			else if (type == 118)
			{
				width = 10;
				height = 10;
				aiStyle = 28;
				alpha = 255;
				melee = true;
				penetrate = 1;
				friendly = true;
				coldDamage = true;
			}
			else if (type == 119)
			{
				width = 14;
				height = 14;
				aiStyle = 28;
				alpha = 255;
				melee = true;
				penetrate = 2;
				friendly = true;
			}
			else if (type == 120)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				ranged = true;
				coldDamage = true;
				extraUpdates = 1;
			}
			else if (type == 121)
			{
				width = 10;
				height = 10;
				aiStyle = 29;
				alpha = 255;
				magic = true;
				penetrate = 1;
				friendly = true;
			}
			else if (type == 122)
			{
				width = 10;
				height = 10;
				aiStyle = 29;
				alpha = 255;
				magic = true;
				penetrate = 1;
				friendly = true;
			}
			else if (type == 123)
			{
				width = 10;
				height = 10;
				aiStyle = 29;
				alpha = 255;
				magic = true;
				penetrate = 1;
				friendly = true;
			}
			else if (type == 124)
			{
				width = 10;
				height = 10;
				aiStyle = 29;
				alpha = 255;
				magic = true;
				penetrate = 2;
				friendly = true;
			}
			else if (type == 125)
			{
				width = 10;
				height = 10;
				aiStyle = 29;
				alpha = 255;
				magic = true;
				penetrate = 2;
				friendly = true;
			}
			else if (type == 126)
			{
				width = 10;
				height = 10;
				aiStyle = 29;
				alpha = 255;
				magic = true;
				penetrate = 2;
				friendly = true;
			}
			else if (type == 127)
			{
				netImportant = true;
				width = 22;
				height = 22;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 128)
			{
				width = 14;
				height = 14;
				aiStyle = 28;
				alpha = 255;
				penetrate = -1;
				friendly = false;
				hostile = true;
				coldDamage = true;
			}
			else if (type == 129)
			{
				width = 14;
				height = 14;
				aiStyle = 28;
				alpha = 255;
				penetrate = -1;
				friendly = false;
				hostile = true;
				tileCollide = false;
			}
			else if (type == 130)
			{
				width = 22;
				height = 22;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.2f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 131)
			{
				width = 22;
				height = 22;
				aiStyle = 30;
				friendly = true;
				penetrate = 1;
				tileCollide = false;
				melee = true;
				light = 0.5f;
			}
			else if (type == 132)
			{
				width = 16;
				height = 16;
				aiStyle = 27;
				melee = true;
				penetrate = 3;
				light = 0.5f;
				alpha = 255;
				friendly = true;
			}
			else if (type == 133)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 134)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 135)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 136)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 137)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 138)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 139)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 140)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 141)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 142)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 143)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 144)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 145)
			{
				width = 6;
				height = 6;
				aiStyle = 31;
				friendly = true;
				alpha = 255;
				penetrate = -1;
				extraUpdates = 2;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 146)
			{
				width = 6;
				height = 6;
				aiStyle = 31;
				friendly = true;
				alpha = 255;
				penetrate = -1;
				extraUpdates = 2;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 147)
			{
				width = 6;
				height = 6;
				aiStyle = 31;
				friendly = true;
				alpha = 255;
				penetrate = -1;
				extraUpdates = 2;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 148)
			{
				width = 6;
				height = 6;
				aiStyle = 31;
				friendly = true;
				alpha = 255;
				penetrate = -1;
				extraUpdates = 2;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 149)
			{
				width = 6;
				height = 6;
				aiStyle = 31;
				friendly = true;
				alpha = 255;
				penetrate = -1;
				extraUpdates = 2;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 150 || type == 151 || type == 152)
			{
				width = 28;
				height = 28;
				aiStyle = 4;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				alpha = 255;
				ignoreWater = true;
				magic = true;
			}
			else if (type == 153)
			{
				width = 18;
				height = 18;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.1f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 154)
			{
				width = 22;
				height = 22;
				aiStyle = 15;
				friendly = true;
				penetrate = -1;
				melee = true;
				scale = 0.8f;
			}
			else if (type == 155)
			{
				netImportant = true;
				width = 44;
				height = 44;
				aiStyle = 32;
				friendly = true;
			}
			else if (type == 156)
			{
				width = 16;
				height = 16;
				aiStyle = 27;
				melee = true;
				light = 0.5f;
				alpha = 255;
				friendly = true;
			}
			else if (type == 157)
			{
				width = 32;
				height = 32;
				aiStyle = 27;
				melee = true;
				light = 0.5f;
				alpha = 255;
				friendly = true;
				scale = 1.2f;
			}
			else if (type == 158)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				timeLeft = 600;
				ranged = true;
				extraUpdates = 1;
			}
			else if (type == 159)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				timeLeft = 600;
				ranged = true;
				extraUpdates = 1;
			}
			else if (type == 160)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				timeLeft = 600;
				ranged = true;
				extraUpdates = 1;
			}
			else if (type == 161)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				timeLeft = 600;
				ranged = true;
				extraUpdates = 1;
			}
			else if (type == 162)
			{
				width = 16;
				height = 16;
				aiStyle = 2;
				friendly = true;
				penetrate = 4;
				alpha = 255;
			}
			else if (type == 163)
			{
				netImportant = true;
				width = 6;
				height = 6;
				aiStyle = 33;
				friendly = true;
				penetrate = -1;
				alpha = 255;
				timeLeft = 36000;
			}
			else if (type == 164)
			{
				width = 128;
				height = 128;
				aiStyle = 16;
				friendly = true;
				hostile = true;
				penetrate = -1;
				tileCollide = false;
				alpha = 255;
				timeLeft = 2;
			}
			else if (type == 165)
			{
				netImportant = true;
				width = 12;
				height = 12;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
			}
			else if (type == 166)
			{
				width = 14;
				height = 14;
				aiStyle = 2;
				friendly = true;
				ranged = true;
				coldDamage = true;
			}
			else if (type == 167 || type == 168 || type == 169 || type == 170)
			{
				width = 14;
				height = 14;
				aiStyle = 34;
				friendly = true;
				ranged = true;
				timeLeft = 45;
			}
			else if (type == 171 || type == 505 || type == 506)
			{
				width = 14;
				height = 14;
				aiStyle = 35;
				penetrate = -1;
				tileCollide = false;
				timeLeft = 400;
			}
			else if (type == 172)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				light = 1f;
				ranged = true;
				coldDamage = true;
			}
			else if (type == 173)
			{
				width = 16;
				height = 16;
				aiStyle = 27;
				melee = true;
				penetrate = 1;
				light = 0.2f;
				alpha = 255;
				friendly = true;
			}
			else if (type == 174)
			{
				alpha = 255;
				width = 6;
				height = 6;
				aiStyle = 1;
				hostile = true;
				penetrate = -1;
				coldDamage = true;
			}
			else if (type == 175)
			{
				width = 34;
				height = 34;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 176)
			{
				alpha = 255;
				width = 6;
				height = 6;
				aiStyle = 1;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 177)
			{
				width = 10;
				height = 10;
				aiStyle = 28;
				alpha = 255;
				penetrate = -1;
				friendly = false;
				hostile = true;
				coldDamage = true;
			}
			else if (type == 178)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				alpha = 255;
				penetrate = -1;
				timeLeft = 2;
			}
			else if (type == 179)
			{
				knockBack = 6f;
				width = 10;
				height = 10;
				aiStyle = 10;
				friendly = true;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 180)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				hostile = true;
				penetrate = -1;
				light = 0.5f;
				alpha = 255;
				scale = 1.2f;
				timeLeft = 600;
				ranged = true;
				extraUpdates = 1;
			}
			else if (type == 181)
			{
				width = 8;
				height = 8;
				aiStyle = 36;
				friendly = true;
				penetrate = 3;
				alpha = 255;
				timeLeft = 600;
				extraUpdates = 3;
			}
			else if (type == 182)
			{
				light = 0.15f;
				width = 30;
				height = 30;
				aiStyle = 3;
				friendly = true;
				penetrate = 10;
				melee = true;
				extraUpdates = 1;
			}
			else if (type == 183)
			{
				width = 14;
				height = 22;
				aiStyle = 14;
				penetrate = 1;
				ranged = true;
				timeLeft = 180;
				thrown = true;
				friendly = true;
			}
			else if (type == 184)
			{
				width = 6;
				height = 6;
				aiStyle = 1;
				friendly = true;
				hostile = true;
				penetrate = -1;
				trap = true;
			}
			else if (type == 185)
			{
				width = 14;
				height = 14;
				aiStyle = 14;
				friendly = true;
				hostile = true;
				penetrate = -1;
				timeLeft = 900;
				trap = true;
			}
			else if (type == 186)
			{
				width = 10;
				height = 14;
				aiStyle = 37;
				friendly = true;
				tileCollide = false;
				ignoreWater = true;
				hostile = true;
				penetrate = -1;
				timeLeft = 300;
				trap = true;
			}
			else if (type == 187)
			{
				width = 6;
				height = 6;
				aiStyle = 38;
				alpha = 255;
				tileCollide = false;
				ignoreWater = true;
				timeLeft = 60;
				trap = true;
			}
			else if (type == 188)
			{
				width = 6;
				height = 6;
				aiStyle = 23;
				friendly = true;
				hostile = true;
				alpha = 255;
				penetrate = -1;
				extraUpdates = 2;
				trap = true;
			}
			else if (type == 189)
			{
				width = 8;
				height = 8;
				aiStyle = 36;
				friendly = true;
				penetrate = 4;
				alpha = 255;
				timeLeft = 600;
				magic = true;
				extraUpdates = 3;
			}
			else if (type == 190)
			{
				width = 22;
				height = 22;
				aiStyle = 39;
				friendly = true;
				penetrate = -1;
				alpha = 255;
				ranged = true;
			}
			else if (type >= 191 && type <= 194)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 26;
				penetrate = -1;
				timeLeft *= 5;
				minion = true;
				minionSlots = 1f;
				if (type == 192)
				{
					scale = 1.025f;
				}
				if (type == 193)
				{
					scale = 1.05f;
				}
				if (type == 194)
				{
					scale = 1.075f;
				}
			}
			else if (type == 195)
			{
				tileCollide = false;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
			}
			else if (type == 196)
			{
				width = 16;
				height = 16;
				aiStyle = 14;
				penetrate = -1;
				scale = 0.8f;
			}
			else if (type == 197)
			{
				netImportant = true;
				width = 42;
				height = 42;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 198)
			{
				netImportant = true;
				width = 26;
				height = 26;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 199)
			{
				netImportant = true;
				width = 28;
				height = 28;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 200)
			{
				netImportant = true;
				width = 28;
				height = 28;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 201)
			{
				knockBack = 12f;
				width = 24;
				height = 24;
				aiStyle = 17;
				penetrate = -1;
			}
			else if (type == 202)
			{
				knockBack = 12f;
				width = 24;
				height = 24;
				aiStyle = 17;
				penetrate = -1;
			}
			else if (type == 203)
			{
				knockBack = 12f;
				width = 24;
				height = 24;
				aiStyle = 17;
				penetrate = -1;
			}
			else if (type == 204)
			{
				knockBack = 12f;
				width = 24;
				height = 24;
				aiStyle = 17;
				penetrate = -1;
			}
			else if (type == 205)
			{
				knockBack = 12f;
				width = 24;
				height = 24;
				aiStyle = 17;
				penetrate = -1;
			}
			else if (type == 206)
			{
				width = 14;
				height = 14;
				aiStyle = 40;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				timeLeft = 600;
				magic = true;
			}
			else if (type == 207)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				light = 0.5f;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.2f;
				timeLeft = 600;
				ranged = true;
			}
			else if (type == 208)
			{
				netImportant = true;
				width = 18;
				height = 36;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 209)
			{
				width = 12;
				height = 32;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
				light = 0.5f;
			}
			else if (type == 210)
			{
				netImportant = true;
				width = 14;
				height = 30;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 211)
			{
				netImportant = true;
				width = 24;
				height = 24;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
				light = 1f;
				ignoreWater = true;
			}
			else if (type == 212)
			{
				width = 18;
				height = 18;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.12f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 213)
			{
				width = 22;
				height = 22;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 0.92f;
			}
			else if (type == 214)
			{
				width = 18;
				height = 18;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 215)
			{
				width = 18;
				height = 18;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.27f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 216)
			{
				width = 22;
				height = 22;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 0.93f;
			}
			else if (type == 217)
			{
				width = 18;
				height = 18;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 1.12f;
			}
			else if (type == 218)
			{
				width = 18;
				height = 18;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.28f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 219)
			{
				width = 22;
				height = 22;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 0.95f;
			}
			else if (type == 220)
			{
				width = 18;
				height = 18;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 1.2f;
			}
			else if (type == 221)
			{
				width = 20;
				height = 20;
				aiStyle = 41;
				friendly = true;
				tileCollide = false;
				ignoreWater = true;
				timeLeft = 120;
				penetrate = -1;
				scale = 1f + (float)Main.rand.Next(30) * 0.01f;
				extraUpdates = 2;
			}
			else if (type == 222)
			{
				width = 18;
				height = 18;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.3f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 223)
			{
				width = 22;
				height = 22;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 1f;
			}
			else if (type == 224)
			{
				width = 18;
				height = 18;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 1.1f;
			}
			else if (type == 225)
			{
				arrow = true;
				penetrate = 2;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				ranged = true;
			}
			else if (type == 226)
			{
				netImportant = true;
				width = 22;
				height = 42;
				aiStyle = 42;
				friendly = true;
				tileCollide = false;
				penetrate = -1;
				timeLeft *= 5;
				light = 0.4f;
				ignoreWater = true;
			}
			else if (type == 227)
			{
				netImportant = true;
				tileCollide = false;
				light = 0.1f;
				width = 14;
				height = 14;
				aiStyle = 43;
				friendly = true;
				penetrate = 1;
				timeLeft = 180;
			}
			else if (type == 228)
			{
				tileCollide = false;
				width = 30;
				height = 30;
				aiStyle = 44;
				friendly = true;
				scale = 1.1f;
				penetrate = -1;
			}
			else if (type == 229)
			{
				width = 30;
				height = 30;
				aiStyle = 44;
				friendly = true;
				penetrate = -1;
				light = 0.2f;
			}
			else if (type >= 230 && type <= 235)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
			}
			else if (type == 236)
			{
				netImportant = true;
				width = 34;
				height = 34;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 237)
			{
				netImportant = true;
				width = 28;
				height = 28;
				aiStyle = 45;
				penetrate = -1;
			}
			else if (type == 238)
			{
				tileCollide = false;
				ignoreWater = true;
				width = 54;
				height = 28;
				aiStyle = 45;
				penetrate = -1;
			}
			else if (type == 239)
			{
				ignoreWater = true;
				width = 4;
				height = 40;
				aiStyle = 45;
				friendly = true;
				penetrate = -1;
				timeLeft = 300;
				scale = 1.1f;
				magic = true;
				extraUpdates = 1;
			}
			else if (type == 240)
			{
				width = 16;
				height = 16;
				aiStyle = 2;
				hostile = true;
				penetrate = -1;
				alpha = 255;
			}
			else if (type == 241)
			{
				knockBack = 6f;
				width = 10;
				height = 10;
				aiStyle = 10;
				friendly = true;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 242)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				light = 0.5f;
				alpha = 255;
				extraUpdates = 7;
				scale = 1.18f;
				timeLeft = 600;
				ranged = true;
				ignoreWater = true;
			}
			else if (type == 243)
			{
				width = 28;
				height = 28;
				aiStyle = 45;
				penetrate = -1;
			}
			else if (type == 244)
			{
				tileCollide = false;
				ignoreWater = true;
				width = 54;
				height = 28;
				aiStyle = 45;
				penetrate = -1;
			}
			else if (type == 245)
			{
				ignoreWater = true;
				width = 4;
				height = 40;
				aiStyle = 45;
				friendly = true;
				penetrate = 2;
				timeLeft = 300;
				scale = 1.1f;
				magic = true;
				extraUpdates = 1;
			}
			else if (type == 246)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				ranged = true;
				alpha = 255;
				extraUpdates = 1;
			}
			else if (type == 247)
			{
				width = 34;
				height = 34;
				aiStyle = 15;
				friendly = true;
				penetrate = -1;
				melee = true;
			}
			else if (type == 248)
			{
				width = 18;
				height = 18;
				aiStyle = 1;
				friendly = true;
				melee = true;
			}
			else if (type == 249)
			{
				width = 12;
				height = 12;
				aiStyle = 2;
				friendly = true;
				ranged = true;
			}
			else if (type == 250)
			{
				width = 12;
				height = 12;
				aiStyle = 46;
				penetrate = -1;
				magic = true;
				alpha = 255;
				ignoreWater = true;
				scale = 1.25f;
			}
			else if (type == 251)
			{
				width = 14;
				height = 14;
				aiStyle = 46;
				friendly = true;
				penetrate = -1;
				magic = true;
				alpha = 255;
				light = 0.3f;
				tileCollide = false;
				ignoreWater = true;
				scale = 1.25f;
			}
			else if (type == 252)
			{
				width = 18;
				height = 18;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 1.1f;
			}
			else if (type == 253)
			{
				width = 16;
				height = 16;
				aiStyle = 8;
				friendly = true;
				light = 0.8f;
				alpha = 100;
				magic = true;
			}
			else if (type == 254)
			{
				width = 38;
				height = 38;
				aiStyle = 47;
				magic = true;
				timeLeft = 660;
				light = 0.5f;
			}
			else if (type == 255)
			{
				width = 8;
				height = 8;
				aiStyle = 48;
				friendly = true;
				magic = true;
				extraUpdates = 100;
				timeLeft = 100;
			}
			else if (type == 256)
			{
				netImportant = true;
				tileCollide = false;
				width = 6;
				height = 6;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				scale = 1f;
				timeLeft *= 10;
			}
			else if (type == 257)
			{
				ignoreWater = true;
				width = 4;
				height = 4;
				aiStyle = 1;
				hostile = true;
				penetrate = -1;
				light = 0.75f;
				alpha = 255;
				scale = 1.2f;
				timeLeft = 600;
				magic = true;
				coldDamage = true;
				extraUpdates = 1;
			}
			else if (type == 258)
			{
				width = 16;
				height = 16;
				aiStyle = 8;
				hostile = true;
				penetrate = -1;
				alpha = 100;
				timeLeft = 300;
			}
			else if (type == 259)
			{
				ignoreWater = true;
				tileCollide = false;
				width = 8;
				height = 8;
				aiStyle = 1;
				hostile = true;
				penetrate = -1;
				light = 0.3f;
				scale = 1.1f;
				magic = true;
				extraUpdates = 1;
			}
			else if (type == 260)
			{
				width = 8;
				height = 8;
				aiStyle = 48;
				friendly = true;
				magic = true;
				extraUpdates = 100;
				timeLeft = 200;
				penetrate = -1;
			}
			else if (type == 261)
			{
				width = 32;
				height = 34;
				aiStyle = 14;
				friendly = true;
				penetrate = 6;
				magic = true;
				ignoreWater = true;
			}
			else if (type == 262)
			{
				width = 30;
				height = 30;
				aiStyle = 13;
				friendly = true;
				penetrate = -1;
				alpha = 255;
				melee = true;
				extraUpdates = 1;
			}
			else if (type == 263)
			{
				width = 34;
				height = 34;
				alpha = 100;
				light = 0.5f;
				aiStyle = 18;
				friendly = true;
				penetrate = 5;
				tileCollide = true;
				scale = 1f;
				melee = true;
				timeLeft = 180;
				coldDamage = true;
			}
			else if (type == 264)
			{
				ignoreWater = true;
				width = 4;
				height = 40;
				aiStyle = 45;
				hostile = true;
				penetrate = -1;
				timeLeft = 120;
				scale = 1.1f;
				extraUpdates = 1;
			}
			else if (type == 265)
			{
				width = 12;
				height = 12;
				aiStyle = 1;
				alpha = 255;
				friendly = true;
				magic = true;
				penetrate = 4;
			}
			else if (type == 266)
			{
				netImportant = true;
				alpha = 75;
				width = 24;
				height = 16;
				aiStyle = 26;
				penetrate = -1;
				timeLeft *= 5;
				minion = true;
				minionSlots = 1f;
			}
			else if (type == 267)
			{
				alpha = 255;
				width = 14;
				height = 14;
				aiStyle = 1;
				friendly = true;
				ranged = true;
			}
			else if (type == 268)
			{
				netImportant = true;
				width = 18;
				height = 32;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 269)
			{
				netImportant = true;
				width = 20;
				height = 26;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 270)
			{
				width = 26;
				height = 26;
				aiStyle = 1;
				alpha = 255;
				friendly = true;
				magic = true;
				penetrate = 3;
			}
			else if (type == 271)
			{
				width = 20;
				height = 20;
				aiStyle = 13;
				friendly = true;
				penetrate = -1;
				alpha = 255;
				melee = true;
				scale = 1.2f;
			}
			else if (type == 272)
			{
				width = 32;
				height = 32;
				aiStyle = 3;
				friendly = true;
				scale = 0.9f;
				penetrate = -1;
				melee = true;
			}
			else if (type == 273)
			{
				width = 26;
				height = 26;
				aiStyle = 13;
				friendly = true;
				penetrate = -1;
				alpha = 255;
				melee = true;
			}
			else if (type == 274)
			{
				width = 42;
				height = 42;
				alpha = 100;
				light = 0.5f;
				aiStyle = 18;
				friendly = true;
				penetrate = 5;
				tileCollide = false;
				scale = 1.1f;
				melee = true;
				timeLeft = 180;
			}
			else if (type == 275)
			{
				alpha = 255;
				width = 14;
				height = 14;
				aiStyle = 1;
				hostile = true;
			}
			else if (type == 276)
			{
				alpha = 255;
				width = 14;
				height = 14;
				aiStyle = 1;
				hostile = true;
			}
			else if (type == 277)
			{
				alpha = 255;
				width = 38;
				height = 38;
				aiStyle = 14;
				hostile = true;
			}
			else if (type == 278)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				light = 1f;
				ranged = true;
				extraUpdates = 1;
			}
			else if (type == 279)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				light = 0.5f;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.25f;
				timeLeft = 600;
				ranged = true;
			}
			else if (type == 280)
			{
				width = 32;
				height = 32;
				aiStyle = 12;
				friendly = true;
				alpha = 255;
				penetrate = 5;
				extraUpdates = 2;
				ignoreWater = true;
				magic = true;
			}
			else if (type == 281)
			{
				width = 28;
				height = 28;
				aiStyle = 49;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				timeLeft = 600;
			}
			else if (type == 282)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				ranged = true;
				extraUpdates = 1;
			}
			else if (type == 283)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				light = 0.5f;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.25f;
				timeLeft = 600;
				ranged = true;
			}
			else if (type == 284)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				light = 0.5f;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.3f;
				timeLeft = 600;
				ranged = true;
			}
			else if (type == 285)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				light = 0.5f;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.3f;
				timeLeft = 600;
				ranged = true;
			}
			else if (type == 286)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				light = 0.5f;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.3f;
				timeLeft = 600;
				ranged = true;
			}
			else if (type == 287)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				light = 0.5f;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.3f;
				timeLeft = 600;
				ranged = true;
			}
			else if (type == 288)
			{
				width = 32;
				height = 32;
				aiStyle = 12;
				hostile = true;
				alpha = 255;
				penetrate = -1;
				extraUpdates = 2;
				ignoreWater = true;
				magic = true;
			}
			else if (type == 289)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				alpha = 255;
				penetrate = -1;
				timeLeft = 2;
			}
			else if (type == 290)
			{
				width = 4;
				height = 4;
				aiStyle = 48;
				hostile = true;
				magic = true;
				extraUpdates = 100;
				timeLeft = 100;
				penetrate = -1;
			}
			else if (type == 291)
			{
				width = 12;
				height = 12;
				aiStyle = 50;
				hostile = true;
				alpha = 255;
				magic = true;
				tileCollide = false;
				penetrate = -1;
			}
			else if (type == 292)
			{
				width = 130;
				height = 130;
				aiStyle = 50;
				hostile = true;
				alpha = 255;
				magic = true;
				tileCollide = false;
				penetrate = -1;
			}
			else if (type == 293)
			{
				width = 12;
				height = 12;
				aiStyle = 51;
				hostile = true;
				alpha = 255;
				magic = true;
				tileCollide = false;
				penetrate = -1;
				extraUpdates = 1;
			}
			else if (type == 294)
			{
				width = 4;
				height = 4;
				aiStyle = 48;
				friendly = true;
				magic = true;
				extraUpdates = 100;
				timeLeft = 300;
				penetrate = -1;
			}
			else if (type == 295)
			{
				width = 12;
				height = 12;
				aiStyle = 50;
				friendly = true;
				alpha = 255;
				magic = true;
				tileCollide = true;
			}
			else if (type == 296)
			{
				width = 150;
				height = 150;
				aiStyle = 50;
				friendly = true;
				alpha = 255;
				magic = true;
				tileCollide = false;
				penetrate = -1;
			}
			else if (type == 297)
			{
				width = 12;
				height = 12;
				aiStyle = 51;
				friendly = true;
				alpha = 255;
				magic = true;
				extraUpdates = 1;
			}
			else if (type == 298)
			{
				width = 6;
				height = 6;
				aiStyle = 52;
				alpha = 255;
				magic = true;
				tileCollide = false;
				extraUpdates = 3;
			}
			else if (type == 299)
			{
				width = 6;
				height = 6;
				aiStyle = 1;
				hostile = true;
				alpha = 255;
				penetrate = -1;
				extraUpdates = 2;
				magic = true;
				ignoreWater = true;
				tileCollide = false;
			}
			else if (type == 300)
			{
				width = 38;
				height = 38;
				aiStyle = 2;
				hostile = true;
				penetrate = -1;
				ignoreWater = true;
				tileCollide = false;
			}
			else if (type == 301)
			{
				width = 38;
				height = 38;
				aiStyle = 3;
				friendly = true;
				penetrate = -1;
				melee = true;
				extraUpdates = 2;
			}
			else if (type == 302)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				hostile = true;
				penetrate = -1;
				light = 0.3f;
				alpha = 255;
				extraUpdates = 7;
				scale = 1.18f;
				timeLeft = 300;
				ranged = true;
				ignoreWater = true;
			}
			else if (type == 303)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				hostile = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 304)
			{
				alpha = 255;
				width = 30;
				height = 30;
				aiStyle = 2;
				friendly = true;
				penetrate = 1;
				melee = true;
				light = 0.2f;
				ignoreWater = true;
				extraUpdates = 0;
			}
			else if (type == 305)
			{
				width = 6;
				height = 6;
				aiStyle = 52;
				alpha = 255;
				tileCollide = false;
				extraUpdates = 10;
			}
			else if (type == 306)
			{
				alpha = 255;
				width = 14;
				height = 14;
				aiStyle = 2;
				friendly = true;
				penetrate = 1;
				melee = true;
				ignoreWater = true;
				extraUpdates = 1;
			}
			else if (type == 307)
			{
				width = 16;
				height = 16;
				aiStyle = 36;
				penetrate = 1;
				alpha = 255;
				timeLeft = 600;
				melee = true;
				extraUpdates = 3;
			}
			else if (type == 308)
			{
				width = 80;
				height = 74;
				aiStyle = 53;
				timeLeft = 7200;
				light = 0.25f;
				ignoreWater = true;
				coldDamage = true;
			}
			else if (type == 309)
			{
				width = 14;
				height = 14;
				aiStyle = 28;
				alpha = 255;
				penetrate = 1;
				friendly = true;
				extraUpdates = 3;
				coldDamage = true;
			}
			else if (type == 310)
			{
				netImportant = true;
				width = 6;
				height = 6;
				aiStyle = 33;
				friendly = true;
				penetrate = -1;
				alpha = 255;
				timeLeft = 36000;
			}
			else if (type == 311)
			{
				width = 10;
				height = 12;
				aiStyle = 1;
				friendly = true;
				penetrate = 3;
				alpha = 255;
				timeLeft = 600;
				ranged = true;
			}
			else if (type == 312)
			{
				alpha = 255;
				width = 32;
				height = 32;
				aiStyle = 1;
				friendly = true;
				ranged = true;
				timeLeft = 300;
			}
			else if (type == 313)
			{
				netImportant = true;
				width = 30;
				height = 30;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 314)
			{
				netImportant = true;
				width = 24;
				height = 40;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 315)
			{
				netImportant = true;
				width = 14;
				height = 14;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
			}
			else if (type == 316)
			{
				alpha = 255;
				width = 16;
				height = 16;
				aiStyle = 36;
				friendly = true;
				penetrate = 1;
				timeLeft = 600;
				magic = true;
			}
			else if (type == 317)
			{
				netImportant = true;
				width = 28;
				height = 28;
				aiStyle = 54;
				penetrate = 1;
				timeLeft *= 5;
				minion = true;
				minionSlots = 1f;
			}
			else if (type == 318)
			{
				width = 12;
				height = 14;
				aiStyle = 2;
				friendly = true;
				thrown = true;
			}
			else if (type == 319)
			{
				netImportant = true;
				width = 36;
				height = 30;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 320)
			{
				width = 34;
				height = 34;
				aiStyle = 3;
				friendly = true;
				penetrate = -1;
				melee = true;
			}
			else if (type == 321)
			{
				width = 30;
				height = 30;
				aiStyle = 55;
				friendly = true;
				melee = true;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 322)
			{
				netImportant = true;
				width = 14;
				height = 14;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
			}
			else if (type == 323)
			{
				penetrate = 10;
				extraUpdates = 3;
				width = 14;
				height = 14;
				aiStyle = 1;
				alpha = 255;
				friendly = true;
				ranged = true;
				scale = 0.8f;
			}
			else if (type == 324)
			{
				netImportant = true;
				width = 26;
				height = 38;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 325)
			{
				alpha = 255;
				penetrate = -1;
				width = 14;
				height = 14;
				aiStyle = 1;
				hostile = true;
				tileCollide = false;
			}
			else if (type >= 326 && type <= 328)
			{
				if (type == 326)
				{
					width = 14;
					height = 16;
				}
				else if (type == 327)
				{
					width = 12;
					height = 14;
				}
				else
				{
					width = 6;
					height = 12;
				}
				aiStyle = 14;
				hostile = true;
				penetrate = -1;
				timeLeft = 360;
			}
			else if (type == 329)
			{
				width = 80;
				height = 80;
				light = 0.25f;
				aiStyle = 56;
				hostile = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft = 420;
			}
			else if (type == 330)
			{
				width = 22;
				height = 22;
				aiStyle = 2;
				friendly = true;
				penetrate = 6;
				thrown = true;
			}
			else if (type == 331)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
			}
			else if (type == 332)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
				light = 0.5f;
			}
			else if (type == 333)
			{
				width = 38;
				height = 38;
				aiStyle = 3;
				friendly = true;
				scale = 0.9f;
				penetrate = -1;
				melee = true;
			}
			else if (type == 334)
			{
				netImportant = true;
				width = 28;
				height = 28;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 335)
			{
				width = 22;
				height = 22;
				aiStyle = 2;
				friendly = true;
				penetrate = 1;
				melee = true;
			}
			else if (type == 336)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				magic = true;
				scale = 0.8f;
				extraUpdates = 1;
			}
			else if (type == 337)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				magic = true;
				tileCollide = false;
				coldDamage = true;
				extraUpdates = 1;
			}
			else if (type == 338 || type == 339 || type == 340 || type == 341)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				penetrate = -1;
				friendly = true;
				ranged = true;
				scale = 0.9f;
			}
			else if (type == 342)
			{
				width = 22;
				height = 2;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.1f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				coldDamage = true;
			}
			else if (type == 343)
			{
				alpha = 255;
				width = 10;
				height = 10;
				aiStyle = 57;
				friendly = true;
				melee = true;
				scale = 1.1f;
				penetrate = 3;
				coldDamage = true;
			}
			else if (type == 344)
			{
				width = 26;
				height = 26;
				aiStyle = 1;
				friendly = true;
				scale = 0.9f;
				alpha = 255;
				melee = true;
				coldDamage = true;
			}
			else if (type == 345)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				hostile = true;
				scale = 0.8f;
			}
			else if (type == 346)
			{
				width = 18;
				height = 18;
				aiStyle = 14;
				hostile = true;
				penetrate = -1;
				timeLeft = 300;
			}
			else if (type == 347)
			{
				width = 6;
				height = 6;
				aiStyle = 2;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 348)
			{
				aiStyle = 1;
				width = 48;
				height = 48;
				hostile = true;
				penetrate = -1;
				tileCollide = false;
				coldDamage = true;
				extraUpdates = 1;
			}
			else if (type == 349)
			{
				aiStyle = 1;
				width = 12;
				height = 12;
				hostile = true;
				penetrate = -1;
				coldDamage = true;
			}
			else if (type == 350)
			{
				alpha = 255;
				penetrate = -1;
				width = 14;
				height = 14;
				aiStyle = 1;
				hostile = true;
				tileCollide = false;
				timeLeft /= 2;
			}
			else if (type == 351)
			{
				alpha = 255;
				penetrate = -1;
				width = 24;
				height = 24;
				aiStyle = 58;
				hostile = true;
				tileCollide = false;
			}
			else if (type == 352)
			{
				width = 30;
				height = 30;
				aiStyle = 14;
				hostile = true;
				penetrate = -1;
				timeLeft /= 3;
			}
			else if (type == 353)
			{
				netImportant = true;
				width = 18;
				height = 28;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 354)
			{
				knockBack = 6f;
				width = 10;
				height = 10;
				aiStyle = 10;
				friendly = true;
				penetrate = -1;
				extraUpdates = 1;
			}
			else if (type == 355)
			{
				width = 12;
				height = 12;
				aiStyle = 1;
				alpha = 255;
				friendly = true;
				magic = true;
				penetrate = 7;
			}
			else if (type == 356)
			{
				width = 6;
				height = 6;
				aiStyle = 59;
				alpha = 255;
				magic = true;
				tileCollide = false;
				extraUpdates = 3;
			}
			else if (type == 357)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 6;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.2f;
				timeLeft = 600;
				ranged = true;
			}
			else if (type == 358)
			{
				width = 18;
				height = 18;
				aiStyle = 60;
				alpha = 255;
				penetrate = -1;
				extraUpdates = 2;
				ignoreWater = true;
			}
			else if (type == 359)
			{
				width = 14;
				height = 14;
				aiStyle = 28;
				alpha = 255;
				magic = true;
				penetrate = 2;
				friendly = true;
				coldDamage = true;
			}
			else if ((type >= 360 && type <= 366) || type == 381 || type == 382)
			{
				width = 14;
				height = 14;
				aiStyle = 61;
				penetrate = -1;
				bobber = true;
			}
			else if (type == 367)
			{
				width = 18;
				height = 18;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.1f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 368)
			{
				width = 18;
				height = 18;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 369)
			{
				width = 22;
				height = 22;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 370)
			{
				width = 14;
				height = 14;
				aiStyle = 2;
				friendly = true;
				penetrate = 1;
			}
			else if (type == 371)
			{
				width = 14;
				height = 14;
				aiStyle = 2;
				friendly = true;
				penetrate = 1;
			}
			else if (type == 372)
			{
				width = 18;
				height = 18;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
			}
			else if (type == 373)
			{
				netImportant = true;
				width = 24;
				height = 26;
				aiStyle = 62;
				penetrate = -1;
				timeLeft *= 5;
				minion = true;
				minionSlots = 1f;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 374)
			{
				width = 10;
				height = 10;
				aiStyle = 0;
				friendly = true;
				penetrate = 1;
				aiStyle = 1;
				tileCollide = true;
				scale *= 0.9f;
			}
			else if (type == 375)
			{
				netImportant = true;
				width = 34;
				height = 26;
				aiStyle = 62;
				penetrate = -1;
				timeLeft *= 5;
				minion = true;
				minionSlots = 1f;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 376)
			{
				width = 12;
				height = 12;
				aiStyle = 0;
				friendly = true;
				penetrate = -1;
				aiStyle = 1;
				tileCollide = true;
				timeLeft = 100;
				alpha = 255;
				extraUpdates = 1;
			}
			else if (type == 377)
			{
				width = 66;
				height = 50;
				aiStyle = 53;
				timeLeft = 7200;
				ignoreWater = true;
			}
			else if (type == 378)
			{
				width = 16;
				height = 16;
				aiStyle = 14;
				friendly = true;
				penetrate = -1;
				timeLeft = 60;
				scale = 0.9f;
			}
			else if (type == 379)
			{
				width = 14;
				height = 10;
				aiStyle = 63;
				friendly = true;
				timeLeft = 300;
				penetrate = 1;
			}
			else if (type == 380)
			{
				netImportant = true;
				width = 26;
				height = 26;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 383)
			{
				width = 34;
				height = 34;
				aiStyle = 3;
				friendly = true;
				penetrate = -1;
				melee = true;
			}
			else if (type == 384)
			{
				width = 150;
				height = 42;
				hostile = true;
				penetrate = -1;
				aiStyle = 64;
				tileCollide = false;
				ignoreWater = true;
				alpha = 255;
				timeLeft = 540;
			}
			else if (type == 385)
			{
				width = 30;
				height = 30;
				hostile = true;
				penetrate = -1;
				aiStyle = 65;
				alpha = 255;
				timeLeft = 300;
			}
			else if (type == 386)
			{
				width = 150;
				height = 42;
				hostile = true;
				penetrate = -1;
				aiStyle = 64;
				tileCollide = false;
				ignoreWater = true;
				alpha = 255;
				timeLeft = 840;
			}
			else if (type == 387)
			{
				netImportant = true;
				width = 40;
				height = 20;
				aiStyle = 66;
				penetrate = -1;
				timeLeft *= 5;
				minion = true;
				minionSlots = 0.5f;
				tileCollide = false;
				ignoreWater = true;
				friendly = true;
			}
			else if (type == 388)
			{
				netImportant = true;
				width = 40;
				height = 20;
				aiStyle = 66;
				penetrate = -1;
				timeLeft *= 5;
				minion = true;
				minionSlots = 0.5f;
				tileCollide = false;
				ignoreWater = true;
				friendly = true;
			}
			else if (type == 389)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 3;
				light = 0.75f;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.2f;
				timeLeft = 600;
			}
			else if (type == 390 || type == 391 || type == 392)
			{
				width = 18;
				height = 18;
				aiStyle = 26;
				penetrate = -1;
				netImportant = true;
				timeLeft *= 5;
				minion = true;
				minionSlots = 0.75f;
				int type2 = type;
				int num2 = 391;
				if (type != 392)
				{
				}
			}
			else if (type == 393 || type == 394 || type == 395)
			{
				width = 20;
				height = 30;
				aiStyle = 67;
				penetrate = -1;
				netImportant = true;
				timeLeft *= 5;
				minion = true;
				minionSlots = 1f;
				int type3 = type;
				int num3 = 394;
				if (type != 395)
				{
				}
			}
			else if (type == 396)
			{
				width = 18;
				height = 18;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
				alpha = 100;
			}
			else if (type == 397)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				thrown = true;
				tileCollide = false;
			}
			else if (type == 398)
			{
				netImportant = true;
				width = 18;
				height = 38;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 399)
			{
				width = 14;
				height = 14;
				aiStyle = 68;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				thrown = true;
				noEnchantments = true;
			}
			else if (type >= 400 && type <= 402)
			{
				if (type == 400)
				{
					width = 14;
					height = 16;
				}
				else if (type == 401)
				{
					width = 12;
					height = 14;
				}
				else
				{
					width = 6;
					height = 12;
				}
				penetrate = 3;
				aiStyle = 14;
				friendly = true;
				timeLeft = 360;
				ranged = true;
				noEnchantments = true;
			}
			else if (type == 403)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
			}
			else if (type == 404)
			{
				width = 26;
				height = 26;
				aiStyle = 69;
				friendly = true;
				penetrate = -1;
				alpha = 255;
				melee = true;
			}
			else if (type == 405)
			{
				width = 14;
				height = 14;
				aiStyle = 70;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				timeLeft = 90;
				melee = true;
				noEnchantments = true;
			}
			else if (type == 406)
			{
				width = 14;
				height = 14;
				aiStyle = 60;
				alpha = 255;
				penetrate = -1;
				extraUpdates = 2;
				ignoreWater = true;
			}
			else if (type == 407)
			{
				netImportant = true;
				width = 28;
				height = 40;
				aiStyle = 62;
				penetrate = -1;
				timeLeft *= 5;
				minion = true;
				friendly = true;
				minionSlots = 1f;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 408)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				alpha = 255;
				ignoreWater = true;
			}
			else if (type == 409)
			{
				width = 30;
				height = 30;
				penetrate = -1;
				aiStyle = 71;
				alpha = 255;
				timeLeft = 360;
				friendly = true;
				tileCollide = true;
				extraUpdates = 2;
				magic = true;
				ignoreWater = true;
			}
			else if (type == 410)
			{
				width = 14;
				height = 14;
				aiStyle = 72;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				timeLeft = 50;
				magic = true;
				ignoreWater = true;
			}
			else if (type >= 411 && type <= 414)
			{
				switch (type)
				{
				}
				width = 10;
				height = 10;
				aiStyle = 10;
			}
			else if (type == 415 || type == 416 || type == 417 || type == 418)
			{
				width = 14;
				height = 14;
				aiStyle = 34;
				friendly = true;
				ranged = true;
				timeLeft = 45;
			}
			else if (type >= 419 && type <= 422)
			{
				width = 4;
				height = 4;
				aiStyle = 73;
				friendly = true;
			}
			else if (type == 423)
			{
				netImportant = true;
				width = 28;
				height = 28;
				aiStyle = 62;
				penetrate = -1;
				timeLeft *= 5;
				minion = true;
				friendly = true;
				minionSlots = 1f;
				ignoreWater = true;
			}
			else if (type >= 424 && type <= 426)
			{
				width = 24;
				height = 24;
				aiStyle = 1;
				friendly = true;
				magic = true;
				tileCollide = false;
				extraUpdates = 2;
			}
			else if (type == 427)
			{
				width = 22;
				height = 56;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				glowMask = 2;
			}
			else if (type == 428)
			{
				width = 26;
				height = 54;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				glowMask = 3;
			}
			else if (type == 429)
			{
				width = 18;
				height = 56;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				glowMask = 7;
			}
			else if (type == 430)
			{
				width = 30;
				height = 54;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				glowMask = 8;
			}
			else if (type == 431)
			{
				width = 28;
				height = 64;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 432)
			{
				width = 30;
				height = 54;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 610)
			{
				width = 28;
				height = 64;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				glowMask = 179;
			}
			else if (type == 609)
			{
				width = 30;
				height = 54;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				glowMask = 180;
			}
			else if (type == 433)
			{
				width = 8;
				height = 8;
				aiStyle = 48;
				friendly = true;
				extraUpdates = 100;
				timeLeft = 100;
				ignoreWater = true;
			}
			else if (type == 434)
			{
				width = 1;
				height = 1;
				aiStyle = 74;
				friendly = true;
				extraUpdates = 100;
				penetrate = -1;
			}
			else if (type == 435)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				hostile = true;
				ignoreWater = true;
			}
			else if (type == 436)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				hostile = true;
				ignoreWater = true;
			}
			else if (type == 437)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				hostile = true;
				extraUpdates = 2;
				ignoreWater = true;
			}
			else if (type == 438)
			{
				width = 8;
				height = 8;
				aiStyle = 1;
				hostile = true;
				alpha = 255;
				extraUpdates = 3;
				ignoreWater = true;
			}
			else if (type == 439)
			{
				width = 22;
				height = 22;
				aiStyle = 75;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				magic = true;
				ignoreWater = true;
			}
			else if (type == 440)
			{
				width = 5;
				height = 5;
				aiStyle = 1;
				friendly = true;
				alpha = 255;
				extraUpdates = 2;
				scale = 1f;
				timeLeft = 600;
				magic = true;
				ignoreWater = true;
			}
			else if (type == 441)
			{
				width = 1;
				height = 1;
				aiStyle = 76;
				ignoreWater = true;
				tileCollide = false;
			}
			else if (type == 442)
			{
				width = 14;
				height = 14;
				aiStyle = 1;
				friendly = true;
				alpha = 255;
				scale = 1f;
				timeLeft = 600;
				ranged = true;
			}
			else if (type == 443)
			{
				width = 80;
				height = 80;
				aiStyle = 77;
				friendly = true;
				alpha = 255;
				scale = 1f;
				ranged = true;
				ignoreWater = true;
				tileCollide = false;
				penetrate = -1;
			}
			else if (type == 444)
			{
				width = 10;
				height = 10;
				aiStyle = 78;
				friendly = true;
				alpha = 255;
				scale = 1f;
				ranged = true;
				ignoreWater = true;
				extraUpdates = 1;
			}
			else if (type == 445)
			{
				width = 10;
				height = 10;
				aiStyle = 75;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				melee = true;
				ignoreWater = true;
				ownerHitCheck = true;
			}
			else if (type == 446)
			{
				netImportant = true;
				width = 14;
				height = 14;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
				light = 0.7f;
			}
			else if (type == 447)
			{
				width = 30;
				height = 30;
				aiStyle = 79;
				hostile = true;
				penetrate = -1;
				tileCollide = false;
				ignoreWater = true;
				timeLeft = 240;
			}
			else if (type == 448)
			{
				width = 14;
				height = 14;
				aiStyle = 80;
				hostile = true;
				penetrate = -1;
				tileCollide = false;
			}
			else if (type == 449)
			{
				width = 5;
				height = 5;
				aiStyle = 1;
				hostile = true;
				alpha = 255;
				extraUpdates = 1;
				scale = 1f;
				timeLeft = 600;
				ignoreWater = true;
			}
			else if (type == 450)
			{
				width = 14;
				height = 14;
				aiStyle = 14;
				hostile = true;
				penetrate = -1;
				timeLeft = 360;
			}
			else if (type == 451)
			{
				width = 16;
				height = 16;
				aiStyle = 81;
				melee = true;
				penetrate = 3;
				light = 0.2f;
				alpha = 255;
				friendly = true;
			}
			else if (type == 452)
			{
				width = 14;
				height = 14;
				aiStyle = 82;
				hostile = true;
				penetrate = -1;
				alpha = 255;
				timeLeft = 600;
			}
			else if (type == 453)
			{
				width = 1;
				height = 1;
				aiStyle = 76;
				ignoreWater = true;
				tileCollide = false;
			}
			else if (type == 454)
			{
				width = 46;
				height = 46;
				aiStyle = 83;
				hostile = true;
				penetrate = -1;
				alpha = 255;
				timeLeft = 600;
				tileCollide = false;
			}
			else if (type == 455)
			{
				width = 36;
				height = 36;
				aiStyle = 84;
				hostile = true;
				penetrate = -1;
				alpha = 255;
				timeLeft = 600;
				tileCollide = false;
			}
			else if (type == 456)
			{
				width = 16;
				height = 16;
				aiStyle = 85;
				hostile = true;
				penetrate = -1;
				alpha = 255;
				timeLeft = 600;
				tileCollide = false;
			}
			else if (type == 459)
			{
				width = 22;
				height = 22;
				aiStyle = 1;
				friendly = true;
				magic = true;
				alpha = 255;
				scale = 1f;
				ignoreWater = true;
				extraUpdates = 1;
			}
			else if (type == 460)
			{
				width = 14;
				height = 18;
				aiStyle = 75;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				magic = true;
				ignoreWater = true;
			}
			else if (type == 461)
			{
				width = 18;
				height = 18;
				aiStyle = 84;
				friendly = true;
				magic = true;
				penetrate = -1;
				alpha = 255;
				tileCollide = false;
				hide = true;
			}
			else if (type == 462)
			{
				width = 8;
				height = 8;
				aiStyle = 1;
				hostile = true;
				alpha = 255;
				extraUpdates = 3;
				ignoreWater = true;
				tileCollide = false;
			}
			else if (type == 463)
			{
				width = 48;
				height = 48;
				aiStyle = 6;
				friendly = true;
				tileCollide = false;
				penetrate = -1;
				alpha = 255;
				ignoreWater = true;
			}
			else if (type == 464)
			{
				width = 60;
				height = 60;
				aiStyle = 86;
				hostile = true;
				tileCollide = false;
				penetrate = -1;
				alpha = 255;
				ignoreWater = true;
			}
			else if (type == 467)
			{
				width = 40;
				height = 40;
				aiStyle = 1;
				hostile = true;
				alpha = 255;
				ignoreWater = true;
				extraUpdates = 1;
			}
			else if (type == 468)
			{
				width = 40;
				height = 40;
				aiStyle = 1;
				hostile = true;
				alpha = 255;
				ignoreWater = true;
				extraUpdates = 1;
			}
			else if (type == 465)
			{
				width = 80;
				height = 80;
				aiStyle = 88;
				hostile = true;
				alpha = 255;
				ignoreWater = true;
				tileCollide = false;
			}
			else if (type == 466)
			{
				width = 14;
				height = 14;
				aiStyle = 88;
				hostile = true;
				alpha = 255;
				ignoreWater = true;
				tileCollide = true;
				extraUpdates = 4;
				timeLeft = 120 * (extraUpdates + 1);
			}
			else if (type == 491)
			{
				width = 26;
				height = 26;
				aiStyle = 9;
				friendly = true;
				melee = true;
				penetrate = -1;
			}
			else if (type == 500)
			{
				width = 20;
				height = 20;
				aiStyle = 67;
				penetrate = -1;
				netImportant = true;
				timeLeft *= 5;
				friendly = true;
				ignoreWater = true;
				scale = 0.8f;
			}
			else if (type == 499)
			{
				netImportant = true;
				width = 34;
				height = 34;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 469)
			{
				alpha = 255;
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				ranged = true;
			}
			else if (type == 470)
			{
				width = 10;
				height = 10;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
			}
			else if (type == 471)
			{
				width = 16;
				height = 16;
				aiStyle = 2;
				scale = 1.2f;
				hostile = true;
				ranged = true;
			}
			else if (type == 472)
			{
				width = 8;
				height = 8;
				aiStyle = 0;
				hostile = true;
				penetrate = -1;
				aiStyle = 1;
				tileCollide = true;
				timeLeft = 50;
			}
			else if (type == 474)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				ranged = true;
			}
			else if (type == 473)
			{
				netImportant = true;
				width = 8;
				height = 8;
				aiStyle = 14;
				penetrate = -1;
				alpha = 75;
				light = 1f;
				timeLeft *= 2;
			}
			else if (type == 475)
			{
				width = 14;
				height = 14;
				aiStyle = 35;
				penetrate = -1;
				tileCollide = false;
				timeLeft = 400;
			}
			else if (type == 476)
			{
				width = 200;
				height = 200;
				aiStyle = -1;
				friendly = true;
				tileCollide = false;
				penetrate = -1;
				alpha = 255;
				ignoreWater = true;
				timeLeft = 3;
			}
			else if (type == 477)
			{
				alpha = 255;
				width = 14;
				height = 14;
				aiStyle = 1;
				friendly = true;
				penetrate = 7;
				extraUpdates = 1;
				ranged = true;
			}
			else if (type == 478)
			{
				alpha = 255;
				width = 14;
				height = 14;
				aiStyle = 1;
				friendly = true;
				timeLeft = 300;
				ranged = true;
			}
			else if (type == 479)
			{
				alpha = 255;
				width = 14;
				height = 14;
				aiStyle = 1;
				friendly = true;
				ranged = true;
			}
			else if (type == 480)
			{
				alpha = 255;
				width = 12;
				height = 12;
				penetrate = 3;
				aiStyle = 14;
				friendly = true;
				timeLeft = 120;
				ranged = true;
				noEnchantments = true;
			}
			else if (type == 481)
			{
				width = 22;
				height = 22;
				aiStyle = 13;
				friendly = true;
				penetrate = -1;
				alpha = 255;
				melee = true;
				extraUpdates = 0;
			}
			else if (type == 482)
			{
				width = 16;
				height = 200;
				aiStyle = 87;
				friendly = true;
				tileCollide = false;
				penetrate = 20;
				alpha = 255;
				ignoreWater = true;
				timeLeft = 2700;
			}
			else if (type == 483)
			{
				arrow = true;
				width = 14;
				height = 14;
				aiStyle = 14;
				friendly = true;
				melee = true;
			}
			else if (type == 484)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				melee = true;
				extraUpdates = 1;
			}
			else if (type == 485)
			{
				arrow = true;
				width = 24;
				height = 24;
				aiStyle = 1;
				friendly = true;
				ranged = true;
				penetrate = -1;
			}
			else if (type >= 486 && type <= 489)
			{
				if (type == 486)
				{
					width = 12;
					height = 12;
				}
				else if (type == 487)
				{
					width = 22;
					height = 22;
				}
				else if (type == 488)
				{
					width = 12;
					height = 12;
					light = 0.3f;
				}
				else if (type == 489)
				{
					width = 20;
					height = 16;
				}
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
			}
			else if (type == 492)
			{
				netImportant = true;
				width = 18;
				height = 32;
				aiStyle = 90;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 490)
			{
				width = 14;
				height = 14;
				aiStyle = 89;
				hostile = true;
				alpha = 255;
				ignoreWater = true;
				tileCollide = false;
				timeLeft = 600;
				netImportant = true;
			}
			else if (type == 493 || type == 494)
			{
				width = 32;
				height = 32;
				aiStyle = 4;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				alpha = 255;
				ignoreWater = true;
				magic = true;
				light = 0.2f;
			}
			else if (type == 495)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				ranged = true;
				penetrate = 3;
			}
			else if (type == 496)
			{
				alpha = 255;
				width = 40;
				height = 40;
				aiStyle = 91;
				friendly = true;
				magic = true;
				MaxUpdates = 3;
				penetrate = 3;
			}
			else if (type == 497)
			{
				width = 30;
				height = 30;
				aiStyle = 2;
				friendly = true;
				penetrate = 3;
				melee = true;
			}
			else if (type == 498)
			{
				width = 6;
				height = 6;
				aiStyle = 1;
				hostile = true;
				penetrate = -1;
				timeLeft = 180;
			}
			else if (type == 501)
			{
				width = 14;
				height = 14;
				aiStyle = 2;
				scale = 1.1f;
				hostile = true;
				ranged = true;
			}
			else if (type == 502)
			{
				width = 16;
				height = 16;
				aiStyle = 8;
				friendly = true;
				melee = true;
				penetrate = 5;
			}
			else if (type == 503)
			{
				width = 24;
				height = 24;
				aiStyle = 5;
				friendly = true;
				penetrate = 2;
				alpha = 255;
				tileCollide = false;
				melee = true;
				extraUpdates = 1;
			}
			else if (type == 504)
			{
				width = 10;
				height = 10;
				aiStyle = 2;
				friendly = true;
				magic = true;
				alpha = 255;
				penetrate = 2;
			}
			else if (type == 507)
			{
				width = 16;
				height = 16;
				aiStyle = 1;
				friendly = true;
				melee = true;
				penetrate = 3;
			}
			else if (type == 508)
			{
				width = 16;
				height = 16;
				aiStyle = 1;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 509)
			{
				width = 22;
				height = 22;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 1.2f;
			}
			else if (type == 510)
			{
				width = 18;
				height = 18;
				aiStyle = 2;
				friendly = true;
				penetrate = 1;
				magic = true;
			}
			else if (type == 511)
			{
				width = 32;
				height = 32;
				aiStyle = 92;
				friendly = true;
				penetrate = -1;
				scale = 1.1f;
				magic = true;
			}
			else if (type == 512)
			{
				width = 40;
				height = 38;
				aiStyle = 92;
				friendly = true;
				penetrate = -1;
				scale = 1.1f;
				magic = true;
			}
			else if (type == 513)
			{
				width = 30;
				height = 28;
				aiStyle = 92;
				friendly = true;
				penetrate = -1;
				scale = 1.1f;
				magic = true;
			}
			else if (type == 514)
			{
				width = 10;
				height = 10;
				aiStyle = 93;
				friendly = true;
				penetrate = 3;
				alpha = 255;
				ranged = true;
			}
			else if (type == 515)
			{
				netImportant = true;
				width = 6;
				height = 6;
				aiStyle = 14;
				penetrate = -1;
				alpha = 75;
				light = 1f;
				timeLeft *= 5;
			}
			else if (type == 516)
			{
				width = 22;
				height = 22;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
			}
			else if (type == 517)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				thrown = true;
			}
			else if (type == 518)
			{
				width = 32;
				height = 32;
				aiStyle = 94;
				friendly = true;
				alpha = 255;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 519)
			{
				width = 24;
				height = 24;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
			}
			else if (type == 520)
			{
				width = 22;
				height = 22;
				aiStyle = 2;
				friendly = true;
				penetrate = 3;
				thrown = true;
			}
			else if (type == 521)
			{
				width = 14;
				height = 14;
				aiStyle = 29;
				alpha = 255;
				magic = true;
				penetrate = 1;
				friendly = true;
			}
			else if (type == 522)
			{
				width = 8;
				height = 8;
				aiStyle = 29;
				alpha = 255;
				magic = true;
				penetrate = 1;
				friendly = true;
			}
			else if (type == 523)
			{
				width = 32;
				height = 32;
				aiStyle = 95;
				alpha = 255;
				ranged = true;
				penetrate = 1;
				friendly = true;
			}
			else if (type == 524)
			{
				width = 10;
				height = 10;
				aiStyle = 96;
				friendly = true;
				alpha = 255;
				penetrate = -1;
				ignoreWater = true;
				melee = true;
				extraUpdates = 5;
			}
			else if (type == 525)
			{
				width = 30;
				height = 24;
				aiStyle = 97;
				tileCollide = false;
				timeLeft = 10800;
			}
			else if (type == 526)
			{
				width = 8;
				height = 8;
				aiStyle = 98;
				tileCollide = false;
				timeLeft = 120;
				alpha = 255;
			}
			else if (type >= 527 && type <= 531)
			{
				knockBack = 12f;
				width = 24;
				height = 24;
				aiStyle = 17;
				penetrate = -1;
			}
			else if (type == 532)
			{
				width = 16;
				height = 16;
				aiStyle = 1;
				scale = 1f;
				friendly = true;
				thrown = true;
				penetrate = 3;
				extraUpdates = 1;
			}
			else if (type == 533)
			{
				netImportant = true;
				width = 20;
				height = 20;
				aiStyle = 66;
				penetrate = -1;
				timeLeft *= 5;
				minion = true;
				minionSlots = 1f;
				tileCollide = false;
				ignoreWater = true;
				friendly = true;
			}
			else if (type == 534)
			{
				extraUpdates = 0;
				width = 16;
				height = 16;
				aiStyle = 99;
				friendly = true;
				penetrate = -1;
				melee = true;
				scale = 1f;
			}
			else if (type >= 541 && type <= 555)
			{
				extraUpdates = 0;
				width = 16;
				height = 16;
				aiStyle = 99;
				friendly = true;
				penetrate = -1;
				melee = true;
				scale = 1f;
				if (type == 547)
				{
					scale = 1.1f;
				}
				if (type == 554)
				{
					scale = 1.2f;
				}
				if (type == 555)
				{
					scale = 1.15f;
				}
				if (type == 551 || type == 550)
				{
					scale = 1.1f;
				}
			}
			else if (type >= 562 && type <= 564)
			{
				extraUpdates = 0;
				width = 16;
				height = 16;
				aiStyle = 99;
				friendly = true;
				penetrate = -1;
				melee = true;
				scale = 1f;
				if (type == 563)
				{
					scale = 1.05f;
				}
				if (type == 564)
				{
					scale = 1.075f;
				}
			}
			else if (type == 603)
			{
				extraUpdates = 0;
				width = 16;
				height = 16;
				aiStyle = 99;
				friendly = true;
				penetrate = -1;
				melee = true;
				scale = 1.15f;
			}
			else if (type == 604)
			{
				extraUpdates = 0;
				width = 16;
				height = 16;
				aiStyle = 115;
				friendly = true;
				penetrate = -1;
				melee = true;
				scale = 1.2f;
			}
			else if (type >= 556 && type <= 561)
			{
				extraUpdates = 0;
				width = 10;
				height = 10;
				aiStyle = 99;
				friendly = true;
				penetrate = -1;
				melee = true;
				scale = 1f;
				counterweight = true;
			}
			else if (type == 535)
			{
				width = 18;
				height = 18;
				aiStyle = 100;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				magic = true;
				ignoreWater = true;
			}
			else if (type == 536)
			{
				width = 10;
				height = 10;
				aiStyle = 101;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				magic = true;
				ignoreWater = true;
			}
			else if (type == 537)
			{
				width = 22;
				height = 22;
				aiStyle = 84;
				hostile = true;
				penetrate = -1;
				alpha = 255;
				timeLeft = 240;
				tileCollide = false;
			}
			else if (type == 538)
			{
				width = 12;
				height = 12;
				aiStyle = 14;
				hostile = true;
				penetrate = -1;
				timeLeft = 120;
				extraUpdates = 1;
				alpha = 255;
			}
			else if (type == 539)
			{
				width = 18;
				height = 30;
				aiStyle = 102;
				hostile = true;
				penetrate = -1;
				timeLeft = 600;
			}
			else if (type == 540)
			{
				width = 20;
				height = 20;
				aiStyle = 103;
				hostile = true;
				penetrate = -1;
				timeLeft = 300;
				alpha = 255;
			}
			else if (type == 565)
			{
				width = 28;
				height = 28;
				aiStyle = 104;
				penetrate = -1;
				tileCollide = false;
				ignoreWater = true;
				alpha = 255;
				scale = 0.8f;
			}
			else if (type == 566)
			{
				width = 16;
				height = 16;
				aiStyle = 36;
				friendly = true;
				penetrate = 4;
				alpha = 255;
				timeLeft = 660;
				extraUpdates = 3;
			}
			else if (type == 567 || type == 568)
			{
				if (type == 567)
				{
					width = 14;
					height = 14;
				}
				else
				{
					width = 16;
					height = 16;
				}
				aiStyle = 105;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				timeLeft = 3600;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type >= 569 && type <= 571)
			{
				width = 32;
				height = 32;
				aiStyle = 106;
				friendly = true;
				penetrate = -1;
				alpha = 255;
				timeLeft = 3600;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 575)
			{
				width = 24;
				height = 24;
				aiStyle = 107;
				hostile = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft = 420;
				alpha = 255;
			}
			else if (type == 573)
			{
				width = 18;
				height = 30;
				aiStyle = 102;
				hostile = true;
				penetrate = -1;
				timeLeft = 600;
			}
			else if (type == 574)
			{
				width = 18;
				height = 18;
				aiStyle = 102;
				hostile = true;
				timeLeft = 600;
				tileCollide = false;
			}
			else if (type == 572)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				alpha = 255;
				penetrate = -1;
				friendly = false;
				hostile = true;
			}
			else if (type == 576)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				hostile = true;
				penetrate = -1;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.2f;
				timeLeft = 600;
			}
			else if (type == 577)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				hostile = true;
				penetrate = -1;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.2f;
				timeLeft = 600;
			}
			else if (type == 578 || type == 579)
			{
				width = 32;
				height = 32;
				aiStyle = 108;
				friendly = true;
				alpha = 255;
				tileCollide = false;
				ignoreWater = true;
				hostile = true;
				hide = true;
			}
			else if (type == 580)
			{
				width = 14;
				height = 14;
				aiStyle = 88;
				hostile = true;
				alpha = 255;
				ignoreWater = true;
				tileCollide = true;
				extraUpdates = 4;
				timeLeft = 600;
			}
			else if (type == 581)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				alpha = 255;
				penetrate = -1;
				friendly = false;
				hostile = true;
			}
			else if (type == 582)
			{
				width = 20;
				height = 20;
				aiStyle = 109;
				friendly = true;
				penetrate = -1;
				MaxUpdates = 2;
			}
			else if (type == 583)
			{
				width = 10;
				height = 10;
				aiStyle = 2;
				friendly = true;
				scale = 0.8f;
			}
			else if (type == 589)
			{
				width = 10;
				height = 10;
				aiStyle = 2;
				friendly = true;
			}
			else if (type == 584)
			{
				width = 10;
				height = 10;
				aiStyle = 110;
				friendly = true;
				scale = 0.8f;
				penetrate = 3;
			}
			else if (type == 585)
			{
				width = 26;
				height = 26;
				aiStyle = 1;
				alpha = 255;
				friendly = true;
				penetrate = 3;
			}
			else if (type == 586)
			{
				width = 26;
				height = 26;
				aiStyle = 111;
				alpha = 255;
				friendly = true;
				penetrate = -1;
			}
			else if (type == 587)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				alpha = 255;
				friendly = true;
			}
			else if (type == 588)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
			}
			else if (type == 590)
			{
				width = 14;
				height = 14;
				aiStyle = 112;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				timeLeft = 900;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 591)
			{
				width = 8;
				height = 8;
				aiStyle = 101;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ignoreWater = true;
			}
			else if (type == 592)
			{
				width = 8;
				height = 8;
				aiStyle = 1;
				hostile = true;
				alpha = 255;
				extraUpdates = 3;
				ignoreWater = true;
			}
			else if (type == 593)
			{
				width = 16;
				height = 16;
				aiStyle = 1;
				hostile = true;
				alpha = 255;
				extraUpdates = 1;
				ignoreWater = true;
			}
			else if (type == 594)
			{
				width = 40;
				height = 40;
				aiStyle = 1;
				alpha = 255;
				extraUpdates = 2;
			}
			else if (type == 595)
			{
				width = 68;
				height = 64;
				aiStyle = 75;
				friendly = true;
				tileCollide = false;
				melee = true;
				penetrate = -1;
				ownerHitCheck = true;
			}
			else if (type == 596)
			{
				width = 8;
				height = 8;
				aiStyle = 107;
				hostile = true;
				alpha = 255;
				ignoreWater = true;
				timeLeft = 180;
				tileCollide = false;
			}
			else if (type == 597)
			{
				width = 10;
				height = 10;
				aiStyle = 29;
				alpha = 255;
				magic = true;
				penetrate = 2;
				friendly = true;
			}
			else if (type == 598)
			{
				width = 16;
				height = 16;
				aiStyle = 113;
				friendly = true;
				melee = true;
				penetrate = -1;
				alpha = 255;
				hide = true;
			}
			else if (type == 599)
			{
				width = 22;
				height = 22;
				aiStyle = 2;
				friendly = true;
				penetrate = 6;
				thrown = true;
			}
			else if (type == 600)
			{
				width = 14;
				height = 14;
				aiStyle = 75;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ignoreWater = true;
			}
			else if (type == 601)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				alpha = 255;
				friendly = true;
				extraUpdates = 30;
			}
			else if (type == 602)
			{
				width = 10;
				height = 10;
				aiStyle = 114;
				alpha = 255;
				friendly = true;
				tileCollide = false;
				netImportant = true;
			}
			else if (type == 605)
			{
				alpha = 255;
				width = 6;
				height = 6;
				aiStyle = 1;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 606)
			{
				width = 5;
				height = 5;
				aiStyle = 1;
				friendly = true;
				alpha = 255;
				extraUpdates = 2;
				scale = 1f;
				timeLeft = 600;
				ignoreWater = true;
			}
			else if (type == 607)
			{
				width = 10;
				height = 10;
				aiStyle = 116;
				friendly = true;
				alpha = 255;
				timeLeft = 600;
				ignoreWater = true;
				tileCollide = false;
				penetrate = -1;
			}
			else if (type == 608)
			{
				width = 160;
				height = 160;
				aiStyle = 117;
				friendly = true;
				alpha = 255;
				timeLeft = 3;
				ignoreWater = true;
				tileCollide = false;
				penetrate = -1;
				hide = true;
			}
			else if (type == 611)
			{
				width = 16;
				height = 16;
				aiStyle = 75;
				friendly = true;
				melee = true;
				penetrate = -1;
				alpha = 255;
				hide = true;
				tileCollide = false;
				ignoreWater = true;
				updatedNPCImmunity = true;
			}
			else if (type == 612)
			{
				width = 8;
				height = 8;
				aiStyle = 117;
				friendly = true;
				alpha = 255;
				ignoreWater = true;
				timeLeft = 60;
				tileCollide = false;
				penetrate = -1;
				updatedNPCImmunity = true;
			}
			else if (type == 613)
			{
				netImportant = true;
				width = 24;
				height = 24;
				aiStyle = 62;
				penetrate = -1;
				timeLeft *= 5;
				minion = true;
				friendly = true;
				minionSlots = 1f;
				ignoreWater = true;
			}
			else if (type == 614)
			{
				width = 16;
				height = 16;
				aiStyle = 113;
				friendly = true;
				penetrate = -1;
				alpha = 255;
			}
			else if (type == 615)
			{
				width = 22;
				height = 22;
				aiStyle = 75;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ranged = true;
				ignoreWater = true;
			}
			else if (type == 616)
			{
				width = 14;
				height = 14;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				ranged = true;
				extraUpdates = 2;
				timeLeft = 90 * MaxUpdates;
			}
			else if (type == 617)
			{
				width = 32;
				height = 32;
				aiStyle = 118;
				friendly = true;
				alpha = 255;
				ignoreWater = true;
				hide = true;
				magic = true;
				penetrate = 3;
				updatedNPCImmunity = true;
			}
			else if (type == 618)
			{
				tileCollide = false;
				width = 18;
				height = 30;
				aiStyle = 119;
				penetrate = -1;
				timeLeft = 420;
				magic = true;
				friendly = true;
				updatedNPCImmunity = true;
			}
			else if (type == 619)
			{
				width = 14;
				height = 14;
				aiStyle = 29;
				alpha = 255;
				magic = true;
				penetrate = 1;
				friendly = true;
			}
			else if (type == 620)
			{
				width = 8;
				height = 8;
				aiStyle = 29;
				alpha = 255;
				magic = true;
				penetrate = 1;
				friendly = true;
			}
			else if (type == 622)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				alpha = 255;
				extraUpdates = 2;
			}
			else if (type == 623)
			{
				netImportant = true;
				width = 50;
				height = 80;
				aiStyle = 120;
				penetrate = -1;
				timeLeft *= 5;
				minion = true;
				friendly = true;
				minionSlots = 0f;
				ignoreWater = true;
				tileCollide = false;
				netImportant = true;
			}
			else if (type == 624)
			{
				width = 8;
				height = 8;
				aiStyle = 117;
				friendly = true;
				alpha = 255;
				ignoreWater = true;
				timeLeft = 60;
				tileCollide = false;
				penetrate = -1;
			}
			else if (type >= 625 && type <= 628)
			{
				if (type == 625 || type == 628)
				{
					netImportant = true;
				}
				if (type == 626 || type == 627)
				{
					minionSlots = 0.5f;
				}
				width = 24;
				height = 24;
				aiStyle = 121;
				penetrate = -1;
				timeLeft *= 5;
				minion = true;
				friendly = true;
				ignoreWater = true;
				tileCollide = false;
				alpha = 255;
				hide = true;
				netImportant = true;
			}
			else if (type == 629)
			{
				width = 8;
				height = 8;
				aiStyle = 122;
				hostile = true;
				alpha = 255;
				ignoreWater = true;
				timeLeft = 3600;
				tileCollide = false;
				penetrate = -1;
				extraUpdates = 2;
			}
			else if (type == 630)
			{
				width = 22;
				height = 22;
				aiStyle = 75;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ranged = true;
				ignoreWater = true;
			}
			else if (type == 631)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 122;
				friendly = true;
				ranged = true;
				tileCollide = false;
				alpha = 255;
				ignoreWater = true;
				extraUpdates = 1;
			}
			else if (type == 633)
			{
				width = 14;
				height = 18;
				aiStyle = 75;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				magic = true;
				ignoreWater = true;
			}
			else if (type == 632)
			{
				width = 18;
				height = 18;
				aiStyle = 84;
				friendly = true;
				magic = true;
				penetrate = -1;
				alpha = 255;
				tileCollide = false;
			}
			else if (type == 634)
			{
				width = 40;
				height = 40;
				aiStyle = 1;
				friendly = true;
				alpha = 255;
				ignoreWater = true;
				extraUpdates = 2;
				magic = true;
			}
			else if (type == 635)
			{
				width = 40;
				height = 40;
				aiStyle = 1;
				friendly = true;
				alpha = 255;
				friendly = true;
				extraUpdates = 3;
				magic = true;
			}
			else if (type == 636)
			{
				width = 16;
				height = 16;
				aiStyle = 113;
				friendly = true;
				melee = true;
				penetrate = -1;
				alpha = 255;
				hide = true;
				MaxUpdates = 2;
			}
			else if (type == 637)
			{
				width = 10;
				height = 10;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
			}
			else if (type == 638)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				alpha = 255;
				extraUpdates = 5;
				timeLeft = 600;
				ranged = true;
				ignoreWater = true;
				updatedNPCImmunity = true;
				penetrate = -1;
			}
			else if (type == 639)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				ranged = true;
				MaxUpdates = 2;
				timeLeft = MaxUpdates * 45;
				ignoreWater = true;
				updatedNPCImmunity = true;
				alpha = 255;
				penetrate = 4;
			}
			else if (type == 640)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				ranged = true;
				MaxUpdates = 3;
				timeLeft = 90;
				ignoreWater = true;
				updatedNPCImmunity = true;
				alpha = 255;
				penetrate = 4;
			}
			else if (type == 642)
			{
				width = 18;
				height = 18;
				aiStyle = 84;
				friendly = true;
				penetrate = -1;
				alpha = 255;
				tileCollide = false;
				updatedNPCImmunity = true;
			}
			else if (type == 641)
			{
				width = 32;
				height = 32;
				aiStyle = 123;
				timeLeft = 7200;
				ignoreWater = true;
				tileCollide = false;
				alpha = 255;
				hide = true;
			}
			else if (type == 643)
			{
				width = 32;
				height = 32;
				aiStyle = 123;
				timeLeft = 7200;
				ignoreWater = true;
				tileCollide = false;
				alpha = 255;
			}
			else if (type == 644)
			{
				width = 14;
				height = 14;
				aiStyle = 112;
				penetrate = 1;
				timeLeft = 900;
				tileCollide = false;
				ignoreWater = true;
				alpha = 255;
			}
			else if (type == 645)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				magic = true;
				tileCollide = false;
				extraUpdates = 5;
				penetrate = -1;
				updatedNPCImmunity = true;
			}
			else if (type >= 646 && type <= 649)
			{
				width = 18;
				height = 18;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
			}
			else if (type == 650)
			{
				width = 20;
				height = 20;
				aiStyle = 124;
				penetrate = -1;
				netImportant = true;
				timeLeft *= 5;
				friendly = true;
				ignoreWater = true;
				tileCollide = false;
				manualDirectionChange = true;
			}
			else
			{
				active = false;
			}
			width = (int)((float)width * scale);
			height = (int)((float)height * scale);
			maxPenetrate = penetrate;
		}

		public static int GetNextSlot()
		{
			int result = 1000;
			for (int i = 0; i < 1000; i++)
			{
				if (!Main.projectile[i].active)
				{
					result = i;
					break;
				}
			}
			return result;
		}

		public static int NewProjectile(float X, float Y, float SpeedX, float SpeedY, int Type, int Damage, float KnockBack, int Owner = 16, float ai0 = 0f, float ai1 = 0f)
		{
			int num = 1000;
			for (int i = 0; i < 1000; i++)
			{
				if (!Main.projectile[i].active)
				{
					num = i;
					break;
				}
			}
			if (num == 1000)
			{
				return num;
			}
			Projectile projectile = Main.projectile[num];
			projectile.SetDefaults(Type);
			projectile.position.X = X - (float)projectile.width * 0.5f;
			projectile.position.Y = Y - (float)projectile.height * 0.5f;
			projectile.owner = Owner;
			projectile.velocity.X = SpeedX;
			projectile.velocity.Y = SpeedY;
			projectile.damage = Damage;
			projectile.knockBack = KnockBack;
			projectile.identity = num;
			projectile.gfxOffY = 0f;
			projectile.stepSpeed = 1f;
			projectile.wet = Collision.WetCollision(projectile.position, projectile.width, projectile.height);
			if (projectile.ignoreWater)
			{
				projectile.wet = false;
			}
			projectile.honeyWet = Collision.honey;
			Main.projectileIdentity[Owner, num] = num;
			if (projectile.aiStyle == 1)
			{
				while (projectile.velocity.X >= 16f || projectile.velocity.X <= -16f || projectile.velocity.Y >= 16f || projectile.velocity.Y < -16f)
				{
					projectile.velocity.X *= 0.97f;
					projectile.velocity.Y *= 0.97f;
				}
			}
			if (Owner == Main.myPlayer)
			{
				switch (Type)
				{
				case 206:
					projectile.ai[0] = (float)Main.rand.Next(-100, 101) * 0.0005f;
					projectile.ai[1] = (float)Main.rand.Next(-100, 101) * 0.0005f;
					break;
				case 335:
					projectile.ai[1] = Main.rand.Next(4);
					break;
				case 358:
					projectile.ai[1] = (float)Main.rand.Next(10, 31) * 0.1f;
					break;
				case 406:
					projectile.ai[1] = (float)Main.rand.Next(10, 21) * 0.1f;
					break;
				default:
					projectile.ai[0] = ai0;
					projectile.ai[1] = ai1;
					break;
				}
			}
			if (Type == 434)
			{
				projectile.ai[0] = projectile.position.X;
				projectile.ai[1] = projectile.position.Y;
			}
			if (Type > 0 && Type < 651)
			{
				if (ProjectileID.Sets.NeedsUUID[Type])
				{
					projectile.projUUID = projectile.identity;
				}
				if (ProjectileID.Sets.StardustDragon[Type])
				{
					int num2 = Main.projectile[(int)projectile.ai[0]].projUUID;
					if (num2 >= 0)
					{
						projectile.ai[0] = num2;
					}
				}
			}
			if (Main.netMode != 0 && Owner == Main.myPlayer)
			{
				NetMessage.SendData(27, -1, -1, "", num);
			}
			if (Owner == Main.myPlayer)
			{
				if (Type == 28)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 516)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 519)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 29)
				{
					projectile.timeLeft = 300;
				}
				if (Type == 470)
				{
					projectile.timeLeft = 300;
				}
				if (Type == 637)
				{
					projectile.timeLeft = 300;
				}
				if (Type == 30)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 517)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 37)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 75)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 133)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 136)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 139)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 142)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 397)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 419)
				{
					projectile.timeLeft = 600;
				}
				if (Type == 420)
				{
					projectile.timeLeft = 600;
				}
				if (Type == 421)
				{
					projectile.timeLeft = 600;
				}
				if (Type == 422)
				{
					projectile.timeLeft = 600;
				}
				if (Type == 588)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 443)
				{
					projectile.timeLeft = 300;
				}
			}
			if (Type == 249)
			{
				projectile.frame = Main.rand.Next(5);
			}
			return num;
		}

		public void StatusNPC(int i)
		{
			if (melee && Main.player[owner].meleeEnchant > 0 && !noEnchantments)
			{
				int meleeEnchant = Main.player[owner].meleeEnchant;
				if (meleeEnchant == 1)
				{
					Main.npc[i].AddBuff(70, 60 * Main.rand.Next(5, 10));
				}
				if (meleeEnchant == 2)
				{
					Main.npc[i].AddBuff(39, 60 * Main.rand.Next(3, 7));
				}
				if (meleeEnchant == 3)
				{
					Main.npc[i].AddBuff(24, 60 * Main.rand.Next(3, 7));
				}
				if (meleeEnchant == 5)
				{
					Main.npc[i].AddBuff(69, 60 * Main.rand.Next(10, 20));
				}
				if (meleeEnchant == 6)
				{
					Main.npc[i].AddBuff(31, 60 * Main.rand.Next(1, 4));
				}
				if (meleeEnchant == 8)
				{
					Main.npc[i].AddBuff(20, 60 * Main.rand.Next(5, 10));
				}
				if (meleeEnchant == 4)
				{
					Main.npc[i].AddBuff(72, 120);
				}
			}
			if (type == 195)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.npc[i].AddBuff(70, 60 * Main.rand.Next(10, 21));
				}
				else
				{
					Main.npc[i].AddBuff(20, 60 * Main.rand.Next(10, 21));
				}
			}
			if (type == 567 || type == 568)
			{
				Main.npc[i].AddBuff(20, 60 * Main.rand.Next(5, 11));
			}
			if (type == 598)
			{
				Main.npc[i].AddBuff(169, 900);
			}
			if (type == 636)
			{
				Main.npc[i].AddBuff(189, 300);
			}
			if (type == 611)
			{
				Main.npc[i].AddBuff(189, 300);
			}
			if (type == 612)
			{
				Main.npc[i].AddBuff(189, 300);
			}
			if (type == 614)
			{
				Main.npc[i].AddBuff(183, 900);
			}
			if (type == 585)
			{
				Main.npc[i].AddBuff(153, 60 * Main.rand.Next(5, 11));
			}
			if (type == 583)
			{
				Main.npc[i].AddBuff(20, 60 * Main.rand.Next(3, 6));
			}
			if (type == 524)
			{
				Main.npc[i].AddBuff(69, 60 * Main.rand.Next(3, 8));
			}
			if (type == 504 && Main.rand.Next(3) == 0)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.npc[i].AddBuff(24, Main.rand.Next(60, 180));
				}
				else
				{
					Main.npc[i].AddBuff(24, Main.rand.Next(30, 120));
				}
			}
			if (type == 545 && Main.rand.Next(3) == 0)
			{
				Main.npc[i].AddBuff(24, Main.rand.Next(60, 240));
			}
			if (type == 553)
			{
				Main.npc[i].AddBuff(24, Main.rand.Next(180, 480));
			}
			if (type == 552 && Main.rand.Next(3) != 0)
			{
				Main.npc[i].AddBuff(44, Main.rand.Next(120, 320));
			}
			if (type == 495)
			{
				Main.npc[i].AddBuff(153, Main.rand.Next(120, 300));
			}
			if (type == 497)
			{
				Main.npc[i].AddBuff(153, Main.rand.Next(60, 180));
			}
			if (type == 496)
			{
				Main.npc[i].AddBuff(153, Main.rand.Next(240, 480));
			}
			if (type == 476)
			{
				Main.npc[i].AddBuff(151, 30);
			}
			if (type == 523)
			{
				Main.npc[i].AddBuff(20, 60 * Main.rand.Next(10, 30));
			}
			if (type == 478 || type == 480)
			{
				Main.npc[i].AddBuff(39, 60 * Main.rand.Next(3, 7));
			}
			if (type == 479)
			{
				Main.npc[i].AddBuff(69, 60 * Main.rand.Next(7, 15));
			}
			if (type == 379)
			{
				Main.npc[i].AddBuff(70, 60 * Main.rand.Next(4, 7));
			}
			if (type >= 390 && type <= 392)
			{
				Main.npc[i].AddBuff(70, 60 * Main.rand.Next(2, 5));
			}
			if (type == 374)
			{
				Main.npc[i].AddBuff(20, 60 * Main.rand.Next(4, 7));
			}
			if (type == 376)
			{
				Main.npc[i].AddBuff(24, 60 * Main.rand.Next(3, 7));
			}
			if (type >= 399 && type <= 402)
			{
				Main.npc[i].AddBuff(24, 60 * Main.rand.Next(3, 7));
			}
			if (type == 295 || type == 296)
			{
				Main.npc[i].AddBuff(24, 60 * Main.rand.Next(8, 16));
			}
			if ((melee || ranged) && Main.player[owner].frostBurn && !noEnchantments)
			{
				Main.npc[i].AddBuff(44, 60 * Main.rand.Next(5, 15));
			}
			if (melee && Main.player[owner].magmaStone && !noEnchantments)
			{
				if (Main.rand.Next(7) == 0)
				{
					Main.npc[i].AddBuff(24, 360);
				}
				else if (Main.rand.Next(3) == 0)
				{
					Main.npc[i].AddBuff(24, 120);
				}
				else
				{
					Main.npc[i].AddBuff(24, 60);
				}
			}
			if (type == 287)
			{
				Main.npc[i].AddBuff(72, 120);
			}
			if (type == 285)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.npc[i].AddBuff(31, 180);
				}
				else
				{
					Main.npc[i].AddBuff(31, 60);
				}
			}
			if (type == 2 && Main.rand.Next(3) == 0)
			{
				Main.npc[i].AddBuff(24, 180);
			}
			if (type == 172)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.npc[i].AddBuff(44, 180);
				}
			}
			else if (type == 15)
			{
				if (Main.rand.Next(2) == 0)
				{
					Main.npc[i].AddBuff(24, 300);
				}
			}
			else if (type == 253)
			{
				if (Main.rand.Next(2) == 0)
				{
					Main.npc[i].AddBuff(44, 480);
				}
			}
			else if (type == 19)
			{
				if (Main.rand.Next(5) == 0)
				{
					Main.npc[i].AddBuff(24, 180);
				}
			}
			else if (type == 33)
			{
				if (Main.rand.Next(5) == 0)
				{
					Main.npc[i].AddBuff(20, 420);
				}
			}
			else if (type == 34)
			{
				if (Main.rand.Next(2) == 0)
				{
					Main.npc[i].AddBuff(24, Main.rand.Next(240, 480));
				}
			}
			else if (type == 35)
			{
				if (Main.rand.Next(4) == 0)
				{
					Main.npc[i].AddBuff(24, 180);
				}
			}
			else if (type == 54)
			{
				if (Main.rand.Next(2) == 0)
				{
					Main.npc[i].AddBuff(20, 600);
				}
			}
			else if (type == 267)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.npc[i].AddBuff(20, 3600);
				}
				else
				{
					Main.npc[i].AddBuff(20, 1800);
				}
			}
			else if (type == 63)
			{
				if (Main.rand.Next(5) != 0)
				{
					Main.npc[i].AddBuff(31, 60 * Main.rand.Next(2, 5));
				}
			}
			else if (type == 85 || type == 188)
			{
				Main.npc[i].AddBuff(24, 1200);
			}
			else if (type == 95 || type == 103 || type == 104)
			{
				Main.npc[i].AddBuff(39, 420);
			}
			else if (type == 278 || type == 279 || type == 280)
			{
				Main.npc[i].AddBuff(69, 600);
			}
			else if (type == 282 || type == 283)
			{
				Main.npc[i].AddBuff(70, 600);
			}
			if (type == 163 || type == 310)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.npc[i].AddBuff(24, 600);
				}
				else
				{
					Main.npc[i].AddBuff(24, 300);
				}
			}
			else if (type == 98)
			{
				Main.npc[i].AddBuff(20, 600);
			}
			else if (type == 184)
			{
				Main.npc[i].AddBuff(20, 900);
			}
			else if (type == 265)
			{
				Main.npc[i].AddBuff(20, 1800);
			}
			else if (type == 355)
			{
				Main.npc[i].AddBuff(70, 1800);
			}
		}

		public void StatusPvP(int i)
		{
			if (melee && Main.player[owner].meleeEnchant > 0 && !noEnchantments)
			{
				int meleeEnchant = Main.player[owner].meleeEnchant;
				if (meleeEnchant == 1)
				{
					Main.player[i].AddBuff(70, 60 * Main.rand.Next(5, 10));
				}
				if (meleeEnchant == 2)
				{
					Main.player[i].AddBuff(39, 60 * Main.rand.Next(3, 7));
				}
				if (meleeEnchant == 3)
				{
					Main.player[i].AddBuff(24, 60 * Main.rand.Next(3, 7));
				}
				if (meleeEnchant == 5)
				{
					Main.player[i].AddBuff(69, 60 * Main.rand.Next(10, 20));
				}
				if (meleeEnchant == 6)
				{
					Main.player[i].AddBuff(31, 60 * Main.rand.Next(1, 4));
				}
				if (meleeEnchant == 8)
				{
					Main.player[i].AddBuff(20, 60 * Main.rand.Next(5, 10));
				}
			}
			if (type == 295 || type == 296)
			{
				Main.player[i].AddBuff(24, 60 * Main.rand.Next(8, 16));
			}
			if (type == 478 || type == 480)
			{
				Main.player[i].AddBuff(39, 60 * Main.rand.Next(3, 7));
			}
			if ((melee || ranged) && Main.player[owner].frostBurn && !noEnchantments)
			{
				Main.player[i].AddBuff(44, 60 * Main.rand.Next(1, 8), false);
			}
			if (melee && Main.player[owner].magmaStone && !noEnchantments)
			{
				if (Main.rand.Next(4) == 0)
				{
					Main.player[i].AddBuff(24, 360);
				}
				else if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(24, 240);
				}
				else
				{
					Main.player[i].AddBuff(24, 120);
				}
			}
			if (type == 2 && Main.rand.Next(3) == 0)
			{
				Main.player[i].AddBuff(24, 180, false);
			}
			if (type == 172)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.player[i].AddBuff(44, 240, false);
				}
			}
			else if (type == 15)
			{
				if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(24, 300, false);
				}
			}
			else if (type == 253)
			{
				if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(44, 480, false);
				}
			}
			else if (type == 19)
			{
				if (Main.rand.Next(5) == 0)
				{
					Main.player[i].AddBuff(24, 180, false);
				}
			}
			else if (type == 33)
			{
				if (Main.rand.Next(5) == 0)
				{
					Main.player[i].AddBuff(20, 420, false);
				}
			}
			else if (type == 34)
			{
				if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(24, 240, false);
				}
			}
			else if (type == 35)
			{
				if (Main.rand.Next(4) == 0)
				{
					Main.player[i].AddBuff(24, 180, false);
				}
			}
			else if (type == 54)
			{
				if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(20, 600, false);
				}
			}
			else if (type == 267)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.player[i].AddBuff(20, 3600);
				}
				else
				{
					Main.player[i].AddBuff(20, 1800);
				}
			}
			else if (type == 63)
			{
				if (Main.rand.Next(3) != 0)
				{
					Main.player[i].AddBuff(31, 120);
				}
			}
			else if (type == 85 || type == 188)
			{
				Main.player[i].AddBuff(24, 1200, false);
			}
			else if (type == 95 || type == 103 || type == 104)
			{
				Main.player[i].AddBuff(39, 420);
			}
			else if (type == 278 || type == 279 || type == 280)
			{
				Main.player[i].AddBuff(69, 900);
			}
			else if (type == 282 || type == 283)
			{
				Main.player[i].AddBuff(70, 600);
			}
			if (type == 163 || type == 310)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.player[i].AddBuff(24, 600);
				}
				else
				{
					Main.player[i].AddBuff(24, 300);
				}
			}
			else if (type == 265)
			{
				Main.player[i].AddBuff(20, 1200);
			}
			else if (type == 355)
			{
				Main.player[i].AddBuff(70, 1800);
			}
		}

		public void ghostHurt(int dmg, Vector2 Position)
		{
			if (!magic)
			{
				return;
			}
			int num = damage / 2;
			if (dmg / 2 <= 1)
			{
				return;
			}
			int num2 = -1;
			int num3 = 1000;
			if (Main.player[Main.myPlayer].ghostDmg > (float)num3)
			{
				return;
			}
			Main.player[Main.myPlayer].ghostDmg += num;
			int[] array = new int[200];
			int num4 = 0;
			int num5 = 0;
			for (int i = 0; i < 200; i++)
			{
				if (!Main.npc[i].CanBeChasedBy(this))
				{
					continue;
				}
				float num6 = Math.Abs(Main.npc[i].position.X + (float)(Main.npc[i].width / 2) - position.X + (float)(width / 2)) + Math.Abs(Main.npc[i].position.Y + (float)(Main.npc[i].height / 2) - position.Y + (float)(height / 2));
				if (num6 < 800f)
				{
					if (Collision.CanHit(position, 1, 1, Main.npc[i].position, Main.npc[i].width, Main.npc[i].height) && num6 > 50f)
					{
						array[num5] = i;
						num5++;
					}
					else if (num5 == 0)
					{
						array[num4] = i;
						num4++;
					}
				}
			}
			if (num4 != 0 || num5 != 0)
			{
				num2 = ((num5 <= 0) ? array[Main.rand.Next(num4)] : array[Main.rand.Next(num5)]);
				float num7 = 4f;
				float num8 = Main.rand.Next(-100, 101);
				float num9 = Main.rand.Next(-100, 101);
				float num10 = (float)Math.Sqrt(num8 * num8 + num9 * num9);
				num10 = num7 / num10;
				num8 *= num10;
				num9 *= num10;
				NewProjectile(Position.X, Position.Y, num8, num9, 356, num, 0f, owner, num2);
			}
		}

		public void ghostHeal(int dmg, Vector2 Position)
		{
			float num = 0.2f;
			num -= (float)numHits * 0.05f;
			if (num <= 0f)
			{
				return;
			}
			float num2 = (float)dmg * num;
			if ((int)num2 <= 0 || Main.player[Main.myPlayer].lifeSteal <= 0f)
			{
				return;
			}
			Main.player[Main.myPlayer].lifeSteal -= num2;
			if (!magic)
			{
				return;
			}
			float num3 = 0f;
			int num4 = owner;
			for (int i = 0; i < 16; i++)
			{
				if (Main.player[i].active && !Main.player[i].dead && ((!Main.player[owner].hostile && !Main.player[i].hostile) || Main.player[owner].team == Main.player[i].team))
				{
					float num5 = Math.Abs(Main.player[i].position.X + (float)(Main.player[i].width / 2) - position.X + (float)(width / 2)) + Math.Abs(Main.player[i].position.Y + (float)(Main.player[i].height / 2) - position.Y + (float)(height / 2));
					if (num5 < 1200f && (float)(Main.player[i].statLifeMax2 - Main.player[i].statLife) > num3)
					{
						num3 = Main.player[i].statLifeMax2 - Main.player[i].statLife;
						num4 = i;
					}
				}
			}
			NewProjectile(Position.X, Position.Y, 0f, 0f, 298, 0, 0f, owner, num4, num2);
		}

		public void vampireHeal(int dmg, Vector2 Position)
		{
			float num = (float)dmg * 0.075f;
			if ((int)num != 0 && !(Main.player[Main.myPlayer].lifeSteal <= 0f))
			{
				Main.player[Main.myPlayer].lifeSteal -= num;
				int num2 = owner;
				NewProjectile(Position.X, Position.Y, 0f, 0f, 305, 0, 0f, owner, num2, num);
			}
		}

		public void StatusPlayer(int i)
		{
			if (type == 472)
			{
				Main.player[i].AddBuff(149, Main.rand.Next(30, 150));
			}
			if (type == 467)
			{
				Main.player[i].AddBuff(24, Main.rand.Next(30, 150));
			}
			if (type == 581)
			{
				if (Main.expertMode)
				{
					Main.player[i].AddBuff(164, Main.rand.Next(300, 540));
				}
				else if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(164, Main.rand.Next(360, 720));
				}
			}
			if (type == 572 && Main.rand.Next(3) != 0)
			{
				Main.player[i].AddBuff(20, Main.rand.Next(120, 240));
			}
			if (type == 276)
			{
				if (Main.expertMode)
				{
					Main.player[i].AddBuff(20, Main.rand.Next(120, 540));
				}
				else if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(20, Main.rand.Next(180, 420));
				}
			}
			if (type == 436 && Main.rand.Next(5) >= 2)
			{
				Main.player[i].AddBuff(31, 300);
			}
			if (type == 435 && Main.rand.Next(3) != 0)
			{
				Main.player[i].AddBuff(144, 300);
			}
			if (type == 437)
			{
				Main.player[i].AddBuff(144, 60 * Main.rand.Next(4, 9));
			}
			if (type == 348)
			{
				if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(46, 600);
				}
				else
				{
					Main.player[i].AddBuff(46, 300);
				}
				if (Main.rand.Next(3) != 0)
				{
					if (Main.rand.Next(16) == 0)
					{
						Main.player[i].AddBuff(47, 60);
					}
					else if (Main.rand.Next(12) == 0)
					{
						Main.player[i].AddBuff(47, 40);
					}
					else if (Main.rand.Next(8) == 0)
					{
						Main.player[i].AddBuff(47, 20);
					}
				}
			}
			if (type == 349)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.player[i].AddBuff(46, 600);
				}
				else if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(46, 300);
				}
			}
			if (type >= 399 && type <= 402)
			{
				Main.npc[i].AddBuff(24, 60 * Main.rand.Next(3, 7));
			}
			if (type == 55)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.player[i].AddBuff(20, 600);
				}
				else if (Main.expertMode)
				{
					Main.player[i].AddBuff(20, Main.rand.Next(60, 300));
				}
			}
			if (type == 44 && Main.rand.Next(3) == 0)
			{
				Main.player[i].AddBuff(22, 900);
			}
			if (type == 293)
			{
				Main.player[i].AddBuff(80, 60 * Main.rand.Next(2, 7));
			}
			if (type == 82 && Main.rand.Next(3) == 0)
			{
				Main.player[i].AddBuff(24, 420);
			}
			if (type == 285)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.player[i].AddBuff(31, 180);
				}
				else
				{
					Main.player[i].AddBuff(31, 60);
				}
			}
			if (type == 96 || type == 101)
			{
				if (Main.rand.Next(6) == 0)
				{
					Main.player[i].AddBuff(39, 480);
				}
				else if (Main.rand.Next(4) == 0)
				{
					Main.player[i].AddBuff(39, 300);
				}
				else if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(39, 180);
				}
			}
			else if (type == 288)
			{
				Main.player[i].AddBuff(69, 900);
			}
			else if (type == 253 && Main.rand.Next(2) == 0)
			{
				Main.player[i].AddBuff(44, 600);
			}
			if (type == 291 || type == 292)
			{
				Main.player[i].AddBuff(24, 60 * Main.rand.Next(8, 16));
			}
			if (type == 98)
			{
				Main.player[i].AddBuff(20, 600);
			}
			if (type == 184)
			{
				Main.player[i].AddBuff(20, 900);
			}
			if (type == 290)
			{
				Main.player[i].AddBuff(32, 60 * Main.rand.Next(5, 16));
			}
			if (type == 174)
			{
				Main.player[i].AddBuff(46, 1200);
				if (!Main.player[i].frozen && Main.rand.Next(20) == 0)
				{
					Main.player[i].AddBuff(47, 90);
				}
				else if (!Main.player[i].frozen && Main.expertMode && Main.rand.Next(20) == 0)
				{
					Main.player[i].AddBuff(47, 60);
				}
			}
			if (type == 257)
			{
				Main.player[i].AddBuff(46, 2700);
				if (!Main.player[i].frozen && Main.rand.Next(5) == 0)
				{
					Main.player[i].AddBuff(47, 60);
				}
			}
			if (type == 177)
			{
				Main.player[i].AddBuff(46, 1500);
				if (!Main.player[i].frozen && Main.rand.Next(10) == 0)
				{
					Main.player[i].AddBuff(47, Main.rand.Next(30, 120));
				}
			}
			if (type == 176)
			{
				if (Main.rand.Next(4) == 0)
				{
					Main.player[i].AddBuff(20, 1200);
				}
				else if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(20, 300);
				}
			}
		}

		public void Damage()
		{
			if (type == 18 || type == 72 || type == 86 || type == 87 || aiStyle == 31 || aiStyle == 32 || type == 226 || type == 378 || type == 613 || type == 650 || (type == 434 && localAI[0] != 0f) || type == 439 || type == 444 || (type == 451 && ((int)(ai[0] - 1f) / penetrate == 0 || ai[1] < 5f) && ai[0] != 0f) || type == 500 || type == 460 || type == 633 || type == 600 || type == 601 || type == 602 || type == 535 || (type == 631 && localAI[1] == 0f) || (aiStyle == 93 && ai[0] != 0f && ai[0] != 2f) || (aiStyle == 10 && localAI[1] == -1f) || (Main.projPet[type] && type != 266 && type != 407 && type != 317 && (type != 388 || ai[0] != 2f) && (type < 390 || type > 392) && (type < 393 || type > 395) && (type != 533 || !(ai[0] >= 6f) || !(ai[0] <= 8f)) && (type < 625 || type > 628)))
			{
				return;
			}
			Rectangle myRect = new Rectangle((int)position.X, (int)position.Y, width, height);
			if (type == 85 || type == 101)
			{
				int num = 30;
				myRect.X -= num;
				myRect.Y -= num;
				myRect.Width += num * 2;
				myRect.Height += num * 2;
			}
			if (type == 188)
			{
				int num2 = 20;
				myRect.X -= num2;
				myRect.Y -= num2;
				myRect.Width += num2 * 2;
				myRect.Height += num2 * 2;
			}
			if (aiStyle == 29)
			{
				int num3 = 4;
				myRect.X -= num3;
				myRect.Y -= num3;
				myRect.Width += num3 * 2;
				myRect.Height += num3 * 2;
			}
			if (friendly && owner == Main.myPlayer && !npcProj)
			{
				if ((aiStyle == 16 && type != 338 && type != 339 && type != 340 && type != 341 && (timeLeft <= 1 || type == 108 || type == 164)) || (type == 286 && localAI[1] == -1f))
				{
					int myPlayer = Main.myPlayer;
					if (Main.player[myPlayer].active && !Main.player[myPlayer].dead && !Main.player[myPlayer].immune && (!ownerHitCheck || Collision.CanHit(Main.player[owner].position, Main.player[owner].width, Main.player[owner].height, Main.player[myPlayer].position, Main.player[myPlayer].width, Main.player[myPlayer].height)))
					{
						Rectangle value = new Rectangle((int)Main.player[myPlayer].position.X, (int)Main.player[myPlayer].position.Y, Main.player[myPlayer].width, Main.player[myPlayer].height);
						if (myRect.Intersects(value))
						{
							if (Main.player[myPlayer].position.X + (float)(Main.player[myPlayer].width / 2) < position.X + (float)(width / 2))
							{
								base.direction = -1;
							}
							else
							{
								base.direction = 1;
							}
							int num4 = Main.DamageVar(damage);
							StatusPlayer(myPlayer);
							Main.player[myPlayer].Hurt(num4, base.direction, true, false, Lang.deathMsg(Main.player[myPlayer].name, owner, -1, whoAmI));
							if (trap)
							{
								Main.player[myPlayer].trapDebuffSource = true;
								if (Main.player[myPlayer].dead)
								{
									AchievementsHelper.HandleSpecialEvent(Main.player[myPlayer], 4);
								}
							}
							if (Main.netMode != 0)
							{
								NetMessage.SendData(26, -1, -1, Lang.deathMsg(Main.player[myPlayer].name, owner, -1, whoAmI), myPlayer, base.direction, num4, 1f);
							}
						}
					}
				}
				if (aiStyle != 45 && aiStyle != 92 && aiStyle != 105 && aiStyle != 106 && type != 463 && type != 69 && type != 70 && type != 621 && type != 10 && type != 11 && type != 379 && type != 407 && type != 476 && type != 623 && (type < 625 || type > 628))
				{
					int num5 = (int)(position.X / 16f);
					int num6 = (int)((position.X + (float)width) / 16f) + 1;
					int num7 = (int)(position.Y / 16f);
					int num8 = (int)((position.Y + (float)height) / 16f) + 1;
					if (num5 < 0)
					{
						num5 = 0;
					}
					if (num6 > Main.maxTilesX)
					{
						num6 = Main.maxTilesX;
					}
					if (num7 < 0)
					{
						num7 = 0;
					}
					if (num8 > Main.maxTilesY)
					{
						num8 = Main.maxTilesY;
					}
					AchievementsHelper.CurrentlyMining = true;
					for (int i = num5; i < num6; i++)
					{
						for (int j = num7; j < num8; j++)
						{
							if (Main.tile[i, j] != null && Main.tileCut[Main.tile[i, j].type] && Main.tile[i, j + 1] != null && Main.tile[i, j + 1].type != 78 && Main.tile[i, j + 1].type != 380)
							{
								WorldGen.KillTile(i, j);
								if (Main.netMode != 0)
								{
									NetMessage.SendData(17, -1, -1, "", 0, i, j);
								}
							}
						}
					}
					if (type == 461 || type == 632 || type == 642)
					{
						Utils.PlotTileLine(base.Center, base.Center + velocity * localAI[1], (float)width * scale, DelegateMethods.CutTiles);
					}
					else if (type == 611)
					{
						Utils.PlotTileLine(base.Center, base.Center + velocity, (float)width * scale, DelegateMethods.CutTiles);
					}
					AchievementsHelper.CurrentlyMining = false;
				}
			}
			if (owner == Main.myPlayer)
			{
				if (damage > 0)
				{
					for (int k = 0; k < 200; k++)
					{
						bool flag = !updatedNPCImmunity || npcImmune[k] == 0;
						if (!Main.npc[k].active || Main.npc[k].dontTakeDamage || !flag || ((!friendly || (Main.npc[k].friendly && type != 318 && (Main.npc[k].type != 22 || owner >= 16 || !Main.player[owner].killGuide) && (Main.npc[k].type != 54 || owner >= 16 || !Main.player[owner].killClothier))) && (!hostile || !Main.npc[k].friendly)) || (owner >= 0 && Main.npc[k].immune[owner] != 0 && maxPenetrate != 1))
						{
							continue;
						}
						bool flag2 = false;
						if (type == 11 && (Main.npc[k].type == 47 || Main.npc[k].type == 57))
						{
							flag2 = true;
						}
						else if (type == 31 && Main.npc[k].type == 69)
						{
							flag2 = true;
						}
						else if (Main.npc[k].trapImmune && trap)
						{
							flag2 = true;
						}
						else if (Main.npc[k].immortal && npcProj)
						{
							flag2 = true;
						}
						if (flag2 || (!Main.npc[k].noTileCollide && ownerHitCheck && !Collision.CanHit(Main.player[owner].position, Main.player[owner].width, Main.player[owner].height, Main.npc[k].position, Main.npc[k].width, Main.npc[k].height)))
						{
							continue;
						}
						bool flag3 = false;
						if (Main.npc[k].type == 414)
						{
							Rectangle rect = Main.npc[k].getRect();
							int num9 = 8;
							rect.X -= num9;
							rect.Y -= num9;
							rect.Width += num9 * 2;
							rect.Height += num9 * 2;
							flag3 = Colliding(myRect, rect);
						}
						else
						{
							flag3 = Colliding(myRect, Main.npc[k].getRect());
						}
						if (!flag3)
						{
							continue;
						}
						if (type == 604)
						{
							Main.player[owner].Counterweight(Main.npc[k].Center, damage, knockBack);
						}
						if (Main.npc[k].reflectingProjectiles && CanReflect())
						{
							Main.npc[k].ReflectProjectile(whoAmI);
							return;
						}
						int num10 = damage;
						if (type > 0 && type < 651 && ProjectileID.Sets.StardustDragon[type])
						{
							float value2 = (scale - 1f) * 100f;
							value2 = Utils.Clamp(value2, 0f, 50f);
							num10 = (int)((float)num10 * (1f + value2 * 0.23f));
						}
						int num11 = Main.DamageVar(num10);
						bool flag4 = !npcProj && !trap;
						if (type == 604)
						{
							friendly = false;
							ai[1] = 1000f;
						}
						if ((type == 400 || type == 401 || type == 402) && Main.npc[k].type >= 13 && Main.npc[k].type <= 15)
						{
							num11 = (int)((double)num11 * 0.65);
							if (penetrate > 1)
							{
								penetrate--;
							}
						}
						if (type == 504)
						{
							float num12 = (60f - ai[0]) / 2f;
							ai[0] += num12;
						}
						if (aiStyle == 3 && type != 301)
						{
							if (ai[0] == 0f)
							{
								velocity.X = 0f - velocity.X;
								velocity.Y = 0f - velocity.Y;
								netUpdate = true;
							}
							ai[0] = 1f;
						}
						else if (type == 582)
						{
							if (ai[0] != 0f)
							{
								base.direction *= -1;
							}
						}
						else if (type == 612)
						{
							base.direction = Main.player[owner].direction;
						}
						else if (type == 624)
						{
							float num13 = 1f;
							if (Main.npc[k].knockBackResist > 0f)
							{
								num13 = 1f / Main.npc[k].knockBackResist;
							}
							knockBack = 4f * num13;
							if (Main.npc[k].Center.X < base.Center.X)
							{
								base.direction = 1;
							}
							else
							{
								base.direction = -1;
							}
						}
						else if (aiStyle == 16)
						{
							if (timeLeft > 3)
							{
								timeLeft = 3;
							}
							if (Main.npc[k].position.X + (float)(Main.npc[k].width / 2) < position.X + (float)(width / 2))
							{
								base.direction = -1;
							}
							else
							{
								base.direction = 1;
							}
						}
						else if (aiStyle == 68)
						{
							if (timeLeft > 3)
							{
								timeLeft = 3;
							}
							if (Main.npc[k].position.X + (float)(Main.npc[k].width / 2) < position.X + (float)(width / 2))
							{
								base.direction = -1;
							}
							else
							{
								base.direction = 1;
							}
						}
						else if (aiStyle == 50)
						{
							if (Main.npc[k].position.X + (float)(Main.npc[k].width / 2) < position.X + (float)(width / 2))
							{
								base.direction = -1;
							}
							else
							{
								base.direction = 1;
							}
						}
						if (type == 509)
						{
							int num14 = Main.rand.Next(2, 6);
							for (int l = 0; l < num14; l++)
							{
								Vector2 vector = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
								vector += velocity * 3f;
								vector.Normalize();
								vector *= (float)Main.rand.Next(35, 81) * 0.1f;
								int num15 = (int)((double)damage * 0.5);
								NewProjectile(base.Center.X, base.Center.Y, vector.X, vector.Y, 504, num15, knockBack * 0.2f, owner);
							}
						}
						if (type == 598 || type == 636 || type == 614)
						{
							ai[0] = 1f;
							ai[1] = k;
							velocity = (Main.npc[k].Center - base.Center) * 0.75f;
							netUpdate = true;
						}
						if (type >= 511 && type <= 513)
						{
							timeLeft = 0;
						}
						if (type == 524)
						{
							netUpdate = true;
							ai[0] += 50f;
						}
						if (aiStyle == 39)
						{
							if (ai[1] == 0f)
							{
								ai[1] = k + 1;
								netUpdate = true;
							}
							if (Main.player[owner].position.X + (float)(Main.player[owner].width / 2) < position.X + (float)(width / 2))
							{
								base.direction = 1;
							}
							else
							{
								base.direction = -1;
							}
						}
						if (type == 41 && timeLeft > 1)
						{
							timeLeft = 1;
						}
						bool flag5 = false;
						if (flag4)
						{
							if (melee && Main.rand.Next(1, 101) <= Main.player[owner].meleeCrit)
							{
								flag5 = true;
							}
							if (ranged && Main.rand.Next(1, 101) <= Main.player[owner].rangedCrit)
							{
								flag5 = true;
							}
							if (magic && Main.rand.Next(1, 101) <= Main.player[owner].magicCrit)
							{
								flag5 = true;
							}
							if (thrown && Main.rand.Next(1, 101) <= Main.player[owner].thrownCrit)
							{
								flag5 = true;
							}
						}
						if (aiStyle == 99)
						{
							Main.player[owner].Counterweight(Main.npc[k].Center, damage, knockBack);
							if (Main.npc[k].Center.X < Main.player[owner].Center.X)
							{
								base.direction = -1;
							}
							else
							{
								base.direction = 1;
							}
							if (ai[0] >= 0f)
							{
								Vector2 value3 = base.Center - Main.npc[k].Center;
								value3.Normalize();
								float scaleFactor = 16f;
								velocity *= -0.5f;
								velocity += value3 * scaleFactor;
								netUpdate = true;
								localAI[0] += 20f;
								if (!Collision.CanHit(position, width, height, Main.player[owner].position, Main.player[owner].width, Main.player[owner].height))
								{
									localAI[0] += 40f;
									num11 = (int)((double)num11 * 0.75);
								}
							}
						}
						if (aiStyle == 93)
						{
							if (ai[0] == 0f)
							{
								ai[1] = 0f;
								int num16 = -k - 1;
								ai[0] = num16;
								velocity = Main.npc[k].Center - base.Center;
							}
							num11 = ((ai[0] != 2f) ? ((int)((double)num11 * 0.15)) : ((int)((double)num11 * 1.35)));
						}
						if (flag4)
						{
							int num17 = Item.NPCtoBanner(Main.npc[k].BannerID());
							if (num17 >= 0)
							{
								Main.player[Main.myPlayer].lastCreatureHit = num17;
							}
						}
						if (Main.netMode != 2 && flag4)
						{
							int num18 = Item.NPCtoBanner(Main.npc[k].BannerID());
							if (num18 > 0 && Main.player[owner].NPCBannerBuff[num18])
							{
								num11 = ((!Main.expertMode) ? ((int)((double)num11 * 1.5)) : (num11 * 2));
							}
						}
						if (Main.expertMode)
						{
							if ((type == 30 || type == 28 || type == 29 || type == 470 || type == 517 || type == 588 || type == 637) && Main.npc[k].type >= 13 && Main.npc[k].type <= 15)
							{
								num11 /= 5;
							}
							if (type == 280 && ((Main.npc[k].type >= 134 && Main.npc[k].type <= 136) || Main.npc[k].type == 139))
							{
								num11 = (int)((double)num11 * 0.75);
							}
						}
						if (Main.netMode != 2 && Main.npc[k].type == 439 && type >= 0 && type <= 651 && ProjectileID.Sets.Homing[type])
						{
							num11 = (int)((float)num11 * 0.75f);
						}
						if (type == 497 && penetrate != 1)
						{
							ai[0] = 25f;
							float num19 = velocity.Length();
							Vector2 value4 = Main.npc[k].Center - base.Center;
							value4.Normalize();
							value4 *= num19;
							velocity = -value4 * 0.9f;
							netUpdate = true;
						}
						if (type == 323 && (Main.npc[k].type == 158 || Main.npc[k].type == 159))
						{
							num11 *= 10;
						}
						if (type == 294)
						{
							damage = (int)((double)damage * 0.8);
						}
						if (type == 477 && penetrate > 1)
						{
							int[] array = new int[10];
							int num20 = 0;
							int num21 = 700;
							int num22 = 20;
							for (int m = 0; m < 200; m++)
							{
								if (m == k || !Main.npc[m].CanBeChasedBy(this))
								{
									continue;
								}
								float num23 = (base.Center - Main.npc[m].Center).Length();
								if (num23 > (float)num22 && num23 < (float)num21 && Collision.CanHitLine(base.Center, 1, 1, Main.npc[m].Center, 1, 1))
								{
									array[num20] = m;
									num20++;
									if (num20 >= 9)
									{
										break;
									}
								}
							}
							if (num20 > 0)
							{
								num20 = Main.rand.Next(num20);
								Vector2 value5 = Main.npc[array[num20]].Center - base.Center;
								float scaleFactor2 = velocity.Length();
								value5.Normalize();
								velocity = value5 * scaleFactor2;
								netUpdate = true;
							}
						}
						if (type == 261)
						{
							float num24 = (float)Math.Sqrt(velocity.X * velocity.X + velocity.Y * velocity.Y);
							if (num24 < 1f)
							{
								num24 = 1f;
							}
							num11 = (int)((float)num11 * num24 / 8f);
						}
						StatusNPC(k);
						if (flag4 && type != 221 && type != 227 && type != 614)
						{
							Main.player[owner].OnHit(Main.npc[k].Center.X, Main.npc[k].Center.Y, Main.npc[k]);
						}
						if (type == 317)
						{
							ai[1] = -1f;
							netUpdate = true;
						}
						if (flag4 && !hostile && Main.player[owner].armorPenetration > 0)
						{
							num11 += Main.npc[k].checkArmorPenetration(Main.player[owner].armorPenetration);
						}
						int num25 = (!flag4) ? ((int)Main.npc[k].StrikeNPCNoInteraction(num11, knockBack, base.direction, flag5)) : ((int)Main.npc[k].StrikeNPC(num11, knockBack, base.direction, flag5));
						if (flag4 && Main.player[owner].accDreamCatcher)
						{
							Main.player[owner].addDPS(num25);
						}
						if (flag4 && !Main.npc[k].immortal)
						{
							if (type == 304 && num25 > 0 && Main.npc[k].lifeMax > 5 && !Main.player[owner].moonLeech)
							{
								vampireHeal(num25, new Vector2(Main.npc[k].Center.X, Main.npc[k].Center.Y));
							}
							if (Main.npc[k].value > 0f && Main.player[owner].coins && Main.rand.Next(5) == 0)
							{
								int num26 = 71;
								if (Main.rand.Next(10) == 0)
								{
									num26 = 72;
								}
								if (Main.rand.Next(100) == 0)
								{
									num26 = 73;
								}
								int num27 = Item.NewItem((int)Main.npc[k].position.X, (int)Main.npc[k].position.Y, Main.npc[k].width, Main.npc[k].height, num26);
								Main.item[num27].stack = Main.rand.Next(1, 11);
								Main.item[num27].velocity.Y = (float)Main.rand.Next(-20, 1) * 0.2f;
								Main.item[num27].velocity.X = (float)Main.rand.Next(10, 31) * 0.2f * (float)base.direction;
								if (Main.netMode == 1)
								{
									NetMessage.SendData(21, -1, -1, "", num27);
								}
							}
							if (num25 > 0 && Main.npc[k].lifeMax > 5 && friendly && !hostile && aiStyle != 59)
							{
								if (Main.npc[k].canGhostHeal)
								{
									if (Main.player[owner].ghostHeal && !Main.player[owner].moonLeech)
									{
										ghostHeal(num25, new Vector2(Main.npc[k].Center.X, Main.npc[k].Center.Y));
									}
									if (Main.player[owner].ghostHurt)
									{
										ghostHurt(num25, new Vector2(Main.npc[k].Center.X, Main.npc[k].Center.Y));
									}
									if (Main.player[owner].setNebula && Main.player[owner].nebulaCD == 0 && Main.rand.Next(3) == 0)
									{
										Main.player[owner].nebulaCD = 30;
										int num28 = Utils.SelectRandom<int>(Main.rand, 3453, 3454, 3455);
										int num29 = Item.NewItem((int)Main.npc[k].position.X, (int)Main.npc[k].position.Y, Main.npc[k].width, Main.npc[k].height, num28);
										Main.item[num29].velocity.Y = (float)Main.rand.Next(-20, 1) * 0.2f;
										Main.item[num29].velocity.X = (float)Main.rand.Next(10, 31) * 0.2f * (float)base.direction;
										if (Main.netMode == 1)
										{
											NetMessage.SendData(21, -1, -1, "", num29);
										}
									}
								}
								if (melee && Main.player[owner].beetleOffense && !Main.npc[k].immortal)
								{
									if (Main.player[owner].beetleOrbs == 0)
									{
										Main.player[owner].beetleCounter += num25 * 3;
									}
									else if (Main.player[owner].beetleOrbs == 1)
									{
										Main.player[owner].beetleCounter += num25 * 2;
									}
									else
									{
										Main.player[owner].beetleCounter += num25;
									}
									Main.player[owner].beetleCountdown = 0;
								}
								if (arrow && type != 631 && Main.player[owner].phantasmTime > 0)
								{
									Vector2 source = Main.player[owner].position + Main.player[owner].Size * Utils.RandomVector2(Main.rand, 0f, 1f);
									Vector2 vector2 = Main.npc[k].DirectionFrom(source) * 6f;
									int num30 = (int)((float)damage * 0.3f);
									NewProjectile(source.X, source.Y, vector2.X, vector2.Y, 631, num30, 0f, owner, k);
									NewProjectile(source.X, source.Y, vector2.X, vector2.Y, 631, num30, 0f, owner, k, 15f);
									NewProjectile(source.X, source.Y, vector2.X, vector2.Y, 631, num30, 0f, owner, k, 30f);
								}
							}
						}
						if (flag4 && melee && Main.player[owner].meleeEnchant == 7)
						{
							NewProjectile(Main.npc[k].Center.X, Main.npc[k].Center.Y, Main.npc[k].velocity.X, Main.npc[k].velocity.Y, 289, 0, 0f, owner);
						}
						if (Main.netMode != 0)
						{
							if (flag5)
							{
								NetMessage.SendData(28, -1, -1, "", k, num11, knockBack, base.direction, 1);
							}
							else
							{
								NetMessage.SendData(28, -1, -1, "", k, num11, knockBack, base.direction);
							}
						}
						if (type >= 390 && type <= 392)
						{
							localAI[1] = 20f;
						}
						if (type == 434)
						{
							numUpdates = 0;
						}
						else if (type == 598 || type == 636 || type == 614)
						{
							damage = 0;
							int num31 = 6;
							if (type == 614)
							{
								num31 = 10;
							}
							if (type == 636)
							{
								num31 = 8;
							}
							Point[] array2 = new Point[num31];
							int num32 = 0;
							for (int n = 0; n < 1000; n++)
							{
								if (n != whoAmI && Main.projectile[n].active && Main.projectile[n].owner == Main.myPlayer && Main.projectile[n].type == type && Main.projectile[n].ai[0] == 1f && Main.projectile[n].ai[1] == (float)k)
								{
									array2[num32++] = new Point(n, Main.projectile[n].timeLeft);
									if (num32 >= array2.Length)
									{
										break;
									}
								}
							}
							if (num32 >= array2.Length)
							{
								int num33 = 0;
								for (int num34 = 1; num34 < array2.Length; num34++)
								{
									if (array2[num34].Y < array2[num33].Y)
									{
										num33 = num34;
									}
								}
								Main.projectile[array2[num33].X].Kill();
							}
						}
						else if (type == 632)
						{
							Main.npc[k].immune[owner] = 5;
						}
						else if (type == 514)
						{
							Main.npc[k].immune[owner] = 1;
						}
						else if (type == 611)
						{
							if (localAI[1] <= 0f)
							{
								NewProjectile(Main.npc[k].Center.X, Main.npc[k].Center.Y, 0f, 0f, 612, damage, 10f, owner, 0f, 0.85f + Main.rand.NextFloat() * 1.15f);
							}
							localAI[1] = 4f;
						}
						else if (type == 595)
						{
							Main.npc[k].immune[owner] = 5;
						}
						else if (type >= 625 && type <= 628)
						{
							Main.npc[k].immune[owner] = 6;
						}
						else if (type == 286)
						{
							Main.npc[k].immune[owner] = 5;
						}
						else if (type == 514)
						{
							Main.npc[k].immune[owner] = 3;
						}
						else if (type == 443)
						{
							Main.npc[k].immune[owner] = 8;
						}
						else if (type >= 424 && type <= 426)
						{
							Main.npc[k].immune[owner] = 5;
						}
						else if (type == 634 || type == 635)
						{
							Main.npc[k].immune[owner] = 5;
						}
						else if (type == 246)
						{
							Main.npc[k].immune[owner] = 7;
						}
						else if (type == 249)
						{
							Main.npc[k].immune[owner] = 7;
						}
						else if (type == 190)
						{
							Main.npc[k].immune[owner] = 8;
						}
						else if (type == 409)
						{
							Main.npc[k].immune[owner] = 6;
						}
						else if (type == 407)
						{
							Main.npc[k].immune[owner] = 20;
						}
						else if (type == 311)
						{
							Main.npc[k].immune[owner] = 7;
						}
						else if (type == 582)
						{
							Main.npc[k].immune[owner] = 7;
							if (ai[0] != 1f)
							{
								ai[0] = 1f;
								netUpdate = true;
							}
						}
						else
						{
							if (type == 451)
							{
								if (ai[0] == 0f)
								{
									ai[0] += penetrate;
								}
								else
								{
									ai[0] -= penetrate + 1;
								}
								ai[1] = 0f;
								netUpdate = true;
								break;
							}
							if (penetrate != 1)
							{
								Main.npc[k].immune[owner] = 10;
							}
						}
						if (penetrate > 0 && type != 317)
						{
							if (type == 357)
							{
								damage = (int)((double)damage * 0.9);
							}
							penetrate--;
							if (penetrate == 0)
							{
								break;
							}
						}
						if (aiStyle == 7)
						{
							ai[0] = 1f;
							damage = 0;
							netUpdate = true;
						}
						else if (aiStyle == 13)
						{
							ai[0] = 1f;
							netUpdate = true;
						}
						else if (aiStyle == 69)
						{
							ai[0] = 1f;
							netUpdate = true;
						}
						else if (type == 607)
						{
							ai[0] = 1f;
							netUpdate = true;
							friendly = false;
						}
						else if (type == 638 || type == 639 || type == 640)
						{
							npcImmune[k] = -1;
							Main.npc[k].immune[owner] = 0;
							damage = (int)((double)damage * 0.96);
						}
						else if (type == 617)
						{
							npcImmune[k] = 8;
							Main.npc[k].immune[owner] = 0;
						}
						else if (type == 618)
						{
							npcImmune[k] = 20;
							Main.npc[k].immune[owner] = 0;
						}
						else if (type == 642)
						{
							npcImmune[k] = 10;
							Main.npc[k].immune[owner] = 0;
						}
						else if (type == 611 || type == 612)
						{
							npcImmune[k] = 6;
							Main.npc[k].immune[owner] = 4;
						}
						else if (type == 645)
						{
							npcImmune[k] = -1;
							Main.npc[k].immune[owner] = 0;
							if (ai[1] != -1f)
							{
								ai[0] = 0f;
								ai[1] = -1f;
								netUpdate = true;
							}
						}
						numHits++;
						int num43 = Main.npc[k].immune[owner];
						int num44 = 10;
					}
				}
				if (damage > 0 && Main.player[Main.myPlayer].hostile)
				{
					for (int num35 = 0; num35 < 16; num35++)
					{
						if (num35 == owner || !Main.player[num35].active || Main.player[num35].dead || Main.player[num35].immune || !Main.player[num35].hostile || playerImmune[num35] > 0 || (Main.player[Main.myPlayer].team != 0 && Main.player[Main.myPlayer].team == Main.player[num35].team) || (ownerHitCheck && !Collision.CanHit(Main.player[owner].position, Main.player[owner].width, Main.player[owner].height, Main.player[num35].position, Main.player[num35].width, Main.player[num35].height)) || !Colliding(myRect, Main.player[num35].getRect()))
						{
							continue;
						}
						if (aiStyle == 3)
						{
							if (ai[0] == 0f)
							{
								velocity.X = 0f - velocity.X;
								velocity.Y = 0f - velocity.Y;
								netUpdate = true;
							}
							ai[0] = 1f;
						}
						else if (aiStyle == 16)
						{
							if (timeLeft > 3)
							{
								timeLeft = 3;
							}
							if (Main.player[num35].position.X + (float)(Main.player[num35].width / 2) < position.X + (float)(width / 2))
							{
								base.direction = -1;
							}
							else
							{
								base.direction = 1;
							}
						}
						else if (aiStyle == 68)
						{
							if (timeLeft > 3)
							{
								timeLeft = 3;
							}
							if (Main.player[num35].position.X + (float)(Main.player[num35].width / 2) < position.X + (float)(width / 2))
							{
								base.direction = -1;
							}
							else
							{
								base.direction = 1;
							}
						}
						if (type == 41 && timeLeft > 1)
						{
							timeLeft = 1;
						}
						bool flag6 = false;
						if (melee && Main.rand.Next(1, 101) <= Main.player[owner].meleeCrit)
						{
							flag6 = true;
						}
						int num36 = Main.DamageVar(damage);
						if (!Main.player[num35].immune)
						{
							StatusPvP(num35);
						}
						if (type != 221 && type != 227 && type != 614)
						{
							Main.player[owner].OnHit(Main.player[num35].Center.X, Main.player[num35].Center.Y, Main.player[num35]);
						}
						int num37 = (int)Main.player[num35].Hurt(num36, base.direction, true, false, Lang.deathMsg(Main.player[num35].name, owner, -1, whoAmI), flag6);
						if (num37 > 0 && Main.player[owner].ghostHeal && friendly && !hostile)
						{
							ghostHeal(num37, new Vector2(Main.player[num35].Center.X, Main.player[num35].Center.Y));
						}
						if (type == 304 && num37 > 0)
						{
							vampireHeal(num37, new Vector2(Main.player[num35].Center.X, Main.player[num35].Center.Y));
						}
						if (melee && Main.player[owner].meleeEnchant == 7)
						{
							NewProjectile(Main.player[num35].Center.X, Main.player[num35].Center.Y, Main.player[num35].velocity.X, Main.player[num35].velocity.Y, 289, 0, 0f, owner);
						}
						if (Main.netMode != 0)
						{
							if (flag6)
							{
								NetMessage.SendData(26, -1, -1, Lang.deathMsg(Main.player[num35].name, owner, -1, whoAmI), num35, base.direction, num36, 1f, 1);
							}
							else
							{
								NetMessage.SendData(26, -1, -1, Lang.deathMsg(Main.player[num35].name, owner, -1, whoAmI), num35, base.direction, num36, 1f);
							}
						}
						playerImmune[num35] = 40;
						if (penetrate > 0)
						{
							penetrate--;
							if (penetrate == 0)
							{
								break;
							}
						}
						if (aiStyle == 7)
						{
							ai[0] = 1f;
							damage = 0;
							netUpdate = true;
						}
						else if (aiStyle == 13)
						{
							ai[0] = 1f;
							netUpdate = true;
						}
						else if (aiStyle == 69)
						{
							ai[0] = 1f;
							netUpdate = true;
						}
					}
				}
			}
			if (type == 10 && Main.netMode != 1)
			{
				for (int num38 = 0; num38 < 200; num38++)
				{
					if (Main.npc[num38].active && Main.npc[num38].type == 534)
					{
						Rectangle value6 = new Rectangle((int)Main.npc[num38].position.X, (int)Main.npc[num38].position.Y, Main.npc[num38].width, Main.npc[num38].height);
						if (myRect.Intersects(value6))
						{
							Main.npc[num38].Transform(441);
						}
					}
				}
			}
			if (type == 11 && Main.netMode != 1)
			{
				for (int num39 = 0; num39 < 200; num39++)
				{
					if (!Main.npc[num39].active)
					{
						continue;
					}
					if (Main.npc[num39].type == 46 || Main.npc[num39].type == 303)
					{
						Rectangle value7 = new Rectangle((int)Main.npc[num39].position.X, (int)Main.npc[num39].position.Y, Main.npc[num39].width, Main.npc[num39].height);
						if (myRect.Intersects(value7))
						{
							Main.npc[num39].Transform(47);
						}
					}
					else if (Main.npc[num39].type == 55)
					{
						Rectangle value8 = new Rectangle((int)Main.npc[num39].position.X, (int)Main.npc[num39].position.Y, Main.npc[num39].width, Main.npc[num39].height);
						if (myRect.Intersects(value8))
						{
							Main.npc[num39].Transform(57);
						}
					}
					else if (Main.npc[num39].type == 148 || Main.npc[num39].type == 149)
					{
						Rectangle value9 = new Rectangle((int)Main.npc[num39].position.X, (int)Main.npc[num39].position.Y, Main.npc[num39].width, Main.npc[num39].height);
						if (myRect.Intersects(value9))
						{
							Main.npc[num39].Transform(168);
						}
					}
				}
			}
			if (type == 463 && Main.netMode != 1)
			{
				for (int num40 = 0; num40 < 200; num40++)
				{
					if (!Main.npc[num40].active)
					{
						continue;
					}
					if (Main.npc[num40].type == 46 || Main.npc[num40].type == 303)
					{
						Rectangle value10 = new Rectangle((int)Main.npc[num40].position.X, (int)Main.npc[num40].position.Y, Main.npc[num40].width, Main.npc[num40].height);
						if (myRect.Intersects(value10))
						{
							Main.npc[num40].Transform(464);
						}
					}
					else if (Main.npc[num40].type == 55)
					{
						Rectangle value11 = new Rectangle((int)Main.npc[num40].position.X, (int)Main.npc[num40].position.Y, Main.npc[num40].width, Main.npc[num40].height);
						if (myRect.Intersects(value11))
						{
							Main.npc[num40].Transform(465);
						}
					}
					else if (Main.npc[num40].type == 148 || Main.npc[num40].type == 149)
					{
						Rectangle value12 = new Rectangle((int)Main.npc[num40].position.X, (int)Main.npc[num40].position.Y, Main.npc[num40].width, Main.npc[num40].height);
						if (myRect.Intersects(value12))
						{
							Main.npc[num40].Transform(470);
						}
					}
				}
			}
			if (Main.netMode == 2 || !hostile || Main.myPlayer >= 16 || damage <= 0)
			{
				return;
			}
			int num41 = -1;
			if (type == 455 || type == 452 || type == 454 || type == 462)
			{
				num41 = 1;
			}
			int myPlayer2 = Main.myPlayer;
			if (!Main.player[myPlayer2].active || Main.player[myPlayer2].dead || (Main.player[myPlayer2].immune && num41 == -1) || !Colliding(myRect, Main.player[myPlayer2].getRect()))
			{
				return;
			}
			int direction = base.direction;
			direction = ((!(Main.player[myPlayer2].position.X + (float)(Main.player[myPlayer2].width / 2) < position.X + (float)(width / 2))) ? 1 : (-1));
			int num42 = Main.DamageVar(damage);
			if (!Main.player[myPlayer2].immune)
			{
				StatusPlayer(myPlayer2);
			}
			if (Main.player[myPlayer2].resistCold && coldDamage)
			{
				num42 = (int)((float)num42 * 0.7f);
			}
			if (Main.expertMode)
			{
				num42 = (int)((float)num42 * Main.expertDamage);
			}
			Main.player[myPlayer2].Hurt(num42 * 2, direction, false, false, Lang.deathMsg(Main.player[myPlayer2].name, -1, -1, whoAmI), false, num41);
			if (trap)
			{
				Main.player[myPlayer2].trapDebuffSource = true;
				if (Main.player[myPlayer2].dead)
				{
					AchievementsHelper.HandleSpecialEvent(Main.player[myPlayer2], 4);
				}
			}
			if (type == 435)
			{
				penetrate--;
			}
			if (type == 436)
			{
				penetrate--;
			}
			if (type == 437)
			{
				penetrate--;
			}
		}

		public bool Colliding(Rectangle myRect, Rectangle targetRect)
		{
			if (type == 598 && targetRect.Width > 8 && targetRect.Height > 8)
			{
				targetRect.Inflate(-targetRect.Width / 8, -targetRect.Height / 8);
			}
			else if (type == 614 && targetRect.Width > 8 && targetRect.Height > 8)
			{
				targetRect.Inflate(-targetRect.Width / 8, -targetRect.Height / 8);
			}
			else if (type == 636 && targetRect.Width > 8 && targetRect.Height > 8)
			{
				targetRect.Inflate(-targetRect.Width / 8, -targetRect.Height / 8);
			}
			else if (type == 607)
			{
				myRect.X += (int)velocity.X;
				myRect.Y += (int)velocity.Y;
			}
			if (myRect.Intersects(targetRect))
			{
				return true;
			}
			if (type == 461)
			{
				float collisionPoint = 0f;
				if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + velocity * localAI[1], 22f * scale, ref collisionPoint))
				{
					return true;
				}
			}
			else if (type == 642)
			{
				float collisionPoint2 = 0f;
				if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + velocity * localAI[1], 30f * scale, ref collisionPoint2))
				{
					return true;
				}
			}
			else if (type == 632)
			{
				float collisionPoint3 = 0f;
				if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + velocity * localAI[1], 22f * scale, ref collisionPoint3))
				{
					return true;
				}
			}
			else if (type == 455)
			{
				float collisionPoint4 = 0f;
				if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + velocity * localAI[1], 36f * scale, ref collisionPoint4))
				{
					return true;
				}
			}
			else if (type == 611)
			{
				float collisionPoint5 = 0f;
				if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + velocity, 16f * scale, ref collisionPoint5))
				{
					return true;
				}
			}
			else if (type == 537)
			{
				float collisionPoint6 = 0f;
				if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + velocity * localAI[1], 22f * scale, ref collisionPoint6))
				{
					return true;
				}
			}
			else if (type == 466 || type == 580)
			{
				for (int i = 0; i < oldPos.Length; i++)
				{
					myRect.X = (int)oldPos[i].X;
					myRect.Y = (int)oldPos[i].Y;
					if (myRect.Intersects(targetRect))
					{
						return true;
					}
				}
			}
			else if (type == 464 && ai[1] != 1f)
			{
				Vector2 value = new Vector2(0f, -720f).RotatedBy(velocity.ToRotation());
				float scaleFactor = ai[0] % 45f / 45f;
				Vector2 spinningpoint = value * scaleFactor;
				for (int j = 0; j < 6; j++)
				{
					float num = (float)j * ((float)Math.PI * 2f) / 6f;
					Vector2 center = base.Center + spinningpoint.RotatedBy(num);
					if (Utils.CenteredRectangle(center, new Vector2(30f, 30f)).Intersects(targetRect))
					{
						return true;
					}
				}
			}
			return false;
		}

		public void ProjLight()
		{
			if (!(light > 0f))
			{
				return;
			}
			float num = light;
			float num2 = light;
			float num3 = light;
			if (type == 446)
			{
				num *= 0f;
				num3 *= 0.8f;
			}
			else if (type == 493 || type == 494)
			{
				num2 *= 0.3f;
			}
			else if (type == 332)
			{
				num3 *= 0.1f;
				num2 *= 0.6f;
			}
			else if (type == 259)
			{
				num3 *= 0.1f;
			}
			else if (type == 329)
			{
				num3 *= 0.1f;
				num2 *= 0.9f;
			}
			else if (type == 2 || type == 82)
			{
				num2 *= 0.75f;
				num3 *= 0.55f;
			}
			else if (type == 172)
			{
				num2 *= 0.55f;
				num *= 0.35f;
			}
			else if (type == 308)
			{
				num2 *= 0.7f;
				num *= 0.1f;
			}
			else if (type == 304)
			{
				num2 *= 0.2f;
				num3 *= 0.1f;
			}
			else if (type == 263)
			{
				num2 *= 0.7f;
				num *= 0.1f;
			}
			else if (type == 274)
			{
				num2 *= 0.1f;
				num *= 0.7f;
			}
			else if (type == 254)
			{
				num *= 0.1f;
			}
			else if (type == 94)
			{
				num *= 0.5f;
				num2 *= 0f;
			}
			else if (type == 95 || type == 96 || type == 103 || type == 104)
			{
				num *= 0.35f;
				num2 *= 1f;
				num3 *= 0f;
			}
			else if (type == 4)
			{
				num2 *= 0.1f;
				num *= 0.5f;
			}
			else if (type == 257)
			{
				num2 *= 0.9f;
				num *= 0.1f;
			}
			else if (type == 9)
			{
				num2 *= 0.1f;
				num3 *= 0.6f;
			}
			else if (type == 488)
			{
				num = 0.3f;
				num3 = 0.25f;
				num2 = 0f;
			}
			else if (type == 92)
			{
				num2 *= 0.6f;
				num *= 0.8f;
			}
			else if (type == 93)
			{
				num2 *= 1f;
				num *= 1f;
				num3 *= 0.01f;
			}
			else if (type == 12)
			{
				num *= 0.9f;
				num2 *= 0.8f;
				num3 *= 0.1f;
			}
			else if (type == 14 || type == 110 || type == 180 || type == 242 || type == 302)
			{
				num2 *= 0.7f;
				num3 *= 0.1f;
			}
			else if (type == 15)
			{
				num2 *= 0.4f;
				num3 *= 0.1f;
				num = 1f;
			}
			else if (type == 16)
			{
				num *= 0.1f;
				num2 *= 0.4f;
				num3 = 1f;
			}
			else if (type == 18)
			{
				num2 *= 0.1f;
				num *= 0.6f;
			}
			else if (type == 19)
			{
				num2 *= 0.5f;
				num3 *= 0.1f;
			}
			else if (type == 20)
			{
				num *= 0.1f;
				num3 *= 0.3f;
			}
			else if (type == 22)
			{
				num = 0f;
				num2 = 0f;
			}
			else if (type == 27)
			{
				num *= 0f;
				num2 *= 0.3f;
				num3 = 1f;
			}
			else if (type == 34)
			{
				num2 *= 0.1f;
				num3 *= 0.1f;
			}
			else if (type == 36)
			{
				num = 0.8f;
				num2 *= 0.2f;
				num3 *= 0.6f;
			}
			else if (type == 41)
			{
				num2 *= 0.8f;
				num3 *= 0.6f;
			}
			else if (type == 44 || type == 45)
			{
				num3 = 1f;
				num *= 0.6f;
				num2 *= 0.1f;
			}
			else if (type == 50)
			{
				num *= 0.7f;
				num3 *= 0.8f;
			}
			else if (type == 515)
			{
				num2 *= 0.6f;
				num3 *= 0.85f;
			}
			else if (type == 53)
			{
				num *= 0.7f;
				num2 *= 0.8f;
			}
			else if (type == 473)
			{
				num *= 1.05f;
				num2 *= 0.95f;
				num3 *= 0.55f;
			}
			else if (type == 72)
			{
				num *= 0.45f;
				num2 *= 0.75f;
				num3 = 1f;
			}
			else if (type == 86)
			{
				num *= 1f;
				num2 *= 0.45f;
				num3 = 0.75f;
			}
			else if (type == 87)
			{
				num *= 0.45f;
				num2 = 1f;
				num3 *= 0.75f;
			}
			else if (type == 73)
			{
				num *= 0.4f;
				num2 *= 0.6f;
				num3 *= 1f;
			}
			else if (type == 74)
			{
				num *= 1f;
				num2 *= 0.4f;
				num3 *= 0.6f;
			}
			else if (type == 284)
			{
				num *= 1f;
				num2 *= 0.1f;
				num3 *= 0.8f;
			}
			else if (type == 285)
			{
				num *= 0.1f;
				num2 *= 0.5f;
				num3 *= 1f;
			}
			else if (type == 286)
			{
				num *= 1f;
				num2 *= 0.5f;
				num3 *= 0.1f;
			}
			else if (type == 287)
			{
				num *= 0.9f;
				num2 *= 1f;
				num3 *= 0.4f;
			}
			else if (type == 283)
			{
				num *= 0.8f;
				num2 *= 0.1f;
			}
			else if (type == 76 || type == 77 || type == 78)
			{
				num *= 1f;
				num2 *= 0.3f;
				num3 *= 0.6f;
			}
			else if (type == 79)
			{
				num = (float)Main.DiscoR / 255f;
				num2 = (float)Main.DiscoG / 255f;
				num3 = (float)Main.DiscoB / 255f;
			}
			else if (type == 80)
			{
				num *= 0f;
				num2 *= 0.8f;
				num3 *= 1f;
			}
			else if (type == 83 || type == 88)
			{
				num *= 0.7f;
				num2 *= 0f;
				num3 *= 1f;
			}
			else if (type == 100)
			{
				num *= 1f;
				num2 *= 0.5f;
				num3 *= 0f;
			}
			else if (type == 84 || type == 389)
			{
				num *= 0.8f;
				num2 *= 0f;
				num3 *= 0.5f;
			}
			else if (type == 89 || type == 90)
			{
				num2 *= 0.2f;
				num3 *= 1f;
				num *= 0.05f;
			}
			else if (type == 106)
			{
				num *= 0f;
				num2 *= 0.5f;
				num3 *= 1f;
			}
			else if (type == 113)
			{
				num *= 0.25f;
				num2 *= 0.75f;
				num3 *= 1f;
			}
			else if (type == 114 || type == 115)
			{
				num *= 0.5f;
				num2 *= 0.05f;
				num3 *= 1f;
			}
			else if (type == 116)
			{
				num3 *= 0.25f;
			}
			else if (type == 131)
			{
				num *= 0.1f;
				num2 *= 0.4f;
			}
			else if (type == 132 || type == 157)
			{
				num *= 0.2f;
				num3 *= 0.6f;
			}
			else if (type == 156)
			{
				num *= 1f;
				num3 *= 0.6f;
				num2 = 0f;
			}
			else if (type == 173)
			{
				num *= 0.3f;
				num3 *= 1f;
				num2 = 0.4f;
			}
			else if (type == 207)
			{
				num *= 0.4f;
				num3 *= 0.4f;
			}
			else if (type == 253)
			{
				num = 0f;
				num2 *= 0.4f;
			}
			else if (type == 211)
			{
				num *= 0.5f;
				num2 *= 0.9f;
				num3 *= 1f;
				if (localAI[0] == 0f)
				{
					light = 1.5f;
				}
				else
				{
					light = 1f;
				}
			}
			else if (type == 209)
			{
				float num4 = (255f - (float)alpha) / 255f;
				num *= 0.3f;
				num2 *= 0.4f;
				num3 *= 1.75f;
				num3 *= num4;
				num *= num4;
				num2 *= num4;
			}
			else if (type == 226 || ((type == 227) | (type == 229)))
			{
				num *= 0.25f;
				num2 *= 1f;
				num3 *= 0.5f;
			}
			else if (type == 251)
			{
				num = (float)Main.DiscoR / 255f;
				num2 = (float)Main.DiscoG / 255f;
				num3 = (float)Main.DiscoB / 255f;
				num = (num + 1f) / 2f;
				num2 = (num2 + 1f) / 2f;
				num3 = (num3 + 1f) / 2f;
				num *= light;
				num2 *= light;
				num3 *= light;
			}
			else if (type == 278 || type == 279)
			{
				num *= 1f;
				num2 *= 1f;
				num3 *= 0f;
			}
			Lighting.AddLight((int)((position.X + (float)(width / 2)) / 16f), (int)((position.Y + (float)(height / 2)) / 16f), num, num2, num3);
		}

		public Rectangle getRect()
		{
			return new Rectangle((int)position.X, (int)position.Y, width, height);
		}

		public void Update(int i)
		{
			if (!active)
			{
				return;
			}
			numUpdates = extraUpdates;
			while (numUpdates >= 0)
			{
				numUpdates--;
				if (type == 640 && ai[1] > 0f)
				{
					ai[1] -= 1f;
					continue;
				}
				if (position.X <= Main.leftWorld || position.X + (float)base.width >= Main.rightWorld || position.Y <= Main.topWorld || position.Y + (float)base.height >= Main.bottomWorld)
				{
					active = false;
					return;
				}
				if (type != 344 && !npcProj)
				{
					if (Main.player[owner].frostBurn && (melee || ranged) && friendly && !hostile && !noEnchantments && Main.rand.Next(2 * (1 + extraUpdates)) == 0)
					{
						int num = Dust.NewDust(position, base.width, base.height, 135, base.velocity.X * 0.2f + (float)(direction * 3), base.velocity.Y * 0.2f, 100, default(Color), 2f);
						Main.dust[num].noGravity = true;
						Main.dust[num].velocity *= 0.7f;
						Main.dust[num].velocity.Y -= 0.5f;
					}
					if (melee && Main.player[owner].meleeEnchant > 0 && !noEnchantments)
					{
						if (Main.player[owner].meleeEnchant == 1 && Main.rand.Next(3) == 0)
						{
							int num2 = Dust.NewDust(position, base.width, base.height, 171, 0f, 0f, 100);
							Main.dust[num2].noGravity = true;
							Main.dust[num2].fadeIn = 1.5f;
							Main.dust[num2].velocity *= 0.25f;
						}
						if (Main.player[owner].meleeEnchant == 1)
						{
							if (Main.rand.Next(3) == 0)
							{
								int num3 = Dust.NewDust(position, base.width, base.height, 171, 0f, 0f, 100);
								Main.dust[num3].noGravity = true;
								Main.dust[num3].fadeIn = 1.5f;
								Main.dust[num3].velocity *= 0.25f;
							}
						}
						else if (Main.player[owner].meleeEnchant == 2)
						{
							if (Main.rand.Next(2) == 0)
							{
								int num4 = Dust.NewDust(position, base.width, base.height, 75, base.velocity.X * 0.2f + (float)(direction * 3), base.velocity.Y * 0.2f, 100, default(Color), 2.5f);
								Main.dust[num4].noGravity = true;
								Main.dust[num4].velocity *= 0.7f;
								Main.dust[num4].velocity.Y -= 0.5f;
							}
						}
						else if (Main.player[owner].meleeEnchant == 3)
						{
							if (Main.rand.Next(2) == 0)
							{
								int num5 = Dust.NewDust(position, base.width, base.height, 6, base.velocity.X * 0.2f + (float)(direction * 3), base.velocity.Y * 0.2f, 100, default(Color), 2.5f);
								Main.dust[num5].noGravity = true;
								Main.dust[num5].velocity *= 0.7f;
								Main.dust[num5].velocity.Y -= 0.5f;
							}
						}
						else if (Main.player[owner].meleeEnchant == 4)
						{
							int num6 = 0;
							if (Main.rand.Next(2) == 0)
							{
								num6 = Dust.NewDust(position, base.width, base.height, 57, base.velocity.X * 0.2f + (float)(direction * 3), base.velocity.Y * 0.2f, 100, default(Color), 1.1f);
								Main.dust[num6].noGravity = true;
								Main.dust[num6].velocity.X /= 2f;
								Main.dust[num6].velocity.Y /= 2f;
							}
						}
						else if (Main.player[owner].meleeEnchant == 5)
						{
							if (Main.rand.Next(2) == 0)
							{
								int num7 = Dust.NewDust(position, base.width, base.height, 169, 0f, 0f, 100);
								Main.dust[num7].velocity.X += direction;
								Main.dust[num7].velocity.Y += 0.2f;
								Main.dust[num7].noGravity = true;
							}
						}
						else if (Main.player[owner].meleeEnchant == 6)
						{
							if (Main.rand.Next(2) == 0)
							{
								int num8 = Dust.NewDust(position, base.width, base.height, 135, 0f, 0f, 100);
								Main.dust[num8].velocity.X += direction;
								Main.dust[num8].velocity.Y += 0.2f;
								Main.dust[num8].noGravity = true;
							}
						}
						else if (Main.player[owner].meleeEnchant == 7)
						{
							if (Main.rand.Next(20) == 0)
							{
								int num9 = Main.rand.Next(139, 143);
								int num10 = Dust.NewDust(position, base.width, base.height, num9, base.velocity.X, base.velocity.Y, 0, default(Color), 1.2f);
								Main.dust[num10].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
								Main.dust[num10].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
								Main.dust[num10].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
								Main.dust[num10].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
								Main.dust[num10].scale *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
							}
							if (Main.rand.Next(40) == 0)
							{
								int num11 = Main.rand.Next(276, 283);
								int num12 = Gore.NewGore(position, base.velocity, num11);
								Main.gore[num12].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
								Main.gore[num12].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
								Main.gore[num12].scale *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
								Main.gore[num12].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
								Main.gore[num12].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
							}
						}
						else if (Main.player[owner].meleeEnchant == 8 && Main.rand.Next(4) == 0)
						{
							int num13 = Dust.NewDust(position, base.width, base.height, 46, 0f, 0f, 100);
							Main.dust[num13].noGravity = true;
							Main.dust[num13].fadeIn = 1.5f;
							Main.dust[num13].velocity *= 0.25f;
						}
					}
					if (melee && Main.player[owner].magmaStone && !noEnchantments && Main.rand.Next(3) != 0)
					{
						int num14 = Dust.NewDust(new Vector2(position.X - 4f, position.Y - 4f), base.width + 8, base.height + 8, 6, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100, default(Color), 2f);
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num14].scale = 1.5f;
						}
						Main.dust[num14].noGravity = true;
						Main.dust[num14].velocity.X *= 2f;
						Main.dust[num14].velocity.Y *= 2f;
					}
				}
				if (minion && numUpdates == -1 && type != 625 && type != 628)
				{
					minionPos = Main.player[owner].numMinions;
					if (Main.player[owner].slotsMinions + minionSlots > (float)Main.player[owner].maxMinions && owner == Main.myPlayer)
					{
						if (type == 627 || type == 626)
						{
							int byUUID = GetByUUID(owner, ai[0]);
							if (byUUID != -1)
							{
								Projectile projectile = Main.projectile[byUUID];
								if (projectile.type != 625)
								{
									projectile.localAI[1] = localAI[1];
								}
								projectile = Main.projectile[(int)localAI[1]];
								projectile.ai[0] = ai[0];
								projectile.ai[1] = 1f;
								projectile.netUpdate = true;
							}
						}
						Kill();
					}
					else
					{
						Main.player[owner].numMinions++;
						Main.player[owner].slotsMinions += minionSlots;
					}
				}
				float num15 = 1f + Math.Abs(base.velocity.X) / 3f;
				if (gfxOffY > 0f)
				{
					gfxOffY -= num15 * stepSpeed;
					if (gfxOffY < 0f)
					{
						gfxOffY = 0f;
					}
				}
				else if (gfxOffY < 0f)
				{
					gfxOffY += num15 * stepSpeed;
					if (gfxOffY > 0f)
					{
						gfxOffY = 0f;
					}
				}
				if (gfxOffY > 16f)
				{
					gfxOffY = 16f;
				}
				if (gfxOffY < -16f)
				{
					gfxOffY = -16f;
				}
				Vector2 vector = base.velocity;
				oldVelocity = base.velocity;
				whoAmI = i;
				if (soundDelay > 0)
				{
					soundDelay--;
				}
				netUpdate = false;
				for (int j = 0; j < 16; j++)
				{
					if (playerImmune[j] > 0)
					{
						playerImmune[j]--;
					}
				}
				if (updatedNPCImmunity)
				{
					for (int k = 0; k < 200; k++)
					{
						if (npcImmune[k] > 0)
						{
							npcImmune[k]--;
						}
					}
				}
				AI();
				if (owner < 16 && !Main.player[owner].active)
				{
					Kill();
				}
				if (type == 242 || type == 302 || type == 638)
				{
					wet = false;
				}
				if (!ignoreWater)
				{
					bool flag;
					bool flag2;
					try
					{
						flag = Collision.LavaCollision(position, base.width, base.height);
						flag2 = Collision.WetCollision(position, base.width, base.height);
						if (flag)
						{
							lavaWet = true;
						}
						if (Collision.honey)
						{
							honeyWet = true;
						}
					}
					catch
					{
						active = false;
						return;
					}
					if (wet && !lavaWet)
					{
						if (type == 85 || type == 15 || type == 34 || type == 188)
						{
							Kill();
						}
						if (type == 2)
						{
							type = 1;
							light = 0f;
						}
					}
					if (type == 80)
					{
						flag2 = false;
						wet = false;
						if (flag && ai[0] >= 0f)
						{
							Kill();
						}
					}
					if (flag2)
					{
						if (type != 155 && wetCount == 0 && !wet)
						{
							if (!flag)
							{
								if (honeyWet)
								{
									for (int l = 0; l < 10; l++)
									{
										int num16 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(base.height / 2) - 8f), base.width + 12, 24, 152);
										Main.dust[num16].velocity.Y -= 1f;
										Main.dust[num16].velocity.X *= 2.5f;
										Main.dust[num16].scale = 1.3f;
										Main.dust[num16].alpha = 100;
										Main.dust[num16].noGravity = true;
									}
									Main.PlaySound(19, (int)position.X, (int)position.Y);
								}
								else
								{
									for (int m = 0; m < 10; m++)
									{
										int num17 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(base.height / 2) - 8f), base.width + 12, 24, Dust.dustWater());
										Main.dust[num17].velocity.Y -= 4f;
										Main.dust[num17].velocity.X *= 2.5f;
										Main.dust[num17].scale = 1.3f;
										Main.dust[num17].alpha = 100;
										Main.dust[num17].noGravity = true;
									}
									Main.PlaySound(19, (int)position.X, (int)position.Y);
								}
							}
							else
							{
								for (int n = 0; n < 10; n++)
								{
									int num18 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(base.height / 2) - 8f), base.width + 12, 24, 35);
									Main.dust[num18].velocity.Y -= 1.5f;
									Main.dust[num18].velocity.X *= 2.5f;
									Main.dust[num18].scale = 1.3f;
									Main.dust[num18].alpha = 100;
									Main.dust[num18].noGravity = true;
								}
								Main.PlaySound(19, (int)position.X, (int)position.Y);
							}
						}
						wet = true;
					}
					else if (wet)
					{
						wet = false;
						if (type == 155)
						{
							base.velocity.Y *= 0.5f;
						}
						else if (wetCount == 0)
						{
							wetCount = 10;
							if (!lavaWet)
							{
								if (honeyWet)
								{
									for (int num19 = 0; num19 < 10; num19++)
									{
										int num20 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(base.height / 2) - 8f), base.width + 12, 24, 152);
										Main.dust[num20].velocity.Y -= 1f;
										Main.dust[num20].velocity.X *= 2.5f;
										Main.dust[num20].scale = 1.3f;
										Main.dust[num20].alpha = 100;
										Main.dust[num20].noGravity = true;
									}
									Main.PlaySound(19, (int)position.X, (int)position.Y);
								}
								else
								{
									for (int num21 = 0; num21 < 10; num21++)
									{
										int num22 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(base.height / 2)), base.width + 12, 24, Dust.dustWater());
										Main.dust[num22].velocity.Y -= 4f;
										Main.dust[num22].velocity.X *= 2.5f;
										Main.dust[num22].scale = 1.3f;
										Main.dust[num22].alpha = 100;
										Main.dust[num22].noGravity = true;
									}
									Main.PlaySound(19, (int)position.X, (int)position.Y);
								}
							}
							else
							{
								for (int num23 = 0; num23 < 10; num23++)
								{
									int num24 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(base.height / 2) - 8f), base.width + 12, 24, 35);
									Main.dust[num24].velocity.Y -= 1.5f;
									Main.dust[num24].velocity.X *= 2.5f;
									Main.dust[num24].scale = 1.3f;
									Main.dust[num24].alpha = 100;
									Main.dust[num24].noGravity = true;
								}
								Main.PlaySound(19, (int)position.X, (int)position.Y);
							}
						}
					}
					if (!wet)
					{
						lavaWet = false;
						honeyWet = false;
					}
					if (wetCount > 0)
					{
						wetCount--;
					}
				}
				oldPosition = position;
				oldDirection = direction;
				bool flag3 = false;
				if (tileCollide)
				{
					Vector2 velocity = base.velocity;
					bool flag4 = true;
					int num25 = -1;
					int num26 = -1;
					if (Main.projPet[type])
					{
						flag4 = false;
						if (Main.player[owner].position.Y + (float)Main.player[owner].height - 12f > position.Y + (float)base.height)
						{
							flag4 = true;
						}
					}
					if (type == 500)
					{
						flag4 = false;
						if (Main.player[owner].Bottom.Y > base.Bottom.Y + 4f)
						{
							flag4 = true;
						}
					}
					if (aiStyle == 62)
					{
						flag4 = true;
					}
					if (aiStyle == 66)
					{
						flag4 = true;
					}
					if (type == 317)
					{
						flag4 = true;
					}
					if (type == 373)
					{
						flag4 = true;
					}
					if (aiStyle == 53)
					{
						flag4 = false;
					}
					if (type == 9 || type == 12 || type == 15 || type == 13 || type == 31 || type == 39 || type == 40)
					{
						flag4 = false;
					}
					if (type == 24)
					{
						flag4 = false;
					}
					if (aiStyle == 29 || type == 28 || aiStyle == 49)
					{
						num25 = base.width - 8;
						num26 = base.height - 8;
					}
					else if (type == 250 || type == 267 || type == 297 || type == 323 || type == 3)
					{
						num25 = 6;
						num26 = 6;
					}
					else if (type == 308)
					{
						num25 = 26;
						num26 = base.height;
					}
					else if (type == 261 || type == 277)
					{
						num25 = 26;
						num26 = 26;
					}
					else if (type == 481 || type == 491 || type == 106 || type == 262 || type == 271 || type == 270 || type == 272 || type == 273 || type == 274 || type == 280 || type == 288 || type == 301 || type == 320 || type == 333 || type == 335 || type == 343 || type == 344 || type == 497 || type == 496 || type == 6 || type == 19 || type == 113 || type == 520 || type == 523 || type == 585 || type == 598 || type == 599 || type == 636)
					{
						num25 = 10;
						num26 = 10;
					}
					else if (type == 514)
					{
						num25 = 4;
						num26 = 4;
					}
					else if (type == 248 || type == 247 || type == 507 || type == 508)
					{
						num25 = base.width - 12;
						num26 = base.height - 12;
					}
					else if (aiStyle == 18 || type == 254)
					{
						num25 = base.width - 36;
						num26 = base.height - 36;
					}
					else if (type == 182 || type == 190 || type == 33 || type == 229 || type == 237 || type == 243)
					{
						num25 = base.width - 20;
						num26 = base.height - 20;
					}
					else if (aiStyle == 27)
					{
						num25 = base.width - 12;
						num26 = base.height - 12;
					}
					else if (type == 533 && ai[0] >= 6f)
					{
						num25 = base.width + 6;
						num26 = base.height + 6;
					}
					else if (type == 582 || type == 634 || type == 635)
					{
						num25 = 8;
						num26 = 8;
					}
					else if (type == 617)
					{
						num25 = (int)(20f * scale);
						num26 = (int)(20f * scale);
					}
					if (((type != 440 && type != 449 && type != 606) || ai[1] != 1f) && (type != 466 || localAI[1] != 1f) && (type != 580 || !(localAI[1] > 0f)) && (type != 640 || !(localAI[1] > 0f)))
					{
						if (aiStyle == 10)
						{
							if (type == 42 || type == 65 || type == 68 || type == 354 || (type == 31 && ai[0] == 2f))
							{
								base.velocity = Collision.TileCollision(position, base.velocity, base.width, base.height, flag4, flag4);
							}
							else
							{
								base.velocity = Collision.AnyCollision(position, base.velocity, base.width, base.height, true);
							}
						}
						else
						{
							Vector2 vector2 = position;
							int num27 = (num25 != -1) ? num25 : base.width;
							int num28 = (num26 != -1) ? num26 : base.height;
							if (num26 != -1 || num25 != -1)
							{
								vector2 = new Vector2(position.X + (float)(base.width / 2) - (float)(num27 / 2), position.Y + (float)(base.height / 2) - (float)(num28 / 2));
							}
							if (wet)
							{
								if (honeyWet)
								{
									Vector2 velocity2 = base.velocity;
									base.velocity = Collision.TileCollision(vector2, base.velocity, num27, num28, flag4, flag4);
									vector = base.velocity * 0.25f;
									if (base.velocity.X != velocity2.X)
									{
										vector.X = base.velocity.X;
									}
									if (base.velocity.Y != velocity2.Y)
									{
										vector.Y = base.velocity.Y;
									}
								}
								else
								{
									Vector2 velocity3 = base.velocity;
									base.velocity = Collision.TileCollision(vector2, base.velocity, num27, num28, flag4, flag4);
									vector = base.velocity * 0.5f;
									if (base.velocity.X != velocity3.X)
									{
										vector.X = base.velocity.X;
									}
									if (base.velocity.Y != velocity3.Y)
									{
										vector.Y = base.velocity.Y;
									}
								}
							}
							else
							{
								base.velocity = Collision.TileCollision(vector2, base.velocity, num27, num28, flag4, flag4);
								if (!Main.projPet[type])
								{
									Vector4 vector3 = Collision.SlopeCollision(vector2, base.velocity, num27, num28, 0f, true);
									Vector2 value = position - vector2;
									if (vector2.X != vector3.X)
									{
										flag3 = true;
									}
									if (vector2.Y != vector3.Y)
									{
										flag3 = true;
									}
									if (base.velocity.X != vector3.Z)
									{
										flag3 = true;
									}
									if (base.velocity.Y != vector3.W)
									{
										flag3 = true;
									}
									vector2.X = vector3.X;
									vector2.Y = vector3.Y;
									position = vector2 + value;
									base.velocity.X = vector3.Z;
									base.velocity.Y = vector3.W;
								}
							}
						}
					}
					if (velocity != base.velocity)
					{
						flag3 = true;
					}
					if (flag3)
					{
						if (type == 434)
						{
							position += base.velocity;
							numUpdates = 0;
						}
						else if (type == 601)
						{
							if (owner == Main.myPlayer)
							{
								PortalHelper.TryPlacingPortal(this, velocity, base.velocity);
							}
							position += base.velocity;
							Kill();
						}
						else if (type == 451)
						{
							ai[0] = 1f;
							ai[1] = 0f;
							netUpdate = true;
							base.velocity = velocity / 2f;
						}
						else if (type == 645)
						{
							ai[0] = 0f;
							ai[1] = -1f;
							netUpdate = true;
						}
						else if (type == 584)
						{
							bool flag5 = false;
							if (base.velocity.X != velocity.X)
							{
								base.velocity.X = velocity.X * -0.75f;
								flag5 = true;
							}
							if ((base.velocity.Y != velocity.Y && velocity.Y > 2f) || base.velocity.Y == 0f)
							{
								base.velocity.Y = velocity.Y * -0.75f;
								flag5 = true;
							}
							if (flag5)
							{
								float num29 = velocity.Length() / base.velocity.Length();
								if (num29 == 0f)
								{
									num29 = 1f;
								}
								base.velocity /= num29;
								penetrate--;
							}
						}
						else if (type == 532)
						{
							bool flag6 = false;
							if (base.velocity.X != velocity.X)
							{
								base.velocity.X = velocity.X * -0.75f;
								flag6 = true;
							}
							if ((base.velocity.Y != velocity.Y && velocity.Y > 2f) || base.velocity.Y == 0f)
							{
								base.velocity.Y = velocity.Y * -0.75f;
								flag6 = true;
							}
							if (flag6)
							{
								float num30 = velocity.Length() / base.velocity.Length();
								if (num30 == 0f)
								{
									num30 = 1f;
								}
								base.velocity /= num30;
								penetrate--;
								Collision.HitTiles(position, velocity, base.width, base.height);
							}
						}
						else if (type == 533)
						{
							float num31 = 1f;
							bool flag7 = false;
							if (base.velocity.X != velocity.X)
							{
								base.velocity.X = velocity.X * (0f - num31);
								flag7 = true;
							}
							if (base.velocity.Y != velocity.Y || base.velocity.Y == 0f)
							{
								base.velocity.Y = velocity.Y * (0f - num31) * 0.5f;
								flag7 = true;
							}
							if (flag7)
							{
								float num32 = velocity.Length() / base.velocity.Length();
								if (num32 == 0f)
								{
									num32 = 1f;
								}
								base.velocity /= num32;
								if (ai[0] == 7f && (double)base.velocity.Y < -0.1)
								{
									base.velocity.Y += 0.1f;
								}
								if (ai[0] >= 6f && ai[0] < 9f)
								{
									Collision.HitTiles(position, velocity, base.width, base.height);
								}
							}
						}
						else if (type == 502)
						{
							ai[0] += 1f;
							Main.PlaySound(37, (int)position.X, (int)position.Y, 5 + (int)ai[0]);
							if (ai[0] >= 5f)
							{
								position += base.velocity;
								Kill();
							}
							else
							{
								if (base.velocity.Y != velocity.Y)
								{
									base.velocity.Y = 0f - velocity.Y;
								}
								if (base.velocity.X != velocity.X)
								{
									base.velocity.X = 0f - velocity.X;
								}
							}
							Vector2 spinningpoint = new Vector2(0f, -3f - ai[0]).RotatedByRandom(3.1415927410125732);
							float num33 = 10f + ai[0] * 4f;
							Vector2 value2 = new Vector2(1.05f, 1f);
							for (float num34 = 0f; num34 < num33; num34 += 1f)
							{
								int num35 = Dust.NewDust(base.Center, 0, 0, 66, 0f, 0f, 0, Color.Transparent);
								Main.dust[num35].position = base.Center;
								Main.dust[num35].velocity = spinningpoint.RotatedBy((float)Math.PI * 2f * num34 / num33) * value2 * (0.8f + Main.rand.NextFloat() * 0.4f);
								Main.dust[num35].color = Main.hslToRgb(num34 / num33, 1f, 0.5f);
								Main.dust[num35].noGravity = true;
								Main.dust[num35].scale = 1f + ai[0] / 3f;
							}
							if (Main.myPlayer == owner)
							{
								int width = base.width;
								int height = base.height;
								int num36 = penetrate;
								position = base.Center;
								base.width = (base.height = 40 + 8 * (int)ai[0]);
								base.Center = position;
								penetrate = -1;
								Damage();
								penetrate = num36;
								position = base.Center;
								base.width = width;
								base.height = height;
								base.Center = position;
							}
						}
						else if (type == 444)
						{
							if (base.velocity.X != velocity.X)
							{
								base.velocity.X = 0f - velocity.X;
							}
							if (base.velocity.Y != velocity.Y)
							{
								base.velocity.Y = 0f - velocity.Y;
							}
							ai[0] = base.velocity.ToRotation();
						}
						else if (type == 617)
						{
							if (base.velocity.X != velocity.X)
							{
								base.velocity.X = (0f - velocity.X) * 0.35f;
							}
							if (base.velocity.Y != velocity.Y)
							{
								base.velocity.Y = (0f - velocity.Y) * 0.35f;
							}
						}
						else if (type == 440 || type == 449 || type == 606)
						{
							if (ai[1] != 1f)
							{
								ai[1] = 1f;
								position += base.velocity;
								base.velocity = velocity;
							}
						}
						else if (type == 466 || type == 580 || type == 640)
						{
							if (localAI[1] < 1f)
							{
								localAI[1] += 2f;
								position += base.velocity;
								base.velocity = Vector2.Zero;
							}
						}
						else if (aiStyle == 54)
						{
							if (base.velocity.X != velocity.X)
							{
								base.velocity.X = velocity.X * -0.6f;
							}
							if (base.velocity.Y != velocity.Y)
							{
								base.velocity.Y = velocity.Y * -0.6f;
							}
						}
						else if (!Main.projPet[type] && type != 500 && type != 650)
						{
							if (aiStyle == 99)
							{
								if (type >= 556 && type <= 561)
								{
									bool flag8 = false;
									if (base.velocity.X != oldVelocity.X)
									{
										flag8 = true;
										base.velocity.X = oldVelocity.X * -1f;
									}
									if (base.velocity.Y != oldVelocity.Y)
									{
										flag8 = true;
										base.velocity.Y = oldVelocity.Y * -1f;
									}
									if (flag8)
									{
										Vector2 vector4 = Main.player[owner].Center - base.Center;
										vector4.Normalize();
										vector4 *= base.velocity.Length();
										vector4 *= 0.25f;
										base.velocity *= 0.75f;
										base.velocity += vector4;
										if (base.velocity.Length() > 6f)
										{
											base.velocity *= 0.5f;
										}
									}
								}
							}
							else if (type == 604)
							{
								if (base.velocity.X != velocity.X)
								{
									base.velocity.X = 0f - velocity.X;
								}
								if (base.velocity.Y != velocity.Y)
								{
									base.velocity.Y = 0f - velocity.Y;
								}
							}
							else if (type == 379)
							{
								if (base.velocity.X != velocity.X)
								{
									base.velocity.X = velocity.X * -0.6f;
								}
								if (base.velocity.Y != velocity.Y && velocity.Y > 2f)
								{
									base.velocity.Y = velocity.Y * -0.6f;
								}
							}
							else if (type == 491)
							{
								if (ai[0] <= 0f)
								{
									ai[0] = -10f;
								}
								if (base.velocity.X != velocity.X && Math.Abs(velocity.X) > 0f)
								{
									base.velocity.X = velocity.X * -1f;
								}
								if (base.velocity.Y != velocity.Y && Math.Abs(velocity.Y) > 0f)
								{
									base.velocity.Y = velocity.Y * -1f;
								}
							}
							else if ((type >= 515 && type <= 517) || type == 637)
							{
								if (base.velocity.X != velocity.X && Math.Abs(velocity.X) > 1f)
								{
									base.velocity.X = velocity.X * -0.9f;
								}
								if (base.velocity.Y != velocity.Y && Math.Abs(velocity.Y) > 1f)
								{
									base.velocity.Y = velocity.Y * -0.9f;
								}
							}
							else if (type == 409)
							{
								if (base.velocity.X != velocity.X)
								{
									base.velocity.X = velocity.X * -1f;
								}
								if (base.velocity.Y != velocity.Y)
								{
									base.velocity.Y = velocity.Y * -1f;
								}
							}
							else if (type == 254)
							{
								tileCollide = false;
								base.velocity = velocity;
								if (timeLeft > 30)
								{
									timeLeft = 30;
								}
							}
							else if (type == 225 && penetrate > 0)
							{
								base.velocity.X = 0f - velocity.X;
								base.velocity.Y = 0f - velocity.Y;
								penetrate--;
							}
							else if (type == 155)
							{
								if (ai[1] > 10f)
								{
									string textValue = Language.GetTextValue("Game.BallBounceResult", Lang.GetProjectileName(type), ai[1]);
									if (Main.netMode == 0)
									{
										Main.NewText(textValue, byte.MaxValue, 240, 20);
									}
									else if (Main.netMode == 2)
									{
										NetMessage.SendData(25, -1, -1, textValue, 16, 255f, 240f, 20f);
									}
								}
								ai[1] = 0f;
								if (base.velocity.X != velocity.X)
								{
									base.velocity.X = velocity.X * -0.6f;
								}
								if (base.velocity.Y != velocity.Y && velocity.Y > 2f)
								{
									base.velocity.Y = velocity.Y * -0.6f;
								}
							}
							else if (aiStyle == 33)
							{
								if (localAI[0] == 0f)
								{
									if (wet)
									{
										position += velocity / 2f;
									}
									else
									{
										position += velocity;
									}
									base.velocity *= 0f;
									localAI[0] = 1f;
								}
							}
							else if (type != 308)
							{
								if (type == 477)
								{
									if (base.velocity.Y != velocity.Y || base.velocity.X != velocity.X)
									{
										penetrate--;
										if (penetrate <= 0)
										{
											Kill();
										}
										if (base.velocity.X != velocity.X)
										{
											base.velocity.X = 0f - velocity.X;
										}
										if (base.velocity.Y != velocity.Y)
										{
											base.velocity.Y = 0f - velocity.Y;
										}
									}
									if (penetrate > 0 && owner == Main.myPlayer)
									{
										int[] array = new int[10];
										int num37 = 0;
										int num38 = 700;
										int num39 = 20;
										for (int num40 = 0; num40 < 200; num40++)
										{
											if (!Main.npc[num40].CanBeChasedBy(this))
											{
												continue;
											}
											float num41 = (base.Center - Main.npc[num40].Center).Length();
											if (num41 > (float)num39 && num41 < (float)num38 && Collision.CanHitLine(base.Center, 1, 1, Main.npc[num40].Center, 1, 1))
											{
												array[num37] = num40;
												num37++;
												if (num37 >= 9)
												{
													break;
												}
											}
										}
										if (num37 > 0)
										{
											num37 = Main.rand.Next(num37);
											Vector2 value3 = Main.npc[array[num37]].Center - base.Center;
											float scaleFactor = base.velocity.Length();
											value3.Normalize();
											base.velocity = value3 * scaleFactor;
											netUpdate = true;
										}
									}
								}
								else if (type == 94 || type == 496)
								{
									if (base.velocity.X != velocity.X)
									{
										if (Math.Abs(base.velocity.X) < 1f)
										{
											base.velocity.X = 0f - velocity.X;
										}
										else
										{
											Kill();
										}
									}
									if (base.velocity.Y != velocity.Y)
									{
										if (Math.Abs(base.velocity.Y) < 1f)
										{
											base.velocity.Y = 0f - velocity.Y;
										}
										else
										{
											Kill();
										}
									}
								}
								else if (type == 311)
								{
									if (base.velocity.X != velocity.X)
									{
										base.velocity.X = 0f - velocity.X;
										ai[1] += 1f;
									}
									if (base.velocity.Y != velocity.Y)
									{
										base.velocity.Y = 0f - velocity.Y;
										ai[1] += 1f;
									}
									if (ai[1] > 4f)
									{
										Kill();
									}
								}
								else if (type == 312)
								{
									if (base.velocity.X != velocity.X)
									{
										base.velocity.X = 0f - velocity.X;
										ai[1] += 1f;
									}
									if (base.velocity.Y != velocity.Y)
									{
										base.velocity.Y = 0f - velocity.Y;
										ai[1] += 1f;
									}
								}
								else if (type == 522 || type == 620)
								{
									if (base.velocity.X != velocity.X)
									{
										base.velocity.X = 0f - velocity.X;
									}
									if (base.velocity.Y != velocity.Y)
									{
										base.velocity.Y = 0f - velocity.Y;
									}
								}
								else if (type == 524)
								{
									ai[0] += 100f;
									if (base.velocity.X != velocity.X)
									{
										base.velocity.X = 0f - velocity.X;
									}
									if (base.velocity.Y != velocity.Y)
									{
										base.velocity.Y = 0f - velocity.Y;
									}
								}
								else if (aiStyle == 93)
								{
									if (base.velocity != velocity)
									{
										ai[1] = 0f;
										ai[0] = 1f;
										netUpdate = true;
										tileCollide = false;
										position += base.velocity;
										base.velocity = velocity;
										base.velocity.Normalize();
										base.velocity *= 3f;
									}
								}
								else if (type == 281)
								{
									float num42 = Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y);
									if (num42 < 2f || ai[1] == 2f)
									{
										ai[1] = 2f;
									}
									else
									{
										if (base.velocity.X != velocity.X)
										{
											base.velocity.X = (0f - velocity.X) * 0.5f;
										}
										if (base.velocity.Y != velocity.Y)
										{
											base.velocity.Y = (0f - velocity.Y) * 0.5f;
										}
									}
								}
								else if (type == 290 || type == 294)
								{
									if (base.velocity.X != velocity.X)
									{
										position.X += base.velocity.X;
										base.velocity.X = 0f - velocity.X;
									}
									if (base.velocity.Y != velocity.Y)
									{
										position.Y += base.velocity.Y;
										base.velocity.Y = 0f - velocity.Y;
									}
								}
								else if ((type == 181 || type == 189 || type == 357 || type == 566) && penetrate > 0)
								{
									if (type == 357)
									{
										damage = (int)((double)damage * 0.9);
									}
									penetrate--;
									if (base.velocity.X != velocity.X)
									{
										base.velocity.X = 0f - velocity.X;
									}
									if (base.velocity.Y != velocity.Y)
									{
										base.velocity.Y = 0f - velocity.Y;
									}
								}
								else if (type == 307 && ai[1] < 5f)
								{
									ai[1] += 1f;
									if (base.velocity.X != velocity.X)
									{
										base.velocity.X = 0f - velocity.X;
									}
									if (base.velocity.Y != velocity.Y)
									{
										base.velocity.Y = 0f - velocity.Y;
									}
								}
								else if (type == 99)
								{
									if (base.velocity.Y != velocity.Y && velocity.Y > 5f)
									{
										Collision.HitTiles(position, base.velocity, base.width, base.height);
										Main.PlaySound(0, (int)position.X, (int)position.Y);
										base.velocity.Y = (0f - velocity.Y) * 0.2f;
									}
									if (base.velocity.X != velocity.X)
									{
										Kill();
									}
								}
								else if (type == 36)
								{
									if (penetrate > 1)
									{
										Collision.HitTiles(position, base.velocity, base.width, base.height);
										Main.PlaySound(2, (int)position.X, (int)position.Y, 10);
										penetrate--;
										if (base.velocity.X != velocity.X)
										{
											base.velocity.X = 0f - velocity.X;
										}
										if (base.velocity.Y != velocity.Y)
										{
											base.velocity.Y = 0f - velocity.Y;
										}
									}
									else
									{
										Kill();
									}
								}
								else if (aiStyle == 21)
								{
									if (base.velocity.X != velocity.X)
									{
										base.velocity.X = 0f - velocity.X;
									}
									if (base.velocity.Y != velocity.Y)
									{
										base.velocity.Y = 0f - velocity.Y;
									}
								}
								else if (aiStyle == 17)
								{
									if (base.velocity.X != velocity.X)
									{
										base.velocity.X = velocity.X * -0.75f;
									}
									if (base.velocity.Y != velocity.Y && (double)velocity.Y > 1.5)
									{
										base.velocity.Y = velocity.Y * -0.7f;
									}
								}
								else if (aiStyle == 15)
								{
									bool flag9 = false;
									if (velocity.X != base.velocity.X)
									{
										if (Math.Abs(velocity.X) > 4f)
										{
											flag9 = true;
										}
										position.X += base.velocity.X;
										base.velocity.X = (0f - velocity.X) * 0.2f;
									}
									if (velocity.Y != base.velocity.Y)
									{
										if (Math.Abs(velocity.Y) > 4f)
										{
											flag9 = true;
										}
										position.Y += base.velocity.Y;
										base.velocity.Y = (0f - velocity.Y) * 0.2f;
									}
									ai[0] = 1f;
									if (flag9)
									{
										netUpdate = true;
										Collision.HitTiles(position, base.velocity, base.width, base.height);
										Main.PlaySound(0, (int)position.X, (int)position.Y);
									}
									if (wet)
									{
										vector = base.velocity;
									}
								}
								else if (aiStyle == 39)
								{
									Collision.HitTiles(position, base.velocity, base.width, base.height);
									if (type == 33 || type == 106)
									{
										if (base.velocity.X != velocity.X)
										{
											base.velocity.X = 0f - velocity.X;
										}
										if (base.velocity.Y != velocity.Y)
										{
											base.velocity.Y = 0f - velocity.Y;
										}
									}
									else
									{
										ai[0] = 1f;
										if (aiStyle == 3)
										{
											base.velocity.X = 0f - velocity.X;
											base.velocity.Y = 0f - velocity.Y;
										}
									}
									netUpdate = true;
									Main.PlaySound(0, (int)position.X, (int)position.Y);
								}
								else if (aiStyle == 3 || aiStyle == 13 || aiStyle == 69 || aiStyle == 109)
								{
									Collision.HitTiles(position, base.velocity, base.width, base.height);
									if (type == 33 || type == 106)
									{
										if (base.velocity.X != velocity.X)
										{
											base.velocity.X = 0f - velocity.X;
										}
										if (base.velocity.Y != velocity.Y)
										{
											base.velocity.Y = 0f - velocity.Y;
										}
									}
									else
									{
										ai[0] = 1f;
										if ((aiStyle == 3 || aiStyle == 109) && type != 383)
										{
											base.velocity.X = 0f - velocity.X;
											base.velocity.Y = 0f - velocity.Y;
										}
									}
									netUpdate = true;
									Main.PlaySound(0, (int)position.X, (int)position.Y);
								}
								else if (aiStyle == 8 && type != 96)
								{
									Main.PlaySound(2, (int)position.X, (int)position.Y, 10);
									ai[0] += 1f;
									if ((ai[0] >= 5f && type != 253) || (type == 253 && ai[0] >= 8f))
									{
										position += base.velocity;
										Kill();
									}
									else
									{
										if (type == 15 && base.velocity.Y > 4f)
										{
											if (base.velocity.Y != velocity.Y)
											{
												base.velocity.Y = (0f - velocity.Y) * 0.8f;
											}
										}
										else if (base.velocity.Y != velocity.Y)
										{
											base.velocity.Y = 0f - velocity.Y;
										}
										if (base.velocity.X != velocity.X)
										{
											base.velocity.X = 0f - velocity.X;
										}
									}
								}
								else if (aiStyle == 61)
								{
									if (base.velocity.X != velocity.X)
									{
										base.velocity.X = velocity.X * -0.3f;
									}
									if (base.velocity.Y != velocity.Y && velocity.Y > 1f)
									{
										base.velocity.Y = velocity.Y * -0.3f;
									}
								}
								else if (aiStyle == 14)
								{
									if (type == 261 && ((base.velocity.X != velocity.X && (velocity.X < -3f || velocity.X > 3f)) || (base.velocity.Y != velocity.Y && (velocity.Y < -3f || velocity.Y > 3f))))
									{
										Collision.HitTiles(position, base.velocity, base.width, base.height);
										Main.PlaySound(0, (int)base.Center.X, (int)base.Center.Y);
									}
									if (type >= 326 && type <= 328 && base.velocity.X != velocity.X)
									{
										base.velocity.X = velocity.X * -0.1f;
									}
									if (type >= 400 && type <= 402)
									{
										if (base.velocity.X != velocity.X)
										{
											base.velocity.X = velocity.X * -0.1f;
										}
									}
									else if (type == 50)
									{
										if (base.velocity.X != velocity.X)
										{
											base.velocity.X = velocity.X * -0.2f;
										}
										if (base.velocity.Y != velocity.Y && (double)velocity.Y > 1.5)
										{
											base.velocity.Y = velocity.Y * -0.2f;
										}
									}
									else if (type == 185)
									{
										if (base.velocity.X != velocity.X)
										{
											base.velocity.X = velocity.X * -0.9f;
										}
										if (base.velocity.Y != velocity.Y && velocity.Y > 1f)
										{
											base.velocity.Y = velocity.Y * -0.9f;
										}
									}
									else if (type == 277)
									{
										if (base.velocity.X != velocity.X)
										{
											base.velocity.X = velocity.X * -0.9f;
										}
										if (base.velocity.Y != velocity.Y && velocity.Y > 3f)
										{
											base.velocity.Y = velocity.Y * -0.9f;
										}
									}
									else if (type != 480)
									{
										if (type == 450)
										{
											if (base.velocity.X != velocity.X)
											{
												base.velocity.X = velocity.X * -0.1f;
											}
										}
										else
										{
											if (base.velocity.X != velocity.X)
											{
												base.velocity.X = velocity.X * -0.5f;
											}
											if (base.velocity.Y != velocity.Y && velocity.Y > 1f)
											{
												base.velocity.Y = velocity.Y * -0.5f;
											}
										}
									}
								}
								else if (aiStyle == 16)
								{
									if (base.velocity.X != velocity.X)
									{
										base.velocity.X = velocity.X * -0.4f;
										if (type == 29)
										{
											base.velocity.X = base.velocity.X * 0.8f;
										}
									}
									if (base.velocity.Y != velocity.Y && (double)velocity.Y > 0.7 && type != 102)
									{
										base.velocity.Y = velocity.Y * -0.4f;
										if (type == 29)
										{
											base.velocity.Y = base.velocity.Y * 0.8f;
										}
									}
									if (type == 134 || type == 137 || type == 140 || type == 143 || type == 303 || (type >= 338 && type <= 341))
									{
										base.velocity *= 0f;
										alpha = 255;
										timeLeft = 3;
									}
								}
								else if (aiStyle == 68)
								{
									base.velocity *= 0f;
									alpha = 255;
									timeLeft = 3;
								}
								else if (aiStyle != 9 || owner == Main.myPlayer)
								{
									position += base.velocity;
									Kill();
								}
							}
						}
					}
				}
				if (aiStyle != 4 && aiStyle != 38 && aiStyle != 84 && (aiStyle != 7 || ai[0] != 2f) && ((type != 440 && type != 449 && type != 606) || ai[1] != 1f) && (aiStyle != 93 || !(ai[0] < 0f)) && type != 540)
				{
					if (wet)
					{
						position += vector;
					}
					else
					{
						position += base.velocity;
					}
					if (Main.projPet[type] && tileCollide)
					{
						Vector4 vector5 = Collision.SlopeCollision(position, base.velocity, base.width, base.height);
						position.X = vector5.X;
						position.Y = vector5.Y;
						base.velocity.X = vector5.Z;
						base.velocity.Y = vector5.W;
					}
				}
				if ((aiStyle != 3 || ai[0] != 1f) && (aiStyle != 7 || ai[0] != 1f) && (aiStyle != 13 || ai[0] != 1f) && aiStyle != 65 && aiStyle != 69 && aiStyle != 114 && aiStyle != 123 && aiStyle != 112 && !manualDirectionChange && aiStyle != 67 && aiStyle != 26 && aiStyle != 15)
				{
					if (base.velocity.X < 0f)
					{
						direction = -1;
					}
					else
					{
						direction = 1;
					}
				}
				if (!active)
				{
					return;
				}
				ProjLight();
				if (!npcProj && friendly && Main.player[owner].magicQuiver && extraUpdates < 1 && arrow)
				{
					extraUpdates = 1;
				}
				if (type == 2 || type == 82)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), base.width, base.height, 6, 0f, 0f, 100);
				}
				else if (type == 172)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), base.width, base.height, 135, 0f, 0f, 100);
				}
				else if (type == 103)
				{
					int num43 = Dust.NewDust(new Vector2(position.X, position.Y), base.width, base.height, 75, 0f, 0f, 100);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num43].noGravity = true;
						Main.dust[num43].scale *= 2f;
					}
				}
				else if (type == 278)
				{
					int num44 = Dust.NewDust(new Vector2(position.X, position.Y), base.width, base.height, 169, 0f, 0f, 100);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num44].noGravity = true;
						Main.dust[num44].scale *= 1.5f;
					}
				}
				else if (type == 4)
				{
					if (Main.rand.Next(5) == 0)
					{
						Dust.NewDust(new Vector2(position.X, position.Y), base.width, base.height, 14, 0f, 0f, 150, default(Color), 1.1f);
					}
				}
				else if (type == 5)
				{
					int num45;
					switch (Main.rand.Next(3))
					{
					case 0:
						num45 = 15;
						break;
					case 1:
						num45 = 57;
						break;
					default:
						num45 = 58;
						break;
					}
					Dust.NewDust(position, base.width, base.height, num45, base.velocity.X * 0.5f, base.velocity.Y * 0.5f, 150, default(Color), 1.2f);
				}
				Damage();
				if (type == 434 && localAI[0] == 0f && numUpdates == 0)
				{
					extraUpdates = 1;
					base.velocity = Vector2.Zero;
					localAI[0] = 1f;
					localAI[1] = 0.9999f;
					netUpdate = true;
				}
				if (Main.netMode != 1 && type == 99)
				{
					Collision.SwitchTiles(position, base.width, base.height, oldPosition, 3);
				}
				if (ProjectileID.Sets.TrailingMode[type] == 0)
				{
					for (int num46 = oldPos.Length - 1; num46 > 0; num46--)
					{
						oldPos[num46] = oldPos[num46 - 1];
					}
					oldPos[0] = position;
				}
				else if (ProjectileID.Sets.TrailingMode[type] == 1)
				{
					if (frameCounter == 0 || oldPos[0] == Vector2.Zero)
					{
						for (int num47 = oldPos.Length - 1; num47 > 0; num47--)
						{
							oldPos[num47] = oldPos[num47 - 1];
						}
						oldPos[0] = position;
						if (base.velocity == Vector2.Zero && type == 466)
						{
							float num48 = rotation + (float)Math.PI / 2f + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
							float num49 = (float)Main.rand.NextDouble() * 2f + 2f;
							Vector2 vector6 = new Vector2((float)Math.Cos(num48) * num49, (float)Math.Sin(num48) * num49);
							int num50 = Dust.NewDust(oldPos[oldPos.Length - 1], 0, 0, 229, vector6.X, vector6.Y);
							Main.dust[num50].noGravity = true;
							Main.dust[num50].scale = 1.7f;
						}
						if (base.velocity == Vector2.Zero && type == 580)
						{
							float num51 = rotation + (float)Math.PI / 2f + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
							float num52 = (float)Main.rand.NextDouble() * 2f + 2f;
							Vector2 vector7 = new Vector2((float)Math.Cos(num51) * num52, (float)Math.Sin(num51) * num52);
							int num53 = Dust.NewDust(oldPos[oldPos.Length - 1], 0, 0, 229, vector7.X, vector7.Y);
							Main.dust[num53].noGravity = true;
							Main.dust[num53].scale = 1.7f;
						}
					}
				}
				else if (ProjectileID.Sets.TrailingMode[type] == 2)
				{
					for (int num54 = oldPos.Length - 1; num54 > 0; num54--)
					{
						oldPos[num54] = oldPos[num54 - 1];
						oldRot[num54] = oldRot[num54 - 1];
						oldSpriteDirection[num54] = oldSpriteDirection[num54 - 1];
					}
					oldPos[0] = position;
					oldRot[0] = rotation;
					oldSpriteDirection[0] = spriteDirection;
				}
				timeLeft--;
				if (timeLeft <= 0)
				{
					Kill();
				}
				if (penetrate == 0)
				{
					Kill();
				}
				if (!active || owner != Main.myPlayer)
				{
					continue;
				}
				if (netUpdate2)
				{
					netUpdate = true;
				}
				if (!active)
				{
					netSpam = 0;
				}
				if (netUpdate)
				{
					if (netSpam < 60)
					{
						netSpam += 5;
						NetMessage.SendData(27, -1, -1, "", i);
						netUpdate2 = false;
					}
					else
					{
						netUpdate2 = true;
					}
				}
				if (netSpam > 0)
				{
					netSpam--;
				}
			}
			netUpdate = false;
		}

		public void FishingCheck()
		{
			int num = (int)(base.Center.X / 16f);
			int num2 = (int)(base.Center.Y / 16f);
			if (Main.tile[num, num2].liquid < 0)
			{
				num2++;
			}
			bool flag = false;
			bool flag2 = false;
			int num3 = num;
			int i = num;
			while (num3 > 10 && Main.tile[num3, num2].liquid > 0 && !WorldGen.SolidTile(num3, num2))
			{
				num3--;
			}
			for (; i < Main.maxTilesX - 10 && Main.tile[i, num2].liquid > 0 && !WorldGen.SolidTile(i, num2); i++)
			{
			}
			int num4 = 0;
			for (int j = num3; j <= i; j++)
			{
				int num5 = num2;
				while (Main.tile[j, num5].liquid > 0 && !WorldGen.SolidTile(j, num5) && num5 < Main.maxTilesY - 10)
				{
					num4++;
					num5++;
					if (Main.tile[j, num5].lava())
					{
						flag = true;
					}
					else if (Main.tile[j, num5].honey())
					{
						flag2 = true;
					}
				}
			}
			if (flag2)
			{
				num4 = (int)((double)num4 * 1.5);
			}
			if (num4 < 75)
			{
				Main.player[owner].displayedFishingInfo = "Not Enough Water!";
				return;
			}
			int num6 = Main.player[owner].FishingLevel();
			if (num6 == 0)
			{
				return;
			}
			Main.player[owner].displayedFishingInfo = num6 + " Fishing Power";
			if (num6 < 0)
			{
				if (num6 == -1)
				{
					Main.player[owner].displayedFishingInfo = "Warning!";
					if ((num < 380 || num > Main.maxTilesX - 380) && num4 > 1000 && !NPC.AnyNPCs(370))
					{
						ai[1] = Main.rand.Next(-180, -60) - 100;
						localAI[1] = num6;
						netUpdate = true;
					}
				}
				return;
			}
			int num7 = 300;
			float num8 = Main.maxTilesX / 4200;
			if (Main.maxTilesX == 1750)
			{
				num8 = (float)Main.maxTilesX / 4200f;
			}
			num8 *= num8;
			float num9 = (float)((double)(position.Y / 16f - (60f + 10f * num8)) / (Main.worldSurface / 6.0));
			if ((double)num9 < 0.25)
			{
				num9 = 0.25f;
			}
			if (num9 > 1f)
			{
				num9 = 1f;
			}
			num7 = (int)((float)num7 * num9);
			float num10 = (float)num4 / (float)num7;
			if (num10 < 1f)
			{
				num6 = (int)((float)num6 * num10);
			}
			num10 = 1f - num10;
			if (num4 < num7)
			{
				Main.player[owner].displayedFishingInfo = num6 + " (" + (0.0 - Math.Round(num10 * 100f)) + "%) Fishing Power";
			}
			int num11 = (num6 + 75) / 2;
			if (Main.player[owner].wet || Main.rand.Next(100) > num11)
			{
				return;
			}
			int num12 = 0;
			int num13 = 0;
			num13 = ((!((double)num2 < Main.worldSurface * 0.5)) ? (((double)num2 < Main.worldSurface) ? 1 : (((double)num2 < Main.rockLayer) ? 2 : ((num2 >= Main.maxTilesY - 300) ? 4 : 3))) : 0);
			int num14 = 150;
			int num15 = num14 / num6;
			int num16 = num14 * 2 / num6;
			int num17 = num14 * 7 / num6;
			int num18 = num14 * 15 / num6;
			int num19 = num14 * 30 / num6;
			if (num15 < 2)
			{
				num15 = 2;
			}
			if (num16 < 3)
			{
				num16 = 3;
			}
			if (num17 < 4)
			{
				num17 = 4;
			}
			if (num18 < 5)
			{
				num18 = 5;
			}
			if (num19 < 6)
			{
				num19 = 6;
			}
			bool flag3 = false;
			bool flag4 = false;
			bool flag5 = false;
			bool flag6 = false;
			bool flag7 = false;
			if (Main.rand.Next(num15) == 0)
			{
				flag3 = true;
			}
			if (Main.rand.Next(num16) == 0)
			{
				flag4 = true;
			}
			if (Main.rand.Next(num17) == 0)
			{
				flag5 = true;
			}
			if (Main.rand.Next(num18) == 0)
			{
				flag6 = true;
			}
			if (Main.rand.Next(num19) == 0)
			{
				flag7 = true;
			}
			int num20 = 10;
			if (Main.player[owner].cratePotion)
			{
				num20 += 10;
			}
			int num21 = Main.anglerQuestItemNetIDs[Main.anglerQuest];
			if (Main.player[owner].HasItem(num21))
			{
				num21 = -1;
			}
			if (Main.anglerQuestFinished)
			{
				num21 = -1;
			}
			if (flag)
			{
				if (Main.player[owner].inventory[Main.player[owner].selectedItem].type != 2422)
				{
					return;
				}
				if (flag7)
				{
					num12 = 2331;
				}
				else if (flag6)
				{
					num12 = 2312;
				}
				else if (flag5)
				{
					num12 = 2315;
				}
			}
			else if (flag2)
			{
				if (flag5 || (flag4 && Main.rand.Next(2) == 0))
				{
					num12 = 2314;
				}
				else if (flag4 && num21 == 2451)
				{
					num12 = 2451;
				}
			}
			else if (Main.rand.Next(50) > num6 && Main.rand.Next(50) > num6 && num4 < num7)
			{
				num12 = Main.rand.Next(2337, 2340);
			}
			else if (Main.rand.Next(100) < num20)
			{
				num12 = ((!flag6 && !flag7) ? ((flag5 && Main.player[owner].ZoneCorrupt) ? 3203 : ((flag5 && Main.player[owner].ZoneCrimson) ? 3204 : ((flag5 && Main.player[owner].ZoneHoly) ? 3207 : ((flag5 && Main.player[owner].ZoneDungeon) ? 3205 : ((flag5 && Main.player[owner].ZoneJungle) ? 3208 : ((flag5 && num13 == 0) ? 3206 : ((!flag4) ? 2334 : 2335))))))) : 2336);
			}
			else if (flag7 && Main.rand.Next(5) == 0)
			{
				num12 = 2423;
			}
			else if (flag7 && Main.rand.Next(5) == 0)
			{
				num12 = 3225;
			}
			else if (flag7 && Main.rand.Next(10) == 0)
			{
				num12 = 2420;
			}
			else if (!flag7 && !flag6 && flag4 && Main.rand.Next(5) == 0)
			{
				num12 = 3196;
			}
			else
			{
				bool flag8 = Main.player[owner].ZoneCorrupt;
				bool flag9 = Main.player[owner].ZoneCrimson;
				if (flag8 && flag9)
				{
					if (Main.rand.Next(2) == 0)
					{
						flag9 = false;
					}
					else
					{
						flag8 = false;
					}
				}
				if (flag8)
				{
					if (flag7 && Main.hardMode && Main.player[owner].ZoneSnow && num13 == 3 && Main.rand.Next(3) != 0)
					{
						num12 = 2429;
					}
					else if (flag7 && Main.hardMode && Main.rand.Next(2) == 0)
					{
						num12 = 3210;
					}
					else if (flag5)
					{
						num12 = 2330;
					}
					else if (flag4 && num21 == 2454)
					{
						num12 = 2454;
					}
					else if (flag4 && num21 == 2485)
					{
						num12 = 2485;
					}
					else if (flag4 && num21 == 2457)
					{
						num12 = 2457;
					}
					else if (flag4)
					{
						num12 = 2318;
					}
				}
				else if (flag9)
				{
					if (flag7 && Main.hardMode && Main.player[owner].ZoneSnow && num13 == 3 && Main.rand.Next(3) != 0)
					{
						num12 = 2429;
					}
					else if (flag7 && Main.hardMode && Main.rand.Next(2) == 0)
					{
						num12 = 3211;
					}
					else if (flag4 && num21 == 2477)
					{
						num12 = 2477;
					}
					else if (flag4 && num21 == 2463)
					{
						num12 = 2463;
					}
					else if (flag4)
					{
						num12 = 2319;
					}
					else if (flag3)
					{
						num12 = 2305;
					}
				}
				else if (Main.player[owner].ZoneHoly)
				{
					if (flag7 && Main.hardMode && Main.player[owner].ZoneSnow && num13 == 3 && Main.rand.Next(3) != 0)
					{
						num12 = 2429;
					}
					else if (flag7 && Main.hardMode && Main.rand.Next(2) == 0)
					{
						num12 = 3209;
					}
					else if (num13 > 1 && flag6)
					{
						num12 = 2317;
					}
					else if (num13 > 1 && flag5 && num21 == 2465)
					{
						num12 = 2465;
					}
					else if (num13 < 2 && flag5 && num21 == 2468)
					{
						num12 = 2468;
					}
					else if (flag5)
					{
						num12 = 2310;
					}
					else if (flag4 && num21 == 2471)
					{
						num12 = 2471;
					}
					else if (flag4)
					{
						num12 = 2307;
					}
				}
				if (num12 == 0 && Main.player[owner].ZoneSnow)
				{
					if (num13 < 2 && flag4 && num21 == 2467)
					{
						num12 = 2467;
					}
					else if (num13 == 1 && flag4 && num21 == 2470)
					{
						num12 = 2470;
					}
					else if (num13 >= 2 && flag4 && num21 == 2484)
					{
						num12 = 2484;
					}
					else if (num13 > 1 && flag4 && num21 == 2466)
					{
						num12 = 2466;
					}
					else if ((flag3 && Main.rand.Next(12) == 0) || (flag4 && Main.rand.Next(6) == 0))
					{
						num12 = 3197;
					}
					else if (flag4)
					{
						num12 = 2306;
					}
					else if (flag3)
					{
						num12 = 2299;
					}
					else if (num13 > 1 && Main.rand.Next(3) == 0)
					{
						num12 = 2309;
					}
				}
				if (num12 == 0 && Main.player[owner].ZoneJungle)
				{
					if (num13 == 1 && flag4 && num21 == 2452)
					{
						num12 = 2452;
					}
					else if (num13 == 1 && flag4 && num21 == 2483)
					{
						num12 = 2483;
					}
					else if (num13 == 1 && flag4 && num21 == 2488)
					{
						num12 = 2488;
					}
					else if (num13 >= 1 && flag4 && num21 == 2486)
					{
						num12 = 2486;
					}
					else if (num13 > 1 && flag4)
					{
						num12 = 2311;
					}
					else if (flag4)
					{
						num12 = 2313;
					}
					else if (flag3)
					{
						num12 = 2302;
					}
				}
				if (num12 == 0 && Main.shroomTiles > 200 && flag4 && num21 == 2475)
				{
					num12 = 2475;
				}
				if (num12 == 0)
				{
					if (num13 <= 1 && (num < 380 || num > Main.maxTilesX - 380) && num4 > 1000)
					{
						num12 = ((flag6 && Main.rand.Next(2) == 0) ? 2341 : (flag6 ? 2342 : ((flag5 && Main.rand.Next(5) == 0) ? 2438 : ((flag5 && Main.rand.Next(2) == 0) ? 2332 : ((flag4 && num21 == 2480) ? 2480 : ((flag4 && num21 == 2481) ? 2481 : (flag4 ? 2316 : ((flag3 && Main.rand.Next(2) == 0) ? 2301 : ((!flag3) ? 2297 : 2300)))))))));
					}
					else
					{
						int sandTile = Main.sandTiles;
						int num23 = 1000;
					}
				}
				if (num12 == 0)
				{
					num12 = ((num13 < 2 && flag4 && num21 == 2461) ? 2461 : ((num13 == 0 && flag4 && num21 == 2453) ? 2453 : ((num13 == 0 && flag4 && num21 == 2473) ? 2473 : ((num13 == 0 && flag4 && num21 == 2476) ? 2476 : ((num13 < 2 && flag4 && num21 == 2458) ? 2458 : ((num13 < 2 && flag4 && num21 == 2459) ? 2459 : ((num13 == 0 && flag4) ? 2304 : ((num13 > 0 && num13 < 3 && flag4 && num21 == 2455) ? 2455 : ((num13 == 1 && flag4 && num21 == 2479) ? 2479 : ((num13 == 1 && flag4 && num21 == 2456) ? 2456 : ((num13 == 1 && flag4 && num21 == 2474) ? 2474 : ((num13 > 1 && flag5 && Main.rand.Next(5) == 0) ? ((!Main.hardMode || Main.rand.Next(2) != 0) ? 2436 : 2437) : ((num13 > 1 && flag7) ? 2308 : ((num13 > 1 && flag6 && Main.rand.Next(2) == 0) ? 2320 : ((num13 > 1 && flag5) ? 2321 : ((num13 > 1 && flag4 && num21 == 2478) ? 2478 : ((num13 > 1 && flag4 && num21 == 2450) ? 2450 : ((num13 > 1 && flag4 && num21 == 2464) ? 2464 : ((num13 > 1 && flag4 && num21 == 2469) ? 2469 : ((num13 > 2 && flag4 && num21 == 2462) ? 2462 : ((num13 > 2 && flag4 && num21 == 2482) ? 2482 : ((num13 > 2 && flag4 && num21 == 2472) ? 2472 : ((num13 > 2 && flag4 && num21 == 2460) ? 2460 : ((num13 > 1 && flag4 && Main.rand.Next(4) != 0) ? 2303 : ((num13 > 1 && (flag4 || flag3 || Main.rand.Next(4) == 0)) ? ((Main.rand.Next(4) != 0) ? 2309 : 2303) : ((flag4 && num21 == 2487) ? 2487 : ((num4 <= 1000 || !flag3) ? 2290 : 2298)))))))))))))))))))))))))));
				}
			}
			if (num12 > 0)
			{
				if (Main.player[owner].sonarPotion)
				{
					Item ıtem = new Item();
					ıtem.SetDefaults(num12);
					ıtem.position = position;
					ItemText.NewText(ıtem, 1, true);
				}
				float num22 = num6;
				ai[1] = (float)Main.rand.Next(-240, -90) - num22;
				localAI[1] = num12;
				netUpdate = true;
			}
		}

		public bool CanReflect()
		{
			if (active && friendly && !hostile && damage > 0 && (aiStyle == 1 || aiStyle == 2 || aiStyle == 8 || aiStyle == 21 || aiStyle == 24 || aiStyle == 28 || aiStyle == 29))
			{
				return true;
			}
			return false;
		}

		public float GetPrismHue(float indexing)
		{
			if (Main.player[owner].active)
			{
				switch (Main.player[owner].name)
				{
				case "Tsuki":
				case "Yoraiz0r":
					return 0.85f;
				case "Ghostar":
					return 0.33f;
				case "Devalaous":
					return 0.66f + (float)Math.Cos(Main.time / 180.0 * 6.2831854820251465) * 0.1f;
				case "Leinfors":
					return 0.77f;
				case "Aeroblop":
					return 0.25f + (float)Math.Cos(Main.time / 180.0 * 6.2831854820251465) * 0.1f;
				case "Doylee":
					return 0f;
				case "Darkhalis":
				case "Arkhalis":
					return 0.75f + (float)Math.Cos(Main.time / 180.0 * 6.2831854820251465) * 0.07f;
				case "Nike Leon":
					return 0.075f + (float)Math.Cos(Main.time / 180.0 * 6.2831854820251465) * 0.07f;
				case "Suweeka":
					return 0.5f + (float)Math.Cos(Main.time / 180.0 * 6.2831854820251465) * 0.18f;
				case "W1K":
					return 0.75f + (float)Math.Cos(Main.time / 120.0 * 6.2831854820251465) * 0.05f;
				case "Grox The Great":
					return 0.31f + (float)Math.Cos(Main.time / 120.0 * 6.2831854820251465) * 0.03f;
				case "Random":
					return Main.rand.NextFloat();
				}
			}
			return (float)(int)indexing / 6f;
		}

		public static int GetByUUID(int owner, float uuid)
		{
			return GetByUUID(owner, (int)uuid);
		}

		public static int GetByUUID(int owner, int uuid)
		{
			if (uuid < 0 || uuid >= 1000 || owner < 0 || owner >= 16)
			{
				return -1;
			}
			int num = Main.projectileIdentity[owner, uuid];
			if (num >= 0 && Main.projectile[num].active)
			{
				return num;
			}
			return -1;
		}

		public void ProjectileFixDesperation()
		{
			if (owner < 0 || owner >= 1000)
			{
				return;
			}
			switch (type)
			{
			case 461:
			case 632:
			case 642:
			case 644:
			{
				int num = 0;
				while (true)
				{
					if (num < 1000)
					{
						if (Main.projectile[num].owner == owner && (float)Main.projectile[num].identity == ai[1] && Main.projectile[num].active)
						{
							break;
						}
						num++;
						continue;
					}
					return;
				}
				ai[1] = num;
				break;
			}
			}
		}

		public void AI()
		{
			if (aiStyle == 1)
			{
				AI_001();
			}
			else if (aiStyle == 2)
			{
				if (type == 93 && Main.rand.Next(5) == 0)
				{
					int num = Dust.NewDust(base.position, width, height, 57, base.velocity.X * 0.2f + (float)(base.direction * 3), base.velocity.Y * 0.2f, 100, default(Color), 0.3f);
					Main.dust[num].velocity.X *= 0.3f;
					Main.dust[num].velocity.Y *= 0.3f;
				}
				if (type == 304 && localAI[0] == 0f)
				{
					localAI[0] += 1f;
					alpha = 0;
				}
				if (type == 335)
				{
					frame = (int)this.ai[1];
				}
				if (type == 510)
				{
					rotation += Math.Abs(base.velocity.X) * 0.04f * (float)base.direction;
				}
				else
				{
					rotation += (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) * 0.03f * (float)base.direction;
				}
				if (type == 162)
				{
					if (this.ai[1] == 0f)
					{
						this.ai[1] = 1f;
						Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 14);
					}
					this.ai[0] += 1f;
					if (this.ai[0] >= 18f)
					{
						base.velocity.Y += 0.28f;
						base.velocity.X *= 0.99f;
					}
					if (this.ai[0] > 2f)
					{
						alpha = 0;
						if (this.ai[0] == 3f)
						{
							for (int i = 0; i < 10; i++)
							{
								int num2 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
								Main.dust[num2].velocity *= 0.5f;
								Main.dust[num2].velocity += base.velocity * 0.1f;
							}
							for (int j = 0; j < 5; j++)
							{
								int num3 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2f);
								Main.dust[num3].noGravity = true;
								Main.dust[num3].velocity *= 3f;
								Main.dust[num3].velocity += base.velocity * 0.2f;
								num3 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100);
								Main.dust[num3].velocity *= 2f;
								Main.dust[num3].velocity += base.velocity * 0.3f;
							}
							for (int k = 0; k < 1; k++)
							{
								int num4 = Gore.NewGore(new Vector2(base.position.X - 10f, base.position.Y - 10f), default(Vector2), Main.rand.Next(61, 64));
								Main.gore[num4].position += base.velocity * 1.25f;
								Main.gore[num4].scale = 1.5f;
								Main.gore[num4].velocity += base.velocity * 0.5f;
								Main.gore[num4].velocity *= 0.02f;
							}
						}
					}
				}
				else if (type == 281)
				{
					if (this.ai[1] == 0f)
					{
						this.ai[1] = 1f;
						Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 14);
					}
					this.ai[0] += 1f;
					if (this.ai[0] >= 18f)
					{
						base.velocity.Y += 0.28f;
						base.velocity.X *= 0.99f;
					}
					if (this.ai[0] > 2f)
					{
						alpha = 0;
						if (this.ai[0] == 3f)
						{
							for (int l = 0; l < 10; l++)
							{
								int num5 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
								Main.dust[num5].velocity *= 0.5f;
								Main.dust[num5].velocity += base.velocity * 0.1f;
							}
							for (int m = 0; m < 5; m++)
							{
								int num6 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2f);
								Main.dust[num6].noGravity = true;
								Main.dust[num6].velocity *= 3f;
								Main.dust[num6].velocity += base.velocity * 0.2f;
								num6 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100);
								Main.dust[num6].velocity *= 2f;
								Main.dust[num6].velocity += base.velocity * 0.3f;
							}
							for (int n = 0; n < 1; n++)
							{
								int num7 = Gore.NewGore(new Vector2(base.position.X - 10f, base.position.Y - 10f), default(Vector2), Main.rand.Next(61, 64));
								Main.gore[num7].position += base.velocity * 1.25f;
								Main.gore[num7].scale = 1.5f;
								Main.gore[num7].velocity += base.velocity * 0.5f;
								Main.gore[num7].velocity *= 0.02f;
							}
						}
					}
				}
				else if (type == 240)
				{
					if (this.ai[1] == 0f)
					{
						this.ai[1] = 1f;
						Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 14);
					}
					this.ai[0] += 1f;
					if (this.ai[0] >= 16f)
					{
						base.velocity.Y += 0.18f;
						base.velocity.X *= 0.991f;
					}
					if (this.ai[0] > 2f)
					{
						alpha = 0;
						if (this.ai[0] == 3f)
						{
							for (int num8 = 0; num8 < 7; num8++)
							{
								int num9 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
								Main.dust[num9].velocity *= 0.5f;
								Main.dust[num9].velocity += base.velocity * 0.1f;
							}
							for (int num10 = 0; num10 < 3; num10++)
							{
								int num11 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2f);
								Main.dust[num11].noGravity = true;
								Main.dust[num11].velocity *= 3f;
								Main.dust[num11].velocity += base.velocity * 0.2f;
								num11 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100);
								Main.dust[num11].velocity *= 2f;
								Main.dust[num11].velocity += base.velocity * 0.3f;
							}
							for (int num12 = 0; num12 < 1; num12++)
							{
								int num13 = Gore.NewGore(new Vector2(base.position.X - 10f, base.position.Y - 10f), default(Vector2), Main.rand.Next(61, 64));
								Main.gore[num13].position += base.velocity * 1.25f;
								Main.gore[num13].scale = 1.25f;
								Main.gore[num13].velocity += base.velocity * 0.5f;
								Main.gore[num13].velocity *= 0.02f;
							}
						}
					}
				}
				if (type == 497)
				{
					int num14 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 27, base.velocity.X, base.velocity.Y, 100, default(Color), 1.2f);
					Main.dust[num14].position = (Main.dust[num14].position + base.Center) / 2f;
					Main.dust[num14].noGravity = true;
					Main.dust[num14].velocity *= 0.3f;
					Main.dust[num14].velocity -= base.velocity * 0.1f;
					this.ai[0] += 1f;
					if (this.ai[0] >= 30f)
					{
						base.velocity.X *= 0.99f;
						base.velocity.Y += 0.5f;
					}
					else
					{
						rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
					}
				}
				else if (type == 249)
				{
					this.ai[0] += 1f;
					if (this.ai[0] >= 0f)
					{
						base.velocity.Y += 0.25f;
					}
				}
				else if (type == 347)
				{
					this.ai[0] += 1f;
					if (this.ai[0] >= 5f)
					{
						base.velocity.Y += 0.25f;
					}
				}
				else if (type == 501)
				{
					this.ai[0] += 1f;
					if (this.ai[0] >= 18f)
					{
						base.velocity.X *= 0.995f;
						base.velocity.Y += 0.2f;
					}
				}
				else if (type == 504)
				{
					alpha = 255;
					this.ai[0] += 1f;
					if (this.ai[0] > 3f)
					{
						int num15 = 100;
						if (this.ai[0] > 20f)
						{
							int num16 = 40;
							float num17 = this.ai[0] - 20f;
							num15 = (int)(100f * (1f - num17 / (float)num16));
							if (num17 >= (float)num16)
							{
								Kill();
							}
						}
						if (this.ai[0] <= 10f)
						{
							num15 = (int)this.ai[0] * 10;
						}
						if (Main.rand.Next(100) < num15)
						{
							int num18 = Dust.NewDust(base.position, width, height, 6, 0f, 0f, 150);
							Main.dust[num18].position = (Main.dust[num18].position + base.Center) / 2f;
							Main.dust[num18].noGravity = true;
							Main.dust[num18].velocity *= 2f;
							Main.dust[num18].scale *= 1.2f;
							Main.dust[num18].velocity += base.velocity;
						}
					}
					if (this.ai[0] >= 20f)
					{
						base.velocity.X *= 0.99f;
						base.velocity.Y += 0.1f;
					}
				}
				else if (type == 69 || type == 70 || type == 621)
				{
					this.ai[0] += 1f;
					if (this.ai[0] >= 10f)
					{
						base.velocity.Y += 0.25f;
						base.velocity.X *= 0.99f;
					}
				}
				else if (type == 166)
				{
					this.ai[0] += 1f;
					if (this.ai[0] >= 20f)
					{
						base.velocity.Y += 0.3f;
						base.velocity.X *= 0.98f;
					}
				}
				else if (type == 300)
				{
					if (this.ai[0] == 0f)
					{
						Main.PlaySound(2, (int)base.position.X, (int)base.position.Y);
					}
					this.ai[0] += 1f;
					if (this.ai[0] >= 60f)
					{
						base.velocity.Y += 0.2f;
						base.velocity.X *= 0.99f;
					}
				}
				else if (type == 306)
				{
					if (alpha <= 200)
					{
						for (int num19 = 0; num19 < 4; num19++)
						{
							float num20 = base.velocity.X / 4f * (float)num19;
							float num21 = base.velocity.Y / 4f * (float)num19;
							int num22 = Dust.NewDust(base.position, width, height, 184);
							Main.dust[num22].position.X = base.Center.X - num20;
							Main.dust[num22].position.Y = base.Center.Y - num21;
							Main.dust[num22].velocity *= 0f;
							Main.dust[num22].scale = 0.7f;
						}
					}
					alpha -= 50;
					if (alpha < 0)
					{
						alpha = 0;
					}
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 0.785f;
				}
				else if (type == 304)
				{
					this.ai[0] += 1f;
					if (this.ai[0] >= 30f)
					{
						alpha += 10;
						damage = (int)((double)damage * 0.9);
						knockBack = (int)((double)knockBack * 0.9);
						if (alpha >= 255)
						{
							active = false;
						}
					}
					if (this.ai[0] < 30f)
					{
						rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
					}
				}
				else if (type == 370 || type == 371)
				{
					this.ai[0] += 1f;
					if (this.ai[0] >= 15f)
					{
						base.velocity.Y += 0.3f;
						base.velocity.X *= 0.98f;
					}
				}
				else
				{
					this.ai[0] += 1f;
					if (this.ai[0] >= 20f)
					{
						base.velocity.Y += 0.4f;
						base.velocity.X *= 0.97f;
					}
					else if (type == 48 || type == 54 || type == 93 || type == 520 || type == 599)
					{
						rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
					}
				}
				if (base.velocity.Y > 16f)
				{
					base.velocity.Y = 16f;
				}
				if (type == 54 && Main.rand.Next(20) == 0)
				{
					Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 40, base.velocity.X * 0.1f, base.velocity.Y * 0.1f, 0, default(Color), 0.75f);
				}
			}
			else if (aiStyle == 3)
			{
				if (soundDelay == 0 && type != 383)
				{
					soundDelay = 8;
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 7);
				}
				if (type == 19)
				{
					for (int num23 = 0; num23 < 2; num23++)
					{
						int num24 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100, default(Color), 2f);
						Main.dust[num24].noGravity = true;
						Main.dust[num24].velocity.X *= 0.3f;
						Main.dust[num24].velocity.Y *= 0.3f;
					}
				}
				else if (type == 33)
				{
					if (Main.rand.Next(1) == 0)
					{
						int num25 = Dust.NewDust(base.position, width, height, 40, base.velocity.X * 0.25f, base.velocity.Y * 0.25f, 0, default(Color), 1.4f);
						Main.dust[num25].noGravity = true;
					}
				}
				else if (type == 320)
				{
					if (Main.rand.Next(3) == 0)
					{
						int num26 = Dust.NewDust(base.position, width, height, 5, base.velocity.X * 0.25f, base.velocity.Y * 0.25f, 0, default(Color), 1.1f);
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num26].scale = 0.9f;
							Main.dust[num26].velocity *= 0.2f;
						}
						else
						{
							Main.dust[num26].noGravity = true;
						}
					}
				}
				else if (type == 6)
				{
					if (Main.rand.Next(5) == 0)
					{
						int num27;
						switch (Main.rand.Next(3))
						{
						case 0:
							num27 = 15;
							break;
						case 1:
							num27 = 57;
							break;
						default:
							num27 = 58;
							break;
						}
						Dust.NewDust(base.position, width, height, num27, base.velocity.X * 0.25f, base.velocity.Y * 0.25f, 150, default(Color), 0.7f);
					}
				}
				else if (type == 113 && Main.rand.Next(1) == 0)
				{
					int num28 = Dust.NewDust(base.position, width, height, 76, base.velocity.X * 0.15f, base.velocity.Y * 0.15f, 0, default(Color), 1.1f);
					Main.dust[num28].noGravity = true;
					Dust.NewDust(base.position, width, height, 15, base.velocity.X * 0.05f, base.velocity.Y * 0.05f, 150, default(Color), 0.6f);
				}
				if (this.ai[0] == 0f)
				{
					this.ai[1] += 1f;
					if (type == 106 && this.ai[1] >= 45f)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						netUpdate = true;
					}
					if (type == 320 || type == 383)
					{
						if (this.ai[1] >= 10f)
						{
							base.velocity.Y += 0.5f;
							if (type == 383 && base.velocity.Y < 0f)
							{
								base.velocity.Y += 0.35f;
							}
							base.velocity.X *= 0.95f;
							if (base.velocity.Y > 16f)
							{
								base.velocity.Y = 16f;
							}
							if (type == 383 && Vector2.Distance(base.Center, Main.player[owner].Center) > 800f)
							{
								this.ai[0] = 1f;
							}
						}
					}
					else if (type == 182)
					{
						if (Main.rand.Next(2) == 0)
						{
							int num29 = Dust.NewDust(base.position, width, height, 57, 0f, 0f, 255, default(Color), 0.75f);
							Main.dust[num29].velocity *= 0.1f;
							Main.dust[num29].noGravity = true;
						}
						if (base.velocity.X > 0f)
						{
							spriteDirection = 1;
						}
						else if (base.velocity.X < 0f)
						{
							spriteDirection = -1;
						}
						float num30 = base.position.X;
						float num31 = base.position.Y;
						bool flag = false;
						if (this.ai[1] > 10f)
						{
							for (int num32 = 0; num32 < 200; num32++)
							{
								if (Main.npc[num32].CanBeChasedBy(this))
								{
									float num33 = Main.npc[num32].position.X + (float)(Main.npc[num32].width / 2);
									float num34 = Main.npc[num32].position.Y + (float)(Main.npc[num32].height / 2);
									float num35 = Math.Abs(base.position.X + (float)(width / 2) - num33) + Math.Abs(base.position.Y + (float)(height / 2) - num34);
									if (num35 < 800f && Collision.CanHit(new Vector2(base.position.X + (float)(width / 2), base.position.Y + (float)(height / 2)), 1, 1, Main.npc[num32].position, Main.npc[num32].width, Main.npc[num32].height))
									{
										num30 = num33;
										num31 = num34;
										flag = true;
									}
								}
							}
						}
						if (!flag)
						{
							num30 = base.position.X + (float)(width / 2) + base.velocity.X * 100f;
							num31 = base.position.Y + (float)(height / 2) + base.velocity.Y * 100f;
							if (this.ai[1] >= 30f)
							{
								this.ai[0] = 1f;
								this.ai[1] = 0f;
								netUpdate = true;
							}
						}
						float num36 = 12f;
						float num37 = 0.25f;
						Vector2 vector = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						float num38 = num30 - vector.X;
						float num39 = num31 - vector.Y;
						float num40 = (float)Math.Sqrt(num38 * num38 + num39 * num39);
						num40 = num36 / num40;
						num38 *= num40;
						num39 *= num40;
						if (base.velocity.X < num38)
						{
							base.velocity.X += num37;
							if (base.velocity.X < 0f && num38 > 0f)
							{
								base.velocity.X += num37 * 2f;
							}
						}
						else if (base.velocity.X > num38)
						{
							base.velocity.X -= num37;
							if (base.velocity.X > 0f && num38 < 0f)
							{
								base.velocity.X -= num37 * 2f;
							}
						}
						if (base.velocity.Y < num39)
						{
							base.velocity.Y += num37;
							if (base.velocity.Y < 0f && num39 > 0f)
							{
								base.velocity.Y += num37 * 2f;
							}
						}
						else if (base.velocity.Y > num39)
						{
							base.velocity.Y -= num37;
							if (base.velocity.Y > 0f && num39 < 0f)
							{
								base.velocity.Y -= num37 * 2f;
							}
						}
					}
					else if (type == 301)
					{
						if (this.ai[1] >= 20f)
						{
							this.ai[0] = 1f;
							this.ai[1] = 0f;
							netUpdate = true;
						}
					}
					else if (this.ai[1] >= 30f)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						netUpdate = true;
					}
				}
				else
				{
					tileCollide = false;
					float num41 = 9f;
					float num42 = 0.4f;
					if (type == 19)
					{
						num41 = 13f;
						num42 = 0.6f;
					}
					else if (type == 33)
					{
						num41 = 15f;
						num42 = 0.8f;
					}
					else if (type == 182)
					{
						num41 = 16f;
						num42 = 1.2f;
					}
					else if (type == 106)
					{
						num41 = 16f;
						num42 = 1.2f;
					}
					else if (type == 272)
					{
						num41 = 15f;
						num42 = 1f;
					}
					else if (type == 333)
					{
						num41 = 12f;
						num42 = 0.6f;
					}
					else if (type == 301)
					{
						num41 = 15f;
						num42 = 3f;
					}
					else if (type == 320)
					{
						num41 = 15f;
						num42 = 3f;
					}
					else if (type == 383)
					{
						num41 = 16f;
						num42 = 4f;
					}
					Vector2 vector2 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num43 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector2.X;
					float num44 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector2.Y;
					float num45 = (float)Math.Sqrt(num43 * num43 + num44 * num44);
					if (num45 > 3000f)
					{
						Kill();
					}
					num45 = num41 / num45;
					num43 *= num45;
					num44 *= num45;
					if (type == 383)
					{
						Vector2 vector3 = new Vector2(num43, num44) - base.velocity;
						if (vector3 != Vector2.Zero)
						{
							Vector2 value = vector3;
							value.Normalize();
							base.velocity += value * Math.Min(num42, vector3.Length());
						}
					}
					else
					{
						if (base.velocity.X < num43)
						{
							base.velocity.X += num42;
							if (base.velocity.X < 0f && num43 > 0f)
							{
								base.velocity.X += num42;
							}
						}
						else if (base.velocity.X > num43)
						{
							base.velocity.X -= num42;
							if (base.velocity.X > 0f && num43 < 0f)
							{
								base.velocity.X -= num42;
							}
						}
						if (base.velocity.Y < num44)
						{
							base.velocity.Y += num42;
							if (base.velocity.Y < 0f && num44 > 0f)
							{
								base.velocity.Y += num42;
							}
						}
						else if (base.velocity.Y > num44)
						{
							base.velocity.Y -= num42;
							if (base.velocity.Y > 0f && num44 < 0f)
							{
								base.velocity.Y -= num42;
							}
						}
					}
					if (Main.myPlayer == owner)
					{
						Rectangle rectangle = new Rectangle((int)base.position.X, (int)base.position.Y, width, height);
						Rectangle value2 = new Rectangle((int)Main.player[owner].position.X, (int)Main.player[owner].position.Y, Main.player[owner].width, Main.player[owner].height);
						if (rectangle.Intersects(value2))
						{
							Kill();
						}
					}
				}
				if (type == 106)
				{
					rotation += 0.3f * (float)base.direction;
				}
				else if (type == 383)
				{
					if (this.ai[0] == 0f)
					{
						Vector2 velocity = base.velocity;
						velocity.Normalize();
						rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
					}
					else
					{
						Vector2 vector4 = base.Center - Main.player[owner].Center;
						vector4.Normalize();
						rotation = (float)Math.Atan2(vector4.Y, vector4.X) + 1.57f;
					}
				}
				else
				{
					rotation += 0.4f * (float)base.direction;
				}
			}
			else if (aiStyle == 4)
			{
				rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
				if (this.ai[0] == 0f)
				{
					if (type >= 150 && type <= 152 && this.ai[1] == 0f && alpha == 255 && Main.rand.Next(2) == 0)
					{
						type++;
						netUpdate = true;
					}
					alpha -= 50;
					if (type >= 150 && type <= 152)
					{
						alpha -= 25;
					}
					else if (type == 493 || type == 494)
					{
						alpha -= 50;
					}
					if (alpha > 0)
					{
						return;
					}
					alpha = 0;
					this.ai[0] = 1f;
					if (this.ai[1] == 0f)
					{
						this.ai[1] += 1f;
						base.position += base.velocity * 1f;
					}
					if (type == 7 && Main.myPlayer == owner)
					{
						int num46 = type;
						if (this.ai[1] >= 6f)
						{
							num46++;
						}
						int num47 = NewProjectile(base.position.X + base.velocity.X + (float)(width / 2), base.position.Y + base.velocity.Y + (float)(height / 2), base.velocity.X, base.velocity.Y, num46, damage, knockBack, owner);
						Main.projectile[num47].damage = damage;
						Main.projectile[num47].ai[1] = this.ai[1] + 1f;
						NetMessage.SendData(27, -1, -1, "", num47);
					}
					else if (type == 494 && Main.myPlayer == owner)
					{
						int num48 = type;
						if (this.ai[1] >= (float)(7 + Main.rand.Next(2)))
						{
							num48--;
						}
						int num49 = damage;
						float num50 = knockBack;
						if (num48 == 493)
						{
							num49 = (int)((double)damage * 1.25);
							num50 = knockBack * 1.25f;
						}
						int number = NewProjectile(base.position.X + base.velocity.X + (float)(width / 2), base.position.Y + base.velocity.Y + (float)(height / 2), base.velocity.X, base.velocity.Y, num48, num49, num50, owner, 0f, this.ai[1] + 1f);
						NetMessage.SendData(27, -1, -1, "", number);
					}
					else if ((type == 150 || type == 151) && Main.myPlayer == owner)
					{
						int num51 = type;
						if (type == 150)
						{
							num51 = 151;
						}
						else if (type == 151)
						{
							num51 = 150;
						}
						if (this.ai[1] >= 10f && type == 151)
						{
							num51 = 152;
						}
						int num52 = NewProjectile(base.position.X + base.velocity.X + (float)(width / 2), base.position.Y + base.velocity.Y + (float)(height / 2), base.velocity.X, base.velocity.Y, num51, damage, knockBack, owner);
						Main.projectile[num52].damage = damage;
						Main.projectile[num52].ai[1] = this.ai[1] + 1f;
						NetMessage.SendData(27, -1, -1, "", num52);
					}
					return;
				}
				if (alpha < 170 && alpha + 5 >= 170)
				{
					if (type >= 150 && type <= 152)
					{
						for (int num53 = 0; num53 < 8; num53++)
						{
							int num54 = Dust.NewDust(base.position, width, height, 7, base.velocity.X * 0.025f, base.velocity.Y * 0.025f, 200, default(Color), 1.3f);
							Main.dust[num54].noGravity = true;
							Main.dust[num54].velocity *= 0.5f;
						}
					}
					else if (type == 493 || type == 494)
					{
						for (int num55 = 0; num55 < 8; num55++)
						{
							int num56 = Dust.NewDust(base.position, width, height, Main.rand.Next(68, 71), base.velocity.X * 0.025f, base.velocity.Y * 0.025f, 200, default(Color), 1.3f);
							Main.dust[num56].noGravity = true;
							Main.dust[num56].velocity *= 0.5f;
						}
					}
					else
					{
						for (int num57 = 0; num57 < 3; num57++)
						{
							Dust.NewDust(base.position, width, height, 18, base.velocity.X * 0.025f, base.velocity.Y * 0.025f, 170, default(Color), 1.2f);
						}
						Dust.NewDust(base.position, width, height, 14, 0f, 0f, 170, default(Color), 1.1f);
					}
				}
				if (type >= 150 && type <= 152)
				{
					alpha += 3;
				}
				else if (type == 493 || type == 494)
				{
					alpha += 7;
				}
				else
				{
					alpha += 5;
				}
				if (alpha >= 255)
				{
					Kill();
				}
			}
			else if (aiStyle == 5)
			{
				if (type == 503)
				{
					if (base.Center.Y > this.ai[1])
					{
						tileCollide = true;
					}
				}
				else if (type == 92)
				{
					if (base.position.Y > this.ai[1])
					{
						tileCollide = true;
					}
				}
				else
				{
					if (this.ai[1] == 0f && !Collision.SolidCollision(base.position, width, height))
					{
						this.ai[1] = 1f;
						netUpdate = true;
					}
					if (this.ai[1] != 0f)
					{
						tileCollide = true;
					}
				}
				if (soundDelay == 0)
				{
					soundDelay = 20 + Main.rand.Next(40);
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 9);
				}
				if (type == 503)
				{
					alpha -= 15;
					int num58 = 150;
					if (base.Center.Y >= this.ai[1])
					{
						num58 = 0;
					}
					if (alpha < num58)
					{
						alpha = num58;
					}
					localAI[0] += (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) * 0.01f * (float)base.direction;
				}
				else
				{
					if (localAI[0] == 0f)
					{
						localAI[0] = 1f;
					}
					alpha += (int)(25f * localAI[0]);
					if (alpha > 200)
					{
						alpha = 200;
						localAI[0] = -1f;
					}
					if (alpha < 0)
					{
						alpha = 0;
						localAI[0] = 1f;
					}
				}
				if (type == 503)
				{
					rotation = base.velocity.ToRotation() - (float)Math.PI / 2f;
				}
				else
				{
					rotation += (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) * 0.01f * (float)base.direction;
				}
				if (type == 503)
				{
					if (Main.rand.Next(16) == 0)
					{
						Vector2 value3 = Vector2.UnitX.RotatedByRandom(1.5707963705062866).RotatedBy(base.velocity.ToRotation());
						int num59 = Dust.NewDust(base.position, width, height, 58, base.velocity.X * 0.5f, base.velocity.Y * 0.5f, 150, default(Color), 1.2f);
						Main.dust[num59].velocity = value3 * 0.66f;
						Main.dust[num59].position = base.Center + value3 * 12f;
					}
					if (Main.rand.Next(48) == 0)
					{
						int num60 = Gore.NewGore(base.Center, new Vector2(base.velocity.X * 0.2f, base.velocity.Y * 0.2f), 16);
						Main.gore[num60].velocity *= 0.66f;
						Main.gore[num60].velocity += base.velocity * 0.3f;
					}
				}
				if (this.ai[1] == 1f || type == 92)
				{
					light = 0.9f;
					if (Main.rand.Next(10) == 0)
					{
						Dust.NewDust(base.position, width, height, 58, base.velocity.X * 0.5f, base.velocity.Y * 0.5f, 150, default(Color), 1.2f);
					}
					if (Main.rand.Next(20) == 0)
					{
						Gore.NewGore(base.position, new Vector2(base.velocity.X * 0.2f, base.velocity.Y * 0.2f), Main.rand.Next(16, 18));
					}
				}
			}
			else if (aiStyle == 6)
			{
				base.velocity *= 0.95f;
				this.ai[0] += 1f;
				if (this.ai[0] == 180f)
				{
					Kill();
				}
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					int num61 = 10 + type;
					if (type == 463)
					{
						num61 = 231;
					}
					for (int num62 = 0; num62 < 30; num62++)
					{
						Dust.NewDust(base.position, width, height, num61, base.velocity.X, base.velocity.Y, 50);
					}
				}
				if (type != 10 && type != 11 && type != 463)
				{
					return;
				}
				int num63 = (int)(base.position.X / 16f) - 1;
				int num64 = (int)((base.position.X + (float)width) / 16f) + 2;
				int num65 = (int)(base.position.Y / 16f) - 1;
				int num66 = (int)((base.position.Y + (float)height) / 16f) + 2;
				if (num63 < 0)
				{
					num63 = 0;
				}
				if (num64 > Main.maxTilesX)
				{
					num64 = Main.maxTilesX;
				}
				if (num65 < 0)
				{
					num65 = 0;
				}
				if (num66 > Main.maxTilesY)
				{
					num66 = Main.maxTilesY;
				}
				Vector2 vector5 = default(Vector2);
				for (int num67 = num63; num67 < num64; num67++)
				{
					for (int num68 = num65; num68 < num66; num68++)
					{
						vector5.X = num67 * 16;
						vector5.Y = num68 * 16;
						if (!(base.position.X + (float)width > vector5.X) || !(base.position.X < vector5.X + 16f) || !(base.position.Y + (float)height > vector5.Y) || !(base.position.Y < vector5.Y + 16f) || Main.myPlayer != owner || !Main.tile[num67, num68].active())
						{
							continue;
						}
						if (type == 10)
						{
							if (Main.tile[num67, num68].type == 23 || Main.tile[num67, num68].type == 199)
							{
								Main.tile[num67, num68].type = 2;
								WorldGen.SquareTileFrame(num67, num68);
								if (Main.netMode == 1)
								{
									NetMessage.SendTileSquare(-1, num67, num68, 1);
								}
							}
							if (Main.tile[num67, num68].type == 25 || Main.tile[num67, num68].type == 203)
							{
								Main.tile[num67, num68].type = 1;
								WorldGen.SquareTileFrame(num67, num68);
								if (Main.netMode == 1)
								{
									NetMessage.SendTileSquare(-1, num67, num68, 1);
								}
							}
							if (Main.tile[num67, num68].type == 112 || Main.tile[num67, num68].type == 234)
							{
								Main.tile[num67, num68].type = 53;
								WorldGen.SquareTileFrame(num67, num68);
								if (Main.netMode == 1)
								{
									NetMessage.SendTileSquare(-1, num67, num68, 1);
								}
							}
							if (Main.tile[num67, num68].type == 163 || Main.tile[num67, num68].type == 200)
							{
								Main.tile[num67, num68].type = 161;
								WorldGen.SquareTileFrame(num67, num68);
								if (Main.netMode == 1)
								{
									NetMessage.SendTileSquare(-1, num67, num68, 1);
								}
							}
							if (Main.tile[num67, num68].type == 400 || Main.tile[num67, num68].type == 401)
							{
								Main.tile[num67, num68].type = 396;
								WorldGen.SquareTileFrame(num67, num68);
								if (Main.netMode == 1)
								{
									NetMessage.SendTileSquare(-1, num67, num68, 1);
								}
							}
							if (Main.tile[num67, num68].type == 398 || Main.tile[num67, num68].type == 399)
							{
								Main.tile[num67, num68].type = 397;
								WorldGen.SquareTileFrame(num67, num68);
								if (Main.netMode == 1)
								{
									NetMessage.SendTileSquare(-1, num67, num68, 1);
								}
							}
						}
						else
						{
							if (type != 11 && type != 463)
							{
								continue;
							}
							if (Main.tile[num67, num68].type == 109)
							{
								Main.tile[num67, num68].type = 2;
								WorldGen.SquareTileFrame(num67, num68);
								if (Main.netMode == 1)
								{
									NetMessage.SendTileSquare(-1, num67, num68, 1);
								}
							}
							if (Main.tile[num67, num68].type == 116)
							{
								Main.tile[num67, num68].type = 53;
								WorldGen.SquareTileFrame(num67, num68);
								if (Main.netMode == 1)
								{
									NetMessage.SendTileSquare(-1, num67, num68, 1);
								}
							}
							if (Main.tile[num67, num68].type == 117)
							{
								Main.tile[num67, num68].type = 1;
								WorldGen.SquareTileFrame(num67, num68);
								if (Main.netMode == 1)
								{
									NetMessage.SendTileSquare(-1, num67, num68, 1);
								}
							}
							if (Main.tile[num67, num68].type == 164)
							{
								Main.tile[num67, num68].type = 161;
								WorldGen.SquareTileFrame(num67, num68);
								if (Main.netMode == 1)
								{
									NetMessage.SendTileSquare(-1, num67, num68, 1);
								}
							}
							if (Main.tile[num67, num68].type == 403)
							{
								Main.tile[num67, num68].type = 396;
								WorldGen.SquareTileFrame(num67, num68);
								if (Main.netMode == 1)
								{
									NetMessage.SendTileSquare(-1, num67, num68, 1);
								}
							}
							if (Main.tile[num67, num68].type == 402)
							{
								Main.tile[num67, num68].type = 397;
								WorldGen.SquareTileFrame(num67, num68);
								if (Main.netMode == 1)
								{
									NetMessage.SendTileSquare(-1, num67, num68, 1);
								}
							}
						}
					}
				}
			}
			else if (aiStyle == 7)
			{
				if (Main.player[owner].dead || Main.player[owner].stoned || Main.player[owner].webbed || Main.player[owner].frozen)
				{
					Kill();
					return;
				}
				Vector2 mountedCenter = Main.player[owner].MountedCenter;
				Vector2 vector6 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num69 = mountedCenter.X - vector6.X;
				float num70 = mountedCenter.Y - vector6.Y;
				float num71 = (float)Math.Sqrt(num69 * num69 + num70 * num70);
				rotation = (float)Math.Atan2(num70, num69) - 1.57f;
				if (type == 256)
				{
					rotation = (float)Math.Atan2(num70, num69) + 3.92500019f;
				}
				if (type == 446)
				{
					Lighting.AddLight(mountedCenter, 0f, 0.4f, 0.3f);
					localAI[0] += 1f;
					if (localAI[0] >= 28f)
					{
						localAI[0] = 0f;
					}
					DelegateMethods.v3_1 = new Vector3(0f, 0.4f, 0.3f);
					Utils.PlotTileLine(base.Center, mountedCenter, 8f, DelegateMethods.CastLightOpen);
				}
				if (type >= 646 && type <= 649)
				{
					Vector3 vector7 = Vector3.Zero;
					switch (type)
					{
					case 646:
						vector7 = new Vector3(0.7f, 0.5f, 0.1f);
						break;
					case 647:
						vector7 = new Vector3(0f, 0.6f, 0.7f);
						break;
					case 648:
						vector7 = new Vector3(0.6f, 0.2f, 0.6f);
						break;
					case 649:
						vector7 = new Vector3(0.6f, 0.6f, 0.9f);
						break;
					}
					Lighting.AddLight(mountedCenter, vector7);
					Lighting.AddLight(base.Center, vector7);
					DelegateMethods.v3_1 = vector7;
					Utils.PlotTileLine(base.Center, mountedCenter, 8f, DelegateMethods.CastLightOpen);
				}
				if (this.ai[0] == 0f)
				{
					if ((num71 > 300f && type == 13) || (num71 > 400f && type == 32) || (num71 > 440f && type == 73) || (num71 > 440f && type == 74) || (num71 > 250f && type == 165) || (num71 > 350f && type == 256) || (num71 > 500f && type == 315) || (num71 > 550f && type == 322) || (num71 > 400f && type == 331) || (num71 > 550f && type == 332) || (num71 > 400f && type == 372) || (num71 > 300f && type == 396) || (num71 > 550f && type >= 646 && type <= 649) || (num71 > 480f && type >= 486 && type <= 489) || (num71 > 500f && type == 446))
					{
						this.ai[0] = 1f;
					}
					else if (type >= 230 && type <= 235)
					{
						int num72 = 300 + (type - 230) * 30;
						if (num71 > (float)num72)
						{
							this.ai[0] = 1f;
						}
					}
					Vector2 value4 = base.Center - new Vector2(5f);
					Vector2 value5 = base.Center + new Vector2(5f);
					Point point = (value4 - new Vector2(16f)).ToTileCoordinates();
					Point point2 = (value5 + new Vector2(32f)).ToTileCoordinates();
					int num73 = point.X;
					int num74 = point2.X;
					int num75 = point.Y;
					int num76 = point2.Y;
					if (num73 < 0)
					{
						num73 = 0;
					}
					if (num74 > Main.maxTilesX)
					{
						num74 = Main.maxTilesX;
					}
					if (num75 < 0)
					{
						num75 = 0;
					}
					if (num76 > Main.maxTilesY)
					{
						num76 = Main.maxTilesY;
					}
					Vector2 vector8 = default(Vector2);
					for (int num77 = num73; num77 < num74; num77++)
					{
						for (int num78 = num75; num78 < num76; num78++)
						{
							if (Main.tile[num77, num78] == null)
							{
								Main.tile[num77, num78] = new Tile();
							}
							vector8.X = num77 * 16;
							vector8.Y = num78 * 16;
							if (!(value4.X + 10f > vector8.X) || !(value4.X < vector8.X + 16f) || !(value4.Y + 10f > vector8.Y) || !(value4.Y < vector8.Y + 16f) || !Main.tile[num77, num78].nactive() || (!Main.tileSolid[Main.tile[num77, num78].type] && Main.tile[num77, num78].type != 314) || (type == 403 && Main.tile[num77, num78].type != 314))
							{
								continue;
							}
							if (Main.player[owner].grapCount < 10)
							{
								Main.player[owner].grappling[Main.player[owner].grapCount] = whoAmI;
								Main.player[owner].grapCount++;
							}
							if (Main.myPlayer == owner)
							{
								int num79 = 0;
								int num80 = -1;
								int num81 = 100000;
								if (type == 73 || type == 74)
								{
									for (int num82 = 0; num82 < 1000; num82++)
									{
										if (num82 != whoAmI && Main.projectile[num82].active && Main.projectile[num82].owner == owner && Main.projectile[num82].aiStyle == 7 && Main.projectile[num82].ai[0] == 2f)
										{
											Main.projectile[num82].Kill();
										}
									}
								}
								else
								{
									int num83 = 3;
									if (type == 165)
									{
										num83 = 8;
									}
									if (type == 256)
									{
										num83 = 2;
									}
									if (type == 372)
									{
										num83 = 2;
									}
									if (type >= 646 && type <= 649)
									{
										num83 = 4;
									}
									for (int num84 = 0; num84 < 1000; num84++)
									{
										if (Main.projectile[num84].active && Main.projectile[num84].owner == owner && Main.projectile[num84].aiStyle == 7)
										{
											if (Main.projectile[num84].timeLeft < num81)
											{
												num80 = num84;
												num81 = Main.projectile[num84].timeLeft;
											}
											num79++;
										}
									}
									if (num79 > num83)
									{
										Main.projectile[num80].Kill();
									}
								}
							}
							WorldGen.KillTile(num77, num78, true, true);
							Main.PlaySound(0, num77 * 16, num78 * 16);
							base.velocity.X = 0f;
							base.velocity.Y = 0f;
							this.ai[0] = 2f;
							base.position.X = num77 * 16 + 8 - width / 2;
							base.position.Y = num78 * 16 + 8 - height / 2;
							damage = 0;
							netUpdate = true;
							if (Main.myPlayer == owner)
							{
								NetMessage.SendData(13, -1, -1, "", owner);
							}
							break;
						}
						if (this.ai[0] == 2f)
						{
							break;
						}
					}
				}
				else if (this.ai[0] == 1f)
				{
					float num85 = 11f;
					if (type == 32)
					{
						num85 = 15f;
					}
					if (type == 73 || type == 74)
					{
						num85 = 17f;
					}
					if (type == 315)
					{
						num85 = 20f;
					}
					if (type == 322)
					{
						num85 = 22f;
					}
					if (type >= 230 && type <= 235)
					{
						num85 = 11f + (float)(type - 230) * 0.75f;
					}
					if (type == 446)
					{
						num85 = 20f;
					}
					if (type >= 486 && type <= 489)
					{
						num85 = 18f;
					}
					if (type >= 646 && type <= 649)
					{
						num85 = 24f;
					}
					if (type == 332)
					{
						num85 = 17f;
					}
					if (num71 < 24f)
					{
						Kill();
					}
					num71 = num85 / num71;
					num69 *= num71;
					num70 *= num71;
					base.velocity.X = num69;
					base.velocity.Y = num70;
				}
				else
				{
					if (this.ai[0] != 2f)
					{
						return;
					}
					int num86 = (int)(base.position.X / 16f) - 1;
					int num87 = (int)((base.position.X + (float)width) / 16f) + 2;
					int num88 = (int)(base.position.Y / 16f) - 1;
					int num89 = (int)((base.position.Y + (float)height) / 16f) + 2;
					if (num86 < 0)
					{
						num86 = 0;
					}
					if (num87 > Main.maxTilesX)
					{
						num87 = Main.maxTilesX;
					}
					if (num88 < 0)
					{
						num88 = 0;
					}
					if (num89 > Main.maxTilesY)
					{
						num89 = Main.maxTilesY;
					}
					bool flag2 = true;
					Vector2 vector9 = default(Vector2);
					for (int num90 = num86; num90 < num87; num90++)
					{
						for (int num91 = num88; num91 < num89; num91++)
						{
							if (Main.tile[num90, num91] == null)
							{
								Main.tile[num90, num91] = new Tile();
							}
							vector9.X = num90 * 16;
							vector9.Y = num91 * 16;
							if (base.position.X + (float)(width / 2) > vector9.X && base.position.X + (float)(width / 2) < vector9.X + 16f && base.position.Y + (float)(height / 2) > vector9.Y && base.position.Y + (float)(height / 2) < vector9.Y + 16f && Main.tile[num90, num91].nactive() && (Main.tileSolid[Main.tile[num90, num91].type] || Main.tile[num90, num91].type == 314 || Main.tile[num90, num91].type == 5))
							{
								flag2 = false;
							}
						}
					}
					if (flag2)
					{
						this.ai[0] = 1f;
					}
					else if (Main.player[owner].grapCount < 10)
					{
						Main.player[owner].grappling[Main.player[owner].grapCount] = whoAmI;
						Main.player[owner].grapCount++;
					}
				}
			}
			else if (aiStyle == 8)
			{
				if (type == 258 && localAI[0] == 0f)
				{
					localAI[0] = 1f;
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 20);
				}
				if (type == 96 && localAI[0] == 0f)
				{
					localAI[0] = 1f;
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 20);
				}
				if (type == 27)
				{
					for (int num92 = 0; num92 < 5; num92++)
					{
						float num93 = base.velocity.X / 3f * (float)num92;
						float num94 = base.velocity.Y / 3f * (float)num92;
						int num95 = 4;
						int num96 = Dust.NewDust(new Vector2(base.position.X + (float)num95, base.position.Y + (float)num95), width - num95 * 2, height - num95 * 2, 172, 0f, 0f, 100, default(Color), 1.2f);
						Main.dust[num96].noGravity = true;
						Main.dust[num96].velocity *= 0.1f;
						Main.dust[num96].velocity += base.velocity * 0.1f;
						Main.dust[num96].position.X -= num93;
						Main.dust[num96].position.Y -= num94;
					}
					if (Main.rand.Next(5) == 0)
					{
						int num97 = 4;
						int num98 = Dust.NewDust(new Vector2(base.position.X + (float)num97, base.position.Y + (float)num97), width - num97 * 2, height - num97 * 2, 172, 0f, 0f, 100, default(Color), 0.6f);
						Main.dust[num98].velocity *= 0.25f;
						Main.dust[num98].velocity += base.velocity * 0.5f;
					}
				}
				else if (type == 502)
				{
					float num99 = (float)Main.DiscoR / 255f;
					float num100 = (float)Main.DiscoG / 255f;
					float num101 = (float)Main.DiscoB / 255f;
					num99 = (0.5f + num99) / 2f;
					num100 = (0.5f + num100) / 2f;
					num101 = (0.5f + num101) / 2f;
					Lighting.AddLight(base.Center, num99, num100, num101);
				}
				else if (type == 95 || type == 96)
				{
					int num102 = Dust.NewDust(new Vector2(base.position.X + base.velocity.X, base.position.Y + base.velocity.Y), width, height, 75, base.velocity.X, base.velocity.Y, 100, default(Color), 3f * scale);
					Main.dust[num102].noGravity = true;
				}
				else if (type == 253)
				{
					for (int num103 = 0; num103 < 2; num103++)
					{
						int num104 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 135, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100, default(Color), 2f);
						Main.dust[num104].noGravity = true;
						Main.dust[num104].velocity.X *= 0.3f;
						Main.dust[num104].velocity.Y *= 0.3f;
					}
				}
				else
				{
					for (int num105 = 0; num105 < 2; num105++)
					{
						int num106 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100, default(Color), 2f);
						Main.dust[num106].noGravity = true;
						Main.dust[num106].velocity.X *= 0.3f;
						Main.dust[num106].velocity.Y *= 0.3f;
					}
				}
				if (type != 27 && type != 96 && type != 258)
				{
					this.ai[1] += 1f;
				}
				if (this.ai[1] >= 20f)
				{
					base.velocity.Y += 0.2f;
				}
				if (type == 502)
				{
					rotation = base.velocity.ToRotation() + (float)Math.PI / 2f;
					if (base.velocity.X != 0f)
					{
						spriteDirection = (base.direction = Math.Sign(base.velocity.X));
					}
				}
				else
				{
					rotation += 0.3f * (float)base.direction;
				}
				if (base.velocity.Y > 16f)
				{
					base.velocity.Y = 16f;
				}
			}
			else if (aiStyle == 9)
			{
				if (type == 491)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num107;
						switch (Main.rand.Next(3))
						{
						case 0:
							num107 = 15;
							break;
						case 1:
							num107 = 57;
							break;
						default:
							num107 = 58;
							break;
						}
						int num108 = Dust.NewDust(base.position, width, height, num107, base.velocity.X * 0.25f, base.velocity.Y * 0.25f, 255, default(Color), 0.7f);
						Main.dust[num108].velocity *= 0.25f;
						Main.dust[num108].position = (Main.dust[num108].position + base.position) / 2f;
					}
				}
				else if (type == 34)
				{
					int num109 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100, default(Color), 3.5f);
					Main.dust[num109].noGravity = true;
					Main.dust[num109].velocity *= 1.4f;
					num109 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100, default(Color), 1.5f);
				}
				else if (type == 79)
				{
					if (soundDelay == 0 && Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y) > 2f)
					{
						soundDelay = 10;
						Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 9);
					}
					for (int num110 = 0; num110 < 1; num110++)
					{
						int num111 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 66, 0f, 0f, 100, new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB), 2.5f);
						Main.dust[num111].velocity *= 0.1f;
						Main.dust[num111].velocity += base.velocity * 0.2f;
						Main.dust[num111].position.X = base.position.X + (float)(width / 2) + 4f + (float)Main.rand.Next(-2, 3);
						Main.dust[num111].position.Y = base.position.Y + (float)(height / 2) + (float)Main.rand.Next(-2, 3);
						Main.dust[num111].noGravity = true;
					}
				}
				else
				{
					if (soundDelay == 0 && Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y) > 2f)
					{
						soundDelay = 10;
						Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 9);
					}
					int num112 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 15, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num112].velocity *= 0.3f;
					Main.dust[num112].position.X = base.position.X + (float)(width / 2) + 4f + (float)Main.rand.Next(-4, 5);
					Main.dust[num112].position.Y = base.position.Y + (float)(height / 2) + (float)Main.rand.Next(-4, 5);
					Main.dust[num112].noGravity = true;
				}
				if (Main.myPlayer == owner && this.ai[0] <= 0f)
				{
					if (Main.player[owner].channel)
					{
						float num113 = 12f;
						if (type == 16)
						{
							num113 = 15f;
						}
						if (type == 491)
						{
							num113 = 20f;
						}
						Vector2 vector10 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						float num114 = (float)Main.mouseX + Main.screenPosition.X - vector10.X;
						float num115 = (float)Main.mouseY + Main.screenPosition.Y - vector10.Y;
						if (Main.player[owner].gravDir == -1f)
						{
							num115 = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY - vector10.Y;
						}
						float num116 = (float)Math.Sqrt(num114 * num114 + num115 * num115);
						num116 = (float)Math.Sqrt(num114 * num114 + num115 * num115);
						if (this.ai[0] < 0f)
						{
							this.ai[0] += 1f;
						}
						if (type == 491 && num116 < 100f)
						{
							if (base.velocity.Length() < num113)
							{
								base.velocity *= 1.1f;
								if (base.velocity.Length() > num113)
								{
									base.velocity.Normalize();
									base.velocity *= num113;
								}
							}
							if (this.ai[0] == 0f)
							{
								this.ai[0] = -10f;
							}
						}
						else if (num116 > num113)
						{
							num116 = num113 / num116;
							num114 *= num116;
							num115 *= num116;
							int num117 = (int)(num114 * 1000f);
							int num118 = (int)(base.velocity.X * 1000f);
							int num119 = (int)(num115 * 1000f);
							int num120 = (int)(base.velocity.Y * 1000f);
							if (num117 != num118 || num119 != num120)
							{
								netUpdate = true;
							}
							if (type == 491)
							{
								Vector2 value6 = new Vector2(num114, num115);
								base.velocity = (base.velocity * 4f + value6) / 5f;
							}
							else
							{
								base.velocity.X = num114;
								base.velocity.Y = num115;
							}
						}
						else
						{
							int num121 = (int)(num114 * 1000f);
							int num122 = (int)(base.velocity.X * 1000f);
							int num123 = (int)(num115 * 1000f);
							int num124 = (int)(base.velocity.Y * 1000f);
							if (num121 != num122 || num123 != num124)
							{
								netUpdate = true;
							}
							base.velocity.X = num114;
							base.velocity.Y = num115;
						}
					}
					else if (this.ai[0] <= 0f)
					{
						netUpdate = true;
						if (type != 491)
						{
							float num125 = 12f;
							Vector2 vector11 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
							float num126 = (float)Main.mouseX + Main.screenPosition.X - vector11.X;
							float num127 = (float)Main.mouseY + Main.screenPosition.Y - vector11.Y;
							if (Main.player[owner].gravDir == -1f)
							{
								num127 = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY - vector11.Y;
							}
							float num128 = (float)Math.Sqrt(num126 * num126 + num127 * num127);
							if (num128 == 0f || this.ai[0] < 0f)
							{
								vector11 = new Vector2(Main.player[owner].position.X + (float)(Main.player[owner].width / 2), Main.player[owner].position.Y + (float)(Main.player[owner].height / 2));
								num126 = base.position.X + (float)width * 0.5f - vector11.X;
								num127 = base.position.Y + (float)height * 0.5f - vector11.Y;
								num128 = (float)Math.Sqrt(num126 * num126 + num127 * num127);
							}
							num128 = num125 / num128;
							num126 *= num128;
							num127 *= num128;
							base.velocity.X = num126;
							base.velocity.Y = num127;
							if (base.velocity.X == 0f && base.velocity.Y == 0f)
							{
								Kill();
							}
						}
						this.ai[0] = 1f;
					}
				}
				if (type == 491)
				{
					localAI[0] += 1f;
					if (this.ai[0] > 0f && localAI[0] > 15f)
					{
						tileCollide = false;
						Vector2 value7 = Main.player[owner].Center - base.Center;
						if (value7.Length() < 20f)
						{
							Kill();
						}
						value7.Normalize();
						value7 *= 25f;
						base.velocity = (base.velocity * 5f + value7) / 6f;
					}
					if (this.ai[0] < 0f || (base.velocity.X == 0f && base.velocity.Y == 0f))
					{
						rotation += 0.3f;
					}
					else if (this.ai[0] > 0f)
					{
						rotation += 0.3f * (float)base.direction;
					}
					else
					{
						rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
					}
				}
				else if (type == 34)
				{
					rotation += 0.3f * (float)base.direction;
				}
				else if (base.velocity.X != 0f || base.velocity.Y != 0f)
				{
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) - 2.355f;
				}
				if (base.velocity.Y > 16f)
				{
					base.velocity.Y = 16f;
				}
			}
			else if (aiStyle == 10)
			{
				if (type == 31 && this.ai[0] != 2f)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num129 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 32, 0f, base.velocity.Y / 2f);
						Main.dust[num129].velocity.X *= 0.4f;
					}
				}
				else if (type == 39)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num130 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 38, 0f, base.velocity.Y / 2f);
						Main.dust[num130].velocity.X *= 0.4f;
					}
				}
				else if (type >= 411 && type <= 414)
				{
					if (Main.rand.Next(3) == 0)
					{
						int num131 = 9;
						if (type == 412 || type == 414)
						{
							num131 = 11;
						}
						if (type == 413)
						{
							num131 = 19;
						}
						int num132 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, num131, 0f, base.velocity.Y / 2f);
						Main.dust[num132].noGravity = true;
						Main.dust[num132].velocity -= base.velocity * 0.5f;
					}
				}
				else if (type == 40)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num133 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 36, 0f, base.velocity.Y / 2f);
						Main.dust[num133].velocity *= 0.4f;
					}
				}
				else if (type == 42 || type == 31)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num134 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 32);
						Main.dust[num134].velocity.X *= 0.4f;
					}
				}
				else if (type == 56 || type == 65)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num135 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 14);
						Main.dust[num135].velocity.X *= 0.4f;
					}
				}
				else if (type == 67 || type == 68)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num136 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 51);
						Main.dust[num136].velocity.X *= 0.4f;
					}
				}
				else if (type == 71)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num137 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 53);
						Main.dust[num137].velocity.X *= 0.4f;
					}
				}
				else if (type == 179)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num138 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 149);
						Main.dust[num138].velocity.X *= 0.4f;
					}
				}
				else if (type == 241 || type == 354)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num139 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 36);
						Main.dust[num139].velocity.X *= 0.4f;
					}
				}
				else if (type != 109 && Main.rand.Next(20) == 0)
				{
					Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 0);
				}
				tileCollide = true;
				localAI[1] = 0f;
				if (Main.myPlayer == owner && this.ai[0] == 0f)
				{
					tileCollide = false;
					if (Main.player[owner].channel)
					{
						localAI[1] = -1f;
						float num140 = 12f;
						Vector2 vector12 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						float num141 = (float)Main.mouseX + Main.screenPosition.X - vector12.X;
						float num142 = (float)Main.mouseY + Main.screenPosition.Y - vector12.Y;
						if (Main.player[owner].gravDir == -1f)
						{
							num142 = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY - vector12.Y;
						}
						float num143 = (float)Math.Sqrt(num141 * num141 + num142 * num142);
						num143 = (float)Math.Sqrt(num141 * num141 + num142 * num142);
						if (num143 > num140)
						{
							num143 = num140 / num143;
							num141 *= num143;
							num142 *= num143;
							if (num141 != base.velocity.X || num142 != base.velocity.Y)
							{
								netUpdate = true;
							}
							base.velocity.X = num141;
							base.velocity.Y = num142;
						}
						else
						{
							if (num141 != base.velocity.X || num142 != base.velocity.Y)
							{
								netUpdate = true;
							}
							base.velocity.X = num141;
							base.velocity.Y = num142;
						}
					}
					else
					{
						this.ai[0] = 1f;
						netUpdate = true;
					}
				}
				if (this.ai[0] == 1f && type != 109)
				{
					if (type == 42 || type == 65 || type == 68 || type == 354)
					{
						this.ai[1] += 1f;
						if (this.ai[1] >= 60f)
						{
							this.ai[1] = 60f;
							base.velocity.Y += 0.2f;
						}
					}
					else
					{
						base.velocity.Y += 0.41f;
					}
				}
				else if (this.ai[0] == 2f && type != 109)
				{
					base.velocity.Y += 0.2f;
					if ((double)base.velocity.X < -0.04)
					{
						base.velocity.X += 0.04f;
					}
					else if ((double)base.velocity.X > 0.04)
					{
						base.velocity.X -= 0.04f;
					}
					else
					{
						base.velocity.X = 0f;
					}
				}
				rotation += 0.1f;
				if (base.velocity.Y > 10f)
				{
					base.velocity.Y = 10f;
				}
			}
			else if (aiStyle == 11)
			{
				if (type == 72 || type == 86 || type == 87)
				{
					if (base.velocity.X > 0f)
					{
						spriteDirection = -1;
					}
					else if (base.velocity.X < 0f)
					{
						spriteDirection = 1;
					}
					rotation = base.velocity.X * 0.1f;
					frameCounter++;
					if (frameCounter >= 4)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame >= 4)
					{
						frame = 0;
					}
					if (Main.rand.Next(6) == 0)
					{
						int num144 = 56;
						if (type == 86)
						{
							num144 = 73;
						}
						else if (type == 87)
						{
							num144 = 74;
						}
						int num145 = Dust.NewDust(base.position, width, height, num144, 0f, 0f, 200, default(Color), 0.8f);
						Main.dust[num145].velocity *= 0.3f;
						Main.dust[num145].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cLight, Main.player[owner]);
					}
				}
				else
				{
					rotation += 0.02f;
				}
				if (Main.myPlayer == owner)
				{
					if (type == 72)
					{
						if (Main.player[Main.myPlayer].blueFairy)
						{
							timeLeft = 2;
						}
					}
					else if (type == 86)
					{
						if (Main.player[Main.myPlayer].redFairy)
						{
							timeLeft = 2;
						}
					}
					else if (type == 87)
					{
						if (Main.player[Main.myPlayer].greenFairy)
						{
							timeLeft = 2;
						}
					}
					else if (Main.player[Main.myPlayer].lightOrb)
					{
						timeLeft = 2;
					}
				}
				if (!Main.player[owner].dead)
				{
					float num146 = 3f;
					if (type == 72 || type == 86 || type == 87)
					{
						num146 = 3.75f;
					}
					Vector2 vector13 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num147 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector13.X;
					float num148 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector13.Y;
					int num149 = 70;
					if (type == 18)
					{
						if (Main.player[owner].controlUp)
						{
							num148 = Main.player[owner].position.Y - 40f - vector13.Y;
							num147 -= 6f;
							num149 = 4;
						}
						else if (Main.player[owner].controlDown)
						{
							num148 = Main.player[owner].position.Y + (float)Main.player[owner].height + 40f - vector13.Y;
							num147 -= 6f;
							num149 = 4;
						}
					}
					float num150 = (float)Math.Sqrt(num147 * num147 + num148 * num148);
					num150 = (float)Math.Sqrt(num147 * num147 + num148 * num148);
					if (type == 72 || type == 86 || type == 87)
					{
						num149 = 40;
					}
					if (num150 > 800f)
					{
						base.position.X = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - (float)(width / 2);
						base.position.Y = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - (float)(height / 2);
					}
					else if (num150 > (float)num149)
					{
						num150 = num146 / num150;
						num147 *= num150;
						num148 *= num150;
						base.velocity.X = num147;
						base.velocity.Y = num148;
					}
					else
					{
						base.velocity.X = 0f;
						base.velocity.Y = 0f;
					}
				}
				else
				{
					Kill();
				}
			}
			else if (aiStyle == 12)
			{
				if (type == 288 && localAI[0] == 0f)
				{
					localAI[0] = 1f;
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 17);
				}
				if (type == 280 || type == 288)
				{
					scale -= 0.002f;
					if (scale <= 0f)
					{
						Kill();
					}
					if (type == 288)
					{
						this.ai[0] = 4f;
					}
					if (this.ai[0] > 3f)
					{
						base.velocity.Y += 0.075f;
						for (int num151 = 0; num151 < 3; num151++)
						{
							float num152 = base.velocity.X / 3f * (float)num151;
							float num153 = base.velocity.Y / 3f * (float)num151;
							int num154 = 14;
							int num155 = Dust.NewDust(new Vector2(base.position.X + (float)num154, base.position.Y + (float)num154), width - num154 * 2, height - num154 * 2, 170, 0f, 0f, 100);
							Main.dust[num155].noGravity = true;
							Main.dust[num155].velocity *= 0.1f;
							Main.dust[num155].velocity += base.velocity * 0.5f;
							Main.dust[num155].position.X -= num152;
							Main.dust[num155].position.Y -= num153;
						}
						if (Main.rand.Next(8) == 0)
						{
							int num156 = 16;
							int num157 = Dust.NewDust(new Vector2(base.position.X + (float)num156, base.position.Y + (float)num156), width - num156 * 2, height - num156 * 2, 170, 0f, 0f, 100, default(Color), 0.5f);
							Main.dust[num157].velocity *= 0.25f;
							Main.dust[num157].velocity += base.velocity * 0.5f;
						}
					}
					else
					{
						this.ai[0] += 1f;
					}
					return;
				}
				scale -= 0.02f;
				if (scale <= 0f)
				{
					Kill();
				}
				if (this.ai[0] > 3f)
				{
					base.velocity.Y += 0.2f;
					for (int num158 = 0; num158 < 1; num158++)
					{
						for (int num159 = 0; num159 < 3; num159++)
						{
							float num160 = base.velocity.X / 3f * (float)num159;
							float num161 = base.velocity.Y / 3f * (float)num159;
							int num162 = 6;
							int num163 = Dust.NewDust(new Vector2(base.position.X + (float)num162, base.position.Y + (float)num162), width - num162 * 2, height - num162 * 2, 172, 0f, 0f, 100, default(Color), 1.2f);
							Main.dust[num163].noGravity = true;
							Main.dust[num163].velocity *= 0.3f;
							Main.dust[num163].velocity += base.velocity * 0.5f;
							Main.dust[num163].position.X -= num160;
							Main.dust[num163].position.Y -= num161;
						}
						if (Main.rand.Next(8) == 0)
						{
							int num164 = 6;
							int num165 = Dust.NewDust(new Vector2(base.position.X + (float)num164, base.position.Y + (float)num164), width - num164 * 2, height - num164 * 2, 172, 0f, 0f, 100, default(Color), 0.75f);
							Main.dust[num165].velocity *= 0.5f;
							Main.dust[num165].velocity += base.velocity * 0.5f;
						}
					}
				}
				else
				{
					this.ai[0] += 1f;
				}
			}
			else if (aiStyle == 13)
			{
				if (Main.player[owner].dead)
				{
					Kill();
					return;
				}
				if (type != 481)
				{
					Main.player[owner].itemAnimation = 5;
					Main.player[owner].itemTime = 5;
				}
				if (alpha == 0)
				{
					if (base.position.X + (float)(width / 2) > Main.player[owner].position.X + (float)(Main.player[owner].width / 2))
					{
						Main.player[owner].ChangeDir(1);
					}
					else
					{
						Main.player[owner].ChangeDir(-1);
					}
				}
				if (type == 481)
				{
					if (this.ai[0] == 0f)
					{
						extraUpdates = 0;
					}
					else
					{
						extraUpdates = 1;
					}
				}
				Vector2 vector14 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num166 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector14.X;
				float num167 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector14.Y;
				float num168 = (float)Math.Sqrt(num166 * num166 + num167 * num167);
				if (this.ai[0] == 0f)
				{
					if (num168 > 700f)
					{
						this.ai[0] = 1f;
					}
					else if (type == 262 && num168 > 500f)
					{
						this.ai[0] = 1f;
					}
					else if (type == 271 && num168 > 200f)
					{
						this.ai[0] = 1f;
					}
					else if (type == 273 && num168 > 150f)
					{
						this.ai[0] = 1f;
					}
					else if (type == 481 && num168 > 350f)
					{
						this.ai[0] = 1f;
					}
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
					this.ai[1] += 1f;
					if (this.ai[1] > 5f)
					{
						alpha = 0;
					}
					if (type == 262 && this.ai[1] > 8f)
					{
						this.ai[1] = 8f;
					}
					if (type == 271 && this.ai[1] > 8f)
					{
						this.ai[1] = 8f;
					}
					if (type == 273 && this.ai[1] > 8f)
					{
						this.ai[1] = 8f;
					}
					if (type == 481 && this.ai[1] > 8f)
					{
						this.ai[1] = 8f;
					}
					if (type == 404 && this.ai[1] > 8f)
					{
						this.ai[1] = 0f;
					}
					if (this.ai[1] >= 10f)
					{
						this.ai[1] = 15f;
						base.velocity.Y += 0.3f;
					}
					if (type == 262 && base.velocity.X < 0f)
					{
						spriteDirection = -1;
					}
					else if (type == 262)
					{
						spriteDirection = 1;
					}
					if (type == 271 && base.velocity.X < 0f)
					{
						spriteDirection = -1;
					}
					else if (type == 271)
					{
						spriteDirection = 1;
					}
				}
				else if (this.ai[0] == 1f)
				{
					tileCollide = false;
					rotation = (float)Math.Atan2(num167, num166) - 1.57f;
					float num169 = 20f;
					if (type == 262)
					{
						num169 = 30f;
					}
					if (num168 < 50f)
					{
						Kill();
					}
					num168 = num169 / num168;
					num166 *= num168;
					num167 *= num168;
					base.velocity.X = num166;
					base.velocity.Y = num167;
					if (type == 262 && base.velocity.X < 0f)
					{
						spriteDirection = 1;
					}
					else if (type == 262)
					{
						spriteDirection = -1;
					}
					if (type == 271 && base.velocity.X < 0f)
					{
						spriteDirection = 1;
					}
					else if (type == 271)
					{
						spriteDirection = -1;
					}
				}
			}
			else if (aiStyle == 14)
			{
				if (type == 473 && Main.netMode != 2)
				{
					localAI[0] += 1f;
					if (localAI[0] >= 10f)
					{
						localAI[0] = 0f;
						int num170 = 30;
						if ((base.Center - Main.player[Main.myPlayer].Center).Length() < (float)(Main.screenWidth + num170 * 16))
						{
							int num171 = (int)base.Center.X / 16;
							int num172 = (int)base.Center.Y / 16;
							for (int num173 = num171 - num170; num173 <= num171 + num170; num173++)
							{
								for (int num174 = num172 - num170; num174 <= num172 + num170; num174++)
								{
									if (Main.rand.Next(4) != 0 || !(new Vector2(num171 - num173, num172 - num174).Length() < (float)num170) || num173 <= 0 || num173 >= Main.maxTilesX - 1 || num174 <= 0 || num174 >= Main.maxTilesY - 1 || Main.tile[num173, num174] == null || !Main.tile[num173, num174].active())
									{
										continue;
									}
									bool flag3 = false;
									if (Main.tile[num173, num174].type == 185 && Main.tile[num173, num174].frameY == 18)
									{
										if (Main.tile[num173, num174].frameX >= 576 && Main.tile[num173, num174].frameX <= 882)
										{
											flag3 = true;
										}
									}
									else if (Main.tile[num173, num174].type == 186 && Main.tile[num173, num174].frameX >= 864 && Main.tile[num173, num174].frameX <= 1170)
									{
										flag3 = true;
									}
									if (flag3 || Main.tileSpelunker[Main.tile[num173, num174].type] || (Main.tileAlch[Main.tile[num173, num174].type] && Main.tile[num173, num174].type != 82))
									{
										int num175 = Dust.NewDust(new Vector2(num173 * 16, num174 * 16), 16, 16, 204, 0f, 0f, 150, default(Color), 0.3f);
										Main.dust[num175].fadeIn = 0.75f;
										Main.dust[num175].velocity *= 0.1f;
										Main.dust[num175].noLight = true;
									}
								}
							}
						}
					}
				}
				if (type == 352)
				{
					if (localAI[1] == 0f)
					{
						localAI[1] = 1f;
					}
					alpha += (int)(25f * localAI[1]);
					if (alpha <= 0)
					{
						alpha = 0;
						localAI[1] = 1f;
					}
					else if (alpha >= 255)
					{
						alpha = 255;
						localAI[1] = -1f;
					}
					scale += localAI[1] * 0.01f;
				}
				if (type == 346)
				{
					if (localAI[0] == 0f)
					{
						localAI[0] = 1f;
						Main.PlaySound(2, (int)base.position.X, (int)base.position.Y);
					}
					frame = (int)this.ai[1];
					if (owner == Main.myPlayer && timeLeft == 1)
					{
						for (int num176 = 0; num176 < 5; num176++)
						{
							float num177 = 10f;
							Vector2 vector15 = new Vector2(base.Center.X, base.Center.Y);
							float num178 = Main.rand.Next(-20, 21);
							float num179 = Main.rand.Next(-20, 0);
							float num180 = (float)Math.Sqrt(num178 * num178 + num179 * num179);
							num180 = num177 / num180;
							num178 *= num180;
							num179 *= num180;
							num178 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
							num179 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
							NewProjectile(vector15.X, vector15.Y, num178, num179, 347, 40, 0f, Main.myPlayer, 0f, this.ai[1]);
						}
					}
				}
				if (type == 196)
				{
					int num181 = Main.rand.Next(1, 3);
					for (int num182 = 0; num182 < num181; num182++)
					{
						int num183 = Dust.NewDust(base.position, width, height, 31, 0f, 0f, 100);
						Main.dust[num183].alpha += Main.rand.Next(100);
						Main.dust[num183].velocity *= 0.3f;
						Main.dust[num183].velocity.X += (float)Main.rand.Next(-10, 11) * 0.025f;
						Main.dust[num183].velocity.Y -= 0.4f + (float)Main.rand.Next(-3, 14) * 0.15f;
						Main.dust[num183].fadeIn = 1.25f + (float)Main.rand.Next(20) * 0.15f;
					}
				}
				if (type == 53)
				{
					try
					{
						int num184 = (int)(base.position.X / 16f) - 1;
						int num185 = (int)((base.position.X + (float)width) / 16f) + 2;
						int num186 = (int)(base.position.Y / 16f) - 1;
						int num187 = (int)((base.position.Y + (float)height) / 16f) + 2;
						if (num184 < 0)
						{
							num184 = 0;
						}
						if (num185 > Main.maxTilesX)
						{
							num185 = Main.maxTilesX;
						}
						if (num186 < 0)
						{
							num186 = 0;
						}
						if (num187 > Main.maxTilesY)
						{
							num187 = Main.maxTilesY;
						}
						Vector2 vector16 = default(Vector2);
						for (int num188 = num184; num188 < num185; num188++)
						{
							for (int num189 = num186; num189 < num187; num189++)
							{
								if (Main.tile[num188, num189] != null && Main.tile[num188, num189].nactive() && (Main.tileSolid[Main.tile[num188, num189].type] || (Main.tileSolidTop[Main.tile[num188, num189].type] && Main.tile[num188, num189].frameY == 0)))
								{
									vector16.X = num188 * 16;
									vector16.Y = num189 * 16;
									if (base.position.X + (float)width > vector16.X && base.position.X < vector16.X + 16f && base.position.Y + (float)height > vector16.Y && base.position.Y < vector16.Y + 16f)
									{
										base.velocity.X = 0f;
										base.velocity.Y = -0.2f;
									}
								}
							}
						}
					}
					catch
					{
					}
				}
				if (type == 277)
				{
					if (alpha > 0)
					{
						alpha -= 30;
						if (alpha < 0)
						{
							alpha = 0;
						}
					}
					if (Main.expertMode)
					{
						float num190 = 12f;
						int num191 = Player.FindClosest(base.Center, 1, 1);
						Vector2 vector17 = Main.player[num191].Center - base.Center;
						vector17.Normalize();
						vector17 *= num190;
						int num192 = 200;
						base.velocity.X = (base.velocity.X * (float)(num192 - 1) + vector17.X) / (float)num192;
						if (base.velocity.Length() > 16f)
						{
							base.velocity.Normalize();
							base.velocity *= 16f;
						}
					}
				}
				if (type == 261 || type == 277)
				{
					this.ai[0] += 1f;
					if (this.ai[0] > 15f)
					{
						this.ai[0] = 15f;
						if (base.velocity.Y == 0f && base.velocity.X != 0f)
						{
							base.velocity.X *= 0.97f;
							if ((double)base.velocity.X > -0.01 && (double)base.velocity.X < 0.01)
							{
								Kill();
							}
						}
						base.velocity.Y += 0.2f;
					}
					rotation += base.velocity.X * 0.05f;
				}
				else if (type == 378)
				{
					if (localAI[0] == 0f)
					{
						Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 17);
						localAI[0] += 1f;
					}
					Rectangle rectangle2 = new Rectangle((int)base.position.X, (int)base.position.Y, width, height);
					for (int num193 = 0; num193 < 200; num193++)
					{
						if (Main.npc[num193].CanBeChasedBy(this, true))
						{
							Rectangle value8 = new Rectangle((int)Main.npc[num193].position.X, (int)Main.npc[num193].position.Y, Main.npc[num193].width, Main.npc[num193].height);
							if (rectangle2.Intersects(value8))
							{
								Kill();
								return;
							}
						}
					}
					this.ai[0] += 1f;
					if (this.ai[0] > 10f)
					{
						this.ai[0] = 90f;
						if (base.velocity.Y == 0f && base.velocity.X != 0f)
						{
							base.velocity.X *= 0.96f;
							if ((double)base.velocity.X > -0.01 && (double)base.velocity.X < 0.01)
							{
								Kill();
							}
						}
						base.velocity.Y += 0.2f;
					}
					rotation += base.velocity.X * 0.1f;
				}
				else if (type == 483)
				{
					this.ai[0] += 1f;
					if (this.ai[0] > 5f)
					{
						if (owner == Main.myPlayer && this.ai[0] > (float)Main.rand.Next(20, 130))
						{
							Kill();
						}
						if (base.velocity.Y == 0f && base.velocity.X != 0f)
						{
							base.velocity.X *= 0.97f;
							if ((double)base.velocity.X > -0.01 && (double)base.velocity.X < 0.01)
							{
								base.velocity.X = 0f;
								netUpdate = true;
							}
						}
						base.velocity.Y += 0.3f;
						base.velocity.X *= 0.99f;
					}
					rotation += base.velocity.X * 0.05f;
				}
				else if (type == 538)
				{
					this.ai[0] += 1f;
					if (this.ai[0] > 60f || base.velocity.Y >= 0f)
					{
						alpha += 6;
						base.velocity *= 0.5f;
					}
					else if (this.ai[0] > 5f)
					{
						base.velocity.Y += 0.1f;
						base.velocity.X *= 1.025f;
						alpha -= 23;
						scale = 0.8f * (255f - (float)alpha) / 255f;
						if (alpha < 0)
						{
							alpha = 0;
						}
					}
					if (alpha >= 255 && this.ai[0] > 5f)
					{
						Kill();
						return;
					}
				}
				else
				{
					this.ai[0] += 1f;
					if (this.ai[0] > 5f)
					{
						this.ai[0] = 5f;
						if (base.velocity.Y == 0f && base.velocity.X != 0f)
						{
							base.velocity.X *= 0.97f;
							if ((double)base.velocity.X > -0.01 && (double)base.velocity.X < 0.01)
							{
								base.velocity.X = 0f;
								netUpdate = true;
							}
						}
						base.velocity.Y += 0.2f;
					}
					rotation += base.velocity.X * 0.1f;
				}
				if (type == 538)
				{
					if (localAI[1] == 0f)
					{
						localAI[1] = 1f;
						Main.PlaySound(4, (int)base.position.X, (int)base.position.Y, 7);
					}
					if (base.velocity.Y < 0f && this.ai[0] < 60f)
					{
						if (Main.rand.Next(4) == 0)
						{
							int num194 = Dust.NewDust(base.position, width, height, 180, 0f, 0f, 100);
							Main.dust[num194].position = base.Center;
							Main.dust[num194].scale += (float)Main.rand.Next(50) * 0.01f;
							Main.dust[num194].noGravity = true;
							Main.dust[num194].velocity.Y -= 2f;
						}
						if (Main.rand.Next(6) == 0)
						{
							int num195 = Dust.NewDust(base.position, width, height, 176, 0f, 0f, 100);
							Main.dust[num195].position = base.Center;
							Main.dust[num195].scale += 0.3f + (float)Main.rand.Next(50) * 0.01f;
							Main.dust[num195].noGravity = true;
							Main.dust[num195].velocity *= 0.1f;
						}
					}
				}
				if (type == 450)
				{
					if (this.ai[1] == 0f)
					{
						this.ai[1] = 1f;
						Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 13);
					}
					if (Main.rand.Next(2) == 0)
					{
						int num196 = Dust.NewDust(base.position, width, height, 228, 0f, 0f, 100);
						Main.dust[num196].position.X -= 2f;
						Main.dust[num196].position.Y += 2f;
						Main.dust[num196].scale += (float)Main.rand.Next(50) * 0.01f;
						Main.dust[num196].noGravity = true;
						Main.dust[num196].velocity.Y -= 2f;
					}
					if (Main.rand.Next(4) == 0)
					{
						int num197 = Dust.NewDust(base.position, width, height, 228, 0f, 0f, 100);
						Main.dust[num197].position.X -= 2f;
						Main.dust[num197].position.Y += 2f;
						Main.dust[num197].scale += 0.3f + (float)Main.rand.Next(50) * 0.01f;
						Main.dust[num197].noGravity = true;
						Main.dust[num197].velocity *= 0.1f;
					}
					if (++frameCounter >= 3)
					{
						frameCounter = 0;
						if (++frame >= 5)
						{
							frame = 0;
						}
					}
					if ((double)base.velocity.Y < 0.25 && (double)base.velocity.Y > 0.15)
					{
						base.velocity.X *= 0.8f;
					}
					rotation = (0f - base.velocity.X) * 0.05f;
				}
				if (type == 480)
				{
					alpha = 255;
					int num198 = Dust.NewDust(base.position, width, height, 75, 0f, 0f, 100);
					Main.dust[num198].position.X -= 2f;
					Main.dust[num198].position.Y += 2f;
					Main.dust[num198].scale += (float)Main.rand.Next(50) * 0.01f;
					Main.dust[num198].noGravity = true;
					Main.dust[num198].velocity.Y -= 2f;
					if (Main.rand.Next(2) == 0)
					{
						int num199 = Dust.NewDust(base.position, width, height, 75, 0f, 0f, 100);
						Main.dust[num199].position.X -= 2f;
						Main.dust[num199].position.Y += 2f;
						Main.dust[num199].scale += 0.3f + (float)Main.rand.Next(50) * 0.01f;
						Main.dust[num199].noGravity = true;
						Main.dust[num199].velocity *= 0.1f;
					}
				}
				if ((type >= 326 && type <= 328) || (type >= 400 && type <= 402))
				{
					if (wet)
					{
						Kill();
					}
					if (this.ai[1] == 0f && type >= 326 && type <= 328)
					{
						this.ai[1] = 1f;
						Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 13);
					}
					int num200 = Dust.NewDust(base.position, width, height, 6, 0f, 0f, 100);
					Main.dust[num200].position.X -= 2f;
					Main.dust[num200].position.Y += 2f;
					Main.dust[num200].scale += (float)Main.rand.Next(50) * 0.01f;
					Main.dust[num200].noGravity = true;
					Main.dust[num200].velocity.Y -= 2f;
					if (Main.rand.Next(2) == 0)
					{
						int num201 = Dust.NewDust(base.position, width, height, 6, 0f, 0f, 100);
						Main.dust[num201].position.X -= 2f;
						Main.dust[num201].position.Y += 2f;
						Main.dust[num201].scale += 0.3f + (float)Main.rand.Next(50) * 0.01f;
						Main.dust[num201].noGravity = true;
						Main.dust[num201].velocity *= 0.1f;
					}
					if ((double)base.velocity.Y < 0.25 && (double)base.velocity.Y > 0.15)
					{
						base.velocity.X *= 0.8f;
					}
					rotation = (0f - base.velocity.X) * 0.05f;
				}
				if (base.velocity.Y > 16f)
				{
					base.velocity.Y = 16f;
				}
			}
			else if (aiStyle == 15)
			{
				if (type == 25)
				{
					if (Main.rand.Next(15) == 0)
					{
						Dust.NewDust(base.position, width, height, 14, 0f, 0f, 150, default(Color), 1.3f);
					}
				}
				else if (type == 26)
				{
					int num202 = Dust.NewDust(base.position, width, height, 172, base.velocity.X * 0.4f, base.velocity.Y * 0.4f, 100, default(Color), 1.5f);
					Main.dust[num202].noGravity = true;
					Main.dust[num202].velocity.X /= 2f;
					Main.dust[num202].velocity.Y /= 2f;
				}
				else if (type == 35)
				{
					int num203 = Dust.NewDust(base.position, width, height, 6, base.velocity.X * 0.4f, base.velocity.Y * 0.4f, 100, default(Color), 3f);
					Main.dust[num203].noGravity = true;
					Main.dust[num203].velocity.X *= 2f;
					Main.dust[num203].velocity.Y *= 2f;
				}
				else if (type == 154)
				{
					int num204 = Dust.NewDust(base.position, width, height, 115, base.velocity.X * 0.4f, base.velocity.Y * 0.4f, 140, default(Color), 1.5f);
					Main.dust[num204].noGravity = true;
					Main.dust[num204].velocity *= 0.25f;
				}
				if (Main.player[owner].dead)
				{
					Kill();
					return;
				}
				Main.player[owner].itemAnimation = 10;
				Main.player[owner].itemTime = 10;
				if (base.position.X + (float)(width / 2) > Main.player[owner].position.X + (float)(Main.player[owner].width / 2))
				{
					Main.player[owner].ChangeDir(1);
					base.direction = 1;
				}
				else
				{
					Main.player[owner].ChangeDir(-1);
					base.direction = -1;
				}
				Vector2 mountedCenter2 = Main.player[owner].MountedCenter;
				Vector2 vector18 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num205 = mountedCenter2.X - vector18.X;
				float num206 = mountedCenter2.Y - vector18.Y;
				float num207 = (float)Math.Sqrt(num205 * num205 + num206 * num206);
				if (this.ai[0] == 0f)
				{
					float num208 = 160f;
					if (type == 63)
					{
						num208 *= 1.5f;
					}
					if (type == 247)
					{
						num208 *= 1.5f;
					}
					tileCollide = true;
					if (num207 > num208)
					{
						this.ai[0] = 1f;
						netUpdate = true;
					}
					else if (!Main.player[owner].channel)
					{
						if (base.velocity.Y < 0f)
						{
							base.velocity.Y *= 0.9f;
						}
						base.velocity.Y += 1f;
						base.velocity.X *= 0.9f;
					}
				}
				else if (this.ai[0] == 1f)
				{
					float num209 = 14f / Main.player[owner].meleeSpeed;
					float num210 = 0.9f / Main.player[owner].meleeSpeed;
					float num211 = 300f;
					if (type == 63)
					{
						num211 *= 1.5f;
						num209 *= 1.5f;
						num210 *= 1.5f;
					}
					if (type == 247)
					{
						num211 *= 1.5f;
						num209 = 15.9f;
						num210 *= 2f;
					}
					Math.Abs(num205);
					Math.Abs(num206);
					if (this.ai[1] == 1f)
					{
						tileCollide = false;
					}
					if (!Main.player[owner].channel || num207 > num211 || !tileCollide)
					{
						this.ai[1] = 1f;
						if (tileCollide)
						{
							netUpdate = true;
						}
						tileCollide = false;
						if (num207 < 20f)
						{
							Kill();
						}
					}
					if (!tileCollide)
					{
						num210 *= 2f;
					}
					int num212 = 60;
					if (type == 247)
					{
						num212 = 100;
					}
					if (num207 > (float)num212 || !tileCollide)
					{
						num207 = num209 / num207;
						num205 *= num207;
						num206 *= num207;
						new Vector2(base.velocity.X, base.velocity.Y);
						float num213 = num205 - base.velocity.X;
						float num214 = num206 - base.velocity.Y;
						float num215 = (float)Math.Sqrt(num213 * num213 + num214 * num214);
						num215 = num210 / num215;
						num213 *= num215;
						num214 *= num215;
						base.velocity.X *= 0.98f;
						base.velocity.Y *= 0.98f;
						base.velocity.X += num213;
						base.velocity.Y += num214;
					}
					else
					{
						if (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y) < 6f)
						{
							base.velocity.X *= 0.96f;
							base.velocity.Y += 0.2f;
						}
						if (Main.player[owner].velocity.X == 0f)
						{
							base.velocity.X *= 0.96f;
						}
					}
				}
				if (type == 247)
				{
					if (base.velocity.X < 0f)
					{
						rotation -= (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) * 0.01f;
					}
					else
					{
						rotation += (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) * 0.01f;
					}
					float num216 = base.position.X;
					float num217 = base.position.Y;
					float num218 = 600f;
					bool flag4 = false;
					if (owner == Main.myPlayer)
					{
						localAI[1] += 1f;
						if (localAI[1] > 20f)
						{
							localAI[1] = 20f;
							for (int num219 = 0; num219 < 200; num219++)
							{
								if (Main.npc[num219].CanBeChasedBy(this))
								{
									float num220 = Main.npc[num219].position.X + (float)(Main.npc[num219].width / 2);
									float num221 = Main.npc[num219].position.Y + (float)(Main.npc[num219].height / 2);
									float num222 = Math.Abs(base.position.X + (float)(width / 2) - num220) + Math.Abs(base.position.Y + (float)(height / 2) - num221);
									if (num222 < num218 && Collision.CanHit(base.position, width, height, Main.npc[num219].position, Main.npc[num219].width, Main.npc[num219].height))
									{
										num218 = num222;
										num216 = num220;
										num217 = num221;
										flag4 = true;
									}
								}
							}
						}
					}
					if (flag4)
					{
						localAI[1] = 0f;
						float num223 = 14f;
						vector18 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						num205 = num216 - vector18.X;
						num206 = num217 - vector18.Y;
						num207 = (float)Math.Sqrt(num205 * num205 + num206 * num206);
						num207 = num223 / num207;
						num205 *= num207;
						num206 *= num207;
						NewProjectile(vector18.X, vector18.Y, num205, num206, 248, (int)((double)damage / 1.5), knockBack / 2f, Main.myPlayer);
					}
				}
				else
				{
					rotation = (float)Math.Atan2(num206, num205) - base.velocity.X * 0.1f;
				}
			}
			else if (aiStyle == 16)
			{
				if (type == 108 || type == 164)
				{
					this.ai[0] += 1f;
					if (this.ai[0] > 3f)
					{
						Kill();
					}
				}
				if (type == 37 || type == 397 || type == 470 || type == 519)
				{
					try
					{
						int num224 = (int)(base.position.X / 16f) - 1;
						int num225 = (int)((base.position.X + (float)width) / 16f) + 2;
						int num226 = (int)(base.position.Y / 16f) - 1;
						int num227 = (int)((base.position.Y + (float)height) / 16f) + 2;
						if (num224 < 0)
						{
							num224 = 0;
						}
						if (num225 > Main.maxTilesX)
						{
							num225 = Main.maxTilesX;
						}
						if (num226 < 0)
						{
							num226 = 0;
						}
						if (num227 > Main.maxTilesY)
						{
							num227 = Main.maxTilesY;
						}
						Vector2 vector19 = default(Vector2);
						for (int num228 = num224; num228 < num225; num228++)
						{
							for (int num229 = num226; num229 < num227; num229++)
							{
								if (Main.tile[num228, num229] != null && Main.tile[num228, num229].nactive() && (Main.tileSolid[Main.tile[num228, num229].type] || (Main.tileSolidTop[Main.tile[num228, num229].type] && Main.tile[num228, num229].frameY == 0)))
								{
									vector19.X = num228 * 16;
									vector19.Y = num229 * 16;
									if (base.position.X + (float)width - 4f > vector19.X && base.position.X + 4f < vector19.X + 16f && base.position.Y + (float)height - 4f > vector19.Y && base.position.Y + 4f < vector19.Y + 16f)
									{
										base.velocity.X = 0f;
										base.velocity.Y = -0.2f;
									}
								}
							}
						}
					}
					catch
					{
					}
				}
				if (type == 519)
				{
					localAI[1] += 1f;
					float num230 = 180f - localAI[1];
					if (num230 < 0f)
					{
						num230 = 0f;
					}
					frameCounter++;
					if (num230 < 15f)
					{
						frameCounter++;
					}
					if ((float)frameCounter >= (num230 / 10f + 6f) / 2f)
					{
						frame++;
						frameCounter = 0;
						if (frame >= Main.projFrames[type])
						{
							frame = 0;
						}
					}
				}
				if (type == 102)
				{
					if (base.velocity.Y > 10f)
					{
						base.velocity.Y = 10f;
					}
					if (localAI[0] == 0f)
					{
						localAI[0] = 1f;
						Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 10);
					}
					frameCounter++;
					if (frameCounter > 3)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 1)
					{
						frame = 0;
					}
					if (base.velocity.Y == 0f)
					{
						base.position.X += width / 2;
						base.position.Y += height / 2;
						width = 128;
						height = 128;
						base.position.X -= width / 2;
						base.position.Y -= height / 2;
						damage = 40;
						knockBack = 8f;
						timeLeft = 3;
						netUpdate = true;
					}
				}
				if (type == 303 && timeLeft <= 3 && hostile)
				{
					base.position.X += width / 2;
					base.position.Y += height / 2;
					width = 128;
					height = 128;
					base.position.X -= width / 2;
					base.position.Y -= height / 2;
				}
				if (owner == Main.myPlayer && timeLeft <= 3)
				{
					tileCollide = false;
					this.ai[1] = 0f;
					alpha = 255;
					if (type == 28 || type == 37 || type == 75 || type == 516 || type == 519)
					{
						base.position.X += width / 2;
						base.position.Y += height / 2;
						width = 128;
						height = 128;
						base.position.X -= width / 2;
						base.position.Y -= height / 2;
						damage = 100;
						knockBack = 8f;
					}
					else if (type == 29 || type == 470 || type == 637)
					{
						base.position.X += width / 2;
						base.position.Y += height / 2;
						width = 250;
						height = 250;
						base.position.X -= width / 2;
						base.position.Y -= height / 2;
						damage = 250;
						knockBack = 10f;
					}
					else if (type == 30 || type == 397 || type == 517 || type == 588)
					{
						base.position.X += width / 2;
						base.position.Y += height / 2;
						width = 128;
						height = 128;
						base.position.X -= width / 2;
						base.position.Y -= height / 2;
						knockBack = 8f;
					}
					else if (type == 133 || type == 134 || type == 135 || type == 136 || type == 137 || type == 138 || type == 338 || type == 339)
					{
						base.position.X += width / 2;
						base.position.Y += height / 2;
						width = 128;
						height = 128;
						base.position.X -= width / 2;
						base.position.Y -= height / 2;
						knockBack = 8f;
					}
					else if (type == 139 || type == 140 || type == 141 || type == 142 || type == 143 || type == 144 || type == 340 || type == 341)
					{
						base.position.X += width / 2;
						base.position.Y += height / 2;
						width = 200;
						height = 200;
						base.position.X -= width / 2;
						base.position.Y -= height / 2;
						knockBack = 10f;
					}
				}
				else
				{
					if (type != 30 && type != 517 && type != 588 && type != 397 && type != 108 && type != 133 && type != 134 && type != 135 && type != 136 && type != 137 && type != 138 && type != 139 && type != 140 && type != 141 && type != 142 && type != 143 && type != 144 && type != 164 && type != 303 && type < 338 && type < 341)
					{
						damage = 0;
					}
					if (type == 338 || type == 339 || type == 340 || type == 341)
					{
						localAI[1] += 1f;
						if (localAI[1] > 6f)
						{
							alpha = 0;
						}
						else
						{
							alpha = (int)(255f - 42f * localAI[1]) + 100;
							if (alpha > 255)
							{
								alpha = 255;
							}
						}
						for (int num231 = 0; num231 < 2; num231++)
						{
							float num232 = 0f;
							float num233 = 0f;
							if (num231 == 1)
							{
								num232 = base.velocity.X * 0.5f;
								num233 = base.velocity.Y * 0.5f;
							}
							if (localAI[1] > 9f)
							{
								if (Main.rand.Next(2) == 0)
								{
									int num234 = Dust.NewDust(new Vector2(base.position.X + 3f + num232, base.position.Y + 3f + num233) - base.velocity * 0.5f, width - 8, height - 8, 6, 0f, 0f, 100);
									Main.dust[num234].scale *= 1.4f + (float)Main.rand.Next(10) * 0.1f;
									Main.dust[num234].velocity *= 0.2f;
									Main.dust[num234].noGravity = true;
								}
								if (Main.rand.Next(2) == 0)
								{
									int num235 = Dust.NewDust(new Vector2(base.position.X + 3f + num232, base.position.Y + 3f + num233) - base.velocity * 0.5f, width - 8, height - 8, 31, 0f, 0f, 100, default(Color), 0.5f);
									Main.dust[num235].fadeIn = 0.5f + (float)Main.rand.Next(5) * 0.1f;
									Main.dust[num235].velocity *= 0.05f;
								}
							}
						}
						float num236 = base.position.X;
						float num237 = base.position.Y;
						float num238 = 600f;
						bool flag5 = false;
						this.ai[0] += 1f;
						if (this.ai[0] > 30f)
						{
							this.ai[0] = 30f;
							for (int num239 = 0; num239 < 200; num239++)
							{
								if (Main.npc[num239].CanBeChasedBy(this))
								{
									float num240 = Main.npc[num239].position.X + (float)(Main.npc[num239].width / 2);
									float num241 = Main.npc[num239].position.Y + (float)(Main.npc[num239].height / 2);
									float num242 = Math.Abs(base.position.X + (float)(width / 2) - num240) + Math.Abs(base.position.Y + (float)(height / 2) - num241);
									if (num242 < num238 && Collision.CanHit(base.position, width, height, Main.npc[num239].position, Main.npc[num239].width, Main.npc[num239].height))
									{
										num238 = num242;
										num236 = num240;
										num237 = num241;
										flag5 = true;
									}
								}
							}
						}
						if (!flag5)
						{
							num236 = base.position.X + (float)(width / 2) + base.velocity.X * 100f;
							num237 = base.position.Y + (float)(height / 2) + base.velocity.Y * 100f;
						}
						float num243 = 16f;
						Vector2 vector20 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						float num244 = num236 - vector20.X;
						float num245 = num237 - vector20.Y;
						float num246 = (float)Math.Sqrt(num244 * num244 + num245 * num245);
						num246 = num243 / num246;
						num244 *= num246;
						num245 *= num246;
						base.velocity.X = (base.velocity.X * 11f + num244) / 12f;
						base.velocity.Y = (base.velocity.Y * 11f + num245) / 12f;
					}
					else if (type == 134 || type == 137 || type == 140 || type == 143 || type == 303)
					{
						if (Math.Abs(base.velocity.X) >= 8f || Math.Abs(base.velocity.Y) >= 8f)
						{
							for (int num247 = 0; num247 < 2; num247++)
							{
								float num248 = 0f;
								float num249 = 0f;
								if (num247 == 1)
								{
									num248 = base.velocity.X * 0.5f;
									num249 = base.velocity.Y * 0.5f;
								}
								int num250 = Dust.NewDust(new Vector2(base.position.X + 3f + num248, base.position.Y + 3f + num249) - base.velocity * 0.5f, width - 8, height - 8, 6, 0f, 0f, 100);
								Main.dust[num250].scale *= 2f + (float)Main.rand.Next(10) * 0.1f;
								Main.dust[num250].velocity *= 0.2f;
								Main.dust[num250].noGravity = true;
								num250 = Dust.NewDust(new Vector2(base.position.X + 3f + num248, base.position.Y + 3f + num249) - base.velocity * 0.5f, width - 8, height - 8, 31, 0f, 0f, 100, default(Color), 0.5f);
								Main.dust[num250].fadeIn = 1f + (float)Main.rand.Next(5) * 0.1f;
								Main.dust[num250].velocity *= 0.05f;
							}
						}
						if (Math.Abs(base.velocity.X) < 15f && Math.Abs(base.velocity.Y) < 15f)
						{
							base.velocity *= 1.1f;
						}
					}
					else if (type == 133 || type == 136 || type == 139 || type == 142)
					{
						int num251 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31, 0f, 0f, 100);
						Main.dust[num251].scale *= 1f + (float)Main.rand.Next(10) * 0.1f;
						Main.dust[num251].velocity *= 0.2f;
						Main.dust[num251].noGravity = true;
					}
					else if (type == 135 || type == 138 || type == 141 || type == 144)
					{
						if ((double)base.velocity.X > -0.2 && (double)base.velocity.X < 0.2 && (double)base.velocity.Y > -0.2 && (double)base.velocity.Y < 0.2)
						{
							alpha += 2;
							if (alpha > 200)
							{
								alpha = 200;
							}
						}
						else
						{
							alpha = 0;
							int num252 = Dust.NewDust(new Vector2(base.position.X + 3f, base.position.Y + 3f) - base.velocity * 0.5f, width - 8, height - 8, 31, 0f, 0f, 100);
							Main.dust[num252].scale *= 1.6f + (float)Main.rand.Next(5) * 0.1f;
							Main.dust[num252].velocity *= 0.05f;
							Main.dust[num252].noGravity = true;
						}
					}
					else if (type != 30 && type != 517 && type != 397 && type != 519 && type != 588 && Main.rand.Next(2) == 0)
					{
						int num253 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31, 0f, 0f, 100);
						Main.dust[num253].scale = 0.1f + (float)Main.rand.Next(5) * 0.1f;
						Main.dust[num253].fadeIn = 1.5f + (float)Main.rand.Next(5) * 0.1f;
						Main.dust[num253].noGravity = true;
						Main.dust[num253].position = base.Center + new Vector2(0f, -height / 2).RotatedBy(rotation) * 1.1f;
						Main.rand.Next(2);
						num253 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100);
						Main.dust[num253].scale = 1f + (float)Main.rand.Next(5) * 0.1f;
						Main.dust[num253].noGravity = true;
						Main.dust[num253].position = base.Center + new Vector2(0f, -height / 2 - 6).RotatedBy(rotation) * 1.1f;
					}
				}
				this.ai[0] += 1f;
				if (type == 338 || type == 339 || type == 340 || type == 341)
				{
					if (base.velocity.X < 0f)
					{
						spriteDirection = -1;
						rotation = (float)Math.Atan2(0f - base.velocity.Y, 0f - base.velocity.X) - 1.57f;
					}
					else
					{
						spriteDirection = 1;
						rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
					}
				}
				else if (type == 134 || type == 137 || type == 140 || type == 143 || type == 303)
				{
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
				}
				else if (type == 135 || type == 138 || type == 141 || type == 144)
				{
					base.velocity.Y += 0.2f;
					base.velocity *= 0.97f;
					if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
					{
						base.velocity.X = 0f;
					}
					if ((double)base.velocity.Y > -0.1 && (double)base.velocity.Y < 0.1)
					{
						base.velocity.Y = 0f;
					}
				}
				else if (type == 133 || type == 136 || type == 139 || type == 142)
				{
					if (this.ai[0] > 15f)
					{
						if (base.velocity.Y == 0f)
						{
							base.velocity.X *= 0.95f;
						}
						base.velocity.Y += 0.2f;
					}
				}
				else if (((type == 30 || type == 397 || type == 517 || type == 588) && this.ai[0] > 10f) || (type != 30 && type != 397 && type != 517 && type != 588 && this.ai[0] > 5f))
				{
					this.ai[0] = 10f;
					if (base.velocity.Y == 0f && base.velocity.X != 0f)
					{
						base.velocity.X *= 0.97f;
						if (type == 29 || type == 470 || type == 637)
						{
							base.velocity.X *= 0.99f;
						}
						if ((double)base.velocity.X > -0.01 && (double)base.velocity.X < 0.01)
						{
							base.velocity.X = 0f;
							netUpdate = true;
						}
					}
					base.velocity.Y += 0.2f;
				}
				if (type == 519)
				{
					rotation += base.velocity.X * 0.06f;
				}
				else if (type != 134 && type != 137 && type != 140 && type != 143 && type != 303 && (type < 338 || type > 341))
				{
					rotation += base.velocity.X * 0.1f;
				}
			}
			else if (aiStyle == 17)
			{
				if (base.velocity.Y == 0f)
				{
					base.velocity.X *= 0.98f;
				}
				rotation += base.velocity.X * 0.1f;
				base.velocity.Y += 0.2f;
				if (owner != Main.myPlayer)
				{
					return;
				}
				int num254 = (int)((base.position.X + (float)(width / 2)) / 16f);
				int num255 = (int)((base.position.Y + (float)height - 4f) / 16f);
				if (Main.tile[num254, num255] == null || Main.tile[num254, num255].active())
				{
					return;
				}
				int num256 = 0;
				if (type >= 201 && type <= 205)
				{
					num256 = type - 200;
				}
				if (type >= 527 && type <= 531)
				{
					num256 = type - 527 + 6;
				}
				WorldGen.PlaceTile(num254, num255, 85, false, false, owner, num256);
				if (Main.tile[num254, num255].active())
				{
					if (Main.netMode != 0)
					{
						NetMessage.SendData(17, -1, -1, "", 1, num254, num255, 85f, num256);
					}
					int num257 = Sign.ReadSign(num254, num255);
					if (num257 >= 0)
					{
						Sign.TextSign(num257, miscText);
					}
					Kill();
				}
			}
			else if (aiStyle == 18)
			{
				if (this.ai[1] == 0f && type == 44)
				{
					this.ai[1] = 1f;
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 8);
				}
				if (type == 263 || type == 274)
				{
					if (type == 274 && base.velocity.X < 0f)
					{
						spriteDirection = -1;
					}
					rotation += (float)base.direction * 0.05f;
					rotation += (float)base.direction * 0.5f * ((float)timeLeft / 180f);
					if (type == 274)
					{
						base.velocity *= 0.96f;
					}
					else
					{
						base.velocity *= 0.95f;
					}
					return;
				}
				rotation += (float)base.direction * 0.8f;
				this.ai[0] += 1f;
				if (!(this.ai[0] < 30f))
				{
					if (this.ai[0] < 100f)
					{
						base.velocity *= 1.06f;
					}
					else
					{
						this.ai[0] = 200f;
					}
				}
				for (int num258 = 0; num258 < 2; num258++)
				{
					int num259 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 27, 0f, 0f, 100);
					Main.dust[num259].noGravity = true;
				}
			}
			else if (aiStyle == 19)
			{
				Vector2 vector21 = Main.player[owner].RotatedRelativePoint(Main.player[owner].MountedCenter);
				base.direction = Main.player[owner].direction;
				Main.player[owner].heldProj = whoAmI;
				Main.player[owner].itemTime = Main.player[owner].itemAnimation;
				base.position.X = vector21.X - (float)(width / 2);
				base.position.Y = vector21.Y - (float)(height / 2);
				if (!Main.player[owner].frozen)
				{
					if (type == 46)
					{
						if (this.ai[0] == 0f)
						{
							this.ai[0] = 3f;
							netUpdate = true;
						}
						if (Main.player[owner].itemAnimation < Main.player[owner].itemAnimationMax / 3)
						{
							this.ai[0] -= 1.6f;
						}
						else
						{
							this.ai[0] += 1.4f;
						}
					}
					else if (type == 105)
					{
						if (this.ai[0] == 0f)
						{
							this.ai[0] = 3f;
							netUpdate = true;
						}
						if (Main.player[owner].itemAnimation < Main.player[owner].itemAnimationMax / 3)
						{
							this.ai[0] -= 2.4f;
						}
						else
						{
							this.ai[0] += 2.1f;
						}
					}
					else if (type == 367)
					{
						spriteDirection = -base.direction;
						if (this.ai[0] == 0f)
						{
							this.ai[0] = 3f;
							netUpdate = true;
						}
						if (Main.player[owner].itemAnimation < Main.player[owner].itemAnimationMax / 3)
						{
							this.ai[0] -= 1.6f;
						}
						else
						{
							this.ai[0] += 1.5f;
						}
					}
					else if (type == 368)
					{
						spriteDirection = -base.direction;
						if (this.ai[0] == 0f)
						{
							this.ai[0] = 3f;
							netUpdate = true;
						}
						if (Main.player[owner].itemAnimation < Main.player[owner].itemAnimationMax / 3)
						{
							this.ai[0] -= 1.5f;
						}
						else
						{
							this.ai[0] += 1.4f;
						}
					}
					else if (type == 222)
					{
						if (this.ai[0] == 0f)
						{
							this.ai[0] = 3f;
							netUpdate = true;
						}
						if (Main.player[owner].itemAnimation < Main.player[owner].itemAnimationMax / 3)
						{
							this.ai[0] -= 2.4f;
							if (localAI[0] == 0f && Main.myPlayer == owner)
							{
								localAI[0] = 1f;
								NewProjectile(base.Center.X + base.velocity.X * this.ai[0], base.Center.Y + base.velocity.Y * this.ai[0], base.velocity.X, base.velocity.Y, 228, damage, knockBack, owner);
							}
						}
						else
						{
							this.ai[0] += 2.1f;
						}
					}
					else if (type == 342)
					{
						if (this.ai[0] == 0f)
						{
							this.ai[0] = 3f;
							netUpdate = true;
						}
						if (Main.player[owner].itemAnimation < Main.player[owner].itemAnimationMax / 3)
						{
							this.ai[0] -= 2.4f;
							if (localAI[0] == 0f && Main.myPlayer == owner)
							{
								localAI[0] = 1f;
								if (Collision.CanHit(Main.player[owner].position, Main.player[owner].width, Main.player[owner].height, new Vector2(base.Center.X + base.velocity.X * this.ai[0], base.Center.Y + base.velocity.Y * this.ai[0]), width, height))
								{
									NewProjectile(base.Center.X + base.velocity.X * this.ai[0], base.Center.Y + base.velocity.Y * this.ai[0], base.velocity.X * 2.4f, base.velocity.Y * 2.4f, 343, (int)((double)damage * 0.8), knockBack * 0.85f, owner);
								}
							}
						}
						else
						{
							this.ai[0] += 2.1f;
						}
					}
					else if (type == 47)
					{
						if (this.ai[0] == 0f)
						{
							this.ai[0] = 4f;
							netUpdate = true;
						}
						if (Main.player[owner].itemAnimation < Main.player[owner].itemAnimationMax / 3)
						{
							this.ai[0] -= 1.2f;
						}
						else
						{
							this.ai[0] += 0.9f;
						}
					}
					else if (type == 153)
					{
						spriteDirection = -base.direction;
						if (this.ai[0] == 0f)
						{
							this.ai[0] = 4f;
							netUpdate = true;
						}
						if (Main.player[owner].itemAnimation < Main.player[owner].itemAnimationMax / 3)
						{
							this.ai[0] -= 1.5f;
						}
						else
						{
							this.ai[0] += 1.3f;
						}
					}
					else if (type == 49)
					{
						if (this.ai[0] == 0f)
						{
							this.ai[0] = 4f;
							netUpdate = true;
						}
						if (Main.player[owner].itemAnimation < Main.player[owner].itemAnimationMax / 3)
						{
							this.ai[0] -= 1.1f;
						}
						else
						{
							this.ai[0] += 0.85f;
						}
					}
					else if (type == 64 || type == 215)
					{
						spriteDirection = -base.direction;
						if (this.ai[0] == 0f)
						{
							this.ai[0] = 3f;
							netUpdate = true;
						}
						if (Main.player[owner].itemAnimation < Main.player[owner].itemAnimationMax / 3)
						{
							this.ai[0] -= 1.9f;
						}
						else
						{
							this.ai[0] += 1.7f;
						}
					}
					else if (type == 66 || type == 97 || type == 212 || type == 218)
					{
						spriteDirection = -base.direction;
						if (this.ai[0] == 0f)
						{
							this.ai[0] = 3f;
							netUpdate = true;
						}
						if (Main.player[owner].itemAnimation < Main.player[owner].itemAnimationMax / 3)
						{
							this.ai[0] -= 2.1f;
						}
						else
						{
							this.ai[0] += 1.9f;
						}
					}
					else if (type == 130)
					{
						spriteDirection = -base.direction;
						if (this.ai[0] == 0f)
						{
							this.ai[0] = 3f;
							netUpdate = true;
						}
						if (Main.player[owner].itemAnimation < Main.player[owner].itemAnimationMax / 3)
						{
							this.ai[0] -= 1.3f;
						}
						else
						{
							this.ai[0] += 1f;
						}
					}
				}
				base.position += base.velocity * this.ai[0];
				if (type == 130)
				{
					if (this.ai[1] == 0f || this.ai[1] == 4f || this.ai[1] == 8f || this.ai[1] == 12f || this.ai[1] == 16f || this.ai[1] == 20f || this.ai[1] == 24f)
					{
						NewProjectile(base.position.X + (float)(width / 2), base.position.Y + (float)(height / 2), base.velocity.X, base.velocity.Y, 131, damage / 3, 0f, owner);
					}
					this.ai[1] += 1f;
				}
				if (Main.player[owner].itemAnimation == 0)
				{
					Kill();
				}
				rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 2.355f;
				if (spriteDirection == -1)
				{
					rotation -= 1.57f;
				}
				if (type == 46)
				{
					if (Main.rand.Next(5) == 0)
					{
						Dust.NewDust(base.position, width, height, 14, 0f, 0f, 150, default(Color), 1.4f);
					}
					int num260 = Dust.NewDust(base.position, width, height, 27, base.velocity.X * 0.2f + (float)(base.direction * 3), base.velocity.Y * 0.2f, 100, default(Color), 1.2f);
					Main.dust[num260].noGravity = true;
					Main.dust[num260].velocity.X /= 2f;
					Main.dust[num260].velocity.Y /= 2f;
					num260 = Dust.NewDust(base.position - base.velocity * 2f, width, height, 27, 0f, 0f, 150, default(Color), 1.4f);
					Main.dust[num260].velocity.X /= 5f;
					Main.dust[num260].velocity.Y /= 5f;
				}
				else if (type == 105)
				{
					if (Main.rand.Next(3) == 0)
					{
						int num261 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 57, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 200, default(Color), 1.2f);
						Main.dust[num261].velocity += base.velocity * 0.3f;
						Main.dust[num261].velocity *= 0.2f;
					}
					if (Main.rand.Next(4) == 0)
					{
						int num262 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 43, 0f, 0f, 254, default(Color), 0.3f);
						Main.dust[num262].velocity += base.velocity * 0.5f;
						Main.dust[num262].velocity *= 0.5f;
					}
				}
				else if (type == 153)
				{
					int num263 = Dust.NewDust(base.position - base.velocity * 3f, width, height, 115, base.velocity.X * 0.4f, base.velocity.Y * 0.4f, 140);
					Main.dust[num263].noGravity = true;
					Main.dust[num263].fadeIn = 1.25f;
					Main.dust[num263].velocity *= 0.25f;
				}
			}
			else if (aiStyle == 20)
			{
				if (type == 252)
				{
					frameCounter++;
					if (frameCounter >= 4)
					{
						frameCounter = 0;
						frame++;
					}
					if (frame > 3)
					{
						frame = 0;
					}
				}
				if (type == 509)
				{
					frameCounter++;
					if (frameCounter >= 2)
					{
						frameCounter = 0;
						frame++;
					}
					if (frame > 1)
					{
						frame = 0;
					}
				}
				if (soundDelay <= 0)
				{
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 22);
					soundDelay = 30;
				}
				Vector2 vector22 = Main.player[owner].RotatedRelativePoint(Main.player[owner].MountedCenter);
				if (Main.myPlayer == owner)
				{
					if (Main.player[owner].channel)
					{
						float num264 = Main.player[owner].inventory[Main.player[owner].selectedItem].shootSpeed * scale;
						Vector2 vector23 = vector22;
						float num265 = (float)Main.mouseX + Main.screenPosition.X - vector23.X;
						float num266 = (float)Main.mouseY + Main.screenPosition.Y - vector23.Y;
						if (Main.player[owner].gravDir == -1f)
						{
							num266 = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector23.Y;
						}
						float num267 = (float)Math.Sqrt(num265 * num265 + num266 * num266);
						num267 = (float)Math.Sqrt(num265 * num265 + num266 * num266);
						num267 = num264 / num267;
						num265 *= num267;
						num266 *= num267;
						if (num265 != base.velocity.X || num266 != base.velocity.Y)
						{
							netUpdate = true;
						}
						base.velocity.X = num265;
						base.velocity.Y = num266;
					}
					else
					{
						Kill();
					}
				}
				if (base.velocity.X > 0f)
				{
					Main.player[owner].ChangeDir(1);
				}
				else if (base.velocity.X < 0f)
				{
					Main.player[owner].ChangeDir(-1);
				}
				spriteDirection = base.direction;
				Main.player[owner].ChangeDir(base.direction);
				Main.player[owner].heldProj = whoAmI;
				Main.player[owner].itemTime = 2;
				Main.player[owner].itemAnimation = 2;
				base.position.X = vector22.X - (float)(width / 2);
				base.position.Y = vector22.Y - (float)(height / 2);
				rotation = (float)(Math.Atan2(base.velocity.Y, base.velocity.X) + 1.5700000524520874);
				if (Main.player[owner].direction == 1)
				{
					Main.player[owner].itemRotation = (float)Math.Atan2(base.velocity.Y * (float)base.direction, base.velocity.X * (float)base.direction);
				}
				else
				{
					Main.player[owner].itemRotation = (float)Math.Atan2(base.velocity.Y * (float)base.direction, base.velocity.X * (float)base.direction);
				}
				base.velocity.X *= 1f + (float)Main.rand.Next(-3, 4) * 0.01f;
				if (Main.rand.Next(6) == 0)
				{
					int num268 = Dust.NewDust(base.position + base.velocity * Main.rand.Next(6, 10) * 0.1f, width, height, 31, 0f, 0f, 80, default(Color), 1.4f);
					Main.dust[num268].position.X -= 4f;
					Main.dust[num268].noGravity = true;
					Main.dust[num268].velocity *= 0.2f;
					Main.dust[num268].velocity.Y = (float)(-Main.rand.Next(7, 13)) * 0.15f;
				}
			}
			else if (aiStyle == 21)
			{
				rotation = base.velocity.X * 0.1f;
				spriteDirection = -base.direction;
				if (Main.rand.Next(3) == 0)
				{
					int num269 = Dust.NewDust(base.position, width, height, 27, 0f, 0f, 80);
					Main.dust[num269].noGravity = true;
					Main.dust[num269].velocity *= 0.2f;
				}
				if (this.ai[1] == 1f)
				{
					this.ai[1] = 0f;
					Main.harpNote = this.ai[0];
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 26);
				}
			}
			else if (aiStyle == 22)
			{
				if (base.velocity.X == 0f && base.velocity.Y == 0f)
				{
					alpha = 255;
				}
				if (this.ai[1] < 0f)
				{
					if (base.velocity.X > 0f)
					{
						rotation += 0.3f;
					}
					else
					{
						rotation -= 0.3f;
					}
					int num270 = (int)(base.position.X / 16f) - 1;
					int num271 = (int)((base.position.X + (float)width) / 16f) + 2;
					int num272 = (int)(base.position.Y / 16f) - 1;
					int num273 = (int)((base.position.Y + (float)height) / 16f) + 2;
					if (num270 < 0)
					{
						num270 = 0;
					}
					if (num271 > Main.maxTilesX)
					{
						num271 = Main.maxTilesX;
					}
					if (num272 < 0)
					{
						num272 = 0;
					}
					if (num273 > Main.maxTilesY)
					{
						num273 = Main.maxTilesY;
					}
					int num274 = (int)base.position.X + 4;
					int num275 = (int)base.position.Y + 4;
					Vector2 vector24 = default(Vector2);
					for (int num276 = num270; num276 < num271; num276++)
					{
						for (int num277 = num272; num277 < num273; num277++)
						{
							if (Main.tile[num276, num277] != null && Main.tile[num276, num277].active() && Main.tile[num276, num277].type != 127 && Main.tileSolid[Main.tile[num276, num277].type] && !Main.tileSolidTop[Main.tile[num276, num277].type])
							{
								vector24.X = num276 * 16;
								vector24.Y = num277 * 16;
								if ((float)(num274 + 8) > vector24.X && (float)num274 < vector24.X + 16f && (float)(num275 + 8) > vector24.Y && (float)num275 < vector24.Y + 16f)
								{
									Kill();
								}
							}
						}
					}
					int num278 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 67);
					Main.dust[num278].noGravity = true;
					Main.dust[num278].velocity *= 0.3f;
					return;
				}
				if (this.ai[0] < 0f)
				{
					if (this.ai[0] == -1f)
					{
						for (int num279 = 0; num279 < 10; num279++)
						{
							int num280 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 67, 0f, 0f, 0, default(Color), 1.1f);
							Main.dust[num280].noGravity = true;
							Main.dust[num280].velocity *= 1.3f;
						}
					}
					else if (Main.rand.Next(30) == 0)
					{
						int num281 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 67, 0f, 0f, 100);
						Main.dust[num281].velocity *= 0.2f;
					}
					int num282 = (int)base.position.X / 16;
					int num283 = (int)base.position.Y / 16;
					if (Main.tile[num282, num283] == null || !Main.tile[num282, num283].active())
					{
						Kill();
					}
					this.ai[0] -= 1f;
					if (this.ai[0] <= -900f && (Main.myPlayer == owner || Main.netMode == 2) && Main.tile[num282, num283].active() && Main.tile[num282, num283].type == 127)
					{
						WorldGen.KillTile(num282, num283);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(17, -1, -1, "", 0, num282, num283);
						}
						Kill();
					}
					return;
				}
				int num284 = (int)(base.position.X / 16f) - 1;
				int num285 = (int)((base.position.X + (float)width) / 16f) + 2;
				int num286 = (int)(base.position.Y / 16f) - 1;
				int num287 = (int)((base.position.Y + (float)height) / 16f) + 2;
				if (num284 < 0)
				{
					num284 = 0;
				}
				if (num285 > Main.maxTilesX)
				{
					num285 = Main.maxTilesX;
				}
				if (num286 < 0)
				{
					num286 = 0;
				}
				if (num287 > Main.maxTilesY)
				{
					num287 = Main.maxTilesY;
				}
				int num288 = (int)base.position.X + 4;
				int num289 = (int)base.position.Y + 4;
				Vector2 vector25 = default(Vector2);
				for (int num290 = num284; num290 < num285; num290++)
				{
					for (int num291 = num286; num291 < num287; num291++)
					{
						if (Main.tile[num290, num291] != null && Main.tile[num290, num291].nactive() && Main.tile[num290, num291].type != 127 && Main.tileSolid[Main.tile[num290, num291].type] && !Main.tileSolidTop[Main.tile[num290, num291].type])
						{
							vector25.X = num290 * 16;
							vector25.Y = num291 * 16;
							if ((float)(num288 + 8) > vector25.X && (float)num288 < vector25.X + 16f && (float)(num289 + 8) > vector25.Y && (float)num289 < vector25.Y + 16f)
							{
								Kill();
							}
						}
					}
				}
				if (lavaWet)
				{
					Kill();
				}
				if (!active)
				{
					return;
				}
				int num292 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 67);
				Main.dust[num292].noGravity = true;
				Main.dust[num292].velocity *= 0.3f;
				int num293 = (int)this.ai[0];
				int num294 = (int)this.ai[1];
				if (WorldGen.SolidTile(num293, num294))
				{
					if (Math.Abs(base.velocity.X) > Math.Abs(base.velocity.Y))
					{
						if (base.Center.Y < (float)(num294 * 16 + 8) && !WorldGen.SolidTile(num293, num294 - 1))
						{
							num294--;
						}
						else if (!WorldGen.SolidTile(num293, num294 + 1))
						{
							num294++;
						}
						else if (!WorldGen.SolidTile(num293, num294 - 1))
						{
							num294--;
						}
						else if (base.Center.X < (float)(num293 * 16 + 8) && !WorldGen.SolidTile(num293 - 1, num294))
						{
							num293--;
						}
						else if (!WorldGen.SolidTile(num293 + 1, num294))
						{
							num293++;
						}
						else if (!WorldGen.SolidTile(num293 - 1, num294))
						{
							num293--;
						}
					}
					else if (base.Center.X < (float)(num293 * 16 + 8) && !WorldGen.SolidTile(num293 - 1, num294))
					{
						num293--;
					}
					else if (!WorldGen.SolidTile(num293 + 1, num294))
					{
						num293++;
					}
					else if (!WorldGen.SolidTile(num293 - 1, num294))
					{
						num293--;
					}
					else if (base.Center.Y < (float)(num294 * 16 + 8) && !WorldGen.SolidTile(num293, num294 - 1))
					{
						num294--;
					}
					else if (!WorldGen.SolidTile(num293, num294 + 1))
					{
						num294++;
					}
					else if (!WorldGen.SolidTile(num293, num294 - 1))
					{
						num294--;
					}
				}
				if (base.velocity.X > 0f)
				{
					rotation += 0.3f;
				}
				else
				{
					rotation -= 0.3f;
				}
				if (Main.myPlayer != owner)
				{
					return;
				}
				int num295 = (int)((base.position.X + (float)(width / 2)) / 16f);
				int num296 = (int)((base.position.Y + (float)(height / 2)) / 16f);
				bool flag6 = false;
				if (num295 == num293 && num296 == num294)
				{
					flag6 = true;
				}
				if (((base.velocity.X <= 0f && num295 <= num293) || (base.velocity.X >= 0f && num295 >= num293)) && ((base.velocity.Y <= 0f && num296 <= num294) || (base.velocity.Y >= 0f && num296 >= num294)))
				{
					flag6 = true;
				}
				if (!flag6)
				{
					return;
				}
				if (WorldGen.PlaceTile(num293, num294, 127, false, false, owner))
				{
					if (Main.netMode == 1)
					{
						NetMessage.SendData(17, -1, -1, "", 1, (int)this.ai[0], (int)this.ai[1], 127f);
					}
					damage = 0;
					this.ai[0] = -1f;
					base.velocity *= 0f;
					alpha = 255;
					base.position.X = num293 * 16;
					base.position.Y = num294 * 16;
					netUpdate = true;
				}
				else
				{
					this.ai[1] = -1f;
				}
			}
			else if (aiStyle == 23)
			{
				if (type == 188 && this.ai[0] < 8f)
				{
					this.ai[0] = 8f;
				}
				if (timeLeft > 60)
				{
					timeLeft = 60;
				}
				if (this.ai[0] > 7f)
				{
					float num297 = 1f;
					if (this.ai[0] == 8f)
					{
						num297 = 0.25f;
					}
					else if (this.ai[0] == 9f)
					{
						num297 = 0.5f;
					}
					else if (this.ai[0] == 10f)
					{
						num297 = 0.75f;
					}
					this.ai[0] += 1f;
					int num298 = 6;
					if (type == 101)
					{
						num298 = 75;
					}
					if (num298 == 6 || Main.rand.Next(2) == 0)
					{
						for (int num299 = 0; num299 < 1; num299++)
						{
							int num300 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, num298, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100);
							if (Main.rand.Next(3) != 0 || (num298 == 75 && Main.rand.Next(3) == 0))
							{
								Main.dust[num300].noGravity = true;
								Main.dust[num300].scale *= 3f;
								Main.dust[num300].velocity.X *= 2f;
								Main.dust[num300].velocity.Y *= 2f;
							}
							if (type == 188)
							{
								Main.dust[num300].scale *= 1.25f;
							}
							else
							{
								Main.dust[num300].scale *= 1.5f;
							}
							Main.dust[num300].velocity.X *= 1.2f;
							Main.dust[num300].velocity.Y *= 1.2f;
							Main.dust[num300].scale *= num297;
							if (num298 == 75)
							{
								Main.dust[num300].velocity += base.velocity;
								if (!Main.dust[num300].noGravity)
								{
									Main.dust[num300].velocity *= 0.5f;
								}
							}
						}
					}
				}
				else
				{
					this.ai[0] += 1f;
				}
				rotation += 0.3f * (float)base.direction;
			}
			else if (aiStyle == 24)
			{
				light = scale * 0.5f;
				rotation += base.velocity.X * 0.2f;
				this.ai[1] += 1f;
				if (type == 94)
				{
					if (Main.rand.Next(4) == 0)
					{
						int num301 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 70);
						Main.dust[num301].noGravity = true;
						Main.dust[num301].velocity *= 0.5f;
						Main.dust[num301].scale *= 0.9f;
					}
					base.velocity *= 0.985f;
					if (this.ai[1] > 130f)
					{
						scale -= 0.05f;
						if ((double)scale <= 0.2)
						{
							scale = 0.2f;
							Kill();
						}
					}
					return;
				}
				base.velocity *= 0.96f;
				if (this.ai[1] > 15f)
				{
					scale -= 0.05f;
					if ((double)scale <= 0.2)
					{
						scale = 0.2f;
						Kill();
					}
				}
			}
			else if (aiStyle == 25)
			{
				if (this.ai[0] != 0f && base.velocity.Y <= 0f && base.velocity.X == 0f)
				{
					float num302 = 0.5f;
					int i2 = (int)((base.position.X - 8f) / 16f);
					int num303 = (int)(base.position.Y / 16f);
					bool flag7 = false;
					bool flag8 = false;
					if (WorldGen.SolidTile(i2, num303) || WorldGen.SolidTile(i2, num303 + 1))
					{
						flag7 = true;
					}
					i2 = (int)((base.position.X + (float)width + 8f) / 16f);
					if (WorldGen.SolidTile(i2, num303) || WorldGen.SolidTile(i2, num303 + 1))
					{
						flag8 = true;
					}
					if (flag7)
					{
						base.velocity.X = num302;
					}
					else if (flag8)
					{
						base.velocity.X = 0f - num302;
					}
					else
					{
						i2 = (int)((base.position.X - 8f - 16f) / 16f);
						num303 = (int)(base.position.Y / 16f);
						flag7 = false;
						flag8 = false;
						if (WorldGen.SolidTile(i2, num303) || WorldGen.SolidTile(i2, num303 + 1))
						{
							flag7 = true;
						}
						i2 = (int)((base.position.X + (float)width + 8f + 16f) / 16f);
						if (WorldGen.SolidTile(i2, num303) || WorldGen.SolidTile(i2, num303 + 1))
						{
							flag8 = true;
						}
						if (flag7)
						{
							base.velocity.X = num302;
						}
						else if (flag8)
						{
							base.velocity.X = 0f - num302;
						}
						else
						{
							i2 = (int)((base.position.X + 4f) / 16f);
							num303 = (int)((base.position.Y + (float)height + 8f) / 16f);
							if (WorldGen.SolidTile(i2, num303) || WorldGen.SolidTile(i2, num303 + 1))
							{
								flag7 = true;
							}
							if (!flag7)
							{
								base.velocity.X = num302;
							}
							else
							{
								base.velocity.X = 0f - num302;
							}
						}
					}
				}
				rotation += base.velocity.X * 0.06f;
				this.ai[0] = 1f;
				if (base.velocity.Y > 16f)
				{
					base.velocity.Y = 16f;
				}
				if (base.velocity.Y <= 6f)
				{
					if (base.velocity.X > 0f && base.velocity.X < 7f)
					{
						base.velocity.X += 0.05f;
					}
					if (base.velocity.X < 0f && base.velocity.X > -7f)
					{
						base.velocity.X -= 0.05f;
					}
				}
				base.velocity.Y += 0.3f;
			}
			else if (aiStyle == 26)
			{
				AI_026();
			}
			else if (aiStyle == 27)
			{
				if (type == 115)
				{
					this.ai[0] += 1f;
					if (this.ai[0] < 30f)
					{
						base.velocity *= 1.125f;
					}
				}
				if (type == 115 && localAI[1] < 5f)
				{
					localAI[1] = 5f;
					for (int num304 = 5; num304 < 25; num304++)
					{
						float num305 = base.velocity.X * (30f / (float)num304);
						float num306 = base.velocity.Y * (30f / (float)num304);
						num305 *= 80f;
						num306 *= 80f;
						int num307 = Dust.NewDust(new Vector2(base.position.X - num305, base.position.Y - num306), 8, 8, 27, oldVelocity.X, oldVelocity.Y, 100, default(Color), 0.9f);
						Main.dust[num307].velocity *= 0.25f;
						Main.dust[num307].velocity -= base.velocity * 5f;
					}
				}
				if (localAI[1] > 7f && type == 173)
				{
					int num308;
					switch (Main.rand.Next(3))
					{
					case 0:
						num308 = 15;
						break;
					case 1:
						num308 = 57;
						break;
					default:
						num308 = 58;
						break;
					}
					int num309 = Dust.NewDust(new Vector2(base.position.X - base.velocity.X * 4f + 2f, base.position.Y + 2f - base.velocity.Y * 4f), 8, 8, num308, 0f, 0f, 100, default(Color), 1.25f);
					Main.dust[num309].velocity *= 0.1f;
				}
				if (localAI[1] > 7f && type == 132)
				{
					int num310 = Dust.NewDust(new Vector2(base.position.X - base.velocity.X * 4f + 2f, base.position.Y + 2f - base.velocity.Y * 4f), 8, 8, 107, oldVelocity.X, oldVelocity.Y, 100, default(Color), 1.25f);
					Main.dust[num310].velocity *= -0.25f;
					num310 = Dust.NewDust(new Vector2(base.position.X - base.velocity.X * 4f + 2f, base.position.Y + 2f - base.velocity.Y * 4f), 8, 8, 107, oldVelocity.X, oldVelocity.Y, 100, default(Color), 1.25f);
					Main.dust[num310].velocity *= -0.25f;
					Main.dust[num310].position -= base.velocity * 0.5f;
				}
				if (localAI[1] < 15f)
				{
					localAI[1] += 1f;
				}
				else
				{
					if (type == 114 || type == 115)
					{
						int num311 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + 4f), 8, 8, 27, oldVelocity.X, oldVelocity.Y, 100, default(Color), 0.6f);
						Main.dust[num311].velocity *= -0.25f;
					}
					else if (type == 116)
					{
						int num312 = Dust.NewDust(new Vector2(base.position.X - base.velocity.X * 5f + 2f, base.position.Y + 2f - base.velocity.Y * 5f), 8, 8, 64, oldVelocity.X, oldVelocity.Y, 100, default(Color), 1.5f);
						Main.dust[num312].velocity *= -0.25f;
						Main.dust[num312].noGravity = true;
					}
					if (localAI[0] == 0f)
					{
						scale -= 0.02f;
						alpha += 30;
						if (alpha >= 250)
						{
							alpha = 255;
							localAI[0] = 1f;
						}
					}
					else if (localAI[0] == 1f)
					{
						scale += 0.02f;
						alpha -= 30;
						if (alpha <= 0)
						{
							alpha = 0;
							localAI[0] = 0f;
						}
					}
				}
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					if (type == 132)
					{
						Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 60);
					}
					else
					{
						Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 8);
					}
				}
				if (type == 157)
				{
					rotation += (float)base.direction * 0.4f;
					spriteDirection = base.direction;
				}
				else
				{
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 0.785f;
				}
				if (base.velocity.Y > 16f)
				{
					base.velocity.Y = 16f;
				}
			}
			else if (aiStyle == 28)
			{
				if (type == 177)
				{
					for (int num313 = 0; num313 < 3; num313++)
					{
						int num314 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 137, base.velocity.X, base.velocity.Y, Main.rand.Next(0, 101), default(Color), 1f + (float)Main.rand.Next(-20, 40) * 0.01f);
						Main.dust[num314].noGravity = true;
						Main.dust[num314].velocity *= 0.3f;
					}
				}
				if (type == 118)
				{
					for (int num315 = 0; num315 < 2; num315++)
					{
						int num316 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 92, base.velocity.X, base.velocity.Y, 50, default(Color), 1.2f);
						Main.dust[num316].noGravity = true;
						Main.dust[num316].velocity *= 0.3f;
					}
				}
				if (type == 119 || type == 128 || type == 359)
				{
					for (int num317 = 0; num317 < 3; num317++)
					{
						int num318 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 92, base.velocity.X, base.velocity.Y, 50, default(Color), 1.2f);
						Main.dust[num318].noGravity = true;
						Main.dust[num318].velocity *= 0.3f;
					}
				}
				if (type == 309)
				{
					for (int num319 = 0; num319 < 3; num319++)
					{
						int num320 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 185, base.velocity.X, base.velocity.Y, 50, default(Color), 1.2f);
						Main.dust[num320].noGravity = true;
						Main.dust[num320].velocity *= 0.3f;
					}
				}
				if (type == 129)
				{
					for (int num321 = 0; num321 < 6; num321++)
					{
						int num322 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 106, base.velocity.X, base.velocity.Y, 100);
						Main.dust[num322].noGravity = true;
						Main.dust[num322].velocity *= 0.1f + (float)Main.rand.Next(4) * 0.1f;
						Main.dust[num322].scale *= 1f + (float)Main.rand.Next(5) * 0.1f;
					}
				}
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 28);
				}
			}
			else if (aiStyle == 29)
			{
				if (type == 619)
				{
					int num323 = (int)this.ai[0];
					for (int num324 = 0; num324 < 3; num324++)
					{
						int num325 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 254, base.velocity.X, base.velocity.Y, num323, default(Color), 1.2f);
						Main.dust[num325].position = (Main.dust[num325].position + base.Center) / 2f;
						Main.dust[num325].noGravity = true;
						Main.dust[num325].velocity *= 0.5f;
					}
					for (int num326 = 0; num326 < 2; num326++)
					{
						int num325 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 255, base.velocity.X, base.velocity.Y, num323, default(Color), 0.4f);
						switch (num326)
						{
						case 0:
							Main.dust[num325].position = (Main.dust[num325].position + base.Center * 5f) / 6f;
							break;
						case 1:
							Main.dust[num325].position = (Main.dust[num325].position + (base.Center + base.velocity / 2f) * 5f) / 6f;
							break;
						}
						Main.dust[num325].velocity *= 0.1f;
						Main.dust[num325].noGravity = true;
						Main.dust[num325].fadeIn = 1f;
					}
				}
				else if (type == 620)
				{
					int num327 = (int)this.ai[0];
					this.ai[1] += 1f;
					float num328 = (60f - this.ai[1]) / 60f;
					if (this.ai[1] > 40f)
					{
						Kill();
					}
					base.velocity.Y += 0.2f;
					if (base.velocity.Y > 18f)
					{
						base.velocity.Y = 18f;
					}
					base.velocity.X *= 0.98f;
					for (int num329 = 0; num329 < 2; num329++)
					{
						int num330 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, num327, base.velocity.X, base.velocity.Y, 50, default(Color), 1.1f);
						Main.dust[num330].position = (Main.dust[num330].position + base.Center) / 2f;
						Main.dust[num330].noGravity = true;
						Main.dust[num330].velocity *= 0.3f;
						Main.dust[num330].scale *= num328;
					}
					for (int num331 = 0; num331 < 1; num331++)
					{
						int num330 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, num327, base.velocity.X, base.velocity.Y, 50, default(Color), 0.6f);
						Main.dust[num330].position = (Main.dust[num330].position + base.Center * 5f) / 6f;
						Main.dust[num330].velocity *= 0.1f;
						Main.dust[num330].noGravity = true;
						Main.dust[num330].fadeIn = 0.9f * num328;
						Main.dust[num330].scale *= num328;
					}
				}
				else if (type == 521)
				{
					for (int num332 = 0; num332 < 3; num332++)
					{
						int num333 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 254, base.velocity.X, base.velocity.Y, 50, default(Color), 1.2f);
						Main.dust[num333].position = (Main.dust[num333].position + base.Center) / 2f;
						Main.dust[num333].noGravity = true;
						Main.dust[num333].velocity *= 0.5f;
					}
					for (int num334 = 0; num334 < 2; num334++)
					{
						int num333 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 255, base.velocity.X, base.velocity.Y, 50, default(Color), 0.4f);
						switch (num334)
						{
						case 0:
							Main.dust[num333].position = (Main.dust[num333].position + base.Center * 5f) / 6f;
							break;
						case 1:
							Main.dust[num333].position = (Main.dust[num333].position + (base.Center + base.velocity / 2f) * 5f) / 6f;
							break;
						}
						Main.dust[num333].velocity *= 0.1f;
						Main.dust[num333].noGravity = true;
						Main.dust[num333].fadeIn = 1f;
					}
				}
				else if (type == 522)
				{
					this.ai[1] += 1f;
					float num335 = (60f - this.ai[1]) / 60f;
					if (this.ai[1] > 40f)
					{
						Kill();
					}
					base.velocity.Y += 0.2f;
					if (base.velocity.Y > 18f)
					{
						base.velocity.Y = 18f;
					}
					base.velocity.X *= 0.98f;
					for (int num336 = 0; num336 < 2; num336++)
					{
						int num337 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 254, base.velocity.X, base.velocity.Y, 50, default(Color), 1.1f);
						Main.dust[num337].position = (Main.dust[num337].position + base.Center) / 2f;
						Main.dust[num337].noGravity = true;
						Main.dust[num337].velocity *= 0.3f;
						Main.dust[num337].scale *= num335;
					}
					for (int num338 = 0; num338 < 1; num338++)
					{
						int num337 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 255, base.velocity.X, base.velocity.Y, 50, default(Color), 0.6f);
						Main.dust[num337].position = (Main.dust[num337].position + base.Center * 5f) / 6f;
						Main.dust[num337].velocity *= 0.1f;
						Main.dust[num337].noGravity = true;
						Main.dust[num337].fadeIn = 0.9f * num335;
						Main.dust[num337].scale *= num335;
					}
				}
				else
				{
					int num339 = type - 121 + 86;
					if (type == 597)
					{
						num339 = 262;
					}
					for (int num340 = 0; num340 < 2; num340++)
					{
						int num341 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, num339, base.velocity.X, base.velocity.Y, 50, default(Color), 1.2f);
						Main.dust[num341].noGravity = true;
						Main.dust[num341].velocity *= 0.3f;
					}
					if (this.ai[1] == 0f)
					{
						this.ai[1] = 1f;
						Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 8);
					}
				}
			}
			else if (aiStyle == 30)
			{
				base.velocity *= 0.8f;
				rotation += 0.2f;
				alpha += 4;
				if (alpha >= 255)
				{
					Kill();
				}
			}
			else if (aiStyle == 31)
			{
				int num342 = 110;
				int conversionType = 0;
				if (type == 146)
				{
					num342 = 111;
					conversionType = 2;
				}
				if (type == 147)
				{
					num342 = 112;
					conversionType = 1;
				}
				if (type == 148)
				{
					num342 = 113;
					conversionType = 3;
				}
				if (type == 149)
				{
					num342 = 114;
					conversionType = 4;
				}
				if (owner == Main.myPlayer)
				{
					WorldGen.Convert((int)(base.position.X + (float)(width / 2)) / 16, (int)(base.position.Y + (float)(height / 2)) / 16, conversionType, 2);
				}
				if (timeLeft > 133)
				{
					timeLeft = 133;
				}
				if (this.ai[0] > 7f)
				{
					float num343 = 1f;
					if (this.ai[0] == 8f)
					{
						num343 = 0.2f;
					}
					else if (this.ai[0] == 9f)
					{
						num343 = 0.4f;
					}
					else if (this.ai[0] == 10f)
					{
						num343 = 0.6f;
					}
					else if (this.ai[0] == 11f)
					{
						num343 = 0.8f;
					}
					this.ai[0] += 1f;
					for (int num344 = 0; num344 < 1; num344++)
					{
						int num345 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, num342, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100);
						Main.dust[num345].noGravity = true;
						Main.dust[num345].scale *= 1.75f;
						Main.dust[num345].velocity.X *= 2f;
						Main.dust[num345].velocity.Y *= 2f;
						Main.dust[num345].scale *= num343;
					}
				}
				else
				{
					this.ai[0] += 1f;
				}
				rotation += 0.3f * (float)base.direction;
			}
			else if (aiStyle == 32)
			{
				timeLeft = 10;
				this.ai[0] += 1f;
				if (this.ai[0] >= 20f)
				{
					this.ai[0] = 15f;
					for (int num346 = 0; num346 < 16; num346++)
					{
						Rectangle rectangle3 = new Rectangle((int)base.position.X, (int)base.position.Y, width, height);
						if (!Main.player[num346].active)
						{
							continue;
						}
						Rectangle value9 = new Rectangle((int)Main.player[num346].position.X, (int)Main.player[num346].position.Y, Main.player[num346].width, Main.player[num346].height);
						if (rectangle3.Intersects(value9))
						{
							this.ai[0] = 0f;
							base.velocity.Y = -4.5f;
							if (base.velocity.X > 2f)
							{
								base.velocity.X = 2f;
							}
							if (base.velocity.X < -2f)
							{
								base.velocity.X = -2f;
							}
							base.velocity.X = (base.velocity.X + (float)Main.player[num346].direction * 1.75f) / 2f;
							base.velocity.X += Main.player[num346].velocity.X * 3f;
							base.velocity.Y += Main.player[num346].velocity.Y;
							if (base.velocity.X > 6f)
							{
								base.velocity.X = 6f;
							}
							if (base.velocity.X < -6f)
							{
								base.velocity.X = -6f;
							}
							netUpdate = true;
							this.ai[1] += 1f;
						}
					}
				}
				if (base.velocity.X == 0f && base.velocity.Y == 0f)
				{
					Kill();
				}
				rotation += 0.02f * base.velocity.X;
				if (base.velocity.Y == 0f)
				{
					base.velocity.X *= 0.98f;
				}
				else if (wet)
				{
					base.velocity.X *= 0.99f;
				}
				else
				{
					base.velocity.X *= 0.995f;
				}
				if ((double)base.velocity.X > -0.03 && (double)base.velocity.X < 0.03)
				{
					base.velocity.X = 0f;
				}
				if (wet)
				{
					this.ai[1] = 0f;
					if (base.velocity.Y > 0f)
					{
						base.velocity.Y *= 0.95f;
					}
					base.velocity.Y -= 0.1f;
					if (base.velocity.Y < -4f)
					{
						base.velocity.Y = -4f;
					}
					if (base.velocity.X == 0f)
					{
						Kill();
					}
				}
				else
				{
					base.velocity.Y += 0.1f;
				}
				if (base.velocity.Y > 10f)
				{
					base.velocity.Y = 10f;
				}
			}
			else if (aiStyle == 33)
			{
				if (alpha > 0)
				{
					alpha -= 50;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				float num347 = 4f;
				float num348 = this.ai[0];
				float num349 = this.ai[1];
				if (num348 == 0f && num349 == 0f)
				{
					num348 = 1f;
				}
				float num350 = (float)Math.Sqrt(num348 * num348 + num349 * num349);
				num350 = num347 / num350;
				num348 *= num350;
				num349 *= num350;
				if (alpha < 70)
				{
					int num351 = 127;
					if (type == 310)
					{
						num351 = 187;
					}
					int num352 = Dust.NewDust(new Vector2(base.position.X, base.position.Y - 2f), 6, 6, num351, base.velocity.X, base.velocity.Y, 100, default(Color), 1.6f);
					Main.dust[num352].noGravity = true;
					Main.dust[num352].position.X -= num348 * 1f;
					Main.dust[num352].position.Y -= num349 * 1f;
					Main.dust[num352].velocity.X -= num348;
					Main.dust[num352].velocity.Y -= num349;
				}
				if (localAI[0] == 0f)
				{
					this.ai[0] = base.velocity.X;
					this.ai[1] = base.velocity.Y;
					localAI[1] += 1f;
					if (localAI[1] >= 30f)
					{
						base.velocity.Y += 0.09f;
						localAI[1] = 30f;
					}
				}
				else
				{
					if (!Collision.SolidCollision(base.position, width, height))
					{
						localAI[0] = 0f;
						localAI[1] = 30f;
					}
					damage = 0;
				}
				if (base.velocity.Y > 16f)
				{
					base.velocity.Y = 16f;
				}
				rotation = (float)Math.Atan2(this.ai[1], this.ai[0]) + 1.57f;
			}
			else if (aiStyle == 34)
			{
				rotation = base.velocity.ToRotation() + (float)Math.PI / 2f;
				if (this.ai[1] == 1f)
				{
					this.ai[0] += 1f;
					if (this.ai[0] == 1f)
					{
						for (int num353 = 0; num353 < 8; num353++)
						{
							int num354 = Dust.NewDust(base.position, width, height, 6, 0f, 0f, 100, default(Color), 1.8f);
							Main.dust[num354].noGravity = true;
							Main.dust[num354].velocity *= 3f;
							Main.dust[num354].fadeIn = 0.5f;
							Main.dust[num354].position += base.velocity / 2f;
							Main.dust[num354].velocity += base.velocity / 4f + Main.player[owner].velocity * 0.1f;
						}
					}
					if (this.ai[0] > 2f)
					{
						int num355 = Dust.NewDust(new Vector2(base.position.X + 2f, base.position.Y + 20f), 8, 8, 6, base.velocity.X, base.velocity.Y, 100, default(Color), 1.2f);
						Main.dust[num355].noGravity = true;
						Main.dust[num355].velocity *= 0.2f;
						Main.dust[num355].position = Main.dust[num355].position.RotatedBy(rotation, base.Center);
						num355 = Dust.NewDust(new Vector2(base.position.X + 2f, base.position.Y + 15f), 8, 8, 6, base.velocity.X, base.velocity.Y, 100, default(Color), 1.2f);
						Main.dust[num355].noGravity = true;
						Main.dust[num355].velocity *= 0.2f;
						Main.dust[num355].position = Main.dust[num355].position.RotatedBy(rotation, base.Center);
						num355 = Dust.NewDust(new Vector2(base.position.X + 2f, base.position.Y + 10f), 8, 8, 6, base.velocity.X, base.velocity.Y, 100, default(Color), 1.2f);
						Main.dust[num355].noGravity = true;
						Main.dust[num355].velocity *= 0.2f;
						Main.dust[num355].position = Main.dust[num355].position.RotatedBy(rotation, base.Center);
					}
				}
				else if (type >= 415 && type <= 418)
				{
					this.ai[0] += 1f;
					if (this.ai[0] > 4f)
					{
						int num356 = Dust.NewDust(new Vector2(base.position.X + 2f, base.position.Y + 20f), 8, 8, 6, base.velocity.X, base.velocity.Y, 100, default(Color), 1.2f);
						Main.dust[num356].noGravity = true;
						Main.dust[num356].velocity *= 0.2f;
						Main.dust[num356].position = Main.dust[num356].position.RotatedBy(rotation, base.Center);
					}
				}
				else
				{
					int num357 = Dust.NewDust(new Vector2(base.position.X + 2f, base.position.Y + 20f), 8, 8, 6, base.velocity.X, base.velocity.Y, 100, default(Color), 1.2f);
					Main.dust[num357].noGravity = true;
					Main.dust[num357].velocity *= 0.2f;
					Main.dust[num357].position = Main.dust[num357].position.RotatedBy(rotation, base.Center);
				}
			}
			else if (aiStyle == 35)
			{
				this.ai[0] += 1f;
				if (this.ai[0] > 30f)
				{
					base.velocity.Y += 0.2f;
					base.velocity.X *= 0.985f;
					if (base.velocity.Y > 14f)
					{
						base.velocity.Y = 14f;
					}
				}
				rotation += (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) * (float)base.direction * 0.02f;
				if (owner != Main.myPlayer)
				{
					return;
				}
				Vector2 vector26 = Collision.TileCollision(base.position, base.velocity, width, height, true, true);
				bool flag9 = false;
				if (vector26 != base.velocity)
				{
					flag9 = true;
				}
				else
				{
					int num358 = (int)(base.Center.X + base.velocity.X) / 16;
					int num359 = (int)(base.Center.Y + base.velocity.Y) / 16;
					if (Main.tile[num358, num359] != null && Main.tile[num358, num359].active() && Main.tile[num358, num359].bottomSlope())
					{
						flag9 = true;
						base.position.Y = num359 * 16 + 16 + 8;
						base.position.X = num358 * 16 + 8;
					}
				}
				if (!flag9)
				{
					return;
				}
				int num360 = 213;
				if (type == 475)
				{
					num360 = 353;
				}
				if (type == 506)
				{
					num360 = 366;
				}
				if (type == 505)
				{
					num360 = 365;
				}
				int num361 = (int)(base.position.X + (float)(width / 2)) / 16;
				int num362 = (int)(base.position.Y + (float)(height / 2)) / 16;
				base.position += vector26;
				int num363 = 10;
				if (Main.tile[num361, num362] == null)
				{
					return;
				}
				for (; Main.tile[num361, num362] != null && Main.tile[num361, num362].active() && Main.tileRope[Main.tile[num361, num362].type]; num362++)
				{
				}
				while (num363 > 0)
				{
					num363--;
					if (Main.tile[num361, num362] == null)
					{
						break;
					}
					if (Main.tile[num361, num362].active() && (Main.tileCut[Main.tile[num361, num362].type] || Main.tile[num361, num362].type == 165))
					{
						WorldGen.KillTile(num361, num362);
						NetMessage.SendData(17, -1, -1, "", 0, num361, num362);
					}
					if (!Main.tile[num361, num362].active())
					{
						WorldGen.PlaceTile(num361, num362, num360);
						NetMessage.SendData(17, -1, -1, "", 1, num361, num362, num360);
						this.ai[1] += 1f;
					}
					else
					{
						num363 = 0;
					}
					num362++;
				}
				Kill();
			}
			else if (aiStyle == 36)
			{
				if (type != 307 && wet && !honeyWet)
				{
					Kill();
				}
				if (alpha > 0)
				{
					alpha -= 50;
				}
				else
				{
					extraUpdates = 0;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (type == 307)
				{
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) - 1.57f;
					frameCounter++;
					if (frameCounter >= 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame >= 2)
					{
						frame = 0;
					}
					for (int num364 = 0; num364 < 3; num364++)
					{
						float num365 = base.velocity.X / 3f * (float)num364;
						float num366 = base.velocity.Y / 3f * (float)num364;
						int num367 = Dust.NewDust(base.position, width, height, 184);
						Main.dust[num367].position.X = base.Center.X - num365;
						Main.dust[num367].position.Y = base.Center.Y - num366;
						Main.dust[num367].velocity *= 0f;
						Main.dust[num367].scale = 0.5f;
					}
				}
				else
				{
					if (type == 316)
					{
						if (base.velocity.X > 0f)
						{
							spriteDirection = -1;
						}
						else if (base.velocity.X < 0f)
						{
							spriteDirection = 1;
						}
					}
					else if (base.velocity.X > 0f)
					{
						spriteDirection = 1;
					}
					else if (base.velocity.X < 0f)
					{
						spriteDirection = -1;
					}
					rotation = base.velocity.X * 0.1f;
					frameCounter++;
					if (frameCounter >= 3)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame >= 3)
					{
						frame = 0;
					}
				}
				float num368 = base.position.X;
				float num369 = base.position.Y;
				float num370 = 100000f;
				bool flag10 = false;
				this.ai[0] += 1f;
				if (this.ai[0] > 30f)
				{
					this.ai[0] = 30f;
					for (int num371 = 0; num371 < 200; num371++)
					{
						if (Main.npc[num371].CanBeChasedBy(this) && (!Main.npc[num371].wet || type == 307))
						{
							float num372 = Main.npc[num371].position.X + (float)(Main.npc[num371].width / 2);
							float num373 = Main.npc[num371].position.Y + (float)(Main.npc[num371].height / 2);
							float num374 = Math.Abs(base.position.X + (float)(width / 2) - num372) + Math.Abs(base.position.Y + (float)(height / 2) - num373);
							if (num374 < 800f && num374 < num370 && Collision.CanHit(base.position, width, height, Main.npc[num371].position, Main.npc[num371].width, Main.npc[num371].height))
							{
								num370 = num374;
								num368 = num372;
								num369 = num373;
								flag10 = true;
							}
						}
					}
				}
				if (!flag10)
				{
					num368 = base.position.X + (float)(width / 2) + base.velocity.X * 100f;
					num369 = base.position.Y + (float)(height / 2) + base.velocity.Y * 100f;
				}
				else if (type == 307)
				{
					friendly = true;
				}
				float num375 = 6f;
				float num376 = 0.1f;
				if (type == 189)
				{
					num375 = 7f;
					num376 = 0.15f;
				}
				if (type == 307)
				{
					num375 = 9f;
					num376 = 0.2f;
				}
				if (type == 316)
				{
					num375 = 10f;
					num376 = 0.25f;
				}
				if (type == 566)
				{
					num375 = 6.8f;
					num376 = 0.14f;
				}
				Vector2 vector27 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num377 = num368 - vector27.X;
				float num378 = num369 - vector27.Y;
				float num379 = (float)Math.Sqrt(num377 * num377 + num378 * num378);
				num379 = num375 / num379;
				num377 *= num379;
				num378 *= num379;
				if (base.velocity.X < num377)
				{
					base.velocity.X += num376;
					if (base.velocity.X < 0f && num377 > 0f)
					{
						base.velocity.X += num376 * 2f;
					}
				}
				else if (base.velocity.X > num377)
				{
					base.velocity.X -= num376;
					if (base.velocity.X > 0f && num377 < 0f)
					{
						base.velocity.X -= num376 * 2f;
					}
				}
				if (base.velocity.Y < num378)
				{
					base.velocity.Y += num376;
					if (base.velocity.Y < 0f && num378 > 0f)
					{
						base.velocity.Y += num376 * 2f;
					}
				}
				else if (base.velocity.Y > num378)
				{
					base.velocity.Y -= num376;
					if (base.velocity.Y > 0f && num378 < 0f)
					{
						base.velocity.Y -= num376 * 2f;
					}
				}
			}
			else if (aiStyle == 37)
			{
				if (this.ai[1] == 0f)
				{
					this.ai[1] = base.position.Y - 5f;
				}
				if (this.ai[0] == 0f)
				{
					if (Collision.SolidCollision(base.position, width, height))
					{
						base.velocity.Y *= -1f;
						this.ai[0] += 1f;
						return;
					}
					float num380 = base.position.Y - this.ai[1];
					if (num380 > 300f)
					{
						base.velocity.Y *= -1f;
						this.ai[0] += 1f;
					}
				}
				else if (Collision.SolidCollision(base.position, width, height) || base.position.Y < this.ai[1])
				{
					Kill();
				}
			}
			else if (aiStyle == 38)
			{
				this.ai[0] += 1f;
				if (this.ai[0] >= 6f)
				{
					this.ai[0] = 0f;
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 34);
					if (Main.myPlayer == owner)
					{
						NewProjectile(base.position.X, base.position.Y, base.velocity.X, base.velocity.Y, 188, damage, knockBack, owner);
					}
				}
			}
			else if (aiStyle == 39)
			{
				alpha -= 50;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (Main.player[owner].dead)
				{
					Kill();
					return;
				}
				if (alpha == 0)
				{
					Main.player[owner].itemAnimation = 5;
					Main.player[owner].itemTime = 5;
					if (base.position.X + (float)(width / 2) > Main.player[owner].position.X + (float)(Main.player[owner].width / 2))
					{
						Main.player[owner].ChangeDir(1);
					}
					else
					{
						Main.player[owner].ChangeDir(-1);
					}
				}
				Vector2 vector28 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num381 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector28.X;
				float num382 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector28.Y;
				float num383 = (float)Math.Sqrt(num381 * num381 + num382 * num382);
				if (!Main.player[owner].channel && alpha == 0)
				{
					this.ai[0] = 1f;
					this.ai[1] = -1f;
				}
				if (this.ai[1] > 0f && num383 > 1500f)
				{
					this.ai[1] = 0f;
					this.ai[0] = 1f;
				}
				if (this.ai[1] > 0f)
				{
					tileCollide = false;
					int num384 = (int)this.ai[1] - 1;
					if (Main.npc[num384].active && Main.npc[num384].life > 0)
					{
						float num385 = 16f;
						vector28 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						num381 = Main.npc[num384].position.X + (float)(Main.npc[num384].width / 2) - vector28.X;
						num382 = Main.npc[num384].position.Y + (float)(Main.npc[num384].height / 2) - vector28.Y;
						num383 = (float)Math.Sqrt(num381 * num381 + num382 * num382);
						if (num383 < num385)
						{
							base.velocity.X = num381;
							base.velocity.Y = num382;
							if (num383 > num385 / 2f)
							{
								if (base.velocity.X < 0f)
								{
									spriteDirection = -1;
									rotation = (float)Math.Atan2(0f - base.velocity.Y, 0f - base.velocity.X);
								}
								else
								{
									spriteDirection = 1;
									rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X);
								}
							}
						}
						else
						{
							num383 = num385 / num383;
							num381 *= num383;
							num382 *= num383;
							base.velocity.X = num381;
							base.velocity.Y = num382;
							if (base.velocity.X < 0f)
							{
								spriteDirection = -1;
								rotation = (float)Math.Atan2(0f - base.velocity.Y, 0f - base.velocity.X);
							}
							else
							{
								spriteDirection = 1;
								rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X);
							}
						}
						this.ai[0] = 1f;
					}
					else
					{
						this.ai[1] = 0f;
						float num386 = base.position.X;
						float num387 = base.position.Y;
						float num388 = 3000f;
						int num389 = -1;
						for (int num390 = 0; num390 < 200; num390++)
						{
							if (Main.npc[num390].CanBeChasedBy(this))
							{
								float num391 = Main.npc[num390].position.X + (float)(Main.npc[num390].width / 2);
								float num392 = Main.npc[num390].position.Y + (float)(Main.npc[num390].height / 2);
								float num393 = Math.Abs(base.position.X + (float)(width / 2) - num391) + Math.Abs(base.position.Y + (float)(height / 2) - num392);
								if (num393 < num388 && Collision.CanHit(base.position, width, height, Main.npc[num390].position, Main.npc[num390].width, Main.npc[num390].height))
								{
									num388 = num393;
									num386 = num391;
									num387 = num392;
									num389 = num390;
								}
							}
						}
						if (num389 >= 0)
						{
							float num394 = 16f;
							vector28 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
							num381 = num386 - vector28.X;
							num382 = num387 - vector28.Y;
							num383 = (float)Math.Sqrt(num381 * num381 + num382 * num382);
							num383 = num394 / num383;
							num381 *= num383;
							num382 *= num383;
							base.velocity.X = num381;
							base.velocity.Y = num382;
							this.ai[0] = 0f;
							this.ai[1] = num389 + 1;
						}
					}
				}
				else if (this.ai[0] == 0f)
				{
					if (num383 > 700f)
					{
						this.ai[0] = 1f;
					}
					if (base.velocity.X < 0f)
					{
						spriteDirection = -1;
						rotation = (float)Math.Atan2(0f - base.velocity.Y, 0f - base.velocity.X);
					}
					else
					{
						spriteDirection = 1;
						rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X);
					}
				}
				else if (this.ai[0] == 1f)
				{
					tileCollide = false;
					if (base.velocity.X < 0f)
					{
						spriteDirection = 1;
						rotation = (float)Math.Atan2(0f - base.velocity.Y, 0f - base.velocity.X);
					}
					else
					{
						spriteDirection = -1;
						rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X);
					}
					if (base.velocity.X < 0f)
					{
						spriteDirection = -1;
						rotation = (float)Math.Atan2(0f - base.velocity.Y, 0f - base.velocity.X);
					}
					else
					{
						spriteDirection = 1;
						rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X);
					}
					float num395 = 20f;
					if (num383 < 70f)
					{
						Kill();
					}
					num383 = num395 / num383;
					num381 *= num383;
					num382 *= num383;
					base.velocity.X = num381;
					base.velocity.Y = num382;
				}
				frameCounter++;
				if (frameCounter >= 4)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame >= 4)
				{
					frame = 0;
				}
			}
			else if (aiStyle == 40)
			{
				localAI[0] += 1f;
				if (localAI[0] > 3f)
				{
					localAI[0] = 100f;
					alpha -= 50;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				frameCounter++;
				if (frameCounter >= 3)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame >= 5)
				{
					frame = 0;
				}
				base.velocity.X += this.ai[0];
				base.velocity.Y += this.ai[1];
				localAI[1] += 1f;
				if (localAI[1] == 50f)
				{
					localAI[1] = 51f;
					this.ai[0] = (float)Main.rand.Next(-100, 101) * 6E-05f;
					this.ai[1] = (float)Main.rand.Next(-100, 101) * 6E-05f;
				}
				if (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y) > 16f)
				{
					base.velocity.X *= 0.95f;
					base.velocity.Y *= 0.95f;
				}
				if (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y) < 12f)
				{
					base.velocity.X *= 1.05f;
					base.velocity.Y *= 1.05f;
				}
				rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 3.14f;
			}
			else if (aiStyle == 41)
			{
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					frame = Main.rand.Next(3);
				}
				rotation += base.velocity.X * 0.01f;
			}
			else if (aiStyle == 42)
			{
				if (!Main.player[owner].crystalLeaf)
				{
					Kill();
					return;
				}
				base.position.X = Main.player[owner].Center.X - (float)(width / 2);
				base.position.Y = Main.player[owner].Center.Y - (float)(height / 2) + Main.player[owner].gfxOffY - 60f;
				if (Main.player[owner].gravDir == -1f)
				{
					base.position.Y += 120f;
					rotation = 3.14f;
				}
				else
				{
					rotation = 0f;
				}
				base.position.X = (int)base.position.X;
				base.position.Y = (int)base.position.Y;
				float num396 = (float)(int)Main.mouseTextColor / 200f - 0.35f;
				num396 *= 0.2f;
				scale = num396 + 0.95f;
				if (owner != Main.myPlayer)
				{
					return;
				}
				if (this.ai[0] == 0f)
				{
					float num397 = base.position.X;
					float num398 = base.position.Y;
					float num399 = 700f;
					bool flag11 = false;
					for (int num400 = 0; num400 < 200; num400++)
					{
						if (Main.npc[num400].CanBeChasedBy(this, true))
						{
							float num401 = Main.npc[num400].position.X + (float)(Main.npc[num400].width / 2);
							float num402 = Main.npc[num400].position.Y + (float)(Main.npc[num400].height / 2);
							float num403 = Math.Abs(base.position.X + (float)(width / 2) - num401) + Math.Abs(base.position.Y + (float)(height / 2) - num402);
							if (num403 < num399 && Collision.CanHit(base.position, width, height, Main.npc[num400].position, Main.npc[num400].width, Main.npc[num400].height))
							{
								num399 = num403;
								num397 = num401;
								num398 = num402;
								flag11 = true;
							}
						}
					}
					if (flag11)
					{
						float num404 = 12f;
						Vector2 vector29 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						float num405 = num397 - vector29.X;
						float num406 = num398 - vector29.Y;
						float num407 = (float)Math.Sqrt(num405 * num405 + num406 * num406);
						num407 = num404 / num407;
						num405 *= num407;
						num406 *= num407;
						NewProjectile(base.Center.X - 4f, base.Center.Y, num405, num406, 227, Player.crystalLeafDamage, Player.crystalLeafKB, owner);
						this.ai[0] = 50f;
					}
				}
				else
				{
					this.ai[0] -= 1f;
				}
			}
			else if (aiStyle == 43)
			{
				if (localAI[1] == 0f)
				{
					Main.PlaySound(6, (int)base.position.X, (int)base.position.Y);
					localAI[1] += 1f;
					for (int num408 = 0; num408 < 5; num408++)
					{
						int num409 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 157);
						Main.dust[num409].noGravity = true;
						Main.dust[num409].velocity *= 3f;
						Main.dust[num409].scale = 1.5f;
					}
				}
				this.ai[0] = (float)Main.rand.Next(-100, 101) * 0.0025f;
				this.ai[1] = (float)Main.rand.Next(-100, 101) * 0.0025f;
				if (localAI[0] == 0f)
				{
					scale += 0.05f;
					if ((double)scale > 1.2)
					{
						localAI[0] = 1f;
					}
				}
				else
				{
					scale -= 0.05f;
					if ((double)scale < 0.8)
					{
						localAI[0] = 0f;
					}
				}
				rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 3.14f;
				int num410 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 157);
				Main.dust[num410].noGravity = true;
				Main.dust[num410].velocity *= 0.1f;
				Main.dust[num410].scale = 1.5f;
			}
			else if (aiStyle == 44)
			{
				if (type == 228)
				{
					base.velocity *= 0.96f;
					alpha += 4;
					if (alpha > 255)
					{
						Kill();
					}
				}
				else if (type == 229)
				{
					if (this.ai[0] == 0f)
					{
						Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 8);
					}
					this.ai[0] += 1f;
					if (this.ai[0] > 20f)
					{
						base.velocity.Y += 0.3f;
						base.velocity.X *= 0.98f;
					}
				}
				frameCounter++;
				if (frameCounter > 5)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame >= Main.projFrames[type])
				{
					frame = 0;
				}
			}
			else if (aiStyle == 45)
			{
				if (type == 237 || type == 243)
				{
					float num411 = this.ai[0];
					float num412 = this.ai[1];
					if (num411 != 0f && num412 != 0f)
					{
						bool flag12 = false;
						bool flag13 = false;
						if ((base.velocity.X < 0f && base.Center.X < num411) || (base.velocity.X > 0f && base.Center.X > num411))
						{
							flag12 = true;
						}
						if ((base.velocity.Y < 0f && base.Center.Y < num412) || (base.velocity.Y > 0f && base.Center.Y > num412))
						{
							flag13 = true;
						}
						if (flag12 && flag13)
						{
							Kill();
						}
					}
					rotation += base.velocity.X * 0.02f;
					frameCounter++;
					if (frameCounter > 4)
					{
						frameCounter = 0;
						frame++;
						if (frame > 3)
						{
							frame = 0;
						}
					}
				}
				else if (type == 238 || type == 244)
				{
					frameCounter++;
					if (frameCounter > 8)
					{
						frameCounter = 0;
						frame++;
						if (frame > 5)
						{
							frame = 0;
						}
					}
					this.ai[1] += 1f;
					if (type == 244 && this.ai[1] >= 3600f)
					{
						alpha += 5;
						if (alpha > 255)
						{
							alpha = 255;
							Kill();
						}
					}
					else if (type == 238 && this.ai[1] >= 7200f)
					{
						alpha += 5;
						if (alpha > 255)
						{
							alpha = 255;
							Kill();
						}
					}
					else
					{
						this.ai[0] += 1f;
						if (type == 244)
						{
							if (this.ai[0] > 10f)
							{
								this.ai[0] = 0f;
								if (owner == Main.myPlayer)
								{
									int num413 = (int)(base.position.X + 14f + (float)Main.rand.Next(width - 28));
									int num414 = (int)(base.position.Y + (float)height + 4f);
									NewProjectile(num413, num414, 0f, 5f, 245, damage, 0f, owner);
								}
							}
						}
						else if (this.ai[0] > 8f)
						{
							this.ai[0] = 0f;
							if (owner == Main.myPlayer)
							{
								int num415 = (int)(base.position.X + 14f + (float)Main.rand.Next(width - 28));
								int num416 = (int)(base.position.Y + (float)height + 4f);
								NewProjectile(num415, num416, 0f, 5f, 239, damage, 0f, owner);
							}
						}
					}
					localAI[0] += 1f;
					if (!(localAI[0] >= 10f))
					{
						return;
					}
					localAI[0] = 0f;
					int num417 = 0;
					int num418 = 0;
					float num419 = 0f;
					int num420 = type;
					for (int num421 = 0; num421 < 1000; num421++)
					{
						if (Main.projectile[num421].active && Main.projectile[num421].owner == owner && Main.projectile[num421].type == num420 && Main.projectile[num421].ai[1] < 3600f)
						{
							num417++;
							if (Main.projectile[num421].ai[1] > num419)
							{
								num418 = num421;
								num419 = Main.projectile[num421].ai[1];
							}
						}
					}
					if (type == 244)
					{
						if (num417 > 1)
						{
							Main.projectile[num418].netUpdate = true;
							Main.projectile[num418].ai[1] = 36000f;
						}
					}
					else if (num417 > 2)
					{
						Main.projectile[num418].netUpdate = true;
						Main.projectile[num418].ai[1] = 36000f;
					}
				}
				else if (type == 239)
				{
					alpha = 50;
				}
				else if (type == 245)
				{
					alpha = 100;
				}
				else if (type == 264)
				{
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
				}
			}
			else if (aiStyle == 46)
			{
				int num422 = 1200;
				if (type == 250)
				{
					if (owner == Main.myPlayer)
					{
						localAI[0] += 1f;
						if (localAI[0] > 4f)
						{
							localAI[0] = 3f;
							NewProjectile(base.Center.X, base.Center.Y, base.velocity.X * 0.001f, base.velocity.Y * 0.001f, 251, damage, knockBack, owner);
						}
						if (timeLeft > num422)
						{
							timeLeft = num422;
						}
					}
					float num423 = 1f;
					if (base.velocity.Y < 0f)
					{
						num423 -= base.velocity.Y / 3f;
					}
					this.ai[0] += num423;
					if (this.ai[0] > 30f)
					{
						base.velocity.Y += 0.5f;
						if (base.velocity.Y > 0f)
						{
							base.velocity.X *= 0.95f;
						}
						else
						{
							base.velocity.X *= 1.05f;
						}
					}
					float x = base.velocity.X;
					float y = base.velocity.Y;
					float num424 = (float)Math.Sqrt(x * x + y * y);
					num424 = 15.95f * scale / num424;
					x *= num424;
					y *= num424;
					base.velocity.X = x;
					base.velocity.Y = y;
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) - 1.57f;
					return;
				}
				if (localAI[0] == 0f)
				{
					if (base.velocity.X > 0f)
					{
						spriteDirection = -1;
						rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) - 1.57f;
					}
					else
					{
						spriteDirection = 1;
						rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) - 1.57f;
					}
					localAI[0] = 1f;
					timeLeft = num422;
				}
				base.velocity.X *= 0.98f;
				base.velocity.Y *= 0.98f;
				if (rotation == 0f)
				{
					alpha = 255;
				}
				else if (timeLeft < 10)
				{
					alpha = 255 - (int)(255f * (float)timeLeft / 10f);
				}
				else if (timeLeft > num422 - 10)
				{
					int num425 = num422 - timeLeft;
					alpha = 255 - (int)(255f * (float)num425 / 10f);
				}
				else
				{
					alpha = 0;
				}
			}
			else if (aiStyle == 47)
			{
				if (this.ai[0] == 0f)
				{
					this.ai[0] = base.velocity.X;
					this.ai[1] = base.velocity.Y;
				}
				if (base.velocity.X > 0f)
				{
					rotation += (Math.Abs(base.velocity.Y) + Math.Abs(base.velocity.X)) * 0.001f;
				}
				else
				{
					rotation -= (Math.Abs(base.velocity.Y) + Math.Abs(base.velocity.X)) * 0.001f;
				}
				frameCounter++;
				if (frameCounter > 6)
				{
					frameCounter = 0;
					frame++;
					if (frame > 4)
					{
						frame = 0;
					}
				}
				if (Math.Sqrt(base.velocity.X * base.velocity.X + base.velocity.Y * base.velocity.Y) > 2.0)
				{
					base.velocity *= 0.98f;
				}
				for (int num426 = 0; num426 < 1000; num426++)
				{
					if (num426 != whoAmI && Main.projectile[num426].active && Main.projectile[num426].owner == owner && Main.projectile[num426].type == type && timeLeft > Main.projectile[num426].timeLeft && Main.projectile[num426].timeLeft > 30)
					{
						Main.projectile[num426].timeLeft = 30;
					}
				}
				int[] array = new int[20];
				int num427 = 0;
				float num428 = 300f;
				bool flag14 = false;
				float num429 = 0f;
				float num430 = 0f;
				for (int num431 = 0; num431 < 200; num431++)
				{
					if (!Main.npc[num431].CanBeChasedBy(this))
					{
						continue;
					}
					float num432 = Main.npc[num431].position.X + (float)(Main.npc[num431].width / 2);
					float num433 = Main.npc[num431].position.Y + (float)(Main.npc[num431].height / 2);
					float num434 = Math.Abs(base.position.X + (float)(width / 2) - num432) + Math.Abs(base.position.Y + (float)(height / 2) - num433);
					if (num434 < num428 && Collision.CanHit(base.Center, 1, 1, Main.npc[num431].Center, 1, 1))
					{
						if (num427 < 20)
						{
							array[num427] = num431;
							num427++;
							num429 = num432;
							num430 = num433;
						}
						flag14 = true;
					}
				}
				if (timeLeft < 30)
				{
					flag14 = false;
				}
				if (flag14)
				{
					int num435 = Main.rand.Next(num427);
					num435 = array[num435];
					num429 = Main.npc[num435].position.X + (float)(Main.npc[num435].width / 2);
					num430 = Main.npc[num435].position.Y + (float)(Main.npc[num435].height / 2);
					localAI[0] += 1f;
					if (localAI[0] > 8f)
					{
						localAI[0] = 0f;
						float num436 = 6f;
						Vector2 vector30 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						vector30 += base.velocity * 4f;
						float num437 = num429 - vector30.X;
						float num438 = num430 - vector30.Y;
						float num439 = (float)Math.Sqrt(num437 * num437 + num438 * num438);
						num439 = num436 / num439;
						num437 *= num439;
						num438 *= num439;
						NewProjectile(vector30.X, vector30.Y, num437, num438, 255, damage, knockBack, owner);
					}
				}
			}
			else if (aiStyle == 48)
			{
				if (type == 255)
				{
					for (int num440 = 0; num440 < 4; num440++)
					{
						Vector2 position = base.position;
						position -= base.velocity * ((float)num440 * 0.25f);
						alpha = 255;
						int num441 = Dust.NewDust(position, 1, 1, 160);
						Main.dust[num441].position = position;
						Main.dust[num441].position.X += width / 2;
						Main.dust[num441].position.Y += height / 2;
						Main.dust[num441].scale = (float)Main.rand.Next(70, 110) * 0.013f;
						Main.dust[num441].velocity *= 0.2f;
					}
					return;
				}
				if (type == 433)
				{
					for (int num442 = 0; num442 < 2; num442++)
					{
						Vector2 position2 = base.position;
						position2 -= base.velocity * ((float)num442 * 0.25f);
						alpha = 255;
						int num443 = Dust.NewDust(position2, 1, 1, 160);
						Main.dust[num443].position = position2;
						Main.dust[num443].position.X += width / 2;
						Main.dust[num443].position.Y += height / 2;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num443].color = Color.LimeGreen;
						}
						else
						{
							Main.dust[num443].color = Color.CornflowerBlue;
						}
						Main.dust[num443].scale = (float)Main.rand.Next(70, 110) * 0.013f;
						Main.dust[num443].velocity *= 0.2f;
					}
					return;
				}
				if (type == 290)
				{
					if (localAI[0] == 0f)
					{
						Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 8);
					}
					localAI[0] += 1f;
					if (localAI[0] > 3f)
					{
						for (int num444 = 0; num444 < 3; num444++)
						{
							Vector2 position3 = base.position;
							position3 -= base.velocity * ((float)num444 * 0.3334f);
							alpha = 255;
							int num445 = Dust.NewDust(position3, 1, 1, 173);
							Main.dust[num445].position = position3;
							Main.dust[num445].scale = (float)Main.rand.Next(70, 110) * 0.013f;
							Main.dust[num445].velocity *= 0.2f;
						}
					}
					return;
				}
				if (type == 294)
				{
					localAI[0] += 1f;
					if (localAI[0] > 9f)
					{
						for (int num446 = 0; num446 < 4; num446++)
						{
							Vector2 position4 = base.position;
							position4 -= base.velocity * ((float)num446 * 0.25f);
							alpha = 255;
							int num447 = Dust.NewDust(position4, 1, 1, 173);
							Main.dust[num447].position = position4;
							Main.dust[num447].scale = (float)Main.rand.Next(70, 110) * 0.013f;
							Main.dust[num447].velocity *= 0.2f;
						}
					}
					return;
				}
				localAI[0] += 1f;
				if (localAI[0] > 3f)
				{
					for (int num448 = 0; num448 < 4; num448++)
					{
						Vector2 position5 = base.position;
						position5 -= base.velocity * ((float)num448 * 0.25f);
						alpha = 255;
						int num449 = Dust.NewDust(position5, 1, 1, 162);
						Main.dust[num449].position = position5;
						Main.dust[num449].position.X += width / 2;
						Main.dust[num449].position.Y += height / 2;
						Main.dust[num449].scale = (float)Main.rand.Next(70, 110) * 0.013f;
						Main.dust[num449].velocity *= 0.2f;
					}
				}
			}
			else if (aiStyle == 49)
			{
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 14);
				}
				if (this.ai[1] == 1f)
				{
					if (base.velocity.X > 0f)
					{
						base.direction = 1;
					}
					else if (base.velocity.X < 0f)
					{
						base.direction = -1;
					}
					spriteDirection = base.direction;
					this.ai[0] += 1f;
					rotation += base.velocity.X * 0.05f + (float)base.direction * 0.05f;
					if (this.ai[0] >= 18f)
					{
						base.velocity.Y += 0.28f;
						base.velocity.X *= 0.99f;
					}
					if ((double)base.velocity.Y > 15.9)
					{
						base.velocity.Y = 15.9f;
					}
					if (!(this.ai[0] > 2f))
					{
						return;
					}
					alpha = 0;
					if (this.ai[0] == 3f)
					{
						for (int num450 = 0; num450 < 10; num450++)
						{
							int num451 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Main.dust[num451].velocity *= 0.5f;
							Main.dust[num451].velocity += base.velocity * 0.1f;
						}
						for (int num452 = 0; num452 < 5; num452++)
						{
							int num453 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2f);
							Main.dust[num453].noGravity = true;
							Main.dust[num453].velocity *= 3f;
							Main.dust[num453].velocity += base.velocity * 0.2f;
							num453 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100);
							Main.dust[num453].velocity *= 2f;
							Main.dust[num453].velocity += base.velocity * 0.3f;
						}
						for (int num454 = 0; num454 < 1; num454++)
						{
							int num455 = Gore.NewGore(new Vector2(base.position.X - 10f, base.position.Y - 10f), default(Vector2), Main.rand.Next(61, 64));
							Main.gore[num455].position += base.velocity * 1.25f;
							Main.gore[num455].scale = 1.5f;
							Main.gore[num455].velocity += base.velocity * 0.5f;
							Main.gore[num455].velocity *= 0.02f;
						}
					}
				}
				else if (this.ai[1] == 2f)
				{
					rotation = 0f;
					base.velocity.X *= 0.95f;
					base.velocity.Y += 0.2f;
				}
			}
			else if (aiStyle == 50)
			{
				if (type == 291)
				{
					if (localAI[0] == 0f)
					{
						Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 20);
						localAI[0] += 1f;
					}
					bool flag15 = false;
					bool flag16 = false;
					if (base.velocity.X < 0f && base.position.X < this.ai[0])
					{
						flag15 = true;
					}
					if (base.velocity.X > 0f && base.position.X > this.ai[0])
					{
						flag15 = true;
					}
					if (base.velocity.Y < 0f && base.position.Y < this.ai[1])
					{
						flag16 = true;
					}
					if (base.velocity.Y > 0f && base.position.Y > this.ai[1])
					{
						flag16 = true;
					}
					if (flag15 && flag16)
					{
						Kill();
					}
					for (int num456 = 0; num456 < 10; num456++)
					{
						int num457 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 174, 0f, 0f, 100, default(Color), 1.2f);
						Main.dust[num457].noGravity = true;
						Main.dust[num457].velocity *= 0.5f;
						Main.dust[num457].velocity += base.velocity * 0.1f;
					}
					return;
				}
				if (type == 295)
				{
					for (int num458 = 0; num458 < 8; num458++)
					{
						int num459 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 174, 0f, 0f, 100, default(Color), 1.2f);
						Main.dust[num459].noGravity = true;
						Main.dust[num459].velocity *= 0.5f;
						Main.dust[num459].velocity += base.velocity * 0.1f;
					}
					return;
				}
				if (localAI[0] == 0f)
				{
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 74);
					localAI[0] += 1f;
				}
				this.ai[0] += 1f;
				if (type == 296)
				{
					this.ai[0] += 3f;
				}
				float num460 = 25f;
				if (this.ai[0] > 180f)
				{
					num460 -= (this.ai[0] - 180f) / 2f;
				}
				if (num460 <= 0f)
				{
					num460 = 0f;
					Kill();
				}
				if (type == 296)
				{
					num460 *= 0.7f;
				}
				for (int num461 = 0; (float)num461 < num460; num461++)
				{
					float num462 = Main.rand.Next(-10, 11);
					float num463 = Main.rand.Next(-10, 11);
					float num464 = Main.rand.Next(3, 9);
					float num465 = (float)Math.Sqrt(num462 * num462 + num463 * num463);
					num465 = num464 / num465;
					num462 *= num465;
					num463 *= num465;
					int num466 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 174, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num466].noGravity = true;
					Main.dust[num466].position.X = base.Center.X;
					Main.dust[num466].position.Y = base.Center.Y;
					Main.dust[num466].position.X += Main.rand.Next(-10, 11);
					Main.dust[num466].position.Y += Main.rand.Next(-10, 11);
					Main.dust[num466].velocity.X = num462;
					Main.dust[num466].velocity.Y = num463;
				}
			}
			else if (aiStyle == 51)
			{
				if (type == 297)
				{
					localAI[0] += 1f;
					if (localAI[0] > 4f)
					{
						for (int num467 = 0; num467 < 5; num467++)
						{
							int num468 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 175, 0f, 0f, 100, default(Color), 2f);
							Main.dust[num468].noGravity = true;
							Main.dust[num468].velocity *= 0f;
						}
					}
				}
				else
				{
					if (localAI[0] == 0f)
					{
						Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 8);
						localAI[0] += 1f;
					}
					for (int num469 = 0; num469 < 9; num469++)
					{
						int num470 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 175, 0f, 0f, 100, default(Color), 1.3f);
						Main.dust[num470].noGravity = true;
						Main.dust[num470].velocity *= 0f;
					}
				}
				float num471 = base.Center.X;
				float num472 = base.Center.Y;
				float num473 = 400f;
				bool flag17 = false;
				if (type == 297)
				{
					for (int num474 = 0; num474 < 200; num474++)
					{
						if (Main.npc[num474].CanBeChasedBy(this) && Collision.CanHit(base.Center, 1, 1, Main.npc[num474].Center, 1, 1))
						{
							float num475 = Main.npc[num474].position.X + (float)(Main.npc[num474].width / 2);
							float num476 = Main.npc[num474].position.Y + (float)(Main.npc[num474].height / 2);
							float num477 = Math.Abs(base.position.X + (float)(width / 2) - num475) + Math.Abs(base.position.Y + (float)(height / 2) - num476);
							if (num477 < num473)
							{
								num473 = num477;
								num471 = num475;
								num472 = num476;
								flag17 = true;
							}
						}
					}
				}
				else
				{
					num473 = 200f;
					for (int num478 = 0; num478 < 16; num478++)
					{
						if (Main.player[num478].active && !Main.player[num478].dead)
						{
							float num479 = Main.player[num478].position.X + (float)(Main.player[num478].width / 2);
							float num480 = Main.player[num478].position.Y + (float)(Main.player[num478].height / 2);
							float num481 = Math.Abs(base.position.X + (float)(width / 2) - num479) + Math.Abs(base.position.Y + (float)(height / 2) - num480);
							if (num481 < num473)
							{
								num473 = num481;
								num471 = num479;
								num472 = num480;
								flag17 = true;
							}
						}
					}
				}
				if (flag17)
				{
					float num482 = 3f;
					if (type == 297)
					{
						num482 = 6f;
					}
					Vector2 vector31 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num483 = num471 - vector31.X;
					float num484 = num472 - vector31.Y;
					float num485 = (float)Math.Sqrt(num483 * num483 + num484 * num484);
					num485 = num482 / num485;
					num483 *= num485;
					num484 *= num485;
					if (type == 297)
					{
						base.velocity.X = (base.velocity.X * 20f + num483) / 21f;
						base.velocity.Y = (base.velocity.Y * 20f + num484) / 21f;
					}
					else
					{
						base.velocity.X = (base.velocity.X * 100f + num483) / 101f;
						base.velocity.Y = (base.velocity.Y * 100f + num484) / 101f;
					}
				}
			}
			else if (aiStyle == 52)
			{
				int num486 = (int)this.ai[0];
				float num487 = 4f;
				Vector2 vector32 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num488 = Main.player[num486].Center.X - vector32.X;
				float num489 = Main.player[num486].Center.Y - vector32.Y;
				float num490 = (float)Math.Sqrt(num488 * num488 + num489 * num489);
				if (num490 < 50f && base.position.X < Main.player[num486].position.X + (float)Main.player[num486].width && base.position.X + (float)width > Main.player[num486].position.X && base.position.Y < Main.player[num486].position.Y + (float)Main.player[num486].height && base.position.Y + (float)height > Main.player[num486].position.Y)
				{
					if (owner == Main.myPlayer && !Main.player[Main.myPlayer].moonLeech)
					{
						int num491 = (int)this.ai[1];
						Main.player[num486].HealEffect(num491, false);
						Main.player[num486].statLife += num491;
						if (Main.player[num486].statLife > Main.player[num486].statLifeMax2)
						{
							Main.player[num486].statLife = Main.player[num486].statLifeMax2;
						}
						NetMessage.SendData(66, -1, -1, "", num486, num491);
					}
					Kill();
				}
				num490 = num487 / num490;
				num488 *= num490;
				num489 *= num490;
				base.velocity.X = (base.velocity.X * 15f + num488) / 16f;
				base.velocity.Y = (base.velocity.Y * 15f + num489) / 16f;
				if (type == 305)
				{
					for (int num492 = 0; num492 < 3; num492++)
					{
						float num493 = base.velocity.X * 0.334f * (float)num492;
						float num494 = (0f - base.velocity.Y * 0.334f) * (float)num492;
						int num495 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 183, 0f, 0f, 100, default(Color), 1.1f);
						Main.dust[num495].noGravity = true;
						Main.dust[num495].velocity *= 0f;
						Main.dust[num495].position.X -= num493;
						Main.dust[num495].position.Y -= num494;
					}
				}
				else
				{
					for (int num496 = 0; num496 < 5; num496++)
					{
						float num497 = base.velocity.X * 0.2f * (float)num496;
						float num498 = (0f - base.velocity.Y * 0.2f) * (float)num496;
						int num499 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 175, 0f, 0f, 100, default(Color), 1.3f);
						Main.dust[num499].noGravity = true;
						Main.dust[num499].velocity *= 0f;
						Main.dust[num499].position.X -= num497;
						Main.dust[num499].position.Y -= num498;
					}
				}
			}
			else if (aiStyle == 53)
			{
				if (localAI[0] == 0f)
				{
					localAI[1] = 1f;
					localAI[0] = 1f;
					this.ai[0] = 120f;
					int num500 = 80;
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 46);
					if (type == 308)
					{
						for (int num501 = 0; num501 < num500; num501++)
						{
							int num502 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + 16f), width, height - 16, 185);
							Main.dust[num502].velocity *= 2f;
							Main.dust[num502].noGravity = true;
							Main.dust[num502].scale *= 1.15f;
						}
					}
					if (type == 377)
					{
						frame = 4;
						num500 = 40;
						for (int num503 = 0; num503 < num500; num503++)
						{
							int num504 = Dust.NewDust(base.position + Vector2.UnitY * 16f, width, height - 16, 171, 0f, 0f, 100);
							Main.dust[num504].scale = (float)Main.rand.Next(1, 10) * 0.1f;
							Main.dust[num504].noGravity = true;
							Main.dust[num504].fadeIn = 1.5f;
							Main.dust[num504].velocity *= 0.75f;
						}
					}
				}
				base.velocity.X = 0f;
				base.velocity.Y += 0.2f;
				if (base.velocity.Y > 16f)
				{
					base.velocity.Y = 16f;
				}
				bool flag18 = false;
				float num505 = base.Center.X;
				float num506 = base.Center.Y;
				float num507 = 1000f;
				for (int num508 = 0; num508 < 200; num508++)
				{
					if (Main.npc[num508].CanBeChasedBy(this))
					{
						float num509 = Main.npc[num508].position.X + (float)(Main.npc[num508].width / 2);
						float num510 = Main.npc[num508].position.Y + (float)(Main.npc[num508].height / 2);
						float num511 = Math.Abs(base.position.X + (float)(width / 2) - num509) + Math.Abs(base.position.Y + (float)(height / 2) - num510);
						if (num511 < num507 && Collision.CanHit(base.position, width, height, Main.npc[num508].position, Main.npc[num508].width, Main.npc[num508].height))
						{
							num507 = num511;
							num505 = num509;
							num506 = num510;
							flag18 = true;
						}
					}
				}
				if (flag18)
				{
					float num512 = num505;
					float num513 = num506;
					num505 -= base.Center.X;
					num506 -= base.Center.Y;
					int num514 = 0;
					if (num505 < 0f)
					{
						spriteDirection = -1;
					}
					else
					{
						spriteDirection = 1;
					}
					num514 = ((!(num506 > 0f)) ? ((Math.Abs(num506) > Math.Abs(num505) * 3f) ? 4 : ((Math.Abs(num506) > Math.Abs(num505) * 2f) ? 3 : ((!(Math.Abs(num505) > Math.Abs(num506) * 3f)) ? ((Math.Abs(num505) > Math.Abs(num506) * 2f) ? 1 : 2) : 0))) : 0);
					if (type == 308)
					{
						frame = num514 * 2;
					}
					else if (type == 377)
					{
						frame = num514;
					}
					if (this.ai[0] > 40f && localAI[1] == 0f && type == 308)
					{
						frame++;
					}
					if (this.ai[0] <= 0f)
					{
						localAI[1] = 0f;
						this.ai[0] = 60f;
						if (Main.myPlayer == owner)
						{
							float num515 = 6f;
							int num516 = 309;
							if (type == 377)
							{
								num516 = 378;
								num515 = 9f;
							}
							Vector2 vector33 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
							switch (num514)
							{
							case 0:
								vector33.Y += 12f;
								vector33.X += 24 * spriteDirection;
								break;
							case 1:
								vector33.Y += 0f;
								vector33.X += 24 * spriteDirection;
								break;
							case 2:
								vector33.Y -= 2f;
								vector33.X += 24 * spriteDirection;
								break;
							case 3:
								vector33.Y -= 6f;
								vector33.X += 14 * spriteDirection;
								break;
							case 4:
								vector33.Y -= 14f;
								vector33.X += 2 * spriteDirection;
								break;
							}
							if (spriteDirection < 0)
							{
								vector33.X += 10f;
							}
							float num517 = num512 - vector33.X;
							float num518 = num513 - vector33.Y;
							float num519 = (float)Math.Sqrt(num517 * num517 + num518 * num518);
							num519 = num515 / num519;
							num517 *= num519;
							num518 *= num519;
							int num520 = damage;
							NewProjectile(vector33.X, vector33.Y, num517, num518, num516, num520, knockBack, Main.myPlayer);
						}
					}
				}
				else if (this.ai[0] <= 60f && (frame == 1 || frame == 3 || frame == 5 || frame == 7 || frame == 9))
				{
					frame--;
				}
				if (this.ai[0] > 0f)
				{
					this.ai[0] -= 1f;
				}
			}
			else if (aiStyle == 54)
			{
				if (type == 317)
				{
					if (Main.player[Main.myPlayer].dead)
					{
						Main.player[Main.myPlayer].raven = false;
					}
					if (Main.player[Main.myPlayer].raven)
					{
						timeLeft = 2;
					}
				}
				for (int num521 = 0; num521 < 1000; num521++)
				{
					if (num521 != whoAmI && Main.projectile[num521].active && Main.projectile[num521].owner == owner && Main.projectile[num521].type == type && Math.Abs(base.position.X - Main.projectile[num521].position.X) + Math.Abs(base.position.Y - Main.projectile[num521].position.Y) < (float)width)
					{
						if (base.position.X < Main.projectile[num521].position.X)
						{
							base.velocity.X -= 0.05f;
						}
						else
						{
							base.velocity.X += 0.05f;
						}
						if (base.position.Y < Main.projectile[num521].position.Y)
						{
							base.velocity.Y -= 0.05f;
						}
						else
						{
							base.velocity.Y += 0.05f;
						}
					}
				}
				float num522 = base.position.X;
				float num523 = base.position.Y;
				float num524 = 900f;
				bool flag19 = false;
				int num525 = 500;
				if (this.ai[1] != 0f || friendly)
				{
					num525 = 1400;
				}
				if (Math.Abs(base.Center.X - Main.player[owner].Center.X) + Math.Abs(base.Center.Y - Main.player[owner].Center.Y) > (float)num525)
				{
					this.ai[0] = 1f;
				}
				if (this.ai[0] == 0f)
				{
					tileCollide = true;
					for (int num526 = 0; num526 < 200; num526++)
					{
						if (Main.npc[num526].CanBeChasedBy(this))
						{
							float num527 = Main.npc[num526].position.X + (float)(Main.npc[num526].width / 2);
							float num528 = Main.npc[num526].position.Y + (float)(Main.npc[num526].height / 2);
							float num529 = Math.Abs(base.position.X + (float)(width / 2) - num527) + Math.Abs(base.position.Y + (float)(height / 2) - num528);
							if (num529 < num524 && Collision.CanHit(base.position, width, height, Main.npc[num526].position, Main.npc[num526].width, Main.npc[num526].height))
							{
								num524 = num529;
								num522 = num527;
								num523 = num528;
								flag19 = true;
							}
						}
					}
				}
				else
				{
					tileCollide = false;
				}
				if (!flag19)
				{
					friendly = true;
					float num530 = 8f;
					if (this.ai[0] == 1f)
					{
						num530 = 12f;
					}
					Vector2 vector34 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num531 = Main.player[owner].Center.X - vector34.X;
					float num532 = Main.player[owner].Center.Y - vector34.Y - 60f;
					float num533 = (float)Math.Sqrt(num531 * num531 + num532 * num532);
					if (num533 < 100f && this.ai[0] == 1f && !Collision.SolidCollision(base.position, width, height))
					{
						this.ai[0] = 0f;
					}
					if (num533 > 2000f)
					{
						base.position.X = Main.player[owner].Center.X - (float)(width / 2);
						base.position.Y = Main.player[owner].Center.Y - (float)(width / 2);
					}
					if (num533 > 70f)
					{
						num533 = num530 / num533;
						num531 *= num533;
						num532 *= num533;
						base.velocity.X = (base.velocity.X * 20f + num531) / 21f;
						base.velocity.Y = (base.velocity.Y * 20f + num532) / 21f;
					}
					else
					{
						if (base.velocity.X == 0f && base.velocity.Y == 0f)
						{
							base.velocity.X = -0.15f;
							base.velocity.Y = -0.05f;
						}
						base.velocity *= 1.01f;
					}
					friendly = false;
					rotation = base.velocity.X * 0.05f;
					frameCounter++;
					if (frameCounter >= 4)
					{
						frameCounter = 0;
						frame++;
					}
					if (frame > 3)
					{
						frame = 0;
					}
					if ((double)Math.Abs(base.velocity.X) > 0.2)
					{
						spriteDirection = -base.direction;
					}
					return;
				}
				if (this.ai[1] == -1f)
				{
					this.ai[1] = 17f;
				}
				if (this.ai[1] > 0f)
				{
					this.ai[1] -= 1f;
				}
				if (this.ai[1] == 0f)
				{
					friendly = true;
					float num534 = 8f;
					Vector2 vector35 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num535 = num522 - vector35.X;
					float num536 = num523 - vector35.Y;
					float num537 = (float)Math.Sqrt(num535 * num535 + num536 * num536);
					if (num537 < 100f)
					{
						num534 = 10f;
					}
					num537 = num534 / num537;
					num535 *= num537;
					num536 *= num537;
					base.velocity.X = (base.velocity.X * 14f + num535) / 15f;
					base.velocity.Y = (base.velocity.Y * 14f + num536) / 15f;
				}
				else
				{
					friendly = false;
					if (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y) < 10f)
					{
						base.velocity *= 1.05f;
					}
				}
				rotation = base.velocity.X * 0.05f;
				frameCounter++;
				if (frameCounter >= 4)
				{
					frameCounter = 0;
					frame++;
				}
				if (frame < 4)
				{
					frame = 4;
				}
				if (frame > 7)
				{
					frame = 4;
				}
				if ((double)Math.Abs(base.velocity.X) > 0.2)
				{
					spriteDirection = -base.direction;
				}
			}
			else if (aiStyle == 55)
			{
				frameCounter++;
				if (frameCounter > 0)
				{
					frame++;
					frameCounter = 0;
					if (frame > 2)
					{
						frame = 0;
					}
				}
				if (base.velocity.X < 0f)
				{
					spriteDirection = -1;
					rotation = (float)Math.Atan2(0f - base.velocity.Y, 0f - base.velocity.X);
				}
				else
				{
					spriteDirection = 1;
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X);
				}
				if (this.ai[0] >= 0f && this.ai[0] < 200f)
				{
					int num538 = (int)this.ai[0];
					if (Main.npc[num538].active)
					{
						float num539 = 8f;
						Vector2 vector36 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						float num540 = Main.npc[num538].position.X - vector36.X;
						float num541 = Main.npc[num538].position.Y - vector36.Y;
						float num542 = (float)Math.Sqrt(num540 * num540 + num541 * num541);
						num542 = num539 / num542;
						num540 *= num542;
						num541 *= num542;
						base.velocity.X = (base.velocity.X * 14f + num540) / 15f;
						base.velocity.Y = (base.velocity.Y * 14f + num541) / 15f;
					}
					else
					{
						float num543 = 1000f;
						for (int num544 = 0; num544 < 200; num544++)
						{
							if (Main.npc[num544].CanBeChasedBy(this))
							{
								float num545 = Main.npc[num544].position.X + (float)(Main.npc[num544].width / 2);
								float num546 = Main.npc[num544].position.Y + (float)(Main.npc[num544].height / 2);
								float num547 = Math.Abs(base.position.X + (float)(width / 2) - num545) + Math.Abs(base.position.Y + (float)(height / 2) - num546);
								if (num547 < num543 && Collision.CanHit(base.position, width, height, Main.npc[num544].position, Main.npc[num544].width, Main.npc[num544].height))
								{
									num543 = num547;
									this.ai[0] = num544;
								}
							}
						}
					}
					int num548 = 8;
					int num549 = Dust.NewDust(new Vector2(base.position.X + (float)num548, base.position.Y + (float)num548), width - num548 * 2, height - num548 * 2, 6);
					Main.dust[num549].velocity *= 0.5f;
					Main.dust[num549].velocity += base.velocity * 0.5f;
					Main.dust[num549].noGravity = true;
					Main.dust[num549].noLight = true;
					Main.dust[num549].scale = 1.4f;
				}
				else
				{
					Kill();
				}
			}
			else if (aiStyle == 56)
			{
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					rotation = this.ai[0];
					spriteDirection = -(int)this.ai[1];
				}
				if (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y) < 16f)
				{
					base.velocity *= 1.05f;
				}
				if (base.velocity.X < 0f)
				{
					base.direction = -1;
				}
				else
				{
					base.direction = 1;
				}
				rotation += (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) * 0.025f * (float)base.direction;
			}
			else if (aiStyle == 57)
			{
				this.ai[0] += 1f;
				if (this.ai[0] > 30f)
				{
					this.ai[0] = 30f;
					base.velocity.Y += 0.25f;
					if (base.velocity.Y > 16f)
					{
						base.velocity.Y = 16f;
					}
					base.velocity.X *= 0.995f;
				}
				rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
				alpha -= 50;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (owner != Main.myPlayer)
				{
					return;
				}
				localAI[0] += 1f;
				if (!(localAI[0] >= 4f))
				{
					return;
				}
				localAI[0] = 0f;
				int num550 = 0;
				for (int num551 = 0; num551 < 1000; num551++)
				{
					if (Main.projectile[num551].active && Main.projectile[num551].owner == owner && Main.projectile[num551].type == 344)
					{
						num550++;
					}
				}
				float num552 = (float)damage * 0.8f;
				float num553 = 1f;
				if (num550 > 100)
				{
					num553 = num550 - 100;
					num553 = 1f - num553 / 100f;
					num552 *= num553;
				}
				if (num550 > 100)
				{
					localAI[0] -= 1f;
				}
				if (num550 > 120)
				{
					localAI[0] -= 1f;
				}
				if (num550 > 140)
				{
					localAI[0] -= 1f;
				}
				if (num550 > 150)
				{
					localAI[0] -= 1f;
				}
				if (num550 > 160)
				{
					localAI[0] -= 1f;
				}
				if (num550 > 165)
				{
					localAI[0] -= 1f;
				}
				if (num550 > 170)
				{
					localAI[0] -= 2f;
				}
				if (num550 > 175)
				{
					localAI[0] -= 3f;
				}
				if (num550 > 180)
				{
					localAI[0] -= 4f;
				}
				if (num550 > 185)
				{
					localAI[0] -= 5f;
				}
				if (num550 > 190)
				{
					localAI[0] -= 6f;
				}
				if (num550 > 195)
				{
					localAI[0] -= 7f;
				}
				if (num552 > (float)damage * 0.1f)
				{
					NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 344, (int)num552, knockBack * 0.55f, owner, 0f, Main.rand.Next(3));
				}
			}
			else if (aiStyle == 58)
			{
				alpha -= 50;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (this.ai[0] == 0f)
				{
					frame = 0;
					this.ai[1] += 1f;
					if (this.ai[1] > 30f)
					{
						base.velocity.Y += 0.1f;
					}
					if (base.velocity.Y >= 0f)
					{
						this.ai[0] = 1f;
					}
				}
				if (this.ai[0] == 1f)
				{
					frame = 1;
					base.velocity.Y += 0.1f;
					if (base.velocity.Y > 3f)
					{
						base.velocity.Y = 3f;
					}
					base.velocity.X *= 0.99f;
				}
				rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
			}
			else if (aiStyle == 59)
			{
				this.ai[1] += 1f;
				if (this.ai[1] >= 60f)
				{
					friendly = true;
					int num554 = (int)this.ai[0];
					if (!Main.npc[num554].active)
					{
						num554 = -1;
						int[] array2 = new int[200];
						int num555 = 0;
						for (int num556 = 0; num556 < 200; num556++)
						{
							if (Main.npc[num556].CanBeChasedBy(this))
							{
								float num557 = Math.Abs(Main.npc[num556].position.X + (float)(Main.npc[num556].width / 2) - base.position.X + (float)(width / 2)) + Math.Abs(Main.npc[num556].position.Y + (float)(Main.npc[num556].height / 2) - base.position.Y + (float)(height / 2));
								if (num557 < 800f)
								{
									array2[num555] = num556;
									num555++;
								}
							}
						}
						if (num555 == 0)
						{
							Kill();
							return;
						}
						num554 = array2[Main.rand.Next(num555)];
						this.ai[0] = num554;
					}
					float num558 = 4f;
					Vector2 vector37 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num559 = Main.npc[num554].Center.X - vector37.X;
					float num560 = Main.npc[num554].Center.Y - vector37.Y;
					float num561 = (float)Math.Sqrt(num559 * num559 + num560 * num560);
					num561 = num558 / num561;
					num559 *= num561;
					num560 *= num561;
					int num562 = 30;
					base.velocity.X = (base.velocity.X * (float)(num562 - 1) + num559) / (float)num562;
					base.velocity.Y = (base.velocity.Y * (float)(num562 - 1) + num560) / (float)num562;
				}
				for (int num563 = 0; num563 < 5; num563++)
				{
					float num564 = base.velocity.X * 0.2f * (float)num563;
					float num565 = (0f - base.velocity.Y * 0.2f) * (float)num563;
					int num566 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 175, 0f, 0f, 100, default(Color), 1.3f);
					Main.dust[num566].noGravity = true;
					Main.dust[num566].velocity *= 0f;
					Main.dust[num566].position.X -= num564;
					Main.dust[num566].position.Y -= num565;
				}
			}
			else if (aiStyle == 60)
			{
				scale -= 0.015f;
				if (scale <= 0f)
				{
					base.velocity *= 5f;
					oldVelocity = base.velocity;
					Kill();
				}
				if (this.ai[0] > 3f)
				{
					int num567 = 103;
					if (type == 406)
					{
						num567 = 137;
					}
					if (owner == Main.myPlayer)
					{
						Rectangle rectangle4 = new Rectangle((int)base.position.X, (int)base.position.Y, width, height);
						for (int num568 = 0; num568 < 200; num568++)
						{
							if (Main.npc[num568].active && !Main.npc[num568].dontTakeDamage && Main.npc[num568].lifeMax > 1)
							{
								Rectangle value10 = new Rectangle((int)Main.npc[num568].position.X, (int)Main.npc[num568].position.Y, Main.npc[num568].width, Main.npc[num568].height);
								if (rectangle4.Intersects(value10))
								{
									Main.npc[num568].AddBuff(num567, 1500);
									Kill();
								}
							}
						}
						for (int num569 = 0; num569 < 16; num569++)
						{
							if (num569 != owner && Main.player[num569].active && !Main.player[num569].dead)
							{
								Rectangle value11 = new Rectangle((int)Main.player[num569].position.X, (int)Main.player[num569].position.Y, Main.player[num569].width, Main.player[num569].height);
								if (rectangle4.Intersects(value11))
								{
									Main.player[num569].AddBuff(num567, 1500, false);
									Kill();
								}
							}
						}
					}
					this.ai[0] += this.ai[1];
					if (this.ai[0] > 30f)
					{
						base.velocity.Y += 0.1f;
					}
					if (type == 358)
					{
						for (int num570 = 0; num570 < 1; num570++)
						{
							for (int num571 = 0; num571 < 6; num571++)
							{
								float num572 = base.velocity.X / 6f * (float)num571;
								float num573 = base.velocity.Y / 6f * (float)num571;
								int num574 = 6;
								int num575 = Dust.NewDust(new Vector2(base.position.X + (float)num574, base.position.Y + (float)num574), width - num574 * 2, height - num574 * 2, 211, 0f, 0f, 75, default(Color), 1.2f);
								if (Main.rand.Next(2) == 0)
								{
									Main.dust[num575].alpha += 25;
								}
								if (Main.rand.Next(2) == 0)
								{
									Main.dust[num575].alpha += 25;
								}
								if (Main.rand.Next(2) == 0)
								{
									Main.dust[num575].alpha += 25;
								}
								Main.dust[num575].noGravity = true;
								Main.dust[num575].velocity *= 0.3f;
								Main.dust[num575].velocity += base.velocity * 0.5f;
								Main.dust[num575].position = base.Center;
								Main.dust[num575].position.X -= num572;
								Main.dust[num575].position.Y -= num573;
								Main.dust[num575].velocity *= 0.2f;
							}
							if (Main.rand.Next(4) == 0)
							{
								int num576 = 6;
								int num577 = Dust.NewDust(new Vector2(base.position.X + (float)num576, base.position.Y + (float)num576), width - num576 * 2, height - num576 * 2, 211, 0f, 0f, 75, default(Color), 0.65f);
								Main.dust[num577].velocity *= 0.5f;
								Main.dust[num577].velocity += base.velocity * 0.5f;
							}
						}
					}
					if (type != 406)
					{
						return;
					}
					int num578 = 175;
					Color newColor = new Color(0, 80, 255, 100);
					for (int num579 = 0; num579 < 6; num579++)
					{
						Vector2 vector38 = base.velocity * num579 / 6f;
						int num580 = 6;
						int num581 = Dust.NewDust(base.position + Vector2.One * 6f, width - num580 * 2, height - num580 * 2, 4, 0f, 0f, num578, newColor, 1.2f);
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num581].alpha += 25;
						}
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num581].alpha += 25;
						}
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num581].alpha += 25;
						}
						Main.dust[num581].noGravity = true;
						Main.dust[num581].velocity *= 0.3f;
						Main.dust[num581].velocity += base.velocity * 0.5f;
						Main.dust[num581].position = base.Center;
						Main.dust[num581].position.X -= vector38.X;
						Main.dust[num581].position.Y -= vector38.Y;
						Main.dust[num581].velocity *= 0.2f;
					}
					if (Main.rand.Next(4) == 0)
					{
						int num582 = 6;
						int num583 = Dust.NewDust(base.position + Vector2.One * 6f, width - num582 * 2, height - num582 * 2, 4, 0f, 0f, num578, newColor, 1.2f);
						Main.dust[num583].velocity *= 0.5f;
						Main.dust[num583].velocity += base.velocity * 0.5f;
					}
				}
				else
				{
					this.ai[0] += 1f;
				}
			}
			else if (aiStyle == 61)
			{
				timeLeft = 60;
				if (Main.player[owner].inventory[Main.player[owner].selectedItem].fishingPole == 0 || Main.player[owner].CCed || Main.player[owner].noItems)
				{
					Kill();
				}
				else if (Main.player[owner].inventory[Main.player[owner].selectedItem].shoot != type)
				{
					Kill();
				}
				else if (Main.player[owner].pulley)
				{
					Kill();
				}
				else if (Main.player[owner].dead)
				{
					Kill();
				}
				if (this.ai[1] > 0f && localAI[1] >= 0f)
				{
					localAI[1] = -1f;
					if (!lavaWet && !honeyWet)
					{
						for (int num584 = 0; num584 < 100; num584++)
						{
							int num585 = Dust.NewDust(new Vector2(base.position.X - 6f, base.position.Y - 10f), width + 12, 24, Dust.dustWater());
							Main.dust[num585].velocity.Y -= 4f;
							Main.dust[num585].velocity.X *= 2.5f;
							Main.dust[num585].scale = 0.8f;
							Main.dust[num585].alpha = 100;
							Main.dust[num585].noGravity = true;
						}
						Main.PlaySound(19, (int)base.position.X, (int)base.position.Y, 0);
					}
				}
				if (this.ai[0] >= 1f)
				{
					if (this.ai[0] == 2f)
					{
						this.ai[0] += 1f;
						Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 17);
						if (!lavaWet && !honeyWet)
						{
							for (int num586 = 0; num586 < 100; num586++)
							{
								int num587 = Dust.NewDust(new Vector2(base.position.X - 6f, base.position.Y - 10f), width + 12, 24, Dust.dustWater());
								Main.dust[num587].velocity.Y -= 4f;
								Main.dust[num587].velocity.X *= 2.5f;
								Main.dust[num587].scale = 0.8f;
								Main.dust[num587].alpha = 100;
								Main.dust[num587].noGravity = true;
							}
							Main.PlaySound(19, (int)base.position.X, (int)base.position.Y, 0);
						}
					}
					if (localAI[0] < 100f)
					{
						localAI[0] += 1f;
					}
					tileCollide = false;
					float num588 = 15.9f;
					int num589 = 10;
					Vector2 vector39 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num590 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector39.X;
					float num591 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector39.Y;
					float num592 = (float)Math.Sqrt(num590 * num590 + num591 * num591);
					if (num592 > 3000f)
					{
						Kill();
					}
					num592 = num588 / num592;
					num590 *= num592;
					num591 *= num592;
					base.velocity.X = (base.velocity.X * (float)(num589 - 1) + num590) / (float)num589;
					base.velocity.Y = (base.velocity.Y * (float)(num589 - 1) + num591) / (float)num589;
					if (Main.myPlayer == owner)
					{
						Rectangle rectangle5 = new Rectangle((int)base.position.X, (int)base.position.Y, width, height);
						Rectangle value12 = new Rectangle((int)Main.player[owner].position.X, (int)Main.player[owner].position.Y, Main.player[owner].width, Main.player[owner].height);
						if (rectangle5.Intersects(value12))
						{
							if (this.ai[1] > 0f && this.ai[1] < 3602f)
							{
								int num593 = (int)this.ai[1];
								Item ıtem = new Item();
								ıtem.SetDefaults(num593);
								if (num593 == 3196)
								{
									int num594 = Main.player[owner].FishingLevel();
									int minValue = (num594 / 20 + 3) / 2;
									int num595 = (num594 / 10 + 6) / 2;
									if (Main.rand.Next(50) < num594)
									{
										num595++;
									}
									if (Main.rand.Next(100) < num594)
									{
										num595++;
									}
									if (Main.rand.Next(150) < num594)
									{
										num595++;
									}
									if (Main.rand.Next(200) < num594)
									{
										num595++;
									}
									int num596 = ıtem.stack = Main.rand.Next(minValue, num595 + 1);
								}
								if (num593 == 3197)
								{
									int num597 = Main.player[owner].FishingLevel();
									int minValue2 = (num597 / 4 + 15) / 2;
									int num598 = (num597 / 2 + 30) / 2;
									if (Main.rand.Next(50) < num597)
									{
										num598 += 4;
									}
									if (Main.rand.Next(100) < num597)
									{
										num598 += 4;
									}
									if (Main.rand.Next(150) < num597)
									{
										num598 += 4;
									}
									if (Main.rand.Next(200) < num597)
									{
										num598 += 4;
									}
									int num599 = ıtem.stack = Main.rand.Next(minValue2, num598 + 1);
								}
								ıtem.newAndShiny = true;
								Item ıtem2 = Main.player[owner].GetItem(owner, ıtem);
								if (ıtem2.stack > 0)
								{
									int number2 = Item.NewItem((int)base.position.X, (int)base.position.Y, width, height, num593, 1, false, 0, true);
									if (Main.netMode == 1)
									{
										NetMessage.SendData(21, -1, -1, "", number2, 1f);
									}
								}
								else
								{
									ıtem.position.X = base.Center.X - (float)(ıtem.width / 2);
									ıtem.position.Y = base.Center.Y - (float)(ıtem.height / 2);
									ıtem.active = true;
									ItemText.NewText(ıtem, 0);
								}
							}
							Kill();
						}
					}
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
					return;
				}
				bool flag20 = false;
				Vector2 vector40 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num600 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector40.X;
				float num601 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector40.Y;
				rotation = (float)Math.Atan2(num601, num600) + 1.57f;
				float num602 = (float)Math.Sqrt(num600 * num600 + num601 * num601);
				if (num602 > 900f)
				{
					this.ai[0] = 1f;
				}
				if (wet)
				{
					rotation = 0f;
					base.velocity.X *= 0.9f;
					int num603 = (int)(base.Center.X + (float)((width / 2 + 8) * base.direction)) / 16;
					int num604 = (int)(base.Center.Y / 16f);
					float num1109 = base.position.Y / 16f;
					int num605 = (int)((base.position.Y + (float)height) / 16f);
					if (Main.tile[num603, num604] == null)
					{
						Main.tile[num603, num604] = new Tile();
					}
					if (Main.tile[num603, num605] == null)
					{
						Main.tile[num603, num605] = new Tile();
					}
					if (base.velocity.Y > 0f)
					{
						base.velocity.Y *= 0.5f;
					}
					num603 = (int)(base.Center.X / 16f);
					num604 = (int)(base.Center.Y / 16f);
					float num606 = base.position.Y + (float)height;
					if (Main.tile[num603, num604 - 1] == null)
					{
						Main.tile[num603, num604 - 1] = new Tile();
					}
					if (Main.tile[num603, num604] == null)
					{
						Main.tile[num603, num604] = new Tile();
					}
					if (Main.tile[num603, num604 + 1] == null)
					{
						Main.tile[num603, num604 + 1] = new Tile();
					}
					if (Main.tile[num603, num604 - 1].liquid > 0)
					{
						num606 = num604 * 16;
						num606 -= (float)((int)Main.tile[num603, num604 - 1].liquid / 16);
					}
					else if (Main.tile[num603, num604].liquid > 0)
					{
						num606 = (num604 + 1) * 16;
						num606 -= (float)((int)Main.tile[num603, num604].liquid / 16);
					}
					else if (Main.tile[num603, num604 + 1].liquid > 0)
					{
						num606 = (num604 + 2) * 16;
						num606 -= (float)((int)Main.tile[num603, num604 + 1].liquid / 16);
					}
					if (base.Center.Y > num606)
					{
						base.velocity.Y -= 0.1f;
						if (base.velocity.Y < -8f)
						{
							base.velocity.Y = -8f;
						}
						if (base.Center.Y + base.velocity.Y < num606)
						{
							base.velocity.Y = num606 - base.Center.Y;
						}
					}
					else
					{
						base.velocity.Y = num606 - base.Center.Y;
					}
					if ((double)base.velocity.Y >= -0.01 && (double)base.velocity.Y <= 0.01)
					{
						flag20 = true;
					}
				}
				else
				{
					if (base.velocity.Y == 0f)
					{
						base.velocity.X *= 0.95f;
					}
					base.velocity.X *= 0.98f;
					base.velocity.Y += 0.2f;
					if (base.velocity.Y > 15.9f)
					{
						base.velocity.Y = 15.9f;
					}
				}
				if (this.ai[1] != 0f)
				{
					flag20 = true;
				}
				if (!flag20)
				{
					return;
				}
				if (this.ai[1] == 0f && Main.myPlayer == owner)
				{
					int num607 = Main.player[owner].FishingLevel();
					if (num607 == -9000)
					{
						localAI[1] += 5f;
						localAI[1] += Main.rand.Next(1, 3);
						if (localAI[1] > 660f)
						{
							localAI[1] = 0f;
							FishingCheck();
						}
						return;
					}
					if (Main.rand.Next(300) < num607)
					{
						localAI[1] += Main.rand.Next(1, 3);
					}
					localAI[1] += num607 / 30;
					localAI[1] += Main.rand.Next(1, 3);
					if (Main.rand.Next(60) == 0)
					{
						localAI[1] += 60f;
					}
					if (localAI[1] > 660f)
					{
						localAI[1] = 0f;
						FishingCheck();
					}
				}
				else if (this.ai[1] < 0f)
				{
					if (base.velocity.Y == 0f || (honeyWet && (double)base.velocity.Y >= -0.01 && (double)base.velocity.Y <= 0.01))
					{
						base.velocity.Y = (float)Main.rand.Next(100, 500) * 0.015f;
						base.velocity.X = (float)Main.rand.Next(-100, 101) * 0.015f;
						wet = false;
						lavaWet = false;
						honeyWet = false;
					}
					this.ai[1] += Main.rand.Next(1, 5);
					if (this.ai[1] >= 0f)
					{
						this.ai[1] = 0f;
						localAI[1] = 0f;
						netUpdate = true;
					}
				}
			}
			else if (aiStyle == 62)
			{
				AI_062();
			}
			else if (aiStyle == 63)
			{
				if (!Main.player[owner].active)
				{
					active = false;
					return;
				}
				Vector2 value13 = base.position;
				bool flag21 = false;
				float num608 = 500f;
				for (int num609 = 0; num609 < 200; num609++)
				{
					NPC nPC = Main.npc[num609];
					if (nPC.CanBeChasedBy(this))
					{
						float num610 = Vector2.Distance(nPC.Center, base.Center);
						if (((Vector2.Distance(base.Center, value13) > num610 && num610 < num608) || !flag21) && Collision.CanHit(base.position, width, height, nPC.position, nPC.width, nPC.height))
						{
							num608 = num610;
							value13 = nPC.Center;
							flag21 = true;
						}
					}
				}
				if (!flag21)
				{
					base.velocity.X *= 0.95f;
				}
				else
				{
					float num611 = 5f;
					float num612 = 0.08f;
					if (base.velocity.Y == 0f)
					{
						bool flag22 = false;
						if (base.Center.Y - 50f > value13.Y)
						{
							flag22 = true;
						}
						if (flag22)
						{
							base.velocity.Y = -6f;
						}
					}
					else
					{
						num611 = 8f;
						num612 = 0.12f;
					}
					base.velocity.X += (float)Math.Sign(value13.X - base.Center.X) * num612;
					if (base.velocity.X < 0f - num611)
					{
						base.velocity.X = 0f - num611;
					}
					if (base.velocity.X > num611)
					{
						base.velocity.X = num611;
					}
				}
				float num613 = 0f;
				Collision.StepUp(ref base.position, ref base.velocity, width, height, ref num613, ref gfxOffY);
				if (base.velocity.Y != 0f)
				{
					frame = 3;
				}
				else
				{
					if (Math.Abs(base.velocity.X) > 0.2f)
					{
						frameCounter++;
					}
					if (frameCounter >= 9)
					{
						frameCounter = 0;
					}
					if (frameCounter >= 6)
					{
						frame = 2;
					}
					else if (frameCounter >= 3)
					{
						frame = 1;
					}
					else
					{
						frame = 0;
					}
				}
				if (base.velocity.X != 0f)
				{
					base.direction = Math.Sign(base.velocity.X);
				}
				spriteDirection = -base.direction;
				base.velocity.Y += 0.2f;
				if (base.velocity.Y > 16f)
				{
					base.velocity.Y = 16f;
				}
			}
			else if (aiStyle == 64)
			{
				int num614 = 10;
				int num615 = 15;
				float num616 = 1f;
				int num617 = 150;
				int num618 = 42;
				if (type == 386)
				{
					num614 = 16;
					num615 = 16;
					num616 = 1.5f;
				}
				if (base.velocity.X != 0f)
				{
					base.direction = (spriteDirection = -Math.Sign(base.velocity.X));
				}
				frameCounter++;
				if (frameCounter > 2)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame >= 6)
				{
					frame = 0;
				}
				if (localAI[0] == 0f && Main.myPlayer == owner)
				{
					localAI[0] = 1f;
					base.position.X += width / 2;
					base.position.Y += height / 2;
					scale = ((float)(num614 + num615) - this.ai[1]) * num616 / (float)(num615 + num614);
					width = (int)((float)num617 * scale);
					height = (int)((float)num618 * scale);
					base.position.X -= width / 2;
					base.position.Y -= height / 2;
					netUpdate = true;
				}
				if (this.ai[1] != -1f)
				{
					scale = ((float)(num614 + num615) - this.ai[1]) * num616 / (float)(num615 + num614);
					width = (int)((float)num617 * scale);
					height = (int)((float)num618 * scale);
				}
				if (!Collision.SolidCollision(base.position, width, height))
				{
					alpha -= 30;
					if (alpha < 60)
					{
						alpha = 60;
					}
					if (type == 386 && alpha < 100)
					{
						alpha = 100;
					}
				}
				else
				{
					alpha += 30;
					if (alpha > 150)
					{
						alpha = 150;
					}
				}
				if (this.ai[0] > 0f)
				{
					this.ai[0] -= 1f;
				}
				if (this.ai[0] == 1f && this.ai[1] > 0f && owner == Main.myPlayer)
				{
					netUpdate = true;
					Vector2 center = base.Center;
					center.Y -= (float)num618 * scale / 2f;
					float num619 = ((float)(num614 + num615) - this.ai[1] + 1f) * num616 / (float)(num615 + num614);
					center.Y -= (float)num618 * num619 / 2f;
					center.Y += 2f;
					NewProjectile(center.X, center.Y, base.velocity.X, base.velocity.Y, type, damage, knockBack, owner, 10f, this.ai[1] - 1f);
					int num620 = 4;
					if (type == 386)
					{
						num620 = 2;
					}
					if ((int)this.ai[1] % num620 == 0 && this.ai[1] != 0f)
					{
						int num621 = 372;
						if (type == 386)
						{
							num621 = 373;
						}
						int num622 = NPC.NewNPC((int)center.X, (int)center.Y, num621);
						Main.npc[num622].velocity = base.velocity;
						Main.npc[num622].netUpdate = true;
						if (type == 386)
						{
							Main.npc[num622].ai[2] = width;
							Main.npc[num622].ai[3] = -1.5f;
						}
					}
				}
				if (this.ai[0] <= 0f)
				{
					float num623 = (float)Math.PI / 30f;
					float num624 = (float)width / 5f;
					if (type == 386)
					{
						num624 *= 2f;
					}
					float num625 = (float)(Math.Cos(num623 * (0f - this.ai[0])) - 0.5) * num624;
					base.position.X -= num625 * (float)(-base.direction);
					this.ai[0] -= 1f;
					num625 = (float)(Math.Cos(num623 * (0f - this.ai[0])) - 0.5) * num624;
					base.position.X += num625 * (float)(-base.direction);
				}
			}
			else if (aiStyle == 65)
			{
				if (this.ai[1] > 0f)
				{
					int num626 = (int)this.ai[1] - 1;
					if (num626 < 16)
					{
						localAI[0] += 1f;
						if (localAI[0] > 10f)
						{
							int num627 = 6;
							for (int num628 = 0; num628 < num627; num628++)
							{
								Vector2 spinningpoint = Vector2.Normalize(base.velocity) * new Vector2((float)width / 2f, height) * 0.75f;
								spinningpoint = spinningpoint.RotatedBy((double)(num628 - (num627 / 2 - 1)) * Math.PI / (double)(float)num627) + base.Center;
								Vector2 value14 = ((float)(Main.rand.NextDouble() * 3.1415927410125732) - (float)Math.PI / 2f).ToRotationVector2() * Main.rand.Next(3, 8);
								int num629 = Dust.NewDust(spinningpoint + value14, 0, 0, 172, value14.X * 2f, value14.Y * 2f, 100, default(Color), 1.4f);
								Main.dust[num629].noGravity = true;
								Main.dust[num629].noLight = true;
								Main.dust[num629].velocity /= 4f;
								Main.dust[num629].velocity -= base.velocity;
							}
							alpha -= 5;
							if (alpha < 100)
							{
								alpha = 100;
							}
							rotation += base.velocity.X * 0.1f;
							frame = (int)(localAI[0] / 3f) % 3;
						}
						Vector2 value15 = Main.player[num626].Center - base.Center;
						float num630 = 4f;
						num630 += localAI[0] / 20f;
						base.velocity = Vector2.Normalize(value15) * num630;
						if (value15.Length() < 50f)
						{
							Kill();
						}
					}
				}
				else
				{
					float num631 = (float)Math.PI / 15f;
					float num632 = 4f;
					float num633 = (float)(Math.Cos(num631 * this.ai[0]) - 0.5) * num632;
					base.velocity.Y -= num633;
					this.ai[0] += 1f;
					num633 = (float)(Math.Cos(num631 * this.ai[0]) - 0.5) * num632;
					base.velocity.Y += num633;
					localAI[0] += 1f;
					if (localAI[0] > 10f)
					{
						alpha -= 5;
						if (alpha < 100)
						{
							alpha = 100;
						}
						rotation += base.velocity.X * 0.1f;
						frame = (int)(localAI[0] / 3f) % 3;
					}
				}
				if (wet)
				{
					base.position.Y -= 16f;
					Kill();
				}
			}
			else if (aiStyle == 66)
			{
				float num634 = 0f;
				float num635 = 0f;
				float num636 = 0f;
				float num637 = 0f;
				if (type == 387 || type == 388)
				{
					num634 = 700f;
					num635 = 800f;
					num636 = 1200f;
					num637 = 150f;
					if (Main.player[owner].dead)
					{
						Main.player[owner].twinsMinion = false;
					}
					if (Main.player[owner].twinsMinion)
					{
						timeLeft = 2;
					}
				}
				if (type == 533)
				{
					num634 = 1500f;
					num635 = 900f;
					num636 = 1500f;
					num637 = 450f;
					if (Main.player[owner].dead)
					{
						Main.player[owner].DeadlySphereMinion = false;
					}
					if (Main.player[owner].DeadlySphereMinion)
					{
						timeLeft = 2;
					}
				}
				float num638 = 0.05f;
				for (int num639 = 0; num639 < 1000; num639++)
				{
					bool flag23 = (Main.projectile[num639].type == 387 || Main.projectile[num639].type == 388) && (type == 387 || type == 388);
					if (!flag23)
					{
						flag23 = (type == 533 && Main.projectile[num639].type == 533);
					}
					if (num639 != whoAmI && Main.projectile[num639].active && Main.projectile[num639].owner == owner && flag23 && Math.Abs(base.position.X - Main.projectile[num639].position.X) + Math.Abs(base.position.Y - Main.projectile[num639].position.Y) < (float)width)
					{
						if (base.position.X < Main.projectile[num639].position.X)
						{
							base.velocity.X -= num638;
						}
						else
						{
							base.velocity.X += num638;
						}
						if (base.position.Y < Main.projectile[num639].position.Y)
						{
							base.velocity.Y -= num638;
						}
						else
						{
							base.velocity.Y += num638;
						}
					}
				}
				if (type == 533)
				{
					if ((int)this.ai[0] % 3 != 2)
					{
						Lighting.AddLight(base.Center, 0.8f, 0.3f, 0.1f);
					}
					else
					{
						Lighting.AddLight(base.Center, 0.3f, 0.5f, 0.7f);
					}
				}
				bool flag24 = false;
				if (this.ai[0] == 2f && type == 388)
				{
					this.ai[1] += 1f;
					extraUpdates = 1;
					rotation = base.velocity.ToRotation() + (float)Math.PI;
					frameCounter++;
					if (frameCounter > 1)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 2)
					{
						frame = 0;
					}
					if (this.ai[1] > 40f)
					{
						this.ai[1] = 1f;
						this.ai[0] = 0f;
						extraUpdates = 0;
						numUpdates = 0;
						netUpdate = true;
					}
					else
					{
						flag24 = true;
					}
				}
				if (type == 533 && this.ai[0] >= 3f && this.ai[0] <= 5f)
				{
					int num640 = 2;
					flag24 = true;
					base.velocity *= 0.9f;
					this.ai[1] += 1f;
					int num641 = (int)this.ai[1] / num640 + (int)(this.ai[0] - 3f) * 8;
					if (num641 < 4)
					{
						frame = 17 + num641;
					}
					else if (num641 < 5)
					{
						frame = 0;
					}
					else if (num641 < 8)
					{
						frame = 1 + num641 - 5;
					}
					else if (num641 < 11)
					{
						frame = 11 - num641;
					}
					else if (num641 < 12)
					{
						frame = 0;
					}
					else if (num641 < 16)
					{
						frame = num641 - 2;
					}
					else if (num641 < 20)
					{
						frame = 29 - num641;
					}
					else if (num641 < 21)
					{
						frame = 0;
					}
					else
					{
						frame = num641 - 4;
					}
					if (this.ai[1] > (float)(num640 * 8))
					{
						this.ai[0] -= 3f;
						this.ai[1] = 0f;
					}
				}
				if (type == 533 && this.ai[0] >= 6f && this.ai[0] <= 8f)
				{
					this.ai[1] += 1f;
					MaxUpdates = 2;
					if (this.ai[0] == 7f)
					{
						rotation = base.velocity.ToRotation() + (float)Math.PI;
					}
					else
					{
						rotation += (float)Math.PI / 6f;
					}
					int num642 = 0;
					switch ((int)this.ai[0])
					{
					case 6:
						frame = 5;
						num642 = 40;
						break;
					case 7:
						frame = 13;
						num642 = 30;
						break;
					case 8:
						frame = 17;
						num642 = 30;
						break;
					}
					if (this.ai[1] > (float)num642)
					{
						this.ai[1] = 1f;
						this.ai[0] -= 6f;
						localAI[0] += 1f;
						extraUpdates = 0;
						numUpdates = 0;
						netUpdate = true;
					}
					else
					{
						flag24 = true;
					}
					if (this.ai[0] == 8f)
					{
						for (int num643 = 0; num643 < 4; num643++)
						{
							int num644 = Utils.SelectRandom<int>(Main.rand, 226, 228, 75);
							int num645 = Dust.NewDust(base.Center, 0, 0, num644);
							Dust dust = Main.dust[num645];
							Vector2 value16 = Vector2.One.RotatedBy((float)num643 * ((float)Math.PI / 2f)).RotatedBy(rotation);
							dust.position = base.Center + value16 * 10f;
							dust.velocity = value16 * 1f;
							dust.scale = 0.6f + Main.rand.NextFloat() * 0.5f;
							dust.noGravity = true;
						}
					}
				}
				if (flag24)
				{
					return;
				}
				Vector2 vector41 = base.position;
				bool flag25 = false;
				if (this.ai[0] != 1f && (type == 387 || type == 388))
				{
					tileCollide = true;
				}
				if (type == 533 && this.ai[0] < 9f)
				{
					tileCollide = true;
				}
				if (tileCollide && WorldGen.SolidTile(Framing.GetTileSafely((int)base.Center.X / 16, (int)base.Center.Y / 16)))
				{
					tileCollide = false;
				}
				for (int num646 = 0; num646 < 200; num646++)
				{
					NPC nPC2 = Main.npc[num646];
					if (nPC2.CanBeChasedBy(this))
					{
						float num647 = Vector2.Distance(nPC2.Center, base.Center);
						if (((Vector2.Distance(base.Center, vector41) > num647 && num647 < num634) || !flag25) && Collision.CanHitLine(base.position, width, height, nPC2.position, nPC2.width, nPC2.height))
						{
							num634 = num647;
							vector41 = nPC2.Center;
							flag25 = true;
						}
					}
				}
				float num648 = num635;
				if (flag25)
				{
					num648 = num636;
				}
				Player player = Main.player[owner];
				if (Vector2.Distance(player.Center, base.Center) > num648)
				{
					if (type == 387 || type == 388)
					{
						this.ai[0] = 1f;
					}
					if (type == 533 && this.ai[0] < 9f)
					{
						this.ai[0] += 3 * (3 - (int)(this.ai[0] / 3f));
					}
					tileCollide = false;
					netUpdate = true;
				}
				if ((type == 388 || type == 387) && flag25 && this.ai[0] == 0f)
				{
					Vector2 value17 = vector41 - base.Center;
					float num649 = value17.Length();
					value17.Normalize();
					if (num649 > 200f)
					{
						float num650 = 6f;
						if (type == 388)
						{
							num650 = 8f;
						}
						value17 *= num650;
						base.velocity = (base.velocity * 40f + value17) / 41f;
					}
					else
					{
						float num651 = 4f;
						value17 *= 0f - num651;
						base.velocity = (base.velocity * 40f + value17) / 41f;
					}
				}
				else
				{
					bool flag26 = false;
					if (!flag26)
					{
						flag26 = (this.ai[0] == 1f && (type == 387 || type == 388));
					}
					if (!flag26)
					{
						flag26 = (this.ai[0] >= 9f && type == 533);
					}
					float num652 = 6f;
					if (type == 533)
					{
						num652 = 12f;
					}
					if (flag26)
					{
						num652 = 15f;
					}
					Vector2 center2 = base.Center;
					Vector2 value18 = player.Center - center2 + new Vector2(0f, -60f);
					float num653 = value18.Length();
					if (num653 > 200f && num652 < 8f)
					{
						num652 = 8f;
					}
					if (num653 < num637 && flag26 && !Collision.SolidCollision(base.position, width, height))
					{
						if (type == 387 || type == 388)
						{
							this.ai[0] = 0f;
						}
						if (type == 533)
						{
							this.ai[0] -= 9f;
						}
						netUpdate = true;
					}
					if (num653 > 2000f)
					{
						base.position.X = Main.player[owner].Center.X - (float)(width / 2);
						base.position.Y = Main.player[owner].Center.Y - (float)(height / 2);
						netUpdate = true;
					}
					if (num653 > 70f)
					{
						value18.Normalize();
						value18 *= num652;
						base.velocity = (base.velocity * 40f + value18) / 41f;
					}
					else if (base.velocity.X == 0f && base.velocity.Y == 0f)
					{
						base.velocity.X = -0.15f;
						base.velocity.Y = -0.05f;
					}
				}
				if (type == 388)
				{
					rotation = base.velocity.ToRotation() + (float)Math.PI;
				}
				if (type == 387)
				{
					if (flag25)
					{
						rotation = (vector41 - base.Center).ToRotation() + (float)Math.PI;
					}
					else
					{
						rotation = base.velocity.ToRotation() + (float)Math.PI;
					}
				}
				if (type == 533 && (this.ai[0] < 3f || this.ai[0] >= 9f))
				{
					rotation += base.velocity.X * 0.04f;
				}
				if (type == 388 || type == 387)
				{
					frameCounter++;
					if (frameCounter > 3)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 2)
					{
						frame = 0;
					}
				}
				else if (type == 533)
				{
					if (this.ai[0] < 3f || this.ai[0] >= 9f)
					{
						frameCounter++;
						if (frameCounter >= 24)
						{
							frameCounter = 0;
						}
						int num654 = frameCounter / 4;
						frame = 4 + num654;
						switch ((int)this.ai[0])
						{
						case 0:
						case 9:
							frame = 4 + num654;
							break;
						case 1:
						case 10:
							num654 = frameCounter / 8;
							frame = 14 + num654;
							break;
						case 2:
						case 11:
							num654 = frameCounter / 3;
							if (num654 >= 4)
							{
								num654 -= 4;
							}
							frame = 17 + num654;
							break;
						}
					}
					if (this.ai[0] == 2f && Main.rand.Next(2) == 0)
					{
						for (int num655 = 0; num655 < 4; num655++)
						{
							if (Main.rand.Next(2) != 0)
							{
								int num656 = Utils.SelectRandom<int>(Main.rand, 226, 228, 75);
								int num657 = Dust.NewDust(base.Center, 0, 0, num656);
								Dust dust2 = Main.dust[num657];
								Vector2 value19 = Vector2.One.RotatedBy((float)num655 * ((float)Math.PI / 2f)).RotatedBy(rotation);
								dust2.position = base.Center + value19 * 10f;
								dust2.velocity = value19 * 1f;
								dust2.scale = 0.3f + Main.rand.NextFloat() * 0.5f;
								dust2.noGravity = true;
								dust2.customData = this;
								dust2.noLight = true;
							}
						}
					}
				}
				if (this.ai[1] > 0f && (type == 387 || type == 388))
				{
					this.ai[1] += Main.rand.Next(1, 4);
				}
				if (this.ai[1] > 90f && type == 387)
				{
					this.ai[1] = 0f;
					netUpdate = true;
				}
				if (this.ai[1] > 40f && type == 388)
				{
					this.ai[1] = 0f;
					netUpdate = true;
				}
				if (this.ai[1] > 0f && type == 533)
				{
					this.ai[1] += 1f;
					int num658 = 10;
					if (this.ai[1] > (float)num658)
					{
						this.ai[1] = 0f;
						netUpdate = true;
					}
				}
				if (this.ai[0] == 0f && (type == 387 || type == 388))
				{
					if (type == 387)
					{
						float num659 = 8f;
						int num660 = 389;
						if (flag25 && this.ai[1] == 0f)
						{
							this.ai[1] += 1f;
							if (Main.myPlayer == owner && Collision.CanHitLine(base.position, width, height, vector41, 0, 0))
							{
								Vector2 vector42 = vector41 - base.Center;
								vector42.Normalize();
								vector42 *= num659;
								int num661 = NewProjectile(base.Center.X, base.Center.Y, vector42.X, vector42.Y, num660, (int)((float)damage * 0.8f), 0f, Main.myPlayer);
								Main.projectile[num661].timeLeft = 300;
								netUpdate = true;
							}
						}
					}
					if (type == 388 && this.ai[1] == 0f && flag25 && num634 < 500f)
					{
						this.ai[1] += 1f;
						if (Main.myPlayer == owner)
						{
							this.ai[0] = 2f;
							Vector2 value20 = vector41 - base.Center;
							value20.Normalize();
							base.velocity = value20 * 8f;
							netUpdate = true;
						}
					}
				}
				else
				{
					if (type != 533 || !(this.ai[0] < 3f))
					{
						return;
					}
					int num662 = 0;
					switch ((int)this.ai[0])
					{
					case 0:
					case 3:
					case 6:
						num662 = 400;
						break;
					case 1:
					case 4:
					case 7:
						num662 = 400;
						break;
					case 2:
					case 5:
					case 8:
						num662 = 600;
						break;
					}
					if (this.ai[1] != 0f || !flag25 || !(num634 < (float)num662))
					{
						return;
					}
					this.ai[1] += 1f;
					if (Main.myPlayer != owner)
					{
						return;
					}
					if (localAI[0] >= 3f)
					{
						this.ai[0] += 4f;
						if (this.ai[0] == 6f)
						{
							this.ai[0] = 3f;
						}
						localAI[0] = 0f;
					}
					else
					{
						this.ai[0] += 6f;
						Vector2 value21 = vector41 - base.Center;
						value21.Normalize();
						float scaleFactor = (this.ai[0] == 8f) ? 12f : 10f;
						base.velocity = value21 * scaleFactor;
						netUpdate = true;
					}
				}
			}
			else if (aiStyle == 67)
			{
				Player player2 = Main.player[owner];
				if (!player2.active)
				{
					active = false;
					return;
				}
				bool flag27 = type == 393 || type == 394 || type == 395;
				if (flag27)
				{
					if (player2.dead)
					{
						player2.pirateMinion = false;
					}
					if (player2.pirateMinion)
					{
						timeLeft = 2;
					}
				}
				if (type == 500)
				{
					if (player2.dead)
					{
						player2.crimsonHeart = false;
					}
					if (player2.crimsonHeart)
					{
						timeLeft = 2;
					}
				}
				Vector2 vector43 = player2.Center;
				if (flag27)
				{
					vector43.X -= (15 + player2.width / 2) * player2.direction;
					vector43.X -= minionPos * 40 * player2.direction;
				}
				if (type == 500)
				{
					vector43.X -= (15 + player2.width / 2) * player2.direction;
					vector43.X -= 40 * player2.direction;
				}
				if (type == 500)
				{
					Lighting.AddLight(base.Center, 0.9f, 0.1f, 0.3f);
					int num663 = 6;
					if (frame == 0 || frame == 2)
					{
						num663 = 12;
					}
					if (++frameCounter >= num663)
					{
						frameCounter = 0;
						if (++frame >= Main.projFrames[type])
						{
							frame = 0;
						}
					}
					rotation += base.velocity.X / 20f;
					Vector2 vector44 = (-Vector2.UnitY).RotatedBy(rotation).RotatedBy((float)base.direction * 0.2f);
					int num664 = Dust.NewDust(base.Center + vector44 * 10f - new Vector2(4f), 0, 0, 5, vector44.X, vector44.Y, 0, Color.Transparent);
					Main.dust[num664].scale = 1f;
					Main.dust[num664].velocity = vector44.RotatedByRandom(0.78539818525314331) * 3.5f;
					Main.dust[num664].noGravity = true;
					Main.dust[num664].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cLight, Main.player[owner]);
				}
				bool flag28 = true;
				if (type == 500)
				{
					flag28 = false;
				}
				int num665 = -1;
				float num666 = 450f;
				if (flag27)
				{
					num666 = 800f;
				}
				int num667 = 15;
				if (this.ai[0] == 0f && flag28)
				{
					for (int num668 = 0; num668 < 200; num668++)
					{
						NPC nPC3 = Main.npc[num668];
						if (nPC3.CanBeChasedBy(this))
						{
							float num669 = (nPC3.Center - base.Center).Length();
							if (num669 < num666)
							{
								num665 = num668;
								num666 = num669;
							}
						}
					}
				}
				if (this.ai[0] == 1f)
				{
					tileCollide = false;
					float num670 = 0.2f;
					float num671 = 10f;
					int num672 = 200;
					if (num671 < Math.Abs(player2.velocity.X) + Math.Abs(player2.velocity.Y))
					{
						num671 = Math.Abs(player2.velocity.X) + Math.Abs(player2.velocity.Y);
					}
					Vector2 vector45 = player2.Center - base.Center;
					float num673 = vector45.Length();
					if (num673 > 2000f)
					{
						base.position = player2.Center - new Vector2(width, height) / 2f;
					}
					if (num673 < (float)num672 && player2.velocity.Y == 0f && base.position.Y + (float)height <= player2.position.Y + (float)player2.height && !Collision.SolidCollision(base.position, width, height))
					{
						this.ai[0] = 0f;
						netUpdate = true;
						if (base.velocity.Y < -6f)
						{
							base.velocity.Y = -6f;
						}
					}
					if (!(num673 < 60f))
					{
						vector45.Normalize();
						vector45 *= num671;
						if (base.velocity.X < vector45.X)
						{
							base.velocity.X += num670;
							if (base.velocity.X < 0f)
							{
								base.velocity.X += num670 * 1.5f;
							}
						}
						if (base.velocity.X > vector45.X)
						{
							base.velocity.X -= num670;
							if (base.velocity.X > 0f)
							{
								base.velocity.X -= num670 * 1.5f;
							}
						}
						if (base.velocity.Y < vector45.Y)
						{
							base.velocity.Y += num670;
							if (base.velocity.Y < 0f)
							{
								base.velocity.Y += num670 * 1.5f;
							}
						}
						if (base.velocity.Y > vector45.Y)
						{
							base.velocity.Y -= num670;
							if (base.velocity.Y > 0f)
							{
								base.velocity.Y -= num670 * 1.5f;
							}
						}
					}
					if (base.velocity.X != 0f)
					{
						spriteDirection = Math.Sign(base.velocity.X);
					}
					if (flag27)
					{
						frameCounter++;
						if (frameCounter > 3)
						{
							frame++;
							frameCounter = 0;
						}
						if ((frame < 10) | (frame > 13))
						{
							frame = 10;
						}
						rotation = base.velocity.X * 0.1f;
					}
				}
				if (this.ai[0] == 2f)
				{
					friendly = true;
					spriteDirection = base.direction;
					rotation = 0f;
					frame = 4 + (int)((float)num667 - this.ai[1]) / (num667 / 3);
					if (base.velocity.Y != 0f)
					{
						frame += 3;
					}
					base.velocity.Y += 0.4f;
					if (base.velocity.Y > 10f)
					{
						base.velocity.Y = 10f;
					}
					this.ai[1] -= 1f;
					if (this.ai[1] <= 0f)
					{
						this.ai[1] = 0f;
						this.ai[0] = 0f;
						friendly = false;
						netUpdate = true;
						return;
					}
				}
				if (num665 >= 0)
				{
					float num674 = 400f;
					float num675 = 20f;
					if (flag27)
					{
						num674 = 700f;
					}
					if ((double)base.position.Y > Main.worldSurface * 16.0)
					{
						num674 *= 0.7f;
					}
					NPC nPC4 = Main.npc[num665];
					Vector2 center3 = nPC4.Center;
					float num676 = (center3 - base.Center).Length();
					Collision.CanHit(base.position, width, height, nPC4.position, nPC4.width, nPC4.height);
					if (num676 < num674)
					{
						vector43 = center3;
						if (center3.Y < base.Center.Y - 30f && base.velocity.Y == 0f)
						{
							float num677 = Math.Abs(center3.Y - base.Center.Y);
							if (num677 < 120f)
							{
								base.velocity.Y = -10f;
							}
							else if (num677 < 210f)
							{
								base.velocity.Y = -13f;
							}
							else if (num677 < 270f)
							{
								base.velocity.Y = -15f;
							}
							else if (num677 < 310f)
							{
								base.velocity.Y = -17f;
							}
							else if (num677 < 380f)
							{
								base.velocity.Y = -18f;
							}
						}
					}
					if (num676 < num675)
					{
						this.ai[0] = 2f;
						this.ai[1] = num667;
						netUpdate = true;
					}
				}
				if (this.ai[0] == 0f && num665 < 0)
				{
					float num678 = 500f;
					if (type == 500)
					{
						num678 = 200f;
					}
					if (Main.player[owner].rocketDelay2 > 0)
					{
						this.ai[0] = 1f;
						netUpdate = true;
					}
					Vector2 vector46 = player2.Center - base.Center;
					if (vector46.Length() > 2000f)
					{
						base.position = player2.Center - new Vector2(width, height) / 2f;
					}
					else if (vector46.Length() > num678 || Math.Abs(vector46.Y) > 300f)
					{
						this.ai[0] = 1f;
						netUpdate = true;
						if (base.velocity.Y > 0f && vector46.Y < 0f)
						{
							base.velocity.Y = 0f;
						}
						if (base.velocity.Y < 0f && vector46.Y > 0f)
						{
							base.velocity.Y = 0f;
						}
					}
				}
				if (this.ai[0] == 0f)
				{
					tileCollide = true;
					float num679 = 0.5f;
					float num680 = 4f;
					float num681 = 4f;
					float num682 = 0.1f;
					if (num681 < Math.Abs(player2.velocity.X) + Math.Abs(player2.velocity.Y))
					{
						num681 = Math.Abs(player2.velocity.X) + Math.Abs(player2.velocity.Y);
						num679 = 0.7f;
					}
					int num683 = 0;
					bool flag29 = false;
					float num684 = vector43.X - base.Center.X;
					if (Math.Abs(num684) > 5f)
					{
						if (num684 < 0f)
						{
							num683 = -1;
							if (base.velocity.X > 0f - num680)
							{
								base.velocity.X -= num679;
							}
							else
							{
								base.velocity.X -= num682;
							}
						}
						else
						{
							num683 = 1;
							if (base.velocity.X < num680)
							{
								base.velocity.X += num679;
							}
							else
							{
								base.velocity.X += num682;
							}
						}
						flag29 = true;
					}
					else
					{
						base.velocity.X *= 0.9f;
						if (Math.Abs(base.velocity.X) < num679 * 2f)
						{
							base.velocity.X = 0f;
						}
					}
					if (num683 != 0)
					{
						int num685 = (int)(base.position.X + (float)(width / 2)) / 16;
						int num686 = (int)base.position.Y / 16;
						num685 += num683;
						num685 += (int)base.velocity.X;
						for (int num687 = num686; num687 < num686 + height / 16 + 1; num687++)
						{
							if (WorldGen.SolidTile(num685, num687))
							{
								flag29 = true;
							}
						}
					}
					if (type == 500 && base.velocity.X != 0f)
					{
						flag29 = true;
					}
					Collision.StepUp(ref base.position, ref base.velocity, width, height, ref stepSpeed, ref gfxOffY);
					if (base.velocity.Y == 0f && flag29)
					{
						for (int num688 = 0; num688 < 3; num688++)
						{
							int num689 = (int)(base.position.X + (float)(width / 2)) / 16;
							if (num688 == 0)
							{
								num689 = (int)base.position.X / 16;
							}
							if (num688 == 2)
							{
								num689 = (int)(base.position.X + (float)width) / 16;
							}
							int num690 = (int)(base.position.Y + (float)height) / 16 + 1;
							if (WorldGen.SolidTile(num689, num690) || Main.tile[num689, num690].halfBrick() || Main.tile[num689, num690].slope() > 0)
							{
								try
								{
									num689 = (int)(base.position.X + (float)(width / 2)) / 16;
									num690 = (int)(base.position.Y + (float)(height / 2)) / 16;
									num689 += num683;
									num689 += (int)base.velocity.X;
									if (!WorldGen.SolidTile(num689, num690 - 1) && !WorldGen.SolidTile(num689, num690 - 2))
									{
										base.velocity.Y = -5.1f;
									}
									else if (!WorldGen.SolidTile(num689, num690 - 2))
									{
										base.velocity.Y = -7.1f;
									}
									else if (WorldGen.SolidTile(num689, num690 - 5))
									{
										base.velocity.Y = -11.1f;
									}
									else if (WorldGen.SolidTile(num689, num690 - 4))
									{
										base.velocity.Y = -10.1f;
									}
									else
									{
										base.velocity.Y = -9.1f;
									}
								}
								catch
								{
									base.velocity.Y = -9.1f;
								}
							}
						}
					}
					if (base.velocity.X > num681)
					{
						base.velocity.X = num681;
					}
					if (base.velocity.X < 0f - num681)
					{
						base.velocity.X = 0f - num681;
					}
					if (base.velocity.X < 0f)
					{
						base.direction = -1;
					}
					if (base.velocity.X > 0f)
					{
						base.direction = 1;
					}
					if (base.velocity.X > num679 && num683 == 1)
					{
						base.direction = 1;
					}
					if (base.velocity.X < 0f - num679 && num683 == -1)
					{
						base.direction = -1;
					}
					spriteDirection = base.direction;
					if (flag27)
					{
						rotation = 0f;
						if (base.velocity.Y == 0f)
						{
							if (base.velocity.X == 0f)
							{
								frame = 0;
								frameCounter = 0;
							}
							else if (Math.Abs(base.velocity.X) >= 0.5f)
							{
								frameCounter += (int)Math.Abs(base.velocity.X);
								frameCounter++;
								if (frameCounter > 10)
								{
									frame++;
									frameCounter = 0;
								}
								if (frame >= 4)
								{
									frame = 0;
								}
							}
							else
							{
								frame = 0;
								frameCounter = 0;
							}
						}
						else if (base.velocity.Y != 0f)
						{
							frameCounter = 0;
							frame = 14;
						}
					}
					base.velocity.Y += 0.4f;
					if (base.velocity.Y > 10f)
					{
						base.velocity.Y = 10f;
					}
				}
				if (!flag27)
				{
					return;
				}
				localAI[0] += 1f;
				if (base.velocity.X == 0f)
				{
					localAI[0] += 1f;
				}
				if (localAI[0] >= (float)Main.rand.Next(900, 1200))
				{
					localAI[0] = 0f;
					for (int num691 = 0; num691 < 6; num691++)
					{
						int num692 = Dust.NewDust(base.Center + Vector2.UnitX * -base.direction * 8f - Vector2.One * 5f + Vector2.UnitY * 8f, 3, 6, 216, -base.direction, 1f);
						Main.dust[num692].velocity /= 2f;
						Main.dust[num692].scale = 0.8f;
					}
					int num693 = Gore.NewGore(base.Center + Vector2.UnitX * -base.direction * 8f, Vector2.Zero, Main.rand.Next(580, 583));
					Main.gore[num693].velocity /= 2f;
					Main.gore[num693].velocity.Y = Math.Abs(Main.gore[num693].velocity.Y);
					Main.gore[num693].velocity.X = (0f - Math.Abs(Main.gore[num693].velocity.X)) * (float)base.direction;
				}
			}
			else if (aiStyle == 68)
			{
				rotation += 0.25f * (float)base.direction;
				this.ai[0] += 1f;
				if (this.ai[0] >= 3f)
				{
					alpha -= 40;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				if (this.ai[0] >= 15f)
				{
					base.velocity.Y += 0.2f;
					if (base.velocity.Y > 16f)
					{
						base.velocity.Y = 16f;
					}
					base.velocity.X *= 0.99f;
				}
				if (alpha == 0)
				{
					Vector2 vector47 = new Vector2(4f, -8f);
					float num694 = rotation;
					if (base.direction == -1)
					{
						vector47.X = -4f;
					}
					vector47 = vector47.RotatedBy(num694);
					for (int num695 = 0; num695 < 1; num695++)
					{
						int num696 = Dust.NewDust(base.Center + vector47 - Vector2.One * 5f, 4, 4, 6);
						Main.dust[num696].scale = 1.5f;
						Main.dust[num696].noGravity = true;
						Main.dust[num696].velocity = Main.dust[num696].velocity * 0.25f + Vector2.Normalize(vector47) * 1f;
						Main.dust[num696].velocity = Main.dust[num696].velocity.RotatedBy(-(float)Math.PI / 2f * (float)base.direction);
					}
				}
				spriteDirection = base.direction;
				if (owner == Main.myPlayer && timeLeft <= 3)
				{
					tileCollide = false;
					alpha = 255;
					base.position.X += width / 2;
					base.position.Y += height / 2;
					width = 80;
					height = 80;
					base.position.X -= width / 2;
					base.position.Y -= height / 2;
					knockBack = 8f;
				}
				if (wet && timeLeft > 3)
				{
					timeLeft = 3;
				}
			}
			else if (aiStyle == 69)
			{
				Vector2 vector48 = Main.player[owner].Center - base.Center;
				rotation = vector48.ToRotation() - 1.57f;
				if (Main.player[owner].dead)
				{
					Kill();
					return;
				}
				Main.player[owner].itemAnimation = 10;
				Main.player[owner].itemTime = 10;
				if (vector48.X < 0f)
				{
					Main.player[owner].ChangeDir(1);
					base.direction = 1;
				}
				else
				{
					Main.player[owner].ChangeDir(-1);
					base.direction = -1;
				}
				Main.player[owner].itemRotation = (vector48 * -1f * base.direction).ToRotation();
				spriteDirection = ((!(vector48.X > 0f)) ? 1 : (-1));
				if (this.ai[0] == 0f && vector48.Length() > 400f)
				{
					this.ai[0] = 1f;
				}
				if (this.ai[0] == 1f || this.ai[0] == 2f)
				{
					float num697 = vector48.Length();
					if (num697 > 1500f)
					{
						Kill();
						return;
					}
					if (num697 > 600f)
					{
						this.ai[0] = 2f;
					}
					tileCollide = false;
					float num698 = 20f;
					if (this.ai[0] == 2f)
					{
						num698 = 40f;
					}
					base.velocity = Vector2.Normalize(vector48) * num698;
					if (vector48.Length() < num698)
					{
						Kill();
						return;
					}
				}
				this.ai[1] += 1f;
				if (this.ai[1] > 5f)
				{
					alpha = 0;
				}
				if ((int)this.ai[1] % 4 == 0 && owner == Main.myPlayer)
				{
					Vector2 spinningpoint2 = vector48 * -1f;
					spinningpoint2.Normalize();
					spinningpoint2 *= (float)Main.rand.Next(45, 65) * 0.1f;
					spinningpoint2 = spinningpoint2.RotatedBy((Main.rand.NextDouble() - 0.5) * 1.5707963705062866);
					NewProjectile(base.Center.X, base.Center.Y, spinningpoint2.X, spinningpoint2.Y, 405, damage, knockBack, owner, -10f);
				}
			}
			else if (aiStyle == 70)
			{
				if (this.ai[0] == 0f)
				{
					float num699 = 500f;
					int num700 = -1;
					for (int num701 = 0; num701 < 200; num701++)
					{
						NPC nPC5 = Main.npc[num701];
						if (nPC5.CanBeChasedBy(this) && Collision.CanHit(base.position, width, height, nPC5.position, nPC5.width, nPC5.height))
						{
							float num702 = (nPC5.Center - base.Center).Length();
							if (num702 < num699)
							{
								num700 = num701;
								num699 = num702;
							}
						}
					}
					this.ai[0] = num700 + 1;
					if (this.ai[0] == 0f)
					{
						this.ai[0] = -15f;
					}
					if (this.ai[0] > 0f)
					{
						float scaleFactor2 = (float)Main.rand.Next(35, 75) / 30f;
						base.velocity = (base.velocity * 20f + Vector2.Normalize(Main.npc[(int)this.ai[0] - 1].Center - base.Center + new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101))) * scaleFactor2) / 21f;
						netUpdate = true;
					}
				}
				else if (this.ai[0] > 0f)
				{
					Vector2 value22 = Vector2.Normalize(Main.npc[(int)this.ai[0] - 1].Center - base.Center);
					base.velocity = (base.velocity * 40f + value22 * 12f) / 41f;
				}
				else
				{
					this.ai[0] += 1f;
					alpha -= 25;
					if (alpha < 50)
					{
						alpha = 50;
					}
					base.velocity *= 0.95f;
				}
				if (this.ai[1] == 0f)
				{
					this.ai[1] = (float)Main.rand.Next(80, 121) / 100f;
					netUpdate = true;
				}
				scale = this.ai[1];
			}
			else if (aiStyle == 71)
			{
				localAI[1] += 1f;
				if (localAI[1] > 10f && Main.rand.Next(3) == 0)
				{
					int num703 = 6;
					for (int num704 = 0; num704 < num703; num704++)
					{
						Vector2 spinningpoint3 = Vector2.Normalize(base.velocity) * new Vector2(width, height) / 2f;
						spinningpoint3 = spinningpoint3.RotatedBy((double)(num704 - (num703 / 2 - 1)) * Math.PI / (double)(float)num703) + base.Center;
						Vector2 value23 = ((float)(Main.rand.NextDouble() * 3.1415927410125732) - (float)Math.PI / 2f).ToRotationVector2() * Main.rand.Next(3, 8);
						int num705 = Dust.NewDust(spinningpoint3 + value23, 0, 0, 217, value23.X * 2f, value23.Y * 2f, 100, default(Color), 1.4f);
						Main.dust[num705].noGravity = true;
						Main.dust[num705].noLight = true;
						Main.dust[num705].velocity /= 4f;
						Main.dust[num705].velocity -= base.velocity;
					}
					alpha -= 5;
					if (alpha < 50)
					{
						alpha = 50;
					}
					rotation += base.velocity.X * 0.1f;
					frame = (int)(localAI[1] / 3f) % 3;
					Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.1f, 0.4f, 0.6f);
				}
				int num706 = -1;
				Vector2 vector49 = base.Center;
				float num707 = 500f;
				if (localAI[0] > 0f)
				{
					localAI[0] -= 1f;
				}
				if (this.ai[0] == 0f && localAI[0] == 0f)
				{
					for (int num708 = 0; num708 < 200; num708++)
					{
						NPC nPC6 = Main.npc[num708];
						if (nPC6.CanBeChasedBy(this) && (this.ai[0] == 0f || this.ai[0] == (float)(num708 + 1)))
						{
							Vector2 center4 = nPC6.Center;
							float num709 = Vector2.Distance(center4, vector49);
							if (num709 < num707 && Collision.CanHit(base.position, width, height, nPC6.position, nPC6.width, nPC6.height))
							{
								num707 = num709;
								vector49 = center4;
								num706 = num708;
							}
						}
					}
					if (num706 >= 0)
					{
						this.ai[0] = num706 + 1;
						netUpdate = true;
					}
					num706 = -1;
				}
				if (localAI[0] == 0f && this.ai[0] == 0f)
				{
					localAI[0] = 30f;
				}
				bool flag30 = false;
				if (this.ai[0] != 0f)
				{
					int num710 = (int)(this.ai[0] - 1f);
					if (Main.npc[num710].active && !Main.npc[num710].dontTakeDamage && Main.npc[num710].immune[owner] == 0)
					{
						float num711 = Main.npc[num710].position.X + (float)(Main.npc[num710].width / 2);
						float num712 = Main.npc[num710].position.Y + (float)(Main.npc[num710].height / 2);
						float num713 = Math.Abs(base.position.X + (float)(width / 2) - num711) + Math.Abs(base.position.Y + (float)(height / 2) - num712);
						if (num713 < 1000f)
						{
							flag30 = true;
							vector49 = Main.npc[num710].Center;
						}
					}
					else
					{
						this.ai[0] = 0f;
						flag30 = false;
						netUpdate = true;
					}
				}
				if (flag30)
				{
					Vector2 v = vector49 - base.Center;
					float num714 = base.velocity.ToRotation();
					float num715 = v.ToRotation();
					double num716 = num715 - num714;
					if (num716 > Math.PI)
					{
						num716 -= Math.PI * 2.0;
					}
					if (num716 < -Math.PI)
					{
						num716 += Math.PI * 2.0;
					}
					base.velocity = base.velocity.RotatedBy(num716 * 0.10000000149011612);
				}
				float num717 = base.velocity.Length();
				base.velocity.Normalize();
				base.velocity *= num717 + 0.0025f;
			}
			else if (aiStyle == 72)
			{
				localAI[0] += 1f;
				if (localAI[0] > 5f)
				{
					alpha -= 25;
					if (alpha < 50)
					{
						alpha = 50;
					}
				}
				base.velocity *= 0.96f;
				if (this.ai[1] == 0f)
				{
					this.ai[1] = (float)Main.rand.Next(60, 121) / 100f;
					netUpdate = true;
				}
				scale = this.ai[1];
				base.position = base.Center;
				int num718 = 14;
				int num719 = 14;
				width = (int)((float)num718 * this.ai[1]);
				height = (int)((float)num719 * this.ai[1]);
				base.position -= new Vector2(width / 2, height / 2);
			}
			else if (aiStyle == 73)
			{
				int num720 = (int)this.ai[0];
				int num721 = (int)this.ai[1];
				Tile tile = Main.tile[num720, num721];
				if (tile == null || !tile.active() || tile.type != 338)
				{
					Kill();
					return;
				}
				float num722 = 2f;
				float num723 = (float)timeLeft / 60f;
				if (num723 < 1f)
				{
					num722 *= num723;
				}
				if (type == 419)
				{
					for (int num724 = 0; num724 < 2; num724++)
					{
						Vector2 spinningpoint4 = new Vector2(0f, 0f - num722);
						spinningpoint4 *= 0.85f + (float)Main.rand.NextDouble() * 0.2f;
						spinningpoint4 = spinningpoint4.RotatedBy((Main.rand.NextDouble() - 0.5) * 1.5707963705062866);
						int num725 = Dust.NewDust(base.position, width, height, 222, 0f, 0f, 100);
						Dust dust3 = Main.dust[num725];
						dust3.scale = 1f + (float)Main.rand.NextDouble() * 0.3f;
						dust3.velocity *= 0.5f;
						if (dust3.velocity.Y > 0f)
						{
							dust3.velocity.Y *= -1f;
						}
						dust3.position -= new Vector2(2 + Main.rand.Next(-2, 3), 0f);
						dust3.velocity += spinningpoint4;
						dust3.scale = 0.6f;
						dust3.fadeIn = dust3.scale + 0.2f;
						dust3.velocity.Y *= 2f;
					}
				}
				if (type == 420)
				{
					for (int num726 = 0; num726 < 2; num726++)
					{
						Vector2 spinningpoint5 = new Vector2(0f, 0f - num722);
						spinningpoint5 *= 0.85f + (float)Main.rand.NextDouble() * 0.2f;
						spinningpoint5 = spinningpoint5.RotatedBy((Main.rand.NextDouble() - 0.5) * 1.5707963705062866);
						int num727 = 219;
						if (Main.rand.Next(5) == 0)
						{
							num727 = 222;
						}
						int num728 = Dust.NewDust(base.position, width, height, num727, 0f, 0f, 100);
						Dust dust4 = Main.dust[num728];
						dust4.scale = 1f + (float)Main.rand.NextDouble() * 0.3f;
						dust4.velocity *= 0.5f;
						if (dust4.velocity.Y > 0f)
						{
							dust4.velocity.Y *= -1f;
						}
						dust4.position -= new Vector2(2 + Main.rand.Next(-2, 3), 0f);
						dust4.velocity += spinningpoint5;
						dust4.velocity.X *= 0.5f;
						dust4.scale = 0.6f;
						dust4.fadeIn = dust4.scale + 0.2f;
						dust4.velocity.Y *= 2f;
					}
				}
				if (type == 421)
				{
					for (int num729 = 0; num729 < 2; num729++)
					{
						Vector2 spinningpoint6 = new Vector2(0f, 0f - num722);
						spinningpoint6 *= 0.85f + (float)Main.rand.NextDouble() * 0.2f;
						spinningpoint6 = spinningpoint6.RotatedBy((Main.rand.NextDouble() - 0.5) * 0.78539818525314331);
						int num730 = Dust.NewDust(base.position, width, height, 221, 0f, 0f, 100);
						Dust dust5 = Main.dust[num730];
						dust5.scale = 1f + (float)Main.rand.NextDouble() * 0.3f;
						dust5.velocity *= 0.1f;
						if (dust5.velocity.Y > 0f)
						{
							dust5.velocity.Y *= -1f;
						}
						dust5.position -= new Vector2(2 + Main.rand.Next(-2, 3), 0f);
						dust5.velocity += spinningpoint6;
						dust5.scale = 0.6f;
						dust5.fadeIn = dust5.scale + 0.2f;
						dust5.velocity.Y *= 2.5f;
					}
					if (timeLeft % 10 == 0)
					{
						float num731 = 0.85f + (float)Main.rand.NextDouble() * 0.2f;
						for (int num732 = 0; num732 < 9; num732++)
						{
							Vector2 vector50 = new Vector2((float)(num732 - 4) / 5f, (0f - num722) * num731);
							int num733 = Dust.NewDust(base.position, width, height, 222, 0f, 0f, 100);
							Dust dust6 = Main.dust[num733];
							dust6.scale = 0.7f + (float)Main.rand.NextDouble() * 0.3f;
							dust6.velocity *= 0f;
							if (dust6.velocity.Y > 0f)
							{
								dust6.velocity.Y *= -1f;
							}
							dust6.position -= new Vector2(2 + Main.rand.Next(-2, 3), 0f);
							dust6.velocity += vector50;
							dust6.scale = 0.6f;
							dust6.fadeIn = dust6.scale + 0.2f;
							dust6.velocity.Y *= 2f;
						}
					}
				}
				if (type != 422)
				{
					return;
				}
				for (int num734 = 0; num734 < 2; num734++)
				{
					Vector2 spinningpoint7 = new Vector2(0f, 0f - num722);
					spinningpoint7 *= 0.85f + (float)Main.rand.NextDouble() * 0.2f;
					spinningpoint7 = spinningpoint7.RotatedBy((Main.rand.NextDouble() - 0.5) * 1.5707963705062866);
					int num735 = Dust.NewDust(base.position, width, height, 219 + Main.rand.Next(5), 0f, 0f, 100);
					Dust dust7 = Main.dust[num735];
					dust7.scale = 1f + (float)Main.rand.NextDouble() * 0.3f;
					dust7.velocity *= 0.5f;
					if (dust7.velocity.Y > 0f)
					{
						dust7.velocity.Y *= -1f;
					}
					dust7.position -= new Vector2(2 + Main.rand.Next(-2, 3), 0f);
					dust7.velocity += spinningpoint7;
					dust7.scale = 0.6f;
					dust7.fadeIn = dust7.scale + 0.2f;
					dust7.velocity.Y *= 2f;
				}
			}
			else if (aiStyle == 74)
			{
				if (extraUpdates == 1)
				{
					localAI[0] *= localAI[1];
					localAI[1] -= 0.001f;
					if ((double)localAI[0] < 0.01)
					{
						Kill();
					}
				}
			}
			else if (aiStyle == 75)
			{
				AI_075();
			}
			else if (aiStyle == 76)
			{
				Player player3 = Main.player[owner];
				player3.heldProj = whoAmI;
				if (type == 441)
				{
					if (player3.mount.Type != 9)
					{
						Kill();
						return;
					}
				}
				else if (type == 453 && player3.mount.Type != 8)
				{
					Kill();
					return;
				}
				if (Main.myPlayer == owner)
				{
					base.position.X = Main.screenPosition.X + (float)Main.mouseX;
					base.position.Y = Main.screenPosition.Y + (float)Main.mouseY;
					if (this.ai[0] != base.position.X - player3.position.X || this.ai[1] != base.position.Y - player3.position.Y)
					{
						netUpdate = true;
					}
					this.ai[0] = base.position.X - player3.position.X;
					this.ai[1] = base.position.Y - player3.position.Y;
					player3.mount.AimAbility(player3, base.position);
					if (!player3.channel)
					{
						player3.mount.UseAbility(player3, base.position, false);
						Kill();
					}
					return;
				}
				base.position.X = player3.position.X + this.ai[0];
				base.position.Y = player3.position.Y + this.ai[1];
				if (type == 441)
				{
					if (!player3.mount.AbilityCharging)
					{
						player3.mount.StartAbilityCharge(player3);
					}
				}
				else if (type == 453 && !player3.mount.AbilityActive)
				{
					player3.mount.UseAbility(player3, base.position, false);
				}
				player3.mount.AimAbility(player3, base.position);
			}
			else if (aiStyle == 77)
			{
				if (this.ai[1] == 1f)
				{
					friendly = false;
					if (alpha < 255)
					{
						alpha += 51;
					}
					if (alpha >= 255)
					{
						alpha = 255;
						Kill();
						return;
					}
				}
				else
				{
					if (alpha > 0)
					{
						alpha -= 50;
					}
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				float num736 = 30f;
				float num737 = num736 * 4f;
				this.ai[0] += 1f;
				if (this.ai[0] > num737)
				{
					this.ai[0] = 0f;
				}
				Vector2 vector51 = -Vector2.UnitY.RotatedBy((float)Math.PI * 2f * this.ai[0] / num736);
				float val = 0.75f + vector51.Y * 0.25f;
				float val2 = 0.8f - vector51.Y * 0.2f;
				float num738 = Math.Max(val, val2);
				base.position += new Vector2(width, height) / 2f;
				width = (height = (int)(80f * num738));
				base.position -= new Vector2(width, height) / 2f;
				frameCounter++;
				if (frameCounter >= 3)
				{
					frameCounter = 0;
					frame++;
					if (frame >= 4)
					{
						frame = 0;
					}
				}
				for (int num739 = 0; num739 < 1; num739++)
				{
					float num740 = 55f * num738;
					float num741 = 11f * num738;
					float num742 = 0.5f;
					int num743 = Dust.NewDust(base.position, width, height, 226, 0f, 0f, 100, default(Color), 0.5f);
					Main.dust[num743].noGravity = true;
					Main.dust[num743].velocity *= 2f;
					Main.dust[num743].position = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * (num741 + num742 * (float)Main.rand.NextDouble() * num740) + base.Center;
					Main.dust[num743].velocity = Main.dust[num743].velocity / 2f + Vector2.Normalize(Main.dust[num743].position - base.Center);
					if (Main.rand.Next(2) == 0)
					{
						num743 = Dust.NewDust(base.position, width, height, 226, 0f, 0f, 100, default(Color), 0.9f);
						Main.dust[num743].noGravity = true;
						Main.dust[num743].velocity *= 1.2f;
						Main.dust[num743].position = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * (num741 + num742 * (float)Main.rand.NextDouble() * num740) + base.Center;
						Main.dust[num743].velocity = Main.dust[num743].velocity / 2f + Vector2.Normalize(Main.dust[num743].position - base.Center);
					}
					if (Main.rand.Next(4) == 0)
					{
						num743 = Dust.NewDust(base.position, width, height, 226, 0f, 0f, 100, default(Color), 0.7f);
						Main.dust[num743].noGravity = true;
						Main.dust[num743].velocity *= 1.2f;
						Main.dust[num743].position = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * (num741 + num742 * (float)Main.rand.NextDouble() * num740) + base.Center;
						Main.dust[num743].velocity = Main.dust[num743].velocity / 2f + Vector2.Normalize(Main.dust[num743].position - base.Center);
					}
				}
			}
			else if (aiStyle == 78)
			{
				if (alpha > 0)
				{
					alpha -= 30;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				Vector2 v2 = this.ai[0].ToRotationVector2();
				float num744 = base.velocity.ToRotation();
				float num745 = v2.ToRotation();
				double num746 = num745 - num744;
				if (num746 > Math.PI)
				{
					num746 -= Math.PI * 2.0;
				}
				if (num746 < -Math.PI)
				{
					num746 += Math.PI * 2.0;
				}
				base.velocity = base.velocity.RotatedBy(num746 * 0.05000000074505806);
				base.velocity *= 0.96f;
				rotation = base.velocity.ToRotation() - (float)Math.PI / 2f;
				if (Main.myPlayer == owner && timeLeft > 60)
				{
					timeLeft = 60;
				}
			}
			else if (aiStyle == 79)
			{
				bool flag31 = true;
				int num747 = (int)this.ai[0] - 1;
				if (type == 447 && (this.ai[0] == 0f || ((!Main.npc[num747].active || Main.npc[num747].type != 392) && (!Main.npc[num747].active || Main.npc[num747].type != 395 || !(Main.npc[num747].ai[3] % 120f >= 60f) || Main.npc[num747].ai[0] != 2f))))
				{
					flag31 = false;
				}
				if (!flag31)
				{
					Kill();
					return;
				}
				NPC nPC7 = Main.npc[num747];
				float num748 = nPC7.Center.Y + 46f;
				int num749 = (int)nPC7.Center.X / 16;
				int num750 = (int)num748 / 16;
				int num751 = 0;
				if (Main.tile[num749, num750].nactive() && Main.tileSolid[Main.tile[num749, num750].type] && !Main.tileSolidTop[Main.tile[num749, num750].type])
				{
					num751 = 1;
				}
				else
				{
					for (; num751 < 150 && num750 + num751 < Main.maxTilesY; num751++)
					{
						int num752 = num750 + num751;
						if (Main.tile[num749, num752].nactive() && Main.tileSolid[Main.tile[num749, num752].type] && !Main.tileSolidTop[Main.tile[num749, num752].type])
						{
							num751--;
							break;
						}
					}
				}
				base.position.X = nPC7.Center.X - (float)(width / 2);
				base.position.Y = num748;
				height = (num751 + 1) * 16;
				int num753 = (int)base.position.Y + height;
				if (Main.tile[num749, num753 / 16].nactive() && Main.tileSolid[Main.tile[num749, num753 / 16].type] && !Main.tileSolidTop[Main.tile[num749, num753 / 16].type])
				{
					int num754 = num753 % 16;
					height -= num754 - 2;
				}
				if (type == 447)
				{
					for (int num755 = 0; num755 < 2; num755++)
					{
						int num756 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + (float)height - 16f), width, 16, 228);
						Main.dust[num756].noGravity = true;
						Main.dust[num756].velocity *= 0.5f;
						Main.dust[num756].velocity.X -= (float)num755 - nPC7.velocity.X * 2f / 3f;
						Main.dust[num756].scale = 2.8f;
					}
					if (Main.rand.Next(5) == 0)
					{
						int num757 = Dust.NewDust(new Vector2(base.position.X + (float)(width / 2) - (float)(width / 2 * Math.Sign(nPC7.velocity.X)) - 4f, base.position.Y + (float)height - 16f), 4, 16, 31, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num757].velocity *= 0.5f;
						Main.dust[num757].velocity.X -= nPC7.velocity.X / 2f;
						Main.dust[num757].velocity.Y = 0f - Math.Abs(Main.dust[num757].velocity.Y);
					}
				}
				if (type == 447 && ++frameCounter >= 5)
				{
					frameCounter = 0;
					if (++frame >= 4)
					{
						frame = 0;
					}
				}
			}
			else if (aiStyle == 80)
			{
				if (this.ai[0] == 0f && this.ai[1] > 0f)
				{
					this.ai[1] -= 1f;
				}
				else if (this.ai[0] == 0f && this.ai[1] == 0f)
				{
					this.ai[0] = 1f;
					this.ai[1] = (int)Player.FindClosest(base.position, width, height);
					netUpdate = true;
					float num758 = base.velocity.Length();
					base.velocity = Vector2.Normalize(base.velocity) * (num758 + 4f);
					for (int num759 = 0; num759 < 8; num759++)
					{
						Vector2 spinningpoint8 = Vector2.UnitX * -8f;
						spinningpoint8 += -Vector2.UnitY.RotatedBy((float)num759 * (float)Math.PI / 4f) * new Vector2(2f, 8f);
						spinningpoint8 = spinningpoint8.RotatedBy(rotation - (float)Math.PI / 2f);
						int num760 = Dust.NewDust(base.Center, 0, 0, 228);
						Main.dust[num760].scale = 1.5f;
						Main.dust[num760].noGravity = true;
						Main.dust[num760].position = base.Center + spinningpoint8;
						Main.dust[num760].velocity = base.velocity * 0f;
					}
				}
				else if (this.ai[0] == 1f)
				{
					tileCollide = true;
					localAI[1] += 1f;
					float num761 = 180f;
					float num762 = 0f;
					float num763 = 30f;
					if (localAI[1] == num761)
					{
						Kill();
						return;
					}
					if (localAI[1] >= num762 && localAI[1] < num762 + num763)
					{
						Vector2 v3 = Main.player[(int)this.ai[1]].Center - base.Center;
						float num764 = base.velocity.ToRotation();
						float num765 = v3.ToRotation();
						double num766 = num765 - num764;
						if (num766 > Math.PI)
						{
							num766 -= Math.PI * 2.0;
						}
						if (num766 < -Math.PI)
						{
							num766 += Math.PI * 2.0;
						}
						base.velocity = base.velocity.RotatedBy(num766 * 0.20000000298023224);
					}
					if (localAI[1] % 5f == 0f)
					{
						for (int num767 = 0; num767 < 4; num767++)
						{
							Vector2 spinningpoint9 = Vector2.UnitX * -8f;
							spinningpoint9 += -Vector2.UnitY.RotatedBy((float)num767 * (float)Math.PI / 4f) * new Vector2(2f, 4f);
							spinningpoint9 = spinningpoint9.RotatedBy(rotation - (float)Math.PI / 2f);
							int num768 = Dust.NewDust(base.Center, 0, 0, 228);
							Main.dust[num768].scale = 1.5f;
							Main.dust[num768].noGravity = true;
							Main.dust[num768].position = base.Center + spinningpoint9;
							Main.dust[num768].velocity = base.velocity * 0f;
						}
					}
				}
				rotation = base.velocity.ToRotation() + (float)Math.PI / 2f;
				if (++frameCounter >= 3)
				{
					frameCounter = 0;
					if (++frame >= 3)
					{
						frame = 0;
					}
				}
				for (int num769 = 0; (float)num769 < 1f + this.ai[0]; num769++)
				{
					Vector2 value24 = Vector2.UnitY.RotatedBy(rotation) * 8f * (num769 + 1);
					int num770 = Dust.NewDust(base.Center, 0, 0, 228);
					Main.dust[num770].position = base.Center + value24;
					Main.dust[num770].scale = 1f;
					Main.dust[num770].noGravity = true;
				}
				int num771 = 0;
				while (true)
				{
					if (num771 < 16)
					{
						Player player4 = Main.player[num771];
						if (player4.active && !player4.dead && Vector2.Distance(player4.Center, base.Center) <= 42f)
						{
							break;
						}
						num771++;
						continue;
					}
					return;
				}
				Kill();
			}
			else if (aiStyle == 81)
			{
				int num772 = penetrate;
				if (this.ai[0] == 0f)
				{
					tileCollide = true;
					localAI[0] += 1f;
					if (localAI[0] > 7f)
					{
						int num773 = Utils.SelectRandom<int>(Main.rand, 226, 229);
						Vector2 center5 = base.Center;
						Vector2 spinningpoint10 = new Vector2(-16f, 16f);
						float num774 = 1f;
						spinningpoint10 += new Vector2(-16f, 16f);
						spinningpoint10 = spinningpoint10.RotatedBy(rotation);
						int num775 = 4;
						int num776 = Dust.NewDust(center5 + spinningpoint10 + Vector2.One * -num775, num775 * 2, num775 * 2, num773, 0f, 0f, 100, default(Color), num774);
						Main.dust[num776].velocity *= 0.1f;
						if (Main.rand.Next(6) != 0)
						{
							Main.dust[num776].noGravity = true;
						}
					}
					float num777 = 0.01f;
					int num778 = 5;
					int num779 = num778 * 15;
					int num780 = 0;
					if (localAI[0] > 7f)
					{
						if (localAI[1] == 0f)
						{
							scale -= num777;
							alpha += num778;
							if (alpha > num779)
							{
								alpha = num779;
								localAI[1] = 1f;
							}
						}
						else if (localAI[1] == 1f)
						{
							scale += num777;
							alpha -= num778;
							if (alpha <= num780)
							{
								alpha = num780;
								localAI[1] = 0f;
							}
						}
					}
					rotation = base.velocity.ToRotation() + (float)Math.PI / 4f;
				}
				else if (this.ai[0] >= 1f && this.ai[0] < (float)(1 + num772))
				{
					tileCollide = false;
					alpha += 15;
					base.velocity *= 0.98f;
					localAI[0] = 0f;
					if (alpha >= 255)
					{
						if (this.ai[0] == 1f)
						{
							Kill();
							return;
						}
						int num781 = -1;
						Vector2 value25 = base.Center;
						float num782 = 250f;
						for (int num783 = 0; num783 < 200; num783++)
						{
							NPC nPC8 = Main.npc[num783];
							if (nPC8.CanBeChasedBy(this))
							{
								Vector2 center6 = nPC8.Center;
								float num784 = Vector2.Distance(center6, base.Center);
								if (num784 < num782)
								{
									num782 = num784;
									value25 = center6;
									num781 = num783;
								}
							}
						}
						if (num781 >= 0)
						{
							netUpdate = true;
							this.ai[0] += num772;
							base.position = value25 + ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * 100f - new Vector2(width, height) / 2f;
							base.velocity = Vector2.Normalize(value25 - base.Center) * 15f;
							rotation = base.velocity.ToRotation() + (float)Math.PI / 4f;
						}
						else
						{
							Kill();
						}
					}
					if (Main.rand.Next(3) == 0)
					{
						int num785 = Utils.SelectRandom<int>(Main.rand, 226, 229);
						Vector2 center7 = base.Center;
						Vector2 vector52 = new Vector2(-16f, 16f);
						vector52 = (vector52 = vector52);
						float num786 = 0.6f;
						vector52 += new Vector2(-16f, 16f);
						vector52 = vector52.RotatedBy(rotation);
						int num787 = 4;
						int num788 = Dust.NewDust(center7 + vector52 + Vector2.One * -num787, num787 * 2, num787 * 2, num785, 0f, 0f, 100, default(Color), num786);
						Main.dust[num788].velocity *= 0.1f;
						Main.dust[num788].noGravity = true;
					}
				}
				else if (this.ai[0] >= (float)(1 + num772) && this.ai[0] < (float)(1 + num772 * 2))
				{
					scale = 0.9f;
					tileCollide = false;
					rotation = base.velocity.ToRotation() + (float)Math.PI / 4f;
					this.ai[1] += 1f;
					if (this.ai[1] >= 15f)
					{
						alpha += 51;
						base.velocity *= 0.8f;
						if (alpha >= 255)
						{
							Kill();
						}
					}
					else
					{
						alpha -= 125;
						if (alpha < 0)
						{
							alpha = 0;
						}
						base.velocity *= 0.98f;
					}
					localAI[0] += 1f;
					int num789 = Utils.SelectRandom<int>(Main.rand, 226, 229);
					Vector2 center8 = base.Center;
					Vector2 spinningpoint11 = new Vector2(-16f, 16f);
					float num790 = 0.6f;
					spinningpoint11 += new Vector2(-16f, 16f);
					spinningpoint11 = spinningpoint11.RotatedBy(rotation);
					int num791 = 4;
					int num792 = Dust.NewDust(center8 + spinningpoint11 + Vector2.One * -num791, num791 * 2, num791 * 2, num789, 0f, 0f, 100, default(Color), num790);
					Main.dust[num792].velocity *= 0.1f;
					Main.dust[num792].noGravity = true;
				}
				float num793 = (float)alpha / 255f;
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.3f * num793, 0.4f * num793, 1f * num793);
			}
			else if (aiStyle == 82)
			{
				alpha -= 40;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (this.ai[0] == 0f)
				{
					localAI[0] += 1f;
					if (localAI[0] >= 45f)
					{
						localAI[0] = 0f;
						this.ai[0] = 1f;
						this.ai[1] = 0f - this.ai[1];
						netUpdate = true;
					}
					base.velocity.X = base.velocity.RotatedBy(this.ai[1]).X;
					base.velocity.X = MathHelper.Clamp(base.velocity.X, -6f, 6f);
					base.velocity.Y -= 0.08f;
					if (base.velocity.Y > 0f)
					{
						base.velocity.Y -= 0.2f;
					}
					if (base.velocity.Y < -7f)
					{
						base.velocity.Y = -7f;
					}
				}
				else if (this.ai[0] == 1f)
				{
					localAI[0] += 1f;
					if (localAI[0] >= 90f)
					{
						localAI[0] = 0f;
						this.ai[0] = 2f;
						this.ai[1] = (int)Player.FindClosest(base.position, width, height);
						netUpdate = true;
					}
					base.velocity.X = base.velocity.RotatedBy(this.ai[1]).X;
					base.velocity.X = MathHelper.Clamp(base.velocity.X, -6f, 6f);
					base.velocity.Y -= 0.08f;
					if (base.velocity.Y > 0f)
					{
						base.velocity.Y -= 0.2f;
					}
					if (base.velocity.Y < -7f)
					{
						base.velocity.Y = -7f;
					}
				}
				else if (this.ai[0] == 2f)
				{
					Vector2 value26 = Main.player[(int)this.ai[1]].Center - base.Center;
					if (value26.Length() < 30f)
					{
						Kill();
						return;
					}
					value26.Normalize();
					value26 *= 14f;
					value26 = Vector2.Lerp(base.velocity, value26, 0.6f);
					if (value26.Y < 6f)
					{
						value26.Y = 6f;
					}
					float num794 = 0.4f;
					if (base.velocity.X < value26.X)
					{
						base.velocity.X += num794;
						if (base.velocity.X < 0f && value26.X > 0f)
						{
							base.velocity.X += num794;
						}
					}
					else if (base.velocity.X > value26.X)
					{
						base.velocity.X -= num794;
						if (base.velocity.X > 0f && value26.X < 0f)
						{
							base.velocity.X -= num794;
						}
					}
					if (base.velocity.Y < value26.Y)
					{
						base.velocity.Y += num794;
						if (base.velocity.Y < 0f && value26.Y > 0f)
						{
							base.velocity.Y += num794;
						}
					}
					else if (base.velocity.Y > value26.Y)
					{
						base.velocity.Y -= num794;
						if (base.velocity.Y > 0f && value26.Y < 0f)
						{
							base.velocity.Y -= num794;
						}
					}
				}
				if (alpha < 40)
				{
					int num795 = Dust.NewDust(base.Center - Vector2.One * 5f, 10, 10, 229, (0f - base.velocity.X) / 3f, (0f - base.velocity.Y) / 3f, 150, Color.Transparent, 1.2f);
					Main.dust[num795].noGravity = true;
				}
				rotation = base.velocity.ToRotation() + (float)Math.PI / 2f;
			}
			else if (aiStyle == 83)
			{
				if (alpha > 200)
				{
					alpha = 200;
				}
				alpha -= 5;
				if (alpha < 0)
				{
					alpha = 0;
				}
				float num796 = (float)alpha / 255f;
				scale = 1f - num796;
				if (this.ai[0] >= 0f)
				{
					this.ai[0] += 1f;
				}
				if (this.ai[0] == -1f)
				{
					frame = 1;
					extraUpdates = 1;
				}
				else if (this.ai[0] < 30f)
				{
					base.position = Main.npc[(int)this.ai[1]].Center - new Vector2(width, height) / 2f - base.velocity;
				}
				else
				{
					base.velocity *= 0.96f;
					if (++frameCounter >= 6)
					{
						frameCounter = 0;
						if (++frame >= 2)
						{
							frame = 0;
						}
					}
				}
				if (alpha >= 40)
				{
					return;
				}
				for (int num797 = 0; num797 < 2; num797++)
				{
					float num798 = (float)Main.rand.NextDouble() * 1f - 0.5f;
					if (num798 < -0.5f)
					{
						num798 = -0.5f;
					}
					if (num798 > 0.5f)
					{
						num798 = 0.5f;
					}
					Vector2 value27 = new Vector2((float)(-width) * 0.65f * scale, 0f).RotatedBy(num798 * ((float)Math.PI * 2f)).RotatedBy(base.velocity.ToRotation());
					int num799 = Dust.NewDust(base.Center - Vector2.One * 5f, 10, 10, 229, (0f - base.velocity.X) / 3f, (0f - base.velocity.Y) / 3f, 150, Color.Transparent, 0.7f);
					Main.dust[num799].velocity = Vector2.Zero;
					Main.dust[num799].position = base.Center + value27;
					Main.dust[num799].noGravity = true;
				}
			}
			else if (aiStyle == 84)
			{
				Vector2? vector53 = null;
				if (base.velocity.HasNaNs() || base.velocity == Vector2.Zero)
				{
					base.velocity = -Vector2.UnitY;
				}
				if (type == 455 && Main.npc[(int)this.ai[1]].active && Main.npc[(int)this.ai[1]].type == 396)
				{
					Vector2 value28 = Utils.Vector2FromElipse(elipseSizes: new Vector2(27f, 59f) * Main.npc[(int)this.ai[1]].localAI[1], angleVector: Main.npc[(int)this.ai[1]].localAI[0].ToRotationVector2());
					base.position = Main.npc[(int)this.ai[1]].Center + value28 - new Vector2(width, height) / 2f;
				}
				else if (type == 455 && Main.npc[(int)this.ai[1]].active && Main.npc[(int)this.ai[1]].type == 400)
				{
					Vector2 value29 = Utils.Vector2FromElipse(elipseSizes: new Vector2(30f, 30f) * Main.npc[(int)this.ai[1]].localAI[1], angleVector: Main.npc[(int)this.ai[1]].localAI[0].ToRotationVector2());
					base.position = Main.npc[(int)this.ai[1]].Center + value29 - new Vector2(width, height) / 2f;
				}
				else if (type == 537 && Main.npc[(int)this.ai[1]].active && Main.npc[(int)this.ai[1]].type == 411)
				{
					Vector2 value30 = new Vector2(Main.npc[(int)this.ai[1]].direction * 6, -4f);
					base.position = Main.npc[(int)this.ai[1]].Center + value30 - base.Size / 2f + new Vector2(0f, 0f - Main.npc[(int)this.ai[1]].gfxOffY);
				}
				else if (type == 461 && Main.projectile[(int)this.ai[1]].active && Main.projectile[(int)this.ai[1]].type == 460)
				{
					Vector2 value31 = Vector2.Normalize(Main.projectile[(int)this.ai[1]].velocity);
					base.position = Main.projectile[(int)this.ai[1]].Center + value31 * 16f - new Vector2(width, height) / 2f + new Vector2(0f, 0f - Main.projectile[(int)this.ai[1]].gfxOffY);
					base.velocity = Vector2.Normalize(Main.projectile[(int)this.ai[1]].velocity);
				}
				else if (type == 642 && Main.projectile[(int)this.ai[1]].active && Main.projectile[(int)this.ai[1]].type == 641)
				{
					base.Center = Main.projectile[(int)this.ai[1]].Center;
					base.velocity = Vector2.Normalize(Main.projectile[(int)this.ai[1]].ai[1].ToRotationVector2());
				}
				else
				{
					if (type != 632 || !Main.projectile[(int)this.ai[1]].active || Main.projectile[(int)this.ai[1]].type != 633)
					{
						Kill();
						return;
					}
					float num800 = (float)(int)this.ai[0] - 2.5f;
					Vector2 value32 = Vector2.Normalize(Main.projectile[(int)this.ai[1]].velocity);
					Projectile projectile = Main.projectile[(int)this.ai[1]];
					float num801 = num800 * ((float)Math.PI / 6f);
					float num802 = 20f;
					Vector2 zero = Vector2.Zero;
					float num803 = 1f;
					float num804 = 15f;
					float num805 = -2f;
					if (projectile.ai[0] < 180f)
					{
						num803 = 1f - projectile.ai[0] / 180f;
						num804 = 20f - projectile.ai[0] / 180f * 14f;
						if (projectile.ai[0] < 120f)
						{
							num802 = 20f - 4f * (projectile.ai[0] / 120f);
							Opacity = projectile.ai[0] / 120f * 0.4f;
						}
						else
						{
							num802 = 16f - 10f * ((projectile.ai[0] - 120f) / 60f);
							Opacity = 0.4f + (projectile.ai[0] - 120f) / 60f * 0.6f;
						}
						num805 = -22f + projectile.ai[0] / 180f * 20f;
					}
					else
					{
						num803 = 0f;
						num802 = 1.75f;
						num804 = 6f;
						Opacity = 1f;
						num805 = -2f;
					}
					float num806 = (projectile.ai[0] + num800 * num802) / (num802 * 6f) * ((float)Math.PI * 2f);
					num801 = Vector2.UnitY.RotatedBy(num806).Y * ((float)Math.PI / 6f) * num803;
					zero = (Vector2.UnitY.RotatedBy(num806) * new Vector2(4f, num804)).RotatedBy(projectile.velocity.ToRotation());
					base.position = projectile.Center + value32 * 16f - base.Size / 2f + new Vector2(0f, 0f - Main.projectile[(int)this.ai[1]].gfxOffY);
					base.position += projectile.velocity.ToRotation().ToRotationVector2() * num805;
					base.position += zero;
					base.velocity = Vector2.Normalize(projectile.velocity).RotatedBy(num801);
					scale = 1.4f * (1f - num803);
					damage = projectile.damage;
					if (projectile.ai[0] >= 180f)
					{
						damage *= 3;
						vector53 = projectile.Center;
					}
					if (!Collision.CanHitLine(Main.player[owner].Center, 0, 0, projectile.Center, 0, 0))
					{
						vector53 = Main.player[owner].Center;
					}
					friendly = (projectile.ai[0] > 30f);
				}
				if (base.velocity.HasNaNs() || base.velocity == Vector2.Zero)
				{
					base.velocity = -Vector2.UnitY;
				}
				if (type == 461)
				{
					this.ai[0] += 1f;
					if (this.ai[0] >= 300f)
					{
						Kill();
						return;
					}
					scale = (float)Math.Sin(this.ai[0] * (float)Math.PI / 300f) * 10f;
					if (scale > 1f)
					{
						scale = 1f;
					}
				}
				if (type == 455)
				{
					if (localAI[0] == 0f)
					{
						Main.PlaySound(29, (int)base.position.X, (int)base.position.Y, 104);
					}
					float num807 = 1f;
					if (Main.npc[(int)this.ai[1]].type == 400)
					{
						num807 = 0.4f;
					}
					localAI[0] += 1f;
					if (localAI[0] >= 180f)
					{
						Kill();
						return;
					}
					scale = (float)Math.Sin(localAI[0] * (float)Math.PI / 180f) * 10f * num807;
					if (scale > num807)
					{
						scale = num807;
					}
				}
				if (type == 642)
				{
					float num808 = 1f;
					localAI[0] += 1f;
					if (localAI[0] >= 50f)
					{
						Kill();
						return;
					}
					scale = (float)Math.Sin(localAI[0] * (float)Math.PI / 50f) * 10f * num808;
					if (scale > num808)
					{
						scale = num808;
					}
				}
				if (type == 537)
				{
					float num809 = 0.8f;
					localAI[0] += 1f;
					if (localAI[0] >= 60f)
					{
						Kill();
						return;
					}
					scale = (float)Math.Sin(localAI[0] * (float)Math.PI / 60f) * 10f * num809;
					if (scale > num809)
					{
						scale = num809;
					}
				}
				float num810 = base.velocity.ToRotation();
				if (type == 455)
				{
					num810 += this.ai[0];
				}
				rotation = num810 - (float)Math.PI / 2f;
				base.velocity = num810.ToRotationVector2();
				float num811 = 0f;
				float scaleFactor3 = 0f;
				Vector2 value33 = base.Center;
				if (vector53.HasValue)
				{
					value33 = vector53.Value;
				}
				if (type == 455)
				{
					num811 = 3f;
					scaleFactor3 = width;
				}
				else if (type == 461)
				{
					num811 = 2f;
					scaleFactor3 = 0f;
				}
				else if (type == 642)
				{
					num811 = 2f;
					scaleFactor3 = 0f;
				}
				else if (type == 632)
				{
					num811 = 2f;
					scaleFactor3 = 0f;
				}
				else if (type == 537)
				{
					num811 = 2f;
					scaleFactor3 = 0f;
				}
				float[] array3 = new float[(int)num811];
				for (int num812 = 0; (float)num812 < num811; num812++)
				{
					float num813 = (float)num812 / (num811 - 1f);
					Vector2 value34 = value33 + base.velocity.RotatedBy(1.5707963705062866) * (num813 - 0.5f) * scaleFactor3 * scale;
					int num814 = (int)value34.X / 16;
					int num815 = (int)value34.Y / 16;
					Vector2 vector54 = value34 + base.velocity * 16f * 150f;
					int num816 = (int)vector54.X / 16;
					int num817 = (int)vector54.Y / 16;
					float num818 = 0f;
					Tuple<int, int> col;
					num818 = (array3[num812] = (Collision.TupleHitLine(num814, num815, num816, num817, 0, 0, new List<Tuple<int, int>>(), out col) ? ((col.Item1 != num816 || col.Item2 != num817) ? (new Vector2(Math.Abs(num814 - col.Item1), Math.Abs(num815 - col.Item2)).Length() * 16f) : 2400f) : (new Vector2(Math.Abs(num814 - col.Item1), Math.Abs(num815 - col.Item2)).Length() * 16f)));
				}
				float num819 = 0f;
				for (int num820 = 0; num820 < array3.Length; num820++)
				{
					num819 += array3[num820];
				}
				num819 /= num811;
				float amount = 0.5f;
				if (type == 632)
				{
					amount = 0.75f;
				}
				localAI[1] = MathHelper.Lerp(localAI[1], num819, amount);
				if (type == 455)
				{
					Vector2 vector55 = base.Center + base.velocity * (localAI[1] - 14f);
					for (int num821 = 0; num821 < 2; num821++)
					{
						float num822 = base.velocity.ToRotation() + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
						float num823 = (float)Main.rand.NextDouble() * 2f + 2f;
						Vector2 vector56 = new Vector2((float)Math.Cos(num822) * num823, (float)Math.Sin(num822) * num823);
						int num824 = Dust.NewDust(vector55, 0, 0, 229, vector56.X, vector56.Y);
						Main.dust[num824].noGravity = true;
						Main.dust[num824].scale = 1.7f;
					}
					if (Main.rand.Next(5) == 0)
					{
						Vector2 value35 = base.velocity.RotatedBy(1.5707963705062866) * ((float)Main.rand.NextDouble() - 0.5f) * width;
						int num825 = Dust.NewDust(vector55 + value35 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num825].velocity *= 0.5f;
						Main.dust[num825].velocity.Y = 0f - Math.Abs(Main.dust[num825].velocity.Y);
					}
					DelegateMethods.v3_1 = new Vector3(0.3f, 0.65f, 0.7f);
					Utils.PlotTileLine(base.Center, base.Center + base.velocity * localAI[1], (float)width * scale, DelegateMethods.CastLight);
				}
				else if (type == 642)
				{
					Vector2 vector57 = base.Center + base.velocity * (localAI[1] - 14f);
					for (int num826 = 0; num826 < 2; num826++)
					{
						float num827 = base.velocity.ToRotation() + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
						float num828 = (float)Main.rand.NextDouble() * 2f + 2f;
						Vector2 vector58 = new Vector2((float)Math.Cos(num827) * num828, (float)Math.Sin(num827) * num828);
						int num829 = Dust.NewDust(vector57, 0, 0, 229, vector58.X, vector58.Y);
						Main.dust[num829].noGravity = true;
						Main.dust[num829].scale = 1.7f;
					}
					if (Main.rand.Next(5) == 0)
					{
						Vector2 value36 = base.velocity.RotatedBy(1.5707963705062866) * ((float)Main.rand.NextDouble() - 0.5f) * width;
						int num830 = Dust.NewDust(vector57 + value36 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num830].velocity *= 0.5f;
						Main.dust[num830].velocity.Y = 0f - Math.Abs(Main.dust[num830].velocity.Y);
					}
					DelegateMethods.v3_1 = new Vector3(0.3f, 0.65f, 0.7f);
					Utils.PlotTileLine(base.Center, base.Center + base.velocity * localAI[1], (float)width * scale, DelegateMethods.CastLight);
				}
				if (type == 461)
				{
					Vector2 vector59 = base.Center + base.velocity * (localAI[1] - 8f);
					for (int num831 = 0; num831 < 2; num831++)
					{
						float num832 = base.velocity.ToRotation() + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
						float num833 = (float)Main.rand.NextDouble() * 0.8f + 1f;
						Vector2 vector60 = new Vector2((float)Math.Cos(num832) * num833, (float)Math.Sin(num832) * num833);
						int num834 = Dust.NewDust(vector59, 0, 0, 226, vector60.X, vector60.Y);
						Main.dust[num834].noGravity = true;
						Main.dust[num834].scale = 1.2f;
					}
					if (Main.rand.Next(5) == 0)
					{
						Vector2 value37 = base.velocity.RotatedBy(1.5707963705062866) * ((float)Main.rand.NextDouble() - 0.5f) * width;
						int num835 = Dust.NewDust(vector59 + value37 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num835].velocity *= 0.5f;
						Main.dust[num835].velocity.Y = 0f - Math.Abs(Main.dust[num835].velocity.Y);
					}
					DelegateMethods.v3_1 = new Vector3(0.4f, 0.85f, 0.9f);
					Utils.PlotTileLine(base.Center, base.Center + base.velocity * localAI[1], (float)width * scale, DelegateMethods.CastLight);
				}
				if (type == 537)
				{
					Vector2 vector61 = base.Center + base.velocity * (localAI[1] - 8f);
					for (int num836 = 0; num836 < 2; num836++)
					{
						float num837 = base.velocity.ToRotation() + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
						float num838 = (float)Main.rand.NextDouble() * 0.8f + 1f;
						Vector2 vector62 = new Vector2((float)Math.Cos(num837) * num838, (float)Math.Sin(num837) * num838);
						int num839 = Dust.NewDust(vector61, 0, 0, 226, vector62.X, vector62.Y);
						Main.dust[num839].noGravity = true;
						Main.dust[num839].scale = 1.2f;
					}
					if (Main.rand.Next(5) == 0)
					{
						Vector2 value38 = base.velocity.RotatedBy(1.5707963705062866) * ((float)Main.rand.NextDouble() - 0.5f) * width;
						int num840 = Dust.NewDust(vector61 + value38 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num840].velocity *= 0.5f;
						Main.dust[num840].velocity.Y = 0f - Math.Abs(Main.dust[num840].velocity.Y);
					}
					DelegateMethods.v3_1 = new Vector3(0.4f, 0.85f, 0.9f);
					Utils.PlotTileLine(base.Center, base.Center + base.velocity * localAI[1], (float)width * scale, DelegateMethods.CastLight);
				}
				if (type != 632 || !(Math.Abs(localAI[1] - num819) < 100f) || !(scale > 0.15f))
				{
					return;
				}
				float prismHue = GetPrismHue(this.ai[0]);
				Color color = Main.hslToRgb(prismHue, 1f, 0.5f);
				color.A = 0;
				Vector2 vector63 = base.Center + base.velocity * (localAI[1] - 14.5f * scale);
				float x2 = Main.rgbToHsl(new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB)).X;
				for (int num841 = 0; num841 < 2; num841++)
				{
					float num842 = base.velocity.ToRotation() + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
					float num843 = (float)Main.rand.NextDouble() * 0.8f + 1f;
					Vector2 vector64 = new Vector2((float)Math.Cos(num842) * num843, (float)Math.Sin(num842) * num843);
					int num844 = Dust.NewDust(vector63, 0, 0, 267, vector64.X, vector64.Y);
					Main.dust[num844].color = color;
					Main.dust[num844].scale = 1.2f;
					if (scale > 1f)
					{
						Main.dust[num844].velocity *= scale;
						Main.dust[num844].scale *= scale;
					}
					Main.dust[num844].noGravity = true;
					if (scale != 1.4f)
					{
						Dust dust8 = Dust.CloneDust(Main.dust[num844]);
						dust8.color = Color.White;
						dust8.scale /= 2f;
					}
					float hue = (x2 + Main.rand.NextFloat() * 0.4f) % 1f;
					Main.dust[num844].color = Color.Lerp(color, Main.hslToRgb(hue, 1f, 0.75f), scale / 1.4f);
				}
				if (Main.rand.Next(5) == 0)
				{
					Vector2 value39 = base.velocity.RotatedBy(1.5707963705062866) * ((float)Main.rand.NextDouble() - 0.5f) * width;
					int num845 = Dust.NewDust(vector63 + value39 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num845].velocity *= 0.5f;
					Main.dust[num845].velocity.Y = 0f - Math.Abs(Main.dust[num845].velocity.Y);
				}
				DelegateMethods.v3_1 = color.ToVector3() * 0.3f;
				Utils.PlotTileLine(base.Center, base.Center + base.velocity * localAI[1], (float)width * scale, DelegateMethods.CastLight);
			}
			else if (aiStyle == 85)
			{
				Vector2 value40 = new Vector2(0f, 216f);
				alpha -= 15;
				if (alpha < 0)
				{
					alpha = 0;
				}
				int num846 = (int)Math.Abs(this.ai[0]) - 1;
				int num847 = (int)this.ai[1];
				if (!Main.npc[num846].active || Main.npc[num846].type != 396)
				{
					Kill();
					return;
				}
				localAI[0] += 1f;
				if (localAI[0] >= 330f && this.ai[0] > 0f && Main.netMode != 1)
				{
					this.ai[0] *= -1f;
					netUpdate = true;
				}
				if (Main.netMode != 1 && this.ai[0] > 0f && (!Main.player[(int)this.ai[1]].active || Main.player[(int)this.ai[1]].dead))
				{
					this.ai[0] *= -1f;
					netUpdate = true;
				}
				rotation = (Main.npc[(int)Math.Abs(this.ai[0]) - 1].Center - Main.player[(int)this.ai[1]].Center + value40).ToRotation() + (float)Math.PI / 2f;
				if (this.ai[0] > 0f)
				{
					Vector2 value41 = Main.player[(int)this.ai[1]].Center - base.Center;
					if (value41.X != 0f || value41.Y != 0f)
					{
						base.velocity = Vector2.Normalize(value41) * Math.Min(16f, value41.Length());
					}
					else
					{
						base.velocity = Vector2.Zero;
					}
					if (value41.Length() < 20f && localAI[1] == 0f)
					{
						localAI[1] = 1f;
						int time = 840;
						if (Main.expertMode)
						{
							time = 960;
						}
						Main.player[num847].AddBuff(145, time);
					}
				}
				else
				{
					Vector2 value42 = Main.npc[(int)Math.Abs(this.ai[0]) - 1].Center - base.Center + value40;
					if (value42.X != 0f || value42.Y != 0f)
					{
						base.velocity = Vector2.Normalize(value42) * Math.Min(16f, value42.Length());
					}
					else
					{
						base.velocity = Vector2.Zero;
					}
					if (value42.Length() < 20f)
					{
						Kill();
					}
				}
			}
			else if (aiStyle == 86)
			{
				if (localAI[1] == 0f)
				{
					localAI[1] = 1f;
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 120);
				}
				this.ai[0] += 1f;
				if (this.ai[1] == 1f)
				{
					if (this.ai[0] >= 130f)
					{
						alpha += 10;
					}
					else
					{
						alpha -= 10;
					}
					if (alpha < 0)
					{
						alpha = 0;
					}
					if (alpha > 255)
					{
						alpha = 255;
					}
					if (this.ai[0] >= 150f)
					{
						Kill();
						return;
					}
					if (this.ai[0] % 30f == 0f && Main.netMode != 1)
					{
						Vector2 vector65 = rotation.ToRotationVector2();
						NewProjectile(base.Center.X, base.Center.Y, vector65.X, vector65.Y, 464, damage, knockBack, owner);
					}
					rotation += (float)Math.PI / 30f;
					Lighting.AddLight(base.Center, 0.3f, 0.75f, 0.9f);
					return;
				}
				base.position -= base.velocity;
				if (this.ai[0] >= 40f)
				{
					alpha += 3;
				}
				else
				{
					alpha -= 40;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (alpha > 255)
				{
					alpha = 255;
				}
				if (this.ai[0] >= 45f)
				{
					Kill();
					return;
				}
				Vector2 value43 = new Vector2(0f, -720f).RotatedBy(base.velocity.ToRotation());
				float scaleFactor4 = this.ai[0] % 45f / 45f;
				Vector2 spinningpoint12 = value43 * scaleFactor4;
				for (int num848 = 0; num848 < 6; num848++)
				{
					Vector2 vector66 = base.Center + spinningpoint12.RotatedBy((float)num848 * ((float)Math.PI * 2f) / 6f);
					Lighting.AddLight(vector66, 0.3f, 0.75f, 0.9f);
					for (int num849 = 0; num849 < 2; num849++)
					{
						int num850 = Dust.NewDust(vector66 + Utils.RandomVector2(Main.rand, -8f, 8f) / 2f, 8, 8, 197, 0f, 0f, 100, Color.Transparent);
						Main.dust[num850].noGravity = true;
					}
				}
			}
			else if (aiStyle == 87)
			{
				base.position.Y = this.ai[0];
				height = (int)this.ai[1];
				if (base.Center.X > Main.player[owner].Center.X)
				{
					base.direction = 1;
				}
				else
				{
					base.direction = -1;
				}
				base.velocity.X = (float)base.direction * 1E-06f;
				if (owner == Main.myPlayer)
				{
					for (int num851 = 0; num851 < 1000; num851++)
					{
						if (Main.projectile[num851].active && num851 != whoAmI && Main.projectile[num851].type == type && Main.projectile[num851].owner == owner && Main.projectile[num851].timeLeft > timeLeft)
						{
							Kill();
							return;
						}
					}
				}
				float num852 = (float)(width * height) * 0.0045f;
				for (int num853 = 0; (float)num853 < num852; num853++)
				{
					int num854 = Dust.NewDust(base.position, width, height, 75, 0f, 0f, 100);
					Main.dust[num854].noGravity = true;
					Main.dust[num854].velocity *= 0.5f;
					Main.dust[num854].velocity.Y -= 0.5f;
					Main.dust[num854].scale = 1.4f;
					Main.dust[num854].position.X += 6f;
					Main.dust[num854].position.Y -= 2f;
				}
			}
			else if (aiStyle == 88)
			{
				if (type == 465)
				{
					if (localAI[1] == 0f)
					{
						Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 121);
						localAI[1] = 1f;
					}
					if (this.ai[0] < 180f)
					{
						alpha -= 5;
						if (alpha < 0)
						{
							alpha = 0;
						}
					}
					else
					{
						alpha += 5;
						if (alpha > 255)
						{
							alpha = 255;
							Kill();
							return;
						}
					}
					this.ai[0] += 1f;
					if (this.ai[0] % 30f == 0f && this.ai[0] < 180f && Main.netMode != 1)
					{
						int[] array4 = new int[5];
						Vector2[] array5 = new Vector2[5];
						int num855 = 0;
						float num856 = 2000f;
						for (int num857 = 0; num857 < 16; num857++)
						{
							if (!Main.player[num857].active || Main.player[num857].dead)
							{
								continue;
							}
							Vector2 center9 = Main.player[num857].Center;
							float num858 = Vector2.Distance(center9, base.Center);
							if (num858 < num856 && Collision.CanHit(base.Center, 1, 1, center9, 1, 1))
							{
								array4[num855] = num857;
								array5[num855] = center9;
								if (++num855 >= array5.Length)
								{
									break;
								}
							}
						}
						for (int num859 = 0; num859 < num855; num859++)
						{
							Vector2 vector67 = array5[num859] - base.Center;
							float ai = Main.rand.Next(100);
							Vector2 vector68 = Vector2.Normalize(vector67.RotatedByRandom(0.78539818525314331)) * 7f;
							NewProjectile(base.Center.X, base.Center.Y, vector68.X, vector68.Y, 466, damage, 0f, Main.myPlayer, vector67.ToRotation(), ai);
						}
					}
					Lighting.AddLight(base.Center, 0.4f, 0.85f, 0.9f);
					if (++frameCounter >= 4)
					{
						frameCounter = 0;
						if (++frame >= Main.projFrames[type])
						{
							frame = 0;
						}
					}
					if (alpha >= 150 || !(this.ai[0] < 180f))
					{
						return;
					}
					for (int num860 = 0; num860 < 1; num860++)
					{
						float num861 = (float)Main.rand.NextDouble() * 1f - 0.5f;
						if (num861 < -0.5f)
						{
							num861 = -0.5f;
						}
						if (num861 > 0.5f)
						{
							num861 = 0.5f;
						}
						Vector2 value44 = new Vector2((float)(-width) * 0.2f * scale, 0f).RotatedBy(num861 * ((float)Math.PI * 2f)).RotatedBy(base.velocity.ToRotation());
						int num862 = Dust.NewDust(base.Center - Vector2.One * 5f, 10, 10, 226, (0f - base.velocity.X) / 3f, (0f - base.velocity.Y) / 3f, 150, Color.Transparent, 0.7f);
						Main.dust[num862].position = base.Center + value44;
						Main.dust[num862].velocity = Vector2.Normalize(Main.dust[num862].position - base.Center) * 2f;
						Main.dust[num862].noGravity = true;
					}
					for (int num863 = 0; num863 < 1; num863++)
					{
						float num864 = (float)Main.rand.NextDouble() * 1f - 0.5f;
						if (num864 < -0.5f)
						{
							num864 = -0.5f;
						}
						if (num864 > 0.5f)
						{
							num864 = 0.5f;
						}
						Vector2 value45 = new Vector2((float)(-width) * 0.6f * scale, 0f).RotatedBy(num864 * ((float)Math.PI * 2f)).RotatedBy(base.velocity.ToRotation());
						int num865 = Dust.NewDust(base.Center - Vector2.One * 5f, 10, 10, 226, (0f - base.velocity.X) / 3f, (0f - base.velocity.Y) / 3f, 150, Color.Transparent, 0.7f);
						Main.dust[num865].velocity = Vector2.Zero;
						Main.dust[num865].position = base.Center + value45;
						Main.dust[num865].noGravity = true;
					}
				}
				else if (type == 466)
				{
					frameCounter++;
					Lighting.AddLight(base.Center, 0.3f, 0.45f, 0.5f);
					if (base.velocity == Vector2.Zero)
					{
						if (frameCounter >= extraUpdates * 2)
						{
							frameCounter = 0;
							bool flag32 = true;
							for (int num866 = 1; num866 < oldPos.Length; num866++)
							{
								if (oldPos[num866] != oldPos[0])
								{
									flag32 = false;
								}
							}
							if (flag32)
							{
								Kill();
								return;
							}
						}
						if (Main.rand.Next(extraUpdates) == 0)
						{
							for (int num867 = 0; num867 < 2; num867++)
							{
								float num868 = rotation + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
								float num869 = (float)Main.rand.NextDouble() * 0.8f + 1f;
								Vector2 vector69 = new Vector2((float)Math.Cos(num868) * num869, (float)Math.Sin(num868) * num869);
								int num870 = Dust.NewDust(base.Center, 0, 0, 226, vector69.X, vector69.Y);
								Main.dust[num870].noGravity = true;
								Main.dust[num870].scale = 1.2f;
							}
							if (Main.rand.Next(5) == 0)
							{
								Vector2 value46 = base.velocity.RotatedBy(1.5707963705062866) * ((float)Main.rand.NextDouble() - 0.5f) * width;
								int num871 = Dust.NewDust(base.Center + value46 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
								Main.dust[num871].velocity *= 0.5f;
								Main.dust[num871].velocity.Y = 0f - Math.Abs(Main.dust[num871].velocity.Y);
							}
						}
					}
					else
					{
						if (frameCounter < extraUpdates * 2)
						{
							return;
						}
						frameCounter = 0;
						float num872 = base.velocity.Length();
						Random random = new Random((int)this.ai[1]);
						int num873 = 0;
						Vector2 spinningpoint13 = -Vector2.UnitY;
						while (true)
						{
							int num874 = random.Next();
							this.ai[1] = num874;
							num874 %= 100;
							float f = (float)num874 / 100f * ((float)Math.PI * 2f);
							Vector2 vector70 = f.ToRotationVector2();
							if (vector70.Y > 0f)
							{
								vector70.Y *= -1f;
							}
							bool flag33 = false;
							if (vector70.Y > -0.02f)
							{
								flag33 = true;
							}
							if (vector70.X * (float)(extraUpdates + 1) * 2f * num872 + localAI[0] > 40f)
							{
								flag33 = true;
							}
							if (vector70.X * (float)(extraUpdates + 1) * 2f * num872 + localAI[0] < -40f)
							{
								flag33 = true;
							}
							if (flag33)
							{
								if (num873++ >= 100)
								{
									base.velocity = Vector2.Zero;
									localAI[1] = 1f;
									break;
								}
								continue;
							}
							spinningpoint13 = vector70;
							break;
						}
						if (base.velocity != Vector2.Zero)
						{
							localAI[0] += spinningpoint13.X * (float)(extraUpdates + 1) * 2f * num872;
							base.velocity = spinningpoint13.RotatedBy(this.ai[0] + (float)Math.PI / 2f) * num872;
							rotation = base.velocity.ToRotation() + (float)Math.PI / 2f;
						}
					}
				}
				else
				{
					if (type != 580)
					{
						return;
					}
					if (localAI[1] == 0f && this.ai[0] >= 900f)
					{
						this.ai[0] -= 1000f;
						localAI[1] = -1f;
					}
					frameCounter++;
					Lighting.AddLight(base.Center, 0.3f, 0.45f, 0.5f);
					if (base.velocity == Vector2.Zero)
					{
						if (frameCounter >= extraUpdates * 2)
						{
							frameCounter = 0;
							bool flag34 = true;
							for (int num875 = 1; num875 < oldPos.Length; num875++)
							{
								if (oldPos[num875] != oldPos[0])
								{
									flag34 = false;
								}
							}
							if (flag34)
							{
								Kill();
								return;
							}
						}
						if (Main.rand.Next(extraUpdates) == 0 && (base.velocity != Vector2.Zero || Main.rand.Next((localAI[1] == 2f) ? 2 : 6) == 0))
						{
							for (int num876 = 0; num876 < 2; num876++)
							{
								float num877 = rotation + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
								float num878 = (float)Main.rand.NextDouble() * 0.8f + 1f;
								Vector2 vector71 = new Vector2((float)Math.Cos(num877) * num878, (float)Math.Sin(num877) * num878);
								int num879 = Dust.NewDust(base.Center, 0, 0, 226, vector71.X, vector71.Y);
								Main.dust[num879].noGravity = true;
								Main.dust[num879].scale = 1.2f;
							}
							if (Main.rand.Next(5) == 0)
							{
								Vector2 value47 = base.velocity.RotatedBy(1.5707963705062866) * ((float)Main.rand.NextDouble() - 0.5f) * width;
								int num880 = Dust.NewDust(base.Center + value47 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
								Main.dust[num880].velocity *= 0.5f;
								Main.dust[num880].velocity.Y = 0f - Math.Abs(Main.dust[num880].velocity.Y);
							}
						}
					}
					else
					{
						if (frameCounter < extraUpdates * 2)
						{
							return;
						}
						frameCounter = 0;
						float num881 = base.velocity.Length();
						Random random2 = new Random((int)this.ai[1]);
						int num882 = 0;
						Vector2 spinningpoint14 = -Vector2.UnitY;
						while (true)
						{
							int num883 = random2.Next();
							this.ai[1] = num883;
							num883 %= 100;
							float f2 = (float)num883 / 100f * ((float)Math.PI * 2f);
							Vector2 vector72 = f2.ToRotationVector2();
							if (vector72.Y > 0f)
							{
								vector72.Y *= -1f;
							}
							bool flag35 = false;
							if (vector72.Y > -0.02f)
							{
								flag35 = true;
							}
							if (vector72.X * (float)(extraUpdates + 1) * 2f * num881 + localAI[0] > 40f)
							{
								flag35 = true;
							}
							if (vector72.X * (float)(extraUpdates + 1) * 2f * num881 + localAI[0] < -40f)
							{
								flag35 = true;
							}
							if (flag35)
							{
								if (num882++ >= 100)
								{
									base.velocity = Vector2.Zero;
									if (localAI[1] < 1f)
									{
										localAI[1] += 2f;
									}
									break;
								}
								continue;
							}
							spinningpoint14 = vector72;
							break;
						}
						if (!(base.velocity != Vector2.Zero))
						{
							return;
						}
						localAI[0] += spinningpoint14.X * (float)(extraUpdates + 1) * 2f * num881;
						base.velocity = spinningpoint14.RotatedBy(this.ai[0] + (float)Math.PI / 2f) * num881;
						rotation = base.velocity.ToRotation() + (float)Math.PI / 2f;
						if (Main.rand.Next(4) == 0 && Main.netMode != 1 && localAI[1] == 0f)
						{
							float num884 = (float)Main.rand.Next(-3, 4) * ((float)Math.PI / 3f) / 3f;
							Vector2 vector73 = this.ai[0].ToRotationVector2().RotatedBy(num884) * base.velocity.Length();
							if (!Collision.CanHitLine(base.Center, 0, 0, base.Center + vector73 * 50f, 0, 0))
							{
								NewProjectile(base.Center.X - vector73.X, base.Center.Y - vector73.Y, vector73.X, vector73.Y, type, damage, knockBack, owner, vector73.ToRotation() + 1000f, this.ai[1]);
							}
						}
					}
				}
			}
			else if (aiStyle == 89)
			{
				if (this.ai[1] == -1f)
				{
					alpha += 12;
				}
				else if (this.ai[0] < 300f)
				{
					alpha -= 5;
				}
				else
				{
					alpha += 12;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (alpha > 255)
				{
					alpha = 255;
				}
				scale = 1f - (float)alpha / 255f;
				scale *= 0.6f;
				rotation += (float)Math.PI / 210f;
				if (localAI[1] == 0f)
				{
					localAI[1] = 1f;
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 123);
				}
				if (alpha == 0)
				{
					for (int num885 = 0; num885 < 2; num885++)
					{
						float num886 = Main.rand.Next(2, 4);
						float num887 = scale;
						if (num885 == 1)
						{
							num887 *= 0.42f;
							num886 *= -0.75f;
						}
						Vector2 value48 = new Vector2(Main.rand.Next(-10, 11), Main.rand.Next(-10, 11));
						value48.Normalize();
						int num888 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 228, 0f, 0f, 100, default(Color), 2f);
						Main.dust[num888].noGravity = true;
						Main.dust[num888].noLight = true;
						Main.dust[num888].position = base.Center + value48 * 204f * num887;
						if (Main.rand.Next(8) == 0)
						{
							Main.dust[num888].velocity = value48 * (0f - num886) * 2f;
							Main.dust[num888].scale += 0.5f;
						}
						else
						{
							Main.dust[num888].velocity = value48 * (0f - num886);
						}
					}
				}
				this.ai[0] += 1f;
				if (this.ai[0] >= 60f)
				{
					int num1110 = (int)(this.ai[0] - 0f) / 60;
					for (int num889 = 0; num889 < 1; num889++)
					{
						float scaleFactor5 = Main.rand.Next(1, 3);
						Vector2 value49 = new Vector2(Main.rand.Next(-10, 11), Main.rand.Next(-10, 11));
						value49.Normalize();
						int num890 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 228, 0f, 0f, 100, default(Color), 2f);
						Main.dust[num890].noGravity = true;
						Main.dust[num890].noLight = true;
						Main.dust[num890].position = base.Center;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num890].velocity = value49 * scaleFactor5 * 2f;
							Main.dust[num890].scale += 0.5f;
						}
						else
						{
							Main.dust[num890].velocity = value49 * scaleFactor5;
						}
						Main.dust[num890].fadeIn = 2f;
					}
				}
				if (this.ai[0] == 300f && this.ai[1] != -1f && Main.netMode != 1)
				{
					if (!NPC.AnyNPCs(454))
					{
						this.ai[1] = NPC.NewNPC((int)base.Center.X, (int)base.Center.Y, 454);
					}
					else
					{
						this.ai[1] = NPC.NewNPC((int)base.Center.X, (int)base.Center.Y, 521);
					}
				}
				else if (this.ai[0] == 320f)
				{
					Kill();
					return;
				}
				bool flag36 = false;
				if (this.ai[1] == -1f)
				{
					if (alpha == 255)
					{
						flag36 = true;
					}
				}
				else
				{
					flag36 = (!(this.ai[1] >= 0f) || !Main.npc[(int)this.ai[1]].active);
					if ((flag36 || Main.npc[(int)this.ai[1]].type != 439) && (flag36 || Main.npc[(int)this.ai[1]].type != 454) && (flag36 || Main.npc[(int)this.ai[1]].type != 521))
					{
						flag36 = true;
					}
				}
				if (flag36)
				{
					Kill();
				}
				else
				{
					Lighting.AddLight(base.Center, 1.1f, 0.9f, 0.4f);
				}
			}
			else if (aiStyle == 90)
			{
				if (Main.player[owner].dead)
				{
					Kill();
				}
				if (Main.myPlayer == owner && Main.player[owner].magicLantern)
				{
					timeLeft = 2;
				}
				if (tileCollide)
				{
					if (!Collision.CanHit(base.position, width, height, Main.player[owner].Center, 1, 1))
					{
						tileCollide = false;
					}
					else if (!Collision.SolidCollision(base.position, width, height) && Collision.CanHitLine(base.position, width, height, Main.player[owner].Center, 1, 1))
					{
						tileCollide = true;
					}
				}
				base.direction = Main.player[owner].direction;
				spriteDirection = base.direction;
				Lighting.AddLight(base.position, 0.35f, 0.35f, 0.1f);
				localAI[0] += 1f;
				if (localAI[0] >= 10f)
				{
					localAI[0] = 0f;
					int num891 = 17;
					if ((base.Center - Main.player[Main.myPlayer].Center).Length() < (float)(Main.screenWidth + num891 * 16))
					{
						int num892 = (int)base.Center.X / 16;
						int num893 = (int)base.Center.Y / 16;
						for (int num894 = num892 - num891; num894 <= num892 + num891; num894++)
						{
							for (int num895 = num893 - num891; num895 <= num893 + num891; num895++)
							{
								if (Main.rand.Next(4) != 0 || !(new Vector2(num892 - num894, num893 - num895).Length() < (float)num891) || num894 <= 0 || num894 >= Main.maxTilesX - 1 || num895 <= 0 || num895 >= Main.maxTilesY - 1 || Main.tile[num894, num895] == null || !Main.tile[num894, num895].active())
								{
									continue;
								}
								bool flag37 = false;
								if (Main.tile[num894, num895].type == 185 && Main.tile[num894, num895].frameY == 18)
								{
									if (Main.tile[num894, num895].frameX >= 576 && Main.tile[num894, num895].frameX <= 882)
									{
										flag37 = true;
									}
								}
								else if (Main.tile[num894, num895].type == 186 && Main.tile[num894, num895].frameX >= 864 && Main.tile[num894, num895].frameX <= 1170)
								{
									flag37 = true;
								}
								if (flag37 || Main.tileSpelunker[Main.tile[num894, num895].type] || (Main.tileAlch[Main.tile[num894, num895].type] && Main.tile[num894, num895].type != 82))
								{
									int num896 = Dust.NewDust(new Vector2(num894 * 16, num895 * 16), 16, 16, 204, 0f, 0f, 150, default(Color), 0.3f);
									Main.dust[num896].fadeIn = 0.75f;
									Main.dust[num896].velocity *= 0.1f;
									Main.dust[num896].noLight = true;
								}
							}
						}
					}
				}
				Vector2 value50 = Main.player[owner].Center - base.Center;
				value50.X += 40 * base.direction;
				value50.Y -= 40f;
				float num897 = value50.Length();
				if (num897 > 1000f)
				{
					base.Center = Main.player[owner].Center;
				}
				float num898 = 3f;
				float num899 = 4f;
				if (num897 > 200f)
				{
					num899 += (num897 - 200f) * 0.1f;
					tileCollide = false;
				}
				if (num897 < num899)
				{
					base.velocity *= 0.25f;
					num899 = num897;
				}
				if (value50.X != 0f || value50.Y != 0f)
				{
					value50.Normalize();
					value50 *= num899;
				}
				base.velocity = (base.velocity * (num898 - 1f) + value50) / num898;
				if (base.velocity.Length() > 6f)
				{
					float num900 = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
					if ((double)Math.Abs(rotation - num900) >= 3.14)
					{
						if (num900 < rotation)
						{
							rotation -= 6.28f;
						}
						else
						{
							rotation += 6.28f;
						}
					}
					rotation = (rotation * 4f + num900) / 5f;
					frameCounter++;
					if (frameCounter > 4)
					{
						frameCounter = 0;
						frame++;
						if (frame > 7)
						{
							frame = 4;
						}
					}
					if (frame < 4)
					{
						frame = 7;
					}
					return;
				}
				if ((double)rotation > 3.14)
				{
					rotation -= 6.28f;
				}
				if ((double)rotation > -0.01 && (double)rotation < 0.01)
				{
					rotation = 0f;
				}
				else
				{
					rotation *= 0.9f;
				}
				frameCounter++;
				if (frameCounter > 6)
				{
					frameCounter = 0;
					frame++;
					if (frame > 3)
					{
						frame = 0;
					}
				}
			}
			else if (aiStyle == 91)
			{
				Vector2 center10 = base.Center;
				scale = 1f - localAI[0];
				width = (int)(20f * scale);
				height = width;
				base.position.X = center10.X - (float)(width / 2);
				base.position.Y = center10.Y - (float)(height / 2);
				if ((double)localAI[0] < 0.1)
				{
					localAI[0] += 0.01f;
				}
				else
				{
					localAI[0] += 0.025f;
				}
				if (localAI[0] >= 0.95f)
				{
					Kill();
				}
				base.velocity.X += this.ai[0] * 1.5f;
				base.velocity.Y += this.ai[1] * 1.5f;
				if (base.velocity.Length() > 16f)
				{
					base.velocity.Normalize();
					base.velocity *= 16f;
				}
				this.ai[0] *= 1.05f;
				this.ai[1] *= 1.05f;
				if (scale < 1f)
				{
					for (int num901 = 0; (float)num901 < scale * 10f; num901++)
					{
						int num902 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 27, base.velocity.X, base.velocity.Y, 100, default(Color), 1.1f);
						Main.dust[num902].position = (Main.dust[num902].position + base.Center) / 2f;
						Main.dust[num902].noGravity = true;
						Main.dust[num902].velocity *= 0.1f;
						Main.dust[num902].velocity -= base.velocity * (1.3f - scale);
						Main.dust[num902].fadeIn = 100 + owner;
						Main.dust[num902].scale += scale * 0.75f;
					}
				}
			}
			else if (aiStyle == 92)
			{
				tileCollide = false;
				this.ai[1] += 1f;
				if (this.ai[1] > 60f)
				{
					this.ai[0] += 10f;
				}
				if (this.ai[0] > 255f)
				{
					Kill();
					this.ai[0] = 255f;
				}
				alpha = (int)(100.0 + (double)this.ai[0] * 0.7);
				rotation += base.velocity.X * 0.1f;
				rotation += (float)base.direction * 0.003f;
				base.velocity *= 0.96f;
				Rectangle rectangle6 = new Rectangle((int)base.position.X, (int)base.position.Y, width, height);
				for (int num903 = 0; num903 < 1000; num903++)
				{
					if (num903 == whoAmI || !Main.projectile[num903].active || Main.projectile[num903].type < 511 || Main.projectile[num903].type > 513)
					{
						continue;
					}
					Rectangle value51 = new Rectangle((int)Main.projectile[num903].position.X, (int)Main.projectile[num903].position.Y, Main.projectile[num903].width, Main.projectile[num903].height);
					if (!rectangle6.Intersects(value51))
					{
						continue;
					}
					Vector2 vector74 = Main.projectile[num903].Center - base.Center;
					if (vector74.X == 0f && vector74.Y == 0f)
					{
						if (num903 < whoAmI)
						{
							vector74.X = -1f;
							vector74.Y = 1f;
						}
						else
						{
							vector74.X = 1f;
							vector74.Y = -1f;
						}
					}
					vector74.Normalize();
					vector74 *= 0.005f;
					base.velocity -= vector74;
					Main.projectile[num903].velocity += vector74;
				}
			}
			else if (aiStyle == 93)
			{
				if (alpha > 0)
				{
					alpha -= 25;
					if (alpha <= 0)
					{
						alpha = 0;
					}
				}
				if (base.velocity.Y > 18f)
				{
					base.velocity.Y = 18f;
				}
				if (this.ai[0] == 0f)
				{
					this.ai[1] += 1f;
					if (this.ai[1] > 20f)
					{
						base.velocity.Y += 0.1f;
						base.velocity.X *= 0.992f;
					}
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
					return;
				}
				tileCollide = false;
				if (this.ai[0] == 1f)
				{
					tileCollide = false;
					base.velocity *= 0.6f;
				}
				else
				{
					tileCollide = false;
					int num904 = (int)(0f - this.ai[0]);
					num904--;
					base.position = Main.npc[num904].Center - base.velocity;
					base.position.X -= width / 2;
					base.position.Y -= height / 2;
					if (!Main.npc[num904].active || Main.npc[num904].life < 0)
					{
						tileCollide = true;
						this.ai[0] = 0f;
						this.ai[1] = 20f;
						base.velocity = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
						base.velocity.Normalize();
						base.velocity *= 6f;
						netUpdate = true;
					}
					else if (base.velocity.Length() > (float)((Main.npc[num904].width + Main.npc[num904].height) / 3))
					{
						base.velocity *= 0.99f;
					}
				}
				if (this.ai[0] != 0f)
				{
					this.ai[1] += 1f;
					if (this.ai[1] > 90f)
					{
						Kill();
					}
				}
			}
			else if (aiStyle == 94)
			{
				if (++frameCounter >= 4)
				{
					frameCounter = 0;
					if (++frame >= Main.projFrames[type])
					{
						frame = 0;
					}
				}
				this.ai[0] += 1f;
				if (this.ai[0] <= 40f)
				{
					alpha -= 5;
					if (alpha < 0)
					{
						alpha = 0;
					}
					base.velocity *= 0.85f;
					if (this.ai[0] == 40f)
					{
						netUpdate = true;
						switch (Main.rand.Next(3))
						{
						case 0:
							this.ai[1] = 10f;
							break;
						case 1:
							this.ai[1] = 15f;
							break;
						case 2:
							this.ai[1] = 30f;
							break;
						}
					}
				}
				else if (this.ai[0] <= 60f)
				{
					base.velocity = Vector2.Zero;
					if (this.ai[0] == 60f)
					{
						netUpdate = true;
					}
				}
				else if (this.ai[0] <= 210f)
				{
					if (Main.netMode != 1 && (localAI[0] += 1f) >= this.ai[1])
					{
						localAI[0] = 0f;
						int num905 = Item.NewItem((int)base.Center.X, (int)base.Center.Y, 0, 0, 73);
						Main.item[num905].velocity = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * new Vector2(3f, 2f) * (Main.rand.NextFloat() * 0.5f + 0.5f) - Vector2.UnitY * 1f;
					}
					if (this.ai[0] == 210f)
					{
						netUpdate = true;
					}
				}
				else
				{
					scale -= 71f / (678f * (float)Math.PI);
					alpha += 15;
					if (this.ai[0] == 239f)
					{
						netUpdate = true;
					}
					if (this.ai[0] == 240f)
					{
						Kill();
					}
				}
				if (alpha < 90 && Main.rand.Next(3) == 0)
				{
					Vector2 value52 = new Vector2(width, height) * scale * 0.85f;
					value52 /= 2f;
					Vector2 value53 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * value52;
					int num906 = Dust.NewDust(base.Center + value53, 0, 0, 246);
					Main.dust[num906].position = base.Center + value53;
					Main.dust[num906].velocity = Vector2.Zero;
				}
				float num907 = 0.8f;
				float num908 = 181f / 255f;
				float num909 = 24f / 85f;
				Lighting.AddLight(base.Center, num907 * 0.3f, num908 * 0.3f, num909 * 0.3f);
			}
			else if (aiStyle == 95)
			{
				if (localAI[0] > 2f)
				{
					alpha -= 20;
					if (alpha < 100)
					{
						alpha = 100;
					}
				}
				else
				{
					localAI[0] += 1f;
				}
				if (this.ai[0] > 30f)
				{
					if (base.velocity.Y > -8f)
					{
						base.velocity.Y -= 0.05f;
					}
					base.velocity.X *= 0.98f;
				}
				else
				{
					this.ai[0] += 1f;
				}
				rotation = base.velocity.X * 0.1f;
				if (wet)
				{
					if (base.velocity.Y > 0f)
					{
						base.velocity.Y *= 0.98f;
					}
					if (base.velocity.Y > -8f)
					{
						base.velocity.Y -= 0.2f;
					}
					base.velocity.X *= 0.94f;
				}
			}
			else if (aiStyle == 96)
			{
				this.ai[0] += 0.6f;
				if (this.ai[0] > 500f)
				{
					Kill();
				}
				for (int num910 = 0; num910 < 2; num910++)
				{
					if (Main.rand.Next(3) != 0)
					{
						int num911 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 170, 0f, 0f, 100);
						Main.dust[num911].position = (Main.dust[num911].position + base.Center) / 2f;
						Main.dust[num911].noGravity = true;
						Main.dust[num911].velocity *= 0.1f;
						if (num910 == 1)
						{
							Main.dust[num911].position += base.velocity / 2f;
						}
						float num912 = (800f - this.ai[0]) / 800f;
						Main.dust[num911].scale *= num912 + 0.1f;
					}
				}
				base.velocity.Y += 0.008f;
			}
			else if (aiStyle == 97)
			{
				frameCounter++;
				float num913 = 4f;
				if ((float)frameCounter < num913 * 1f)
				{
					frame = 0;
				}
				else if ((float)frameCounter < num913 * 2f)
				{
					frame = 1;
				}
				else if ((float)frameCounter < num913 * 3f)
				{
					frame = 2;
				}
				else if ((float)frameCounter < num913 * 4f)
				{
					frame = 3;
				}
				else if ((float)frameCounter < num913 * 5f)
				{
					frame = 4;
				}
				else if ((float)frameCounter < num913 * 6f)
				{
					frame = 3;
				}
				else if ((float)frameCounter < num913 * 7f)
				{
					frame = 2;
				}
				else if ((float)frameCounter < num913 * 8f)
				{
					frame = 1;
				}
				else
				{
					frameCounter = 0;
					frame = 0;
				}
				if (owner == Main.myPlayer)
				{
					for (int num914 = 0; num914 < 1000; num914++)
					{
						if (num914 != whoAmI && Main.projectile[num914].active && Main.projectile[num914].owner == owner && Main.projectile[num914].type == type)
						{
							if (timeLeft >= Main.projectile[num914].timeLeft)
							{
								Main.projectile[num914].Kill();
							}
							else
							{
								Kill();
							}
						}
					}
				}
				if (this.ai[0] == 0f)
				{
					if ((double)base.velocity.Length() < 0.1)
					{
						base.velocity.X = 0f;
						base.velocity.Y = 0f;
						this.ai[0] = 1f;
						this.ai[1] = 45f;
						return;
					}
					base.velocity *= 0.94f;
					if (base.velocity.X < 0f)
					{
						base.direction = -1;
					}
					else
					{
						base.direction = 1;
					}
					spriteDirection = base.direction;
					return;
				}
				if (Main.player[owner].Center.X < base.Center.X)
				{
					base.direction = -1;
				}
				else
				{
					base.direction = 1;
				}
				spriteDirection = base.direction;
				this.ai[1] += 1f;
				float num915 = 0.005f;
				if (this.ai[1] > 0f)
				{
					base.velocity.Y -= num915;
				}
				else
				{
					base.velocity.Y += num915;
				}
				if (this.ai[1] >= 90f)
				{
					this.ai[1] *= -1f;
				}
			}
			else if (aiStyle == 98)
			{
				Vector2 value54 = new Vector2(this.ai[0], this.ai[1]);
				Vector2 value55 = value54 - base.Center;
				if (value55.Length() < base.velocity.Length())
				{
					Kill();
					return;
				}
				value55.Normalize();
				value55 *= 15f;
				base.velocity = Vector2.Lerp(base.velocity, value55, 0.1f);
				for (int num916 = 0; num916 < 2; num916++)
				{
					int num917 = Dust.NewDust(base.Center, 0, 0, 228, 0f, 0f, 100);
					Main.dust[num917].noGravity = true;
					Main.dust[num917].position += new Vector2(4f);
					Main.dust[num917].scale += Main.rand.NextFloat() * 1f;
				}
			}
			else if (aiStyle == 99 && type >= 556 && type <= 561)
			{
				AI_099_1();
			}
			else if (aiStyle == 99)
			{
				AI_099_2();
			}
			else if (aiStyle == 100)
			{
				Player player5 = Main.player[owner];
				Vector2 zero2 = Vector2.Zero;
				if (type == 535)
				{
					zero2.X = (float)player5.direction * 6f;
					zero2.Y = player5.gravDir * -14f;
					this.ai[0] += 1f;
					int num918 = 0;
					if (this.ai[0] >= 60f)
					{
						num918++;
					}
					if (this.ai[0] >= 180f)
					{
						num918++;
					}
					if (this.ai[0] >= 240f)
					{
						Kill();
						return;
					}
					bool flag38 = false;
					if (this.ai[0] == 60f || this.ai[0] == 180f)
					{
						flag38 = true;
					}
					bool flag39 = this.ai[0] >= 180f;
					if (flag39)
					{
						if (frame < 8)
						{
							frame = 8;
						}
						if (frame >= 12)
						{
							frame = 8;
						}
						frameCounter++;
						if (++frameCounter >= 5)
						{
							frameCounter = 0;
							if (++frame >= 12)
							{
								frame = 8;
							}
						}
					}
					else if (++frameCounter >= 5)
					{
						frameCounter = 0;
						if (++frame >= 8)
						{
							frame = 0;
						}
					}
					Vector2 center11 = player5.Center;
					Vector2 vector75 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - center11;
					if (player5.gravDir == -1f)
					{
						vector75.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - center11.Y;
					}
					Vector2 velocity2 = new Vector2(Math.Sign((vector75.X == 0f) ? ((float)player5.direction) : vector75.X), 0f);
					if (velocity2.X != base.velocity.X || velocity2.Y != base.velocity.Y)
					{
						netUpdate = true;
					}
					base.velocity = velocity2;
					if (soundDelay <= 0 && !flag39)
					{
						soundDelay = 10;
						soundDelay *= 2;
						if (this.ai[0] != 1f)
						{
							Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 15);
						}
					}
					if (this.ai[0] == 181f)
					{
						Main.PlaySound(4, (int)base.position.X, (int)base.position.Y, 17);
					}
					if (this.ai[0] > 10f && !flag39)
					{
						Vector2 vector76 = base.Center + new Vector2(player5.direction * 2, player5.gravDir * 5f);
						float scaleFactor6 = MathHelper.Lerp(30f, 10f, (this.ai[0] - 10f) / 180f);
						float num919 = Main.rand.NextFloat() * ((float)Math.PI * 2f);
						for (float num920 = 0f; num920 < 1f; num920 += 1f)
						{
							Vector2 value56 = Vector2.UnitY.RotatedBy(num920 / 1f * ((float)Math.PI * 2f) + num919);
							Dust dust9 = Main.dust[Dust.NewDust(vector76, 0, 0, 228)];
							dust9.position = vector76 + value56 * scaleFactor6;
							dust9.noGravity = true;
							dust9.customData = player5;
							dust9.velocity = value56 * -2f;
						}
					}
					if (this.ai[0] > 180f && this.ai[0] <= 182f)
					{
						Vector2 vector77 = base.Center + new Vector2(player5.direction * 2, player5.gravDir * 5f);
						float scaleFactor7 = MathHelper.Lerp(20f, 30f, (this.ai[0] - 180f) / 182f);
						Main.rand.NextFloat();
						for (float num921 = 0f; num921 < 10f; num921 += 1f)
						{
							Vector2 value57 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (Main.rand.NextFloat() * 0.5f + 0.5f);
							Dust dust10 = Main.dust[Dust.NewDust(vector77, 0, 0, 228)];
							dust10.position = vector77 + value57 * scaleFactor7;
							dust10.noGravity = true;
							dust10.customData = player5;
							dust10.velocity = value57 * 4f;
							dust10.scale = 0.5f + Main.rand.NextFloat();
						}
					}
					if (Main.myPlayer == owner)
					{
						bool flag40 = false;
						flag40 = (!flag38 || player5.CheckMana(player5.inventory[player5.selectedItem].mana, true));
						bool flag41 = player5.channel && flag40;
						if ((!flag39 && !flag41) || this.ai[0] == 180f)
						{
							Vector2 vector78 = player5.Center + new Vector2(player5.direction * 4, player5.gravDir * 2f);
							int num922 = damage * (1 + num918);
							vector78 = base.Center;
							int num923 = 0;
							float num924 = 0f;
							for (int num925 = 0; num925 < 200; num925++)
							{
								NPC nPC9 = Main.npc[num925];
								if (nPC9.active && Distance(nPC9.Center) < 500f && nPC9.CanBeChasedBy(this) && Collision.CanHitLine(nPC9.position, nPC9.width, nPC9.height, vector78, 0, 0))
								{
									Vector2 v4 = nPC9.Center - vector78;
									num924 += v4.ToRotation();
									num923++;
									int num926 = NewProjectile(vector78.X, vector78.Y, v4.X, v4.Y, 536, 0, 0f, owner, whoAmI);
									Main.projectile[num926].Center = nPC9.Center;
									Main.projectile[num926].damage = num922;
									Main.projectile[num926].Damage();
									Main.projectile[num926].damage = 0;
									Main.projectile[num926].Center = vector78;
									this.ai[0] = 180f;
								}
							}
							num924 = ((num923 == 0) ? ((player5.direction == 1) ? 0f : ((float)Math.PI)) : (num924 / (float)num923));
							for (int num927 = 0; num927 < 6; num927++)
							{
								Vector2 zero3 = Vector2.Zero;
								zero3 = ((Main.rand.Next(4) == 0) ? (Vector2.UnitX.RotatedByRandom(6.2831854820251465) * new Vector2(200f, 50f) * (Main.rand.NextFloat() * 0.7f + 0.3f)) : (Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(num924) * new Vector2(200f, 50f) * (Main.rand.NextFloat() * 0.7f + 0.3f)));
								NewProjectile(vector78.X, vector78.Y, zero3.X, zero3.Y, 536, 0, 0f, owner, whoAmI);
							}
							this.ai[0] = 180f;
							netUpdate = true;
						}
					}
					Lighting.AddLight(base.Center, 0.9f, 0.75f, 0.1f);
				}
				rotation = ((player5.gravDir == 1f) ? 0f : ((float)Math.PI));
				spriteDirection = base.direction;
				timeLeft = 2;
				Vector2 value58 = Main.OffsetsPlayerOnhand[player5.bodyFrame.Y / 56] * 2f;
				if (player5.direction != 1)
				{
					value58.X = (float)player5.bodyFrame.Width - value58.X;
				}
				value58 -= (player5.bodyFrame.Size() - new Vector2(player5.width, 42f)) / 2f;
				base.Center = (player5.position + value58 + zero2 - base.velocity).Floor();
				player5.ChangeDir(base.direction);
				player5.heldProj = whoAmI;
				player5.itemTime = 2;
				player5.itemAnimation = 2;
			}
			else if (aiStyle == 101)
			{
				float num928 = 20f;
				localAI[0] += 1f;
				alpha = (int)MathHelper.Lerp(0f, 255f, localAI[0] / num928);
				int num929 = (int)this.ai[0];
				int num930 = -1;
				int num931 = -1;
				switch (type)
				{
				case 536:
					num930 = 535;
					num931 = 0;
					break;
				case 591:
					num931 = 1;
					break;
				}
				switch (num931)
				{
				case 1:
					if (localAI[0] >= num928 || num929 < 0 || num929 > 16 || !Main.player[num929].active || Main.player[num929].dead)
					{
						Kill();
						return;
					}
					if (type == 591)
					{
						base.Center = Mount.GetMinecartMechPoint(Main.player[num929], 20, -19) - base.velocity;
						rotation = base.velocity.ToRotation() + (float)Math.PI / 2f;
						if (Math.Sign(base.velocity.X) != Math.Sign(Main.player[num929].velocity.X) && Main.player[num929].velocity.X != 0f)
						{
							Kill();
							return;
						}
					}
					else
					{
						base.Center = Main.player[num929].Center - base.velocity;
					}
					break;
				case 0:
					if (localAI[0] >= num928 || num929 < 0 || num929 > 1000 || !Main.projectile[num929].active || Main.projectile[num929].type != num930)
					{
						Kill();
						return;
					}
					base.Center = Main.projectile[num929].Center - base.velocity;
					break;
				}
				rotation = base.velocity.ToRotation() + (float)Math.PI / 2f;
			}
			else if (aiStyle == 102)
			{
				int num932 = 0;
				float num933 = 0f;
				float x3 = 0f;
				float y2 = 0f;
				int num934 = -1;
				int num935 = 0;
				float num936 = 0f;
				bool flag42 = true;
				bool flag43 = false;
				bool flag44 = false;
				switch (type)
				{
				case 539:
					num932 = 407;
					num933 = 210f;
					x3 = 0.15f;
					y2 = 0.075f;
					num936 = 16f;
					break;
				case 573:
					num932 = 424;
					num933 = 90f;
					num936 = 20f;
					flag42 = false;
					flag43 = true;
					break;
				case 574:
					num932 = 420;
					num933 = 180f;
					x3 = 0.15f;
					y2 = 0.075f;
					num936 = 8f;
					flag42 = false;
					num934 = 576;
					num935 = 65;
					if (Main.expertMode)
					{
						num935 = 50;
					}
					flag44 = true;
					break;
				}
				if (flag44)
				{
					int num937 = (int)this.ai[1];
					if (!Main.npc[num937].active || Main.npc[num937].type != num932)
					{
						Kill();
						return;
					}
					timeLeft = 2;
				}
				this.ai[0] += 1f;
				if (this.ai[0] < num933)
				{
					bool flag45 = true;
					int num938 = (int)this.ai[1];
					if (Main.npc[num938].active && Main.npc[num938].type == num932)
					{
						if (!flag43 && Main.npc[num938].oldPos[1] != Vector2.Zero)
						{
							base.position += Main.npc[num938].position - Main.npc[num938].oldPos[1];
						}
					}
					else
					{
						this.ai[0] = num933;
						flag45 = false;
					}
					if (flag45 && !flag43)
					{
						base.velocity += new Vector2(Math.Sign(Main.npc[num938].Center.X - base.Center.X), Math.Sign(Main.npc[num938].Center.Y - base.Center.Y)) * new Vector2(x3, y2);
						if (base.velocity.Length() > 6f)
						{
							base.velocity *= 6f / base.velocity.Length();
						}
					}
					if (type == 539)
					{
						if (Main.rand.Next(12) == 0)
						{
							int num939 = Dust.NewDust(base.Center, 8, 8, 180);
							Main.dust[num939].position = base.Center;
							Main.dust[num939].velocity *= 0.2f;
							Main.dust[num939].noGravity = true;
						}
						if (++frameCounter >= 4)
						{
							frameCounter = 0;
							if (++frame >= Main.projFrames[type])
							{
								frame = 0;
							}
						}
						rotation = base.velocity.X * 0.1f;
					}
					if (type == 573)
					{
						if (Main.rand.Next(2) == 0)
						{
							int num940 = Dust.NewDust(base.Center, 8, 8, 242);
							Main.dust[num940].position = base.Center;
							Main.dust[num940].velocity = base.velocity;
							Main.dust[num940].noGravity = true;
							Main.dust[num940].scale = 1.5f;
						}
						alpha = 255;
					}
					if (type == 574)
					{
						if (Main.rand.Next(10) == 0)
						{
							int num941 = Dust.NewDust(base.Center, 8, 8, 242);
							Main.dust[num941].position = base.Center;
							Main.dust[num941].velocity = base.velocity;
							Main.dust[num941].noGravity = true;
							Main.dust[num941].scale = 1.5f;
						}
						if (flag45)
						{
							int target = Main.npc[num938].target;
							float num942 = base.velocity.ToRotation();
							if (Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0))
							{
								num942 = DirectionTo(Main.player[target].Center).ToRotation();
							}
							rotation = rotation.AngleLerp(num942 + (float)Math.PI / 2f, 0.2f);
						}
						frame = 1;
					}
				}
				if (this.ai[0] == num933)
				{
					bool flag46 = true;
					int num943 = -1;
					if (!flag42)
					{
						int num944 = (int)this.ai[1];
						if (Main.npc[num944].active && Main.npc[num944].type == num932)
						{
							num943 = Main.npc[num944].target;
						}
						else
						{
							flag46 = false;
						}
					}
					else
					{
						flag46 = false;
					}
					if (!flag46)
					{
						num943 = Player.FindClosest(base.position, width, height);
					}
					Vector2 value59 = Main.player[num943].Center - base.Center;
					value59.X += Main.rand.Next(-50, 51);
					value59.Y += Main.rand.Next(-50, 51);
					value59.X *= (float)Main.rand.Next(80, 121) * 0.01f;
					value59.Y *= (float)Main.rand.Next(80, 121) * 0.01f;
					Vector2 vector79 = Vector2.Normalize(value59);
					if (vector79.HasNaNs())
					{
						vector79 = Vector2.UnitY;
					}
					if (num934 == -1)
					{
						base.velocity = vector79 * num936;
						netUpdate = true;
					}
					else
					{
						if (Main.netMode != 1 && Collision.CanHitLine(base.Center, 0, 0, Main.player[num943].Center, 0, 0))
						{
							NewProjectile(base.Center.X, base.Center.Y, vector79.X * num936, vector79.Y * num936, num934, num935, 1f, Main.myPlayer);
						}
						this.ai[0] = 0f;
					}
				}
				if (!(this.ai[0] >= num933))
				{
					return;
				}
				rotation = rotation.AngleLerp(base.velocity.ToRotation() + (float)Math.PI / 2f, 0.4f);
				if (type == 539)
				{
					if (++frameCounter >= 2)
					{
						frameCounter = 0;
						if (++frame >= Main.projFrames[type])
						{
							frame = 0;
						}
					}
					if (Main.rand.Next(2) == 0)
					{
						int num945 = Dust.NewDust(base.position, width, height, 180, 0f, 0f, 100);
						Main.dust[num945].scale += (float)Main.rand.Next(50) * 0.01f;
						Main.dust[num945].noGravity = true;
						Main.dust[num945].velocity *= 0.1f;
						Main.dust[num945].fadeIn = Main.rand.NextFloat() * 1.5f;
					}
					if (Main.rand.Next(3) == 0)
					{
						int num946 = Dust.NewDust(base.position, width, height, 176, 0f, 0f, 100);
						Main.dust[num946].scale += 0.3f + (float)Main.rand.Next(50) * 0.01f;
						Main.dust[num946].noGravity = true;
						Main.dust[num946].velocity *= 0.1f;
						Main.dust[num946].fadeIn = Main.rand.NextFloat() * 1.5f;
					}
				}
				if (type == 573)
				{
					if (Main.rand.Next(4) == 0)
					{
						int num947 = Dust.NewDust(base.Center, 8, 8, 242);
						Main.dust[num947].position = base.Center;
						Main.dust[num947].velocity *= 0.2f;
						Main.dust[num947].noGravity = true;
						Main.dust[num947].scale = 1.5f;
					}
					alpha = 0;
				}
			}
			else if (aiStyle == 103)
			{
				scale = this.ai[1];
				this.ai[0] += 1f;
				if (this.ai[0] >= 30f)
				{
					alpha += 25;
					if (alpha >= 250)
					{
						Kill();
					}
				}
				else
				{
					if (!(this.ai[0] >= 0f))
					{
						return;
					}
					alpha -= 25;
					if (alpha < 0)
					{
						alpha = 0;
						if (localAI[1] == 0f && Main.netMode != 1 && localAI[0] != 0f)
						{
							localAI[1] = 1f;
							NPC.NewNPC((int)base.Center.X, (int)base.Bottom.Y, (int)localAI[0]);
						}
					}
				}
			}
			else if (aiStyle == 104)
			{
				if (this.ai[0] == 1f)
				{
					scale *= 0.995f;
					alpha += 3;
					if (alpha >= 250)
					{
						Kill();
					}
				}
				else
				{
					scale *= 1.01f;
					alpha -= 7;
					if (alpha < 0)
					{
						alpha = 0;
						this.ai[0] = 1f;
					}
				}
				frameCounter++;
				if (frameCounter > 6)
				{
					frameCounter = 0;
					frame++;
					if (frame > 3)
					{
						frame = 0;
					}
				}
				base.velocity.Y -= 0.03f;
				base.velocity.X *= 0.97f;
			}
			else if (aiStyle == 105)
			{
				float num948 = 1f - (float)alpha / 255f;
				num948 *= scale;
				Lighting.AddLight(base.Center, 0.2f * num948, 0.275f * num948, 0.075f * num948);
				localAI[0] += 1f;
				if (localAI[0] >= 90f)
				{
					localAI[0] *= -1f;
				}
				if (localAI[0] >= 0f)
				{
					scale += 0.003f;
				}
				else
				{
					scale -= 0.003f;
				}
				rotation += 0.0025f * scale;
				float num949 = 1f;
				float num950 = 1f;
				if (identity % 6 == 0)
				{
					num950 *= -1f;
				}
				if (identity % 6 == 1)
				{
					num949 *= -1f;
				}
				if (identity % 6 == 2)
				{
					num950 *= -1f;
					num949 *= -1f;
				}
				if (identity % 6 == 3)
				{
					num950 = 0f;
				}
				if (identity % 6 == 4)
				{
					num949 = 0f;
				}
				localAI[1] += 1f;
				if (localAI[1] > 60f)
				{
					localAI[1] = -180f;
				}
				if (localAI[1] >= -60f)
				{
					base.velocity.X += 0.002f * num950;
					base.velocity.Y += 0.002f * num949;
				}
				else
				{
					base.velocity.X -= 0.002f * num950;
					base.velocity.Y -= 0.002f * num949;
				}
				this.ai[0] += 1f;
				if (this.ai[0] > 5400f)
				{
					damage = 0;
					this.ai[1] = 1f;
					if (alpha < 255)
					{
						alpha += 5;
						if (alpha > 255)
						{
							alpha = 255;
						}
					}
					else if (owner == Main.myPlayer)
					{
						Kill();
					}
				}
				else
				{
					float num951 = (base.Center - Main.player[owner].Center).Length() / 100f;
					if (num951 > 4f)
					{
						num951 *= 1.1f;
					}
					if (num951 > 5f)
					{
						num951 *= 1.2f;
					}
					if (num951 > 6f)
					{
						num951 *= 1.3f;
					}
					if (num951 > 7f)
					{
						num951 *= 1.4f;
					}
					if (num951 > 8f)
					{
						num951 *= 1.5f;
					}
					if (num951 > 9f)
					{
						num951 *= 1.6f;
					}
					if (num951 > 10f)
					{
						num951 *= 1.7f;
					}
					if (!Main.player[owner].sporeSac)
					{
						num951 += 100f;
					}
					this.ai[0] += num951;
					if (alpha > 50)
					{
						alpha -= 10;
						if (alpha < 50)
						{
							alpha = 50;
						}
					}
				}
				bool flag47 = false;
				Vector2 value60 = new Vector2(0f, 0f);
				float num952 = 280f;
				for (int num953 = 0; num953 < 200; num953++)
				{
					if (Main.npc[num953].CanBeChasedBy(this))
					{
						float num954 = Main.npc[num953].position.X + (float)(Main.npc[num953].width / 2);
						float num955 = Main.npc[num953].position.Y + (float)(Main.npc[num953].height / 2);
						float num956 = Math.Abs(base.position.X + (float)(width / 2) - num954) + Math.Abs(base.position.Y + (float)(height / 2) - num955);
						if (num956 < num952)
						{
							num952 = num956;
							value60 = Main.npc[num953].Center;
							flag47 = true;
						}
					}
				}
				if (flag47)
				{
					Vector2 value61 = value60 - base.Center;
					value61.Normalize();
					value61 *= 0.75f;
					base.velocity = (base.velocity * 10f + value61) / 11f;
				}
				else if ((double)base.velocity.Length() > 0.2)
				{
					base.velocity *= 0.98f;
				}
			}
			else if (aiStyle == 106)
			{
				rotation += base.velocity.X * 0.02f;
				if (base.velocity.X < 0f)
				{
					rotation -= Math.Abs(base.velocity.Y) * 0.02f;
				}
				else
				{
					rotation += Math.Abs(base.velocity.Y) * 0.02f;
				}
				base.velocity *= 0.98f;
				this.ai[0] += 1f;
				if (this.ai[0] >= 60f)
				{
					if (alpha < 255)
					{
						alpha += 5;
						if (alpha > 255)
						{
							alpha = 255;
						}
					}
					else if (owner == Main.myPlayer)
					{
						Kill();
					}
				}
				else if (alpha > 80)
				{
					alpha -= 30;
					if (alpha < 80)
					{
						alpha = 80;
					}
				}
			}
			else if (aiStyle == 107)
			{
				float num957 = 10f;
				float scaleFactor8 = 5f;
				float num958 = 40f;
				if (type == 575)
				{
					if (timeLeft > 30 && alpha > 0)
					{
						alpha -= 25;
					}
					if (timeLeft > 30 && alpha < 128 && Collision.SolidCollision(base.position, width, height))
					{
						alpha = 128;
					}
					if (alpha < 0)
					{
						alpha = 0;
					}
					if (++frameCounter > 4)
					{
						frameCounter = 0;
						if (++frame >= 4)
						{
							frame = 0;
						}
					}
					Lighting.AddLight(base.Center, 0.5f, 0.1f, 0.3f);
				}
				else if (type == 596)
				{
					num957 = 10f;
					scaleFactor8 = 7.5f;
					if (timeLeft > 30 && alpha > 0)
					{
						alpha -= 25;
					}
					if (timeLeft > 30 && alpha < 128 && Collision.SolidCollision(base.position, width, height))
					{
						alpha = 128;
					}
					if (alpha < 0)
					{
						alpha = 0;
					}
					if (++frameCounter > 4)
					{
						frameCounter = 0;
						if (++frame >= 4)
						{
							frame = 0;
						}
					}
					float num959 = 0.5f;
					if (timeLeft < 120)
					{
						num959 = 1.1f;
					}
					if (timeLeft < 60)
					{
						num959 = 1.6f;
					}
					this.ai[1] += 1f;
					float num1111 = this.ai[1] / 180f;
					for (float num960 = 0f; num960 < 3f; num960 += 1f)
					{
						if (Main.rand.Next(3) != 0)
						{
							return;
						}
						Dust dust11 = Main.dust[Dust.NewDust(base.Center, 0, 0, 27, 0f, -2f)];
						dust11.position = base.Center + Vector2.UnitY.RotatedBy(num960 * ((float)Math.PI * 2f) / 3f + this.ai[1]) * 10f;
						dust11.noGravity = true;
						dust11.velocity = DirectionFrom(dust11.position);
						dust11.scale = num959;
						dust11.fadeIn = 0.5f;
						dust11.alpha = 200;
					}
					if (timeLeft < 4)
					{
						int num961 = 40;
						if (Main.expertMode)
						{
							num961 = 30;
						}
						base.position = base.Center;
						width = (height = 60);
						base.Center = base.position;
						damage = num961;
						for (int num962 = 0; num962 < 10; num962++)
						{
							Dust dust11 = Main.dust[Dust.NewDust(base.position, width, height, Utils.SelectRandom<int>(Main.rand, 27, 6), 0f, -2f)];
							dust11.noGravity = true;
							if (dust11.position != base.Center)
							{
								dust11.velocity = DirectionTo(dust11.position) * 3f;
							}
						}
					}
				}
				int num963 = (int)this.ai[0];
				if (num963 >= 0 && Main.player[num963].active && !Main.player[num963].dead)
				{
					if (Distance(Main.player[num963].Center) > num958)
					{
						Vector2 vector80 = DirectionTo(Main.player[num963].Center);
						if (vector80.HasNaNs())
						{
							vector80 = Vector2.UnitY;
						}
						base.velocity = (base.velocity * (num957 - 1f) + vector80 * scaleFactor8) / num957;
					}
				}
				else
				{
					if (timeLeft > 30)
					{
						timeLeft = 30;
					}
					if (this.ai[0] != -1f)
					{
						this.ai[0] = -1f;
						netUpdate = true;
					}
				}
			}
			else if (aiStyle == 108)
			{
				if (type == 578 && localAI[0] == 0f)
				{
					localAI[0] = 1f;
					int num964 = Player.FindClosest(base.Center, 0, 0);
					Vector2 vector81 = Main.player[num964].Center - base.Center;
					if (vector81 == Vector2.Zero)
					{
						vector81 = Vector2.UnitY;
					}
					this.ai[1] = vector81.ToRotation();
					netUpdate = true;
				}
				this.ai[0] += 1f;
				if (this.ai[0] <= 50f)
				{
					if (type == 579)
					{
						if (Main.rand.Next(4) == 0)
						{
							Vector2 vector82 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							Dust dust12 = Main.dust[Dust.NewDust(base.Center - vector82 * 30f, 0, 0, 229)];
							dust12.noGravity = true;
							dust12.position = base.Center - vector82 * Main.rand.Next(10, 21);
							dust12.velocity = vector82.RotatedBy(1.5707963705062866) * 4f;
							dust12.scale = 0.5f + Main.rand.NextFloat();
							dust12.fadeIn = 0.5f;
						}
						if (Main.rand.Next(4) == 0)
						{
							Vector2 vector83 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							Dust dust13 = Main.dust[Dust.NewDust(base.Center - vector83 * 30f, 0, 0, 240)];
							dust13.noGravity = true;
							dust13.position = base.Center - vector83 * 30f;
							dust13.velocity = vector83.RotatedBy(-1.5707963705062866) * 2f;
							dust13.scale = 0.5f + Main.rand.NextFloat();
							dust13.fadeIn = 0.5f;
						}
					}
					if (type == 578 && Main.rand.Next(2) == 0)
					{
						Vector2 vector84 = this.ai[1].ToRotationVector2();
						Vector2 vector85 = vector84.RotatedBy(1.5707963705062866) * (Main.rand.Next(2) == 0).ToDirectionInt() * Main.rand.Next(10, 21);
						Vector2 value62 = vector84 * Main.rand.Next(-80, 81);
						Vector2 velocity3 = value62 - vector85;
						velocity3 /= 10f;
						int num965 = 229;
						Dust dust14 = Main.dust[Dust.NewDust(base.Center, 0, 0, num965)];
						dust14.noGravity = true;
						dust14.position = base.Center + vector85;
						dust14.velocity = velocity3;
						dust14.scale = 0.5f + Main.rand.NextFloat();
						dust14.fadeIn = 0.5f;
						value62 = vector84 * Main.rand.Next(40, 121);
						velocity3 = value62 - vector85 / 2f;
						velocity3 /= 10f;
						dust14 = Main.dust[Dust.NewDust(base.Center, 0, 0, num965)];
						dust14.noGravity = true;
						dust14.position = base.Center + vector85 / 2f;
						dust14.velocity = velocity3;
						dust14.scale = 1f + Main.rand.NextFloat();
					}
					return;
				}
				if (this.ai[0] <= 90f)
				{
					scale = (this.ai[0] - 50f) / 40f;
					alpha = 255 - (int)(255f * scale);
					rotation -= (float)Math.PI / 20f;
					if (type == 579)
					{
						if (Main.rand.Next(2) == 0)
						{
							Vector2 vector86 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							Dust dust15 = Main.dust[Dust.NewDust(base.Center - vector86 * 30f, 0, 0, 229)];
							dust15.noGravity = true;
							dust15.position = base.Center - vector86 * Main.rand.Next(10, 21);
							dust15.velocity = vector86.RotatedBy(1.5707963705062866) * 6f;
							dust15.scale = 0.5f + Main.rand.NextFloat();
							dust15.fadeIn = 0.5f;
							dust15.customData = base.Center;
						}
						if (Main.rand.Next(2) == 0)
						{
							Vector2 vector87 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							Dust dust16 = Main.dust[Dust.NewDust(base.Center - vector87 * 30f, 0, 0, 240)];
							dust16.noGravity = true;
							dust16.position = base.Center - vector87 * 30f;
							dust16.velocity = vector87.RotatedBy(-1.5707963705062866) * 3f;
							dust16.scale = 0.5f + Main.rand.NextFloat();
							dust16.fadeIn = 0.5f;
							dust16.customData = base.Center;
						}
					}
					if (type == 578)
					{
						Vector2 vector88 = this.ai[1].ToRotationVector2();
						Vector2 value63 = vector88.RotatedBy(1.5707963705062866) * (Main.rand.Next(2) == 0).ToDirectionInt() * Main.rand.Next(10, 21);
						vector88 *= (float)Main.rand.Next(-80, 81);
						Vector2 velocity4 = vector88 - value63;
						velocity4 /= 10f;
						int num966 = Utils.SelectRandom<int>(Main.rand, 229, 229);
						Dust dust17 = Main.dust[Dust.NewDust(base.Center, 0, 0, num966)];
						dust17.noGravity = true;
						dust17.position = base.Center + value63;
						dust17.velocity = velocity4;
						dust17.scale = 0.5f + Main.rand.NextFloat();
						dust17.fadeIn = 0.5f;
						if (this.ai[0] == 90f && Main.netMode != 1)
						{
							Vector2 vector89 = this.ai[1].ToRotationVector2() * 8f;
							float ai2 = Main.rand.Next(80);
							NewProjectile(base.Center.X - vector89.X, base.Center.Y - vector89.Y, vector89.X, vector89.Y, 580, 15, 1f, Main.myPlayer, this.ai[1], ai2);
						}
					}
					else if (type == 579 && this.ai[0] == 90f && Main.netMode != 1)
					{
						for (int num967 = 0; num967 < 2; num967++)
						{
							int num968 = NPC.NewNPC((int)base.Center.X, (int)base.Center.Y, 427, whoAmI);
							Main.npc[num968].velocity = -Vector2.UnitY.RotatedByRandom(6.2831854820251465) * Main.rand.Next(4, 9) - Vector2.UnitY * 2f;
							Main.npc[num968].netUpdate = true;
						}
					}
					return;
				}
				if (this.ai[0] <= 120f)
				{
					scale = 1f;
					alpha = 0;
					rotation -= (float)Math.PI / 60f;
					if (Main.rand.Next(2) == 0)
					{
						Vector2 vector90 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust18 = Main.dust[Dust.NewDust(base.Center - vector90 * 30f, 0, 0, 229)];
						dust18.noGravity = true;
						dust18.position = base.Center - vector90 * Main.rand.Next(10, 21);
						dust18.velocity = vector90.RotatedBy(1.5707963705062866) * 6f;
						dust18.scale = 0.5f + Main.rand.NextFloat();
						dust18.fadeIn = 0.5f;
						dust18.customData = base.Center;
					}
					else
					{
						Vector2 vector91 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust19 = Main.dust[Dust.NewDust(base.Center - vector91 * 30f, 0, 0, 240)];
						dust19.noGravity = true;
						dust19.position = base.Center - vector91 * 30f;
						dust19.velocity = vector91.RotatedBy(-1.5707963705062866) * 3f;
						dust19.scale = 0.5f + Main.rand.NextFloat();
						dust19.fadeIn = 0.5f;
						dust19.customData = base.Center;
					}
					return;
				}
				scale = 1f - (this.ai[0] - 120f) / 60f;
				alpha = 255 - (int)(255f * scale);
				rotation -= (float)Math.PI / 30f;
				if (alpha >= 255)
				{
					Kill();
				}
				for (int num969 = 0; num969 < 2; num969++)
				{
					switch (Main.rand.Next(3))
					{
					case 0:
					{
						Vector2 vector93 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * scale;
						Dust dust21 = Main.dust[Dust.NewDust(base.Center - vector93 * 30f, 0, 0, 229)];
						dust21.noGravity = true;
						dust21.position = base.Center - vector93 * Main.rand.Next(10, 21);
						dust21.velocity = vector93.RotatedBy(1.5707963705062866) * 6f;
						dust21.scale = 0.5f + Main.rand.NextFloat();
						dust21.fadeIn = 0.5f;
						dust21.customData = base.Center;
						break;
					}
					case 1:
					{
						Vector2 vector92 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * scale;
						Dust dust20 = Main.dust[Dust.NewDust(base.Center - vector92 * 30f, 0, 0, 240)];
						dust20.noGravity = true;
						dust20.position = base.Center - vector92 * 30f;
						dust20.velocity = vector92.RotatedBy(-1.5707963705062866) * 3f;
						dust20.scale = 0.5f + Main.rand.NextFloat();
						dust20.fadeIn = 0.5f;
						dust20.customData = base.Center;
						break;
					}
					}
				}
			}
			else if (aiStyle == 109)
			{
				if (localAI[1] == 0f)
				{
					localAI[1] = base.velocity.Length();
				}
				if (this.ai[0] == 0f)
				{
					localAI[0] += 1f;
					if (localAI[0] > 30f)
					{
						this.ai[0] = 1f;
						localAI[0] = 0f;
						return;
					}
				}
				else if (this.ai[0] == 1f)
				{
					Vector2 zero4 = Vector2.Zero;
					if (type != 582 || !Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].type != 124)
					{
						Kill();
						return;
					}
					zero4 = Main.npc[(int)this.ai[1]].Center;
					tileCollide = false;
					float num970 = localAI[1];
					Vector2 value64 = zero4 - base.Center;
					if (value64.Length() < num970)
					{
						Kill();
						return;
					}
					value64.Normalize();
					value64 *= num970;
					base.velocity = Vector2.Lerp(base.velocity, value64, 0.04f);
				}
				rotation += (float)Math.PI / 10f;
			}
			else if (aiStyle == 110)
			{
				if (localAI[1] == 0f)
				{
					localAI[1] = base.velocity.Length();
				}
				Vector2 zero5 = Vector2.Zero;
				if (Main.npc[(int)this.ai[0]].active && Main.npc[(int)this.ai[0]].townNPC)
				{
					zero5 = Main.npc[(int)this.ai[0]].Center;
					float num971 = localAI[1];
					Vector2 value65 = zero5 - base.Center;
					if (value65.Length() < num971 || base.Hitbox.Intersects(Main.npc[(int)this.ai[0]].Hitbox))
					{
						Kill();
						int num972 = Main.npc[(int)this.ai[0]].lifeMax - Main.npc[(int)this.ai[0]].life;
						if (num972 > 20)
						{
							num972 = 20;
						}
						if (num972 > 0)
						{
							Main.npc[(int)this.ai[0]].life += num972;
							Main.npc[(int)this.ai[0]].HealEffect(num972);
						}
					}
					else
					{
						value65.Normalize();
						value65 *= num971;
						if (value65.Y < base.velocity.Y)
						{
							value65.Y = base.velocity.Y;
						}
						value65.Y += 1f;
						base.velocity = Vector2.Lerp(base.velocity, value65, 0.04f);
						rotation += base.velocity.X * 0.05f;
					}
				}
				else
				{
					Kill();
				}
			}
			else if (aiStyle == 111)
			{
				if (!Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].type != 20 || Main.npc[(int)this.ai[1]].ai[0] != 14f)
				{
					Kill();
					return;
				}
				this.ai[0] += 1f;
				rotation += (float)Math.PI / 300f;
				scale = this.ai[0] / 100f;
				if (scale > 1f)
				{
					scale = 1f;
				}
				alpha = (int)(255f * (1f - scale));
				float num973 = 300f;
				if (this.ai[0] >= 100f)
				{
					num973 = MathHelper.Lerp(300f, 600f, (this.ai[0] - 100f) / 200f);
				}
				if (num973 > 600f)
				{
					num973 = 600f;
				}
				if (this.ai[0] >= 500f)
				{
					alpha = (int)MathHelper.Lerp(0f, 255f, (this.ai[0] - 500f) / 100f);
					num973 = MathHelper.Lerp(600f, 1200f, (this.ai[0] - 500f) / 100f);
					rotation += (float)Math.PI / 300f;
				}
				if (Main.rand.Next(4) == 0)
				{
					float scaleFactor9 = num973;
					Vector2 value66 = new Vector2(Main.rand.Next(-10, 11), Main.rand.Next(-10, 11));
					float num974 = Main.rand.Next(3, 9);
					value66.Normalize();
					int num975 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 163, 0f, 0f, 100);
					Main.dust[num975].noGravity = true;
					Main.dust[num975].position = base.Center + value66 * scaleFactor9;
					if (Main.rand.Next(8) == 0)
					{
						Main.dust[num975].velocity = value66 * (0f - num974) * 3f;
						Main.dust[num975].scale += 0.5f;
					}
					else
					{
						Main.dust[num975].velocity = value66 * (0f - num974);
					}
				}
				if (Main.rand.Next(2) == 0)
				{
					Vector2 value67 = new Vector2(Main.rand.Next(-10, 11), Main.rand.Next(-10, 11));
					float num976 = Main.rand.Next(3, 9);
					value67.Normalize();
					int num977 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 163, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num977].noGravity = true;
					Main.dust[num977].position = base.Center + value67 * 30f;
					if (Main.rand.Next(8) == 0)
					{
						Main.dust[num977].velocity = value67 * (0f - num976) * 3f;
						Main.dust[num977].scale += 0.5f;
					}
					else
					{
						Main.dust[num977].velocity = value67 * (0f - num976);
					}
				}
				if (this.ai[0] >= 30f && Main.netMode != 2)
				{
					Player player6 = Main.player[Main.myPlayer];
					if (player6.active && !player6.dead && Distance(player6.Center) <= num973 && player6.HasBuff(165) == -1)
					{
						player6.AddBuff(165, 120);
					}
				}
				if (this.ai[0] >= 30f && this.ai[0] % 10f == 0f && Main.netMode != 1)
				{
					for (int num978 = 0; num978 < 200; num978++)
					{
						NPC nPC10 = Main.npc[num978];
						if (nPC10.type != 488 && nPC10.active && Distance(nPC10.Center) <= num973)
						{
							if (nPC10.townNPC && (nPC10.HasBuff(165) == -1 || nPC10.buffTime[nPC10.HasBuff(165)] <= 20))
							{
								nPC10.AddBuff(165, 120);
							}
							else if (!nPC10.friendly && nPC10.lifeMax > 5 && !nPC10.dontTakeDamage && (nPC10.HasBuff(186) == -1 || nPC10.buffTime[nPC10.HasBuff(186)] <= 20) && (nPC10.dryadBane || Collision.CanHit(base.Center, 1, 1, nPC10.position, nPC10.width, nPC10.height)))
							{
								nPC10.AddBuff(186, 120);
							}
						}
					}
				}
				if (this.ai[0] >= 570f)
				{
					Kill();
				}
			}
			else if (aiStyle == 112)
			{
				if (type == 590)
				{
					if (++frameCounter >= 4)
					{
						frameCounter = 0;
						if (++frame >= 3)
						{
							frame = 0;
						}
					}
					if (alpha > 0)
					{
						alpha -= 15;
					}
					if (alpha < 0)
					{
						alpha = 0;
					}
					if (alpha == 0)
					{
						float num979 = (float)Main.rand.Next(28, 42) * 0.005f;
						num979 += (float)(270 - Main.mouseTextColor) / 500f;
						float num980 = 0.1f;
						float num981 = 0.3f + num979 / 2f;
						float num982 = 0.6f + num979;
						float num983 = 0.35f;
						num980 *= num983;
						num981 *= num983;
						num982 *= num983;
						Lighting.AddLight(base.Center, num980, num981, num982);
					}
					base.velocity = new Vector2(0f, (float)Math.Sin((float)Math.PI * 2f * this.ai[0] / 180f) * 0.15f);
					this.ai[0] += 1f;
					if (this.ai[0] >= 180f)
					{
						this.ai[0] = 0f;
					}
				}
				if (type != 644)
				{
					return;
				}
				Color newColor2 = Main.hslToRgb(this.ai[0], 1f, 0.5f);
				int num984 = (int)this.ai[1];
				if (num984 < 0 || num984 >= 1000 || (!Main.projectile[num984].active && Main.projectile[num984].type != 643))
				{
					this.ai[1] = -1f;
				}
				else
				{
					DelegateMethods.v3_1 = newColor2.ToVector3() * 0.5f;
					Utils.PlotTileLine(base.Center, Main.projectile[num984].Center, 8f, DelegateMethods.CastLight);
				}
				if (localAI[0] == 0f)
				{
					localAI[0] = Main.rand.NextFloat() * 0.8f + 0.8f;
					base.direction = ((Main.rand.Next(2) > 0) ? 1 : (-1));
				}
				rotation = localAI[1] / 40f * ((float)Math.PI * 2f) * (float)base.direction;
				if (alpha > 0)
				{
					alpha -= 8;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (alpha == 0)
				{
					Lighting.AddLight(base.Center, newColor2.ToVector3() * 0.5f);
				}
				for (int num985 = 0; num985 < 2; num985++)
				{
					if (Main.rand.Next(10) == 0)
					{
						Vector2 value68 = Vector2.UnitY.RotatedBy((float)num985 * (float)Math.PI).RotatedBy(rotation);
						Dust dust22 = Main.dust[Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 225, newColor2, 1.5f)];
						dust22.noGravity = true;
						dust22.noLight = true;
						dust22.scale = Opacity * localAI[0];
						dust22.position = base.Center;
						dust22.velocity = value68 * 2.5f;
					}
				}
				for (int num986 = 0; num986 < 2; num986++)
				{
					if (Main.rand.Next(10) == 0)
					{
						Vector2 value69 = Vector2.UnitY.RotatedBy((float)num986 * (float)Math.PI);
						Dust dust23 = Main.dust[Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 225, newColor2, 1.5f)];
						dust23.noGravity = true;
						dust23.noLight = true;
						dust23.scale = Opacity * localAI[0];
						dust23.position = base.Center;
						dust23.velocity = value69 * 2.5f;
					}
				}
				if (Main.rand.Next(10) == 0)
				{
					float scaleFactor10 = 1f + Main.rand.NextFloat() * 2f;
					float fadeIn = 1f + Main.rand.NextFloat();
					float num987 = 1f + Main.rand.NextFloat();
					Vector2 vector94 = Utils.RandomVector2(Main.rand, -1f, 1f);
					if (vector94 != Vector2.Zero)
					{
						vector94.Normalize();
					}
					vector94 *= 20f + Main.rand.NextFloat() * 100f;
					Vector2 vector95 = base.Center + vector94;
					Point point3 = vector95.ToTileCoordinates();
					bool flag48 = true;
					if (!WorldGen.InWorld(point3.X, point3.Y))
					{
						flag48 = false;
					}
					if (flag48 && WorldGen.SolidTile(point3.X, point3.Y))
					{
						flag48 = false;
					}
					if (flag48)
					{
						Dust dust24 = Main.dust[Dust.NewDust(vector95, 0, 0, 267, 0f, 0f, 127, newColor2)];
						dust24.noGravity = true;
						dust24.position = vector95;
						dust24.velocity = -Vector2.UnitY * scaleFactor10 * (Main.rand.NextFloat() * 0.9f + 1.6f);
						dust24.fadeIn = fadeIn;
						dust24.scale = num987;
						dust24.noLight = true;
						Dust dust25 = Dust.CloneDust(dust24);
						dust25.scale *= 0.65f;
						dust25.fadeIn *= 0.65f;
						dust25.color = new Color(255, 255, 255, 255);
					}
				}
				scale = Opacity / 2f * localAI[0];
				base.velocity = Vector2.Zero;
				localAI[1] += 1f;
				if (localAI[1] >= 60f)
				{
					Kill();
				}
			}
			else if (aiStyle == 113)
			{
				int num988 = 25;
				if (type == 614)
				{
					num988 = 63;
				}
				if (alpha > 0)
				{
					alpha -= num988;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (this.ai[0] == 0f)
				{
					if (type == 614)
					{
						int num989 = (int)this.ai[1];
						if (!Main.npc[num989].active)
						{
							Kill();
							return;
						}
						base.velocity.ToRotation();
						Vector2 vector96 = Main.npc[num989].Center - base.Center;
						if (vector96 != Vector2.Zero)
						{
							vector96.Normalize();
							vector96 *= 14f;
						}
						float num990 = 5f;
						base.velocity = (base.velocity * (num990 - 1f) + vector96) / num990;
					}
					else
					{
						this.ai[1] += 1f;
						if (this.ai[1] >= 45f)
						{
							float num991 = 0.98f;
							float num992 = 0.35f;
							if (type == 636)
							{
								num991 = 0.995f;
								num992 = 0.15f;
							}
							this.ai[1] = 45f;
							base.velocity.X *= num991;
							base.velocity.Y += num992;
						}
						rotation = base.velocity.ToRotation() + (float)Math.PI / 2f;
					}
				}
				if (this.ai[0] == 1f)
				{
					ignoreWater = true;
					tileCollide = false;
					int num993 = 15;
					if (type == 636)
					{
						num993 = 5 * MaxUpdates;
					}
					bool flag49 = false;
					bool flag50 = false;
					localAI[0] += 1f;
					if (localAI[0] % 30f == 0f)
					{
						flag50 = true;
					}
					int num994 = (int)this.ai[1];
					if (localAI[0] >= (float)(60 * num993))
					{
						flag49 = true;
					}
					else if (num994 < 0 || num994 >= 200)
					{
						flag49 = true;
					}
					else if (Main.npc[num994].active && !Main.npc[num994].dontTakeDamage)
					{
						base.Center = Main.npc[num994].Center - base.velocity * 2f;
						gfxOffY = Main.npc[num994].gfxOffY;
						if (flag50)
						{
							Main.npc[num994].HitEffect(0, 1.0);
						}
					}
					else
					{
						flag49 = true;
					}
					if (flag49)
					{
						Kill();
					}
				}
				if (type == 614)
				{
					Lighting.AddLight(base.Center, 0.2f, 0.6f, 0.7f);
				}
				if (type == 636)
				{
					Lighting.AddLight(base.Center, 0.8f, 0.7f, 0.4f);
				}
			}
			else if (aiStyle == 114)
			{
				if (Main.netMode == 2 && localAI[0] == 0f)
				{
					PortalHelper.SyncPortalSections(base.Center, 1);
					localAI[0] = 1f;
				}
				timeLeft = 3;
				bool flag51 = false;
				if (!Main.player[owner].active || Main.player[owner].dead || Distance(Main.player[owner].Center) > 12800f)
				{
					flag51 = true;
				}
				if (!flag51 && !WorldGen.InWorld((int)base.Center.X / 16, (int)base.Center.Y / 16, Lighting.offScreenTiles))
				{
					flag51 = true;
				}
				if (!flag51 && !PortalHelper.SupportedTilesAreFine(base.Center, this.ai[0]))
				{
					flag51 = true;
				}
				if (flag51)
				{
					Kill();
					return;
				}
				Color portalColor = PortalHelper.GetPortalColor(owner, (int)this.ai[1]);
				alpha -= 25;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (alpha == 0)
				{
					Lighting.AddLight(base.Center + base.velocity * 3f, portalColor.ToVector3() * 0.5f);
				}
				if (++frameCounter >= 6)
				{
					frameCounter = 0;
					if (++frame >= Main.projFrames[type])
					{
						frame = 0;
					}
				}
				rotation = this.ai[0] - (float)Math.PI / 2f;
			}
			else if (aiStyle == 115)
			{
				Lighting.AddLight(base.Center, new Vector3(0.075f, 0.3f, 0.15f));
				base.velocity *= 0.985f;
				rotation += base.velocity.X * 0.2f;
				if (base.velocity.X > 0f)
				{
					rotation += 0.08f;
				}
				else
				{
					rotation -= 0.08f;
				}
				this.ai[1] += 1f;
				if (this.ai[1] > 30f)
				{
					alpha += 10;
					if (alpha >= 255)
					{
						alpha = 255;
						Kill();
					}
				}
			}
			else if (aiStyle == 116)
			{
				if (localAI[0] == 0f)
				{
					rotation = this.ai[1];
					localAI[0] = 1f;
				}
				Player player7 = Main.player[owner];
				if (player7.setSolar)
				{
					timeLeft = 2;
				}
				float angle = (float)player7.miscCounter / 300f * ((float)Math.PI * 4f) + this.ai[1];
				angle = MathHelper.WrapAngle(angle);
				rotation = rotation.AngleLerp(angle, 0.05f);
				alpha -= 15;
				if (alpha < 0)
				{
					alpha = 0;
				}
				base.velocity = rotation.ToRotationVector2() * 100f - player7.velocity;
				base.Center = player7.Center - base.velocity;
			}
			else if (aiStyle == 117)
			{
				this.ai[1] += 0.01f;
				scale = this.ai[1];
				this.ai[0] += 1f;
				if (this.ai[0] >= (float)(3 * Main.projFrames[type]))
				{
					Kill();
					return;
				}
				if (++frameCounter >= 3)
				{
					frameCounter = 0;
					if (++frame >= Main.projFrames[type])
					{
						hide = true;
					}
				}
				alpha -= 63;
				if (alpha < 0)
				{
					alpha = 0;
				}
				bool flag52 = type == 612;
				bool flag53 = type == 624;
				if (flag52)
				{
					Lighting.AddLight(base.Center, 0.9f, 0.8f, 0.6f);
				}
				if (this.ai[0] != 1f)
				{
					return;
				}
				base.position = base.Center;
				width = (height = (int)(52f * scale));
				base.Center = base.position;
				Damage();
				if (flag52)
				{
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 14);
					for (int num995 = 0; num995 < 4; num995++)
					{
						int num996 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num996].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
					}
					for (int num997 = 0; num997 < 10; num997++)
					{
						int num998 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 200, default(Color), 2.7f);
						Main.dust[num998].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
						Main.dust[num998].noGravity = true;
						Main.dust[num998].velocity *= 3f;
						num998 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num998].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
						Main.dust[num998].velocity *= 2f;
						Main.dust[num998].noGravity = true;
						Main.dust[num998].fadeIn = 2.5f;
					}
					for (int num999 = 0; num999 < 5; num999++)
					{
						int num1000 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 0, default(Color), 2.7f);
						Main.dust[num1000].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(base.velocity.ToRotation()) * width / 2f;
						Main.dust[num1000].noGravity = true;
						Main.dust[num1000].velocity *= 3f;
					}
					for (int num1001 = 0; num1001 < 10; num1001++)
					{
						int num1002 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num1002].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(base.velocity.ToRotation()) * width / 2f;
						Main.dust[num1002].noGravity = true;
						Main.dust[num1002].velocity *= 3f;
					}
				}
				if (!flag53)
				{
					return;
				}
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 14);
				for (int num1003 = 0; num1003 < 20; num1003++)
				{
					int num1004 = Dust.NewDust(base.position, width, height, 135, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num1004].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
					Main.dust[num1004].velocity *= 2f;
					Main.dust[num1004].noGravity = true;
					Main.dust[num1004].fadeIn = 2.5f;
					Main.dust[num1004].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
				}
				for (int num1005 = 0; num1005 < 15; num1005++)
				{
					int num1006 = Dust.NewDust(base.position, width, height, 135, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num1006].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(base.velocity.ToRotation()) * width / 2f;
					Main.dust[num1006].noGravity = true;
					Main.dust[num1006].velocity *= 3f;
					Main.dust[num1006].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
				}
				float num1007 = (float)Main.rand.NextDouble() * ((float)Math.PI * 2f);
				float num1008 = (float)Main.rand.NextDouble() * ((float)Math.PI * 2f);
				float num1009 = (float)Main.rand.NextDouble() * ((float)Math.PI * 2f);
				float num1010 = 7f + (float)Main.rand.NextDouble() * 7f;
				float num1011 = 7f + (float)Main.rand.NextDouble() * 7f;
				float num1012 = 7f + (float)Main.rand.NextDouble() * 7f;
				float num1013 = num1010;
				if (num1011 > num1013)
				{
					num1013 = num1011;
				}
				if (num1012 > num1013)
				{
					num1013 = num1012;
				}
				for (int num1014 = 0; num1014 < 200; num1014++)
				{
					int num1015 = 135;
					float num1016 = num1013;
					if (num1014 > 50)
					{
						num1016 = num1011;
					}
					if (num1014 > 100)
					{
						num1016 = num1010;
					}
					if (num1014 > 150)
					{
						num1016 = num1012;
					}
					int num1017 = Dust.NewDust(base.position, 6, 6, num1015, 0f, 0f, 100);
					Vector2 vector97 = Main.dust[num1017].velocity;
					Main.dust[num1017].position = base.Center;
					vector97.Normalize();
					vector97 *= num1016;
					if (num1014 > 150)
					{
						vector97.Y *= 0.5f;
						vector97 = vector97.RotatedBy(num1009);
					}
					else if (num1014 > 100)
					{
						vector97.X *= 0.5f;
						vector97 = vector97.RotatedBy(num1007);
					}
					else if (num1014 > 50)
					{
						vector97.Y *= 0.5f;
						vector97 = vector97.RotatedBy(num1008);
					}
					Main.dust[num1017].velocity *= 0.2f;
					Main.dust[num1017].velocity += vector97;
					Main.dust[num1017].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
					if (num1014 <= 200)
					{
						Main.dust[num1017].scale = 2f;
						Main.dust[num1017].noGravity = true;
						Main.dust[num1017].fadeIn = Main.rand.NextFloat() * 2f;
						if (Main.rand.Next(4) == 0)
						{
							Main.dust[num1017].fadeIn = 2.5f;
						}
						Main.dust[num1017].noLight = true;
						if (num1014 < 100)
						{
							Main.dust[num1017].position += Main.dust[num1017].velocity * 20f;
							Main.dust[num1017].velocity *= -1f;
						}
					}
				}
			}
			else if (aiStyle == 118)
			{
				this.ai[0] += 1f;
				int num1018 = 0;
				if (base.velocity.Length() <= 4f)
				{
					num1018 = 1;
				}
				alpha -= 15;
				if (alpha < 0)
				{
					alpha = 0;
				}
				switch (num1018)
				{
				case 0:
					rotation -= (float)Math.PI / 30f;
					if (Main.rand.Next(3) == 0)
					{
						if (Main.rand.Next(2) == 0)
						{
							Vector2 vector103 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							Dust dust28 = Main.dust[Dust.NewDust(base.Center - vector103 * 30f, 0, 0, Utils.SelectRandom<int>(Main.rand, 86, 90))];
							dust28.noGravity = true;
							dust28.position = base.Center - vector103 * Main.rand.Next(10, 21);
							dust28.velocity = vector103.RotatedBy(1.5707963705062866) * 6f;
							dust28.scale = 0.5f + Main.rand.NextFloat();
							dust28.fadeIn = 0.5f;
							dust28.customData = this;
						}
						else
						{
							Vector2 vector104 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							Dust dust29 = Main.dust[Dust.NewDust(base.Center - vector104 * 30f, 0, 0, 240)];
							dust29.noGravity = true;
							dust29.position = base.Center - vector104 * 30f;
							dust29.velocity = vector104.RotatedBy(-1.5707963705062866) * 3f;
							dust29.scale = 0.5f + Main.rand.NextFloat();
							dust29.fadeIn = 0.5f;
							dust29.customData = this;
						}
					}
					if (this.ai[0] >= 30f)
					{
						base.velocity *= 0.98f;
						scale += 0.00744680827f;
						if (scale > 1.3f)
						{
							scale = 1.3f;
						}
						rotation -= (float)Math.PI / 180f;
					}
					if (base.velocity.Length() < 4.1f)
					{
						base.velocity.Normalize();
						base.velocity *= 4f;
						this.ai[0] = 0f;
					}
					break;
				case 1:
				{
					rotation -= (float)Math.PI / 30f;
					for (int num1019 = 0; num1019 < 1; num1019++)
					{
						if (Main.rand.Next(2) == 0)
						{
							Vector2 vector98 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							Dust dust26 = Main.dust[Dust.NewDust(base.Center - vector98 * 30f, 0, 0, 86)];
							dust26.noGravity = true;
							dust26.position = base.Center - vector98 * Main.rand.Next(10, 21);
							dust26.velocity = vector98.RotatedBy(1.5707963705062866) * 6f;
							dust26.scale = 0.9f + Main.rand.NextFloat();
							dust26.fadeIn = 0.5f;
							dust26.customData = this;
							vector98 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							dust26 = Main.dust[Dust.NewDust(base.Center - vector98 * 30f, 0, 0, 90)];
							dust26.noGravity = true;
							dust26.position = base.Center - vector98 * Main.rand.Next(10, 21);
							dust26.velocity = vector98.RotatedBy(1.5707963705062866) * 6f;
							dust26.scale = 0.9f + Main.rand.NextFloat();
							dust26.fadeIn = 0.5f;
							dust26.customData = this;
							dust26.color = Color.Crimson;
						}
						else
						{
							Vector2 vector99 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							Dust dust27 = Main.dust[Dust.NewDust(base.Center - vector99 * 30f, 0, 0, 240)];
							dust27.noGravity = true;
							dust27.position = base.Center - vector99 * Main.rand.Next(20, 31);
							dust27.velocity = vector99.RotatedBy(-1.5707963705062866) * 5f;
							dust27.scale = 0.9f + Main.rand.NextFloat();
							dust27.fadeIn = 0.5f;
							dust27.customData = this;
						}
					}
					if (this.ai[0] % 30f == 0f && this.ai[0] < 241f && Main.myPlayer == owner)
					{
						Vector2 vector100 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * 12f;
						NewProjectile(base.Center.X, base.Center.Y, vector100.X, vector100.Y, 618, damage / 2, 0f, owner, 0f, whoAmI);
					}
					Vector2 vector101 = base.Center;
					float num1020 = 800f;
					bool flag54 = false;
					int num1021 = 0;
					if (this.ai[1] == 0f)
					{
						for (int num1022 = 0; num1022 < 200; num1022++)
						{
							if (Main.npc[num1022].CanBeChasedBy(this))
							{
								Vector2 center12 = Main.npc[num1022].Center;
								if (Distance(center12) < num1020 && Collision.CanHit(new Vector2(base.position.X + (float)(width / 2), base.position.Y + (float)(height / 2)), 1, 1, Main.npc[num1022].position, Main.npc[num1022].width, Main.npc[num1022].height))
								{
									num1020 = Distance(center12);
									vector101 = center12;
									flag54 = true;
									num1021 = num1022;
								}
							}
						}
						if (flag54)
						{
							if (this.ai[1] != (float)(num1021 + 1))
							{
								netUpdate = true;
							}
							this.ai[1] = num1021 + 1;
						}
						flag54 = false;
					}
					if (this.ai[1] != 0f)
					{
						int num1023 = (int)(this.ai[1] - 1f);
						if (Main.npc[num1023].active && Main.npc[num1023].CanBeChasedBy(this, true) && Distance(Main.npc[num1023].Center) < 1000f)
						{
							flag54 = true;
							vector101 = Main.npc[num1023].Center;
						}
					}
					if (!friendly)
					{
						flag54 = false;
					}
					if (flag54)
					{
						float num1024 = 4f;
						int num1025 = 8;
						Vector2 vector102 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						float num1026 = vector101.X - vector102.X;
						float num1027 = vector101.Y - vector102.Y;
						float num1028 = (float)Math.Sqrt(num1026 * num1026 + num1027 * num1027);
						num1028 = num1024 / num1028;
						num1026 *= num1028;
						num1027 *= num1028;
						base.velocity.X = (base.velocity.X * (float)(num1025 - 1) + num1026) / (float)num1025;
						base.velocity.Y = (base.velocity.Y * (float)(num1025 - 1) + num1027) / (float)num1025;
					}
					break;
				}
				}
				if (alpha < 150)
				{
					Lighting.AddLight(base.Center, 0.7f, 0.2f, 0.6f);
				}
				if (this.ai[0] >= 600f)
				{
					Kill();
				}
			}
			else if (aiStyle == 119)
			{
				int num1029 = 0;
				float num1030 = 0f;
				float x4 = 0f;
				float y3 = 0f;
				bool flag55 = false;
				bool flag56 = false;
				int num1031 = type;
				if (num1031 == 618)
				{
					num1029 = 617;
					num1030 = 420f;
					x4 = 0.15f;
					y3 = 0.15f;
				}
				if (flag56)
				{
					int num1032 = (int)this.ai[1];
					if (!Main.projectile[num1032].active || Main.projectile[num1032].type != num1029)
					{
						Kill();
						return;
					}
					timeLeft = 2;
				}
				this.ai[0] += 1f;
				if (!(this.ai[0] < num1030))
				{
					return;
				}
				bool flag57 = true;
				int num1033 = (int)this.ai[1];
				if (Main.projectile[num1033].active && Main.projectile[num1033].type == num1029)
				{
					if (!flag55 && Main.projectile[num1033].oldPos[1] != Vector2.Zero)
					{
						base.position += Main.projectile[num1033].position - Main.projectile[num1033].oldPos[1];
					}
					if (base.Center.HasNaNs())
					{
						Kill();
						return;
					}
				}
				else
				{
					this.ai[0] = num1030;
					flag57 = false;
					Kill();
				}
				if (flag57 && !flag55)
				{
					base.velocity += new Vector2(Math.Sign(Main.projectile[num1033].Center.X - base.Center.X), Math.Sign(Main.projectile[num1033].Center.Y - base.Center.Y)) * new Vector2(x4, y3);
					if (base.velocity.Length() > 6f)
					{
						base.velocity *= 6f / base.velocity.Length();
					}
				}
				if (type == 618)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num1034 = Dust.NewDust(base.Center, 8, 8, 86);
						Main.dust[num1034].position = base.Center;
						Main.dust[num1034].velocity = base.velocity;
						Main.dust[num1034].noGravity = true;
						Main.dust[num1034].scale = 1.5f;
						if (flag57)
						{
							Main.dust[num1034].customData = Main.projectile[(int)this.ai[1]];
						}
					}
					alpha = 255;
				}
				else
				{
					Kill();
				}
			}
			else if (aiStyle == 120)
			{
				Player player8 = Main.player[owner];
				if (!player8.active)
				{
					active = false;
					return;
				}
				bool flag58 = type == 623;
				Vector2 vector105 = player8.Center;
				float num1035 = 100f;
				float num1036 = 300f;
				float num1037 = 100f;
				float num1038 = 100f;
				if (flag58)
				{
					if (player8.dead)
					{
						player8.stardustGuardian = false;
					}
					if (player8.stardustGuardian)
					{
						timeLeft = 2;
					}
					num1035 = 150f;
					num1036 = 250f;
					num1037 = 200f;
					vector105.X -= (5 + player8.width / 2) * player8.direction;
					vector105.Y -= 25f;
					Lighting.AddLight(base.Center, 0.9f, 0.9f, 0.7f);
					if (this.ai[0] != 3f && alpha == 255)
					{
						alpha = 0;
						for (int num1039 = 0; num1039 < 30; num1039++)
						{
							int num1040 = Dust.NewDust(base.position, width, height, 135, 0f, 0f, 200, default(Color), 1.7f);
							Main.dust[num1040].noGravity = true;
							Main.dust[num1040].velocity *= 3f;
							Main.dust[num1040].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
							num1040 = Dust.NewDust(base.position, width, height, 135, 0f, 0f, 100);
							Main.dust[num1040].velocity *= 2f;
							Main.dust[num1040].noGravity = true;
							Main.dust[num1040].fadeIn = 2.5f;
							Main.dust[num1040].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
						}
					}
					if (localAI[0] > 0f)
					{
						localAI[0] -= 1f;
					}
				}
				if (this.ai[0] != 0f)
				{
					Main.player[owner].tankPet = whoAmI;
					Main.player[owner].tankPetReset = false;
				}
				if (this.ai[0] == 0f)
				{
					if (player8.HasMinionTarget)
					{
						this.ai[0] = 3f;
						netUpdate = true;
					}
					base.Center = Vector2.Lerp(base.Center, vector105, 0.2f);
					base.velocity *= 0.8f;
					base.direction = (spriteDirection = player8.direction);
					if (flag58 && ++frameCounter >= 9)
					{
						frameCounter = 0;
						if (++frame >= Main.projFrames[type] - 4)
						{
							frame = 0;
						}
					}
				}
				else if (this.ai[0] == 1f)
				{
					if (player8.HasMinionTarget)
					{
						vector105 = player8.MinionTargetPoint;
					}
					else
					{
						this.ai[0] = 0f;
						netUpdate = true;
					}
					int num1041 = -1;
					bool flag59 = true;
					if (flag58 && Math.Abs(base.Center.X - vector105.X) > num1035 + 20f)
					{
						flag59 = false;
					}
					if (flag59)
					{
						for (int num1042 = 0; num1042 < 200; num1042++)
						{
							NPC nPC11 = Main.npc[num1042];
							if (nPC11.CanBeChasedBy(this))
							{
								float num1043 = Distance(nPC11.Center);
								if (num1043 < num1036)
								{
									num1041 = num1042;
								}
							}
						}
					}
					if (num1041 != -1)
					{
						NPC nPC12 = Main.npc[num1041];
						base.direction = (spriteDirection = (nPC12.Center.X > base.Center.X).ToDirectionInt());
						float num1044 = Math.Abs(vector105.X - base.Center.X);
						float num1045 = Math.Abs(nPC12.Center.X - base.Center.X);
						float num1046 = Math.Abs(vector105.Y - base.Center.Y);
						float num1047 = Math.Abs(nPC12.Center.Y - base.Bottom.Y);
						float num1048 = (nPC12.Center.Y > base.Bottom.Y).ToDirectionInt();
						if ((num1044 < num1035 || (vector105.X - base.Center.X) * (float)base.direction < 0f) && num1045 > 20f && num1045 < num1035 - num1044 + 100f)
						{
							base.velocity.X += 0.1f * (float)base.direction;
						}
						else
						{
							base.velocity.X *= 0.7f;
						}
						if ((num1046 < num1038 || (vector105.Y - base.Bottom.Y) * num1048 < 0f) && num1047 > 10f && num1047 < num1038 - num1046 + 10f)
						{
							base.velocity.Y += 0.1f * num1048;
						}
						else
						{
							base.velocity.Y *= 0.7f;
						}
						if (localAI[0] == 0f && owner == Main.myPlayer && num1045 < num1037)
						{
							this.ai[1] = 0f;
							this.ai[0] = 2f;
							netUpdate = true;
							localAI[0] = 90f;
						}
					}
					else
					{
						if (Math.Abs(vector105.X - base.Center.X) > num1035 + 40f)
						{
							this.ai[0] = 3f;
							netUpdate = true;
						}
						else if (Math.Abs(vector105.X - base.Center.X) > 20f)
						{
							base.direction = (spriteDirection = (vector105.X > base.Center.X).ToDirectionInt());
							base.velocity.X += 0.06f * (float)base.direction;
						}
						else
						{
							base.velocity.X *= 0.8f;
							base.direction = (spriteDirection = (player8.Center.X < base.Center.X).ToDirectionInt());
						}
						if (Math.Abs(vector105.Y - base.Center.Y) > num1038)
						{
							this.ai[0] = 3f;
							netUpdate = true;
						}
						else if (Math.Abs(vector105.Y - base.Center.Y) > 10f)
						{
							base.velocity.Y += 0.06f * (float)Math.Sign(vector105.Y - base.Center.Y);
						}
						else
						{
							base.velocity.Y *= 0.8f;
						}
					}
					if (flag58 && ++frameCounter >= 9)
					{
						frameCounter = 0;
						if (++frame >= Main.projFrames[type] - 4)
						{
							frame = 0;
						}
					}
				}
				else if (this.ai[0] == 2f)
				{
					base.velocity.X *= 0.9f;
					this.ai[1] += 1f;
					float num1049 = 0f;
					if (flag58)
					{
						num1049 = 20f;
						if (this.ai[1] == 10f && owner == Main.myPlayer)
						{
							int num1050 = (int)(20f * Main.player[owner].minionDamage);
							NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 624, num1050, 6f, owner, 0f, 5f);
						}
					}
					if (this.ai[1] >= num1049)
					{
						this.ai[1] = 0f;
						this.ai[0] = 1f;
						netUpdate = true;
					}
					if (flag58)
					{
						if (frame < Main.projFrames[type] - 4)
						{
							frame = Main.projFrames[type] - 1;
							frameCounter = 0;
						}
						if (++frameCounter >= 5)
						{
							frameCounter = 0;
							if (--frame < Main.projFrames[type] - 5)
							{
								frame = Main.projFrames[type] - 1;
							}
						}
					}
				}
				if (this.ai[0] != 3f)
				{
					return;
				}
				if (player8.HasMinionTarget)
				{
					vector105 = player8.MinionTargetPoint;
				}
				else
				{
					this.ai[0] = 0f;
					netUpdate = true;
				}
				if (alpha == 0)
				{
					alpha = 255;
					for (int num1051 = 0; num1051 < 30; num1051++)
					{
						int num1052 = Dust.NewDust(base.position, width, height, 135, 0f, 0f, 200, default(Color), 1.7f);
						Main.dust[num1052].noGravity = true;
						Main.dust[num1052].velocity *= 3f;
						Main.dust[num1052].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
						num1052 = Dust.NewDust(base.position, width, height, 135, 0f, 0f, 100);
						Main.dust[num1052].velocity *= 2f;
						Main.dust[num1052].noGravity = true;
						Main.dust[num1052].fadeIn = 2.5f;
						Main.dust[num1052].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
					}
				}
				else
				{
					for (int num1053 = 0; num1053 < 2; num1053++)
					{
						int num1054 = Dust.NewDust(base.position, width, height, 135, 0f, 0f, 200, default(Color), 1.7f);
						Main.dust[num1054].noGravity = true;
						Main.dust[num1054].velocity *= 3f;
						Main.dust[num1054].noLight = true;
						Main.dust[num1054].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
						num1054 = Dust.NewDust(base.position, width, height, 135, 0f, 0f, 100);
						Main.dust[num1054].velocity *= 2f;
						Main.dust[num1054].noGravity = true;
						Main.dust[num1054].fadeIn = 2.5f;
						Main.dust[num1054].noLight = true;
						Main.dust[num1054].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
					}
				}
				base.velocity *= 0.7f;
				base.Center = Vector2.Lerp(base.Center, vector105, 0.2f);
				if (Distance(vector105) < 10f)
				{
					this.ai[0] = 1f;
					netUpdate = true;
				}
			}
			else if (aiStyle == 121)
			{
				Player player9 = Main.player[owner];
				if ((int)Main.time % 120 == 0)
				{
					netUpdate = true;
				}
				if (!player9.active)
				{
					active = false;
					return;
				}
				bool flag60 = type == 625;
				bool flag61 = type == 625 || type == 626 || type == 627 || type == 628;
				int num1055 = 10;
				if (flag61)
				{
					if (player9.dead)
					{
						player9.stardustDragon = false;
					}
					if (player9.stardustDragon)
					{
						timeLeft = 2;
					}
					num1055 = 30;
					if (Main.rand.Next(30) == 0)
					{
						int num1056 = Dust.NewDust(base.position, width, height, 135, 0f, 0f, 0, default(Color), 2f);
						Main.dust[num1056].noGravity = true;
						Main.dust[num1056].fadeIn = 2f;
						Point point4 = Main.dust[num1056].position.ToTileCoordinates();
						if (WorldGen.InWorld(point4.X, point4.Y, 5) && WorldGen.SolidTile(point4.X, point4.Y))
						{
							Main.dust[num1056].noLight = true;
						}
					}
				}
				if (flag60)
				{
					Vector2 center13 = player9.Center;
					float num1057 = 700f;
					float num1058 = 1000f;
					int num1059 = -1;
					if (Distance(center13) > 2000f)
					{
						base.Center = center13;
						netUpdate = true;
					}
					if (true)
					{
						for (int num1060 = 0; num1060 < 200; num1060++)
						{
							NPC nPC13 = Main.npc[num1060];
							if (nPC13.CanBeChasedBy(this) && player9.Distance(nPC13.Center) < num1058)
							{
								float num1061 = Distance(nPC13.Center);
								if (num1061 < num1057)
								{
									num1059 = num1060;
									bool boss = nPC13.boss;
								}
							}
						}
					}
					if (num1059 != -1)
					{
						NPC nPC14 = Main.npc[num1059];
						Vector2 vector106 = nPC14.Center - base.Center;
						(vector106.X > 0f).ToDirectionInt();
						(vector106.Y > 0f).ToDirectionInt();
						float scaleFactor11 = 0.4f;
						if (vector106.Length() < 600f)
						{
							scaleFactor11 = 0.6f;
						}
						if (vector106.Length() < 300f)
						{
							scaleFactor11 = 0.8f;
						}
						if (vector106.Length() > nPC14.Size.Length() * 0.75f)
						{
							base.velocity += Vector2.Normalize(vector106) * scaleFactor11 * 1.5f;
							if (Vector2.Dot(base.velocity, vector106) < 0.25f)
							{
								base.velocity *= 0.8f;
							}
						}
						float num1062 = 30f;
						if (base.velocity.Length() > num1062)
						{
							base.velocity = Vector2.Normalize(base.velocity) * num1062;
						}
					}
					else
					{
						float num1063 = 0.2f;
						Vector2 vector107 = center13 - base.Center;
						if (vector107.Length() < 200f)
						{
							num1063 = 0.12f;
						}
						if (vector107.Length() < 140f)
						{
							num1063 = 0.06f;
						}
						if (vector107.Length() > 100f)
						{
							if (Math.Abs(center13.X - base.Center.X) > 20f)
							{
								base.velocity.X += num1063 * (float)Math.Sign(center13.X - base.Center.X);
							}
							if (Math.Abs(center13.Y - base.Center.Y) > 10f)
							{
								base.velocity.Y += num1063 * (float)Math.Sign(center13.Y - base.Center.Y);
							}
						}
						else if (base.velocity.Length() > 2f)
						{
							base.velocity *= 0.96f;
						}
						if (Math.Abs(base.velocity.Y) < 1f)
						{
							base.velocity.Y -= 0.1f;
						}
						float num1064 = 15f;
						if (base.velocity.Length() > num1064)
						{
							base.velocity = Vector2.Normalize(base.velocity) * num1064;
						}
					}
					rotation = base.velocity.ToRotation() + (float)Math.PI / 2f;
					int direction = base.direction;
					base.direction = (spriteDirection = ((base.velocity.X > 0f) ? 1 : (-1)));
					if (direction != base.direction)
					{
						netUpdate = true;
					}
					float num1065 = MathHelper.Clamp(localAI[0], 0f, 50f);
					base.position = base.Center;
					scale = 1f + num1065 * 0.01f;
					width = (height = (int)((float)num1055 * scale));
					base.Center = base.position;
					if (alpha > 0)
					{
						for (int num1066 = 0; num1066 < 2; num1066++)
						{
							int num1067 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 135, 0f, 0f, 100, default(Color), 2f);
							Main.dust[num1067].noGravity = true;
							Main.dust[num1067].noLight = true;
						}
						alpha -= 42;
						if (alpha < 0)
						{
							alpha = 0;
						}
					}
					return;
				}
				bool flag62 = false;
				Vector2 value70 = Vector2.Zero;
				Vector2 zero6 = Vector2.Zero;
				float num1068 = 0f;
				float scaleFactor12 = 0f;
				float scaleFactor13 = 1f;
				if (this.ai[1] == 1f)
				{
					this.ai[1] = 0f;
					netUpdate = true;
				}
				int byUUID = GetByUUID(owner, (int)this.ai[0]);
				if (flag61 && byUUID >= 0 && Main.projectile[byUUID].active && (Main.projectile[byUUID].type == 625 || Main.projectile[byUUID].type == 626 || Main.projectile[byUUID].type == 627))
				{
					int num1112 = 13;
					flag62 = true;
					value70 = Main.projectile[byUUID].Center;
					Vector2 velocity5 = Main.projectile[byUUID].velocity;
					num1068 = Main.projectile[byUUID].rotation;
					float num1069 = MathHelper.Clamp(Main.projectile[byUUID].scale, 0f, 50f);
					scaleFactor13 = num1069;
					scaleFactor12 = 16f;
					int alpha2 = Main.projectile[byUUID].alpha;
					Main.projectile[byUUID].localAI[0] = localAI[0] + 1f;
					if (Main.projectile[byUUID].type != 625)
					{
						Main.projectile[byUUID].localAI[1] = whoAmI;
					}
					if (owner == Main.myPlayer && Main.projectile[byUUID].type == 625 && type == 628)
					{
						Main.projectile[byUUID].Kill();
						Kill();
						return;
					}
				}
				if (!flag62)
				{
					return;
				}
				if (alpha > 0)
				{
					for (int num1070 = 0; num1070 < 2; num1070++)
					{
						int num1071 = Dust.NewDust(base.position, width, height, 135, 0f, 0f, 100, default(Color), 2f);
						Main.dust[num1071].noGravity = true;
						Main.dust[num1071].noLight = true;
					}
				}
				alpha -= 42;
				if (alpha < 0)
				{
					alpha = 0;
				}
				base.velocity = Vector2.Zero;
				Vector2 vector108 = value70 - base.Center;
				if (num1068 != rotation)
				{
					float num1072 = MathHelper.WrapAngle(num1068 - rotation);
					vector108 = vector108.RotatedBy(num1072 * 0.1f);
				}
				rotation = vector108.ToRotation() + (float)Math.PI / 2f;
				base.position = base.Center;
				scale = scaleFactor13;
				width = (height = (int)((float)num1055 * scale));
				base.Center = base.position;
				if (vector108 != Vector2.Zero)
				{
					base.Center = value70 - Vector2.Normalize(vector108) * scaleFactor12 * scaleFactor13;
				}
				spriteDirection = ((vector108.X > 0f) ? 1 : (-1));
			}
			else if (aiStyle == 122)
			{
				int num1073 = (int)this.ai[0];
				bool flag63 = false;
				if (num1073 == -1 || !Main.npc[num1073].active)
				{
					flag63 = true;
				}
				if (flag63)
				{
					if (type == 629)
					{
						Kill();
						return;
					}
					if (type == 631 && this.ai[0] != -1f)
					{
						this.ai[0] = -1f;
						netUpdate = true;
					}
				}
				if (!flag63 && base.Hitbox.Intersects(Main.npc[num1073].Hitbox))
				{
					Kill();
					if (type == 631)
					{
						localAI[1] = 1f;
						Damage();
					}
					return;
				}
				if (type == 629)
				{
					Vector2 value71 = Main.npc[num1073].Center - base.Center;
					base.velocity = Vector2.Normalize(value71) * 5f;
					Dust.QuickDust(base.Center, Color.Red);
				}
				if (type != 631)
				{
					return;
				}
				if (this.ai[1] > 0f)
				{
					this.ai[1] -= 1f;
					base.velocity = Vector2.Zero;
					return;
				}
				if (flag63)
				{
					if (base.velocity == Vector2.Zero)
					{
						Kill();
					}
					tileCollide = true;
					alpha += 10;
					if (alpha > 255)
					{
						Kill();
					}
				}
				else
				{
					Vector2 value72 = Main.npc[num1073].Center - base.Center;
					base.velocity = Vector2.Normalize(value72) * 12f;
					alpha -= 15;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				rotation = base.velocity.ToRotation() - (float)Math.PI / 2f;
			}
			else if (aiStyle == 123)
			{
				bool flag64 = type == 641;
				bool flag65 = type == 643;
				float num1074 = 1000f;
				base.velocity = Vector2.Zero;
				if (flag64)
				{
					alpha -= 5;
					if (alpha < 0)
					{
						alpha = 0;
					}
					if (base.direction == 0)
					{
						base.direction = Main.player[owner].direction;
					}
					rotation -= (float)base.direction * ((float)Math.PI * 2f) / 120f;
					scale = Opacity;
					Lighting.AddLight(base.Center, new Vector3(0.3f, 0.9f, 0.7f) * Opacity);
					if (Main.rand.Next(2) == 0)
					{
						Vector2 vector109 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust30 = Main.dust[Dust.NewDust(base.Center - vector109 * 30f, 0, 0, 229)];
						dust30.noGravity = true;
						dust30.position = base.Center - vector109 * Main.rand.Next(10, 21);
						dust30.velocity = vector109.RotatedBy(1.5707963705062866) * 6f;
						dust30.scale = 0.5f + Main.rand.NextFloat();
						dust30.fadeIn = 0.5f;
						dust30.customData = base.Center;
					}
					if (Main.rand.Next(2) == 0)
					{
						Vector2 vector110 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust31 = Main.dust[Dust.NewDust(base.Center - vector110 * 30f, 0, 0, 240)];
						dust31.noGravity = true;
						dust31.position = base.Center - vector110 * 30f;
						dust31.velocity = vector110.RotatedBy(-1.5707963705062866) * 3f;
						dust31.scale = 0.5f + Main.rand.NextFloat();
						dust31.fadeIn = 0.5f;
						dust31.customData = base.Center;
					}
					if (this.ai[0] < 0f)
					{
						Vector2 center14 = base.Center;
						int num1075 = Dust.NewDust(center14 - Vector2.One * 8f, 16, 16, 229, base.velocity.X / 2f, base.velocity.Y / 2f);
						Main.dust[num1075].velocity *= 2f;
						Main.dust[num1075].noGravity = true;
						Main.dust[num1075].scale = Utils.SelectRandom<float>(Main.rand, 0.8f, 1.65f);
						Main.dust[num1075].customData = this;
					}
				}
				if (flag65)
				{
					alpha -= 5;
					if (alpha < 0)
					{
						alpha = 0;
					}
					if (base.direction == 0)
					{
						base.direction = Main.player[owner].direction;
					}
					if (++frameCounter >= 3)
					{
						frameCounter = 0;
						if (++frame >= Main.projFrames[type])
						{
							frame = 0;
						}
					}
					if (alpha == 0 && Main.rand.Next(15) == 0)
					{
						Dust dust32 = Main.dust[Dust.NewDust(base.Top, 0, 0, 261, 0f, 0f, 100)];
						dust32.velocity.X = 0f;
						dust32.noGravity = true;
						dust32.fadeIn = 1f;
						dust32.position = base.Center + Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (4f * Main.rand.NextFloat() + 26f);
						dust32.scale = 0.5f;
					}
					localAI[0] += 1f;
					if (localAI[0] >= 60f)
					{
						localAI[0] = 0f;
					}
				}
				if (this.ai[0] < 0f)
				{
					this.ai[0] += 1f;
					if (flag64)
					{
						this.ai[1] -= (float)base.direction * ((float)Math.PI / 8f) / 50f;
					}
				}
				if (this.ai[0] == 0f)
				{
					int num1076 = -1;
					float num1077 = num1074;
					for (int num1078 = 0; num1078 < 200; num1078++)
					{
						NPC nPC15 = Main.npc[num1078];
						if (nPC15.CanBeChasedBy(this))
						{
							float num1079 = Distance(nPC15.Center);
							if (num1079 < num1077 && Collision.CanHitLine(base.Center, 0, 0, nPC15.Center, 0, 0))
							{
								num1077 = num1079;
								num1076 = num1078;
							}
						}
					}
					if (num1076 != -1)
					{
						this.ai[0] = 1f;
						this.ai[1] = num1076;
						netUpdate = true;
						return;
					}
				}
				if (!(this.ai[0] > 0f))
				{
					return;
				}
				int num1080 = (int)this.ai[1];
				if (!Main.npc[num1080].CanBeChasedBy(this))
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					netUpdate = true;
					return;
				}
				this.ai[0] += 1f;
				float num1081 = 30f;
				if (flag65)
				{
					num1081 = 5f;
				}
				if (!(this.ai[0] >= num1081))
				{
					return;
				}
				Vector2 vector111 = DirectionTo(Main.npc[num1080].Center);
				if (vector111.HasNaNs())
				{
					vector111 = Vector2.UnitY;
				}
				float num1082 = vector111.ToRotation();
				int num1083 = (vector111.X > 0f) ? 1 : (-1);
				if (flag64)
				{
					base.direction = num1083;
					this.ai[0] = -60f;
					this.ai[1] = num1082 + (float)num1083 * (float)Math.PI / 16f;
					netUpdate = true;
					if (owner == Main.myPlayer)
					{
						NewProjectile(base.Center.X, base.Center.Y, vector111.X, vector111.Y, 642, damage, knockBack, owner, 0f, whoAmI);
					}
				}
				if (!flag65)
				{
					return;
				}
				base.direction = num1083;
				this.ai[0] = -20f;
				netUpdate = true;
				if (owner != Main.myPlayer)
				{
					return;
				}
				Vector2 vector112 = Main.npc[num1080].position + Main.npc[num1080].Size * Utils.RandomVector2(Main.rand, 0f, 1f) - base.Center;
				for (int num1084 = 0; num1084 < 3; num1084++)
				{
					Vector2 vector113 = base.Center + vector112;
					if (num1084 > 0)
					{
						vector113 = base.Center + vector112.RotatedByRandom(0.78539818525314331) * (Main.rand.NextFloat() * 0.5f + 0.75f);
					}
					float x5 = Main.rgbToHsl(new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB)).X;
					NewProjectile(vector113.X, vector113.Y, 0f, 0f, 644, damage, knockBack, owner, x5, whoAmI);
				}
			}
			else
			{
				if (aiStyle != 124)
				{
					return;
				}
				Player player10 = Main.player[owner];
				if (player10.dead)
				{
					Kill();
					return;
				}
				if (Main.myPlayer == owner && player10.suspiciouslookingTentacle)
				{
					timeLeft = 2;
				}
				base.direction = (spriteDirection = player10.direction);
				Vector3 vector114 = DelegateMethods.v3_1 = new Vector3(0.5f, 0.9f, 1f) * 1.5f;
				Utils.PlotTileLine(base.Center, base.Center + base.velocity * 6f, 20f, DelegateMethods.CastLightOpen);
				Utils.PlotTileLine(base.Left, base.Right, 20f, DelegateMethods.CastLightOpen);
				Utils.PlotTileLine(player10.Center, player10.Center + player10.velocity * 6f, 40f, DelegateMethods.CastLightOpen);
				Utils.PlotTileLine(player10.Left, player10.Right, 40f, DelegateMethods.CastLightOpen);
				Vector2 value73 = new Vector2(player10.direction * 30, -20f);
				Vector2 vector115 = player10.MountedCenter + value73;
				float num1085 = Vector2.Distance(base.Center, vector115);
				if (num1085 > 1000f)
				{
					base.Center = player10.Center + value73;
				}
				Vector2 vector116 = vector115 - base.Center;
				float num1086 = 4f;
				if (num1085 < num1086)
				{
					base.velocity *= 0.25f;
				}
				if (vector116 != Vector2.Zero)
				{
					if (vector116.Length() < num1086)
					{
						base.velocity = vector116;
					}
					else
					{
						base.velocity = vector116 * 0.1f;
					}
				}
				if (base.velocity.Length() > 6f)
				{
					float num1087 = base.velocity.ToRotation() + (float)Math.PI / 2f;
					if (Math.Abs(rotation - num1087) >= (float)Math.PI)
					{
						if (num1087 < rotation)
						{
							rotation -= (float)Math.PI * 2f;
						}
						else
						{
							rotation += (float)Math.PI * 2f;
						}
					}
					float num1088 = 12f;
					rotation = (rotation * (num1088 - 1f) + num1087) / num1088;
					if (++frameCounter >= 4)
					{
						frameCounter = 0;
						if (++frame >= Main.projFrames[type])
						{
							frame = 0;
						}
					}
				}
				else
				{
					if (rotation > (float)Math.PI)
					{
						rotation -= (float)Math.PI * 2f;
					}
					if (rotation > -0.005f && rotation < 0.005f)
					{
						rotation = 0f;
					}
					else
					{
						rotation *= 0.96f;
					}
					if (++frameCounter >= 6)
					{
						frameCounter = 0;
						if (++frame >= Main.projFrames[type])
						{
							frame = 0;
						}
					}
				}
				if (this.ai[0] > 0f && (this.ai[0] += 1f) >= 60f)
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
				}
				if (Main.rand.Next(15) == 0)
				{
					float num1089 = -1f;
					int num1090 = 17;
					if ((base.Center - player10.Center).Length() < (float)Main.screenWidth)
					{
						int num1091 = (int)base.Center.X / 16;
						int num1092 = (int)base.Center.Y / 16;
						num1091 = (int)MathHelper.Clamp(num1091, num1090 + 1, Main.maxTilesX - num1090 - 1);
						num1092 = (int)MathHelper.Clamp(num1092, num1090 + 1, Main.maxTilesY - num1090 - 1);
						for (int num1093 = num1091 - num1090; num1093 <= num1091 + num1090; num1093++)
						{
							for (int num1094 = num1092 - num1090; num1094 <= num1092 + num1090; num1094++)
							{
								int num1095 = Main.rand.Next(8);
								if (num1095 >= 4 || !(new Vector2(num1091 - num1093, num1092 - num1094).Length() < (float)num1090) || Main.tile[num1093, num1094] == null || !Main.tile[num1093, num1094].active())
								{
									continue;
								}
								bool flag66 = false;
								if (Main.tile[num1093, num1094].type == 185 && Main.tile[num1093, num1094].frameY == 18)
								{
									if (Main.tile[num1093, num1094].frameX >= 576 && Main.tile[num1093, num1094].frameX <= 882)
									{
										flag66 = true;
									}
								}
								else if (Main.tile[num1093, num1094].type == 186 && Main.tile[num1093, num1094].frameX >= 864 && Main.tile[num1093, num1094].frameX <= 1170)
								{
									flag66 = true;
								}
								if (flag66 || Main.tileSpelunker[Main.tile[num1093, num1094].type] || (Main.tileAlch[Main.tile[num1093, num1094].type] && Main.tile[num1093, num1094].type != 82))
								{
									float num1096 = Distance(new Vector2(num1093 * 16 + 8, num1094 * 16 + 8));
									if (num1096 < num1089 || num1089 == -1f)
									{
										num1089 = num1096;
										this.ai[0] = 1f;
										this.ai[1] = AngleTo(new Vector2(num1093 * 16 + 8, num1094 * 16 + 8));
									}
									if (num1095 < 2)
									{
										int num1097 = Dust.NewDust(new Vector2(num1093 * 16, num1094 * 16), 16, 16, 204, 0f, 0f, 150, default(Color), 0.3f);
										Main.dust[num1097].fadeIn = 0.75f;
										Main.dust[num1097].velocity *= 0.1f;
									}
								}
							}
						}
					}
				}
				float f3 = localAI[0] % ((float)Math.PI * 2f) - (float)Math.PI;
				float num1098 = (float)Math.IEEERemainder(localAI[1], 1.0);
				if (num1098 < 0f)
				{
					num1098 += 1f;
				}
				float num1099 = (float)Math.Floor(localAI[1]);
				float max = 0.999f;
				float num1100 = 0f;
				int num1101 = 0;
				float amount2 = 0.1f;
				bool flag67 = player10.velocity.Length() > 3f;
				int num1102 = -1;
				int num1103 = -1;
				float num1104 = 300f;
				float num1105 = 500f;
				for (int num1106 = 0; num1106 < 200; num1106++)
				{
					NPC nPC16 = Main.npc[num1106];
					if (!nPC16.active || !nPC16.chaseable || nPC16.dontTakeDamage || nPC16.immortal)
					{
						continue;
					}
					float num1107 = Distance(nPC16.Center);
					if (nPC16.friendly || nPC16.lifeMax <= 5)
					{
						if (num1107 < num1104 && !flag67)
						{
							num1104 = num1107;
							num1103 = num1106;
						}
					}
					else if (num1107 < num1105)
					{
						num1105 = num1107;
						num1102 = num1106;
					}
				}
				if (flag67)
				{
					num1100 = AngleTo(base.Center + player10.velocity);
					num1101 = 1;
					num1098 = MathHelper.Clamp(num1098 + 0.05f, 0f, max);
					num1099 += (float)Math.Sign(-10f - num1099);
				}
				else if (num1102 != -1)
				{
					num1100 = AngleTo(Main.npc[num1102].Center);
					num1101 = 2;
					num1098 = MathHelper.Clamp(num1098 + 0.05f, 0f, max);
					num1099 += (float)Math.Sign(-12f - num1099);
				}
				else if (num1103 != -1)
				{
					num1100 = AngleTo(Main.npc[num1103].Center);
					num1101 = 3;
					num1098 = MathHelper.Clamp(num1098 + 0.05f, 0f, max);
					num1099 += (float)Math.Sign(6f - num1099);
				}
				else if (this.ai[0] > 0f)
				{
					num1100 = this.ai[1];
					num1098 = MathHelper.Clamp(num1098 + (float)Math.Sign(0.75f - num1098) * 0.05f, 0f, max);
					num1101 = 4;
					num1099 += (float)Math.Sign(10f - num1099);
					if (Main.rand.Next(10) == 0)
					{
						int num1108 = Dust.NewDust(base.Center + f3.ToRotationVector2() * 6f * num1098 - Vector2.One * 4f, 8, 8, 204, 0f, 0f, 150, default(Color), 0.3f);
						Main.dust[num1108].fadeIn = 0.75f;
						Main.dust[num1108].velocity *= 0.1f;
					}
				}
				else
				{
					num1100 = ((player10.direction == 1) ? 0f : 3.14160275f);
					num1098 = MathHelper.Clamp(num1098 + (float)Math.Sign(0.75f - num1098) * 0.05f, 0f, max);
					num1099 += (float)Math.Sign(0f - num1099);
					amount2 = 0.12f;
				}
				Vector2 value74 = num1100.ToRotationVector2();
				num1100 = Vector2.Lerp(f3.ToRotationVector2(), value74, amount2).ToRotation();
				localAI[0] = num1100 + (float)num1101 * ((float)Math.PI * 2f) + (float)Math.PI;
				localAI[1] = num1099 + num1098;
			}
		}

		private void AI_001()
		{
			if (type == 469 && wet && !honeyWet)
			{
				Kill();
			}
			if (type == 601)
			{
				Color portalColor = PortalHelper.GetPortalColor(owner, (int)ai[0]);
				Vector3 rgb = portalColor.ToVector3();
				rgb *= 0.5f;
				Lighting.AddLight(base.Center + base.velocity * 3f, rgb);
				if (alpha > 0 && alpha <= 15)
				{
					Color color = portalColor;
					color.A = byte.MaxValue;
					for (int i = 0; i < 4; i++)
					{
						Dust dust = Main.dust[Dust.NewDust(base.Center, 0, 0, 264)];
						dust.position = base.Center;
						dust.velocity = base.velocity * 2f + Utils.RandomVector2(Main.rand, -1f, 1f);
						dust.color = color;
						dust.scale = 1.2f;
						dust.noLight = true;
						dust.noGravity = true;
						dust.customData = Main.player[owner];
					}
				}
				alpha -= 15;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (++frameCounter >= 4)
				{
					frameCounter = 0;
					if (++frame >= Main.projFrames[type])
					{
						frame = 0;
					}
				}
				if (alpha == 0)
				{
					Color color2 = portalColor;
					color2.A = byte.MaxValue;
					Dust dust2 = Main.dust[Dust.NewDust(base.Center, 0, 0, 263)];
					dust2.position = base.Center;
					dust2.velocity = base.velocity / 4f;
					dust2.color = color2;
					dust2.noGravity = true;
					dust2.scale = 0.6f;
				}
			}
			if (type == 472)
			{
				int num = Dust.NewDust(base.position, width, height, 30);
				Main.dust[num].noGravity = true;
				Main.dust[num].velocity *= 0.25f;
				Main.dust[num].velocity += base.velocity * 0.75f;
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 17);
					for (int j = 0; j < 20; j++)
					{
						num = Dust.NewDust(base.position, width, height, 30);
						Main.dust[num].noGravity = true;
						Main.dust[num].velocity *= 0.25f;
						Main.dust[num].velocity += base.velocity;
						Main.dust[num].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
						Main.dust[num].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					}
				}
			}
			if (type == 323)
			{
				alpha -= 50;
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			if (type == 436)
			{
				if (ai[1] == 0f)
				{
					ai[1] = 1f;
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 12);
				}
				alpha -= 40;
				if (alpha < 0)
				{
					alpha = 0;
				}
				spriteDirection = direction;
				frameCounter++;
				if (frameCounter >= 3)
				{
					frame++;
					frameCounter = 0;
					if (frame >= 4)
					{
						frame = 0;
					}
				}
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.3f, 1.1f, 0.5f);
			}
			if (type == 467)
			{
				if (ai[1] == 0f)
				{
					ai[1] = 1f;
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 34);
				}
				else if (ai[1] == 1f && Main.netMode != 1)
				{
					int num2 = -1;
					float num3 = 2000f;
					for (int k = 0; k < 16; k++)
					{
						if (Main.player[k].active && !Main.player[k].dead)
						{
							Vector2 center = Main.player[k].Center;
							float num4 = Vector2.Distance(center, base.Center);
							if ((num4 < num3 || num2 == -1) && Collision.CanHit(base.Center, 1, 1, center, 1, 1))
							{
								num3 = num4;
								num2 = k;
							}
						}
					}
					if (num3 < 20f)
					{
						Kill();
						return;
					}
					if (num2 != -1)
					{
						ai[1] = 21f;
						ai[0] = num2;
						netUpdate = true;
					}
				}
				else if (ai[1] > 20f && ai[1] < 200f)
				{
					ai[1] += 1f;
					int num5 = (int)ai[0];
					if (!Main.player[num5].active || Main.player[num5].dead)
					{
						ai[1] = 1f;
						ai[0] = 0f;
						netUpdate = true;
					}
					else
					{
						float num6 = base.velocity.ToRotation();
						Vector2 vector = Main.player[num5].Center - base.Center;
						if (vector.Length() < 20f)
						{
							Kill();
							return;
						}
						float targetAngle = vector.ToRotation();
						if (vector == Vector2.Zero)
						{
							targetAngle = num6;
						}
						float num7 = num6.AngleLerp(targetAngle, 0.008f);
						base.velocity = new Vector2(base.velocity.Length(), 0f).RotatedBy(num7);
					}
				}
				if (ai[1] >= 1f && ai[1] < 20f)
				{
					ai[1] += 1f;
					if (ai[1] == 20f)
					{
						ai[1] = 1f;
					}
				}
				alpha -= 40;
				if (alpha < 0)
				{
					alpha = 0;
				}
				spriteDirection = direction;
				frameCounter++;
				if (frameCounter >= 3)
				{
					frame++;
					frameCounter = 0;
					if (frame >= 4)
					{
						frame = 0;
					}
				}
				Lighting.AddLight(base.Center, 1.1f, 0.9f, 0.4f);
				localAI[0] += 1f;
				if (localAI[0] == 12f)
				{
					localAI[0] = 0f;
					for (int l = 0; l < 12; l++)
					{
						Vector2 spinningpoint = Vector2.UnitX * -width / 2f;
						spinningpoint += -Vector2.UnitY.RotatedBy((float)l * (float)Math.PI / 6f) * new Vector2(8f, 16f);
						spinningpoint = spinningpoint.RotatedBy(rotation - (float)Math.PI / 2f);
						int num8 = Dust.NewDust(base.Center, 0, 0, 6, 0f, 0f, 160);
						Main.dust[num8].scale = 1.1f;
						Main.dust[num8].noGravity = true;
						Main.dust[num8].position = base.Center + spinningpoint;
						Main.dust[num8].velocity = base.velocity * 0.1f;
						Main.dust[num8].velocity = Vector2.Normalize(base.Center - base.velocity * 3f - Main.dust[num8].position) * 1.25f;
					}
				}
				if (Main.rand.Next(4) == 0)
				{
					for (int m = 0; m < 1; m++)
					{
						Vector2 value = -Vector2.UnitX.RotatedByRandom(0.19634954631328583).RotatedBy(base.velocity.ToRotation());
						int num9 = Dust.NewDust(base.position, width, height, 31, 0f, 0f, 100);
						Main.dust[num9].velocity *= 0.1f;
						Main.dust[num9].position = base.Center + value * width / 2f;
						Main.dust[num9].fadeIn = 0.9f;
					}
				}
				if (Main.rand.Next(32) == 0)
				{
					for (int n = 0; n < 1; n++)
					{
						Vector2 value2 = -Vector2.UnitX.RotatedByRandom(0.39269909262657166).RotatedBy(base.velocity.ToRotation());
						int num10 = Dust.NewDust(base.position, width, height, 31, 0f, 0f, 155, default(Color), 0.8f);
						Main.dust[num10].velocity *= 0.3f;
						Main.dust[num10].position = base.Center + value2 * width / 2f;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num10].fadeIn = 1.4f;
						}
					}
				}
				if (Main.rand.Next(2) == 0)
				{
					for (int num11 = 0; num11 < 2; num11++)
					{
						Vector2 value3 = -Vector2.UnitX.RotatedByRandom(0.78539818525314331).RotatedBy(base.velocity.ToRotation());
						int num12 = Dust.NewDust(base.position, width, height, 6, 0f, 0f, 0, default(Color), 1.2f);
						Main.dust[num12].velocity *= 0.3f;
						Main.dust[num12].noGravity = true;
						Main.dust[num12].position = base.Center + value3 * width / 2f;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num12].fadeIn = 1.4f;
						}
					}
				}
			}
			if (type == 468)
			{
				if (ai[1] == 0f)
				{
					ai[1] = 1f;
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 34);
				}
				else if (ai[1] == 1f && Main.netMode != 1)
				{
					int num13 = -1;
					float num14 = 2000f;
					for (int num15 = 0; num15 < 16; num15++)
					{
						if (Main.player[num15].active && !Main.player[num15].dead)
						{
							Vector2 center2 = Main.player[num15].Center;
							float num16 = Vector2.Distance(center2, base.Center);
							if ((num16 < num14 || num13 == -1) && Collision.CanHit(base.Center, 1, 1, center2, 1, 1))
							{
								num14 = num16;
								num13 = num15;
							}
						}
					}
					if (num14 < 20f)
					{
						Kill();
						return;
					}
					if (num13 != -1)
					{
						ai[1] = 21f;
						ai[0] = num13;
						netUpdate = true;
					}
				}
				else if (ai[1] > 20f && ai[1] < 200f)
				{
					ai[1] += 1f;
					int num17 = (int)ai[0];
					if (!Main.player[num17].active || Main.player[num17].dead)
					{
						ai[1] = 1f;
						ai[0] = 0f;
						netUpdate = true;
					}
					else
					{
						float num18 = base.velocity.ToRotation();
						Vector2 vector2 = Main.player[num17].Center - base.Center;
						if (vector2.Length() < 20f)
						{
							Kill();
							return;
						}
						float targetAngle2 = vector2.ToRotation();
						if (vector2 == Vector2.Zero)
						{
							targetAngle2 = num18;
						}
						float num19 = num18.AngleLerp(targetAngle2, 0.01f);
						base.velocity = new Vector2(base.velocity.Length(), 0f).RotatedBy(num19);
					}
				}
				if (ai[1] >= 1f && ai[1] < 20f)
				{
					ai[1] += 1f;
					if (ai[1] == 20f)
					{
						ai[1] = 1f;
					}
				}
				alpha -= 40;
				if (alpha < 0)
				{
					alpha = 0;
				}
				spriteDirection = direction;
				frameCounter++;
				if (frameCounter >= 3)
				{
					frame++;
					frameCounter = 0;
					if (frame >= 4)
					{
						frame = 0;
					}
				}
				Lighting.AddLight(base.Center, 0.2f, 0.1f, 0.6f);
				localAI[0] += 1f;
				if (localAI[0] == 12f)
				{
					localAI[0] = 0f;
					for (int num20 = 0; num20 < 12; num20++)
					{
						Vector2 spinningpoint2 = Vector2.UnitX * -width / 2f;
						spinningpoint2 += -Vector2.UnitY.RotatedBy((float)num20 * (float)Math.PI / 6f) * new Vector2(8f, 16f);
						spinningpoint2 = spinningpoint2.RotatedBy(rotation - (float)Math.PI / 2f);
						int num21 = Dust.NewDust(base.Center, 0, 0, 27, 0f, 0f, 160);
						Main.dust[num21].scale = 1.1f;
						Main.dust[num21].noGravity = true;
						Main.dust[num21].position = base.Center + spinningpoint2;
						Main.dust[num21].velocity = base.velocity * 0.1f;
						Main.dust[num21].velocity = Vector2.Normalize(base.Center - base.velocity * 3f - Main.dust[num21].position) * 1.25f;
					}
				}
				if (Main.rand.Next(4) == 0)
				{
					for (int num22 = 0; num22 < 1; num22++)
					{
						Vector2 value4 = -Vector2.UnitX.RotatedByRandom(0.19634954631328583).RotatedBy(base.velocity.ToRotation());
						int num23 = Dust.NewDust(base.position, width, height, 31, 0f, 0f, 100);
						Main.dust[num23].velocity *= 0.1f;
						Main.dust[num23].position = base.Center + value4 * width / 2f;
						Main.dust[num23].fadeIn = 0.9f;
					}
				}
				if (Main.rand.Next(32) == 0)
				{
					for (int num24 = 0; num24 < 1; num24++)
					{
						Vector2 value5 = -Vector2.UnitX.RotatedByRandom(0.39269909262657166).RotatedBy(base.velocity.ToRotation());
						int num25 = Dust.NewDust(base.position, width, height, 31, 0f, 0f, 155, default(Color), 0.8f);
						Main.dust[num25].velocity *= 0.3f;
						Main.dust[num25].position = base.Center + value5 * width / 2f;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num25].fadeIn = 1.4f;
						}
					}
				}
				if (Main.rand.Next(2) == 0)
				{
					for (int num26 = 0; num26 < 2; num26++)
					{
						Vector2 value6 = -Vector2.UnitX.RotatedByRandom(0.78539818525314331).RotatedBy(base.velocity.ToRotation());
						int num27 = Dust.NewDust(base.position, width, height, 27, 0f, 0f, 0, default(Color), 1.2f);
						Main.dust[num27].velocity *= 0.3f;
						Main.dust[num27].noGravity = true;
						Main.dust[num27].position = base.Center + value6 * width / 2f;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num27].fadeIn = 1.4f;
						}
					}
				}
			}
			if (type == 634 || type == 635)
			{
				float num28 = 5f;
				float num29 = 250f;
				float num30 = 6f;
				Vector2 value7 = new Vector2(8f, 10f);
				float num31 = 1.2f;
				Vector3 rgb2 = new Vector3(0.7f, 0.1f, 0.5f);
				int num32 = 4 * MaxUpdates;
				int num33 = Utils.SelectRandom<int>(Main.rand, 242, 73, 72, 71, 255);
				int num34 = 255;
				if (type == 635)
				{
					value7 = new Vector2(10f, 20f);
					num31 = 1f;
					num29 = 500f;
					num34 = 88;
					num32 = 3 * MaxUpdates;
					rgb2 = new Vector3(0.4f, 0.6f, 0.9f);
					num33 = Utils.SelectRandom<int>(Main.rand, 242, 59, 88);
				}
				if (ai[1] == 0f)
				{
					ai[1] = 1f;
					localAI[0] = -Main.rand.Next(48);
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 34);
				}
				else if (ai[1] == 1f && owner == Main.myPlayer)
				{
					int num35 = -1;
					float num36 = num29;
					for (int num37 = 0; num37 < 200; num37++)
					{
						if (Main.npc[num37].active && Main.npc[num37].CanBeChasedBy(this))
						{
							Vector2 center3 = Main.npc[num37].Center;
							float num38 = Vector2.Distance(center3, base.Center);
							if (num38 < num36 && num35 == -1 && Collision.CanHitLine(base.Center, 1, 1, center3, 1, 1))
							{
								num36 = num38;
								num35 = num37;
							}
						}
					}
					if (num36 < 20f)
					{
						Kill();
						return;
					}
					if (num35 != -1)
					{
						ai[1] = num28 + 1f;
						ai[0] = num35;
						netUpdate = true;
					}
				}
				else if (ai[1] > num28)
				{
					ai[1] += 1f;
					int num39 = (int)ai[0];
					if (!Main.npc[num39].active || !Main.npc[num39].CanBeChasedBy(this))
					{
						ai[1] = 1f;
						ai[0] = 0f;
						netUpdate = true;
					}
					else
					{
						base.velocity.ToRotation();
						Vector2 vector3 = Main.npc[num39].Center - base.Center;
						if (vector3.Length() < 20f)
						{
							Kill();
							return;
						}
						if (vector3 != Vector2.Zero)
						{
							vector3.Normalize();
							vector3 *= num30;
						}
						float num40 = 30f;
						base.velocity = (base.velocity * (num40 - 1f) + vector3) / num40;
					}
				}
				if (ai[1] >= 1f && ai[1] < num28)
				{
					ai[1] += 1f;
					if (ai[1] == num28)
					{
						ai[1] = 1f;
					}
				}
				alpha -= 40;
				if (alpha < 0)
				{
					alpha = 0;
				}
				spriteDirection = direction;
				frameCounter++;
				if (frameCounter >= num32)
				{
					frame++;
					frameCounter = 0;
					if (frame >= 4)
					{
						frame = 0;
					}
				}
				Lighting.AddLight(base.Center, rgb2);
				rotation = base.velocity.ToRotation();
				localAI[0] += 1f;
				if (localAI[0] == 48f)
				{
					localAI[0] = 0f;
				}
				else if (alpha == 0)
				{
					for (int num41 = 0; num41 < 2; num41++)
					{
						Vector2 vector4 = Vector2.UnitX * -30f;
						vector4 = -Vector2.UnitY.RotatedBy(localAI[0] * ((float)Math.PI / 24f) + (float)num41 * (float)Math.PI) * value7 - rotation.ToRotationVector2() * 10f;
						int num42 = Dust.NewDust(base.Center, 0, 0, num34, 0f, 0f, 160);
						Main.dust[num42].scale = num31;
						Main.dust[num42].noGravity = true;
						Main.dust[num42].position = base.Center + vector4 + base.velocity * 2f;
						Main.dust[num42].velocity = Vector2.Normalize(base.Center + base.velocity * 2f * 8f - Main.dust[num42].position) * 2f + base.velocity * 2f;
					}
				}
				if (Main.rand.Next(12) == 0)
				{
					for (int num43 = 0; num43 < 1; num43++)
					{
						Vector2 value8 = -Vector2.UnitX.RotatedByRandom(0.19634954631328583).RotatedBy(base.velocity.ToRotation());
						int num44 = Dust.NewDust(base.position, width, height, 31, 0f, 0f, 100);
						Main.dust[num44].velocity *= 0.1f;
						Main.dust[num44].position = base.Center + value8 * width / 2f + base.velocity * 2f;
						Main.dust[num44].fadeIn = 0.9f;
					}
				}
				if (Main.rand.Next(64) == 0)
				{
					for (int num45 = 0; num45 < 1; num45++)
					{
						Vector2 value9 = -Vector2.UnitX.RotatedByRandom(0.39269909262657166).RotatedBy(base.velocity.ToRotation());
						int num46 = Dust.NewDust(base.position, width, height, 31, 0f, 0f, 155, default(Color), 0.8f);
						Main.dust[num46].velocity *= 0.3f;
						Main.dust[num46].position = base.Center + value9 * width / 2f;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num46].fadeIn = 1.4f;
						}
					}
				}
				if (Main.rand.Next(4) == 0)
				{
					for (int num47 = 0; num47 < 2; num47++)
					{
						Vector2 value10 = -Vector2.UnitX.RotatedByRandom(0.78539818525314331).RotatedBy(base.velocity.ToRotation());
						int num48 = Dust.NewDust(base.position, width, height, num33, 0f, 0f, 0, default(Color), 1.2f);
						Main.dust[num48].velocity *= 0.3f;
						Main.dust[num48].noGravity = true;
						Main.dust[num48].position = base.Center + value10 * width / 2f;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num48].fadeIn = 1.4f;
						}
					}
				}
				if (Main.rand.Next(12) == 0 && type == 634)
				{
					Vector2 value11 = -Vector2.UnitX.RotatedByRandom(0.19634954631328583).RotatedBy(base.velocity.ToRotation());
					int num49 = Dust.NewDust(base.position, width, height, num34, 0f, 0f, 100);
					Main.dust[num49].velocity *= 0.3f;
					Main.dust[num49].position = base.Center + value11 * width / 2f;
					Main.dust[num49].fadeIn = 0.9f;
					Main.dust[num49].noGravity = true;
				}
				if (Main.rand.Next(3) == 0 && type == 635)
				{
					Vector2 value12 = -Vector2.UnitX.RotatedByRandom(0.19634954631328583).RotatedBy(base.velocity.ToRotation());
					int num50 = Dust.NewDust(base.position, width, height, num34, 0f, 0f, 100);
					Main.dust[num50].velocity *= 0.3f;
					Main.dust[num50].position = base.Center + value12 * width / 2f;
					Main.dust[num50].fadeIn = 1.2f;
					Main.dust[num50].scale = 1.5f;
					Main.dust[num50].noGravity = true;
				}
			}
			if (type == 459)
			{
				alpha -= 30;
				if (alpha < 0)
				{
					alpha = 0;
				}
				spriteDirection = direction;
				frameCounter++;
				if (frameCounter >= 3)
				{
					frame++;
					frameCounter = 0;
					if (frame >= 3)
					{
						frame = 0;
					}
				}
				base.position = base.Center;
				scale = ai[1];
				width = (height = (int)(22f * scale));
				base.Center = base.position;
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.4f, 0.85f, 0.9f);
				int num51 = 0;
				if ((double)scale < 0.85)
				{
					num51 = ((Main.rand.Next(3) == 0) ? 1 : 0);
				}
				else
				{
					num51 = 1;
					penetrate = -1;
					maxPenetrate = -1;
				}
				for (int num52 = 0; num52 < num51; num52++)
				{
					int num53 = Dust.NewDust(base.position, width, height, 226, base.velocity.X);
					Main.dust[num53].position -= Vector2.One * 3f;
					Main.dust[num53].scale = 0.5f;
					Main.dust[num53].noGravity = true;
					Main.dust[num53].velocity = base.velocity / 3f;
					Main.dust[num53].alpha = 255 - (int)(255f * scale);
				}
			}
			if (type == 442)
			{
				frame = 0;
				if (alpha != 0)
				{
					localAI[0] += 1f;
					if (localAI[0] >= 4f)
					{
						alpha -= 90;
						if (alpha < 0)
						{
							alpha = 0;
							localAI[0] = 2f;
						}
					}
				}
				if (Vector2.Distance(base.Center, new Vector2(ai[0], ai[1]) * 16f + Vector2.One * 8f) <= 16f)
				{
					Kill();
					return;
				}
				if (alpha == 0)
				{
					localAI[1] += 1f;
					if (localAI[1] >= 120f)
					{
						Kill();
						return;
					}
					Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.3f, 0.45f, 0.8f);
					localAI[0] += 1f;
					if (localAI[0] == 3f)
					{
						localAI[0] = 0f;
						for (int num54 = 0; num54 < 8; num54++)
						{
							Vector2 spinningpoint3 = Vector2.UnitX * -8f;
							spinningpoint3 += -Vector2.UnitY.RotatedBy((float)num54 * (float)Math.PI / 4f) * new Vector2(2f, 4f);
							spinningpoint3 = spinningpoint3.RotatedBy(rotation - (float)Math.PI / 2f);
							int num55 = Dust.NewDust(base.Center, 0, 0, 135);
							Main.dust[num55].scale = 1.5f;
							Main.dust[num55].noGravity = true;
							Main.dust[num55].position = base.Center + spinningpoint3;
							Main.dust[num55].velocity = base.velocity * 0.66f;
						}
					}
				}
			}
			if (type == 440 || type == 449 || type == 606)
			{
				if (alpha > 0)
				{
					alpha -= 25;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (type == 440)
				{
					Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.25f, 0.4f, 0.7f);
				}
				if (type == 449)
				{
					Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.7f, 0.65f, 0.3f);
				}
				if (type == 606)
				{
					Lighting.AddLight(base.Center, 0.7f, 0.3f, 0.3f);
				}
				float num56 = 100f;
				float num57 = 3f;
				if (type == 606)
				{
					num56 = 150f;
					num57 = 5f;
				}
				if (ai[1] == 0f)
				{
					localAI[0] += num57;
					if (localAI[0] == num57 * 1f && type == 606)
					{
						for (int num58 = 0; num58 < 4; num58++)
						{
							int num59 = Dust.NewDust(base.Center - base.velocity / 2f, 0, 0, 182, 0f, 0f, 100, default(Color), 1.4f);
							Main.dust[num59].velocity *= 0.2f;
							Main.dust[num59].velocity += base.velocity / 10f;
							Main.dust[num59].noGravity = true;
						}
					}
					if (localAI[0] > num56)
					{
						localAI[0] = num56;
					}
				}
				else
				{
					localAI[0] -= num57;
					if (localAI[0] <= 0f)
					{
						Kill();
						return;
					}
				}
			}
			if (type == 438)
			{
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.4f, 0.1f, 0.2f);
			}
			if (type == 593)
			{
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.4f, 0.1f, 0.3f);
				if (++frameCounter >= 12)
				{
					if (++frame >= Main.projFrames[type])
					{
						frame = 0;
					}
					frameCounter = 0;
				}
				if (Main.rand.Next(2) == 0)
				{
					Vector2 vector5 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
					Dust dust3 = Main.dust[Dust.NewDust(base.Center - vector5 * 8f, 0, 0, 240)];
					dust3.noGravity = true;
					dust3.position = base.Center - vector5 * 8f * scale;
					dust3.velocity = vector5.RotatedBy(-1.5707963705062866) * 2f;
					dust3.velocity = Vector2.Zero;
					dust3.scale = 0.5f + Main.rand.NextFloat();
					dust3.fadeIn = 0.5f;
				}
			}
			if (type == 592)
			{
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.15f, 0.15f, 0.4f);
			}
			if (type == 462)
			{
				int num60 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100);
				Main.dust[num60].noLight = true;
				Main.dust[num60].noGravity = true;
				Main.dust[num60].velocity = base.velocity;
				Main.dust[num60].position -= Vector2.One * 4f;
				Main.dust[num60].scale = 0.8f;
				if (++frameCounter >= 9)
				{
					frameCounter = 0;
					if (++frame >= 5)
					{
						frame = 0;
					}
				}
			}
			if (type == 437)
			{
				if (ai[1] == 0f)
				{
					ai[1] = 1f;
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 12);
				}
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					for (int num61 = 0; num61 < 4; num61++)
					{
						int num62 = Dust.NewDust(base.position, width, height, 226, base.velocity.X);
						Main.dust[num62].position = Vector2.Lerp(Main.dust[num62].position, base.Center, 0.25f);
						Main.dust[num62].scale = 0.5f;
						Main.dust[num62].noGravity = true;
						Main.dust[num62].velocity /= 2f;
						Main.dust[num62].velocity += base.velocity * 0.66f;
					}
				}
				if (ai[0] < 16f)
				{
					for (int num63 = 0; num63 < 2; num63++)
					{
						int num64 = Dust.NewDust(base.position, width, height, 226, base.velocity.X);
						Main.dust[num64].position = base.position + new Vector2(((direction == 1) ? 1 : 0) * width, 2 + (height - 4) * num63);
						Main.dust[num64].scale = 0.3f;
						Main.dust[num64].noGravity = true;
						Main.dust[num64].velocity = Vector2.Zero;
					}
				}
			}
			if (type == 435)
			{
				if (ai[1] == 0f)
				{
					ai[1] = 1f;
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 12);
				}
				alpha -= 40;
				if (alpha < 0)
				{
					alpha = 0;
				}
				spriteDirection = direction;
				frameCounter++;
				if (frameCounter >= 3)
				{
					frame++;
					frameCounter = 0;
					if (frame >= 4)
					{
						frame = 0;
					}
				}
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.3f, 0.8f, 1.1f);
			}
			if (type == 408)
			{
				alpha -= 40;
				if (alpha < 0)
				{
					alpha = 0;
				}
				spriteDirection = direction;
			}
			if (type == 282)
			{
				int num65 = Dust.NewDust(base.position, width, height, 171, 0f, 0f, 100);
				Main.dust[num65].scale = (float)Main.rand.Next(1, 10) * 0.1f;
				Main.dust[num65].noGravity = true;
				Main.dust[num65].fadeIn = 1.5f;
				Main.dust[num65].velocity *= 0.25f;
				Main.dust[num65].velocity += base.velocity * 0.25f;
			}
			if (type == 275 || type == 276)
			{
				frameCounter++;
				if (frameCounter > 1)
				{
					frameCounter = 0;
					frame++;
					if (frame > 1)
					{
						frame = 0;
					}
				}
			}
			if (type == 225)
			{
				int num66 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 40);
				Main.dust[num66].noGravity = true;
				Main.dust[num66].scale = 1.3f;
				Main.dust[num66].velocity *= 0.5f;
			}
			if (type == 174)
			{
				if (alpha == 0)
				{
					int num67 = Dust.NewDust(oldPosition - base.velocity * 3f, width, height, 76, 0f, 0f, 50);
					Main.dust[num67].noGravity = true;
					Main.dust[num67].noLight = true;
					Main.dust[num67].velocity *= 0.5f;
				}
				alpha -= 50;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (ai[1] == 0f)
				{
					ai[1] = 1f;
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 17);
				}
			}
			else if (type == 605)
			{
				if (alpha == 0 && Main.rand.Next(3) == 0)
				{
					int num68 = Dust.NewDust(base.position - base.velocity * 3f, width, height, 4, 0f, 0f, 50, new Color(78, 136, 255, 150), 1.2f);
					Main.dust[num68].velocity *= 0.3f;
					Main.dust[num68].velocity += base.velocity * 0.3f;
					Main.dust[num68].noGravity = true;
				}
				alpha -= 50;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (ai[1] == 0f)
				{
					ai[1] = 1f;
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 17);
				}
			}
			else if (type == 176)
			{
				if (alpha == 0)
				{
					int num69 = Dust.NewDust(oldPosition, width, height, 22, 0f, 0f, 100, default(Color), 0.5f);
					Main.dust[num69].noGravity = true;
					Main.dust[num69].noLight = true;
					Main.dust[num69].velocity *= 0.15f;
					Main.dust[num69].fadeIn = 0.8f;
				}
				alpha -= 50;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (ai[1] == 0f)
				{
					ai[1] = 1f;
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 17);
				}
			}
			if (type == 350)
			{
				alpha -= 100;
				if (alpha < 0)
				{
					alpha = 0;
				}
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.9f, 0.6f, 0.2f);
				if (alpha == 0)
				{
					int num70 = 2;
					if (Main.rand.Next(2) == 0)
					{
						int num71 = Dust.NewDust(new Vector2(base.Center.X - (float)num70, base.Center.Y - (float)num70 - 2f) - base.velocity * 0.5f, num70 * 2, num70 * 2, 6, 0f, 0f, 100);
						Main.dust[num71].scale *= 1.8f + (float)Main.rand.Next(10) * 0.1f;
						Main.dust[num71].velocity *= 0.2f;
						Main.dust[num71].noGravity = true;
					}
					if (Main.rand.Next(4) == 0)
					{
						int num72 = num72 = Dust.NewDust(new Vector2(base.Center.X - (float)num70, base.Center.Y - (float)num70 - 2f) - base.velocity * 0.5f, num70 * 2, num70 * 2, 31, 0f, 0f, 100, default(Color), 0.5f);
						Main.dust[num72].fadeIn = 1f + (float)Main.rand.Next(5) * 0.1f;
						Main.dust[num72].velocity *= 0.05f;
					}
				}
				if (ai[1] == 0f)
				{
					ai[1] = 1f;
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 42);
				}
			}
			if (type == 325)
			{
				alpha -= 100;
				if (alpha < 0)
				{
					alpha = 0;
				}
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.9f, 0.6f, 0.2f);
				if (alpha == 0)
				{
					int num73 = 2;
					if (Main.rand.Next(2) == 0)
					{
						int num74 = Dust.NewDust(new Vector2(base.Center.X - (float)num73, base.Center.Y - (float)num73 - 2f) - base.velocity * 0.5f, num73 * 2, num73 * 2, 6, 0f, 0f, 100);
						Main.dust[num74].scale *= 1.8f + (float)Main.rand.Next(10) * 0.1f;
						Main.dust[num74].velocity *= 0.2f;
						Main.dust[num74].noGravity = true;
					}
					if (Main.rand.Next(4) == 0)
					{
						int num75 = num75 = Dust.NewDust(new Vector2(base.Center.X - (float)num73, base.Center.Y - (float)num73 - 2f) - base.velocity * 0.5f, num73 * 2, num73 * 2, 31, 0f, 0f, 100, default(Color), 0.5f);
						Main.dust[num75].fadeIn = 1f + (float)Main.rand.Next(5) * 0.1f;
						Main.dust[num75].velocity *= 0.05f;
					}
				}
				if (ai[1] == 0f)
				{
					ai[1] = 1f;
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 42);
				}
			}
			if (type == 469)
			{
				localAI[1] += 1f;
				if (localAI[1] > 2f)
				{
					alpha -= 50;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
			}
			else if (type == 83 && ai[1] == 0f)
			{
				ai[1] = 1f;
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 33);
			}
			else if (type == 408 && ai[1] == 0f)
			{
				ai[1] = 1f;
				Main.PlaySound(4, (int)base.position.X, (int)base.position.Y, 19);
			}
			else if (type == 259 && ai[1] == 0f)
			{
				ai[1] = 1f;
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 33);
			}
			else if (type == 110 && ai[1] == 0f)
			{
				ai[1] = 1f;
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 11);
			}
			else if (type == 302 && ai[1] == 0f)
			{
				ai[1] = 1f;
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 11);
			}
			else if (type == 438 && ai[1] == 0f)
			{
				ai[1] = 1f;
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 12);
			}
			else if (type == 593 && ai[1] == 0f)
			{
				ai[1] = 1f;
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 11);
			}
			else if (type == 592 && ai[1] == 0f)
			{
				ai[1] = 1f;
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 12);
			}
			else if (type == 462 && ai[1] == 0f)
			{
				ai[1] = 1f;
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, Main.rand.Next(124, 126));
				Vector2 value13 = Vector2.Normalize(base.velocity);
				int num76 = Main.rand.Next(5, 10);
				for (int num77 = 0; num77 < num76; num77++)
				{
					int num78 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100);
					Main.dust[num78].velocity.Y -= 1f;
					Main.dust[num78].velocity += value13 * 2f;
					Main.dust[num78].position -= Vector2.One * 4f;
					Main.dust[num78].noGravity = true;
				}
			}
			else if (type == 84 && ai[1] == 0f)
			{
				ai[1] = 1f;
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 12);
			}
			else if (type == 389 && ai[1] == 0f)
			{
				ai[1] = 1f;
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 12);
			}
			else if (type == 257 && ai[1] == 0f)
			{
				ai[1] = 1f;
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 12);
			}
			else if (type == 100 && ai[1] == 0f)
			{
				ai[1] = 1f;
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 33);
			}
			else if (type == 98 && ai[1] == 0f)
			{
				ai[1] = 1f;
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 17);
			}
			else if (type == 184 && ai[1] == 0f)
			{
				ai[1] = 1f;
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 17);
			}
			else if (type == 195 && ai[1] == 0f)
			{
				ai[1] = 1f;
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 17);
			}
			else if (type == 275 && ai[1] == 0f)
			{
				ai[1] = 1f;
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 17);
			}
			else if (type == 276 && ai[1] == 0f)
			{
				ai[1] = 1f;
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 17);
			}
			else if ((type == 81 || type == 82) && ai[1] == 0f)
			{
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 5);
				ai[1] = 1f;
			}
			else if (type == 180 && ai[1] == 0f)
			{
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 11);
				ai[1] = 1f;
			}
			else if (type == 248 && ai[1] == 0f)
			{
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 17);
				ai[1] = 1f;
			}
			else if (type == 576 && ai[1] == 0f)
			{
				ai[1] = 1f;
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 12);
			}
			else if (type == 577 && ai[1] == 0f)
			{
				ai[1] = 1f;
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 36);
			}
			else if (type == 639)
			{
				if (localAI[0] == 0f && localAI[1] == 0f)
				{
					localAI[0] = base.Center.X;
					localAI[1] = base.Center.Y;
					ai[0] = base.velocity.X;
					ai[1] = base.velocity.Y;
				}
				alpha -= 25;
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			else if (type == 640)
			{
				alpha -= 25;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (base.velocity == Vector2.Zero)
				{
					ai[0] = 0f;
					bool flag = true;
					for (int num79 = 1; num79 < oldPos.Length; num79++)
					{
						if (oldPos[num79] != oldPos[0])
						{
							flag = false;
						}
					}
					if (flag)
					{
						Kill();
						return;
					}
					if (Main.rand.Next(extraUpdates) == 0 && (base.velocity != Vector2.Zero || Main.rand.Next((localAI[1] == 2f) ? 2 : 6) == 0))
					{
						for (int num80 = 0; num80 < 2; num80++)
						{
							float num81 = rotation + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
							float num82 = (float)Main.rand.NextDouble() * 0.8f + 1f;
							Vector2 vector6 = new Vector2((float)Math.Cos(num81) * num82, (float)Math.Sin(num81) * num82);
							int num83 = Dust.NewDust(base.Center, 0, 0, 229, vector6.X, vector6.Y);
							Main.dust[num83].noGravity = true;
							Main.dust[num83].scale = 1.2f;
						}
						if (Main.rand.Next(10) == 0)
						{
							Vector2 value14 = base.velocity.RotatedBy(1.5707963705062866) * ((float)Main.rand.NextDouble() - 0.5f) * width;
							int num84 = Dust.NewDust(base.Center + value14 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
							Main.dust[num84].velocity *= 0.5f;
							Main.dust[num84].velocity.Y = 0f - Math.Abs(Main.dust[num84].velocity.Y);
						}
					}
				}
				else if (numUpdates == 1)
				{
					float num85 = rotation + (float)Math.PI / 2f + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
					float num86 = (float)Main.rand.NextDouble() * 0.25f + 0.25f;
					Vector2 vector7 = new Vector2((float)Math.Cos(num85) * num86, (float)Math.Sin(num85) * num86);
					int num87 = Dust.NewDust(base.position, 0, 0, 229, vector7.X, vector7.Y);
					Main.dust[num87].noGravity = true;
					Main.dust[num87].scale = 1.2f;
				}
			}
			if (type == 41)
			{
				int num88 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.6f);
				Main.dust[num88].noGravity = true;
				num88 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2f);
				Main.dust[num88].noGravity = true;
			}
			else if (type == 55)
			{
				int num89 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 18, 0f, 0f, 0, default(Color), 0.9f);
				Main.dust[num89].noGravity = true;
			}
			else if (type == 374)
			{
				if (localAI[0] == 0f)
				{
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 17);
					localAI[0] = 1f;
				}
				if (Main.rand.Next(2) == 0)
				{
					int num90 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 18, 0f, 0f, 0, default(Color), 0.9f);
					Main.dust[num90].noGravity = true;
					Main.dust[num90].velocity *= 0.5f;
				}
			}
			else if (type == 376)
			{
				if (localAI[0] == 0f)
				{
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 20);
				}
				localAI[0] += 1f;
				if (localAI[0] > 3f)
				{
					int num91 = 1;
					if (localAI[0] > 5f)
					{
						num91 = 2;
					}
					for (int num92 = 0; num92 < num91; num92++)
					{
						int num93 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + 2f), width, height, 6, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100, default(Color), 2f);
						Main.dust[num93].noGravity = true;
						Main.dust[num93].velocity.X *= 0.3f;
						Main.dust[num93].velocity.Y *= 0.3f;
						Main.dust[num93].noLight = true;
					}
					if (wet && !lavaWet)
					{
						Kill();
						return;
					}
				}
			}
			else if (type == 91 && Main.rand.Next(2) == 0)
			{
				int num95 = Dust.NewDust(Type: (Main.rand.Next(2) != 0) ? 58 : 15, Position: base.position, Width: width, Height: height, SpeedX: base.velocity.X * 0.25f, SpeedY: base.velocity.Y * 0.25f, Alpha: 150, newColor: default(Color), Scale: 0.9f);
				Main.dust[num95].velocity *= 0.25f;
			}
			if (type == 163 || type == 310)
			{
				if (alpha > 0)
				{
					alpha -= 25;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			switch (type)
			{
			case 14:
			case 20:
			case 36:
			case 83:
			case 84:
			case 89:
			case 100:
			case 104:
			case 110:
			case 158:
			case 159:
			case 160:
			case 161:
			case 180:
			case 279:
			case 283:
			case 284:
			case 285:
			case 286:
			case 287:
			case 389:
				if (alpha > 0)
				{
					alpha -= 15;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				break;
			case 576:
			case 577:
				localAI[1] += 1f;
				if (localAI[1] > 2f)
				{
					if (alpha > 0)
					{
						alpha -= 15;
					}
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				break;
			}
			if (type == 484)
			{
				int num96 = Dust.NewDust(base.position, width, height, 78);
				Main.dust[num96].noGravity = true;
				Main.dust[num96].velocity *= 0.1f;
				Main.dust[num96].scale = 0.75f;
				Main.dust[num96].position = (Main.dust[num96].position + base.Center) / 2f;
				Main.dust[num96].position += base.velocity * Main.rand.Next(0, 101) * 0.01f;
			}
			if (type == 242 || type == 302 || type == 438 || type == 462 || type == 592)
			{
				float num97 = (float)Math.Sqrt(base.velocity.X * base.velocity.X + base.velocity.Y * base.velocity.Y);
				if (alpha > 0)
				{
					alpha -= (byte)((double)num97 * 0.9);
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			if (type == 638)
			{
				float num98 = base.velocity.Length();
				if (alpha > 0)
				{
					alpha -= (byte)((double)num98 * 0.3);
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				Rectangle hitbox = base.Hitbox;
				hitbox.Offset((int)base.velocity.X, (int)base.velocity.Y);
				bool flag2 = false;
				for (int num99 = 0; num99 < 200; num99++)
				{
					if (Main.npc[num99].active && !Main.npc[num99].dontTakeDamage && Main.npc[num99].immune[owner] == 0 && npcImmune[num99] == 0 && Main.npc[num99].Hitbox.Intersects(hitbox))
					{
						flag2 = true;
						break;
					}
				}
				if (flag2)
				{
					int num100 = Main.rand.Next(15, 31);
					for (int num101 = 0; num101 < num100; num101++)
					{
						int num102 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100, default(Color), 0.8f);
						Main.dust[num102].velocity *= 1.6f;
						Main.dust[num102].velocity.Y -= 1f;
						Main.dust[num102].velocity += base.velocity;
						Main.dust[num102].noGravity = true;
					}
				}
			}
			if (type == 257 || type == 593)
			{
				if (alpha > 0)
				{
					alpha -= 10;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			if (type == 88)
			{
				if (alpha > 0)
				{
					alpha -= 10;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			if (type == 532)
			{
				ai[0] += 1f;
			}
			bool flag3 = true;
			switch (type)
			{
			case 5:
			case 14:
			case 20:
			case 36:
			case 38:
			case 55:
			case 83:
			case 84:
			case 88:
			case 89:
			case 98:
			case 100:
			case 104:
			case 110:
			case 158:
			case 159:
			case 160:
			case 161:
			case 180:
			case 184:
			case 242:
			case 248:
			case 257:
			case 259:
			case 265:
			case 270:
			case 279:
			case 283:
			case 284:
			case 285:
			case 286:
			case 287:
			case 299:
			case 302:
			case 323:
			case 325:
			case 348:
			case 349:
			case 350:
			case 355:
			case 374:
			case 376:
			case 389:
			case 435:
			case 436:
			case 438:
			case 440:
			case 442:
			case 449:
			case 459:
			case 462:
			case 467:
			case 468:
			case 469:
			case 472:
			case 483:
			case 484:
			case 485:
			case 498:
			case 576:
			case 577:
			case 585:
			case 592:
			case 593:
			case 601:
			case 606:
			case 616:
			case 634:
			case 635:
			case 638:
			case 639:
				flag3 = false;
				break;
			}
			if (flag3)
			{
				ai[0] += 1f;
			}
			if (type == 270)
			{
				int num103 = 0;
				num103 = Player.FindClosest(base.Center, 1, 1);
				ai[1] += 1f;
				if (ai[1] < 110f && ai[1] > 30f)
				{
					float num104 = base.velocity.Length();
					Vector2 value15 = Main.player[num103].Center - base.Center;
					value15.Normalize();
					value15 *= num104;
					base.velocity = (base.velocity * 24f + value15) / 25f;
					base.velocity.Normalize();
					base.velocity *= num104;
				}
				if (ai[0] < 0f)
				{
					if (base.velocity.Length() < 18f)
					{
						base.velocity *= 1.02f;
					}
					if (localAI[0] == 0f)
					{
						localAI[0] = 1f;
						Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 8);
						for (int num105 = 0; num105 < 10; num105++)
						{
							int num106 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 5, base.velocity.X, base.velocity.Y, 0, default(Color), 2f);
							Main.dust[num106].noGravity = true;
							Main.dust[num106].velocity = base.Center - Main.dust[num106].position;
							Main.dust[num106].velocity.Normalize();
							Main.dust[num106].velocity *= -5f;
							Main.dust[num106].velocity += base.velocity / 2f;
						}
					}
					friendly = false;
					hostile = true;
				}
			}
			if (type == 585)
			{
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 8);
					for (int num107 = 0; num107 < 3; num107++)
					{
						int num108 = Dust.NewDust(base.position, width, height, 27, base.velocity.X, base.velocity.Y, 0, default(Color), 2f);
						Main.dust[num108].noGravity = true;
						Main.dust[num108].velocity = base.Center - Main.dust[num108].position;
						Main.dust[num108].velocity.Normalize();
						Main.dust[num108].velocity *= -5f;
						Main.dust[num108].velocity += base.velocity / 2f;
						Main.dust[num108].noLight = true;
					}
				}
				if (alpha > 0)
				{
					alpha -= 50;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				frameCounter++;
				if (frameCounter >= 12)
				{
					frameCounter = 0;
				}
				frame = frameCounter / 2;
				if (frame > 3)
				{
					frame = 6 - frame;
				}
				Vector3 vector8 = NPCID.Sets.MagicAuraColor[54].ToVector3();
				Lighting.AddLight(base.Center, vector8.X, vector8.Y, vector8.Z);
				if (Main.rand.Next(3) == 0)
				{
					int num109 = Dust.NewDust(new Vector2(base.position.X + 4f, base.position.Y + 4f), width - 8, height - 8, 27, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100, default(Color), 2f);
					Main.dust[num109].position -= base.velocity * 2f;
					Main.dust[num109].noLight = true;
					Main.dust[num109].noGravity = true;
					Main.dust[num109].velocity.X *= 0.3f;
					Main.dust[num109].velocity.Y *= 0.3f;
				}
			}
			if (type == 594)
			{
				int num110 = (int)(43f - ai[1]) / 13;
				if (num110 < 1)
				{
					num110 = 1;
				}
				int num111 = (ai[1] < 20f) ? 6 : 31;
				for (int num112 = 0; num112 < num110; num112++)
				{
					int num113 = Dust.NewDust(new Vector2(base.position.X + 4f, base.position.Y + 4f), width - 8, height - 8, num111, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 0, default(Color), 2f);
					Main.dust[num113].position -= base.velocity * 2f;
					Main.dust[num113].noLight = true;
					Main.dust[num113].noGravity = true;
					Main.dust[num113].velocity.X *= 0.3f;
					Main.dust[num113].velocity.Y *= 0.3f;
					if (num111 == 6)
					{
						Main.dust[num113].fadeIn = Main.rand.NextFloat() * 2f;
					}
				}
				ai[1] += 1f;
				if (ai[1] > (float)(43 * MaxUpdates))
				{
					Kill();
					return;
				}
			}
			if (type == 622)
			{
				int num114 = 229;
				if (Main.rand.Next(3) != 0)
				{
					int num115 = Dust.NewDust(new Vector2(base.position.X + 4f, base.position.Y + 4f), width - 8, height - 8, num114, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 0, default(Color), 1.2f);
					Main.dust[num115].position -= base.velocity * 2f;
					Main.dust[num115].noLight = true;
					Main.dust[num115].noGravity = true;
					Main.dust[num115].velocity.X *= 0.3f;
					Main.dust[num115].velocity.Y *= 0.3f;
				}
				ai[1] += 1f;
				if (ai[1] > (float)(23 * MaxUpdates))
				{
					Kill();
					return;
				}
			}
			if (type == 587)
			{
				Color newColor = Main.hslToRgb(ai[1], 1f, 0.5f);
				newColor.A = 200;
				localAI[0] += 1f;
				if (!(localAI[0] < 2f))
				{
					if (localAI[0] == 2f)
					{
						Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 5);
						for (int num116 = 0; num116 < 4; num116++)
						{
							int num117 = Dust.NewDust(base.position, width, height, 76, base.velocity.X, base.velocity.Y, 0, newColor, 1.1f);
							Main.dust[num117].noGravity = true;
							Main.dust[num117].velocity = base.Center - Main.dust[num117].position;
							Main.dust[num117].velocity.Normalize();
							Main.dust[num117].velocity *= -3f;
							Main.dust[num117].velocity += base.velocity / 2f;
						}
					}
					else
					{
						frame++;
						if (frame > 2)
						{
							frame = 0;
						}
						for (int num118 = 0; num118 < 1; num118++)
						{
							int num119 = Dust.NewDust(new Vector2(base.position.X + 4f, base.position.Y + 4f), width - 8, height - 8, 76, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 0, newColor, 0.9f);
							Main.dust[num119].position = base.Center;
							Main.dust[num119].noGravity = true;
							Main.dust[num119].velocity = base.velocity * 0.5f;
						}
					}
				}
			}
			if (type == 349)
			{
				frame = (int)ai[0];
				base.velocity.Y += 0.2f;
				if (localAI[0] == 0f || localAI[0] == 2f)
				{
					scale += 0.01f;
					alpha -= 50;
					if (alpha <= 0)
					{
						localAI[0] = 1f;
						alpha = 0;
					}
				}
				else if (localAI[0] == 1f)
				{
					scale -= 0.01f;
					alpha += 50;
					if (alpha >= 255)
					{
						localAI[0] = 2f;
						alpha = 255;
					}
				}
			}
			if (type == 348)
			{
				if (localAI[1] == 0f)
				{
					localAI[1] = 1f;
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 8);
				}
				if (ai[0] == 0f || ai[0] == 2f)
				{
					scale += 0.01f;
					alpha -= 50;
					if (alpha <= 0)
					{
						ai[0] = 1f;
						alpha = 0;
					}
				}
				else if (ai[0] == 1f)
				{
					scale -= 0.01f;
					alpha += 50;
					if (alpha >= 255)
					{
						ai[0] = 2f;
						alpha = 255;
					}
				}
			}
			if (type == 572)
			{
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 17);
				}
				for (int num120 = 0; num120 < 2; num120++)
				{
					int num121 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 40, base.velocity.X, base.velocity.Y, 100);
					Main.dust[num121].velocity *= 0.5f;
					Main.dust[num121].velocity += base.velocity;
					Main.dust[num121].velocity *= 0.5f;
					Main.dust[num121].noGravity = true;
					Main.dust[num121].scale = 1.2f;
					Main.dust[num121].position = (base.Center + base.position) / 2f;
				}
			}
			if (type == 577)
			{
				Lighting.AddLight(base.Center, 0.1f, 0.3f, 0.4f);
			}
			else if (type == 576)
			{
				Lighting.AddLight(base.Center, 0.4f, 0.2f, 0.4f);
				for (int num122 = 0; num122 < 5; num122++)
				{
					Dust dust4 = Main.dust[Dust.NewDust(base.position, width, height, 242, base.velocity.X, base.velocity.Y, 100)];
					dust4.velocity = Vector2.Zero;
					dust4.position -= base.velocity / 5f * num122;
					dust4.noGravity = true;
					dust4.scale = 0.8f;
					dust4.noLight = true;
				}
			}
			else if (type == 581)
			{
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					Main.PlaySound(2, (int)base.Center.X, (int)base.Center.Y, 17);
				}
				for (int num123 = 0; num123 < 2; num123++)
				{
					int num124 = Utils.SelectRandom<int>(Main.rand, 229, 161, 161);
					Dust dust5 = Main.dust[Dust.NewDust(base.position, width, height, num124, base.velocity.X, base.velocity.Y, 100)];
					dust5.velocity = dust5.velocity / 4f + base.velocity / 2f;
					dust5.noGravity = true;
					dust5.scale = 1.2f;
					dust5.position = base.Center;
					dust5.noLight = true;
				}
			}
			if (type == 299)
			{
				if (localAI[0] == 6f)
				{
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 8);
					for (int num125 = 0; num125 < 40; num125++)
					{
						int num126 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 181, 0f, 0f, 100);
						Main.dust[num126].velocity *= 3f;
						Main.dust[num126].velocity += base.velocity * 0.75f;
						Main.dust[num126].scale *= 1.2f;
						Main.dust[num126].noGravity = true;
					}
				}
				localAI[0] += 1f;
				if (localAI[0] > 6f)
				{
					for (int num127 = 0; num127 < 3; num127++)
					{
						int num128 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 181, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100);
						Main.dust[num128].velocity *= 0.6f;
						Main.dust[num128].scale *= 1.4f;
						Main.dust[num128].noGravity = true;
					}
				}
			}
			else if (type == 270)
			{
				if (ai[0] < 0f)
				{
					alpha = 0;
				}
				if (alpha > 0)
				{
					alpha -= 50;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				frame++;
				if (frame > 2)
				{
					frame = 0;
				}
				if (ai[0] < 0f)
				{
					for (int num129 = 0; num129 < 2; num129++)
					{
						int num130 = Dust.NewDust(new Vector2(base.position.X + 4f, base.position.Y + 4f), width - 8, height - 8, 5, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100, default(Color), 1.5f);
						Main.dust[num130].position -= base.velocity;
						Main.dust[num130].noGravity = true;
						Main.dust[num130].velocity.X *= 0.3f;
						Main.dust[num130].velocity.Y *= 0.3f;
					}
				}
				else
				{
					for (int num131 = 0; num131 < 2; num131++)
					{
						int num132 = Dust.NewDust(new Vector2(base.position.X + 4f, base.position.Y + 4f), width - 8, height - 8, 6, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100, default(Color), 2f);
						Main.dust[num132].position -= base.velocity * 2f;
						Main.dust[num132].noGravity = true;
						Main.dust[num132].velocity.X *= 0.3f;
						Main.dust[num132].velocity.Y *= 0.3f;
					}
				}
			}
			if (type == 259)
			{
				if (alpha > 0)
				{
					alpha -= 10;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			if (type == 265)
			{
				if (alpha > 0)
				{
					alpha -= 50;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (alpha == 0)
				{
					int num133 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 163, base.velocity.X, base.velocity.Y, 100, default(Color), 1.2f);
					Main.dust[num133].noGravity = true;
					Main.dust[num133].velocity *= 0.3f;
					Main.dust[num133].velocity -= base.velocity * 0.4f;
				}
			}
			if (type == 355)
			{
				if (alpha > 0)
				{
					alpha -= 50;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (alpha == 0)
				{
					int num134 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 205, base.velocity.X, base.velocity.Y, 100, default(Color), 1.2f);
					Main.dust[num134].noGravity = true;
					Main.dust[num134].velocity *= 0.3f;
					Main.dust[num134].velocity -= base.velocity * 0.4f;
				}
			}
			if (type == 357)
			{
				if (alpha < 170)
				{
					for (int num135 = 0; num135 < 10; num135++)
					{
						float x = base.position.X - base.velocity.X / 10f * (float)num135;
						float y = base.position.Y - base.velocity.Y / 10f * (float)num135;
						int num136 = Dust.NewDust(new Vector2(x, y), 1, 1, 206);
						Main.dust[num136].alpha = alpha;
						Main.dust[num136].position.X = x;
						Main.dust[num136].position.Y = y;
						Main.dust[num136].velocity *= 0f;
						Main.dust[num136].noGravity = true;
					}
				}
				if (alpha > 0)
				{
					alpha -= 25;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			else if (type == 207)
			{
				if (alpha < 170)
				{
					for (int num137 = 0; num137 < 10; num137++)
					{
						float x2 = base.position.X - base.velocity.X / 10f * (float)num137;
						float y2 = base.position.Y - base.velocity.Y / 10f * (float)num137;
						int num138 = Dust.NewDust(new Vector2(x2, y2), 1, 1, 75);
						Main.dust[num138].alpha = alpha;
						Main.dust[num138].position.X = x2;
						Main.dust[num138].position.Y = y2;
						Main.dust[num138].velocity *= 0f;
						Main.dust[num138].noGravity = true;
					}
				}
				float num139 = (float)Math.Sqrt(base.velocity.X * base.velocity.X + base.velocity.Y * base.velocity.Y);
				float num140 = localAI[0];
				if (num140 == 0f)
				{
					localAI[0] = num139;
					num140 = num139;
				}
				if (alpha > 0)
				{
					alpha -= 25;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				float num141 = base.position.X;
				float num142 = base.position.Y;
				float num143 = 300f;
				bool flag4 = false;
				int num144 = 0;
				if (ai[1] == 0f)
				{
					for (int num145 = 0; num145 < 200; num145++)
					{
						if (Main.npc[num145].CanBeChasedBy(this) && (ai[1] == 0f || ai[1] == (float)(num145 + 1)))
						{
							float num146 = Main.npc[num145].position.X + (float)(Main.npc[num145].width / 2);
							float num147 = Main.npc[num145].position.Y + (float)(Main.npc[num145].height / 2);
							float num148 = Math.Abs(base.position.X + (float)(width / 2) - num146) + Math.Abs(base.position.Y + (float)(height / 2) - num147);
							if (num148 < num143 && Collision.CanHit(new Vector2(base.position.X + (float)(width / 2), base.position.Y + (float)(height / 2)), 1, 1, Main.npc[num145].position, Main.npc[num145].width, Main.npc[num145].height))
							{
								num143 = num148;
								num141 = num146;
								num142 = num147;
								flag4 = true;
								num144 = num145;
							}
						}
					}
					if (flag4)
					{
						ai[1] = num144 + 1;
					}
					flag4 = false;
				}
				if (ai[1] > 0f)
				{
					int num149 = (int)(ai[1] - 1f);
					if (Main.npc[num149].active && Main.npc[num149].CanBeChasedBy(this, true) && !Main.npc[num149].dontTakeDamage)
					{
						float num150 = Main.npc[num149].position.X + (float)(Main.npc[num149].width / 2);
						float num151 = Main.npc[num149].position.Y + (float)(Main.npc[num149].height / 2);
						float num152 = Math.Abs(base.position.X + (float)(width / 2) - num150) + Math.Abs(base.position.Y + (float)(height / 2) - num151);
						if (num152 < 1000f)
						{
							flag4 = true;
							num141 = Main.npc[num149].position.X + (float)(Main.npc[num149].width / 2);
							num142 = Main.npc[num149].position.Y + (float)(Main.npc[num149].height / 2);
						}
					}
					else
					{
						ai[1] = 0f;
					}
				}
				if (!friendly)
				{
					flag4 = false;
				}
				if (flag4)
				{
					float num153 = num140;
					Vector2 vector9 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num154 = num141 - vector9.X;
					float num155 = num142 - vector9.Y;
					float num156 = (float)Math.Sqrt(num154 * num154 + num155 * num155);
					num156 = num153 / num156;
					num154 *= num156;
					num155 *= num156;
					int num157 = 8;
					base.velocity.X = (base.velocity.X * (float)(num157 - 1) + num154) / (float)num157;
					base.velocity.Y = (base.velocity.Y * (float)(num157 - 1) + num155) / (float)num157;
				}
			}
			else if (type == 81 || type == 91)
			{
				if (ai[0] >= 20f)
				{
					ai[0] = 20f;
					base.velocity.Y += 0.07f;
				}
			}
			else if (type == 174 || type == 605)
			{
				if (ai[0] >= 5f)
				{
					ai[0] = 5f;
					base.velocity.Y += 0.15f;
				}
			}
			else if (type == 337)
			{
				if (base.position.Y > Main.player[owner].position.Y - 300f)
				{
					tileCollide = true;
				}
				if ((double)base.position.Y < Main.worldSurface * 16.0)
				{
					tileCollide = true;
				}
				frame = (int)ai[1];
				if (Main.rand.Next(2) == 0)
				{
					int num158 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 197);
					Main.dust[num158].velocity *= 0.5f;
					Main.dust[num158].noGravity = true;
				}
			}
			else if (type == 645)
			{
				if (ai[1] != -1f && base.position.Y > ai[1])
				{
					tileCollide = true;
				}
				if (base.position.HasNaNs())
				{
					Kill();
					return;
				}
				bool flag5 = WorldGen.SolidTile(Framing.GetTileSafely((int)base.position.X / 16, (int)base.position.Y / 16));
				Dust dust6 = Main.dust[Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 229)];
				dust6.position = base.Center;
				dust6.velocity = Vector2.Zero;
				dust6.noGravity = true;
				if (flag5)
				{
					dust6.noLight = true;
				}
				if (ai[1] == -1f)
				{
					ai[0] += 1f;
					base.velocity = Vector2.Zero;
					tileCollide = false;
					penetrate = -1;
					base.position = base.Center;
					width = (height = 140);
					base.Center = base.position;
					alpha -= 10;
					if (alpha < 0)
					{
						alpha = 0;
					}
					if (++frameCounter >= MaxUpdates * 3)
					{
						frameCounter = 0;
						frame++;
					}
					if (ai[0] >= (float)(Main.projFrames[type] * MaxUpdates * 3))
					{
						Kill();
					}
					return;
				}
				alpha = 255;
				if (numUpdates == 0)
				{
					int num159 = -1;
					float num160 = 60f;
					for (int num161 = 0; num161 < 200; num161++)
					{
						NPC nPC = Main.npc[num161];
						if (nPC.CanBeChasedBy(this))
						{
							float num162 = Distance(nPC.Center);
							if (num162 < num160 && Collision.CanHitLine(base.Center, 0, 0, nPC.Center, 0, 0))
							{
								num160 = num162;
								num159 = num161;
							}
						}
					}
					if (num159 != -1)
					{
						ai[0] = 0f;
						ai[1] = -1f;
						netUpdate = true;
						return;
					}
				}
			}
			else if (type >= 424 && type <= 426)
			{
				if (base.position.Y > Main.player[owner].position.Y - 300f)
				{
					tileCollide = true;
				}
				if ((double)base.position.Y < Main.worldSurface * 16.0)
				{
					tileCollide = true;
				}
				scale = ai[1];
				rotation += base.velocity.X * 2f;
				Vector2 position = base.Center + Vector2.Normalize(base.velocity) * 10f;
				Dust dust7 = Main.dust[Dust.NewDust(base.position, width, height, 6)];
				dust7.position = position;
				dust7.velocity = base.velocity.RotatedBy(1.5707963705062866) * 0.33f + base.velocity / 4f;
				dust7.position += base.velocity.RotatedBy(1.5707963705062866);
				dust7.fadeIn = 0.5f;
				dust7.noGravity = true;
				dust7 = Main.dust[Dust.NewDust(base.position, width, height, 6)];
				dust7.position = position;
				dust7.velocity = base.velocity.RotatedBy(-1.5707963705062866) * 0.33f + base.velocity / 4f;
				dust7.position += base.velocity.RotatedBy(-1.5707963705062866);
				dust7.fadeIn = 0.5f;
				dust7.noGravity = true;
				for (int num163 = 0; num163 < 1; num163++)
				{
					int num164 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6);
					Main.dust[num164].velocity *= 0.5f;
					Main.dust[num164].scale *= 1.3f;
					Main.dust[num164].fadeIn = 1f;
					Main.dust[num164].noGravity = true;
				}
			}
			else if (type == 344)
			{
				localAI[1] += 1f;
				if (localAI[1] > 5f)
				{
					alpha -= 50;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				frame = (int)ai[1];
				if (localAI[1] > 20f)
				{
					localAI[1] = 20f;
					base.velocity.Y += 0.15f;
				}
				rotation += Main.windSpeed * 0.2f;
				base.velocity.X += Main.windSpeed * 0.1f;
			}
			else if (type == 336 || type == 345)
			{
				if (type == 345 && localAI[0] == 0f)
				{
					localAI[0] = 1f;
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y);
				}
				if (ai[0] >= 50f)
				{
					ai[0] = 50f;
					base.velocity.Y += 0.5f;
				}
			}
			else if (type == 246)
			{
				alpha -= 20;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (ai[0] >= 60f)
				{
					ai[0] = 60f;
					base.velocity.Y += 0.15f;
				}
			}
			else if (type == 311)
			{
				if (alpha > 0)
				{
					alpha -= 50;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (ai[0] >= 30f)
				{
					ai[0] = 30f;
					if (ai[1] == 0f)
					{
						ai[1] = 1f;
					}
					base.velocity.Y += 0.5f;
				}
			}
			else if (type == 312)
			{
				if (ai[0] >= 5f)
				{
					alpha = 0;
				}
				if (ai[0] >= 20f)
				{
					ai[0] = 30f;
					base.velocity.Y += 0.5f;
				}
			}
			else if (type != 239 && type != 264)
			{
				if (type == 176)
				{
					if (ai[0] >= 15f)
					{
						ai[0] = 15f;
						base.velocity.Y += 0.05f;
					}
				}
				else if (type == 275 || type == 276)
				{
					if (alpha > 0)
					{
						alpha -= 30;
					}
					if (alpha < 0)
					{
						alpha = 0;
					}
					if (ai[0] >= 35f)
					{
						ai[0] = 35f;
						base.velocity.Y += 0.025f;
					}
					if (Main.expertMode)
					{
						float num165 = 18f;
						int num166 = Player.FindClosest(base.Center, 1, 1);
						Vector2 value16 = Main.player[num166].Center - base.Center;
						value16.Normalize();
						value16 *= num165;
						int num167 = 70;
						base.velocity = (base.velocity * (num167 - 1) + value16) / num167;
						if (base.velocity.Length() < 14f)
						{
							base.velocity.Normalize();
							base.velocity *= 14f;
						}
						tileCollide = false;
						if (timeLeft > 180)
						{
							timeLeft = 180;
						}
					}
				}
				else if (type == 172)
				{
					if (ai[0] >= 17f)
					{
						ai[0] = 17f;
						base.velocity.Y += 0.085f;
					}
				}
				else if (type == 117)
				{
					if (ai[0] >= 35f)
					{
						ai[0] = 35f;
						base.velocity.Y += 0.06f;
					}
				}
				else if (type == 120)
				{
					int num168 = Dust.NewDust(new Vector2(base.position.X - base.velocity.X, base.position.Y - base.velocity.Y), width, height, 67, base.velocity.X, base.velocity.Y, 100, default(Color), 1.2f);
					Main.dust[num168].noGravity = true;
					Main.dust[num168].velocity *= 0.3f;
					if (ai[0] >= 30f)
					{
						ai[0] = 30f;
						base.velocity.Y += 0.05f;
					}
				}
				else if (type == 195)
				{
					if (ai[0] >= 20f)
					{
						ai[0] = 20f;
						base.velocity.Y += 0.075f;
						tileCollide = true;
					}
					else
					{
						tileCollide = false;
					}
				}
				else if (type == 267 || type == 477 || type == 478 || type == 479)
				{
					localAI[0] += 1f;
					if (localAI[0] > 3f)
					{
						alpha = 0;
					}
					if (ai[0] >= 20f)
					{
						ai[0] = 20f;
						if (type != 477)
						{
							base.velocity.Y += 0.075f;
						}
					}
					if (type == 479 && Main.myPlayer == owner)
					{
						if (ai[1] >= 0f)
						{
							penetrate = -1;
						}
						else if (penetrate < 0)
						{
							penetrate = 1;
						}
						if (ai[1] >= 0f)
						{
							ai[1] += 1f;
						}
						if (ai[1] > (float)Main.rand.Next(5, 30))
						{
							ai[1] = -1000f;
							float num169 = base.velocity.Length();
							Vector2 velocity = base.velocity;
							velocity.Normalize();
							int num170 = Main.rand.Next(2, 4);
							if (Main.rand.Next(4) == 0)
							{
								num170++;
							}
							for (int num171 = 0; num171 < num170; num171++)
							{
								Vector2 vector10 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
								vector10.Normalize();
								vector10 += velocity * 2f;
								vector10.Normalize();
								vector10 *= num169;
								NewProjectile(base.Center.X, base.Center.Y, vector10.X, vector10.Y, type, damage, knockBack, owner, 0f, -1000f);
							}
						}
					}
					if (type == 478 && Main.myPlayer == owner)
					{
						ai[1] += 1f;
						if (ai[1] > (float)Main.rand.Next(5, 20))
						{
							if (timeLeft > 40)
							{
								timeLeft -= 20;
							}
							ai[1] = 0f;
							NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 480, (int)((double)damage * 0.8), knockBack * 0.5f, owner);
						}
					}
				}
				else if (type == 408)
				{
					if (ai[0] >= 45f)
					{
						ai[0] = 45f;
						base.velocity.Y += 0.05f;
					}
				}
				else if (type == 616)
				{
					if (alpha < 170)
					{
						float num172 = 3f;
						for (int num173 = 0; (float)num173 < num172; num173++)
						{
							int num174 = Dust.NewDust(base.position, 1, 1, 229);
							Main.dust[num174].position = base.Center - base.velocity / num172 * num173;
							Main.dust[num174].velocity *= 0f;
							Main.dust[num174].noGravity = true;
							Main.dust[num174].alpha = 200;
							Main.dust[num174].scale = 0.5f;
						}
					}
					float num175 = (float)Math.Sqrt(base.velocity.X * base.velocity.X + base.velocity.Y * base.velocity.Y);
					float num176 = localAI[0];
					if (num176 == 0f)
					{
						localAI[0] = num175;
						num176 = num175;
					}
					if (alpha > 0)
					{
						alpha -= 25;
					}
					if (alpha < 0)
					{
						alpha = 0;
					}
					float num177 = base.position.X;
					float num178 = base.position.Y;
					float num179 = 800f;
					bool flag6 = false;
					int num180 = 0;
					ai[0] += 1f;
					if (ai[0] > 20f)
					{
						ai[0] -= 1f;
						if (ai[1] == 0f)
						{
							for (int num181 = 0; num181 < 200; num181++)
							{
								if (Main.npc[num181].CanBeChasedBy(this) && (ai[1] == 0f || ai[1] == (float)(num181 + 1)))
								{
									float num182 = Main.npc[num181].position.X + (float)(Main.npc[num181].width / 2);
									float num183 = Main.npc[num181].position.Y + (float)(Main.npc[num181].height / 2);
									float num184 = Math.Abs(base.position.X + (float)(width / 2) - num182) + Math.Abs(base.position.Y + (float)(height / 2) - num183);
									if (num184 < num179 && Collision.CanHit(new Vector2(base.position.X + (float)(width / 2), base.position.Y + (float)(height / 2)), 1, 1, Main.npc[num181].position, Main.npc[num181].width, Main.npc[num181].height))
									{
										num179 = num184;
										num177 = num182;
										num178 = num183;
										flag6 = true;
										num180 = num181;
									}
								}
							}
							if (flag6)
							{
								ai[1] = num180 + 1;
							}
							flag6 = false;
						}
						if (ai[1] != 0f)
						{
							int num185 = (int)(ai[1] - 1f);
							if (Main.npc[num185].active && Main.npc[num185].CanBeChasedBy(this, true))
							{
								float num186 = Main.npc[num185].position.X + (float)(Main.npc[num185].width / 2);
								float num187 = Main.npc[num185].position.Y + (float)(Main.npc[num185].height / 2);
								float num188 = Math.Abs(base.position.X + (float)(width / 2) - num186) + Math.Abs(base.position.Y + (float)(height / 2) - num187);
								if (num188 < 1000f)
								{
									flag6 = true;
									num177 = Main.npc[num185].position.X + (float)(Main.npc[num185].width / 2);
									num178 = Main.npc[num185].position.Y + (float)(Main.npc[num185].height / 2);
								}
							}
						}
						if (!friendly)
						{
							flag6 = false;
						}
						if (flag6)
						{
							float num189 = num176;
							Vector2 vector11 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
							float num190 = num177 - vector11.X;
							float num191 = num178 - vector11.Y;
							float num192 = (float)Math.Sqrt(num190 * num190 + num191 * num191);
							num192 = num189 / num192;
							num190 *= num192;
							num191 *= num192;
							int num193 = 8;
							base.velocity.X = (base.velocity.X * (float)(num193 - 1) + num190) / (float)num193;
							base.velocity.Y = (base.velocity.Y * (float)(num193 - 1) + num191) / (float)num193;
						}
					}
				}
				else if (type == 507 || type == 508)
				{
					if (ai[0] > 45f)
					{
						base.velocity.X *= 0.98f;
						base.velocity.Y += 0.3f;
					}
				}
				else if (type == 495)
				{
					int num194 = Dust.NewDust(new Vector2(base.position.X - base.velocity.X, base.position.Y - base.velocity.Y), width, height, 27, base.velocity.X, base.velocity.Y, 100, default(Color), 1.2f);
					Main.dust[num194].noGravity = true;
					Main.dust[num194].velocity *= 0.3f;
					if (ai[0] >= 30f)
					{
						ai[0] = 30f;
						base.velocity.Y += 0.04f;
					}
				}
				else if (type == 498)
				{
					if (localAI[0] == 0f)
					{
						localAI[0] += 1f;
						Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 17);
					}
					ai[0] += 1f;
					if (ai[0] >= 50f)
					{
						base.velocity.X *= 0.98f;
						base.velocity.Y += 0.15f;
						rotation += (float)direction * 0.5f;
					}
					else
					{
						rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
					}
				}
				else if (type == 437)
				{
					if (ai[0] >= 12f)
					{
						if (ai[0] >= 20f)
						{
							Kill();
						}
						alpha += 30;
					}
				}
				else if (type != 442 && type != 634 && type != 635)
				{
					if (type == 639)
					{
						if (timeLeft <= MaxUpdates * 45 - 14)
						{
							base.velocity.Y += 0.1f;
						}
					}
					else if (ai[0] >= 15f)
					{
						ai[0] = 15f;
						base.velocity.Y += 0.1f;
					}
				}
			}
			if (type == 248)
			{
				if (base.velocity.X < 0f)
				{
					rotation -= (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) * 0.05f;
				}
				else
				{
					rotation += (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) * 0.05f;
				}
			}
			else if (type == 270 || type == 585 || type == 601)
			{
				spriteDirection = direction;
				if (direction < 0)
				{
					rotation = (float)Math.Atan2(0f - base.velocity.Y, 0f - base.velocity.X);
				}
				else
				{
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X);
				}
			}
			else if (type == 311)
			{
				if (ai[1] != 0f)
				{
					rotation += base.velocity.X * 0.1f + (float)Main.rand.Next(-10, 11) * 0.025f;
				}
				else
				{
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
				}
			}
			else if (type == 312)
			{
				rotation += base.velocity.X * 0.02f;
			}
			else if (type == 408)
			{
				rotation = base.velocity.ToRotation();
				if (direction == -1)
				{
					rotation += (float)Math.PI;
				}
			}
			else if (type == 435 || type == 459)
			{
				rotation = base.velocity.ToRotation();
				if (direction == -1)
				{
					rotation += (float)Math.PI;
				}
			}
			else if (type == 436)
			{
				rotation = base.velocity.ToRotation();
				rotation += (float)Math.PI;
				if (direction == -1)
				{
					rotation += (float)Math.PI;
				}
			}
			else if (type == 469)
			{
				if (base.velocity.X > 0f)
				{
					spriteDirection = -1;
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
				}
				else
				{
					spriteDirection = 1;
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
				}
			}
			else if (type == 477)
			{
				if (localAI[1] < 5f)
				{
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
					localAI[1] += 1f;
				}
				else
				{
					rotation = (rotation * 2f + (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f) / 3f;
				}
			}
			else if (type == 532)
			{
				rotation += 0.2f + Math.Abs(base.velocity.X) * 0.1f;
			}
			else if (type == 483)
			{
				rotation += base.velocity.X * 0.05f;
			}
			else if (type == 485)
			{
				Vector2 value17 = new Vector2(ai[0], ai[1]);
				base.velocity = (base.velocity * 39f + value17) / 40f;
				int num195 = Dust.NewDust(base.position, width, height, 6);
				Main.dust[num195].noGravity = true;
				Main.dust[num195].velocity *= 0.2f;
				Main.dust[num195].position = (Main.dust[num195].position + base.Center) / 2f;
				frameCounter++;
				if (frameCounter >= 2)
				{
					frameCounter = 0;
					frame++;
					if (frame >= 5)
					{
						frame = 0;
					}
				}
				if (base.velocity.X < 0f)
				{
					spriteDirection = -1;
					rotation = (float)Math.Atan2(0f - base.velocity.Y, 0f - base.velocity.X);
				}
				else
				{
					spriteDirection = 1;
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X);
				}
			}
			else if (type == 640)
			{
				if (base.velocity != Vector2.Zero)
				{
					rotation = base.velocity.ToRotation() + (float)Math.PI / 2f;
				}
			}
			else if (type != 344 && type != 498)
			{
				rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
			}
			if (base.velocity.Y > 16f)
			{
				base.velocity.Y = 16f;
			}
		}

		private void AI_026()
		{
			if (!Main.player[owner].active)
			{
				active = false;
				return;
			}
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			bool flag4 = false;
			int num = 85;
			if (type == 324)
			{
				num = 120;
			}
			if (type == 112)
			{
				num = 100;
			}
			if (type == 127)
			{
				num = 50;
			}
			if (type >= 191 && type <= 194)
			{
				if (lavaWet)
				{
					ai[0] = 1f;
					ai[1] = 0f;
				}
				num = 60 + 30 * minionPos;
			}
			else if (type == 266)
			{
				num = 60 + 30 * minionPos;
			}
			if (type == 111)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].bunny = false;
				}
				if (Main.player[owner].bunny)
				{
					timeLeft = 2;
				}
			}
			if (type == 112)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].penguin = false;
				}
				if (Main.player[owner].penguin)
				{
					timeLeft = 2;
				}
			}
			if (type == 334)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].puppy = false;
				}
				if (Main.player[owner].puppy)
				{
					timeLeft = 2;
				}
			}
			if (type == 353)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].grinch = false;
				}
				if (Main.player[owner].grinch)
				{
					timeLeft = 2;
				}
			}
			if (type == 127)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].turtle = false;
				}
				if (Main.player[owner].turtle)
				{
					timeLeft = 2;
				}
			}
			if (type == 175)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].eater = false;
				}
				if (Main.player[owner].eater)
				{
					timeLeft = 2;
				}
			}
			if (type == 197)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].skeletron = false;
				}
				if (Main.player[owner].skeletron)
				{
					timeLeft = 2;
				}
			}
			if (type == 198)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].hornet = false;
				}
				if (Main.player[owner].hornet)
				{
					timeLeft = 2;
				}
			}
			if (type == 199)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].tiki = false;
				}
				if (Main.player[owner].tiki)
				{
					timeLeft = 2;
				}
			}
			if (type == 200)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].lizard = false;
				}
				if (Main.player[owner].lizard)
				{
					timeLeft = 2;
				}
			}
			if (type == 208)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].parrot = false;
				}
				if (Main.player[owner].parrot)
				{
					timeLeft = 2;
				}
			}
			if (type == 209)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].truffle = false;
				}
				if (Main.player[owner].truffle)
				{
					timeLeft = 2;
				}
			}
			if (type == 210)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].sapling = false;
				}
				if (Main.player[owner].sapling)
				{
					timeLeft = 2;
				}
			}
			if (type == 324)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].cSapling = false;
				}
				if (Main.player[owner].cSapling)
				{
					timeLeft = 2;
				}
			}
			if (type == 313)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].spider = false;
				}
				if (Main.player[owner].spider)
				{
					timeLeft = 2;
				}
			}
			if (type == 314)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].squashling = false;
				}
				if (Main.player[owner].squashling)
				{
					timeLeft = 2;
				}
			}
			if (type == 211)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].wisp = false;
				}
				if (Main.player[owner].wisp)
				{
					timeLeft = 2;
				}
			}
			if (type == 236)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].dino = false;
				}
				if (Main.player[owner].dino)
				{
					timeLeft = 2;
				}
			}
			if (type == 499)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].babyFaceMonster = false;
				}
				if (Main.player[owner].babyFaceMonster)
				{
					timeLeft = 2;
				}
			}
			if (type == 266)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].slime = false;
				}
				if (Main.player[owner].slime)
				{
					timeLeft = 2;
				}
			}
			if (type == 268)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].eyeSpring = false;
				}
				if (Main.player[owner].eyeSpring)
				{
					timeLeft = 2;
				}
			}
			if (type == 269)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].snowman = false;
				}
				if (Main.player[owner].snowman)
				{
					timeLeft = 2;
				}
			}
			if (type == 319)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].blackCat = false;
				}
				if (Main.player[owner].blackCat)
				{
					timeLeft = 2;
				}
			}
			if (type == 380)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].zephyrfish = false;
				}
				if (Main.player[owner].zephyrfish)
				{
					timeLeft = 2;
				}
			}
			if (type >= 191 && type <= 194)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].pygmy = false;
				}
				if (Main.player[owner].pygmy)
				{
					timeLeft = Main.rand.Next(2, 10);
				}
			}
			if (type >= 390 && type <= 392)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].spiderMinion = false;
				}
				if (Main.player[owner].spiderMinion)
				{
					timeLeft = 2;
				}
			}
			if (type == 398)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].miniMinotaur = false;
				}
				if (Main.player[owner].miniMinotaur)
				{
					timeLeft = 2;
				}
			}
			if ((type >= 191 && type <= 194) || type == 266 || (type >= 390 && type <= 392))
			{
				num = 10;
				int num2 = 40 * (minionPos + 1) * Main.player[owner].direction;
				if (Main.player[owner].position.X + (float)(Main.player[owner].width / 2) < position.X + (float)(width / 2) - (float)num + (float)num2)
				{
					flag = true;
				}
				else if (Main.player[owner].position.X + (float)(Main.player[owner].width / 2) > position.X + (float)(width / 2) + (float)num + (float)num2)
				{
					flag2 = true;
				}
			}
			else if (Main.player[owner].position.X + (float)(Main.player[owner].width / 2) < position.X + (float)(width / 2) - (float)num)
			{
				flag = true;
			}
			else if (Main.player[owner].position.X + (float)(Main.player[owner].width / 2) > position.X + (float)(width / 2) + (float)num)
			{
				flag2 = true;
			}
			if (type == 175)
			{
				float num3 = 0.1f;
				tileCollide = false;
				int num4 = 300;
				Vector2 vector = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num5 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector.X;
				float num6 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector.Y;
				if (type == 127)
				{
					num6 = Main.player[owner].position.Y - vector.Y;
				}
				float num7 = (float)Math.Sqrt(num5 * num5 + num6 * num6);
				float num8 = 7f;
				if (num7 < (float)num4 && Main.player[owner].velocity.Y == 0f && position.Y + (float)height <= Main.player[owner].position.Y + (float)Main.player[owner].height && !Collision.SolidCollision(position, width, height))
				{
					ai[0] = 0f;
					if (velocity.Y < -6f)
					{
						velocity.Y = -6f;
					}
				}
				if (num7 < 150f)
				{
					if (Math.Abs(velocity.X) > 2f || Math.Abs(velocity.Y) > 2f)
					{
						velocity *= 0.99f;
					}
					num3 = 0.01f;
					if (num5 < -2f)
					{
						num5 = -2f;
					}
					if (num5 > 2f)
					{
						num5 = 2f;
					}
					if (num6 < -2f)
					{
						num6 = -2f;
					}
					if (num6 > 2f)
					{
						num6 = 2f;
					}
				}
				else
				{
					if (num7 > 300f)
					{
						num3 = 0.2f;
					}
					num7 = num8 / num7;
					num5 *= num7;
					num6 *= num7;
				}
				if (Math.Abs(num5) > Math.Abs(num6) || num3 == 0.05f)
				{
					if (velocity.X < num5)
					{
						velocity.X += num3;
						if (num3 > 0.05f && velocity.X < 0f)
						{
							velocity.X += num3;
						}
					}
					if (velocity.X > num5)
					{
						velocity.X -= num3;
						if (num3 > 0.05f && velocity.X > 0f)
						{
							velocity.X -= num3;
						}
					}
				}
				if (Math.Abs(num5) <= Math.Abs(num6) || num3 == 0.05f)
				{
					if (velocity.Y < num6)
					{
						velocity.Y += num3;
						if (num3 > 0.05f && velocity.Y < 0f)
						{
							velocity.Y += num3;
						}
					}
					if (velocity.Y > num6)
					{
						velocity.Y -= num3;
						if (num3 > 0.05f && velocity.Y > 0f)
						{
							velocity.Y -= num3;
						}
					}
				}
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) - 1.57f;
				frameCounter++;
				if (frameCounter > 6)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame > 1)
				{
					frame = 0;
				}
				return;
			}
			if (type == 197)
			{
				float num9 = 0.1f;
				tileCollide = false;
				int num10 = 300;
				Vector2 vector2 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num11 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector2.X;
				float num12 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector2.Y;
				if (type == 127)
				{
					num12 = Main.player[owner].position.Y - vector2.Y;
				}
				float num13 = (float)Math.Sqrt(num11 * num11 + num12 * num12);
				float num14 = 3f;
				if (num13 > 500f)
				{
					localAI[0] = 10000f;
				}
				if (localAI[0] >= 10000f)
				{
					num14 = 14f;
				}
				if (num13 < (float)num10 && Main.player[owner].velocity.Y == 0f && position.Y + (float)height <= Main.player[owner].position.Y + (float)Main.player[owner].height && !Collision.SolidCollision(position, width, height))
				{
					ai[0] = 0f;
					if (velocity.Y < -6f)
					{
						velocity.Y = -6f;
					}
				}
				if (num13 < 150f)
				{
					if (Math.Abs(velocity.X) > 2f || Math.Abs(velocity.Y) > 2f)
					{
						velocity *= 0.99f;
					}
					num9 = 0.01f;
					if (num11 < -2f)
					{
						num11 = -2f;
					}
					if (num11 > 2f)
					{
						num11 = 2f;
					}
					if (num12 < -2f)
					{
						num12 = -2f;
					}
					if (num12 > 2f)
					{
						num12 = 2f;
					}
				}
				else
				{
					if (num13 > 300f)
					{
						num9 = 0.2f;
					}
					num13 = num14 / num13;
					num11 *= num13;
					num12 *= num13;
				}
				if (velocity.X < num11)
				{
					velocity.X += num9;
					if (num9 > 0.05f && velocity.X < 0f)
					{
						velocity.X += num9;
					}
				}
				if (velocity.X > num11)
				{
					velocity.X -= num9;
					if (num9 > 0.05f && velocity.X > 0f)
					{
						velocity.X -= num9;
					}
				}
				if (velocity.Y < num12)
				{
					velocity.Y += num9;
					if (num9 > 0.05f && velocity.Y < 0f)
					{
						velocity.Y += num9;
					}
				}
				if (velocity.Y > num12)
				{
					velocity.Y -= num9;
					if (num9 > 0.05f && velocity.Y > 0f)
					{
						velocity.Y -= num9;
					}
				}
				localAI[0] += Main.rand.Next(10);
				if (localAI[0] > 10000f)
				{
					if (localAI[1] == 0f)
					{
						if (velocity.X < 0f)
						{
							localAI[1] = -1f;
						}
						else
						{
							localAI[1] = 1f;
						}
					}
					rotation += 0.25f * localAI[1];
					if (localAI[0] > 12000f)
					{
						localAI[0] = 0f;
					}
				}
				else
				{
					localAI[1] = 0f;
					float num15 = velocity.X * 0.1f;
					if (rotation > num15)
					{
						rotation -= (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.01f;
						if (rotation < num15)
						{
							rotation = num15;
						}
					}
					if (rotation < num15)
					{
						rotation += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.01f;
						if (rotation > num15)
						{
							rotation = num15;
						}
					}
				}
				if ((double)rotation > 6.28)
				{
					rotation -= 6.28f;
				}
				if ((double)rotation < -6.28)
				{
					rotation += 6.28f;
				}
				return;
			}
			if (type == 198 || type == 380)
			{
				float num16 = 0.4f;
				if (type == 380)
				{
					num16 = 0.3f;
				}
				tileCollide = false;
				int num17 = 100;
				Vector2 vector3 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num18 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector3.X;
				float num19 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector3.Y;
				num19 += (float)Main.rand.Next(-10, 21);
				num18 += (float)Main.rand.Next(-10, 21);
				num18 += (float)(60 * -Main.player[owner].direction);
				num19 -= 60f;
				if (type == 127)
				{
					num19 = Main.player[owner].position.Y - vector3.Y;
				}
				float num20 = (float)Math.Sqrt(num18 * num18 + num19 * num19);
				float num21 = 14f;
				if (type == 380)
				{
					num21 = 6f;
				}
				if (num20 < (float)num17 && Main.player[owner].velocity.Y == 0f && position.Y + (float)height <= Main.player[owner].position.Y + (float)Main.player[owner].height && !Collision.SolidCollision(position, width, height))
				{
					ai[0] = 0f;
					if (velocity.Y < -6f)
					{
						velocity.Y = -6f;
					}
				}
				if (num20 < 50f)
				{
					if (Math.Abs(velocity.X) > 2f || Math.Abs(velocity.Y) > 2f)
					{
						velocity *= 0.99f;
					}
					num16 = 0.01f;
				}
				else
				{
					if (type == 380)
					{
						if (num20 < 100f)
						{
							num16 = 0.1f;
						}
						if (num20 > 300f)
						{
							num16 = 0.4f;
						}
					}
					else if (type == 198)
					{
						if (num20 < 100f)
						{
							num16 = 0.1f;
						}
						if (num20 > 300f)
						{
							num16 = 0.6f;
						}
					}
					num20 = num21 / num20;
					num18 *= num20;
					num19 *= num20;
				}
				if (velocity.X < num18)
				{
					velocity.X += num16;
					if (num16 > 0.05f && velocity.X < 0f)
					{
						velocity.X += num16;
					}
				}
				if (velocity.X > num18)
				{
					velocity.X -= num16;
					if (num16 > 0.05f && velocity.X > 0f)
					{
						velocity.X -= num16;
					}
				}
				if (velocity.Y < num19)
				{
					velocity.Y += num16;
					if (num16 > 0.05f && velocity.Y < 0f)
					{
						velocity.Y += num16 * 2f;
					}
				}
				if (velocity.Y > num19)
				{
					velocity.Y -= num16;
					if (num16 > 0.05f && velocity.Y > 0f)
					{
						velocity.Y -= num16 * 2f;
					}
				}
				if ((double)velocity.X > 0.25)
				{
					direction = -1;
				}
				else if ((double)velocity.X < -0.25)
				{
					direction = 1;
				}
				spriteDirection = direction;
				rotation = velocity.X * 0.05f;
				frameCounter++;
				int num22 = 2;
				if (type == 380)
				{
					num22 = 5;
				}
				if (frameCounter > num22)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame > 3)
				{
					frame = 0;
				}
				return;
			}
			if (type == 211)
			{
				float num23 = 0.2f;
				float num24 = 5f;
				tileCollide = false;
				Vector2 vector4 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num25 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector4.X;
				float num26 = Main.player[owner].position.Y + Main.player[owner].gfxOffY + (float)(Main.player[owner].height / 2) - vector4.Y;
				if (Main.player[owner].controlLeft)
				{
					num25 -= 120f;
				}
				else if (Main.player[owner].controlRight)
				{
					num25 += 120f;
				}
				if (Main.player[owner].controlDown)
				{
					num26 += 120f;
				}
				else
				{
					if (Main.player[owner].controlUp)
					{
						num26 -= 120f;
					}
					num26 -= 60f;
				}
				float num27 = (float)Math.Sqrt(num25 * num25 + num26 * num26);
				if (num27 > 1000f)
				{
					position.X += num25;
					position.Y += num26;
				}
				if (localAI[0] == 1f)
				{
					if (num27 < 10f && Math.Abs(Main.player[owner].velocity.X) + Math.Abs(Main.player[owner].velocity.Y) < num24 && Main.player[owner].velocity.Y == 0f)
					{
						localAI[0] = 0f;
					}
					num24 = 12f;
					if (num27 < num24)
					{
						velocity.X = num25;
						velocity.Y = num26;
					}
					else
					{
						num27 = num24 / num27;
						velocity.X = num25 * num27;
						velocity.Y = num26 * num27;
					}
					if ((double)velocity.X > 0.5)
					{
						direction = -1;
					}
					else if ((double)velocity.X < -0.5)
					{
						direction = 1;
					}
					spriteDirection = direction;
					rotation -= (0.2f + Math.Abs(velocity.X) * 0.025f) * (float)direction;
					frameCounter++;
					if (frameCounter > 3)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 5)
					{
						frame = 5;
					}
					if (frame > 9)
					{
						frame = 5;
					}
					for (int i = 0; i < 2; i++)
					{
						int num28 = Dust.NewDust(new Vector2(position.X + 3f, position.Y + 4f), 14, 14, 156);
						Main.dust[num28].velocity *= 0.2f;
						Main.dust[num28].noGravity = true;
						Main.dust[num28].scale = 1.25f;
						Main.dust[num28].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cLight, Main.player[owner]);
					}
					return;
				}
				if (num27 > 200f)
				{
					localAI[0] = 1f;
				}
				if ((double)velocity.X > 0.5)
				{
					direction = -1;
				}
				else if ((double)velocity.X < -0.5)
				{
					direction = 1;
				}
				spriteDirection = direction;
				if (num27 < 10f)
				{
					velocity.X = num25;
					velocity.Y = num26;
					rotation = velocity.X * 0.05f;
					if (num27 < num24)
					{
						position += velocity;
						velocity *= 0f;
						num23 = 0f;
					}
					direction = -Main.player[owner].direction;
				}
				num27 = num24 / num27;
				num25 *= num27;
				num26 *= num27;
				if (velocity.X < num25)
				{
					velocity.X += num23;
					if (velocity.X < 0f)
					{
						velocity.X *= 0.99f;
					}
				}
				if (velocity.X > num25)
				{
					velocity.X -= num23;
					if (velocity.X > 0f)
					{
						velocity.X *= 0.99f;
					}
				}
				if (velocity.Y < num26)
				{
					velocity.Y += num23;
					if (velocity.Y < 0f)
					{
						velocity.Y *= 0.99f;
					}
				}
				if (velocity.Y > num26)
				{
					velocity.Y -= num23;
					if (velocity.Y > 0f)
					{
						velocity.Y *= 0.99f;
					}
				}
				if (velocity.X != 0f || velocity.Y != 0f)
				{
					rotation = velocity.X * 0.05f;
				}
				frameCounter++;
				if (frameCounter > 3)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame > 4)
				{
					frame = 0;
				}
				return;
			}
			if (type == 199)
			{
				float num29 = 0.1f;
				tileCollide = false;
				int num30 = 200;
				Vector2 vector5 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num31 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector5.X;
				float num32 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector5.Y;
				num32 -= 60f;
				num31 -= 2f;
				if (type == 127)
				{
					num32 = Main.player[owner].position.Y - vector5.Y;
				}
				float num33 = (float)Math.Sqrt(num31 * num31 + num32 * num32);
				float num34 = 4f;
				float num35 = num33;
				if (num33 < (float)num30 && Main.player[owner].velocity.Y == 0f && position.Y + (float)height <= Main.player[owner].position.Y + (float)Main.player[owner].height && !Collision.SolidCollision(position, width, height))
				{
					ai[0] = 0f;
					if (velocity.Y < -6f)
					{
						velocity.Y = -6f;
					}
				}
				if (num33 < 4f)
				{
					velocity.X = num31;
					velocity.Y = num32;
					num29 = 0f;
				}
				else
				{
					if (num33 > 350f)
					{
						num29 = 0.2f;
						num34 = 10f;
					}
					num33 = num34 / num33;
					num31 *= num33;
					num32 *= num33;
				}
				if (velocity.X < num31)
				{
					velocity.X += num29;
					if (velocity.X < 0f)
					{
						velocity.X += num29;
					}
				}
				if (velocity.X > num31)
				{
					velocity.X -= num29;
					if (velocity.X > 0f)
					{
						velocity.X -= num29;
					}
				}
				if (velocity.Y < num32)
				{
					velocity.Y += num29;
					if (velocity.Y < 0f)
					{
						velocity.Y += num29;
					}
				}
				if (velocity.Y > num32)
				{
					velocity.Y -= num29;
					if (velocity.Y > 0f)
					{
						velocity.Y -= num29;
					}
				}
				direction = -Main.player[owner].direction;
				spriteDirection = 1;
				rotation = velocity.Y * 0.05f * (float)(-direction);
				if (num35 >= 50f)
				{
					frameCounter++;
					if (frameCounter <= 6)
					{
						return;
					}
					frameCounter = 0;
					if (velocity.X < 0f)
					{
						if (frame < 2)
						{
							frame++;
						}
						if (frame > 2)
						{
							frame--;
						}
					}
					else
					{
						if (frame < 6)
						{
							frame++;
						}
						if (frame > 6)
						{
							frame--;
						}
					}
				}
				else
				{
					frameCounter++;
					if (frameCounter > 6)
					{
						frame += direction;
						frameCounter = 0;
					}
					if (frame > 7)
					{
						frame = 0;
					}
					if (frame < 0)
					{
						frame = 7;
					}
				}
				return;
			}
			if (ai[1] == 0f)
			{
				int num36 = 500;
				if (type == 127)
				{
					num36 = 200;
				}
				if (type == 208)
				{
					num36 = 300;
				}
				if ((type >= 191 && type <= 194) || type == 266 || (type >= 390 && type <= 392))
				{
					num36 += 40 * minionPos;
					if (localAI[0] > 0f)
					{
						num36 += 500;
					}
					if (type == 266 && localAI[0] > 0f)
					{
						num36 += 100;
					}
					if (type >= 390 && type <= 392 && localAI[0] > 0f)
					{
						num36 += 400;
					}
				}
				if (Main.player[owner].rocketDelay2 > 0)
				{
					ai[0] = 1f;
				}
				Vector2 vector6 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num37 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector6.X;
				if (type >= 191)
				{
					int type2 = type;
					int num121 = 194;
				}
				float num38 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector6.Y;
				float num39 = (float)Math.Sqrt(num37 * num37 + num38 * num38);
				if (num39 > 2000f)
				{
					position.X = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - (float)(width / 2);
					position.Y = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - (float)(height / 2);
				}
				else if (num39 > (float)num36 || (Math.Abs(num38) > 300f && (((type < 191 || type > 194) && type != 266 && (type < 390 || type > 392)) || !(localAI[0] > 0f))))
				{
					if (type != 324)
					{
						if (num38 > 0f && velocity.Y < 0f)
						{
							velocity.Y = 0f;
						}
						if (num38 < 0f && velocity.Y > 0f)
						{
							velocity.Y = 0f;
						}
					}
					ai[0] = 1f;
				}
			}
			if (type == 209 && ai[0] != 0f)
			{
				if (Main.player[owner].velocity.Y == 0f && alpha >= 100)
				{
					position.X = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - (float)(width / 2);
					position.Y = Main.player[owner].position.Y + (float)Main.player[owner].height - (float)height;
					ai[0] = 0f;
					return;
				}
				velocity.X = 0f;
				velocity.Y = 0f;
				alpha += 5;
				if (alpha > 255)
				{
					alpha = 255;
				}
				return;
			}
			if (ai[0] != 0f)
			{
				float num40 = 0.2f;
				int num41 = 200;
				if (type == 127)
				{
					num41 = 100;
				}
				if (type >= 191 && type <= 194)
				{
					num40 = 0.5f;
					num41 = 100;
				}
				tileCollide = false;
				Vector2 vector7 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num42 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector7.X;
				if ((type >= 191 && type <= 194) || type == 266 || (type >= 390 && type <= 392))
				{
					num42 -= (float)(40 * Main.player[owner].direction);
					float num43 = 700f;
					if (type >= 191 && type <= 194)
					{
						num43 += 100f;
					}
					bool flag5 = false;
					int num44 = -1;
					for (int j = 0; j < 200; j++)
					{
						if (!Main.npc[j].CanBeChasedBy(this))
						{
							continue;
						}
						float num45 = Main.npc[j].position.X + (float)(Main.npc[j].width / 2);
						float num46 = Main.npc[j].position.Y + (float)(Main.npc[j].height / 2);
						float num47 = Math.Abs(Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - num45) + Math.Abs(Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - num46);
						if (num47 < num43)
						{
							if (Collision.CanHit(position, width, height, Main.npc[j].position, Main.npc[j].width, Main.npc[j].height))
							{
								num44 = j;
							}
							flag5 = true;
							break;
						}
					}
					if (!flag5)
					{
						num42 -= (float)(40 * minionPos * Main.player[owner].direction);
					}
					if (flag5 && num44 >= 0)
					{
						ai[0] = 0f;
					}
				}
				float num48 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector7.Y;
				if (type == 127)
				{
					num48 = Main.player[owner].position.Y - vector7.Y;
				}
				float num49 = (float)Math.Sqrt(num42 * num42 + num48 * num48);
				float num50 = 10f;
				float num51 = num49;
				if (type == 111)
				{
					num50 = 11f;
				}
				if (type == 127)
				{
					num50 = 9f;
				}
				if (type == 324)
				{
					num50 = 20f;
				}
				if (type >= 191 && type <= 194)
				{
					num40 = 0.4f;
					num50 = 12f;
					if (num50 < Math.Abs(Main.player[owner].velocity.X) + Math.Abs(Main.player[owner].velocity.Y))
					{
						num50 = Math.Abs(Main.player[owner].velocity.X) + Math.Abs(Main.player[owner].velocity.Y);
					}
				}
				if (type == 208 && Math.Abs(Main.player[owner].velocity.X) + Math.Abs(Main.player[owner].velocity.Y) > 4f)
				{
					num41 = -1;
				}
				if (num49 < (float)num41 && Main.player[owner].velocity.Y == 0f && position.Y + (float)height <= Main.player[owner].position.Y + (float)Main.player[owner].height && !Collision.SolidCollision(position, width, height))
				{
					ai[0] = 0f;
					if (velocity.Y < -6f)
					{
						velocity.Y = -6f;
					}
				}
				if (num49 < 60f)
				{
					num42 = velocity.X;
					num48 = velocity.Y;
				}
				else
				{
					num49 = num50 / num49;
					num42 *= num49;
					num48 *= num49;
				}
				if (type == 324)
				{
					if (num51 > 1000f)
					{
						if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) < (double)num50 - 1.25)
						{
							velocity *= 1.025f;
						}
						if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) > (double)num50 + 1.25)
						{
							velocity *= 0.975f;
						}
					}
					else if (num51 > 600f)
					{
						if (Math.Abs(velocity.X) + Math.Abs(velocity.Y) < num50 - 1f)
						{
							velocity *= 1.05f;
						}
						if (Math.Abs(velocity.X) + Math.Abs(velocity.Y) > num50 + 1f)
						{
							velocity *= 0.95f;
						}
					}
					else if (num51 > 400f)
					{
						if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) < (double)num50 - 0.5)
						{
							velocity *= 1.075f;
						}
						if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) > (double)num50 + 0.5)
						{
							velocity *= 0.925f;
						}
					}
					else
					{
						if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) < (double)num50 - 0.25)
						{
							velocity *= 1.1f;
						}
						if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) > (double)num50 + 0.25)
						{
							velocity *= 0.9f;
						}
					}
					velocity.X = (velocity.X * 34f + num42) / 35f;
					velocity.Y = (velocity.Y * 34f + num48) / 35f;
				}
				else
				{
					if (velocity.X < num42)
					{
						velocity.X += num40;
						if (velocity.X < 0f)
						{
							velocity.X += num40 * 1.5f;
						}
					}
					if (velocity.X > num42)
					{
						velocity.X -= num40;
						if (velocity.X > 0f)
						{
							velocity.X -= num40 * 1.5f;
						}
					}
					if (velocity.Y < num48)
					{
						velocity.Y += num40;
						if (velocity.Y < 0f)
						{
							velocity.Y += num40 * 1.5f;
						}
					}
					if (velocity.Y > num48)
					{
						velocity.Y -= num40;
						if (velocity.Y > 0f)
						{
							velocity.Y -= num40 * 1.5f;
						}
					}
				}
				if (type == 111)
				{
					frame = 7;
				}
				if (type == 112)
				{
					frame = 2;
				}
				if (type >= 191 && type <= 194 && frame < 12)
				{
					frame = Main.rand.Next(12, 18);
					frameCounter = 0;
				}
				if (type != 313)
				{
					if ((double)velocity.X > 0.5)
					{
						spriteDirection = -1;
					}
					else if ((double)velocity.X < -0.5)
					{
						spriteDirection = 1;
					}
				}
				if (type == 398)
				{
					if ((double)velocity.X > 0.5)
					{
						spriteDirection = 1;
					}
					else if ((double)velocity.X < -0.5)
					{
						spriteDirection = -1;
					}
				}
				if (type == 112)
				{
					if (spriteDirection == -1)
					{
						rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
					}
					else
					{
						rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
					}
				}
				else if (type >= 390 && type <= 392)
				{
					int num52 = (int)(base.Center.X / 16f);
					int num53 = (int)(base.Center.Y / 16f);
					if (Main.tile[num52, num53] != null && Main.tile[num52, num53].wall > 0)
					{
						rotation = velocity.ToRotation() + (float)Math.PI / 2f;
						frameCounter += (int)(Math.Abs(velocity.X) + Math.Abs(velocity.Y));
						if (frameCounter > 5)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 7)
						{
							frame = 4;
						}
						if (frame < 4)
						{
							frame = 7;
						}
					}
					else
					{
						frameCounter++;
						if (frameCounter > 2)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame < 8 || frame > 10)
						{
							frame = 8;
						}
						rotation = velocity.X * 0.1f;
					}
				}
				else if (type == 334)
				{
					frameCounter++;
					if (frameCounter > 1)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 7 || frame > 10)
					{
						frame = 7;
					}
					rotation = velocity.X * 0.1f;
				}
				else if (type == 353)
				{
					frameCounter++;
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 10 || frame > 13)
					{
						frame = 10;
					}
					rotation = velocity.X * 0.05f;
				}
				else if (type == 127)
				{
					frameCounter += 3;
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame <= 5 || frame > 15)
					{
						frame = 6;
					}
					rotation = velocity.X * 0.1f;
				}
				else if (type == 269)
				{
					if (frame == 6)
					{
						frameCounter = 0;
					}
					else if (frame < 4 || frame > 6)
					{
						frameCounter = 0;
						frame = 4;
					}
					else
					{
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
					}
					rotation = velocity.X * 0.05f;
				}
				else if (type == 266)
				{
					frameCounter++;
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 2 || frame > 5)
					{
						frame = 2;
					}
					rotation = velocity.X * 0.1f;
				}
				else if (type == 324)
				{
					frameCounter++;
					if (frameCounter > 1)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 6 || frame > 9)
					{
						frame = 6;
					}
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.58f;
					Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.9f, 0.6f, 0.2f);
					for (int k = 0; k < 2; k++)
					{
						int num54 = 4;
						int num55 = Dust.NewDust(new Vector2(base.Center.X - (float)num54, base.Center.Y - (float)num54) - velocity * 0f, num54 * 2, num54 * 2, 6, 0f, 0f, 100);
						Main.dust[num55].scale *= 1.8f + (float)Main.rand.Next(10) * 0.1f;
						Main.dust[num55].velocity *= 0.2f;
						if (k == 1)
						{
							Main.dust[num55].position -= velocity * 0.5f;
						}
						Main.dust[num55].noGravity = true;
						num55 = Dust.NewDust(new Vector2(base.Center.X - (float)num54, base.Center.Y - (float)num54) - velocity * 0f, num54 * 2, num54 * 2, 31, 0f, 0f, 100, default(Color), 0.5f);
						Main.dust[num55].fadeIn = 1f + (float)Main.rand.Next(5) * 0.1f;
						Main.dust[num55].velocity *= 0.05f;
						if (k == 1)
						{
							Main.dust[num55].position -= velocity * 0.5f;
						}
					}
				}
				else if (type == 268)
				{
					frameCounter++;
					if (frameCounter > 4)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 6 || frame > 7)
					{
						frame = 6;
					}
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.58f;
				}
				else if (type == 200)
				{
					frameCounter += 3;
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame <= 5 || frame > 9)
					{
						frame = 6;
					}
					rotation = velocity.X * 0.1f;
				}
				else if (type == 208)
				{
					rotation = velocity.X * 0.075f;
					frameCounter++;
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 4)
					{
						frame = 1;
					}
					if (frame < 1)
					{
						frame = 1;
					}
				}
				else if (type == 236)
				{
					rotation = velocity.Y * 0.05f * (float)direction;
					if (velocity.Y < 0f)
					{
						frameCounter += 2;
					}
					else
					{
						frameCounter++;
					}
					if (frameCounter >= 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 12)
					{
						frame = 9;
					}
					if (frame < 9)
					{
						frame = 9;
					}
				}
				else if (type == 499)
				{
					rotation = velocity.Y * 0.05f * (float)direction;
					if (velocity.Y < 0f)
					{
						frameCounter += 2;
					}
					else
					{
						frameCounter++;
					}
					if (frameCounter >= 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame >= 12)
					{
						frame = 8;
					}
					if (frame < 8)
					{
						frame = 8;
					}
				}
				else if (type == 314)
				{
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.58f;
					frameCounter++;
					if (frameCounter >= 3)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 12)
					{
						frame = 7;
					}
					if (frame < 7)
					{
						frame = 7;
					}
				}
				else if (type == 319)
				{
					rotation = velocity.X * 0.05f;
					frameCounter++;
					if (frameCounter >= 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 10)
					{
						frame = 6;
					}
					if (frame < 6)
					{
						frame = 6;
					}
				}
				else if (type == 210)
				{
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.58f;
					frameCounter += 3;
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 11)
					{
						frame = 7;
					}
					if (frame < 7)
					{
						frame = 7;
					}
				}
				else if (type == 313)
				{
					position.Y += height;
					height = 54;
					position.Y -= height;
					position.X += width / 2;
					width = 54;
					position.X -= width / 2;
					rotation += velocity.X * 0.01f;
					frameCounter = 0;
					frame = 11;
				}
				else if (type == 398)
				{
					frameCounter++;
					if (frameCounter > 1)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 6 || frame > 9)
					{
						frame = 6;
					}
					rotation = velocity.X * 0.1f;
				}
				else if (spriteDirection == -1)
				{
					rotation = (float)Math.Atan2(velocity.Y, velocity.X);
				}
				else
				{
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 3.14f;
				}
				if ((type < 191 || type > 194) && type != 499 && type != 398 && type != 390 && type != 391 && type != 392 && type != 127 && type != 200 && type != 208 && type != 210 && type != 236 && type != 266 && type != 268 && type != 269 && type != 313 && type != 314 && type != 319 && type != 324 && type != 334 && type != 353)
				{
					int num56 = Dust.NewDust(new Vector2(position.X + (float)(width / 2) - 4f, position.Y + (float)(height / 2) - 4f) - velocity, 8, 8, 16, (0f - velocity.X) * 0.5f, velocity.Y * 0.5f, 50, default(Color), 1.7f);
					Main.dust[num56].velocity.X = Main.dust[num56].velocity.X * 0.2f;
					Main.dust[num56].velocity.Y = Main.dust[num56].velocity.Y * 0.2f;
					Main.dust[num56].noGravity = true;
				}
				return;
			}
			if (type >= 191 && type <= 194)
			{
				float num57 = 40 * minionPos;
				int num58 = 30;
				int num59 = 60;
				localAI[0] -= 1f;
				if (localAI[0] < 0f)
				{
					localAI[0] = 0f;
				}
				if (ai[1] > 0f)
				{
					ai[1] -= 1f;
				}
				else
				{
					float num60 = position.X;
					float num61 = position.Y;
					float num62 = 100000f;
					float num63 = num62;
					int num64 = -1;
					for (int l = 0; l < 200; l++)
					{
						if (!Main.npc[l].CanBeChasedBy(this))
						{
							continue;
						}
						float num65 = Main.npc[l].position.X + (float)(Main.npc[l].width / 2);
						float num66 = Main.npc[l].position.Y + (float)(Main.npc[l].height / 2);
						float num67 = Math.Abs(position.X + (float)(width / 2) - num65) + Math.Abs(position.Y + (float)(height / 2) - num66);
						if (num67 < num62)
						{
							if (num64 == -1 && num67 <= num63)
							{
								num63 = num67;
								num60 = num65;
								num61 = num66;
							}
							if (Collision.CanHit(position, width, height, Main.npc[l].position, Main.npc[l].width, Main.npc[l].height))
							{
								num62 = num67;
								num60 = num65;
								num61 = num66;
								num64 = l;
							}
						}
					}
					if (num64 == -1 && num63 < num62)
					{
						num62 = num63;
					}
					float num68 = 400f;
					if ((double)position.Y > Main.worldSurface * 16.0)
					{
						num68 = 200f;
					}
					if (num62 < num68 + num57 && num64 == -1)
					{
						float num69 = num60 - (position.X + (float)(width / 2));
						if (num69 < -5f)
						{
							flag = true;
							flag2 = false;
						}
						else if (num69 > 5f)
						{
							flag2 = true;
							flag = false;
						}
					}
					else if (num64 >= 0 && num62 < 800f + num57)
					{
						localAI[0] = num59;
						float num70 = num60 - (position.X + (float)(width / 2));
						if (num70 > 300f || num70 < -300f)
						{
							if (num70 < -50f)
							{
								flag = true;
								flag2 = false;
							}
							else if (num70 > 50f)
							{
								flag2 = true;
								flag = false;
							}
						}
						else if (owner == Main.myPlayer)
						{
							ai[1] = num58;
							float num71 = 12f;
							Vector2 vector8 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)(height / 2) - 8f);
							float num72 = num60 - vector8.X + (float)Main.rand.Next(-20, 21);
							float num73 = Math.Abs(num72) * 0.1f;
							num73 = num73 * (float)Main.rand.Next(0, 100) * 0.001f;
							float num74 = num61 - vector8.Y + (float)Main.rand.Next(-20, 21) - num73;
							float num75 = (float)Math.Sqrt(num72 * num72 + num74 * num74);
							num75 = num71 / num75;
							num72 *= num75;
							num74 *= num75;
							int num76 = damage;
							int num77 = 195;
							int num78 = NewProjectile(vector8.X, vector8.Y, num72, num74, num77, num76, knockBack, Main.myPlayer);
							Main.projectile[num78].timeLeft = 300;
							if (num72 < 0f)
							{
								direction = -1;
							}
							if (num72 > 0f)
							{
								direction = 1;
							}
							netUpdate = true;
						}
					}
				}
			}
			bool flag6 = false;
			Vector2 vector9 = Vector2.Zero;
			bool flag7 = false;
			if (type == 266 || (type >= 390 && type <= 392))
			{
				float num79 = 40 * minionPos;
				int num80 = 60;
				localAI[0] -= 1f;
				if (localAI[0] < 0f)
				{
					localAI[0] = 0f;
				}
				if (ai[1] > 0f)
				{
					ai[1] -= 1f;
				}
				else
				{
					float num81 = position.X;
					float num82 = position.Y;
					float num83 = 100000f;
					float num84 = num83;
					int num85 = -1;
					for (int m = 0; m < 200; m++)
					{
						if (!Main.npc[m].CanBeChasedBy(this))
						{
							continue;
						}
						float num86 = Main.npc[m].position.X + (float)(Main.npc[m].width / 2);
						float num87 = Main.npc[m].position.Y + (float)(Main.npc[m].height / 2);
						float num88 = Math.Abs(position.X + (float)(width / 2) - num86) + Math.Abs(position.Y + (float)(height / 2) - num87);
						if (num88 < num83)
						{
							if (num85 == -1 && num88 <= num84)
							{
								num84 = num88;
								num81 = num86;
								num82 = num87;
							}
							if (Collision.CanHit(position, width, height, Main.npc[m].position, Main.npc[m].width, Main.npc[m].height))
							{
								num83 = num88;
								num81 = num86;
								num82 = num87;
								num85 = m;
							}
						}
					}
					if (type >= 390 && type <= 392 && !Collision.SolidCollision(position, width, height))
					{
						tileCollide = true;
					}
					if (num85 == -1 && num84 < num83)
					{
						num83 = num84;
					}
					else if (num85 >= 0)
					{
						flag6 = true;
						vector9 = new Vector2(num81, num82) - base.Center;
						if (type >= 390 && type <= 392)
						{
							if (Main.npc[num85].position.Y > position.Y + (float)height)
							{
								int num89 = (int)(base.Center.X / 16f);
								int num90 = (int)((position.Y + (float)height + 1f) / 16f);
								if (Main.tile[num89, num90] != null && Main.tile[num89, num90].active() && Main.tile[num89, num90].type == 19)
								{
									tileCollide = false;
								}
							}
							Rectangle rectangle = new Rectangle((int)position.X, (int)position.Y, width, height);
							Rectangle value = new Rectangle((int)Main.npc[num85].position.X, (int)Main.npc[num85].position.Y, Main.npc[num85].width, Main.npc[num85].height);
							int num91 = 10;
							value.X -= num91;
							value.Y -= num91;
							value.Width += num91 * 2;
							value.Height += num91 * 2;
							if (rectangle.Intersects(value))
							{
								flag7 = true;
								Vector2 vector10 = Main.npc[num85].Center - base.Center;
								if (velocity.Y > 0f && vector10.Y < 0f)
								{
									velocity.Y *= 0.5f;
								}
								if (velocity.Y < 0f && vector10.Y > 0f)
								{
									velocity.Y *= 0.5f;
								}
								if (velocity.X > 0f && vector10.X < 0f)
								{
									velocity.X *= 0.5f;
								}
								if (velocity.X < 0f && vector10.X > 0f)
								{
									velocity.X *= 0.5f;
								}
								if (vector10.Length() > 14f)
								{
									vector10.Normalize();
									vector10 *= 14f;
								}
								rotation = (rotation * 5f + vector10.ToRotation() + (float)Math.PI / 2f) / 6f;
								velocity = (velocity * 9f + vector10) / 10f;
								for (int n = 0; n < 1000; n++)
								{
									if (whoAmI != n && owner == Main.projectile[n].owner && Main.projectile[n].type >= 390 && Main.projectile[n].type <= 392 && (Main.projectile[n].Center - base.Center).Length() < 15f)
									{
										float num92 = 0.5f;
										if (base.Center.Y > Main.projectile[n].Center.Y)
										{
											Main.projectile[n].velocity.Y -= num92;
											velocity.Y += num92;
										}
										else
										{
											Main.projectile[n].velocity.Y += num92;
											velocity.Y -= num92;
										}
										if (base.Center.X > Main.projectile[n].Center.X)
										{
											velocity.X += num92;
											Main.projectile[n].velocity.X -= num92;
										}
										else
										{
											velocity.X -= num92;
											Main.projectile[n].velocity.Y += num92;
										}
									}
								}
							}
						}
					}
					float num93 = 300f;
					if ((double)position.Y > Main.worldSurface * 16.0)
					{
						num93 = 150f;
					}
					if (type >= 390 && type <= 392)
					{
						num93 = 500f;
						if ((double)position.Y > Main.worldSurface * 16.0)
						{
							num93 = 250f;
						}
					}
					if (num83 < num93 + num79 && num85 == -1)
					{
						float num94 = num81 - (position.X + (float)(width / 2));
						if (num94 < -5f)
						{
							flag = true;
							flag2 = false;
						}
						else if (num94 > 5f)
						{
							flag2 = true;
							flag = false;
						}
					}
					bool flag8 = false;
					if (type >= 390 && type <= 392 && localAI[1] > 0f)
					{
						flag8 = true;
						localAI[1] -= 1f;
					}
					if (num85 >= 0 && num83 < 800f + num79)
					{
						friendly = true;
						localAI[0] = num80;
						float num95 = num81 - (position.X + (float)(width / 2));
						if (num95 < -10f)
						{
							flag = true;
							flag2 = false;
						}
						else if (num95 > 10f)
						{
							flag2 = true;
							flag = false;
						}
						if (num82 < base.Center.Y - 100f && num95 > -50f && num95 < 50f && velocity.Y == 0f)
						{
							float num96 = Math.Abs(num82 - base.Center.Y);
							if (num96 < 120f)
							{
								velocity.Y = -10f;
							}
							else if (num96 < 210f)
							{
								velocity.Y = -13f;
							}
							else if (num96 < 270f)
							{
								velocity.Y = -15f;
							}
							else if (num96 < 310f)
							{
								velocity.Y = -17f;
							}
							else if (num96 < 380f)
							{
								velocity.Y = -18f;
							}
						}
						if (flag8)
						{
							friendly = false;
							if (velocity.X < 0f)
							{
								flag = true;
							}
							else if (velocity.X > 0f)
							{
								flag2 = true;
							}
						}
					}
					else
					{
						friendly = false;
					}
				}
			}
			if (ai[1] != 0f)
			{
				flag = false;
				flag2 = false;
			}
			else if (type >= 191 && type <= 194 && localAI[0] == 0f)
			{
				direction = Main.player[owner].direction;
			}
			else if (type >= 390 && type <= 392)
			{
				int num97 = (int)(base.Center.X / 16f);
				int num98 = (int)(base.Center.Y / 16f);
				if (Main.tile[num97, num98] != null && Main.tile[num97, num98].wall > 0)
				{
					flag = (flag2 = false);
				}
			}
			if (type == 127)
			{
				if ((double)rotation > -0.1 && (double)rotation < 0.1)
				{
					rotation = 0f;
				}
				else if (rotation < 0f)
				{
					rotation += 0.1f;
				}
				else
				{
					rotation -= 0.1f;
				}
			}
			else if (type != 313 && !flag7)
			{
				rotation = 0f;
			}
			if (type < 390 || type > 392)
			{
				tileCollide = true;
			}
			float num99 = 0.08f;
			float num100 = 6.5f;
			if (type == 127)
			{
				num100 = 2f;
				num99 = 0.04f;
			}
			if (type == 112)
			{
				num100 = 6f;
				num99 = 0.06f;
			}
			if (type == 334)
			{
				num100 = 8f;
				num99 = 0.08f;
			}
			if (type == 268)
			{
				num100 = 8f;
				num99 = 0.4f;
			}
			if (type == 324)
			{
				num99 = 0.1f;
				num100 = 3f;
			}
			if ((type >= 191 && type <= 194) || type == 266 || (type >= 390 && type <= 392))
			{
				num100 = 6f;
				num99 = 0.2f;
				if (num100 < Math.Abs(Main.player[owner].velocity.X) + Math.Abs(Main.player[owner].velocity.Y))
				{
					num100 = Math.Abs(Main.player[owner].velocity.X) + Math.Abs(Main.player[owner].velocity.Y);
					num99 = 0.3f;
				}
			}
			if (type >= 390 && type <= 392)
			{
				num99 *= 2f;
			}
			if (flag)
			{
				if ((double)velocity.X > -3.5)
				{
					velocity.X -= num99;
				}
				else
				{
					velocity.X -= num99 * 0.25f;
				}
			}
			else if (flag2)
			{
				if ((double)velocity.X < 3.5)
				{
					velocity.X += num99;
				}
				else
				{
					velocity.X += num99 * 0.25f;
				}
			}
			else
			{
				velocity.X *= 0.9f;
				if (velocity.X >= 0f - num99 && velocity.X <= num99)
				{
					velocity.X = 0f;
				}
			}
			if (type == 208)
			{
				velocity.X *= 0.95f;
				if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
				{
					velocity.X = 0f;
				}
				flag = false;
				flag2 = false;
			}
			if (flag || flag2)
			{
				int num101 = (int)(position.X + (float)(width / 2)) / 16;
				int j2 = (int)(position.Y + (float)(height / 2)) / 16;
				if (type == 236)
				{
					num101 += direction;
				}
				if (flag)
				{
					num101--;
				}
				if (flag2)
				{
					num101++;
				}
				num101 += (int)velocity.X;
				if (WorldGen.SolidTile(num101, j2))
				{
					flag4 = true;
				}
			}
			if (Main.player[owner].position.Y + (float)Main.player[owner].height - 8f > position.Y + (float)height)
			{
				flag3 = true;
			}
			if (type == 268 && frameCounter < 10)
			{
				flag4 = false;
			}
			Collision.StepUp(ref position, ref velocity, width, height, ref stepSpeed, ref gfxOffY);
			if (velocity.Y == 0f || type == 200)
			{
				if (!flag3 && (velocity.X < 0f || velocity.X > 0f))
				{
					int num102 = (int)(position.X + (float)(width / 2)) / 16;
					int j3 = (int)(position.Y + (float)(height / 2)) / 16 + 1;
					if (flag)
					{
						num102--;
					}
					if (flag2)
					{
						num102++;
					}
					WorldGen.SolidTile(num102, j3);
				}
				if (flag4)
				{
					int num103 = (int)(position.X + (float)(width / 2)) / 16;
					int num104 = (int)(position.Y + (float)height) / 16 + 1;
					if (WorldGen.SolidTile(num103, num104) || Main.tile[num103, num104].halfBrick() || Main.tile[num103, num104].slope() > 0 || type == 200)
					{
						if (type == 200)
						{
							velocity.Y = -3.1f;
						}
						else
						{
							try
							{
								num103 = (int)(position.X + (float)(width / 2)) / 16;
								num104 = (int)(position.Y + (float)(height / 2)) / 16;
								if (flag)
								{
									num103--;
								}
								if (flag2)
								{
									num103++;
								}
								num103 += (int)velocity.X;
								if (!WorldGen.SolidTile(num103, num104 - 1) && !WorldGen.SolidTile(num103, num104 - 2))
								{
									velocity.Y = -5.1f;
								}
								else if (!WorldGen.SolidTile(num103, num104 - 2))
								{
									velocity.Y = -7.1f;
								}
								else if (WorldGen.SolidTile(num103, num104 - 5))
								{
									velocity.Y = -11.1f;
								}
								else if (WorldGen.SolidTile(num103, num104 - 4))
								{
									velocity.Y = -10.1f;
								}
								else
								{
									velocity.Y = -9.1f;
								}
							}
							catch
							{
								velocity.Y = -9.1f;
							}
						}
						if (type == 127)
						{
							ai[0] = 1f;
						}
					}
				}
				else if (type == 266 && (flag || flag2))
				{
					velocity.Y -= 6f;
				}
			}
			if (velocity.X > num100)
			{
				velocity.X = num100;
			}
			if (velocity.X < 0f - num100)
			{
				velocity.X = 0f - num100;
			}
			if (velocity.X < 0f)
			{
				direction = -1;
			}
			if (velocity.X > 0f)
			{
				direction = 1;
			}
			if (velocity.X > num99 && flag2)
			{
				direction = 1;
			}
			if (velocity.X < 0f - num99 && flag)
			{
				direction = -1;
			}
			if (type != 313)
			{
				if (direction == -1)
				{
					spriteDirection = 1;
				}
				if (direction == 1)
				{
					spriteDirection = -1;
				}
			}
			if (type == 398)
			{
				spriteDirection = direction;
			}
			if (type >= 191 && type <= 194)
			{
				if (ai[1] > 0f)
				{
					if (localAI[1] == 0f)
					{
						localAI[1] = 1f;
						frame = 1;
					}
					if (frame != 0)
					{
						frameCounter++;
						if (frameCounter > 4)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame == 4)
						{
							frame = 0;
						}
					}
				}
				else if (velocity.Y == 0f)
				{
					localAI[1] = 0f;
					if (velocity.X == 0f)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame < 5)
						{
							frame = 5;
						}
						if (frame >= 11)
						{
							frame = 5;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else if (velocity.Y < 0f)
				{
					frameCounter = 0;
					frame = 4;
				}
				else if (velocity.Y > 0f)
				{
					frameCounter = 0;
					frame = 4;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
				float y = velocity.Y;
			}
			else if (type == 268)
			{
				if (velocity.Y == 0f)
				{
					if (frame > 5)
					{
						frameCounter = 0;
					}
					if (velocity.X == 0f)
					{
						int num105 = 3;
						frameCounter++;
						if (frameCounter < num105)
						{
							frame = 0;
						}
						else if (frameCounter < num105 * 2)
						{
							frame = 1;
						}
						else if (frameCounter < num105 * 3)
						{
							frame = 2;
						}
						else if (frameCounter < num105 * 4)
						{
							frame = 3;
						}
						else
						{
							frameCounter = num105 * 4;
						}
					}
					else
					{
						velocity.X *= 0.8f;
						frameCounter++;
						int num106 = 3;
						if (frameCounter < num106)
						{
							frame = 0;
						}
						else if (frameCounter < num106 * 2)
						{
							frame = 1;
						}
						else if (frameCounter < num106 * 3)
						{
							frame = 2;
						}
						else if (frameCounter < num106 * 4)
						{
							frame = 3;
						}
						else if (flag || flag2)
						{
							velocity.X *= 2f;
							frame = 4;
							velocity.Y = -6.1f;
							frameCounter = 0;
							for (int num107 = 0; num107 < 4; num107++)
							{
								int num108 = Dust.NewDust(new Vector2(position.X, position.Y + (float)height - 2f), width, 4, 5);
								Main.dust[num108].velocity += velocity;
								Main.dust[num108].velocity *= 0.4f;
							}
						}
						else
						{
							frameCounter = num106 * 4;
						}
					}
				}
				else if (velocity.Y < 0f)
				{
					frameCounter = 0;
					frame = 5;
				}
				else
				{
					frame = 4;
					frameCounter = 3;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 269)
			{
				if (velocity.Y >= 0f && (double)velocity.Y <= 0.8)
				{
					if (velocity.X == 0f)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
					{
						int num109 = Dust.NewDust(new Vector2(position.X, position.Y + (float)height - 2f), width, 6, 76);
						Main.dust[num109].noGravity = true;
						Main.dust[num109].velocity *= 0.3f;
						Main.dust[num109].noLight = true;
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 3)
						{
							frame = 0;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else
				{
					frameCounter = 0;
					frame = 2;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 313)
			{
				int num110 = (int)(base.Center.X / 16f);
				int num111 = (int)(base.Center.Y / 16f);
				if (Main.tile[num110, num111] != null && Main.tile[num110, num111].wall > 0)
				{
					position.Y += height;
					height = 34;
					position.Y -= height;
					position.X += width / 2;
					width = 34;
					position.X -= width / 2;
					float num112 = 4f;
					Vector2 vector11 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num113 = Main.player[owner].Center.X - vector11.X;
					float num114 = Main.player[owner].Center.Y - vector11.Y;
					float num115 = (float)Math.Sqrt(num113 * num113 + num114 * num114);
					float num116 = num112 / num115;
					num113 *= num116;
					num114 *= num116;
					if (num115 < 120f)
					{
						velocity.X *= 0.9f;
						velocity.Y *= 0.9f;
						if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) < 0.1)
						{
							velocity *= 0f;
						}
					}
					else
					{
						velocity.X = (velocity.X * 9f + num113) / 10f;
						velocity.Y = (velocity.Y * 9f + num114) / 10f;
					}
					if (num115 >= 120f)
					{
						spriteDirection = direction;
						rotation = (float)Math.Atan2(velocity.Y * (float)(-direction), velocity.X * (float)(-direction));
					}
					frameCounter += (int)(Math.Abs(velocity.X) + Math.Abs(velocity.Y));
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 10)
					{
						frame = 5;
					}
					if (frame < 5)
					{
						frame = 10;
					}
					return;
				}
				rotation = 0f;
				if (direction == -1)
				{
					spriteDirection = 1;
				}
				if (direction == 1)
				{
					spriteDirection = -1;
				}
				position.Y += height;
				height = 30;
				position.Y -= height;
				position.X += width / 2;
				width = 30;
				position.X -= width / 2;
				if (velocity.Y >= 0f && (double)velocity.Y <= 0.8)
				{
					if (velocity.X == 0f)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 3)
						{
							frame = 0;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else
				{
					frameCounter = 0;
					frame = 4;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type >= 390 && type <= 392)
			{
				int num117 = (int)(base.Center.X / 16f);
				int num118 = (int)(base.Center.Y / 16f);
				if (Main.tile[num117, num118] != null && Main.tile[num117, num118].wall > 0)
				{
					position.Y += height;
					height = 34;
					position.Y -= height;
					position.X += width / 2;
					width = 34;
					position.X -= width / 2;
					float scaleFactor = 9f;
					float num119 = 40 * (minionPos + 1);
					Vector2 vector12 = Main.player[owner].Center - base.Center;
					if (flag6)
					{
						vector12 = vector9;
						num119 = 10f;
					}
					else if (!Collision.CanHitLine(base.Center, 1, 1, Main.player[owner].Center, 1, 1))
					{
						ai[0] = 1f;
					}
					if (vector12.Length() < num119)
					{
						velocity *= 0.9f;
						if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) < 0.1)
						{
							velocity *= 0f;
						}
					}
					else if (vector12.Length() < 800f || !flag6)
					{
						velocity = (velocity * 9f + Vector2.Normalize(vector12) * scaleFactor) / 10f;
					}
					if (vector12.Length() >= num119)
					{
						spriteDirection = direction;
						rotation = velocity.ToRotation() + (float)Math.PI / 2f;
					}
					else
					{
						rotation = vector12.ToRotation() + (float)Math.PI / 2f;
					}
					frameCounter += (int)(Math.Abs(velocity.X) + Math.Abs(velocity.Y));
					if (frameCounter > 5)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 7)
					{
						frame = 4;
					}
					if (frame < 4)
					{
						frame = 7;
					}
					return;
				}
				if (!flag7)
				{
					rotation = 0f;
				}
				if (direction == -1)
				{
					spriteDirection = 1;
				}
				if (direction == 1)
				{
					spriteDirection = -1;
				}
				position.Y += height;
				height = 30;
				position.Y -= height;
				position.X += width / 2;
				width = 30;
				position.X -= width / 2;
				if (!flag6 && !Collision.CanHitLine(base.Center, 1, 1, Main.player[owner].Center, 1, 1))
				{
					ai[0] = 1f;
				}
				if (!flag7 && frame >= 4 && frame <= 7)
				{
					Vector2 vector13 = Main.player[owner].Center - base.Center;
					if (flag6)
					{
						vector13 = vector9;
					}
					float num120 = 0f - vector13.Y;
					if (!(vector13.Y > 0f))
					{
						if (num120 < 120f)
						{
							velocity.Y = -10f;
						}
						else if (num120 < 210f)
						{
							velocity.Y = -13f;
						}
						else if (num120 < 270f)
						{
							velocity.Y = -15f;
						}
						else if (num120 < 310f)
						{
							velocity.Y = -17f;
						}
						else if (num120 < 380f)
						{
							velocity.Y = -18f;
						}
					}
				}
				if (flag7)
				{
					frameCounter++;
					if (frameCounter > 3)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame >= 8)
					{
						frame = 4;
					}
					if (frame <= 3)
					{
						frame = 7;
					}
				}
				else if (velocity.Y >= 0f && (double)velocity.Y <= 0.8)
				{
					if (velocity.X == 0f)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 5)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 2)
						{
							frame = 0;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else
				{
					frameCounter = 0;
					frame = 3;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 314)
			{
				if (velocity.Y >= 0f && (double)velocity.Y <= 0.8)
				{
					if (velocity.X == 0f)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 6)
						{
							frame = 1;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else
				{
					frameCounter = 0;
					frame = 7;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 319)
			{
				if (velocity.Y >= 0f && (double)velocity.Y <= 0.8)
				{
					if (velocity.X == 0f)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 8)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 5)
						{
							frame = 2;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else
				{
					frameCounter = 0;
					frame = 1;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 236)
			{
				if (velocity.Y >= 0f && (double)velocity.Y <= 0.8)
				{
					if (velocity.X == 0f)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
					{
						if (frame < 2)
						{
							frame = 2;
						}
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 8)
						{
							frame = 2;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else
				{
					frameCounter = 0;
					frame = 1;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 499)
			{
				if (velocity.Y >= 0f && (double)velocity.Y <= 0.8)
				{
					if (velocity.X == 0f)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
					{
						if (frame < 2)
						{
							frame = 2;
						}
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame >= 8)
						{
							frame = 2;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else
				{
					frameCounter = 0;
					frame = 1;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 266)
			{
				if (velocity.Y >= 0f && (double)velocity.Y <= 0.8)
				{
					if (velocity.X == 0f)
					{
						frameCounter++;
					}
					else
					{
						frameCounter += 3;
					}
				}
				else
				{
					frameCounter += 5;
				}
				if (frameCounter >= 20)
				{
					frameCounter -= 20;
					frame++;
				}
				if (frame > 1)
				{
					frame = 0;
				}
				if (wet && Main.player[owner].position.Y + (float)Main.player[owner].height < position.Y + (float)height && localAI[0] == 0f)
				{
					if (velocity.Y > -4f)
					{
						velocity.Y -= 0.2f;
					}
					if (velocity.Y > 0f)
					{
						velocity.Y *= 0.95f;
					}
				}
				else
				{
					velocity.Y += 0.4f;
				}
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 334)
			{
				if (velocity.Y == 0f)
				{
					if (velocity.X == 0f)
					{
						if (frame > 0)
						{
							frameCounter += 2;
							if (frameCounter > 6)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame >= 7)
							{
								frame = 0;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
					{
						frameCounter += (int)Math.Abs((double)velocity.X * 0.75);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame >= 7 || frame < 1)
						{
							frame = 1;
						}
					}
					else if (frame > 0)
					{
						frameCounter += 2;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame >= 7)
						{
							frame = 0;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else if (velocity.Y < 0f)
				{
					frameCounter = 0;
					frame = 2;
				}
				else if (velocity.Y > 0f)
				{
					frameCounter = 0;
					frame = 4;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 353)
			{
				if (velocity.Y == 0f)
				{
					if (velocity.X == 0f)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 9)
						{
							frame = 2;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else if (velocity.Y < 0f)
				{
					frameCounter = 0;
					frame = 1;
				}
				else if (velocity.Y > 0f)
				{
					frameCounter = 0;
					frame = 1;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 111)
			{
				if (velocity.Y == 0f)
				{
					if (velocity.X == 0f)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame >= 7)
						{
							frame = 0;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else if (velocity.Y < 0f)
				{
					frameCounter = 0;
					frame = 4;
				}
				else if (velocity.Y > 0f)
				{
					frameCounter = 0;
					frame = 6;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 112)
			{
				if (velocity.Y == 0f)
				{
					if (velocity.X == 0f)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame >= 3)
						{
							frame = 0;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else if (velocity.Y < 0f)
				{
					frameCounter = 0;
					frame = 2;
				}
				else if (velocity.Y > 0f)
				{
					frameCounter = 0;
					frame = 2;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 127)
			{
				if (velocity.Y == 0f)
				{
					if (velocity.X == 0f)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.1 || (double)velocity.X > 0.1)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 5)
						{
							frame = 0;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else
				{
					frame = 0;
					frameCounter = 0;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 200)
			{
				if (velocity.Y == 0f)
				{
					if (velocity.X == 0f)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.1 || (double)velocity.X > 0.1)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 5)
						{
							frame = 0;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else
				{
					rotation = velocity.X * 0.1f;
					frameCounter++;
					if (velocity.Y < 0f)
					{
						frameCounter += 2;
					}
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 9)
					{
						frame = 6;
					}
					if (frame < 6)
					{
						frame = 6;
					}
				}
				velocity.Y += 0.1f;
				if (velocity.Y > 4f)
				{
					velocity.Y = 4f;
				}
			}
			else if (type == 208)
			{
				if (velocity.Y == 0f && velocity.X == 0f)
				{
					if (Main.player[owner].position.X + (float)(Main.player[owner].width / 2) < position.X + (float)(width / 2))
					{
						direction = -1;
					}
					else if (Main.player[owner].position.X + (float)(Main.player[owner].width / 2) > position.X + (float)(width / 2))
					{
						direction = 1;
					}
					rotation = 0f;
					frame = 0;
				}
				else
				{
					rotation = velocity.X * 0.075f;
					frameCounter++;
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 4)
					{
						frame = 1;
					}
					if (frame < 1)
					{
						frame = 1;
					}
				}
				velocity.Y += 0.1f;
				if (velocity.Y > 4f)
				{
					velocity.Y = 4f;
				}
			}
			else if (type == 209)
			{
				if (alpha > 0)
				{
					alpha -= 5;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				if (velocity.Y == 0f)
				{
					if (velocity.X == 0f)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.1 || (double)velocity.X > 0.1)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 11)
						{
							frame = 2;
						}
						if (frame < 2)
						{
							frame = 2;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else
				{
					frame = 1;
					frameCounter = 0;
					rotation = 0f;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 324)
			{
				if (velocity.Y == 0f)
				{
					if ((double)velocity.X < -0.1 || (double)velocity.X > 0.1)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 5)
						{
							frame = 2;
						}
						if (frame < 2)
						{
							frame = 2;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else
				{
					frameCounter = 0;
					frame = 1;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 14f)
				{
					velocity.Y = 14f;
				}
			}
			else if (type == 210)
			{
				if (velocity.Y == 0f)
				{
					if ((double)velocity.X < -0.1 || (double)velocity.X > 0.1)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 6)
						{
							frame = 0;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else
				{
					rotation = velocity.X * 0.05f;
					frameCounter++;
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 11)
					{
						frame = 7;
					}
					if (frame < 7)
					{
						frame = 7;
					}
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else
			{
				if (type != 398)
				{
					return;
				}
				if (velocity.Y == 0f)
				{
					if (velocity.X == 0f)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame >= 5)
						{
							frame = 0;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else if (velocity.Y != 0f)
				{
					frameCounter = 0;
					frame = 5;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
		}

		private void AI_062()
		{
			if (type == 373)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].hornetMinion = false;
				}
				if (Main.player[owner].hornetMinion)
				{
					timeLeft = 2;
				}
			}
			if (type == 375)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].impMinion = false;
				}
				if (Main.player[owner].impMinion)
				{
					timeLeft = 2;
				}
			}
			if (type == 407)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].sharknadoMinion = false;
				}
				if (Main.player[owner].sharknadoMinion)
				{
					timeLeft = 2;
				}
			}
			if (type == 423)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].UFOMinion = false;
				}
				if (Main.player[owner].UFOMinion)
				{
					timeLeft = 2;
				}
			}
			if (type == 613)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].stardustMinion = false;
				}
				if (Main.player[owner].stardustMinion)
				{
					timeLeft = 2;
				}
				Lighting.AddLight(base.Center, 0.2f, 0.6f, 0.7f);
				if (localAI[1] > 0f)
				{
					localAI[1] -= 1f;
				}
			}
			if (type == 423)
			{
				if (ai[0] == 2f)
				{
					ai[1] -= 1f;
					tileCollide = false;
					if (ai[1] > 3f)
					{
						int num = Dust.NewDust(base.Center, 0, 0, 220 + Main.rand.Next(2), velocity.X, velocity.Y, 100);
						Main.dust[num].scale = 0.5f + (float)Main.rand.NextDouble() * 0.3f;
						Main.dust[num].velocity /= 2.5f;
						Main.dust[num].noGravity = true;
						Main.dust[num].noLight = true;
						Main.dust[num].frame.Y = 80;
					}
					if (ai[1] != 0f)
					{
						return;
					}
					ai[1] = 30f;
					ai[0] = 0f;
					velocity /= 5f;
					velocity.Y = 0f;
					extraUpdates = 0;
					numUpdates = 0;
					netUpdate = true;
					extraUpdates = 0;
					numUpdates = 0;
				}
				if (extraUpdates > 1)
				{
					extraUpdates = 0;
				}
				if (numUpdates > 1)
				{
					numUpdates = 0;
				}
			}
			if (type == 613)
			{
				if (ai[0] == 2f)
				{
					ai[1] -= 1f;
					tileCollide = false;
					if (ai[1] > 3f)
					{
						if (numUpdates < 20)
						{
							for (int i = 0; i < 3; i++)
							{
								Dust dust = Main.dust[Dust.NewDust(position, width, height, 229)];
								dust.noGravity = true;
								dust.position = base.Center;
								dust.velocity *= 3f;
								dust.velocity += velocity * 3f;
								dust.fadeIn = 1f;
							}
						}
						float num2 = 2f - (float)numUpdates / 30f;
						if (scale > 0f)
						{
							float num3 = 2f;
							for (int j = 0; (float)j < num3; j++)
							{
								Dust dust2 = Main.dust[Dust.NewDust(position, width, height, 229)];
								dust2.noGravity = true;
								dust2.position = base.Center + Vector2.UnitY.RotatedBy((float)numUpdates * ((float)Math.PI / 30f) + (float)whoAmI * ((float)Math.PI / 4f) + (float)Math.PI / 2f) * (height / 2) - velocity * ((float)j / num3);
								dust2.velocity = velocity / 3f;
								dust2.fadeIn = num2 / 2f;
								dust2.scale = num2;
							}
						}
					}
					if (ai[1] != 0f)
					{
						return;
					}
					ai[1] = 30f;
					ai[0] = 0f;
					velocity /= 5f;
					velocity.Y = 0f;
					extraUpdates = 0;
					numUpdates = 0;
					netUpdate = true;
					float num4 = 15f;
					for (int k = 0; (float)k < num4; k++)
					{
						Dust dust3 = Main.dust[Dust.NewDust(position, width, height, 229)];
						dust3.noGravity = true;
						dust3.position = base.Center - velocity * 5f;
						dust3.velocity *= 3f;
						dust3.velocity += velocity * 3f;
						dust3.fadeIn = 1f;
						if (Main.rand.Next(3) != 0)
						{
							dust3.fadeIn = 2f;
							dust3.scale = 2f;
							dust3.velocity /= 8f;
						}
					}
					for (int l = 0; (float)l < num4; l++)
					{
						Dust dust4 = Main.dust[Dust.NewDust(position, width, height, 229)];
						dust4.noGravity = true;
						dust4.position = base.Center;
						dust4.velocity *= 3f;
						dust4.velocity += velocity * 3f;
						dust4.fadeIn = 1f;
						if (Main.rand.Next(3) != 0)
						{
							dust4.fadeIn = 2f;
							dust4.scale = 2f;
							dust4.velocity /= 8f;
						}
					}
					extraUpdates = 0;
					numUpdates = 0;
				}
				if (extraUpdates > 1)
				{
					extraUpdates = 0;
				}
				if (numUpdates > 1)
				{
					numUpdates = 0;
				}
			}
			if (type == 423 && localAI[0] > 0f)
			{
				localAI[0] -= 1f;
			}
			if (type == 613 && localAI[0] > 0f)
			{
				localAI[0] -= 1f;
			}
			float num5 = 0.05f;
			float num6 = width;
			if (type == 407)
			{
				num5 = 0.1f;
				num6 *= 2f;
			}
			for (int m = 0; m < 1000; m++)
			{
				if (m != whoAmI && Main.projectile[m].active && Main.projectile[m].owner == owner && Main.projectile[m].type == type && Math.Abs(position.X - Main.projectile[m].position.X) + Math.Abs(position.Y - Main.projectile[m].position.Y) < num6)
				{
					if (position.X < Main.projectile[m].position.X)
					{
						velocity.X -= num5;
					}
					else
					{
						velocity.X += num5;
					}
					if (position.Y < Main.projectile[m].position.Y)
					{
						velocity.Y -= num5;
					}
					else
					{
						velocity.Y += num5;
					}
				}
			}
			Vector2 vector = position;
			float num7 = 400f;
			if (type == 423)
			{
				num7 = 300f;
			}
			if (type == 613)
			{
				num7 = 300f;
			}
			bool flag = false;
			int num8 = -1;
			tileCollide = true;
			if (type == 407)
			{
				tileCollide = false;
				if (Collision.SolidCollision(position, width, height))
				{
					alpha += 20;
					if (alpha > 150)
					{
						alpha = 150;
					}
				}
				else
				{
					alpha -= 50;
					if (alpha < 60)
					{
						alpha = 60;
					}
				}
			}
			if (type == 407 || type == 613 || type == 423)
			{
				Vector2 center = Main.player[owner].Center;
				Vector2 value = new Vector2(0.5f);
				if (type == 423)
				{
					value.Y = 0f;
				}
				for (int n = 0; n < 200; n++)
				{
					NPC nPC = Main.npc[n];
					if (nPC.CanBeChasedBy(this))
					{
						Vector2 vector2 = nPC.position + nPC.Size * value;
						float num9 = Vector2.Distance(vector2, center);
						if (((Vector2.Distance(center, vector) > num9 && num9 < num7) || !flag) && Collision.CanHitLine(position, width, height, nPC.position, nPC.width, nPC.height))
						{
							num7 = num9;
							vector = vector2;
							flag = true;
							num8 = n;
						}
					}
				}
			}
			else
			{
				for (int num10 = 0; num10 < 200; num10++)
				{
					NPC nPC2 = Main.npc[num10];
					if (nPC2.CanBeChasedBy(this))
					{
						float num11 = Vector2.Distance(nPC2.Center, base.Center);
						if (((Vector2.Distance(base.Center, vector) > num11 && num11 < num7) || !flag) && Collision.CanHitLine(position, width, height, nPC2.position, nPC2.width, nPC2.height))
						{
							num7 = num11;
							vector = nPC2.Center;
							flag = true;
							num8 = num10;
						}
					}
				}
			}
			int num12 = 500;
			if (flag)
			{
				num12 = 1000;
			}
			if (flag && type == 423)
			{
				num12 = 1200;
			}
			if (flag && type == 613)
			{
				num12 = 1350;
			}
			Player player = Main.player[owner];
			float num13 = Vector2.Distance(player.Center, base.Center);
			if (num13 > (float)num12)
			{
				ai[0] = 1f;
				netUpdate = true;
			}
			if (ai[0] == 1f)
			{
				tileCollide = false;
			}
			if (flag && ai[0] == 0f)
			{
				Vector2 vector3 = vector - base.Center;
				float num14 = vector3.Length();
				vector3.Normalize();
				if (type == 423)
				{
					vector3 = vector - Vector2.UnitY * 80f;
					int num15 = (int)vector3.Y / 16;
					if (num15 < 0)
					{
						num15 = 0;
					}
					Tile tile = Main.tile[(int)vector3.X / 16, num15];
					if (tile != null && tile.active() && Main.tileSolid[tile.type] && !Main.tileSolidTop[tile.type])
					{
						vector3 += Vector2.UnitY * 16f;
						tile = Main.tile[(int)vector3.X / 16, (int)vector3.Y / 16];
						if (tile != null && tile.active() && Main.tileSolid[tile.type] && !Main.tileSolidTop[tile.type])
						{
							vector3 += Vector2.UnitY * 16f;
						}
					}
					vector3 -= base.Center;
					num14 = vector3.Length();
					vector3.Normalize();
					if (num14 > 300f && num14 <= 800f && localAI[0] == 0f)
					{
						ai[0] = 2f;
						ai[1] = (int)(num14 / 10f);
						extraUpdates = (int)ai[1];
						velocity = vector3 * 10f;
						localAI[0] = 60f;
						return;
					}
				}
				if (type == 613)
				{
					vector3 = vector;
					Vector2 vector4 = base.Center - vector3;
					if (vector4 == Vector2.Zero)
					{
						vector4 = -Vector2.UnitY;
					}
					vector4.Normalize();
					vector3 += vector4 * 60f;
					int num16 = (int)vector3.Y / 16;
					if (num16 < 0)
					{
						num16 = 0;
					}
					Tile tile2 = Main.tile[(int)vector3.X / 16, num16];
					if (tile2 != null && tile2.active() && Main.tileSolid[tile2.type] && !Main.tileSolidTop[tile2.type])
					{
						vector3 += Vector2.UnitY * 16f;
						tile2 = Main.tile[(int)vector3.X / 16, (int)vector3.Y / 16];
						if (tile2 != null && tile2.active() && Main.tileSolid[tile2.type] && !Main.tileSolidTop[tile2.type])
						{
							vector3 += Vector2.UnitY * 16f;
						}
					}
					vector3 -= base.Center;
					num14 = vector3.Length();
					vector3.Normalize();
					if (num14 > 400f && num14 <= 800f && localAI[0] == 0f)
					{
						ai[0] = 2f;
						ai[1] = (int)(num14 / 10f);
						extraUpdates = (int)ai[1];
						velocity = vector3 * 10f;
						localAI[0] = 60f;
						return;
					}
				}
				if (type == 407)
				{
					if (num14 > 400f)
					{
						float num17 = 2f;
						vector3 *= num17;
						velocity = (velocity * 20f + vector3) / 21f;
					}
					else
					{
						velocity *= 0.96f;
					}
				}
				if (num14 > 200f)
				{
					float num18 = 6f;
					vector3 *= num18;
					velocity.X = (velocity.X * 40f + vector3.X) / 41f;
					velocity.Y = (velocity.Y * 40f + vector3.Y) / 41f;
				}
				else if (type == 423 || type == 613)
				{
					if (num14 > 70f && num14 < 130f)
					{
						float num19 = 7f;
						if (num14 < 100f)
						{
							num19 = -3f;
						}
						vector3 *= num19;
						velocity = (velocity * 20f + vector3) / 21f;
						if (Math.Abs(vector3.X) > Math.Abs(vector3.Y))
						{
							velocity.X = (velocity.X * 10f + vector3.X) / 11f;
						}
					}
					else
					{
						velocity *= 0.97f;
					}
				}
				else if (type == 375)
				{
					if (num14 < 150f)
					{
						float num20 = 4f;
						vector3 *= 0f - num20;
						velocity.X = (velocity.X * 40f + vector3.X) / 41f;
						velocity.Y = (velocity.Y * 40f + vector3.Y) / 41f;
					}
					else
					{
						velocity *= 0.97f;
					}
				}
				else if (velocity.Y > -1f)
				{
					velocity.Y -= 0.1f;
				}
			}
			else
			{
				if (!Collision.CanHitLine(base.Center, 1, 1, Main.player[owner].Center, 1, 1))
				{
					ai[0] = 1f;
				}
				float num21 = 6f;
				if (ai[0] == 1f)
				{
					num21 = 15f;
				}
				if (type == 407)
				{
					num21 = 9f;
				}
				Vector2 center2 = base.Center;
				Vector2 value2 = player.Center - center2 + new Vector2(0f, -60f);
				if (type == 407)
				{
					value2 += new Vector2(0f, 40f);
				}
				if (type == 375)
				{
					ai[1] = 3600f;
					netUpdate = true;
					value2 = player.Center - center2;
					int num22 = 1;
					for (int num23 = 0; num23 < whoAmI; num23++)
					{
						if (Main.projectile[num23].active && Main.projectile[num23].owner == owner && Main.projectile[num23].type == type)
						{
							num22++;
						}
					}
					value2.X -= 10 * Main.player[owner].direction;
					value2.X -= num22 * 40 * Main.player[owner].direction;
					value2.Y -= 10f;
				}
				float num24 = value2.Length();
				if (num24 > 200f && num21 < 9f)
				{
					num21 = 9f;
				}
				if (type == 375)
				{
					num21 = (int)((double)num21 * 0.75);
				}
				if (num24 < 100f && ai[0] == 1f && !Collision.SolidCollision(position, width, height))
				{
					ai[0] = 0f;
					netUpdate = true;
				}
				if (num24 > 2000f)
				{
					position.X = Main.player[owner].Center.X - (float)(width / 2);
					position.Y = Main.player[owner].Center.Y - (float)(width / 2);
				}
				if (type == 375)
				{
					if (num24 > 10f)
					{
						value2.Normalize();
						if (num24 < 50f)
						{
							num21 /= 2f;
						}
						value2 *= num21;
						velocity = (velocity * 20f + value2) / 21f;
					}
					else
					{
						direction = Main.player[owner].direction;
						velocity *= 0.9f;
					}
				}
				else if (type == 407)
				{
					if (Math.Abs(value2.X) > 40f || Math.Abs(value2.Y) > 10f)
					{
						value2.Normalize();
						value2 *= num21;
						value2 *= new Vector2(1.25f, 0.65f);
						velocity = (velocity * 20f + value2) / 21f;
					}
					else
					{
						if (velocity.X == 0f && velocity.Y == 0f)
						{
							velocity.X = -0.15f;
							velocity.Y = -0.05f;
						}
						velocity *= 1.01f;
					}
				}
				else if (num24 > 70f)
				{
					value2.Normalize();
					value2 *= num21;
					velocity = (velocity * 20f + value2) / 21f;
				}
				else
				{
					if (velocity.X == 0f && velocity.Y == 0f)
					{
						velocity.X = -0.15f;
						velocity.Y = -0.05f;
					}
					velocity *= 1.01f;
				}
			}
			rotation = velocity.X * 0.05f;
			frameCounter++;
			if (type == 373)
			{
				if (frameCounter > 1)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame > 2)
				{
					frame = 0;
				}
			}
			if (type == 375)
			{
				if (frameCounter >= 16)
				{
					frameCounter = 0;
				}
				frame = frameCounter / 4;
				if (ai[1] > 0f && ai[1] < 16f)
				{
					frame += 4;
				}
				if (Main.rand.Next(6) == 0)
				{
					int num25 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num25].velocity *= 0.3f;
					Main.dust[num25].noGravity = true;
					Main.dust[num25].noLight = true;
				}
			}
			if (type == 407)
			{
				int num26 = 2;
				if (frameCounter >= 6 * num26)
				{
					frameCounter = 0;
				}
				frame = frameCounter / num26;
				if (Main.rand.Next(5) == 0)
				{
					int num27 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 217, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num27].velocity *= 0.3f;
					Main.dust[num27].noGravity = true;
					Main.dust[num27].noLight = true;
				}
			}
			if (type == 423 || type == 613)
			{
				int num28 = 3;
				if (frameCounter >= 4 * num28)
				{
					frameCounter = 0;
				}
				frame = frameCounter / num28;
			}
			if (velocity.X > 0f)
			{
				spriteDirection = (direction = -1);
			}
			else if (velocity.X < 0f)
			{
				spriteDirection = (direction = 1);
			}
			if (type == 373)
			{
				if (ai[1] > 0f)
				{
					ai[1] += Main.rand.Next(1, 4);
				}
				if (ai[1] > 90f)
				{
					ai[1] = 0f;
					netUpdate = true;
				}
			}
			else if (type == 375)
			{
				if (ai[1] > 0f)
				{
					ai[1] += 1f;
					if (Main.rand.Next(3) == 0)
					{
						ai[1] += 1f;
					}
				}
				if (ai[1] > (float)Main.rand.Next(180, 900))
				{
					ai[1] = 0f;
					netUpdate = true;
				}
			}
			else if (type == 407)
			{
				if (ai[1] > 0f)
				{
					ai[1] += 1f;
					if (Main.rand.Next(3) != 0)
					{
						ai[1] += 1f;
					}
				}
				if (ai[1] > 60f)
				{
					ai[1] = 0f;
					netUpdate = true;
				}
			}
			else if (type == 423)
			{
				if (ai[1] > 0f)
				{
					ai[1] += 1f;
					if (Main.rand.Next(3) != 0)
					{
						ai[1] += 1f;
					}
				}
				if (ai[1] > 30f)
				{
					ai[1] = 0f;
					netUpdate = true;
				}
			}
			else if (type == 613)
			{
				if (ai[1] > 0f)
				{
					ai[1] += 1f;
					if (Main.rand.Next(3) != 0)
					{
						ai[1] += 1f;
					}
				}
				if (ai[1] > 60f)
				{
					ai[1] = 0f;
					netUpdate = true;
				}
			}
			if (ai[0] != 0f)
			{
				return;
			}
			float num29 = 0f;
			int num30 = 0;
			if (type == 373)
			{
				num29 = 10f;
				num30 = 374;
			}
			else if (type == 375)
			{
				num29 = 11f;
				num30 = 376;
			}
			else if (type == 407)
			{
				num29 = 14f;
				num30 = 408;
			}
			else if (type == 423)
			{
				num29 = 4f;
				num30 = 433;
			}
			else if (type == 613)
			{
				num29 = 14f;
				num30 = 614;
			}
			if (!flag)
			{
				return;
			}
			if (type == 375)
			{
				if ((vector - base.Center).X > 0f)
				{
					spriteDirection = (direction = -1);
				}
				else if ((vector - base.Center).X < 0f)
				{
					spriteDirection = (direction = 1);
				}
			}
			if (type == 407 && Collision.SolidCollision(position, width, height))
			{
				return;
			}
			if (type == 423)
			{
				if (Math.Abs((vector - base.Center).ToRotation() - (float)Math.PI / 2f) > (float)Math.PI / 4f)
				{
					velocity += Vector2.Normalize(vector - base.Center - Vector2.UnitY * 80f);
				}
				else if (!((vector - base.Center).Length() > 400f) && ai[1] == 0f)
				{
					ai[1] += 1f;
					if (Main.myPlayer == owner)
					{
						Vector2 vector5 = vector - base.Center;
						vector5.Normalize();
						vector5 *= num29;
						NewProjectile(base.Center.X, base.Center.Y, vector5.X, vector5.Y, num30, damage, 0f, Main.myPlayer);
						netUpdate = true;
					}
				}
			}
			else if (ai[1] == 0f && type == 613)
			{
				if ((vector - base.Center).Length() > 500f || ai[1] != 0f)
				{
					return;
				}
				ai[1] += 1f;
				if (Main.myPlayer == owner)
				{
					Vector2 value3 = vector - base.Center;
					value3.Normalize();
					value3 *= num29;
					int num31 = NewProjectile(base.Center.X, base.Center.Y, value3.X, value3.Y, num30, damage, 0f, Main.myPlayer, 0f, num8);
					Main.projectile[num31].timeLeft = 300;
					Main.projectile[num31].netUpdate = true;
					velocity -= value3 / 3f;
					netUpdate = true;
				}
				for (int num32 = 0; num32 < 5; num32++)
				{
					int num33 = width / 4;
					Vector2 vector7 = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * Main.rand.Next(24, 41) / 8f;
					int num34 = Dust.NewDust(base.Center - Vector2.One * num33, num33 * 2, num33 * 2, 88);
					Dust dust5 = Main.dust[num34];
					Vector2 value4 = Vector2.Normalize(dust5.position - base.Center);
					dust5.position = base.Center + value4 * num33 * scale - new Vector2(4f);
					if (num32 < 30)
					{
						dust5.velocity = value4 * dust5.velocity.Length() * 2f;
					}
					else
					{
						dust5.velocity = 2f * value4 * Main.rand.Next(45, 91) / 10f;
					}
					dust5.noGravity = true;
					dust5.scale = 0.7f + Main.rand.NextFloat();
				}
			}
			else if (ai[1] == 0f)
			{
				ai[1] += 1f;
				if (Main.myPlayer == owner)
				{
					Vector2 vector6 = vector - base.Center;
					vector6.Normalize();
					vector6 *= num29;
					int num35 = NewProjectile(base.Center.X, base.Center.Y, vector6.X, vector6.Y, num30, damage, 0f, Main.myPlayer);
					Main.projectile[num35].timeLeft = 300;
					Main.projectile[num35].netUpdate = true;
					netUpdate = true;
				}
			}
		}

		private void AI_075()
		{
			Player player = Main.player[owner];
			float num = (float)Math.PI / 2f;
			Vector2 vector = player.RotatedRelativePoint(player.MountedCenter);
			if (type == 439)
			{
				ai[0] += 1f;
				int num2 = 0;
				if (ai[0] >= 40f)
				{
					num2++;
				}
				if (ai[0] >= 80f)
				{
					num2++;
				}
				if (ai[0] >= 120f)
				{
					num2++;
				}
				int num3 = 24;
				int num4 = 6;
				ai[1] += 1f;
				bool flag = false;
				if (ai[1] >= (float)(num3 - num4 * num2))
				{
					ai[1] = 0f;
					flag = true;
				}
				frameCounter += 1 + num2;
				if (frameCounter >= 4)
				{
					frameCounter = 0;
					frame++;
					if (frame >= 6)
					{
						frame = 0;
					}
				}
				if (soundDelay <= 0)
				{
					soundDelay = num3 - num4 * num2;
					if (ai[0] != 1f)
					{
						Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 91);
					}
				}
				if (ai[1] == 1f && ai[0] != 1f)
				{
					Vector2 spinningpoint = Vector2.UnitX * 24f;
					spinningpoint = spinningpoint.RotatedBy(rotation - (float)Math.PI / 2f);
					Vector2 value = base.Center + spinningpoint;
					for (int i = 0; i < 2; i++)
					{
						int num5 = Dust.NewDust(value - Vector2.One * 8f, 16, 16, 135, base.velocity.X / 2f, base.velocity.Y / 2f, 100);
						Main.dust[num5].velocity *= 0.66f;
						Main.dust[num5].noGravity = true;
						Main.dust[num5].scale = 1.4f;
					}
				}
				if (flag && Main.myPlayer == owner)
				{
					if (player.channel && player.CheckMana(player.inventory[player.selectedItem].mana, true) && !player.noItems && !player.CCed)
					{
						float num6 = player.inventory[player.selectedItem].shootSpeed * scale;
						Vector2 value2 = vector;
						Vector2 value3 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - value2;
						if (player.gravDir == -1f)
						{
							value3.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - value2.Y;
						}
						Vector2 velocity = Vector2.Normalize(value3);
						if (float.IsNaN(velocity.X) || float.IsNaN(velocity.Y))
						{
							velocity = -Vector2.UnitY;
						}
						velocity *= num6;
						if (velocity.X != base.velocity.X || velocity.Y != base.velocity.Y)
						{
							netUpdate = true;
						}
						base.velocity = velocity;
						int num7 = 440;
						float scaleFactor = 14f;
						int num8 = 7;
						for (int j = 0; j < 2; j++)
						{
							value2 = base.Center + new Vector2(Main.rand.Next(-num8, num8 + 1), Main.rand.Next(-num8, num8 + 1));
							Vector2 spinningpoint2 = Vector2.Normalize(base.velocity) * scaleFactor;
							spinningpoint2 = spinningpoint2.RotatedBy(Main.rand.NextDouble() * 0.19634954631328583 - 0.098174773156642914);
							if (float.IsNaN(spinningpoint2.X) || float.IsNaN(spinningpoint2.Y))
							{
								spinningpoint2 = -Vector2.UnitY;
							}
							NewProjectile(value2.X, value2.Y, spinningpoint2.X, spinningpoint2.Y, num7, damage, knockBack, owner);
						}
					}
					else
					{
						Kill();
					}
				}
			}
			if (type == 445)
			{
				localAI[0] += 1f;
				if (localAI[0] >= 60f)
				{
					localAI[0] = 0f;
				}
				if (Vector2.Distance(vector, base.Center) >= 5f)
				{
					float num9 = localAI[0] / 60f;
					if (num9 > 0.5f)
					{
						num9 = 1f - num9;
					}
					Vector3 value4 = new Vector3(0f, 1f, 0.7f);
					Vector3 value5 = new Vector3(0f, 0.7f, 1f);
					Vector3 value6 = Vector3.Lerp(value4, value5, 1f - num9 * 2f) * 0.5f;
					if (Vector2.Distance(vector, base.Center) >= 30f)
					{
						Vector2 value7 = base.Center - vector;
						value7.Normalize();
						value7 *= Vector2.Distance(vector, base.Center) - 30f;
						DelegateMethods.v3_1 = value6 * 0.8f;
						Utils.PlotTileLine(base.Center - value7, base.Center, 8f, DelegateMethods.CastLightOpen);
					}
					Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, value6.X, value6.Y, value6.Z);
				}
				if (Main.myPlayer == owner)
				{
					if (localAI[1] > 0f)
					{
						localAI[1] -= 1f;
					}
					if (!player.channel || player.noItems || player.CCed)
					{
						Kill();
					}
					else if (localAI[1] == 0f)
					{
						Vector2 value8 = vector;
						Vector2 vector2 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - value8;
						if (player.gravDir == -1f)
						{
							vector2.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - value8.Y;
						}
						Tile tile = Main.tile[Player.tileTargetX, Player.tileTargetY];
						if (tile.active())
						{
							vector2 = new Vector2(Player.tileTargetX, Player.tileTargetY) * 16f + Vector2.One * 8f - value8;
							localAI[1] = 2f;
						}
						vector2 = Vector2.Lerp(vector2, base.velocity, 0.7f);
						if (float.IsNaN(vector2.X) || float.IsNaN(vector2.Y))
						{
							vector2 = -Vector2.UnitY;
						}
						float num10 = 30f;
						if (vector2.Length() < num10)
						{
							vector2 = Vector2.Normalize(vector2) * num10;
						}
						int tileBoost = player.inventory[player.selectedItem].tileBoost;
						int num11 = -Player.tileRangeX - tileBoost + 1;
						int num12 = Player.tileRangeX + tileBoost - 1;
						int num13 = -Player.tileRangeY - tileBoost;
						int num14 = Player.tileRangeY + tileBoost - 1;
						int num15 = 12;
						bool flag2 = false;
						if (vector2.X < (float)(num11 * 16 - num15))
						{
							flag2 = true;
						}
						if (vector2.Y < (float)(num13 * 16 - num15))
						{
							flag2 = true;
						}
						if (vector2.X > (float)(num12 * 16 + num15))
						{
							flag2 = true;
						}
						if (vector2.Y > (float)(num14 * 16 + num15))
						{
							flag2 = true;
						}
						if (flag2)
						{
							Vector2 value9 = Vector2.Normalize(vector2);
							float num16 = -1f;
							if (value9.X < 0f && ((float)(num11 * 16 - num15) / value9.X < num16 || num16 == -1f))
							{
								num16 = (float)(num11 * 16 - num15) / value9.X;
							}
							if (value9.X > 0f && ((float)(num12 * 16 + num15) / value9.X < num16 || num16 == -1f))
							{
								num16 = (float)(num12 * 16 + num15) / value9.X;
							}
							if (value9.Y < 0f && ((float)(num13 * 16 - num15) / value9.Y < num16 || num16 == -1f))
							{
								num16 = (float)(num13 * 16 - num15) / value9.Y;
							}
							if (value9.Y > 0f && ((float)(num14 * 16 + num15) / value9.Y < num16 || num16 == -1f))
							{
								num16 = (float)(num14 * 16 + num15) / value9.Y;
							}
							vector2 = value9 * num16;
						}
						if (vector2.X != base.velocity.X || vector2.Y != base.velocity.Y)
						{
							netUpdate = true;
						}
						base.velocity = vector2;
					}
				}
			}
			if (type == 460)
			{
				ai[0] += 1f;
				int num17 = 0;
				if (ai[0] >= 60f)
				{
					num17++;
				}
				if (ai[0] >= 180f)
				{
					num17++;
				}
				bool flag3 = false;
				if (ai[0] == 60f || ai[0] == 180f || (ai[0] > 180f && ai[0] % 20f == 0f))
				{
					flag3 = true;
				}
				bool flag4 = ai[0] >= 180f;
				int num18 = 10;
				if (!flag4)
				{
					ai[1] += 1f;
				}
				bool flag5 = false;
				if (flag4 && ai[0] % 20f == 0f)
				{
					flag5 = true;
				}
				if (ai[1] >= (float)num18 && !flag4)
				{
					ai[1] = 0f;
					flag5 = true;
					if (!flag4)
					{
						float num19 = player.inventory[player.selectedItem].shootSpeed * scale;
						Vector2 value10 = vector;
						Vector2 value11 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - value10;
						if (player.gravDir == -1f)
						{
							value11.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - value10.Y;
						}
						Vector2 velocity2 = Vector2.Normalize(value11);
						if (float.IsNaN(velocity2.X) || float.IsNaN(velocity2.Y))
						{
							velocity2 = -Vector2.UnitY;
						}
						velocity2 *= num19;
						if (velocity2.X != base.velocity.X || velocity2.Y != base.velocity.Y)
						{
							netUpdate = true;
						}
						base.velocity = velocity2;
					}
				}
				if (soundDelay <= 0 && !flag4)
				{
					soundDelay = num18 - num17;
					soundDelay *= 2;
					if (ai[0] != 1f)
					{
						Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 15);
					}
				}
				if (ai[0] > 10f && !flag4)
				{
					Vector2 spinningpoint3 = Vector2.UnitX * 18f;
					spinningpoint3 = spinningpoint3.RotatedBy(rotation - (float)Math.PI / 2f);
					Vector2 value12 = base.Center + spinningpoint3;
					for (int k = 0; k < num17 + 1; k++)
					{
						int num20 = 226;
						float num21 = 0.4f;
						if (k % 2 == 1)
						{
							num20 = 226;
							num21 = 0.65f;
						}
						Vector2 vector3 = value12 + ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * (12f - (float)(num17 * 2));
						int num22 = Dust.NewDust(vector3 - Vector2.One * 8f, 16, 16, num20, base.velocity.X / 2f, base.velocity.Y / 2f);
						Main.dust[num22].velocity = Vector2.Normalize(value12 - vector3) * 1.5f * (10f - (float)num17 * 2f) / 10f;
						Main.dust[num22].noGravity = true;
						Main.dust[num22].scale = num21;
						Main.dust[num22].customData = player;
					}
				}
				if (flag5 && Main.myPlayer == owner)
				{
					bool flag6 = false;
					flag6 = (!flag3 || player.CheckMana(player.inventory[player.selectedItem].mana, true));
					if (player.channel && flag6 && !player.noItems && !player.CCed)
					{
						if (ai[0] == 180f)
						{
							Vector2 center = base.Center;
							Vector2 vector4 = Vector2.Normalize(base.velocity);
							if (float.IsNaN(vector4.X) || float.IsNaN(vector4.Y))
							{
								vector4 = -Vector2.UnitY;
							}
							int num23 = (int)((float)damage * 3f);
							int num24 = NewProjectile(center.X, center.Y, vector4.X, vector4.Y, 461, num23, knockBack, owner, 0f, whoAmI);
							ai[1] = num24;
							netUpdate = true;
						}
						else if (flag4)
						{
							Projectile projectile = Main.projectile[(int)ai[1]];
							if (!projectile.active || projectile.type != 461)
							{
								Kill();
								return;
							}
						}
					}
					else
					{
						if (!flag4)
						{
							Vector2 vector5 = vector;
							int num25 = 459;
							float scaleFactor2 = 10f;
							vector5 = base.Center;
							Vector2 vector6 = Vector2.Normalize(base.velocity) * scaleFactor2;
							if (float.IsNaN(vector6.X) || float.IsNaN(vector6.Y))
							{
								vector6 = -Vector2.UnitY;
							}
							float num26 = 0.7f + (float)num17 * 0.3f;
							int num27 = (num26 < 1f) ? damage : ((int)((float)damage * 2f));
							NewProjectile(vector5.X, vector5.Y, vector6.X, vector6.Y, num25, num27, knockBack, owner, 0f, num26);
						}
						Kill();
					}
				}
			}
			if (type == 633)
			{
				float num28 = 30f;
				if (ai[0] > 90f)
				{
					num28 = 15f;
				}
				if (ai[0] > 120f)
				{
					num28 = 5f;
				}
				damage = (int)((float)player.inventory[player.selectedItem].damage * player.magicDamage);
				ai[0] += 1f;
				ai[1] += 1f;
				bool flag7 = false;
				if (ai[0] % num28 == 0f)
				{
					flag7 = true;
				}
				int num29 = 10;
				bool flag8 = false;
				if (ai[0] % num28 == 0f)
				{
					flag8 = true;
				}
				if (ai[1] >= 1f)
				{
					ai[1] = 0f;
					flag8 = true;
					if (Main.myPlayer == owner)
					{
						float num30 = player.inventory[player.selectedItem].shootSpeed * scale;
						Vector2 value13 = vector;
						Vector2 value14 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - value13;
						if (player.gravDir == -1f)
						{
							value14.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - value13.Y;
						}
						Vector2 value15 = Vector2.Normalize(value14);
						if (float.IsNaN(value15.X) || float.IsNaN(value15.Y))
						{
							value15 = -Vector2.UnitY;
						}
						value15 = Vector2.Normalize(Vector2.Lerp(value15, Vector2.Normalize(base.velocity), 0.92f));
						value15 *= num30;
						if (value15.X != base.velocity.X || value15.Y != base.velocity.Y)
						{
							netUpdate = true;
						}
						base.velocity = value15;
					}
				}
				frameCounter++;
				int num31 = (!(ai[0] < 120f)) ? 1 : 4;
				if (frameCounter >= num31)
				{
					frameCounter = 0;
					if (++frame >= 5)
					{
						frame = 0;
					}
				}
				if (soundDelay <= 0)
				{
					soundDelay = num29;
					soundDelay *= 2;
					if (ai[0] != 1f)
					{
						Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 15);
					}
				}
				if (flag8 && Main.myPlayer == owner)
				{
					bool flag9 = false;
					flag9 = (!flag7 || player.CheckMana(player.inventory[player.selectedItem].mana, true));
					if (player.channel && flag9 && !player.noItems && !player.CCed)
					{
						if (ai[0] == 1f)
						{
							Vector2 center2 = base.Center;
							Vector2 vector7 = Vector2.Normalize(base.velocity);
							if (float.IsNaN(vector7.X) || float.IsNaN(vector7.Y))
							{
								vector7 = -Vector2.UnitY;
							}
							int num32 = damage;
							for (int l = 0; l < 6; l++)
							{
								NewProjectile(center2.X, center2.Y, vector7.X, vector7.Y, 632, num32, knockBack, owner, l, whoAmI);
							}
							netUpdate = true;
						}
					}
					else
					{
						Kill();
					}
				}
			}
			if (type == 595)
			{
				num = 0f;
				if (spriteDirection == -1)
				{
					num = (float)Math.PI;
				}
				if (++frame >= Main.projFrames[type])
				{
					frame = 0;
				}
				soundDelay--;
				if (soundDelay <= 0)
				{
					Main.PlaySound(2, (int)base.Center.X, (int)base.Center.Y);
					soundDelay = 12;
				}
				if (Main.myPlayer == owner)
				{
					if (player.channel && !player.noItems && !player.CCed)
					{
						float num33 = 1f;
						if (player.inventory[player.selectedItem].shoot == type)
						{
							num33 = player.inventory[player.selectedItem].shootSpeed * scale;
						}
						Vector2 vector8 = Main.MouseWorld - vector;
						vector8.Normalize();
						if (vector8.HasNaNs())
						{
							vector8 = Vector2.UnitX * player.direction;
						}
						vector8 *= num33;
						if (vector8.X != base.velocity.X || vector8.Y != base.velocity.Y)
						{
							netUpdate = true;
						}
						base.velocity = vector8;
					}
					else
					{
						Kill();
					}
				}
				Vector2 vector9 = base.Center + base.velocity * 3f;
				Lighting.AddLight(vector9, 0.8f, 0.8f, 0.8f);
				if (Main.rand.Next(3) == 0)
				{
					int num34 = Dust.NewDust(vector9 - base.Size / 2f, width, height, 63, base.velocity.X, base.velocity.Y, 100, default(Color), 2f);
					Main.dust[num34].noGravity = true;
					Main.dust[num34].position -= base.velocity;
				}
			}
			if (type == 600)
			{
				if (ai[0] == 0f)
				{
					if (ai[1] != 0f)
					{
						Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 114);
					}
					else
					{
						Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 115);
					}
				}
				ai[0] += 1f;
				if (Main.myPlayer == owner && ai[0] == 1f)
				{
					float num35 = player.inventory[player.selectedItem].shootSpeed * scale;
					Vector2 value16 = vector;
					Vector2 value17 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - value16;
					if (player.gravDir == -1f)
					{
						value17.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - value16.Y;
					}
					Vector2 velocity3 = Vector2.Normalize(value17);
					if (float.IsNaN(velocity3.X) || float.IsNaN(velocity3.Y))
					{
						velocity3 = -Vector2.UnitY;
					}
					velocity3 *= num35;
					if (velocity3.X != base.velocity.X || velocity3.Y != base.velocity.Y)
					{
						netUpdate = true;
					}
					base.velocity = velocity3;
					int num36 = 601;
					float scaleFactor3 = 3f;
					value16 = base.Center;
					Vector2 vector10 = Vector2.Normalize(base.velocity) * scaleFactor3;
					if (float.IsNaN(vector10.X) || float.IsNaN(vector10.Y))
					{
						vector10 = -Vector2.UnitY;
					}
					NewProjectile(value16.X, value16.Y, vector10.X, vector10.Y, num36, damage, knockBack, owner, ai[1]);
				}
				if (ai[0] >= 30f)
				{
					Kill();
				}
			}
			if (type == 611)
			{
				if (localAI[1] > 0f)
				{
					localAI[1] -= 1f;
				}
				alpha -= 42;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (localAI[0] == 0f)
				{
					localAI[0] = base.velocity.ToRotation();
				}
				float num37 = (localAI[0].ToRotationVector2().X >= 0f) ? 1 : (-1);
				if (ai[1] <= 0f)
				{
					num37 *= -1f;
				}
				Vector2 vector11 = (num37 * (ai[0] / 30f * ((float)Math.PI * 2f) - (float)Math.PI / 2f)).ToRotationVector2();
				vector11.Y *= (float)Math.Sin(ai[1]);
				if (ai[1] <= 0f)
				{
					vector11.Y *= -1f;
				}
				vector11 = vector11.RotatedBy(localAI[0]);
				ai[0] += 1f;
				if (ai[0] < 30f)
				{
					base.velocity += 48f * vector11;
				}
				else
				{
					Kill();
				}
			}
			if (type == 615)
			{
				num = 0f;
				if (spriteDirection == -1)
				{
					num = (float)Math.PI;
				}
				ai[0] += 1f;
				int num38 = 0;
				if (ai[0] >= 40f)
				{
					num38++;
				}
				if (ai[0] >= 80f)
				{
					num38++;
				}
				if (ai[0] >= 120f)
				{
					num38++;
				}
				int num39 = 5;
				int num40 = 0;
				ai[1] -= 1f;
				bool flag10 = false;
				int num41 = -1;
				if (ai[1] <= 0f)
				{
					ai[1] = num39 - num40 * num38;
					flag10 = true;
					int num42 = (int)ai[0] / (num39 - num40 * num38);
					if (num42 % 7 == 0)
					{
						num41 = 0;
					}
				}
				frameCounter += 1 + num38;
				if (frameCounter >= 4)
				{
					frameCounter = 0;
					frame++;
					if (frame >= Main.projFrames[type])
					{
						frame = 0;
					}
				}
				if (soundDelay <= 0)
				{
					soundDelay = num39 - num40 * num38;
					if (ai[0] != 1f)
					{
						Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 36);
					}
				}
				if (flag10 && Main.myPlayer == owner)
				{
					bool canShoot = player.channel && player.HasAmmo(player.inventory[player.selectedItem], true) && !player.noItems && !player.CCed;
					int shoot = 14;
					float speed = 14f;
					int Damage = player.GetWeaponDamage(player.inventory[player.selectedItem]);
					float KnockBack = player.inventory[player.selectedItem].knockBack;
					if (canShoot)
					{
						player.PickAmmo(player.inventory[player.selectedItem], ref shoot, ref speed, ref canShoot, ref Damage, ref KnockBack);
						KnockBack = player.GetWeaponKnockback(player.inventory[player.selectedItem], KnockBack);
						float num43 = player.inventory[player.selectedItem].shootSpeed * scale;
						Vector2 value18 = vector;
						Vector2 value19 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - value18;
						if (player.gravDir == -1f)
						{
							value19.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - value18.Y;
						}
						Vector2 spinningpoint4 = Vector2.Normalize(value19);
						if (float.IsNaN(spinningpoint4.X) || float.IsNaN(spinningpoint4.Y))
						{
							spinningpoint4 = -Vector2.UnitY;
						}
						spinningpoint4 *= num43;
						spinningpoint4 = spinningpoint4.RotatedBy(Main.rand.NextDouble() * 0.13089969754219055 - 0.065449848771095276);
						if (spinningpoint4.X != base.velocity.X || spinningpoint4.Y != base.velocity.Y)
						{
							netUpdate = true;
						}
						base.velocity = spinningpoint4;
						for (int m = 0; m < 1; m++)
						{
							Vector2 spinningpoint5 = Vector2.Normalize(base.velocity) * speed;
							spinningpoint5 = spinningpoint5.RotatedBy(Main.rand.NextDouble() * 0.19634954631328583 - 0.098174773156642914);
							if (float.IsNaN(spinningpoint5.X) || float.IsNaN(spinningpoint5.Y))
							{
								spinningpoint5 = -Vector2.UnitY;
							}
							NewProjectile(value18.X, value18.Y, spinningpoint5.X, spinningpoint5.Y, shoot, Damage, KnockBack, owner);
						}
						if (num41 == 0)
						{
							shoot = 616;
							speed = 8f;
							for (int n = 0; n < 1; n++)
							{
								Vector2 spinningpoint6 = Vector2.Normalize(base.velocity) * speed;
								spinningpoint6 = spinningpoint6.RotatedBy(Main.rand.NextDouble() * 0.39269909262657166 - 0.19634954631328583);
								if (float.IsNaN(spinningpoint6.X) || float.IsNaN(spinningpoint6.Y))
								{
									spinningpoint6 = -Vector2.UnitY;
								}
								NewProjectile(value18.X, value18.Y, spinningpoint6.X, spinningpoint6.Y, shoot, Damage + 20, KnockBack * 1.25f, owner);
							}
						}
					}
					else
					{
						Kill();
					}
				}
			}
			if (type == 630)
			{
				num = 0f;
				if (spriteDirection == -1)
				{
					num = (float)Math.PI;
				}
				ai[0] += 1f;
				int num44 = 0;
				if (ai[0] >= 40f)
				{
					num44++;
				}
				if (ai[0] >= 80f)
				{
					num44++;
				}
				if (ai[0] >= 120f)
				{
					num44++;
				}
				int num45 = 24;
				int num46 = 2;
				ai[1] -= 1f;
				bool flag11 = false;
				if (ai[1] <= 0f)
				{
					ai[1] = num45 - num46 * num44;
					flag11 = true;
					int num53 = (int)ai[0] / (num45 - num46 * num44);
				}
				bool canShoot2 = player.channel && player.HasAmmo(player.inventory[player.selectedItem], true) && !player.noItems && !player.CCed;
				if (localAI[0] > 0f)
				{
					localAI[0] -= 1f;
				}
				if (soundDelay <= 0 && canShoot2)
				{
					soundDelay = num45 - num46 * num44;
					if (ai[0] != 1f)
					{
						Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 5);
					}
					localAI[0] = 12f;
				}
				player.phantasmTime = 2;
				if (flag11 && Main.myPlayer == owner)
				{
					int shoot2 = 14;
					float speed2 = 14f;
					int Damage2 = player.GetWeaponDamage(player.inventory[player.selectedItem]);
					float KnockBack2 = player.inventory[player.selectedItem].knockBack;
					if (canShoot2)
					{
						player.PickAmmo(player.inventory[player.selectedItem], ref shoot2, ref speed2, ref canShoot2, ref Damage2, ref KnockBack2);
						KnockBack2 = player.GetWeaponKnockback(player.inventory[player.selectedItem], KnockBack2);
						float num47 = player.inventory[player.selectedItem].shootSpeed * scale;
						Vector2 vector12 = vector;
						Vector2 value20 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - vector12;
						if (player.gravDir == -1f)
						{
							value20.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector12.Y;
						}
						Vector2 value21 = Vector2.Normalize(value20);
						if (float.IsNaN(value21.X) || float.IsNaN(value21.Y))
						{
							value21 = -Vector2.UnitY;
						}
						value21 *= num47;
						if (value21.X != base.velocity.X || value21.Y != base.velocity.Y)
						{
							netUpdate = true;
						}
						base.velocity = value21 * 0.55f;
						for (int num48 = 0; num48 < 4; num48++)
						{
							Vector2 vector13 = Vector2.Normalize(base.velocity) * speed2 * (0.6f + Main.rand.NextFloat() * 0.8f);
							if (float.IsNaN(vector13.X) || float.IsNaN(vector13.Y))
							{
								vector13 = -Vector2.UnitY;
							}
							Vector2 vector14 = vector12 + Utils.RandomVector2(Main.rand, -15f, 15f);
							int num49 = NewProjectile(vector14.X, vector14.Y, vector13.X, vector13.Y, shoot2, Damage2, KnockBack2, owner);
							Main.projectile[num49].noDropItem = true;
						}
					}
					else
					{
						Kill();
					}
				}
			}
			base.position = player.RotatedRelativePoint(player.MountedCenter) - base.Size / 2f;
			rotation = base.velocity.ToRotation() + num;
			spriteDirection = direction;
			timeLeft = 2;
			player.ChangeDir(direction);
			player.heldProj = whoAmI;
			player.itemTime = 2;
			player.itemAnimation = 2;
			player.itemRotation = (float)Math.Atan2(base.velocity.Y * (float)direction, base.velocity.X * (float)direction);
			if (type == 460 || type == 611)
			{
				Vector2 value22 = Main.OffsetsPlayerOnhand[player.bodyFrame.Y / 56] * 2f;
				if (player.direction != 1)
				{
					value22.X = (float)player.bodyFrame.Width - value22.X;
				}
				if (player.gravDir != 1f)
				{
					value22.Y = (float)player.bodyFrame.Height - value22.Y;
				}
				value22 -= new Vector2(player.bodyFrame.Width - player.width, player.bodyFrame.Height - 42) / 2f;
				base.Center = player.RotatedRelativePoint(player.position + value22) - base.velocity;
			}
			if (type == 615)
			{
				base.position.Y += player.gravDir * 2f;
			}
			if (type != 611 || alpha != 0)
			{
				return;
			}
			for (int num50 = 0; num50 < 2; num50++)
			{
				Dust dust = Main.dust[Dust.NewDust(base.position + base.velocity * 2f, width, height, 6, 0f, 0f, 100, Color.Transparent, 2f)];
				dust.noGravity = true;
				dust.velocity *= 2f;
				dust.velocity += localAI[0].ToRotationVector2();
				dust.fadeIn = 1.5f;
			}
			float num51 = 18f;
			for (int num52 = 0; (float)num52 < num51; num52++)
			{
				if (Main.rand.Next(4) == 0)
				{
					Vector2 position = base.position + base.velocity + base.velocity * ((float)num52 / num51);
					Dust dust2 = Main.dust[Dust.NewDust(position, width, height, 6, 0f, 0f, 100, Color.Transparent)];
					dust2.noGravity = true;
					dust2.fadeIn = 0.5f;
					dust2.velocity += localAI[0].ToRotationVector2();
					dust2.noLight = true;
				}
			}
		}

		private void AI_099_1()
		{
			timeLeft = 6;
			bool flag = true;
			float num = 250f;
			float scaleFactor = 0.1f;
			float num2 = 15f;
			float num3 = 12f;
			num *= 0.5f;
			num2 *= 0.8f;
			num3 *= 1.5f;
			if (owner == Main.myPlayer)
			{
				bool flag2 = false;
				for (int i = 0; i < 1000; i++)
				{
					if (Main.projectile[i].active && Main.projectile[i].owner == owner && Main.projectile[i].aiStyle == 99 && (Main.projectile[i].type < 556 || Main.projectile[i].type > 561))
					{
						flag2 = true;
					}
				}
				if (!flag2)
				{
					ai[0] = -1f;
					netUpdate = true;
				}
			}
			if (Main.player[owner].yoyoString)
			{
				num += num * 0.25f + 10f;
			}
			rotation += 0.5f;
			if (Main.player[owner].dead)
			{
				Kill();
				return;
			}
			if (!flag)
			{
				Main.player[owner].heldProj = whoAmI;
				Main.player[owner].itemAnimation = 2;
				Main.player[owner].itemTime = 2;
				if (position.X + (float)(width / 2) > Main.player[owner].position.X + (float)(Main.player[owner].width / 2))
				{
					Main.player[owner].ChangeDir(1);
					direction = 1;
				}
				else
				{
					Main.player[owner].ChangeDir(-1);
					direction = -1;
				}
			}
			if (ai[0] == 0f || ai[0] == 1f)
			{
				if (ai[0] == 1f)
				{
					num *= 0.75f;
				}
				num3 *= 0.5f;
				bool flag3 = false;
				Vector2 value = Main.player[owner].Center - base.Center;
				if ((double)value.Length() > (double)num * 0.9)
				{
					flag3 = true;
				}
				if (value.Length() > num)
				{
					float num4 = value.Length() - num;
					Vector2 vector = default(Vector2);
					vector.X = value.Y;
					vector.Y = value.X;
					value.Normalize();
					value *= num;
					position = Main.player[owner].Center - value;
					position.X -= width / 2;
					position.Y -= height / 2;
					float num5 = base.velocity.Length();
					base.velocity.Normalize();
					if (num4 > num5 - 1f)
					{
						num4 = num5 - 1f;
					}
					base.velocity *= num5 - num4;
					num5 = base.velocity.Length();
					Vector2 vector2 = new Vector2(base.Center.X, base.Center.Y);
					Vector2 vector3 = new Vector2(Main.player[owner].Center.X, Main.player[owner].Center.Y);
					if (vector2.Y < vector3.Y)
					{
						vector.Y = Math.Abs(vector.Y);
					}
					else if (vector2.Y > vector3.Y)
					{
						vector.Y = 0f - Math.Abs(vector.Y);
					}
					if (vector2.X < vector3.X)
					{
						vector.X = Math.Abs(vector.X);
					}
					else if (vector2.X > vector3.X)
					{
						vector.X = 0f - Math.Abs(vector.X);
					}
					vector.Normalize();
					vector *= base.velocity.Length();
					new Vector2(vector.X, vector.Y);
					if (Math.Abs(base.velocity.X) > Math.Abs(base.velocity.Y))
					{
						Vector2 velocity = base.velocity;
						velocity.Y += vector.Y;
						velocity.Normalize();
						velocity *= base.velocity.Length();
						if ((double)Math.Abs(vector.X) < 0.1 || (double)Math.Abs(vector.Y) < 0.1)
						{
							base.velocity = velocity;
						}
						else
						{
							base.velocity = (velocity + base.velocity * 2f) / 3f;
						}
					}
					else
					{
						Vector2 velocity2 = base.velocity;
						velocity2.X += vector.X;
						velocity2.Normalize();
						velocity2 *= base.velocity.Length();
						if ((double)Math.Abs(vector.X) < 0.2 || (double)Math.Abs(vector.Y) < 0.2)
						{
							base.velocity = velocity2;
						}
						else
						{
							base.velocity = (velocity2 + base.velocity * 2f) / 3f;
						}
					}
				}
				if (Main.myPlayer == owner)
				{
					if (Main.player[owner].channel)
					{
						Vector2 value2 = new Vector2(Main.mouseX - Main.lastMouseX, Main.mouseY - Main.lastMouseY);
						if (base.velocity.X != 0f || base.velocity.Y != 0f)
						{
							if (flag)
							{
								value2 *= -1f;
							}
							if (flag3)
							{
								if (base.Center.X < Main.player[owner].Center.X && value2.X < 0f)
								{
									value2.X = 0f;
								}
								if (base.Center.X > Main.player[owner].Center.X && value2.X > 0f)
								{
									value2.X = 0f;
								}
								if (base.Center.Y < Main.player[owner].Center.Y && value2.Y < 0f)
								{
									value2.Y = 0f;
								}
								if (base.Center.Y > Main.player[owner].Center.Y && value2.Y > 0f)
								{
									value2.Y = 0f;
								}
							}
							base.velocity += value2 * scaleFactor;
							netUpdate = true;
						}
					}
					else
					{
						ai[0] = 10f;
						netUpdate = true;
					}
				}
				if (flag || type == 562 || type == 547 || type == 555 || type == 564 || type == 552 || type == 563 || type == 549 || type == 550 || type == 554 || type == 553 || type == 603)
				{
					float num6 = 800f;
					Vector2 value3 = default(Vector2);
					bool flag4 = false;
					if (type == 549)
					{
						num6 = 200f;
					}
					if (type == 554)
					{
						num6 = 400f;
					}
					if (type == 553)
					{
						num6 = 250f;
					}
					if (type == 603)
					{
						num6 = 320f;
					}
					for (int j = 0; j < 200; j++)
					{
						if (Main.npc[j].CanBeChasedBy(this))
						{
							float num7 = Main.npc[j].position.X + (float)(Main.npc[j].width / 2);
							float num8 = Main.npc[j].position.Y + (float)(Main.npc[j].height / 2);
							float num9 = Math.Abs(position.X + (float)(width / 2) - num7) + Math.Abs(position.Y + (float)(height / 2) - num8);
							if (num9 < num6 && (type != 563 || !(num9 < 200f)) && Collision.CanHit(position, width, height, Main.npc[j].position, Main.npc[j].width, Main.npc[j].height) && (double)(Main.npc[j].Center - Main.player[owner].Center).Length() < (double)num * 0.9)
							{
								num6 = num9;
								value3.X = num7;
								value3.Y = num8;
								flag4 = true;
							}
						}
					}
					if (flag4)
					{
						value3 -= base.Center;
						value3.Normalize();
						if (type == 563)
						{
							value3 *= 4f;
							base.velocity = (base.velocity * 14f + value3) / 15f;
						}
						else if (type == 553)
						{
							value3 *= 5f;
							base.velocity = (base.velocity * 12f + value3) / 13f;
						}
						else if (type == 603)
						{
							value3 *= 16f;
							base.velocity = (base.velocity * 9f + value3) / 10f;
						}
						else if (type == 554)
						{
							value3 *= 8f;
							base.velocity = (base.velocity * 6f + value3) / 7f;
						}
						else
						{
							value3 *= 6f;
							base.velocity = (base.velocity * 7f + value3) / 8f;
						}
					}
				}
				if (base.velocity.Length() > num2)
				{
					base.velocity.Normalize();
					base.velocity *= num2;
				}
				if (base.velocity.Length() < num3)
				{
					base.velocity.Normalize();
					base.velocity *= num3;
				}
				return;
			}
			tileCollide = false;
			Vector2 vector4 = Main.player[owner].Center - base.Center;
			if (vector4.Length() < 40f || vector4.HasNaNs())
			{
				Kill();
				return;
			}
			float num10 = num2 * 1.5f;
			if (type == 546)
			{
				num10 *= 1.5f;
			}
			if (type == 554)
			{
				num10 *= 1.25f;
			}
			if (type == 555)
			{
				num10 *= 1.35f;
			}
			if (type == 562)
			{
				num10 *= 1.25f;
			}
			float num11 = 12f;
			vector4.Normalize();
			vector4 *= num10;
			base.velocity = (base.velocity * (num11 - 1f) + vector4) / num11;
		}

		private void AI_099_2()
		{
			bool flag = false;
			for (int i = 0; i < whoAmI; i++)
			{
				if (Main.projectile[i].active && Main.projectile[i].owner == owner && Main.projectile[i].type == type)
				{
					flag = true;
				}
			}
			if (owner == Main.myPlayer)
			{
				localAI[0] += 1f;
				if (flag)
				{
					localAI[0] += (float)Main.rand.Next(10, 31) * 0.1f;
				}
				float num = localAI[0] / 60f;
				num /= (1f + Main.player[owner].meleeSpeed) / 2f;
				if (type == 541 && num > 3f)
				{
					ai[0] = -1f;
				}
				if (type == 548 && num > 5f)
				{
					ai[0] = -1f;
				}
				if (type == 542 && num > 7f)
				{
					ai[0] = -1f;
				}
				if (type == 543 && num > 6f)
				{
					ai[0] = -1f;
				}
				if (type == 544 && num > 8f)
				{
					ai[0] = -1f;
				}
				if (type == 534 && num > 9f)
				{
					ai[0] = -1f;
				}
				if (type == 564 && num > 11f)
				{
					ai[0] = -1f;
				}
				if (type == 545 && num > 13f)
				{
					ai[0] = -1f;
				}
				if (type == 563 && num > 10f)
				{
					ai[0] = -1f;
				}
				if (type == 562 && num > 8f)
				{
					ai[0] = -1f;
				}
				if (type == 553 && num > 12f)
				{
					ai[0] = -1f;
				}
				if (type == 546 && num > 16f)
				{
					ai[0] = -1f;
				}
				if (type == 552 && num > 15f)
				{
					ai[0] = -1f;
				}
				if (type == 549 && num > 14f)
				{
					ai[0] = -1f;
				}
			}
			if (type == 603 && owner == Main.myPlayer)
			{
				localAI[1] += 1f;
				if (localAI[1] >= 6f)
				{
					float num2 = 400f;
					Vector2 velocity = base.velocity;
					Vector2 vector = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
					vector.Normalize();
					vector *= (float)Main.rand.Next(10, 41) * 0.1f;
					if (Main.rand.Next(3) == 0)
					{
						vector *= 2f;
					}
					velocity *= 0.25f;
					velocity += vector;
					for (int j = 0; j < 200; j++)
					{
						if (Main.npc[j].CanBeChasedBy(this))
						{
							float num3 = Main.npc[j].position.X + (float)(Main.npc[j].width / 2);
							float num4 = Main.npc[j].position.Y + (float)(Main.npc[j].height / 2);
							float num5 = Math.Abs(position.X + (float)(width / 2) - num3) + Math.Abs(position.Y + (float)(height / 2) - num4);
							if (num5 < num2 && Collision.CanHit(position, width, height, Main.npc[j].position, Main.npc[j].width, Main.npc[j].height))
							{
								num2 = num5;
								velocity.X = num3;
								velocity.Y = num4;
								velocity -= base.Center;
								velocity.Normalize();
								velocity *= 8f;
							}
						}
					}
					velocity *= 0.8f;
					NewProjectile(base.Center.X, base.Center.Y, velocity.X, velocity.Y, 604, damage, knockBack, owner);
					localAI[1] = 0f;
				}
			}
			bool flag2 = false;
			if (type >= 556 && type <= 561)
			{
				flag2 = true;
			}
			if (Main.player[owner].dead)
			{
				Kill();
				return;
			}
			if (!flag2 && !flag)
			{
				Main.player[owner].heldProj = whoAmI;
				Main.player[owner].itemAnimation = 2;
				Main.player[owner].itemTime = 2;
				if (position.X + (float)(width / 2) > Main.player[owner].position.X + (float)(Main.player[owner].width / 2))
				{
					Main.player[owner].ChangeDir(1);
					direction = 1;
				}
				else
				{
					Main.player[owner].ChangeDir(-1);
					direction = -1;
				}
			}
			if (base.velocity.HasNaNs())
			{
				Kill();
			}
			timeLeft = 6;
			float num6 = 10f;
			float num7 = 10f;
			float num8 = 3f;
			float num9 = 200f;
			if (type == 541)
			{
				num9 = 130f;
				num7 = 9f;
			}
			else if (type == 548)
			{
				num9 = 170f;
				num7 = 11f;
			}
			else if (type == 542)
			{
				num9 = 195f;
				num7 = 12.5f;
			}
			else if (type == 543)
			{
				num9 = 207f;
				num7 = 12f;
			}
			else if (type == 544)
			{
				num9 = 215f;
				num7 = 13f;
			}
			else if (type == 534)
			{
				num9 = 220f;
				num7 = 13f;
			}
			else if (type == 564)
			{
				num9 = 225f;
				num7 = 14f;
			}
			else if (type == 545)
			{
				if (Main.rand.Next(6) == 0)
				{
					int num10 = Dust.NewDust(position, width, height, 6);
					Main.dust[num10].noGravity = true;
				}
				num9 = 235f;
				num7 = 14f;
			}
			else if (type == 562)
			{
				num9 = 235f;
				num7 = 15f;
			}
			else if (type == 563)
			{
				num9 = 250f;
				num7 = 12f;
			}
			else if (type == 546)
			{
				num9 = 275f;
				num7 = 17f;
			}
			else if (type == 552)
			{
				num9 = 270f;
				num7 = 14f;
			}
			else if (type == 553)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num11 = Dust.NewDust(position, width, height, 6);
					Main.dust[num11].noGravity = true;
					Main.dust[num11].scale = 1.6f;
				}
				num9 = 275f;
				num7 = 15f;
			}
			else if (type == 547)
			{
				num9 = 280f;
				num7 = 17f;
			}
			else if (type == 549)
			{
				num9 = 290f;
				num7 = 16f;
			}
			else if (type == 554)
			{
				num9 = 340f;
				num7 = 16f;
			}
			else if (type == 550 || type == 551)
			{
				num9 = 370f;
				num7 = 16f;
			}
			else if (type == 555)
			{
				num9 = 360f;
				num7 = 16.5f;
			}
			else if (type == 603)
			{
				num9 = 400f;
				num7 = 17.5f;
			}
			if (Main.player[owner].yoyoString)
			{
				num9 = num9 * 1.25f + 30f;
			}
			num9 /= (1f + Main.player[owner].meleeSpeed * 3f) / 4f;
			num7 /= (1f + Main.player[owner].meleeSpeed * 3f) / 4f;
			num6 = 14f - num7 / 2f;
			num8 = 5f + num7 / 2f;
			if (flag)
			{
				num8 += 20f;
			}
			if (ai[0] >= 0f)
			{
				if (base.velocity.Length() > num7)
				{
					base.velocity *= 0.98f;
				}
				bool flag3 = false;
				bool flag4 = false;
				Vector2 vector2 = Main.player[owner].Center - base.Center;
				if (vector2.Length() > num9)
				{
					flag3 = true;
					if ((double)vector2.Length() > (double)num9 * 1.3)
					{
						flag4 = true;
					}
				}
				if (owner == Main.myPlayer)
				{
					if (!Main.player[owner].channel || Main.player[owner].stoned || Main.player[owner].frozen)
					{
						ai[0] = -1f;
						ai[1] = 0f;
						netUpdate = true;
					}
					else
					{
						Vector2 vector3 = Main.ReverseGravitySupport(Main.MouseScreen) + Main.screenPosition;
						float x = vector3.X;
						float y = vector3.Y;
						Vector2 value = new Vector2(x, y) - Main.player[owner].Center;
						if (value.Length() > num9)
						{
							value.Normalize();
							value *= num9;
							value = Main.player[owner].Center + value;
							x = value.X;
							y = value.Y;
						}
						if (ai[0] != x || ai[1] != y)
						{
							Vector2 value2 = new Vector2(x, y);
							Vector2 value3 = value2 - Main.player[owner].Center;
							if (value3.Length() > num9 - 1f)
							{
								value3.Normalize();
								value3 *= num9 - 1f;
								value2 = Main.player[owner].Center + value3;
								x = value2.X;
								y = value2.Y;
							}
							ai[0] = x;
							ai[1] = y;
							netUpdate = true;
						}
					}
				}
				if (flag4 && owner == Main.myPlayer)
				{
					ai[0] = -1f;
					netUpdate = true;
				}
				if (ai[0] >= 0f)
				{
					if (flag3)
					{
						num6 /= 2f;
						num7 *= 2f;
						if (base.Center.X > Main.player[owner].Center.X && base.velocity.X > 0f)
						{
							base.velocity.X *= 0.5f;
						}
						if (base.Center.Y > Main.player[owner].Center.Y && base.velocity.Y > 0f)
						{
							base.velocity.Y *= 0.5f;
						}
						if (base.Center.X < Main.player[owner].Center.X && base.velocity.X > 0f)
						{
							base.velocity.X *= 0.5f;
						}
						if (base.Center.Y < Main.player[owner].Center.Y && base.velocity.Y > 0f)
						{
							base.velocity.Y *= 0.5f;
						}
					}
					Vector2 value4 = new Vector2(ai[0], ai[1]);
					Vector2 value5 = value4 - base.Center;
					base.velocity.Length();
					if (value5.Length() > num8)
					{
						value5.Normalize();
						value5 *= num7;
						base.velocity = (base.velocity * (num6 - 1f) + value5) / num6;
					}
					else if (flag)
					{
						if ((double)base.velocity.Length() < (double)num7 * 0.6)
						{
							value5 = base.velocity;
							value5.Normalize();
							value5 *= num7 * 0.6f;
							base.velocity = (base.velocity * (num6 - 1f) + value5) / num6;
						}
					}
					else
					{
						base.velocity *= 0.8f;
					}
					if (flag && !flag3 && (double)base.velocity.Length() < (double)num7 * 0.6)
					{
						base.velocity.Normalize();
						base.velocity *= num7 * 0.6f;
					}
				}
			}
			else
			{
				num6 = (int)((double)num6 * 0.8);
				num7 *= 1.5f;
				tileCollide = false;
				Vector2 value6 = Main.player[owner].position - base.Center;
				float num12 = value6.Length();
				if (num12 < num7 + 10f || num12 == 0f)
				{
					Kill();
				}
				else
				{
					value6.Normalize();
					value6 *= num7;
					base.velocity = (base.velocity * (num6 - 1f) + value6) / num6;
				}
			}
			rotation += 0.45f;
		}

		public void Kill()
		{
			if (!active)
			{
				return;
			}
			Main.projectileIdentity[owner, identity] = -1;
			int num = timeLeft;
			timeLeft = 0;
			if (type == 634 || type == 635)
			{
				int num2 = Utils.SelectRandom<int>(Main.rand, 242, 73, 72, 71, 255);
				int num3 = 255;
				int num4 = 255;
				int height = 50;
				float num5 = 1.7f;
				float num6 = 0.8f;
				float num7 = 2f;
				Vector2 value = (rotation - (float)Math.PI / 2f).ToRotationVector2();
				Vector2 value2 = value * velocity.Length() * MaxUpdates;
				if (type == 635)
				{
					num3 = 88;
					num4 = 88;
					num2 = Utils.SelectRandom<int>(Main.rand, 242, 59, 88);
					num5 = 3.7f;
					num6 = 1.5f;
					num7 = 2.2f;
					value2 *= 0.5f;
				}
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 14);
				base.position = base.Center;
				base.width = (base.height = height);
				base.Center = base.position;
				maxPenetrate = -1;
				penetrate = -1;
				Damage();
				for (int i = 0; i < 40; i++)
				{
					num2 = Utils.SelectRandom<int>(Main.rand, 242, 73, 72, 71, 255);
					if (type == 635)
					{
						num2 = Utils.SelectRandom<int>(Main.rand, 242, 59, 88);
					}
					int num8 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, num2, 0f, 0f, 200, default(Color), num5);
					Main.dust[num8].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
					Main.dust[num8].noGravity = true;
					Main.dust[num8].velocity *= 3f;
					Main.dust[num8].velocity += value2 * Main.rand.NextFloat();
					num8 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, num3, 0f, 0f, 100, default(Color), num6);
					Main.dust[num8].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
					Main.dust[num8].velocity *= 2f;
					Main.dust[num8].noGravity = true;
					Main.dust[num8].fadeIn = 1f;
					Main.dust[num8].color = Color.Crimson * 0.5f;
					Main.dust[num8].velocity += value2 * Main.rand.NextFloat();
				}
				for (int j = 0; j < 20; j++)
				{
					int num9 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, num4, 0f, 0f, 0, default(Color), num7);
					Main.dust[num9].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * base.width / 3f;
					Main.dust[num9].noGravity = true;
					Main.dust[num9].velocity *= 0.5f;
					Main.dust[num9].velocity += value2 * (0.6f + 0.6f * Main.rand.NextFloat());
				}
			}
			else if (type == 641)
			{
				if (owner == Main.myPlayer)
				{
					for (int k = 0; k < 1000; k++)
					{
						if (Main.projectile[k].active && Main.projectile[k].owner == owner && Main.projectile[k].type == 642)
						{
							Main.projectile[k].Kill();
						}
					}
				}
			}
			else if (type == 643)
			{
				if (owner == Main.myPlayer)
				{
					for (int l = 0; l < 1000; l++)
					{
						if (Main.projectile[l].active && Main.projectile[l].owner == owner && Main.projectile[l].type == 644)
						{
							Main.projectile[l].Kill();
						}
					}
				}
			}
			else if (type == 645)
			{
				bool flag = WorldGen.SolidTile(Framing.GetTileSafely((int)base.position.X / 16, (int)base.position.Y / 16));
				for (int m = 0; m < 4; m++)
				{
					Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
				}
				for (int n = 0; n < 4; n++)
				{
					int num10 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 229, 0f, 0f, 0, default(Color), 2.5f);
					Main.dust[num10].noGravity = true;
					Main.dust[num10].velocity *= 3f;
					if (flag)
					{
						Main.dust[num10].noLight = true;
					}
					num10 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 229, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num10].velocity *= 2f;
					Main.dust[num10].noGravity = true;
					if (flag)
					{
						Main.dust[num10].noLight = true;
					}
				}
				for (int num11 = 0; num11 < 1; num11++)
				{
					int num12 = Gore.NewGore(base.position + new Vector2((float)(base.width * Main.rand.Next(100)) / 100f, (float)(base.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num12].velocity *= 0.3f;
					Main.gore[num12].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num12].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
			}
			else if (type == 636)
			{
				Rectangle hitbox = base.Hitbox;
				for (int num13 = 0; num13 < 6; num13 += 3)
				{
					hitbox.X = (int)oldPos[num13].X;
					hitbox.Y = (int)oldPos[num13].Y;
					for (int num14 = 0; num14 < 5; num14++)
					{
						int num15 = Utils.SelectRandom<int>(Main.rand, 6, 259, 158);
						int num16 = Dust.NewDust(hitbox.TopLeft(), base.width, base.height, num15, 2.5f * (float)direction, -2.5f);
						Main.dust[num16].alpha = 200;
						Main.dust[num16].velocity *= 2.4f;
						Main.dust[num16].scale += Main.rand.NextFloat();
					}
				}
			}
			else if (type == 614)
			{
				for (int num17 = 0; num17 < 10; num17++)
				{
					Dust dust = Main.dust[Dust.NewDust(base.position, base.width, base.height, 229)];
					dust.noGravity = true;
					dust.velocity *= 3f;
				}
			}
			if (type == 644)
			{
				Vector2 spinningpoint = new Vector2(0f, -3f).RotatedByRandom(3.1415927410125732);
				float num18 = Main.rand.Next(7, 13);
				Vector2 value3 = new Vector2(2.1f, 2f);
				Color newColor = Main.hslToRgb(ai[0], 1f, 0.5f);
				newColor.A = byte.MaxValue;
				for (float num19 = 0f; num19 < num18; num19 += 1f)
				{
					int num20 = Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 0, newColor);
					Main.dust[num20].position = base.Center;
					Main.dust[num20].velocity = spinningpoint.RotatedBy((float)Math.PI * 2f * num19 / num18) * value3 * (0.8f + Main.rand.NextFloat() * 0.4f);
					Main.dust[num20].noGravity = true;
					Main.dust[num20].scale = 2f;
					Main.dust[num20].fadeIn = Main.rand.NextFloat() * 2f;
					Dust dust2 = Dust.CloneDust(num20);
					dust2.scale /= 2f;
					dust2.fadeIn /= 2f;
					dust2.color = new Color(255, 255, 255, 255);
				}
				for (float num21 = 0f; num21 < num18; num21 += 1f)
				{
					int num22 = Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 0, newColor);
					Main.dust[num22].position = base.Center;
					Main.dust[num22].velocity = spinningpoint.RotatedBy((float)Math.PI * 2f * num21 / num18) * value3 * (0.8f + Main.rand.NextFloat() * 0.4f);
					Main.dust[num22].velocity *= Main.rand.NextFloat() * 0.8f;
					Main.dust[num22].noGravity = true;
					Main.dust[num22].scale = Main.rand.NextFloat() * 1f;
					Main.dust[num22].fadeIn = Main.rand.NextFloat() * 2f;
					Dust dust3 = Dust.CloneDust(num22);
					dust3.scale /= 2f;
					dust3.fadeIn /= 2f;
					dust3.color = new Color(255, 255, 255, 255);
				}
				if (Main.myPlayer == owner)
				{
					friendly = true;
					int width = base.width;
					int height2 = base.height;
					int num23 = penetrate;
					base.position = base.Center;
					base.width = (base.height = 60);
					base.Center = base.position;
					penetrate = -1;
					maxPenetrate = -1;
					Damage();
					penetrate = num23;
					base.position = base.Center;
					base.width = width;
					base.height = height2;
					base.Center = base.position;
				}
			}
			if (type == 608)
			{
				maxPenetrate = -1;
				penetrate = -1;
				Damage();
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 14);
				for (int num24 = 0; num24 < 4; num24++)
				{
					int num25 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num25].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
				}
				for (int num26 = 0; num26 < 30; num26++)
				{
					int num27 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 200, default(Color), 3.7f);
					Main.dust[num27].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
					Main.dust[num27].noGravity = true;
					Main.dust[num27].velocity *= 3f;
					Main.dust[num27].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].ArmorSetDye(), Main.player[owner]);
					num27 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num27].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
					Main.dust[num27].velocity *= 2f;
					Main.dust[num27].noGravity = true;
					Main.dust[num27].fadeIn = 2.5f;
					Main.dust[num27].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].ArmorSetDye(), Main.player[owner]);
				}
				for (int num28 = 0; num28 < 10; num28++)
				{
					int num29 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num29].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * base.width / 2f;
					Main.dust[num29].noGravity = true;
					Main.dust[num29].velocity *= 3f;
					Main.dust[num29].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].ArmorSetDye(), Main.player[owner]);
				}
				for (int num30 = 0; num30 < 10; num30++)
				{
					int num31 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num31].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * base.width / 2f;
					Main.dust[num31].noGravity = true;
					Main.dust[num31].velocity *= 3f;
				}
				for (int num32 = 0; num32 < 2; num32++)
				{
					int num33 = Gore.NewGore(base.position + new Vector2((float)(base.width * Main.rand.Next(100)) / 100f, (float)(base.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num33].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
					Main.gore[num33].velocity *= 0.3f;
					Main.gore[num33].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num33].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
			}
			else if (type == 617)
			{
				base.position = base.Center;
				base.width = (base.height = 176);
				base.Center = base.position;
				maxPenetrate = -1;
				penetrate = -1;
				Damage();
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 14);
				for (int num34 = 0; num34 < 4; num34++)
				{
					int num35 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 240, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num35].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
				}
				for (int num36 = 0; num36 < 30; num36++)
				{
					int num37 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 62, 0f, 0f, 200, default(Color), 3.7f);
					Main.dust[num37].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
					Main.dust[num37].noGravity = true;
					Main.dust[num37].velocity *= 3f;
					num37 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 90, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num37].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
					Main.dust[num37].velocity *= 2f;
					Main.dust[num37].noGravity = true;
					Main.dust[num37].fadeIn = 1f;
					Main.dust[num37].color = Color.Crimson * 0.5f;
				}
				for (int num38 = 0; num38 < 10; num38++)
				{
					int num39 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 62, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num39].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * base.width / 2f;
					Main.dust[num39].noGravity = true;
					Main.dust[num39].velocity *= 3f;
				}
				for (int num40 = 0; num40 < 10; num40++)
				{
					int num41 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 240, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num41].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * base.width / 2f;
					Main.dust[num41].noGravity = true;
					Main.dust[num41].velocity *= 3f;
				}
				for (int num42 = 0; num42 < 2; num42++)
				{
					int num43 = Gore.NewGore(base.position + new Vector2((float)(base.width * Main.rand.Next(100)) / 100f, (float)(base.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num43].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
					Main.gore[num43].velocity *= 0.3f;
					Main.gore[num43].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num43].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
				if (Main.myPlayer == owner)
				{
					for (int num44 = 0; num44 < 1000; num44++)
					{
						if (Main.projectile[num44].active && Main.projectile[num44].type == 618 && Main.projectile[num44].ai[1] == (float)whoAmI)
						{
							Main.projectile[num44].Kill();
						}
					}
					int num45 = Main.rand.Next(5, 9);
					int num46 = Main.rand.Next(5, 9);
					int num47 = Utils.SelectRandom<int>(Main.rand, 86, 90);
					int num48 = (num47 == 86) ? 90 : 86;
					for (int num49 = 0; num49 < num45; num49++)
					{
						Vector2 vector = base.Center + Utils.RandomVector2(Main.rand, -30f, 30f);
						Vector2 vector2 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
						while (vector2.X == 0f && vector2.Y == 0f)
						{
							vector2 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
						}
						vector2.Normalize();
						if (vector2.Y > 0.2f)
						{
							vector2.Y *= -1f;
						}
						vector2 *= (float)Main.rand.Next(70, 101) * 0.1f;
						NewProjectile(vector.X, vector.Y, vector2.X, vector2.Y, 620, (int)((double)damage * 0.65), knockBack * 0.8f, owner, num47);
					}
					for (int num50 = 0; num50 < num46; num50++)
					{
						Vector2 vector3 = base.Center + Utils.RandomVector2(Main.rand, -30f, 30f);
						Vector2 vector4 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
						while (vector4.X == 0f && vector4.Y == 0f)
						{
							vector4 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
						}
						vector4.Normalize();
						if (vector4.Y > 0.4f)
						{
							vector4.Y *= -1f;
						}
						vector4 *= (float)Main.rand.Next(40, 81) * 0.1f;
						NewProjectile(vector3.X, vector3.Y, vector4.X, vector4.Y, 620, (int)((double)damage * 0.65), knockBack * 0.8f, owner, num48);
					}
				}
			}
			else if (type == 620 || type == 618)
			{
				if (type == 618)
				{
					ai[0] = 86f;
				}
				for (int num51 = 0; num51 < 10; num51++)
				{
					int num52 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, (int)ai[0], velocity.X * 0.1f, velocity.Y * 0.1f, 0, default(Color), 0.5f);
					if (Main.rand.Next(3) == 0)
					{
						Main.dust[num52].fadeIn = 0.75f + (float)Main.rand.Next(-10, 11) * 0.01f;
						Main.dust[num52].scale = 0.25f + (float)Main.rand.Next(-10, 11) * 0.005f;
						Main.dust[num52].type++;
					}
					else
					{
						Main.dust[num52].scale = 1f + (float)Main.rand.Next(-10, 11) * 0.01f;
					}
					Main.dust[num52].noGravity = true;
					Main.dust[num52].velocity *= 1.25f;
					Main.dust[num52].velocity -= base.oldVelocity / 10f;
				}
			}
			else if (type == 619)
			{
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 50);
				for (int num53 = 0; num53 < 20; num53++)
				{
					int num54 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, (int)ai[0], velocity.X * 0.1f, velocity.Y * 0.1f, 0, default(Color), 0.5f);
					if (Main.rand.Next(3) == 0)
					{
						Main.dust[num54].fadeIn = 1.1f + (float)Main.rand.Next(-10, 11) * 0.01f;
						Main.dust[num54].scale = 0.35f + (float)Main.rand.Next(-10, 11) * 0.01f;
						Main.dust[num54].type++;
					}
					else
					{
						Main.dust[num54].scale = 1.2f + (float)Main.rand.Next(-10, 11) * 0.01f;
					}
					Main.dust[num54].noGravity = true;
					Main.dust[num54].velocity *= 2.5f;
					Main.dust[num54].velocity -= base.oldVelocity / 10f;
				}
				if (Main.myPlayer == owner)
				{
					int num55 = Main.rand.Next(3, 6);
					for (int num56 = 0; num56 < num55; num56++)
					{
						Vector2 vector5 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
						while (vector5.X == 0f && vector5.Y == 0f)
						{
							vector5 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
						}
						vector5.Normalize();
						vector5 *= (float)Main.rand.Next(70, 101) * 0.1f;
						NewProjectile(oldPosition.X + (float)(base.width / 2), oldPosition.Y + (float)(base.height / 2), vector5.X, vector5.Y, 620, (int)((double)damage * 0.8), knockBack * 0.8f, owner, ai[0]);
					}
				}
			}
			if (type == 601)
			{
				Color portalColor = PortalHelper.GetPortalColor(owner, (int)ai[0]);
				Color color = portalColor;
				color.A = byte.MaxValue;
				for (int num57 = 0; num57 < 6; num57++)
				{
					Vector2 value4 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (3f * Main.rand.NextFloat());
					Dust dust4 = Main.dust[Dust.NewDust(base.Center, 0, 0, 263)];
					dust4.position = base.Center;
					dust4.velocity = value4 + velocity / 5f;
					dust4.color = color;
					dust4.scale = 2f;
					dust4.noLight = true;
					dust4.noGravity = true;
				}
			}
			if (type == 596)
			{
				base.position = base.Center;
				base.width = (base.height = 60);
				base.Center = base.position;
				int num58 = 40;
				if (Main.expertMode)
				{
					num58 = 30;
				}
				damage = num58;
				Damage();
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 14);
				for (int num59 = 0; num59 < 4; num59++)
				{
					int num60 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num60].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
				}
				for (int num61 = 0; num61 < 20; num61++)
				{
					int num62 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 27, 0f, 0f, 0, default(Color), 2.5f);
					Main.dust[num62].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
					Main.dust[num62].noGravity = true;
					Main.dust[num62].velocity *= 2f;
				}
				for (int num63 = 0; num63 < 10; num63++)
				{
					int num64 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num64].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * base.width / 2f;
					Main.dust[num64].noGravity = true;
					Main.dust[num64].velocity *= 2f;
				}
			}
			else if (type >= 625 && type <= 628)
			{
				for (int num65 = 0; num65 < 6; num65++)
				{
					int num66 = Dust.NewDust(base.position, base.width, base.height, 135, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num66].noGravity = true;
					Main.dust[num66].noLight = true;
				}
			}
			if (type == 631)
			{
				int num67 = Main.rand.Next(5, 10);
				for (int num68 = 0; num68 < num67; num68++)
				{
					int num69 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100);
					Main.dust[num69].velocity *= 1.6f;
					Main.dust[num69].velocity.Y -= 1f;
					Main.dust[num69].position -= Vector2.One * 4f;
					Main.dust[num69].position = Vector2.Lerp(Main.dust[num69].position, base.Center, 0.5f);
					Main.dust[num69].noGravity = true;
				}
			}
			if (type == 539)
			{
				base.position = base.Center;
				base.width = (base.height = 80);
				base.Center = base.position;
				Damage();
				Main.PlaySound(4, (int)base.position.X, (int)base.position.Y, 7);
				for (int num70 = 0; num70 < 4; num70++)
				{
					int num71 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num71].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
				}
				for (int num72 = 0; num72 < 20; num72++)
				{
					int num73 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 176, 0f, 0f, 200, default(Color), 3.7f);
					Main.dust[num73].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
					Main.dust[num73].noGravity = true;
					Main.dust[num73].velocity *= 3f;
				}
				for (int num74 = 0; num74 < 20; num74++)
				{
					int num75 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 180, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num75].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * base.width / 2f;
					Main.dust[num75].noGravity = true;
					Main.dust[num75].velocity *= 3f;
				}
				for (int num76 = 0; num76 < 10; num76++)
				{
					int num77 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num77].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * base.width / 2f;
					Main.dust[num77].noGravity = true;
					Main.dust[num77].velocity *= 3f;
				}
			}
			else if (type == 585)
			{
				Main.PlaySound(0, (int)base.position.X, (int)base.position.Y, 27);
				for (int num78 = 0; num78 < 20; num78++)
				{
					int num79 = Dust.NewDust(base.position, base.width, base.height, 26, 0f, 0f, 100);
					Main.dust[num79].noGravity = true;
					Main.dust[num79].velocity *= 1.2f;
					Main.dust[num79].scale = 1.3f;
					Main.dust[num79].velocity -= base.oldVelocity * 0.3f;
					num79 = Dust.NewDust(new Vector2(base.position.X + 4f, base.position.Y + 4f), base.width - 8, base.height - 8, 27, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num79].noGravity = true;
					Main.dust[num79].velocity *= 3f;
				}
			}
			else if (type == 590)
			{
				Main.PlaySound(0, (int)base.position.X, (int)base.position.Y, 27);
				for (int num80 = 0; num80 < 10; num80++)
				{
					int num81 = Dust.NewDust(base.position, base.width, base.height, 165, 0f, 0f, 50, default(Color), 1.5f);
					Main.dust[num81].velocity *= 2f;
					Main.dust[num81].noGravity = true;
				}
				float num82 = 0.6f + Main.rand.NextFloat() * 0.4f;
				int num83 = Gore.NewGore(base.position, Vector2.Zero, 375, num82);
				Main.gore[num83].velocity *= 0.3f;
				num83 = Gore.NewGore(base.position, Vector2.Zero, 376, num82);
				Main.gore[num83].velocity *= 0.3f;
				num83 = Gore.NewGore(base.position, Vector2.Zero, 377, num82);
				Main.gore[num83].velocity *= 0.3f;
			}
			else if (type == 587)
			{
				Color newColor2 = Main.hslToRgb(ai[1], 1f, 0.5f);
				newColor2.A = 200;
				Main.PlaySound(0, (int)base.position.X, (int)base.position.Y);
				for (int num84 = 0; num84 < 10; num84++)
				{
					int num85 = Dust.NewDust(base.position, base.width, base.height, 76, 0f, 0f, 0, newColor2);
					Main.dust[num85].noGravity = true;
					Main.dust[num85].velocity *= 1.2f;
					Main.dust[num85].scale = 0.9f;
					Main.dust[num85].velocity -= base.oldVelocity * 0.3f;
					num85 = Dust.NewDust(new Vector2(base.position.X + 4f, base.position.Y + 4f), base.width - 8, base.height - 8, 76, 0f, 0f, 0, newColor2, 1.1f);
					Main.dust[num85].noGravity = true;
					Main.dust[num85].velocity *= 2f;
				}
			}
			else if (type == 572)
			{
				for (int num86 = 0; num86 < 15; num86++)
				{
					int num87 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 40, velocity.X * 0.1f, velocity.Y * 0.1f, 100);
					Main.dust[num87].velocity *= 3f;
					Main.dust[num87].noGravity = true;
					Main.dust[num87].scale = 1.25f;
					Main.dust[num87].position = (base.Center + base.position) / 2f;
				}
			}
			else if (type == 581)
			{
				for (int num88 = 0; num88 < 30; num88++)
				{
					int num89 = Utils.SelectRandom<int>(Main.rand, 229, 229, 161);
					Dust dust5 = Main.dust[Dust.NewDust(base.position, base.width, base.height, num89)];
					dust5.noGravity = true;
					dust5.scale = 1.25f + Main.rand.NextFloat();
					dust5.fadeIn = 0.25f;
					dust5.velocity *= 2f;
					dust5.noLight = true;
				}
			}
			if (type == 405)
			{
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 54);
				Vector2 center = base.Center;
				for (int num90 = 0; num90 < 20; num90++)
				{
					int num91 = 10;
					int num92 = Dust.NewDust(base.Center - Vector2.One * num91, num91 * 2, num91 * 2, 212);
					Dust dust6 = Main.dust[num92];
					Vector2 value5 = Vector2.Normalize(dust6.position - base.Center);
					dust6.position = base.Center + value5 * num91 * scale;
					if (num90 < 30)
					{
						dust6.velocity = value5 * dust6.velocity.Length();
					}
					else
					{
						dust6.velocity = value5 * Main.rand.Next(45, 91) / 10f;
					}
					dust6.color = Main.hslToRgb((float)(0.40000000596046448 + Main.rand.NextDouble() * 0.20000000298023224), 0.9f, 0.5f);
					dust6.color = Color.Lerp(dust6.color, Color.White, 0.3f);
					dust6.noGravity = true;
					dust6.scale = 0.7f;
				}
			}
			if (type == 501)
			{
				Main.PlaySound(13, (int)base.position.X, (int)base.position.Y);
				int num93 = 20;
				base.position.X -= num93;
				base.position.Y -= num93;
				base.width += num93 * 2;
				base.height += num93 * 2;
				num93 += 20;
				for (int num94 = 0; num94 < 20; num94++)
				{
					int num95 = Dust.NewDust(base.position, base.width, base.height, 188, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num95].velocity *= 0.5f;
				}
				for (int num96 = 0; num96 < 5; num96++)
				{
					int num97 = Gore.NewGore(new Vector2(base.position.X + (float)Main.rand.Next(base.width), base.position.Y + (float)Main.rand.Next(base.height)), default(Vector2), Main.rand.Next(435, 438));
					Main.gore[num97].velocity *= 0.5f;
					switch (num96)
					{
					case 0:
						Main.gore[num97].velocity.X += 1f;
						Main.gore[num97].velocity.Y += 1f;
						break;
					case 1:
						Main.gore[num97].velocity.X -= 1f;
						Main.gore[num97].velocity.Y += 1f;
						break;
					case 2:
						Main.gore[num97].velocity.X += 1f;
						Main.gore[num97].velocity.Y -= 1f;
						break;
					default:
						Main.gore[num97].velocity.X -= 1f;
						Main.gore[num97].velocity.Y -= 1f;
						break;
					}
					Main.gore[num97].velocity *= 0.5f;
				}
				base.position.X -= num93;
				base.position.Y -= num93;
				base.width += num93 * 2;
				base.height += num93 * 2;
				Damage();
			}
			if (type == 410)
			{
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 54);
				Vector2 center2 = base.Center;
				for (int num98 = 0; num98 < 10; num98++)
				{
					int num99 = (int)(10f * ai[1]);
					int num100 = Dust.NewDust(base.Center - Vector2.One * num99, num99 * 2, num99 * 2, 212);
					Dust dust7 = Main.dust[num100];
					Vector2 value6 = Vector2.Normalize(dust7.position - base.Center);
					dust7.position = base.Center + value6 * num99 * scale;
					if (num98 < 30)
					{
						dust7.velocity = value6 * dust7.velocity.Length();
					}
					else
					{
						dust7.velocity = value6 * Main.rand.Next(45, 91) / 10f;
					}
					dust7.color = Main.hslToRgb((float)(0.40000000596046448 + Main.rand.NextDouble() * 0.20000000298023224), 0.9f, 0.5f);
					dust7.color = Color.Lerp(dust7.color, Color.White, 0.3f);
					dust7.noGravity = true;
					dust7.scale = 0.7f;
				}
			}
			if (type == 629 && Main.netMode != 1)
			{
				switch (Main.npc[(int)ai[0]].type)
				{
				case 517:
					if (NPC.ShieldStrengthTowerSolar != 0)
					{
						Main.npc[(int)ai[0]].ai[3] = 1f;
					}
					NPC.ShieldStrengthTowerSolar = (int)MathHelper.Clamp(NPC.ShieldStrengthTowerSolar - 1, 0f, NPC.ShieldStrengthTowerMax);
					break;
				case 422:
					if (NPC.ShieldStrengthTowerVortex != 0)
					{
						Main.npc[(int)ai[0]].ai[3] = 1f;
					}
					NPC.ShieldStrengthTowerVortex = (int)MathHelper.Clamp(NPC.ShieldStrengthTowerVortex - 1, 0f, NPC.ShieldStrengthTowerMax);
					break;
				case 507:
					if (NPC.ShieldStrengthTowerNebula != 0)
					{
						Main.npc[(int)ai[0]].ai[3] = 1f;
					}
					NPC.ShieldStrengthTowerNebula = (int)MathHelper.Clamp(NPC.ShieldStrengthTowerNebula - 1, 0f, NPC.ShieldStrengthTowerMax);
					break;
				case 493:
					if (NPC.ShieldStrengthTowerStardust != 0)
					{
						Main.npc[(int)ai[0]].ai[3] = 1f;
					}
					NPC.ShieldStrengthTowerStardust = (int)MathHelper.Clamp(NPC.ShieldStrengthTowerStardust - 1, 0f, NPC.ShieldStrengthTowerMax);
					break;
				}
				Main.npc[(int)ai[0]].netUpdate = true;
				NetMessage.SendData(101);
			}
			if (aiStyle == 105 && owner == Main.myPlayer && ai[1] == 0f)
			{
				Vector2 vector6 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
				vector6.Normalize();
				vector6 *= 0.3f;
				NewProjectile(base.Center.X, base.Center.Y, vector6.X, vector6.Y, Main.rand.Next(569, 572), damage, 0f, owner);
			}
			if (type == 452)
			{
				Main.PlaySound(29, (int)base.position.X, (int)base.position.Y, 103);
				base.position = base.Center;
				base.width = (base.height = 144);
				base.position.X -= base.width / 2;
				base.position.Y -= base.height / 2;
				for (int num101 = 0; num101 < 4; num101++)
				{
					Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
				}
				for (int num102 = 0; num102 < 40; num102++)
				{
					int num103 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 229, 0f, 0f, 0, default(Color), 2.5f);
					Main.dust[num103].noGravity = true;
					Main.dust[num103].velocity *= 3f;
					num103 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 229, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num103].velocity *= 2f;
					Main.dust[num103].noGravity = true;
				}
				for (int num104 = 0; num104 < 1; num104++)
				{
					int num105 = Gore.NewGore(base.position + new Vector2((float)(base.width * Main.rand.Next(100)) / 100f, (float)(base.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num105].velocity *= 0.3f;
					Main.gore[num105].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num105].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
				Damage();
			}
			if (type == 454)
			{
				Main.PlaySound(4, (int)base.position.X, (int)base.position.Y, 6);
				base.position = base.Center;
				base.width = (base.height = 208);
				base.position.X -= base.width / 2;
				base.position.Y -= base.height / 2;
				for (int num106 = 0; num106 < 7; num106++)
				{
					int num107 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num107].position = new Vector2(base.width / 2, 0f).RotatedBy(6.2831854820251465 * Main.rand.NextDouble()) * (float)Main.rand.NextDouble() + base.Center;
				}
				for (int num108 = 0; num108 < 60; num108++)
				{
					int num109 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 229, 0f, 0f, 0, default(Color), 2.5f);
					Main.dust[num109].position = new Vector2(base.width / 2, 0f).RotatedBy(6.2831854820251465 * Main.rand.NextDouble()) * (float)Main.rand.NextDouble() + base.Center;
					Main.dust[num109].noGravity = true;
					Main.dust[num109].velocity *= 1f;
					num109 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 229, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num109].position = new Vector2(base.width / 2, 0f).RotatedBy(6.2831854820251465 * Main.rand.NextDouble()) * (float)Main.rand.NextDouble() + base.Center;
					Main.dust[num109].velocity *= 1f;
					Main.dust[num109].noGravity = true;
				}
				for (int num110 = 0; num110 < 3; num110++)
				{
					int num111 = Gore.NewGore(base.position + new Vector2((float)(base.width * Main.rand.Next(100)) / 100f, (float)(base.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num111].velocity *= 0.3f;
					Main.gore[num111].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num111].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
				Damage();
			}
			if (type == 467)
			{
				base.position = base.Center;
				base.width = (base.height = 176);
				base.Center = base.position;
				Damage();
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 14);
				for (int num112 = 0; num112 < 4; num112++)
				{
					int num113 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num113].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
				}
				for (int num114 = 0; num114 < 30; num114++)
				{
					int num115 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 200, default(Color), 3.7f);
					Main.dust[num115].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
					Main.dust[num115].noGravity = true;
					Main.dust[num115].velocity *= 3f;
					num115 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num115].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
					Main.dust[num115].velocity *= 2f;
					Main.dust[num115].noGravity = true;
					Main.dust[num115].fadeIn = 2.5f;
				}
				for (int num116 = 0; num116 < 10; num116++)
				{
					int num117 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num117].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * base.width / 2f;
					Main.dust[num117].noGravity = true;
					Main.dust[num117].velocity *= 3f;
				}
				for (int num118 = 0; num118 < 10; num118++)
				{
					int num119 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num119].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * base.width / 2f;
					Main.dust[num119].noGravity = true;
					Main.dust[num119].velocity *= 3f;
				}
				for (int num120 = 0; num120 < 2; num120++)
				{
					int num121 = Gore.NewGore(base.position + new Vector2((float)(base.width * Main.rand.Next(100)) / 100f, (float)(base.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num121].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
					Main.gore[num121].velocity *= 0.3f;
					Main.gore[num121].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num121].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
			}
			if (type == 468)
			{
				base.position = base.Center;
				base.width = (base.height = 176);
				base.Center = base.position;
				Damage();
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 14);
				for (int num122 = 0; num122 < 4; num122++)
				{
					int num123 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num123].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
				}
				for (int num124 = 0; num124 < 20; num124++)
				{
					int num125 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 27, 0f, 0f, 200, default(Color), 3.7f);
					Main.dust[num125].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
					Main.dust[num125].noGravity = true;
					Main.dust[num125].velocity *= 3f;
					num125 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 27, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num125].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
					Main.dust[num125].velocity *= 2f;
					Main.dust[num125].noGravity = true;
					Main.dust[num125].fadeIn = 2.5f;
				}
				for (int num126 = 0; num126 < 10; num126++)
				{
					int num127 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 27, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num127].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * base.width / 2f;
					Main.dust[num127].noGravity = true;
					Main.dust[num127].velocity *= 3f;
				}
				for (int num128 = 0; num128 < 10; num128++)
				{
					int num129 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num129].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * base.width / 2f;
					Main.dust[num129].noGravity = true;
					Main.dust[num129].velocity *= 3f;
				}
				for (int num130 = 0; num130 < 2; num130++)
				{
					int num131 = Gore.NewGore(base.position + new Vector2((float)(base.width * Main.rand.Next(100)) / 100f, (float)(base.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num131].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
					Main.gore[num131].velocity *= 0.3f;
					Main.gore[num131].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num131].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
			}
			if (type == 485)
			{
				for (int num132 = 0; num132 < 15; num132++)
				{
					int num133 = Dust.NewDust(base.position, base.width, base.height, 6);
					Main.dust[num133].noGravity = true;
					Main.dust[num133].velocity -= base.oldVelocity * Main.rand.Next(20, 60) * 0.01f;
				}
			}
			else if (type == 484)
			{
				for (int num134 = 0; num134 < 5; num134++)
				{
					int num135 = Dust.NewDust(base.position, base.width, base.height, 78);
					Main.dust[num135].noGravity = true;
					Main.dust[num135].velocity -= base.oldVelocity / 5f;
					Main.dust[num135].scale = 0.85f;
				}
			}
			else if (type == 483)
			{
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 14);
				if (owner == Main.myPlayer)
				{
					int num136 = Main.rand.Next(4, 8);
					int[] array = new int[num136];
					int num137 = 0;
					for (int num138 = 0; num138 < 200; num138++)
					{
						if (Main.npc[num138].CanBeChasedBy(this, true) && Collision.CanHitLine(base.position, base.width, base.height, Main.npc[num138].position, Main.npc[num138].width, Main.npc[num138].height))
						{
							array[num137] = num138;
							num137++;
							if (num137 == num136)
							{
								break;
							}
						}
					}
					if (num137 > 1)
					{
						for (int num139 = 0; num139 < 100; num139++)
						{
							int num140 = Main.rand.Next(num137);
							int num141;
							for (num141 = num140; num141 == num140; num141 = Main.rand.Next(num137))
							{
							}
							int num142 = array[num140];
							array[num140] = array[num141];
							array[num141] = num142;
						}
					}
					Vector2 vector7 = new Vector2(-1f, -1f);
					for (int num143 = 0; num143 < num137; num143++)
					{
						Vector2 vector8 = Main.npc[array[num143]].Center - base.Center;
						vector8.Normalize();
						vector7 += vector8;
					}
					vector7.Normalize();
					for (int num144 = 0; num144 < num136; num144++)
					{
						float num145 = Main.rand.Next(8, 15);
						Vector2 vector9 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
						vector9.Normalize();
						if (num137 > 0)
						{
							vector9 += vector7;
							vector9.Normalize();
						}
						vector9 *= num145;
						if (num137 > 0)
						{
							num137--;
							vector9 = Main.npc[array[num137]].Center - base.Center;
							vector9.Normalize();
							vector9 *= num145;
						}
						NewProjectile(base.Center.X, base.Center.Y, vector9.X, vector9.Y, 484, (int)((double)damage * 0.7), knockBack * 0.7f, owner);
					}
				}
				for (int num146 = 0; num146 < 20; num146++)
				{
					int num147 = Dust.NewDust(base.position, base.width, base.height, 78);
					Main.dust[num147].noGravity = true;
					Main.dust[num147].velocity *= 4f;
				}
				for (int num148 = 0; num148 < 7; num148++)
				{
					int num149 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num149].velocity *= 0.9f;
					Main.dust[num149].scale = 0.9f;
				}
				for (int num150 = 0; num150 < 3; num150++)
				{
					int num151 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 2.5f);
					Main.dust[num151].noGravity = true;
					Main.dust[num151].velocity *= 3f;
					num151 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num151].velocity *= 2f;
				}
				int num152 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
				Main.gore[num152].velocity *= 0.3f;
				Main.gore[num152].velocity.X += Main.rand.Next(-1, 2);
				Main.gore[num152].velocity.Y += Main.rand.Next(-1, 2);
				if (owner == Main.myPlayer)
				{
					int num153 = 100;
					base.position.X -= num153 / 2;
					base.position.Y -= num153 / 2;
					base.width += num153;
					base.height++;
					penetrate = -1;
					Damage();
				}
			}
			if (type == 523)
			{
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 54);
				for (int num154 = 0; num154 < 25; num154++)
				{
					int num155 = Dust.NewDust(base.position, base.width, base.height, 256);
					Main.dust[num155].noGravity = true;
					Main.dust[num155].position = (Main.dust[num155].position + base.position) / 2f;
					Main.dust[num155].velocity = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
					Main.dust[num155].velocity.Normalize();
					Main.dust[num155].velocity *= (float)Main.rand.Next(1, 30) * 0.1f;
					Main.dust[num155].alpha = alpha;
				}
			}
			else if (type == 522)
			{
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 118);
				for (int num156 = 0; num156 < 10; num156++)
				{
					int num157 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 254, velocity.X * 0.1f, velocity.Y * 0.1f, 0, default(Color), 0.5f);
					if (Main.rand.Next(3) == 0)
					{
						Main.dust[num157].fadeIn = 0.75f + (float)Main.rand.Next(-10, 11) * 0.01f;
						Main.dust[num157].scale = 0.25f + (float)Main.rand.Next(-10, 11) * 0.005f;
						Main.dust[num157].type++;
					}
					else
					{
						Main.dust[num157].scale = 1f + (float)Main.rand.Next(-10, 11) * 0.01f;
					}
					Main.dust[num157].noGravity = true;
					Main.dust[num157].velocity *= 1.25f;
					Main.dust[num157].velocity -= base.oldVelocity / 10f;
				}
			}
			else if (type == 521)
			{
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 110);
				for (int num158 = 0; num158 < 20; num158++)
				{
					int num159 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 254, velocity.X * 0.1f, velocity.Y * 0.1f, 0, default(Color), 0.5f);
					if (Main.rand.Next(3) == 0)
					{
						Main.dust[num159].fadeIn = 1.1f + (float)Main.rand.Next(-10, 11) * 0.01f;
						Main.dust[num159].scale = 0.35f + (float)Main.rand.Next(-10, 11) * 0.01f;
						Main.dust[num159].type++;
					}
					else
					{
						Main.dust[num159].scale = 1.2f + (float)Main.rand.Next(-10, 11) * 0.01f;
					}
					Main.dust[num159].noGravity = true;
					Main.dust[num159].velocity *= 2.5f;
					Main.dust[num159].velocity -= base.oldVelocity / 10f;
				}
				if (Main.myPlayer == owner)
				{
					int num160 = Main.rand.Next(3, 6);
					for (int num161 = 0; num161 < num160; num161++)
					{
						Vector2 vector10 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
						while (vector10.X == 0f && vector10.Y == 0f)
						{
							vector10 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
						}
						vector10.Normalize();
						vector10 *= (float)Main.rand.Next(70, 101) * 0.1f;
						NewProjectile(oldPosition.X + (float)(base.width / 2), oldPosition.Y + (float)(base.height / 2), vector10.X, vector10.Y, 522, (int)((double)damage * 0.8), knockBack * 0.8f, owner);
					}
				}
			}
			if (type == 520)
			{
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 50);
				for (int num162 = 0; num162 < 10; num162++)
				{
					int num163 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 252, velocity.X * 0.1f, velocity.Y * 0.1f, 0, default(Color), 0.75f);
					Main.dust[num163].noGravity = true;
					Main.dust[num163].velocity -= base.oldVelocity / 3f;
				}
			}
			if (type == 459)
			{
				int num164 = 3;
				int num165 = 10;
				int num166 = 0;
				if (scale >= 1f)
				{
					base.position = base.Center;
					base.width = (base.height = 144);
					base.Center = base.position;
					num164 = 7;
					num165 = 30;
					num166 = 2;
					Damage();
				}
				for (int num167 = 0; num167 < num164; num167++)
				{
					int num168 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num168].position = new Vector2(base.width / 2, 0f).RotatedBy(6.2831854820251465 * Main.rand.NextDouble()) * (float)Main.rand.NextDouble() + base.Center;
				}
				for (int num169 = 0; num169 < num165; num169++)
				{
					int num170 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 226, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num170].position = new Vector2(base.width / 2, 0f).RotatedBy(6.2831854820251465 * Main.rand.NextDouble()) * (float)Main.rand.NextDouble() + base.Center;
					Main.dust[num170].noGravity = true;
					Main.dust[num170].velocity *= 1f;
				}
				for (int num171 = 0; num171 < num166; num171++)
				{
					int num172 = Gore.NewGore(base.position + new Vector2((float)(base.width * Main.rand.Next(100)) / 100f, (float)(base.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num172].velocity *= 0.3f;
					Main.gore[num172].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num172].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
			}
			if (owner != Main.myPlayer && type == 453 && Main.player[owner].mount.AbilityActive)
			{
				Main.player[owner].mount.UseAbility(Main.player[owner], base.position, false);
			}
			if (type == 441)
			{
				Main.player[owner].mount.StopAbilityCharge();
			}
			if (type == 444)
			{
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 96);
				int num173 = Main.rand.Next(5, 9);
				for (int num174 = 0; num174 < num173; num174++)
				{
					int num175 = Dust.NewDust(base.Center, 0, 0, 171, 0f, 0f, 100, default(Color), 1.4f);
					Main.dust[num175].velocity *= 0.8f;
					Main.dust[num175].position = Vector2.Lerp(Main.dust[num175].position, base.Center, 0.5f);
					Main.dust[num175].noGravity = true;
				}
				if (owner == Main.myPlayer)
				{
					Vector2 value7 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY);
					if (Main.player[owner].gravDir == -1f)
					{
						value7.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y;
					}
					Vector2 vector11 = Vector2.Normalize(value7 - base.Center);
					vector11 *= localAI[1];
					NewProjectile(base.Center.X, base.Center.Y, vector11.X, vector11.Y, (int)localAI[0], damage, knockBack, owner);
				}
			}
			if (type == 472)
			{
				for (int num176 = 0; num176 < 20; num176++)
				{
					int num177 = Dust.NewDust(base.position, base.width, base.height, 30);
					Main.dust[num177].noGravity = true;
					Main.dust[num177].velocity *= 0.45f;
					Main.dust[num177].velocity += velocity * 0.9f;
				}
			}
			if (type == 639 || type == 640)
			{
				int num178 = Main.rand.Next(5, 10);
				for (int num179 = 0; num179 < num178; num179++)
				{
					int num180 = Dust.NewDust(base.Center, 0, 0, 220, 0f, 0f, 100, default(Color), 0.5f);
					Main.dust[num180].velocity *= 1.6f;
					Main.dust[num180].velocity.Y -= 1f;
					Main.dust[num180].position = Vector2.Lerp(Main.dust[num180].position, base.Center, 0.5f);
					Main.dust[num180].noGravity = true;
				}
				if (owner == Main.myPlayer && type == 639)
				{
					int num181 = num + 1;
					int nextSlot = GetNextSlot();
					if (Main.ProjectileUpdateLoopIndex < nextSlot && Main.ProjectileUpdateLoopIndex != -1)
					{
						num181++;
					}
					Vector2 vector12 = new Vector2(ai[0], ai[1]);
					NewProjectile(localAI[0], localAI[1], vector12.X, vector12.Y, 640, damage, knockBack, owner, 0f, num181);
				}
			}
			if (type == 435)
			{
				int num182 = Main.rand.Next(5, 10);
				for (int num183 = 0; num183 < num182; num183++)
				{
					int num184 = Dust.NewDust(base.Center, 0, 0, 226, 0f, 0f, 100, default(Color), 0.5f);
					Main.dust[num184].velocity *= 1.6f;
					Main.dust[num184].velocity.Y -= 1f;
					Main.dust[num184].position = Vector2.Lerp(Main.dust[num184].position, base.Center, 0.5f);
					Main.dust[num184].noGravity = true;
				}
			}
			if (type == 436)
			{
				int num185 = Main.rand.Next(5, 10);
				for (int num186 = 0; num186 < num185; num186++)
				{
					int num187 = Dust.NewDust(base.Center, 0, 0, 220, 0f, 0f, 100, default(Color), 0.5f);
					Main.dust[num187].velocity *= 1.6f;
					Main.dust[num187].velocity.Y -= 1f;
					Main.dust[num187].position = Vector2.Lerp(Main.dust[num187].position, base.Center, 0.5f);
					Main.dust[num187].noGravity = true;
				}
			}
			if (type == 462)
			{
				int num188 = Main.rand.Next(5, 10);
				for (int num189 = 0; num189 < num188; num189++)
				{
					int num190 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100, default(Color), 0.5f);
					Main.dust[num190].velocity *= 1.6f;
					Main.dust[num190].velocity.Y -= 1f;
					Main.dust[num190].position -= Vector2.One * 4f;
					Main.dust[num190].position = Vector2.Lerp(Main.dust[num190].position, base.Center, 0.5f);
					Main.dust[num190].noGravity = true;
				}
			}
			if (type == 442)
			{
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 94);
				int num191 = Main.rand.Next(3, 7);
				for (int num192 = 0; num192 < num191; num192++)
				{
					int num193 = Dust.NewDust(base.position, base.width, base.height, 135, 0f, 0f, 100, default(Color), 2.1f);
					Main.dust[num193].velocity *= 2f;
					Main.dust[num193].noGravity = true;
				}
				if (Main.myPlayer == owner)
				{
					Rectangle value8 = new Rectangle((int)base.Center.X - 40, (int)base.Center.Y - 40, 80, 80);
					for (int num194 = 0; num194 < 1000; num194++)
					{
						if (num194 != whoAmI && Main.projectile[num194].active && Main.projectile[num194].owner == owner && Main.projectile[num194].type == 443 && Main.projectile[num194].getRect().Intersects(value8))
						{
							Main.projectile[num194].ai[1] = 1f;
							Main.projectile[num194].velocity = (base.Center - Main.projectile[num194].Center) / 5f;
							Main.projectile[num194].netUpdate = true;
						}
					}
					NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 443, damage, 0f, owner);
				}
			}
			if (type == 440)
			{
				int num195 = Main.rand.Next(3, 7);
				for (int num196 = 0; num196 < num195; num196++)
				{
					int num197 = Dust.NewDust(base.Center - velocity / 2f, 0, 0, 135, 0f, 0f, 100, default(Color), 2.1f);
					Main.dust[num197].velocity *= 2f;
					Main.dust[num197].noGravity = true;
				}
			}
			if (type == 606)
			{
				int num198 = Main.rand.Next(3, 7);
				for (int num199 = 0; num199 < num198; num199++)
				{
					int num200 = Dust.NewDust(base.Center - velocity / 2f, 0, 0, 182, 0f, 0f, 100, default(Color), 1.6f);
					Main.dust[num200].velocity *= 1.5f;
					Main.dust[num200].noGravity = true;
				}
			}
			if (type == 449)
			{
				int num201 = Main.rand.Next(3, 7);
				for (int num202 = 0; num202 < num201; num202++)
				{
					int num203 = Dust.NewDust(base.Center - velocity / 2f, 0, 0, 228, 0f, 0f, 100, default(Color), 2.1f);
					Main.dust[num203].velocity *= 2f;
					Main.dust[num203].noGravity = true;
				}
			}
			if (type == 495)
			{
				for (int num204 = 0; num204 < 15; num204++)
				{
					int num205 = Dust.NewDust(base.Center, 10, 10, 27);
					Main.dust[num205].noGravity = true;
					Main.dust[num205].velocity -= base.oldVelocity * 0.3f;
				}
			}
			if (type == 497)
			{
				for (int num206 = 0; num206 < 15; num206++)
				{
					int num207 = Dust.NewDust(base.Center, 10, 10, 27);
					Main.dust[num207].noGravity = true;
					Main.dust[num207].velocity *= 2f;
					Main.dust[num207].velocity -= base.oldVelocity * 0.3f;
					Main.dust[num207].scale += (float)Main.rand.Next(150) * 0.001f;
				}
			}
			if (type == 448)
			{
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 14);
				base.position = base.Center;
				base.width = (base.height = 112);
				base.position.X -= base.width / 2;
				base.position.Y -= base.height / 2;
				for (int num208 = 0; num208 < 4; num208++)
				{
					Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
				}
				for (int num209 = 0; num209 < 40; num209++)
				{
					int num210 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 228, 0f, 0f, 0, default(Color), 2.5f);
					Main.dust[num210].noGravity = true;
					Main.dust[num210].velocity *= 3f;
					num210 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 228, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num210].velocity *= 2f;
					Main.dust[num210].noGravity = true;
				}
				for (int num211 = 0; num211 < 1; num211++)
				{
					int num212 = Gore.NewGore(base.position + new Vector2((float)(base.width * Main.rand.Next(100)) / 100f, (float)(base.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num212].velocity *= 0.3f;
					Main.gore[num212].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num212].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
				Damage();
			}
			if (type == 616)
			{
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 14);
				base.position = base.Center;
				base.width = (base.height = 80);
				base.position.X -= base.width / 2;
				base.position.Y -= base.height / 2;
				for (int num213 = 0; num213 < 4; num213++)
				{
					Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
				}
				for (int num214 = 0; num214 < 40; num214++)
				{
					int num215 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 229, 0f, 0f, 200, default(Color), 2.5f);
					Main.dust[num215].noGravity = true;
					Main.dust[num215].velocity *= 2f;
					num215 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 229, 0f, 0f, 200, default(Color), 1.5f);
					Main.dust[num215].velocity *= 1.2f;
					Main.dust[num215].noGravity = true;
				}
				for (int num216 = 0; num216 < 1; num216++)
				{
					int num217 = Gore.NewGore(base.position + new Vector2((float)(base.width * Main.rand.Next(100)) / 100f, (float)(base.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num217].velocity *= 0.3f;
					Main.gore[num217].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num217].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
				Damage();
			}
			if (type == 502)
			{
				Vector2 value9 = new Vector2(base.width, base.height) / 2f;
				for (int num218 = 0; num218 < oldPos.Length; num218++)
				{
					if (!(oldPos[num218] == Vector2.Zero))
					{
						int num219 = Dust.NewDust(oldPos[num218] + value9, 0, 0, 66, 0f, 0f, 150, Color.Transparent, 0.7f);
						Main.dust[num219].color = Main.hslToRgb(Main.rand.NextFloat(), 1f, 0.5f);
						Main.dust[num219].noGravity = true;
					}
				}
			}
			if (type == 510)
			{
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 107);
				Gore.NewGore(base.Center, -base.oldVelocity * 0.2f, 704);
				Gore.NewGore(base.Center, -base.oldVelocity * 0.2f, 705);
				if (owner == Main.myPlayer)
				{
					int num220 = Main.rand.Next(20, 31);
					for (int num221 = 0; num221 < num220; num221++)
					{
						Vector2 vector13 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
						vector13.Normalize();
						vector13 *= (float)Main.rand.Next(10, 201) * 0.01f;
						NewProjectile(base.Center.X, base.Center.Y, vector13.X, vector13.Y, 511 + Main.rand.Next(3), damage, 1f, owner, 0f, Main.rand.Next(-45, 1));
					}
				}
			}
			if (type == 408)
			{
				for (int num222 = 0; num222 < 15; num222++)
				{
					int num223 = Dust.NewDust(base.Center - Vector2.One * 10f, 50, 50, 5, 0f, -2f);
					Main.dust[num223].velocity /= 2f;
				}
				int num224 = 0;
				int num225 = 10;
				num224 = Gore.NewGore(base.Center, velocity * 0.8f, 584);
				Main.gore[num224].timeLeft /= num225;
				num224 = Gore.NewGore(base.Center, velocity * 0.9f, 585);
				Main.gore[num224].timeLeft /= num225;
				num224 = Gore.NewGore(base.Center, velocity * 1f, 586);
				Main.gore[num224].timeLeft /= num225;
			}
			if (type == 385)
			{
				Main.PlaySound(4, (int)base.Center.X, (int)base.Center.Y, 19);
				int num226 = 36;
				for (int num227 = 0; num227 < num226; num227++)
				{
					Vector2 spinningpoint2 = Vector2.Normalize(velocity) * new Vector2((float)base.width / 2f, base.height) * 0.75f;
					spinningpoint2 = spinningpoint2.RotatedBy((float)(num227 - (num226 / 2 - 1)) * ((float)Math.PI * 2f) / (float)num226) + base.Center;
					Vector2 vector14 = spinningpoint2 - base.Center;
					int num228 = Dust.NewDust(spinningpoint2 + vector14, 0, 0, 172, vector14.X * 2f, vector14.Y * 2f, 100, default(Color), 1.4f);
					Main.dust[num228].noGravity = true;
					Main.dust[num228].noLight = true;
					Main.dust[num228].velocity = vector14;
				}
				if (owner == Main.myPlayer)
				{
					if (ai[1] < 1f)
					{
						int num229 = Main.expertMode ? 25 : 40;
						int num230 = NewProjectile(base.Center.X - (float)(direction * 30), base.Center.Y - 4f, (float)(-direction) * 0.01f, 0f, 384, num229, 4f, owner, 16f, 15f);
						Main.projectile[num230].netUpdate = true;
					}
					else
					{
						int num231 = (int)(base.Center.Y / 16f);
						int num232 = (int)(base.Center.X / 16f);
						int num233 = 100;
						if (num232 < 10)
						{
							num232 = 10;
						}
						if (num232 > Main.maxTilesX - 10)
						{
							num232 = Main.maxTilesX - 10;
						}
						if (num231 < 10)
						{
							num231 = 10;
						}
						if (num231 > Main.maxTilesY - num233 - 10)
						{
							num231 = Main.maxTilesY - num233 - 10;
						}
						for (int num234 = num231; num234 < num231 + num233; num234++)
						{
							Tile tile = Main.tile[num232, num234];
							if (tile.active() && (Main.tileSolid[tile.type] || tile.liquid != 0))
							{
								num231 = num234;
								break;
							}
						}
						int num235 = Main.expertMode ? 50 : 80;
						int num236 = NewProjectile(num232 * 16 + 8, num231 * 16 - 24, 0f, 0f, 386, num235, 4f, Main.myPlayer, 16f, 24f);
						Main.projectile[num236].netUpdate = true;
					}
				}
			}
			else if (type >= 424 && type <= 426)
			{
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 89);
				base.position.X += base.width / 2;
				base.position.Y += base.height / 2;
				base.width = (int)(128f * scale);
				base.height = (int)(128f * scale);
				base.position.X -= base.width / 2;
				base.position.Y -= base.height / 2;
				for (int num237 = 0; num237 < 8; num237++)
				{
					Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
				}
				for (int num238 = 0; num238 < 32; num238++)
				{
					int num239 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 2.5f);
					Main.dust[num239].noGravity = true;
					Main.dust[num239].velocity *= 3f;
					num239 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num239].velocity *= 2f;
					Main.dust[num239].noGravity = true;
				}
				for (int num240 = 0; num240 < 2; num240++)
				{
					int num241 = Gore.NewGore(base.position + new Vector2((float)(base.width * Main.rand.Next(100)) / 100f, (float)(base.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num241].velocity *= 0.3f;
					Main.gore[num241].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num241].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
				if (owner == Main.myPlayer)
				{
					localAI[1] = -1f;
					maxPenetrate = 0;
					Damage();
				}
				for (int num242 = 0; num242 < 5; num242++)
				{
					int num243 = Utils.SelectRandom<int>(Main.rand, 6, 259, 158);
					int num244 = Dust.NewDust(base.position, base.width, base.height, num243, 2.5f * (float)direction, -2.5f);
					Main.dust[num244].alpha = 200;
					Main.dust[num244].velocity *= 2.4f;
					Main.dust[num244].scale += Main.rand.NextFloat();
				}
			}
			if (type == 399)
			{
				Main.PlaySound(13, (int)base.position.X, (int)base.position.Y);
				Vector2 value10 = new Vector2(20f, 20f);
				for (int num245 = 0; num245 < 5; num245++)
				{
					Dust.NewDust(base.Center - value10 / 2f, (int)value10.X, (int)value10.Y, 12, 0f, 0f, 0, Color.Red);
				}
				for (int num246 = 0; num246 < 10; num246++)
				{
					int num247 = Dust.NewDust(base.Center - value10 / 2f, (int)value10.X, (int)value10.Y, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num247].velocity *= 1.4f;
				}
				for (int num248 = 0; num248 < 20; num248++)
				{
					int num249 = Dust.NewDust(base.Center - value10 / 2f, (int)value10.X, (int)value10.Y, 6, 0f, 0f, 100, default(Color), 2.5f);
					Main.dust[num249].noGravity = true;
					Main.dust[num249].velocity *= 5f;
					num249 = Dust.NewDust(base.Center - value10 / 2f, (int)value10.X, (int)value10.Y, 6, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num249].velocity *= 3f;
				}
				if (Main.myPlayer == owner)
				{
					for (int num250 = 0; num250 < 6; num250++)
					{
						float num251 = (0f - velocity.X) * (float)Main.rand.Next(20, 50) * 0.01f + (float)Main.rand.Next(-20, 21) * 0.4f;
						float num252 = (0f - Math.Abs(velocity.Y)) * (float)Main.rand.Next(30, 50) * 0.01f + (float)Main.rand.Next(-20, 5) * 0.4f;
						NewProjectile(base.Center.X + num251, base.Center.Y + num252, num251, num252, 400 + Main.rand.Next(3), (int)((double)damage * 0.5), 0f, owner);
					}
				}
			}
			if (type == 384 || type == 386)
			{
				for (int num253 = 0; num253 < 20; num253++)
				{
					int num254 = Dust.NewDust(base.position, base.width, base.height, 212, direction * 2, 0f, 100, default(Color), 1.4f);
					Dust dust8 = Main.dust[num254];
					dust8.color = Color.CornflowerBlue;
					dust8.color = Color.Lerp(dust8.color, Color.White, 0.3f);
					dust8.noGravity = true;
				}
			}
			if (type == 507 || type == 508)
			{
				Main.PlaySound(0, (int)base.position.X, (int)base.position.Y);
				Vector2 position = base.position;
				Vector2 oldVelocity = base.oldVelocity;
				oldVelocity.Normalize();
				position += oldVelocity * 16f;
				for (int num255 = 0; num255 < 20; num255++)
				{
					int num256 = Dust.NewDust(position, base.width, base.height, 81);
					Main.dust[num256].position = (Main.dust[num256].position + base.Center) / 2f;
					Main.dust[num256].velocity += base.oldVelocity * 0.4f;
					Main.dust[num256].velocity *= 0.5f;
					Main.dust[num256].noGravity = true;
					position -= oldVelocity * 8f;
				}
			}
			if (type == 598)
			{
				Main.PlaySound(0, (int)base.position.X, (int)base.position.Y);
				Vector2 position2 = base.position;
				Vector2 value11 = (rotation - (float)Math.PI / 2f).ToRotationVector2();
				position2 += value11 * 16f;
				for (int num257 = 0; num257 < 20; num257++)
				{
					int num258 = Dust.NewDust(position2, base.width, base.height, 81);
					Main.dust[num258].position = (Main.dust[num258].position + base.Center) / 2f;
					Main.dust[num258].velocity += value11 * 2f;
					Main.dust[num258].velocity *= 0.5f;
					Main.dust[num258].noGravity = true;
					position2 -= value11 * 8f;
				}
			}
			if (type == 1 || type == 81 || type == 98)
			{
				Main.PlaySound(0, (int)base.position.X, (int)base.position.Y);
				for (int num259 = 0; num259 < 10; num259++)
				{
					Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 7);
				}
			}
			if (type == 336 || type == 345)
			{
				for (int num260 = 0; num260 < 6; num260++)
				{
					int num261 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 196);
					Main.dust[num261].noGravity = true;
					Main.dust[num261].scale = scale;
				}
			}
			if (type == 358)
			{
				velocity = base.oldVelocity * 0.2f;
				for (int num262 = 0; num262 < 100; num262++)
				{
					int num263 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 211, 0f, 0f, 75, default(Color), 1.2f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num263].alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num263].alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num263].alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num263].scale = 0.6f;
					}
					else
					{
						Main.dust[num263].noGravity = true;
					}
					Main.dust[num263].velocity *= 0.3f;
					Main.dust[num263].velocity += velocity;
					Main.dust[num263].velocity *= 1f + (float)Main.rand.Next(-100, 101) * 0.01f;
					Main.dust[num263].velocity.X += (float)Main.rand.Next(-50, 51) * 0.015f;
					Main.dust[num263].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.015f;
					Main.dust[num263].position = base.Center;
				}
			}
			if (type == 406)
			{
				int num264 = 175;
				Color newColor3 = new Color(0, 80, 255, 100);
				velocity = base.oldVelocity * 0.2f;
				for (int num265 = 0; num265 < 40; num265++)
				{
					int num266 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 4, 0f, 0f, num264, newColor3, 1.6f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num266].alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num266].alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num266].alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num266].scale = 0.6f;
					}
					else
					{
						Main.dust[num266].noGravity = true;
					}
					Main.dust[num266].velocity *= 0.3f;
					Main.dust[num266].velocity += velocity;
					Main.dust[num266].velocity *= 1f + (float)Main.rand.Next(-100, 101) * 0.01f;
					Main.dust[num266].velocity.X += (float)Main.rand.Next(-50, 51) * 0.015f;
					Main.dust[num266].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.015f;
					Main.dust[num266].position = base.Center;
				}
			}
			if (type == 344)
			{
				for (int num267 = 0; num267 < 3; num267++)
				{
					int num268 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 197);
					Main.dust[num268].noGravity = true;
					Main.dust[num268].scale = scale;
				}
			}
			else if (type == 343)
			{
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 27);
				for (int num269 = 4; num269 < 31; num269++)
				{
					float num270 = base.oldVelocity.X * (30f / (float)num269);
					float num271 = base.oldVelocity.Y * (30f / (float)num269);
					int num272 = Dust.NewDust(new Vector2(oldPosition.X - num270, oldPosition.Y - num271), 8, 8, 197, base.oldVelocity.X, base.oldVelocity.Y, 100, default(Color), 1.2f);
					Main.dust[num272].noGravity = true;
					Main.dust[num272].velocity *= 0.5f;
				}
			}
			else if (type == 349)
			{
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 27);
				for (int num273 = 0; num273 < 3; num273++)
				{
					int num274 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 76);
					Main.dust[num274].noGravity = true;
					Main.dust[num274].noLight = true;
					Main.dust[num274].scale = 0.7f;
				}
			}
			if (type == 323)
			{
				Main.PlaySound(0, (int)base.position.X, (int)base.position.Y);
				for (int num275 = 0; num275 < 20; num275++)
				{
					int num276 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 7);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num276].noGravity = true;
						Main.dust[num276].scale = 1.3f;
						Main.dust[num276].velocity *= 1.5f;
						Main.dust[num276].velocity -= base.oldVelocity * 0.5f;
						Main.dust[num276].velocity *= 1.5f;
					}
					else
					{
						Main.dust[num276].velocity *= 0.75f;
						Main.dust[num276].velocity -= base.oldVelocity * 0.25f;
						Main.dust[num276].scale = 0.8f;
					}
				}
			}
			if (type == 589)
			{
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 27);
				Color newColor4 = Color.Red;
				if (ai[1] == 1f)
				{
					newColor4 = Color.Green;
				}
				if (ai[1] == 2f)
				{
					newColor4 = Color.Purple;
				}
				if (ai[1] == 3f)
				{
					newColor4 = Color.Gold;
				}
				if (ai[1] == 4f)
				{
					newColor4 = Color.White;
				}
				newColor4.A = 100;
				for (int num277 = 0; num277 < 30; num277++)
				{
					int num278 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 11, 0f, 0f, 0, newColor4);
					Main.dust[num278].velocity *= 1f + Main.rand.NextFloat() * 1f;
					if (num277 < 10)
					{
						Main.dust[num278].noGravity = true;
						Main.dust[num278].velocity *= 0.5f;
					}
				}
			}
			if (type == 346)
			{
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 27);
				for (int num279 = 0; num279 < 10; num279++)
				{
					int num280 = 10;
					if (ai[1] == 1f)
					{
						num280 = 4;
					}
					int num281 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, num280);
					Main.dust[num281].noGravity = true;
				}
			}
			if (type == 335)
			{
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 27);
				for (int num282 = 0; num282 < 10; num282++)
				{
					int num283 = 90 - (int)ai[1];
					int num284 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, num283);
					Main.dust[num284].noLight = true;
					Main.dust[num284].scale = 0.8f;
				}
			}
			if (type == 318)
			{
				Main.PlaySound(0, (int)base.position.X, (int)base.position.Y);
				for (int num285 = 0; num285 < 10; num285++)
				{
					int num286 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 30);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num286].noGravity = true;
					}
				}
			}
			if (type == 378)
			{
				for (int num287 = 0; num287 < 10; num287++)
				{
					int num288 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 30);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num288].noGravity = true;
					}
				}
			}
			else if (type == 311)
			{
				for (int num289 = 0; num289 < 5; num289++)
				{
					int num290 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 189);
					Main.dust[num290].scale = 0.85f;
					Main.dust[num290].noGravity = true;
					Main.dust[num290].velocity += velocity * 0.5f;
				}
			}
			else if (type == 316)
			{
				for (int num291 = 0; num291 < 5; num291++)
				{
					int num292 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 195);
					Main.dust[num292].scale = 0.85f;
					Main.dust[num292].noGravity = true;
					Main.dust[num292].velocity += velocity * 0.5f;
				}
			}
			else if (type == 184 || type == 195)
			{
				Main.PlaySound(0, (int)base.position.X, (int)base.position.Y);
				for (int num293 = 0; num293 < 5; num293++)
				{
					Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 7);
				}
			}
			else if (type == 275 || type == 276)
			{
				Main.PlaySound(0, (int)base.position.X, (int)base.position.Y);
				for (int num294 = 0; num294 < 5; num294++)
				{
					Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 7);
				}
			}
			else if (type == 291)
			{
				if (owner == Main.myPlayer)
				{
					NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 292, damage, knockBack, owner);
				}
			}
			else if (type == 295)
			{
				if (owner == Main.myPlayer)
				{
					NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 296, (int)((double)damage * 0.65), knockBack, owner);
				}
			}
			else if (type == 270)
			{
				Main.PlaySound(0, (int)base.position.X, (int)base.position.Y, 27);
				if (ai[0] < 0f)
				{
					for (int num295 = 0; num295 < 20; num295++)
					{
						int num296 = Dust.NewDust(base.position, base.width, base.height, 26, 0f, 0f, 100);
						Main.dust[num296].noGravity = true;
						Main.dust[num296].velocity *= 1.2f;
						Main.dust[num296].scale = 1.3f;
						Main.dust[num296].velocity -= base.oldVelocity * 0.3f;
						num296 = Dust.NewDust(new Vector2(base.position.X + 4f, base.position.Y + 4f), base.width - 8, base.height - 8, 5, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num296].noGravity = true;
						Main.dust[num296].velocity *= 3f;
					}
				}
				else
				{
					for (int num297 = 0; num297 < 20; num297++)
					{
						int num298 = Dust.NewDust(base.position, base.width, base.height, 26, 0f, 0f, 100);
						Main.dust[num298].noGravity = true;
						Main.dust[num298].velocity *= 1.2f;
						Main.dust[num298].scale = 1.3f;
						Main.dust[num298].velocity -= base.oldVelocity * 0.3f;
						num298 = Dust.NewDust(new Vector2(base.position.X + 4f, base.position.Y + 4f), base.width - 8, base.height - 8, 6, 0f, 0f, 100, default(Color), 2f);
						Main.dust[num298].noGravity = true;
						Main.dust[num298].velocity *= 3f;
					}
				}
			}
			else if (type == 265)
			{
				Main.PlaySound(0, (int)base.position.X, (int)base.position.Y, 27);
				for (int num299 = 0; num299 < 15; num299++)
				{
					int num300 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 163, 0f, 0f, 100, default(Color), 1.2f);
					Main.dust[num300].noGravity = true;
					Main.dust[num300].velocity *= 1.2f;
					Main.dust[num300].velocity -= base.oldVelocity * 0.3f;
				}
			}
			else if (type == 355)
			{
				Main.PlaySound(0, (int)base.position.X, (int)base.position.Y, 27);
				for (int num301 = 0; num301 < 15; num301++)
				{
					int num302 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 205, 0f, 0f, 100, default(Color), 1.2f);
					Main.dust[num302].noGravity = true;
					Main.dust[num302].velocity *= 1.2f;
					Main.dust[num302].velocity -= base.oldVelocity * 0.3f;
				}
			}
			else if (type == 304)
			{
				for (int num303 = 0; num303 < 3; num303++)
				{
					int num304 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 182, 0f, 0f, 100, default(Color), 0.8f);
					Main.dust[num304].noGravity = true;
					Main.dust[num304].velocity *= 1.2f;
					Main.dust[num304].velocity -= base.oldVelocity * 0.3f;
				}
			}
			else if (type == 263)
			{
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 27);
				for (int num305 = 0; num305 < 15; num305++)
				{
					int num306 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 92, velocity.X, velocity.Y, Main.rand.Next(0, 101), default(Color), 1f + (float)Main.rand.Next(40) * 0.01f);
					Main.dust[num306].noGravity = true;
					Main.dust[num306].velocity *= 2f;
				}
			}
			else if (type == 261)
			{
				Main.PlaySound(0, (int)base.position.X, (int)base.position.Y);
				for (int num307 = 0; num307 < 5; num307++)
				{
					Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 148);
				}
			}
			else if (type == 229)
			{
				for (int num308 = 0; num308 < 25; num308++)
				{
					int num309 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 157);
					Main.dust[num309].noGravity = true;
					Main.dust[num309].velocity *= 1.5f;
					Main.dust[num309].scale = 1.5f;
				}
			}
			else if (type == 239)
			{
				int num310 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + (float)base.height - 2f), 2, 2, 154);
				Main.dust[num310].position.X -= 2f;
				Main.dust[num310].alpha = 38;
				Main.dust[num310].velocity *= 0.1f;
				Main.dust[num310].velocity += -base.oldVelocity * 0.25f;
				Main.dust[num310].scale = 0.95f;
			}
			else if (type == 245)
			{
				int num311 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + (float)base.height - 2f), 2, 2, 114);
				Main.dust[num311].noGravity = true;
				Main.dust[num311].position.X -= 2f;
				Main.dust[num311].alpha = 38;
				Main.dust[num311].velocity *= 0.1f;
				Main.dust[num311].velocity += -base.oldVelocity * 0.25f;
				Main.dust[num311].scale = 0.95f;
			}
			else if (type == 264)
			{
				int num312 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + (float)base.height - 2f), 2, 2, 54);
				Main.dust[num312].noGravity = true;
				Main.dust[num312].position.X -= 2f;
				Main.dust[num312].alpha = 38;
				Main.dust[num312].velocity *= 0.1f;
				Main.dust[num312].velocity += -base.oldVelocity * 0.25f;
				Main.dust[num312].scale = 0.95f;
			}
			else if (type == 206 || type == 225)
			{
				Main.PlaySound(6, (int)base.position.X, (int)base.position.Y);
				for (int num313 = 0; num313 < 5; num313++)
				{
					Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 40);
				}
			}
			else if (type == 227)
			{
				Main.PlaySound(6, (int)base.position.X, (int)base.position.Y);
				for (int num314 = 0; num314 < 15; num314++)
				{
					int num315 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 157);
					Main.dust[num315].noGravity = true;
					Main.dust[num315].velocity += base.oldVelocity;
					Main.dust[num315].scale = 1.5f;
				}
			}
			else if (type == 237 && owner == Main.myPlayer)
			{
				NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 238, damage, knockBack, owner);
			}
			else if (type == 243 && owner == Main.myPlayer)
			{
				NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 244, damage, knockBack, owner);
			}
			else if (type == 120)
			{
				Main.PlaySound(0, (int)base.position.X, (int)base.position.Y);
				for (int num316 = 0; num316 < 10; num316++)
				{
					int num317 = Dust.NewDust(new Vector2(base.position.X - velocity.X, base.position.Y - velocity.Y), base.width, base.height, 67, velocity.X, velocity.Y, 100);
					if (num316 < 5)
					{
						Main.dust[num317].noGravity = true;
					}
					Main.dust[num317].velocity *= 0.2f;
				}
			}
			else if (type == 181 || type == 189 || type == 566)
			{
				for (int num318 = 0; num318 < 6; num318++)
				{
					int num319 = Dust.NewDust(base.position, base.width, base.height, 150, velocity.X, velocity.Y, 50);
					Main.dust[num319].noGravity = true;
					Main.dust[num319].scale = 1f;
				}
			}
			else if (type == 178)
			{
				for (int num320 = 0; num320 < 85; num320++)
				{
					int num321 = Main.rand.Next(139, 143);
					int num322 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, num321, velocity.X, velocity.Y, 0, default(Color), 1.2f);
					Main.dust[num322].velocity.X += (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.dust[num322].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.dust[num322].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.dust[num322].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.dust[num322].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
					Main.dust[num322].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
					Main.dust[num322].scale *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
				}
				for (int num323 = 0; num323 < 40; num323++)
				{
					int num324 = Main.rand.Next(276, 283);
					int num325 = Gore.NewGore(base.position, velocity, num324);
					Main.gore[num325].velocity.X += (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.gore[num325].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.gore[num325].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.gore[num325].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.gore[num325].scale *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
					Main.gore[num325].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
					Main.gore[num325].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
				}
			}
			else if (type == 289)
			{
				for (int num326 = 0; num326 < 30; num326++)
				{
					int num327 = Main.rand.Next(139, 143);
					int num328 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, num327, velocity.X, velocity.Y, 0, default(Color), 1.2f);
					Main.dust[num328].velocity.X += (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.dust[num328].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.dust[num328].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.dust[num328].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.dust[num328].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
					Main.dust[num328].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
					Main.dust[num328].scale *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
				}
				for (int num329 = 0; num329 < 15; num329++)
				{
					int num330 = Main.rand.Next(276, 283);
					int num331 = Gore.NewGore(base.position, velocity, num330);
					Main.gore[num331].velocity.X += (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.gore[num331].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.gore[num331].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.gore[num331].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.gore[num331].scale *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
					Main.gore[num331].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
					Main.gore[num331].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
				}
			}
			else if (type == 475 || type == 505 || type == 506)
			{
				if (ai[1] == 0f)
				{
					Main.PlaySound(0, (int)base.position.X, (int)base.position.Y);
				}
				if (ai[1] < 10f)
				{
					Vector2 position3 = new Vector2(base.position.X + (float)base.width * 0.5f, base.position.Y + (float)base.height * 0.5f);
					float num332 = 0f - velocity.X;
					float num333 = 0f - velocity.Y;
					float num334 = 1f;
					if (ai[0] <= 17f)
					{
						num334 = ai[0] / 17f;
					}
					int num335 = (int)(30f * num334);
					float num336 = 1f;
					if (ai[0] <= 30f)
					{
						num336 = ai[0] / 30f;
					}
					float num337 = 0.4f * num336;
					float num338 = num337;
					num333 += num338;
					for (int num339 = 0; num339 < num335; num339++)
					{
						float num340 = (float)Math.Sqrt(num332 * num332 + num333 * num333);
						float num341 = 5.6f;
						if (Math.Abs(num332) + Math.Abs(num333) < 1f)
						{
							num341 *= Math.Abs(num332) + Math.Abs(num333) / 1f;
						}
						num340 = num341 / num340;
						num332 *= num340;
						num333 *= num340;
						Math.Atan2(num333, num332);
						int num342 = 3;
						if (type == 506)
						{
							num342 = 30;
						}
						if (type == 505)
						{
							num342 = 239;
						}
						if ((float)num339 > ai[1])
						{
							for (int num343 = 0; num343 < 4; num343++)
							{
								int num344 = Dust.NewDust(position3, base.width, base.height, num342);
								Main.dust[num344].noGravity = true;
								Main.dust[num344].velocity *= 0.3f;
							}
						}
						position3.X += num332;
						position3.Y += num333;
						num332 = 0f - velocity.X;
						num333 = 0f - velocity.Y;
						num338 += num337;
						num333 += num338;
					}
				}
			}
			else if (type == 171)
			{
				if (ai[1] == 0f)
				{
					Main.PlaySound(0, (int)base.position.X, (int)base.position.Y);
				}
				if (ai[1] < 10f)
				{
					Vector2 position4 = new Vector2(base.position.X + (float)base.width * 0.5f, base.position.Y + (float)base.height * 0.5f);
					float num345 = 0f - velocity.X;
					float num346 = 0f - velocity.Y;
					float num347 = 1f;
					if (ai[0] <= 17f)
					{
						num347 = ai[0] / 17f;
					}
					int num348 = (int)(30f * num347);
					float num349 = 1f;
					if (ai[0] <= 30f)
					{
						num349 = ai[0] / 30f;
					}
					float num350 = 0.4f * num349;
					float num351 = num350;
					num346 += num351;
					for (int num352 = 0; num352 < num348; num352++)
					{
						float num353 = (float)Math.Sqrt(num345 * num345 + num346 * num346);
						float num354 = 5.6f;
						if (Math.Abs(num345) + Math.Abs(num346) < 1f)
						{
							num354 *= Math.Abs(num345) + Math.Abs(num346) / 1f;
						}
						num353 = num354 / num353;
						num345 *= num353;
						num346 *= num353;
						Math.Atan2(num346, num345);
						if ((float)num352 > ai[1])
						{
							for (int num355 = 0; num355 < 4; num355++)
							{
								int num356 = Dust.NewDust(position4, base.width, base.height, 129);
								Main.dust[num356].noGravity = true;
								Main.dust[num356].velocity *= 0.3f;
							}
						}
						position4.X += num345;
						position4.Y += num346;
						num345 = 0f - velocity.X;
						num346 = 0f - velocity.Y;
						num351 += num350;
						num346 += num351;
					}
				}
			}
			else if (type == 117)
			{
				Main.PlaySound(0, (int)base.position.X, (int)base.position.Y);
				for (int num357 = 0; num357 < 10; num357++)
				{
					Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 26);
				}
			}
			else if (type == 166)
			{
				Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 51);
				for (int num358 = 0; num358 < 10; num358++)
				{
					int num359 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 76);
					Main.dust[num359].noGravity = true;
					Main.dust[num359].velocity -= base.oldVelocity * 0.25f;
				}
			}
			else if (type == 158)
			{
				Main.PlaySound(0, (int)base.position.X, (int)base.position.Y);
				for (int num360 = 0; num360 < 10; num360++)
				{
					int num361 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 9);
					Main.dust[num361].noGravity = true;
					Main.dust[num361].velocity -= velocity * 0.5f;
				}
			}
			else if (type == 159)
			{
				Main.PlaySound(0, (int)base.position.X, (int)base.position.Y);
				for (int num362 = 0; num362 < 10; num362++)
				{
					int num363 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 11);
					Main.dust[num363].noGravity = true;
					Main.dust[num363].velocity -= velocity * 0.5f;
				}
			}
			else if (type == 160)
			{
				Main.PlaySound(0, (int)base.position.X, (int)base.position.Y);
				for (int num364 = 0; num364 < 10; num364++)
				{
					int num365 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 19);
					Main.dust[num365].noGravity = true;
					Main.dust[num365].velocity -= velocity * 0.5f;
				}
			}
			else if (type == 161)
			{
				Main.PlaySound(0, (int)base.position.X, (int)base.position.Y);
				for (int num366 = 0; num366 < 10; num366++)
				{
					int num367 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 11);
					Main.dust[num367].noGravity = true;
					Main.dust[num367].velocity -= velocity * 0.5f;
				}
			}
			else if (type >= 191 && type <= 194)
			{
				int num368 = Gore.NewGore(new Vector2(base.position.X - (float)(base.width / 2), base.position.Y - (float)(base.height / 2)), new Vector2(0f, 0f), Main.rand.Next(61, 64), scale);
				Main.gore[num368].velocity *= 0.1f;
			}
			else if (!Main.projPet[type])
			{
				if (type == 93)
				{
					Main.PlaySound(0, (int)base.position.X, (int)base.position.Y);
					for (int num369 = 0; num369 < 10; num369++)
					{
						int num370 = Dust.NewDust(base.position, base.width, base.height, 57, 0f, 0f, 100, default(Color), 0.5f);
						Main.dust[num370].velocity.X *= 2f;
						Main.dust[num370].velocity.Y *= 2f;
					}
				}
				else if (type == 99)
				{
					Main.PlaySound(0, (int)base.position.X, (int)base.position.Y);
					for (int num371 = 0; num371 < 30; num371++)
					{
						int num372 = Dust.NewDust(base.position, base.width, base.height, 1);
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num372].scale *= 1.4f;
						}
						velocity *= 1.9f;
					}
				}
				else if (type == 91 || type == 92)
				{
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 10);
					for (int num373 = 0; num373 < 10; num373++)
					{
						Dust.NewDust(base.position, base.width, base.height, 58, velocity.X * 0.1f, velocity.Y * 0.1f, 150, default(Color), 1.2f);
					}
					for (int num374 = 0; num374 < 3; num374++)
					{
						Gore.NewGore(base.position, new Vector2(velocity.X * 0.05f, velocity.Y * 0.05f), Main.rand.Next(16, 18));
					}
					if (type == 12 && damage < 500)
					{
						for (int num375 = 0; num375 < 10; num375++)
						{
							Dust.NewDust(base.position, base.width, base.height, 57, velocity.X * 0.1f, velocity.Y * 0.1f, 150, default(Color), 1.2f);
						}
						for (int num376 = 0; num376 < 3; num376++)
						{
							Gore.NewGore(base.position, new Vector2(velocity.X * 0.05f, velocity.Y * 0.05f), Main.rand.Next(16, 18));
						}
					}
					if ((type == 91 || (type == 92 && ai[0] > 0f)) && owner == Main.myPlayer)
					{
						float x = base.position.X + (float)Main.rand.Next(-400, 400);
						float y = base.position.Y - (float)Main.rand.Next(600, 900);
						Vector2 vector15 = new Vector2(x, y);
						float num377 = base.position.X + (float)(base.width / 2) - vector15.X;
						float num378 = base.position.Y + (float)(base.height / 2) - vector15.Y;
						int num379 = 22;
						float num380 = (float)Math.Sqrt(num377 * num377 + num378 * num378);
						num380 = (float)num379 / num380;
						num377 *= num380;
						num378 *= num380;
						int num381 = damage;
						int num382 = NewProjectile(x, y, num377, num378, 92, num381, knockBack, owner);
						if (type == 91)
						{
							Main.projectile[num382].ai[1] = base.position.Y;
							Main.projectile[num382].ai[0] = 1f;
						}
						else
						{
							Main.projectile[num382].ai[1] = base.position.Y;
						}
					}
				}
				else if (type == 89)
				{
					Main.PlaySound(0, (int)base.position.X, (int)base.position.Y);
					for (int num383 = 0; num383 < 5; num383++)
					{
						int num384 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 68);
						Main.dust[num384].noGravity = true;
						Main.dust[num384].velocity *= 1.5f;
						Main.dust[num384].scale *= 0.9f;
					}
					if (type == 89 && owner == Main.myPlayer)
					{
						for (int num385 = 0; num385 < 3; num385++)
						{
							float num386 = (0f - velocity.X) * (float)Main.rand.Next(40, 70) * 0.01f + (float)Main.rand.Next(-20, 21) * 0.4f;
							float num387 = (0f - velocity.Y) * (float)Main.rand.Next(40, 70) * 0.01f + (float)Main.rand.Next(-20, 21) * 0.4f;
							NewProjectile(base.position.X + num386, base.position.Y + num387, num386, num387, 90, (int)((double)damage * 0.5), 0f, owner);
						}
					}
				}
				else if (type == 177)
				{
					for (int num388 = 0; num388 < 20; num388++)
					{
						int num389 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 137, 0f, 0f, Main.rand.Next(0, 101), default(Color), 1f + (float)Main.rand.Next(-20, 40) * 0.01f);
						Main.dust[num389].velocity -= base.oldVelocity * 0.2f;
						if (Main.rand.Next(3) == 0)
						{
							Main.dust[num389].scale *= 0.8f;
							Main.dust[num389].velocity *= 0.5f;
						}
						else
						{
							Main.dust[num389].noGravity = true;
						}
					}
				}
				else if (type == 119 || type == 118 || type == 128 || type == 359)
				{
					int num390 = 10;
					if (type == 119 || type == 359)
					{
						num390 = 20;
					}
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 27);
					for (int num391 = 0; num391 < num390; num391++)
					{
						int num392 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 92);
						if (Main.rand.Next(3) != 0)
						{
							Main.dust[num392].velocity *= 2f;
							Main.dust[num392].noGravity = true;
							Main.dust[num392].scale *= 1.75f;
						}
						else
						{
							Main.dust[num392].scale *= 0.5f;
						}
					}
				}
				else if (type == 309)
				{
					int num393 = 10;
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 27);
					for (int num394 = 0; num394 < num393; num394++)
					{
						int num395 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 185);
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num395].velocity *= 2f;
							Main.dust[num395].noGravity = true;
							Main.dust[num395].scale *= 1.75f;
						}
					}
				}
				else if (type == 308)
				{
					int num396 = 80;
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 27);
					for (int num397 = 0; num397 < num396; num397++)
					{
						int num398 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + 16f), base.width, base.height - 16, 185);
						Main.dust[num398].velocity *= 2f;
						Main.dust[num398].noGravity = true;
						Main.dust[num398].scale *= 1.15f;
					}
				}
				else if (aiStyle == 29 && type <= 126)
				{
					Main.PlaySound(0, (int)base.position.X, (int)base.position.Y);
					int num399 = type - 121 + 86;
					for (int num400 = 0; num400 < 15; num400++)
					{
						int num401 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, num399, base.oldVelocity.X, base.oldVelocity.Y, 50, default(Color), 1.2f);
						Main.dust[num401].noGravity = true;
						Main.dust[num401].scale *= 1.25f;
						Main.dust[num401].velocity *= 0.5f;
					}
				}
				else if (type == 597)
				{
					Main.PlaySound(0, (int)base.position.X, (int)base.position.Y);
					for (int num402 = 0; num402 < 15; num402++)
					{
						int num403 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 262, base.oldVelocity.X, base.oldVelocity.Y, 50, default(Color), 1.2f);
						Main.dust[num403].noGravity = true;
						Main.dust[num403].scale *= 1.25f;
						Main.dust[num403].velocity *= 0.5f;
					}
				}
				else if (type == 337)
				{
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 27);
					for (int num404 = 0; num404 < 10; num404++)
					{
						int num405 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 197);
						Main.dust[num405].noGravity = true;
					}
				}
				else if (type == 379 || type == 377)
				{
					for (int num406 = 0; num406 < 5; num406++)
					{
						int num407 = Dust.NewDust(base.position, base.width, base.height, 171, 0f, 0f, 100);
						Main.dust[num407].scale = (float)Main.rand.Next(1, 10) * 0.1f;
						Main.dust[num407].noGravity = true;
						Main.dust[num407].fadeIn = 1.5f;
						Main.dust[num407].velocity *= 0.75f;
					}
				}
				else if (type == 80)
				{
					if (ai[0] >= 0f)
					{
						Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 27);
						for (int num408 = 0; num408 < 10; num408++)
						{
							Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 67);
						}
					}
					int num409 = (int)base.position.X / 16;
					int num410 = (int)base.position.Y / 16;
					if (Main.tile[num409, num410] == null)
					{
						Main.tile[num409, num410] = new Tile();
					}
					if (Main.tile[num409, num410].type == 127 && Main.tile[num409, num410].active())
					{
						WorldGen.KillTile(num409, num410);
					}
				}
				else if (type == 76 || type == 77 || type == 78)
				{
					for (int num411 = 0; num411 < 5; num411++)
					{
						int num412 = Dust.NewDust(base.position, base.width, base.height, 27, 0f, 0f, 80, default(Color), 1.5f);
						Main.dust[num412].noGravity = true;
					}
				}
				else if (type == 55)
				{
					for (int num413 = 0; num413 < 5; num413++)
					{
						int num414 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 18, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num414].noGravity = true;
					}
				}
				else if (type == 51 || type == 267)
				{
					Main.PlaySound(0, (int)base.position.X, (int)base.position.Y);
					for (int num415 = 0; num415 < 5; num415++)
					{
						Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 0, 0f, 0f, 0, default(Color), 0.7f);
					}
				}
				else if (type == 478)
				{
					if (owner == Main.myPlayer)
					{
						NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 480, (int)((double)damage * 0.8), knockBack * 0.5f, owner);
					}
				}
				else if (type == 477 || type == 479)
				{
					for (int num416 = 0; num416 < 5; num416++)
					{
					}
					Collision.HitTiles(base.position, velocity, base.width, base.height);
				}
				else if (type == 2 || type == 82)
				{
					Main.PlaySound(0, (int)base.position.X, (int)base.position.Y);
					for (int num417 = 0; num417 < 10; num417++)
					{
						Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100);
					}
				}
				else if (type == 474)
				{
					Main.PlaySound(0, (int)base.position.X, (int)base.position.Y);
					for (int num418 = 0; num418 < 20; num418++)
					{
						Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 26, 0f, 0f, 0, default(Color), 0.9f);
					}
				}
				else if (type == 172)
				{
					Main.PlaySound(0, (int)base.position.X, (int)base.position.Y);
					for (int num419 = 0; num419 < 20; num419++)
					{
						Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 135, 0f, 0f, 100);
					}
				}
				else if (type == 103)
				{
					Main.PlaySound(0, (int)base.position.X, (int)base.position.Y);
					for (int num420 = 0; num420 < 20; num420++)
					{
						int num421 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 75, 0f, 0f, 100);
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num421].scale *= 2.5f;
							Main.dust[num421].noGravity = true;
							Main.dust[num421].velocity *= 5f;
						}
					}
				}
				else if (type == 278)
				{
					Main.PlaySound(0, (int)base.position.X, (int)base.position.Y);
					for (int num422 = 0; num422 < 20; num422++)
					{
						int num423 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 169, 0f, 0f, 100);
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num423].scale *= 1.5f;
							Main.dust[num423].noGravity = true;
							Main.dust[num423].velocity *= 5f;
						}
					}
				}
				else if (type == 3 || type == 48 || type == 54 || type == 599)
				{
					Main.PlaySound(0, (int)base.position.X, (int)base.position.Y);
					for (int num424 = 0; num424 < 10; num424++)
					{
						Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 1, velocity.X * 0.1f, velocity.Y * 0.1f, 0, default(Color), 0.75f);
					}
				}
				else if (type == 330)
				{
					Main.PlaySound(0, (int)base.position.X, (int)base.position.Y);
					for (int num425 = 0; num425 < 10; num425++)
					{
						Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 0, velocity.X * 0.4f, velocity.Y * 0.4f, 0, default(Color), 0.75f);
					}
				}
				else if (type == 4)
				{
					Main.PlaySound(0, (int)base.position.X, (int)base.position.Y);
					for (int num426 = 0; num426 < 10; num426++)
					{
						Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 14, 0f, 0f, 150, default(Color), 1.1f);
					}
				}
				else if (type == 5)
				{
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 10);
					for (int num427 = 0; num427 < 60; num427++)
					{
						int num428;
						switch (Main.rand.Next(3))
						{
						case 0:
							num428 = 15;
							break;
						case 1:
							num428 = 57;
							break;
						default:
							num428 = 58;
							break;
						}
						Dust.NewDust(base.position, base.width, base.height, num428, velocity.X * 0.5f, velocity.Y * 0.5f, 150, default(Color), 1.5f);
					}
				}
				else if (type == 9 || type == 12 || type == 503)
				{
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 10);
					int num429 = 10;
					int num430 = 3;
					if (type == 503)
					{
						num429 = 40;
						num430 = 2;
						velocity /= 2f;
					}
					for (int num431 = 0; num431 < num429; num431++)
					{
						Dust.NewDust(base.position, base.width, base.height, 58, velocity.X * 0.1f, velocity.Y * 0.1f, 150, default(Color), 1.2f);
					}
					for (int num432 = 0; num432 < num430; num432++)
					{
						int num433 = Main.rand.Next(16, 18);
						if (type == 503)
						{
							num433 = 16;
						}
						Gore.NewGore(base.position, new Vector2(velocity.X * 0.05f, velocity.Y * 0.05f), num433);
					}
					if (type == 12 && damage < 100)
					{
						for (int num434 = 0; num434 < 10; num434++)
						{
							Dust.NewDust(base.position, base.width, base.height, 57, velocity.X * 0.1f, velocity.Y * 0.1f, 150, default(Color), 1.2f);
						}
						for (int num435 = 0; num435 < 3; num435++)
						{
							Gore.NewGore(base.position, new Vector2(velocity.X * 0.05f, velocity.Y * 0.05f), Main.rand.Next(16, 18));
						}
					}
				}
				else if (type == 281)
				{
					Main.PlaySound(4, (int)base.position.X, (int)base.position.Y);
					int num436 = Gore.NewGore(base.position, new Vector2((float)Main.rand.Next(-20, 21) * 0.2f, (float)Main.rand.Next(-20, 21) * 0.2f), 76);
					Main.gore[num436].velocity -= velocity * 0.5f;
					num436 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), new Vector2((float)Main.rand.Next(-20, 21) * 0.2f, (float)Main.rand.Next(-20, 21) * 0.2f), 77);
					Main.gore[num436].velocity -= velocity * 0.5f;
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 14);
					for (int num437 = 0; num437 < 20; num437++)
					{
						int num438 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num438].velocity *= 1.4f;
					}
					for (int num439 = 0; num439 < 10; num439++)
					{
						int num440 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num440].noGravity = true;
						Main.dust[num440].velocity *= 5f;
						num440 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num440].velocity *= 3f;
					}
					num436 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num436].velocity *= 0.4f;
					Main.gore[num436].velocity.X += 1f;
					Main.gore[num436].velocity.Y += 1f;
					num436 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num436].velocity *= 0.4f;
					Main.gore[num436].velocity.X -= 1f;
					Main.gore[num436].velocity.Y += 1f;
					num436 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num436].velocity *= 0.4f;
					Main.gore[num436].velocity.X += 1f;
					Main.gore[num436].velocity.Y -= 1f;
					num436 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num436].velocity *= 0.4f;
					Main.gore[num436].velocity.X -= 1f;
					Main.gore[num436].velocity.Y -= 1f;
					base.position.X += base.width / 2;
					base.position.Y += base.height / 2;
					base.width = 128;
					base.height = 128;
					base.position.X -= base.width / 2;
					base.position.Y -= base.height / 2;
					Damage();
				}
				else if (type == 162)
				{
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 14);
					for (int num441 = 0; num441 < 20; num441++)
					{
						int num442 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num442].velocity *= 1.4f;
					}
					for (int num443 = 0; num443 < 10; num443++)
					{
						int num444 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num444].noGravity = true;
						Main.dust[num444].velocity *= 5f;
						num444 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num444].velocity *= 3f;
					}
					int num445 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num445].velocity *= 0.4f;
					Main.gore[num445].velocity.X += 1f;
					Main.gore[num445].velocity.Y += 1f;
					num445 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num445].velocity *= 0.4f;
					Main.gore[num445].velocity.X -= 1f;
					Main.gore[num445].velocity.Y += 1f;
					num445 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num445].velocity *= 0.4f;
					Main.gore[num445].velocity.X += 1f;
					Main.gore[num445].velocity.Y -= 1f;
					num445 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num445].velocity *= 0.4f;
					Main.gore[num445].velocity.X -= 1f;
					Main.gore[num445].velocity.Y -= 1f;
					base.position.X += base.width / 2;
					base.position.Y += base.height / 2;
					base.width = 128;
					base.height = 128;
					base.position.X -= base.width / 2;
					base.position.Y -= base.height / 2;
					Damage();
				}
				else if (type == 240)
				{
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 14);
					for (int num446 = 0; num446 < 20; num446++)
					{
						int num447 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num447].velocity *= 1.4f;
					}
					for (int num448 = 0; num448 < 10; num448++)
					{
						int num449 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num449].noGravity = true;
						Main.dust[num449].velocity *= 5f;
						num449 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num449].velocity *= 3f;
					}
					int num450 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num450].velocity *= 0.4f;
					Main.gore[num450].velocity.X += 1f;
					Main.gore[num450].velocity.Y += 1f;
					num450 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num450].velocity *= 0.4f;
					Main.gore[num450].velocity.X -= 1f;
					Main.gore[num450].velocity.Y += 1f;
					num450 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num450].velocity *= 0.4f;
					Main.gore[num450].velocity.X += 1f;
					Main.gore[num450].velocity.Y -= 1f;
					num450 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num450].velocity *= 0.4f;
					Main.gore[num450].velocity.X -= 1f;
					Main.gore[num450].velocity.Y -= 1f;
					base.position.X += base.width / 2;
					base.position.Y += base.height / 2;
					base.width = 96;
					base.height = 96;
					base.position.X -= base.width / 2;
					base.position.Y -= base.height / 2;
					Damage();
				}
				else if (type == 283 || type == 282)
				{
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 10);
					for (int num451 = 0; num451 < 10; num451++)
					{
						int num452 = Dust.NewDust(base.position, base.width, base.height, 171, 0f, 0f, 100);
						Main.dust[num452].scale = (float)Main.rand.Next(1, 10) * 0.1f;
						Main.dust[num452].noGravity = true;
						Main.dust[num452].fadeIn = 1.5f;
						Main.dust[num452].velocity *= 0.75f;
					}
				}
				else if (type == 284)
				{
					for (int num453 = 0; num453 < 10; num453++)
					{
						int num454 = Main.rand.Next(139, 143);
						int num455 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, num454, (0f - velocity.X) * 0.3f, (0f - velocity.Y) * 0.3f, 0, default(Color), 1.2f);
						Main.dust[num455].velocity.X += (float)Main.rand.Next(-50, 51) * 0.01f;
						Main.dust[num455].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.01f;
						Main.dust[num455].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
						Main.dust[num455].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
						Main.dust[num455].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
						Main.dust[num455].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
						Main.dust[num455].scale *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
					}
					for (int num456 = 0; num456 < 5; num456++)
					{
						int num457 = Main.rand.Next(276, 283);
						int num458 = Gore.NewGore(base.position, -velocity * 0.3f, num457);
						Main.gore[num458].velocity.X += (float)Main.rand.Next(-50, 51) * 0.01f;
						Main.gore[num458].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.01f;
						Main.gore[num458].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
						Main.gore[num458].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
						Main.gore[num458].scale *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
						Main.gore[num458].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
						Main.gore[num458].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
					}
				}
				else if (type == 286)
				{
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 14);
					for (int num459 = 0; num459 < 7; num459++)
					{
						Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					}
					for (int num460 = 0; num460 < 3; num460++)
					{
						int num461 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num461].noGravity = true;
						Main.dust[num461].velocity *= 3f;
						num461 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num461].velocity *= 2f;
					}
					int num462 = Gore.NewGore(new Vector2(base.position.X - 10f, base.position.Y - 10f), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num462].velocity *= 0.3f;
					Main.gore[num462].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num462].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
					if (owner == Main.myPlayer)
					{
						localAI[1] = -1f;
						maxPenetrate = 0;
						base.position.X += base.width / 2;
						base.position.Y += base.height / 2;
						base.width = 80;
						base.height = 80;
						base.position.X -= base.width / 2;
						base.position.Y -= base.height / 2;
						Damage();
					}
				}
				else if (type == 14 || type == 20 || type == 36 || type == 83 || type == 84 || type == 389 || type == 104 || type == 279 || type == 100 || type == 110 || type == 180 || type == 207 || type == 357 || type == 242 || type == 302 || type == 257 || type == 259 || type == 285 || type == 287 || type == 576 || type == 577)
				{
					Collision.HitTiles(base.position, velocity, base.width, base.height);
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 10);
				}
				else if (type == 638)
				{
					Collision.HitTiles(base.position, velocity, base.width, base.height);
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 10);
					int num463 = Main.rand.Next(2, 5);
					for (int num464 = 0; num464 < num463; num464++)
					{
						int num465 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100);
						Main.dust[num465].velocity *= 1.6f;
						Main.dust[num465].velocity.Y -= 1f;
						Main.dust[num465].position -= Vector2.One * 4f;
						Main.dust[num465].position = Vector2.Lerp(Main.dust[num465].position, base.Center, 0.5f);
						Main.dust[num465].noGravity = true;
					}
				}
				else if (type == 15 || type == 34 || type == 321)
				{
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 10);
					for (int num466 = 0; num466 < 20; num466++)
					{
						int num467 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100, default(Color), 2f);
						Main.dust[num467].noGravity = true;
						Main.dust[num467].velocity *= 2f;
						num467 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100);
						Main.dust[num467].velocity *= 2f;
					}
				}
				else if (type == 253)
				{
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 10);
					for (int num468 = 0; num468 < 20; num468++)
					{
						int num469 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 135, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100, default(Color), 2f);
						Main.dust[num469].noGravity = true;
						Main.dust[num469].velocity *= 2f;
						num469 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 135, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100);
						Main.dust[num469].velocity *= 2f;
					}
				}
				else if (type == 95 || type == 96)
				{
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 10);
					for (int num470 = 0; num470 < 20; num470++)
					{
						int num471 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 75, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100, default(Color), 2f * scale);
						Main.dust[num471].noGravity = true;
						Main.dust[num471].velocity *= 2f;
						num471 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 75, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100, default(Color), 1f * scale);
						Main.dust[num471].velocity *= 2f;
					}
				}
				else if (type == 79)
				{
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 10);
					for (int num472 = 0; num472 < 20; num472++)
					{
						int num473 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 66, 0f, 0f, 100, new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB), 2f);
						Main.dust[num473].noGravity = true;
						Main.dust[num473].velocity *= 4f;
					}
				}
				else if (type == 16)
				{
					if (type == 16 && penetrate == 1)
					{
						maxPenetrate = -1;
						penetrate = -1;
						int num474 = 60;
						base.position.X -= num474 / 2;
						base.position.Y -= num474 / 2;
						base.width += num474;
						base.height += num474;
						tileCollide = false;
						velocity *= 0.01f;
						Damage();
						scale = 0.01f;
					}
					base.position.X += base.width / 2;
					base.width = 10;
					base.position.X -= base.width / 2;
					base.position.Y += base.height / 2;
					base.height = 10;
					base.position.Y -= base.height / 2;
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 10);
					for (int num475 = 0; num475 < 20; num475++)
					{
						int num476 = Dust.NewDust(new Vector2(base.position.X - velocity.X, base.position.Y - velocity.Y), base.width, base.height, 15, 0f, 0f, 100, default(Color), 2f);
						Main.dust[num476].noGravity = true;
						Main.dust[num476].velocity *= 2f;
						num476 = Dust.NewDust(new Vector2(base.position.X - velocity.X, base.position.Y - velocity.Y), base.width, base.height, 15, 0f, 0f, 100);
					}
				}
				else if (type == 17)
				{
					Main.PlaySound(0, (int)base.position.X, (int)base.position.Y);
					for (int num477 = 0; num477 < 5; num477++)
					{
						Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 0);
					}
				}
				else if (type == 31 || type == 42)
				{
					Main.PlaySound(0, (int)base.position.X, (int)base.position.Y);
					for (int num478 = 0; num478 < 5; num478++)
					{
						int num479 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 32);
						Main.dust[num479].velocity *= 0.6f;
					}
				}
				else if (type >= 411 && type <= 414)
				{
					int num480 = 9;
					if (type == 412 || type == 414)
					{
						num480 = 11;
					}
					if (type == 413)
					{
						num480 = 19;
					}
					for (int num481 = 0; num481 < 5; num481++)
					{
						int num482 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, num480, 0f, velocity.Y / 2f);
						Main.dust[num482].noGravity = true;
						Main.dust[num482].velocity -= velocity * 0.5f;
					}
				}
				else if (type == 109)
				{
					Main.PlaySound(0, (int)base.position.X, (int)base.position.Y);
					for (int num483 = 0; num483 < 5; num483++)
					{
						int num484 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 51, 0f, 0f, 0, default(Color), 0.6f);
						Main.dust[num484].velocity *= 0.6f;
					}
				}
				else if (type == 39)
				{
					Main.PlaySound(0, (int)base.position.X, (int)base.position.Y);
					for (int num485 = 0; num485 < 5; num485++)
					{
						int num486 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 38);
						Main.dust[num486].velocity *= 0.6f;
					}
				}
				else if (type == 71)
				{
					Main.PlaySound(0, (int)base.position.X, (int)base.position.Y);
					for (int num487 = 0; num487 < 5; num487++)
					{
						int num488 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 53);
						Main.dust[num488].velocity *= 0.6f;
					}
				}
				else if (type == 40)
				{
					Main.PlaySound(0, (int)base.position.X, (int)base.position.Y);
					for (int num489 = 0; num489 < 5; num489++)
					{
						int num490 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 36);
						Main.dust[num490].velocity *= 0.6f;
					}
				}
				else if (type == 21 || type == 471 || type == 532)
				{
					Main.PlaySound(0, (int)base.position.X, (int)base.position.Y);
					for (int num491 = 0; num491 < 10; num491++)
					{
						Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 26, 0f, 0f, 0, default(Color), 0.8f);
					}
				}
				else if (type == 583)
				{
					Main.PlaySound(0, (int)base.position.X, (int)base.position.Y);
					for (int num492 = 0; num492 < 10; num492++)
					{
						Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 4, 0f, 0f, 100, new Color(20, 250, 20, 240), 0.8f);
					}
				}
				else if (type == 584)
				{
					Main.PlaySound(0, (int)base.position.X, (int)base.position.Y);
					for (int num493 = 0; num493 < 10; num493++)
					{
						Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 4, 0f, 0f, 100, new Color(250, 20, 120, 240), 0.8f);
					}
				}
				else if (type == 24)
				{
					for (int num494 = 0; num494 < 10; num494++)
					{
						Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 1, velocity.X * 0.1f, velocity.Y * 0.1f, 0, default(Color), 0.75f);
					}
				}
				else if (type == 27)
				{
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 10);
					for (int num495 = 0; num495 < 30; num495++)
					{
						int num496 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 172, velocity.X * 0.1f, velocity.Y * 0.1f, 100);
						Main.dust[num496].noGravity = true;
						Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 172, velocity.X * 0.1f, velocity.Y * 0.1f, 100, default(Color), 0.5f);
					}
				}
				else if (type == 38)
				{
					for (int num497 = 0; num497 < 10; num497++)
					{
						Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 42, velocity.X * 0.1f, velocity.Y * 0.1f);
					}
				}
				else if (type == 44 || type == 45)
				{
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 10);
					for (int num498 = 0; num498 < 30; num498++)
					{
						int num499 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 27, velocity.X, velocity.Y, 100, default(Color), 1.7f);
						Main.dust[num499].noGravity = true;
						Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 27, velocity.X, velocity.Y, 100);
					}
				}
				else if (type == 41)
				{
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 14);
					for (int num500 = 0; num500 < 10; num500++)
					{
						Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					}
					for (int num501 = 0; num501 < 5; num501++)
					{
						int num502 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num502].noGravity = true;
						Main.dust[num502].velocity *= 3f;
						num502 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num502].velocity *= 2f;
					}
					int num503 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num503].velocity *= 0.4f;
					Main.gore[num503].velocity.X += (float)Main.rand.Next(-10, 11) * 0.1f;
					Main.gore[num503].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.1f;
					num503 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num503].velocity *= 0.4f;
					Main.gore[num503].velocity.X += (float)Main.rand.Next(-10, 11) * 0.1f;
					Main.gore[num503].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.1f;
					if (owner == Main.myPlayer)
					{
						penetrate = -1;
						base.position.X += base.width / 2;
						base.position.Y += base.height / 2;
						base.width = 64;
						base.height = 64;
						base.position.X -= base.width / 2;
						base.position.Y -= base.height / 2;
						Damage();
					}
				}
				else if (type == 514)
				{
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 14);
					for (int num504 = 0; num504 < 10; num504++)
					{
						int num505 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.3f);
						Main.dust[num505].velocity *= 1.4f;
					}
					for (int num506 = 0; num506 < 6; num506++)
					{
						int num507 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 2.1f);
						Main.dust[num507].noGravity = true;
						Main.dust[num507].velocity *= 4.6f;
						num507 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 1.3f);
						Main.dust[num507].velocity *= 3.3f;
						if (Main.rand.Next(2) == 0)
						{
							num507 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 1.1f);
							Main.dust[num507].velocity *= 2.7f;
						}
					}
					if (owner == Main.myPlayer)
					{
						penetrate = -1;
						base.position.X += base.width / 2;
						base.position.Y += base.height / 2;
						base.width = 112;
						base.height = 112;
						base.position.X -= base.width / 2;
						base.position.Y -= base.height / 2;
						ai[0] = 2f;
						Damage();
					}
				}
				else if (type == 306)
				{
					Main.PlaySound(3, (int)base.position.X, (int)base.position.Y);
					for (int num508 = 0; num508 < 20; num508++)
					{
						int num509 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 184);
						Main.dust[num509].scale *= 1.1f;
						Main.dust[num509].noGravity = true;
					}
					for (int num510 = 0; num510 < 30; num510++)
					{
						int num511 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 184);
						Main.dust[num511].velocity *= 2.5f;
						Main.dust[num511].scale *= 0.8f;
						Main.dust[num511].noGravity = true;
					}
					if (owner == Main.myPlayer)
					{
						int num512 = 2;
						if (Main.rand.Next(10) == 0)
						{
							num512++;
						}
						if (Main.rand.Next(10) == 0)
						{
							num512++;
						}
						if (Main.rand.Next(10) == 0)
						{
							num512++;
						}
						for (int num513 = 0; num513 < num512; num513++)
						{
							float num514 = (float)Main.rand.Next(-35, 36) * 0.02f;
							float num515 = (float)Main.rand.Next(-35, 36) * 0.02f;
							num514 *= 10f;
							num515 *= 10f;
							NewProjectile(base.position.X, base.position.Y, num514, num515, 307, (int)((double)damage * 0.7), (int)((double)knockBack * 0.35), Main.myPlayer);
						}
					}
				}
				else if (type == 469)
				{
					if (owner == Main.myPlayer)
					{
						int num516 = 6;
						for (int num517 = 0; num517 < num516; num517++)
						{
							if (num517 % 2 != 1 || Main.rand.Next(3) == 0)
							{
								Vector2 position5 = base.position;
								Vector2 oldVelocity2 = base.oldVelocity;
								oldVelocity2.Normalize();
								oldVelocity2 *= 8f;
								float num518 = (float)Main.rand.Next(-35, 36) * 0.01f;
								float num519 = (float)Main.rand.Next(-35, 36) * 0.01f;
								position5 -= oldVelocity2 * num517;
								num518 += base.oldVelocity.X / 6f;
								num519 += base.oldVelocity.Y / 6f;
								int num520 = NewProjectile(position5.X, position5.Y, num518, num519, Main.player[owner].beeType(), Main.player[owner].beeDamage(damage / 3), Main.player[owner].beeKB(0f), Main.myPlayer);
								Main.projectile[num520].magic = false;
								Main.projectile[num520].ranged = true;
								Main.projectile[num520].penetrate = 2;
							}
						}
					}
				}
				else if (type == 183)
				{
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 14);
					for (int num521 = 0; num521 < 20; num521++)
					{
						int num522 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num522].velocity *= 1f;
					}
					int num523 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num523].velocity.X += 1f;
					Main.gore[num523].velocity.Y += 1f;
					Main.gore[num523].velocity *= 0.3f;
					num523 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num523].velocity.X -= 1f;
					Main.gore[num523].velocity.Y += 1f;
					Main.gore[num523].velocity *= 0.3f;
					num523 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num523].velocity.X += 1f;
					Main.gore[num523].velocity.Y -= 1f;
					Main.gore[num523].velocity *= 0.3f;
					num523 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num523].velocity.X -= 1f;
					Main.gore[num523].velocity.Y -= 1f;
					Main.gore[num523].velocity *= 0.3f;
					if (owner == Main.myPlayer)
					{
						int num524 = Main.rand.Next(15, 25);
						for (int num525 = 0; num525 < num524; num525++)
						{
							float speedX = (float)Main.rand.Next(-35, 36) * 0.02f;
							float speedY = (float)Main.rand.Next(-35, 36) * 0.02f;
							NewProjectile(base.position.X, base.position.Y, speedX, speedY, Main.player[owner].beeType(), Main.player[owner].beeDamage(damage), Main.player[owner].beeKB(0f), Main.myPlayer);
						}
					}
				}
				else if (aiStyle == 34)
				{
					if (owner != Main.myPlayer)
					{
						timeLeft = 60;
					}
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 14);
					if (type == 167)
					{
						for (int num526 = 0; num526 < 400; num526++)
						{
							float num527 = 16f;
							if (num526 < 300)
							{
								num527 = 12f;
							}
							if (num526 < 200)
							{
								num527 = 8f;
							}
							if (num526 < 100)
							{
								num527 = 4f;
							}
							int num528 = 130;
							int num529 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), 6, 6, num528, 0f, 0f, 100);
							float num530 = Main.dust[num529].velocity.X;
							float y2 = Main.dust[num529].velocity.Y;
							if (num530 == 0f && y2 == 0f)
							{
								num530 = 1f;
							}
							float num531 = (float)Math.Sqrt(num530 * num530 + y2 * y2);
							num531 = num527 / num531;
							num530 *= num531;
							y2 *= num531;
							Main.dust[num529].velocity *= 0.5f;
							Main.dust[num529].velocity.X += num530;
							Main.dust[num529].velocity.Y += y2;
							Main.dust[num529].scale = 1.3f;
							Main.dust[num529].noGravity = true;
						}
					}
					if (type == 168)
					{
						for (int num532 = 0; num532 < 400; num532++)
						{
							float num533 = 2f * ((float)num532 / 100f);
							if (num532 > 100)
							{
								num533 = 10f;
							}
							if (num532 > 250)
							{
								num533 = 13f;
							}
							int num534 = 131;
							int num535 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), 6, 6, num534, 0f, 0f, 100);
							float num536 = Main.dust[num535].velocity.X;
							float y3 = Main.dust[num535].velocity.Y;
							if (num536 == 0f && y3 == 0f)
							{
								num536 = 1f;
							}
							float num537 = (float)Math.Sqrt(num536 * num536 + y3 * y3);
							num537 = num533 / num537;
							if (num532 <= 200)
							{
								num536 *= num537;
								y3 *= num537;
							}
							else
							{
								num536 = num536 * num537 * 1.25f;
								y3 = y3 * num537 * 0.75f;
							}
							Main.dust[num535].velocity *= 0.5f;
							Main.dust[num535].velocity.X += num536;
							Main.dust[num535].velocity.Y += y3;
							if (num532 > 100)
							{
								Main.dust[num535].scale = 1.3f;
								Main.dust[num535].noGravity = true;
							}
						}
					}
					if (type == 169)
					{
						Vector2 vector16 = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2();
						float num538 = Main.rand.Next(5, 9);
						float num539 = Main.rand.Next(12, 17);
						float value12 = Main.rand.Next(3, 7);
						float num540 = 20f;
						for (float num541 = 0f; num541 < num538; num541 += 1f)
						{
							for (int num542 = 0; num542 < 2; num542++)
							{
								Vector2 value13 = vector16.RotatedBy(((num542 == 0) ? 1f : (-1f)) * ((float)Math.PI * 2f) / (num538 * 2f));
								for (float num543 = 0f; num543 < num540; num543 += 1f)
								{
									Vector2 value14 = Vector2.Lerp(vector16, value13, num543 / num540);
									float scaleFactor = MathHelper.Lerp(num539, value12, num543 / num540);
									int num544 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), 6, 6, 133, 0f, 0f, 100, default(Color), 1.3f);
									Main.dust[num544].velocity *= 0.1f;
									Main.dust[num544].noGravity = true;
									Main.dust[num544].velocity += value14 * scaleFactor;
								}
							}
							vector16 = vector16.RotatedBy((float)Math.PI * 2f / num538);
						}
						for (float num545 = 0f; num545 < num538; num545 += 1f)
						{
							for (int num546 = 0; num546 < 2; num546++)
							{
								Vector2 value15 = vector16.RotatedBy(((num546 == 0) ? 1f : (-1f)) * ((float)Math.PI * 2f) / (num538 * 2f));
								for (float num547 = 0f; num547 < num540; num547 += 1f)
								{
									Vector2 value16 = Vector2.Lerp(vector16, value15, num547 / num540);
									float scaleFactor2 = MathHelper.Lerp(num539, value12, num547 / num540) / 2f;
									int num548 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), 6, 6, 133, 0f, 0f, 100, default(Color), 1.3f);
									Main.dust[num548].velocity *= 0.1f;
									Main.dust[num548].noGravity = true;
									Main.dust[num548].velocity += value16 * scaleFactor2;
								}
							}
							vector16 = vector16.RotatedBy((float)Math.PI * 2f / num538);
						}
						for (int num549 = 0; num549 < 100; num549++)
						{
							float num550 = num539;
							int num551 = 132;
							int num552 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), 6, 6, num551, 0f, 0f, 100);
							float num553 = Main.dust[num552].velocity.X;
							float y4 = Main.dust[num552].velocity.Y;
							if (num553 == 0f && y4 == 0f)
							{
								num553 = 1f;
							}
							float num554 = (float)Math.Sqrt(num553 * num553 + y4 * y4);
							num554 = num550 / num554;
							num553 *= num554;
							y4 *= num554;
							Main.dust[num552].velocity *= 0.5f;
							Main.dust[num552].velocity.X += num553;
							Main.dust[num552].velocity.Y += y4;
							Main.dust[num552].scale = 1.3f;
							Main.dust[num552].noGravity = true;
						}
					}
					if (type == 170)
					{
						for (int num555 = 0; num555 < 400; num555++)
						{
							int num556 = 133;
							float num557 = 16f;
							if (num555 > 100)
							{
								num557 = 11f;
							}
							if (num555 > 100)
							{
								num556 = 134;
							}
							if (num555 > 200)
							{
								num557 = 8f;
							}
							if (num555 > 200)
							{
								num556 = 133;
							}
							if (num555 > 300)
							{
								num557 = 5f;
							}
							if (num555 > 300)
							{
								num556 = 134;
							}
							int num558 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), 6, 6, num556, 0f, 0f, 100);
							float num559 = Main.dust[num558].velocity.X;
							float y5 = Main.dust[num558].velocity.Y;
							if (num559 == 0f && y5 == 0f)
							{
								num559 = 1f;
							}
							float num560 = (float)Math.Sqrt(num559 * num559 + y5 * y5);
							num560 = num557 / num560;
							if (num555 > 300)
							{
								num559 = num559 * num560 * 0.7f;
								y5 *= num560;
							}
							else if (num555 > 200)
							{
								num559 *= num560;
								y5 = y5 * num560 * 0.7f;
							}
							else if (num555 > 100)
							{
								num559 = num559 * num560 * 0.7f;
								y5 *= num560;
							}
							else
							{
								num559 *= num560;
								y5 = y5 * num560 * 0.7f;
							}
							Main.dust[num558].velocity *= 0.5f;
							Main.dust[num558].velocity.X += num559;
							Main.dust[num558].velocity.Y += y5;
							if (Main.rand.Next(3) != 0)
							{
								Main.dust[num558].scale = 1.3f;
								Main.dust[num558].noGravity = true;
							}
						}
					}
					if (type == 415)
					{
						Vector2 vector17 = vector17 = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2();
						float num561 = Main.rand.Next(5, 9);
						float num562 = (float)Main.rand.Next(10, 15) * 0.66f;
						float num563 = (float)Main.rand.Next(4, 7) / 2f;
						int num564 = 30;
						for (int num565 = 0; (float)num565 < (float)num564 * num561; num565++)
						{
							if (num565 % num564 == 0)
							{
								vector17 = vector17.RotatedBy((float)Math.PI * 2f / num561);
							}
							float scaleFactor3 = MathHelper.Lerp(num563, num562, (float)(num565 % num564) / (float)num564);
							int num566 = 130;
							int num567 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), 6, 6, num566, 0f, 0f, 100);
							Main.dust[num567].velocity *= 0.1f;
							Main.dust[num567].velocity += vector17 * scaleFactor3;
							Main.dust[num567].scale = 1.3f;
							Main.dust[num567].noGravity = true;
						}
						for (int num568 = 0; num568 < 100; num568++)
						{
							float num569 = num562;
							if (num568 < 30)
							{
								num569 = (num563 + num562) / 2f;
							}
							int num570 = 130;
							int num571 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), 6, 6, num570, 0f, 0f, 100);
							float num572 = Main.dust[num571].velocity.X;
							float y6 = Main.dust[num571].velocity.Y;
							if (num572 == 0f && y6 == 0f)
							{
								num572 = 1f;
							}
							float num573 = (float)Math.Sqrt(num572 * num572 + y6 * y6);
							num573 = num569 / num573;
							num572 *= num573;
							y6 *= num573;
							Main.dust[num571].velocity *= 0.5f;
							Main.dust[num571].velocity.X += num572;
							Main.dust[num571].velocity.Y += y6;
							Main.dust[num571].scale = 1.3f;
							Main.dust[num571].noGravity = true;
						}
					}
					if (type == 416)
					{
						Vector2 vector18 = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2();
						Vector2 vector19 = vector18;
						float num574 = Main.rand.Next(3, 6) * 2;
						int num575 = 20;
						float num576 = (Main.rand.Next(2) == 0) ? 1f : (-1f);
						bool flag2 = true;
						for (int num577 = 0; (float)num577 < (float)num575 * num574; num577++)
						{
							if (num577 % num575 == 0)
							{
								vector19 = vector19.RotatedBy(num576 * ((float)Math.PI * 2f / num574));
								vector18 = vector19;
								flag2 = !flag2;
							}
							else
							{
								float num578 = (float)Math.PI * 2f / ((float)num575 * num574);
								vector18 = vector18.RotatedBy(num578 * num576 * 3f);
							}
							float scaleFactor4 = MathHelper.Lerp(1f, 8f, (float)(num577 % num575) / (float)num575);
							int num579 = 131;
							int num580 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), 6, 6, num579, 0f, 0f, 100, default(Color), 1.4f);
							Main.dust[num580].velocity *= 0.1f;
							Main.dust[num580].velocity += vector18 * scaleFactor4;
							if (flag2)
							{
								Main.dust[num580].scale = 0.9f;
							}
							Main.dust[num580].noGravity = true;
						}
					}
					if (type == 417)
					{
						float num581 = (float)Main.rand.NextDouble() * ((float)Math.PI * 2f);
						float num582 = (float)Main.rand.NextDouble() * ((float)Math.PI * 2f);
						float num583 = 4f + (float)Main.rand.NextDouble() * 3f;
						float num584 = 4f + (float)Main.rand.NextDouble() * 3f;
						float num585 = num583;
						if (num584 > num585)
						{
							num585 = num584;
						}
						for (int num586 = 0; num586 < 150; num586++)
						{
							int num587 = 132;
							float num588 = num585;
							if (num586 > 50)
							{
								num588 = num584;
							}
							if (num586 > 50)
							{
								num587 = 133;
							}
							if (num586 > 100)
							{
								num588 = num583;
							}
							if (num586 > 100)
							{
								num587 = 132;
							}
							int num589 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), 6, 6, num587, 0f, 0f, 100);
							Vector2 vector20 = Main.dust[num589].velocity;
							vector20.Normalize();
							vector20 *= num588;
							if (num586 > 100)
							{
								vector20.X *= 0.5f;
								vector20 = vector20.RotatedBy(num581);
							}
							else if (num586 > 50)
							{
								vector20.Y *= 0.5f;
								vector20 = vector20.RotatedBy(num582);
							}
							Main.dust[num589].velocity *= 0.2f;
							Main.dust[num589].velocity += vector20;
							if (num586 <= 200)
							{
								Main.dust[num589].scale = 1.3f;
								Main.dust[num589].noGravity = true;
							}
						}
					}
					if (type == 418)
					{
						Vector2 vector21 = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2();
						float num590 = Main.rand.Next(5, 12);
						float num591 = (float)Main.rand.Next(9, 14) * 0.66f;
						float num592 = (float)Main.rand.Next(2, 4) * 0.66f;
						float num593 = 15f;
						for (float num594 = 0f; num594 < num590; num594 += 1f)
						{
							for (int num595 = 0; num595 < 2; num595++)
							{
								Vector2 value17 = vector21.RotatedBy(((num595 == 0) ? 1f : (-1f)) * ((float)Math.PI * 2f) / (num590 * 2f));
								for (float num596 = 0f; num596 < num593; num596 += 1f)
								{
									Vector2 value18 = Vector2.SmoothStep(vector21, value17, num596 / num593);
									float scaleFactor5 = MathHelper.SmoothStep(num591, num592, num596 / num593);
									int num597 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), 6, 6, 134, 0f, 0f, 100, default(Color), 1.3f);
									Main.dust[num597].velocity *= 0.1f;
									Main.dust[num597].noGravity = true;
									Main.dust[num597].velocity += value18 * scaleFactor5;
								}
							}
							vector21 = vector21.RotatedBy((float)Math.PI * 2f / num590);
						}
						for (int num598 = 0; num598 < 120; num598++)
						{
							float num599 = num591;
							int num600 = 133;
							if (num598 < 80)
							{
								num599 = num592 - 0.5f;
							}
							else
							{
								num600 = 131;
							}
							int num601 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), 6, 6, num600, 0f, 0f, 100);
							float num602 = Main.dust[num601].velocity.X;
							float y7 = Main.dust[num601].velocity.Y;
							if (num602 == 0f && y7 == 0f)
							{
								num602 = 1f;
							}
							float num603 = (float)Math.Sqrt(num602 * num602 + y7 * y7);
							num603 = num599 / num603;
							num602 *= num603;
							y7 *= num603;
							Main.dust[num601].velocity *= 0.2f;
							Main.dust[num601].velocity.X += num602;
							Main.dust[num601].velocity.Y += y7;
							Main.dust[num601].scale = 1.3f;
							Main.dust[num601].noGravity = true;
						}
					}
					base.position.X += base.width / 2;
					base.position.Y += base.height / 2;
					base.width = 192;
					base.height = 192;
					base.position.X -= base.width / 2;
					base.position.Y -= base.height / 2;
					penetrate = -1;
					Damage();
				}
				else if (type == 312)
				{
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 14);
					base.position.X += base.width / 2;
					base.position.Y += base.height / 2;
					base.width = 22;
					base.height = 22;
					base.position.X -= base.width / 2;
					base.position.Y -= base.height / 2;
					for (int num604 = 0; num604 < 30; num604++)
					{
						int num605 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num605].velocity *= 1.4f;
					}
					for (int num606 = 0; num606 < 20; num606++)
					{
						int num607 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 3.5f);
						Main.dust[num607].noGravity = true;
						Main.dust[num607].velocity *= 7f;
						num607 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num607].velocity *= 3f;
					}
					for (int num608 = 0; num608 < 2; num608++)
					{
						float num609 = 0.4f;
						if (num608 == 1)
						{
							num609 = 0.8f;
						}
						int num610 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
						Main.gore[num610].velocity *= num609;
						Main.gore[num610].velocity.X += 1f;
						Main.gore[num610].velocity.Y += 1f;
						num610 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
						Main.gore[num610].velocity *= num609;
						Main.gore[num610].velocity.X -= 1f;
						Main.gore[num610].velocity.Y += 1f;
						num610 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
						Main.gore[num610].velocity *= num609;
						Main.gore[num610].velocity.X += 1f;
						Main.gore[num610].velocity.Y -= 1f;
						num610 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
						Main.gore[num610].velocity *= num609;
						Main.gore[num610].velocity.X -= 1f;
						Main.gore[num610].velocity.Y -= 1f;
					}
					base.position.X += base.width / 2;
					base.position.Y += base.height / 2;
					base.width = 128;
					base.height = 128;
					base.position.X -= base.width / 2;
					base.position.Y -= base.height / 2;
					Damage();
				}
				else if (type == 133 || type == 134 || type == 135 || type == 136 || type == 137 || type == 138 || type == 303 || type == 338 || type == 339)
				{
					if (type == 30 || type == 133 || type == 136 || type == 139)
					{
						Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 62);
					}
					else
					{
						Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 14);
					}
					base.position.X += base.width / 2;
					base.position.Y += base.height / 2;
					base.width = 22;
					base.height = 22;
					base.position.X -= base.width / 2;
					base.position.Y -= base.height / 2;
					for (int num611 = 0; num611 < 30; num611++)
					{
						int num612 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num612].velocity *= 1.4f;
					}
					for (int num613 = 0; num613 < 20; num613++)
					{
						int num614 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 3.5f);
						Main.dust[num614].noGravity = true;
						Main.dust[num614].velocity *= 7f;
						num614 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num614].velocity *= 3f;
					}
					for (int num615 = 0; num615 < 2; num615++)
					{
						float num616 = 0.4f;
						if (num615 == 1)
						{
							num616 = 0.8f;
						}
						int num617 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
						Main.gore[num617].velocity *= num616;
						Main.gore[num617].velocity.X += 1f;
						Main.gore[num617].velocity.Y += 1f;
						num617 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
						Main.gore[num617].velocity *= num616;
						Main.gore[num617].velocity.X -= 1f;
						Main.gore[num617].velocity.Y += 1f;
						num617 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
						Main.gore[num617].velocity *= num616;
						Main.gore[num617].velocity.X += 1f;
						Main.gore[num617].velocity.Y -= 1f;
						num617 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
						Main.gore[num617].velocity *= num616;
						Main.gore[num617].velocity.X -= 1f;
						Main.gore[num617].velocity.Y -= 1f;
					}
				}
				else if (type == 139 || type == 140 || type == 141 || type == 142 || type == 143 || type == 144 || type == 340 || type == 341)
				{
					if (type == 30 || type == 133 || type == 136 || type == 139)
					{
						Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 62);
					}
					else
					{
						Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 14);
					}
					base.position.X += base.width / 2;
					base.position.Y += base.height / 2;
					base.width = 80;
					base.height = 80;
					base.position.X -= base.width / 2;
					base.position.Y -= base.height / 2;
					for (int num618 = 0; num618 < 40; num618++)
					{
						int num619 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 2f);
						Main.dust[num619].velocity *= 3f;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num619].scale = 0.5f;
							Main.dust[num619].fadeIn = 1f + (float)Main.rand.Next(10) * 0.1f;
						}
					}
					for (int num620 = 0; num620 < 70; num620++)
					{
						int num621 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 3f);
						Main.dust[num621].noGravity = true;
						Main.dust[num621].velocity *= 5f;
						num621 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 2f);
						Main.dust[num621].velocity *= 2f;
					}
					for (int num622 = 0; num622 < 3; num622++)
					{
						float num623 = 0.33f;
						if (num622 == 1)
						{
							num623 = 0.66f;
						}
						if (num622 == 2)
						{
							num623 = 1f;
						}
						int num624 = Gore.NewGore(new Vector2(base.position.X + (float)(base.width / 2) - 24f, base.position.Y + (float)(base.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
						Main.gore[num624].velocity *= num623;
						Main.gore[num624].velocity.X += 1f;
						Main.gore[num624].velocity.Y += 1f;
						num624 = Gore.NewGore(new Vector2(base.position.X + (float)(base.width / 2) - 24f, base.position.Y + (float)(base.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
						Main.gore[num624].velocity *= num623;
						Main.gore[num624].velocity.X -= 1f;
						Main.gore[num624].velocity.Y += 1f;
						num624 = Gore.NewGore(new Vector2(base.position.X + (float)(base.width / 2) - 24f, base.position.Y + (float)(base.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
						Main.gore[num624].velocity *= num623;
						Main.gore[num624].velocity.X += 1f;
						Main.gore[num624].velocity.Y -= 1f;
						num624 = Gore.NewGore(new Vector2(base.position.X + (float)(base.width / 2) - 24f, base.position.Y + (float)(base.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
						Main.gore[num624].velocity *= num623;
						Main.gore[num624].velocity.X -= 1f;
						Main.gore[num624].velocity.Y -= 1f;
					}
					base.position.X += base.width / 2;
					base.position.Y += base.height / 2;
					base.width = 10;
					base.height = 10;
					base.position.X -= base.width / 2;
					base.position.Y -= base.height / 2;
				}
				else if (type == 246)
				{
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 14);
					for (int num625 = 0; num625 < 10; num625++)
					{
						int num626 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num626].velocity *= 0.9f;
					}
					for (int num627 = 0; num627 < 5; num627++)
					{
						int num628 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num628].noGravity = true;
						Main.dust[num628].velocity *= 3f;
						num628 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num628].velocity *= 2f;
					}
					int num629 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num629].velocity *= 0.3f;
					Main.gore[num629].velocity.X += Main.rand.Next(-1, 2);
					Main.gore[num629].velocity.Y += Main.rand.Next(-1, 2);
					base.position.X += base.width / 2;
					base.position.Y += base.height / 2;
					base.width = 150;
					base.height = 150;
					base.position.X -= base.width / 2;
					base.position.Y -= base.height / 2;
					penetrate = -1;
					maxPenetrate = 0;
					Damage();
					if (owner == Main.myPlayer)
					{
						int num630 = Main.rand.Next(2, 6);
						for (int num631 = 0; num631 < num630; num631++)
						{
							float num632 = Main.rand.Next(-100, 101);
							num632 += 0.01f;
							float num633 = Main.rand.Next(-100, 101);
							num632 -= 0.01f;
							float num634 = (float)Math.Sqrt(num632 * num632 + num633 * num633);
							num634 = 8f / num634;
							num632 *= num634;
							num633 *= num634;
							int num635 = NewProjectile(base.Center.X - base.oldVelocity.X, base.Center.Y - base.oldVelocity.Y, num632, num633, 249, damage, knockBack, owner);
							Main.projectile[num635].maxPenetrate = 0;
						}
					}
				}
				else if (type == 249)
				{
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 14);
					for (int num636 = 0; num636 < 7; num636++)
					{
						int num637 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num637].velocity *= 0.8f;
					}
					for (int num638 = 0; num638 < 2; num638++)
					{
						int num639 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num639].noGravity = true;
						Main.dust[num639].velocity *= 2.5f;
						num639 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num639].velocity *= 1.5f;
					}
					int num640 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num640].velocity *= 0.2f;
					Main.gore[num640].velocity.X += Main.rand.Next(-1, 2);
					Main.gore[num640].velocity.Y += Main.rand.Next(-1, 2);
					base.position.X += base.width / 2;
					base.position.Y += base.height / 2;
					base.width = 100;
					base.height = 100;
					base.position.X -= base.width / 2;
					base.position.Y -= base.height / 2;
					penetrate = -1;
					Damage();
				}
				else if (type == 588)
				{
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 14);
					base.position = base.Center;
					base.width = (base.height = 22);
					base.Center = base.position;
					for (int num641 = 0; num641 < 8; num641++)
					{
						int num642 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 219 + Main.rand.Next(5));
						Main.dust[num642].velocity *= 1.4f;
						Main.dust[num642].fadeIn = 1f;
						Main.dust[num642].noGravity = true;
					}
					for (int num643 = 0; num643 < 15; num643++)
					{
						int num644 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 139 + Main.rand.Next(4), 0f, 0f, 0, default(Color), 1.6f);
						Main.dust[num644].noGravity = true;
						Main.dust[num644].velocity *= 5f;
						num644 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 139 + Main.rand.Next(4), 0f, 0f, 0, default(Color), 1.9f);
						Main.dust[num644].velocity *= 3f;
					}
					if (Main.rand.Next(2) == 0)
					{
						int num645 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(276, 283));
						Main.gore[num645].velocity *= 0.4f;
						Main.gore[num645].velocity.X += 1f;
						Main.gore[num645].velocity.Y += 1f;
					}
					if (Main.rand.Next(2) == 0)
					{
						int num645 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(276, 283));
						Main.gore[num645].velocity *= 0.4f;
						Main.gore[num645].velocity.X -= 1f;
						Main.gore[num645].velocity.Y += 1f;
					}
					if (Main.rand.Next(2) == 0)
					{
						int num645 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(276, 283));
						Main.gore[num645].velocity *= 0.4f;
						Main.gore[num645].velocity.X += 1f;
						Main.gore[num645].velocity.Y -= 1f;
					}
					if (Main.rand.Next(2) == 0)
					{
						int num645 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(276, 283));
						Main.gore[num645].velocity *= 0.4f;
						Main.gore[num645].velocity.X -= 1f;
						Main.gore[num645].velocity.Y -= 1f;
					}
				}
				else if (type == 28 || type == 30 || type == 37 || type == 75 || type == 102 || type == 164 || type == 397 || type == 517 || type == 516 || type == 519)
				{
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 14);
					base.position.X += base.width / 2;
					base.position.Y += base.height / 2;
					base.width = 22;
					base.height = 22;
					base.position.X -= base.width / 2;
					base.position.Y -= base.height / 2;
					for (int num646 = 0; num646 < 20; num646++)
					{
						int num647 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num647].velocity *= 1.4f;
					}
					for (int num648 = 0; num648 < 10; num648++)
					{
						int num649 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num649].noGravity = true;
						Main.dust[num649].velocity *= 5f;
						num649 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num649].velocity *= 3f;
					}
					int num650 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num650].velocity *= 0.4f;
					Main.gore[num650].velocity.X += 1f;
					Main.gore[num650].velocity.Y += 1f;
					num650 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num650].velocity *= 0.4f;
					Main.gore[num650].velocity.X -= 1f;
					Main.gore[num650].velocity.Y += 1f;
					num650 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num650].velocity *= 0.4f;
					Main.gore[num650].velocity.X += 1f;
					Main.gore[num650].velocity.Y -= 1f;
					num650 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num650].velocity *= 0.4f;
					Main.gore[num650].velocity.X -= 1f;
					Main.gore[num650].velocity.Y -= 1f;
					if (type == 102)
					{
						base.position.X += base.width / 2;
						base.position.Y += base.height / 2;
						base.width = 128;
						base.height = 128;
						base.position.X -= base.width / 2;
						base.position.Y -= base.height / 2;
						damage = 40;
						Damage();
					}
				}
				else if (type == 29 || type == 108 || type == 470 || type == 637)
				{
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 14);
					if (type == 29)
					{
						base.position.X += base.width / 2;
						base.position.Y += base.height / 2;
						base.width = 200;
						base.height = 200;
						base.position.X -= base.width / 2;
						base.position.Y -= base.height / 2;
					}
					for (int num651 = 0; num651 < 50; num651++)
					{
						int num652 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 2f);
						Main.dust[num652].velocity *= 1.4f;
					}
					for (int num653 = 0; num653 < 80; num653++)
					{
						int num654 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 3f);
						Main.dust[num654].noGravity = true;
						Main.dust[num654].velocity *= 5f;
						num654 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 2f);
						Main.dust[num654].velocity *= 3f;
					}
					for (int num655 = 0; num655 < 2; num655++)
					{
						int num656 = Gore.NewGore(new Vector2(base.position.X + (float)(base.width / 2) - 24f, base.position.Y + (float)(base.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
						Main.gore[num656].scale = 1.5f;
						Main.gore[num656].velocity.X += 1.5f;
						Main.gore[num656].velocity.Y += 1.5f;
						num656 = Gore.NewGore(new Vector2(base.position.X + (float)(base.width / 2) - 24f, base.position.Y + (float)(base.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
						Main.gore[num656].scale = 1.5f;
						Main.gore[num656].velocity.X -= 1.5f;
						Main.gore[num656].velocity.Y += 1.5f;
						num656 = Gore.NewGore(new Vector2(base.position.X + (float)(base.width / 2) - 24f, base.position.Y + (float)(base.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
						Main.gore[num656].scale = 1.5f;
						Main.gore[num656].velocity.X += 1.5f;
						Main.gore[num656].velocity.Y -= 1.5f;
						num656 = Gore.NewGore(new Vector2(base.position.X + (float)(base.width / 2) - 24f, base.position.Y + (float)(base.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
						Main.gore[num656].scale = 1.5f;
						Main.gore[num656].velocity.X -= 1.5f;
						Main.gore[num656].velocity.Y -= 1.5f;
					}
					base.position.X += base.width / 2;
					base.position.Y += base.height / 2;
					base.width = 10;
					base.height = 10;
					base.position.X -= base.width / 2;
					base.position.Y -= base.height / 2;
				}
				else if (type == 69)
				{
					Main.PlaySound(13, (int)base.position.X, (int)base.position.Y);
					for (int num657 = 0; num657 < 5; num657++)
					{
						Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 13);
					}
					for (int num658 = 0; num658 < 30; num658++)
					{
						int num659 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 33, 0f, -2f, 0, default(Color), 1.1f);
						Main.dust[num659].alpha = 100;
						Main.dust[num659].velocity.X *= 1.5f;
						Main.dust[num659].velocity *= 3f;
					}
				}
				else if (type == 70)
				{
					Main.PlaySound(13, (int)base.position.X, (int)base.position.Y);
					for (int num660 = 0; num660 < 5; num660++)
					{
						Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 13);
					}
					for (int num661 = 0; num661 < 30; num661++)
					{
						int num662 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 52, 0f, -2f, 0, default(Color), 1.1f);
						Main.dust[num662].alpha = 100;
						Main.dust[num662].velocity.X *= 1.5f;
						Main.dust[num662].velocity *= 3f;
					}
				}
				else if (type == 621)
				{
					Main.PlaySound(13, (int)base.position.X, (int)base.position.Y);
					for (int num663 = 0; num663 < 5; num663++)
					{
						Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 13);
					}
					for (int num664 = 0; num664 < 30; num664++)
					{
						int num665 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 266, 0f, -2f, 0, default(Color), 1.1f);
						Main.dust[num665].alpha = 100;
						Main.dust[num665].velocity.X *= 1.5f;
						Main.dust[num665].velocity *= 3f;
					}
				}
				else if (type == 114 || type == 115)
				{
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 10);
					for (int num666 = 4; num666 < 31; num666++)
					{
						float num667 = base.oldVelocity.X * (30f / (float)num666);
						float num668 = base.oldVelocity.Y * (30f / (float)num666);
						int num669 = Dust.NewDust(new Vector2(base.position.X - num667, base.position.Y - num668), 8, 8, 27, base.oldVelocity.X, base.oldVelocity.Y, 100, default(Color), 1.4f);
						Main.dust[num669].noGravity = true;
						Main.dust[num669].velocity *= 0.5f;
						num669 = Dust.NewDust(new Vector2(base.position.X - num667, base.position.Y - num668), 8, 8, 27, base.oldVelocity.X, base.oldVelocity.Y, 100, default(Color), 0.9f);
						Main.dust[num669].velocity *= 0.5f;
					}
				}
				else if (type == 116)
				{
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 10);
					for (int num670 = 4; num670 < 31; num670++)
					{
						float num671 = base.oldVelocity.X * (30f / (float)num670);
						float num672 = base.oldVelocity.Y * (30f / (float)num670);
						int num673 = Dust.NewDust(new Vector2(base.position.X - num671, base.position.Y - num672), 8, 8, 64, base.oldVelocity.X, base.oldVelocity.Y, 100, default(Color), 1.8f);
						Main.dust[num673].noGravity = true;
						num673 = Dust.NewDust(new Vector2(base.position.X - num671, base.position.Y - num672), 8, 8, 64, base.oldVelocity.X, base.oldVelocity.Y, 100, default(Color), 1.4f);
						Main.dust[num673].noGravity = true;
					}
				}
				else if (type == 173)
				{
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 10);
					for (int num674 = 4; num674 < 24; num674++)
					{
						float num675 = base.oldVelocity.X * (30f / (float)num674);
						float num676 = base.oldVelocity.Y * (30f / (float)num674);
						int num677;
						switch (Main.rand.Next(3))
						{
						case 0:
							num677 = 15;
							break;
						case 1:
							num677 = 57;
							break;
						default:
							num677 = 58;
							break;
						}
						int num678 = Dust.NewDust(new Vector2(base.position.X - num675, base.position.Y - num676), 8, 8, num677, base.oldVelocity.X * 0.2f, base.oldVelocity.Y * 0.2f, 100, default(Color), 1.8f);
						Main.dust[num678].velocity *= 1.5f;
						Main.dust[num678].noGravity = true;
					}
				}
				else if (type == 132)
				{
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 10);
					for (int num679 = 4; num679 < 31; num679++)
					{
						float num680 = base.oldVelocity.X * (30f / (float)num679);
						float num681 = base.oldVelocity.Y * (30f / (float)num679);
						int num682 = Dust.NewDust(new Vector2(oldPosition.X - num680, oldPosition.Y - num681), 8, 8, 107, base.oldVelocity.X, base.oldVelocity.Y, 100, default(Color), 1.8f);
						Main.dust[num682].noGravity = true;
						Main.dust[num682].velocity *= 0.5f;
						num682 = Dust.NewDust(new Vector2(oldPosition.X - num680, oldPosition.Y - num681), 8, 8, 107, base.oldVelocity.X, base.oldVelocity.Y, 100, default(Color), 1.4f);
						Main.dust[num682].velocity *= 0.05f;
					}
				}
				else if (type == 156)
				{
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 10);
					for (int num683 = 4; num683 < 31; num683++)
					{
						float num684 = base.oldVelocity.X * (30f / (float)num683);
						float num685 = base.oldVelocity.Y * (30f / (float)num683);
						int num686 = Dust.NewDust(new Vector2(oldPosition.X - num684, oldPosition.Y - num685), 8, 8, 73, base.oldVelocity.X, base.oldVelocity.Y, 255, default(Color), 1.8f);
						Main.dust[num686].noGravity = true;
						Main.dust[num686].velocity *= 0.5f;
						num686 = Dust.NewDust(new Vector2(oldPosition.X - num684, oldPosition.Y - num685), 8, 8, 73, base.oldVelocity.X, base.oldVelocity.Y, 255, default(Color), 1.4f);
						Main.dust[num686].velocity *= 0.05f;
						Main.dust[num686].noGravity = true;
					}
				}
				else if (type == 157)
				{
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 10);
					for (int num687 = 4; num687 < 31; num687++)
					{
						int num688 = Dust.NewDust(base.position, base.width, base.height, 107, base.oldVelocity.X, base.oldVelocity.Y, 100, default(Color), 1.8f);
						Main.dust[num688].noGravity = true;
						Main.dust[num688].velocity *= 0.5f;
					}
				}
				else if (type == 370)
				{
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 4);
					for (int num689 = 0; num689 < 5; num689++)
					{
						Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 13);
					}
					for (int num690 = 0; num690 < 30; num690++)
					{
						Vector2 value19 = new Vector2(Main.rand.Next(-10, 11), Main.rand.Next(-10, 11));
						value19.Normalize();
						int num691 = Gore.NewGore(base.Center + value19 * 10f, value19 * Main.rand.Next(4, 9) * 0.66f + Vector2.UnitY * 1.5f, 331, (float)Main.rand.Next(40, 141) * 0.01f);
						Main.gore[num691].sticky = false;
					}
				}
				else if (type == 371)
				{
					Main.PlaySound(13, (int)base.position.X, (int)base.position.Y);
					Main.PlaySound(2, (int)base.position.X, (int)base.position.Y, 16);
					for (int num692 = 0; num692 < 5; num692++)
					{
						Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 13);
					}
					for (int num693 = 0; num693 < 30; num693++)
					{
						Vector2 value20 = new Vector2(Main.rand.Next(-10, 11), Main.rand.Next(-10, 11));
						value20.Normalize();
						value20 *= 0.4f;
						int num694 = Gore.NewGore(base.Center + value20 * 10f, value20 * Main.rand.Next(4, 9) * 0.66f + Vector2.UnitY * 1.5f, Main.rand.Next(435, 438), (float)Main.rand.Next(20, 100) * 0.01f);
						Main.gore[num694].sticky = false;
					}
				}
			}
			if (owner == Main.myPlayer)
			{
				if (type == 28 || type == 29 || type == 37 || type == 108 || type == 136 || type == 137 || type == 138 || type == 142 || type == 143 || type == 144 || type == 339 || type == 341 || type == 470 || type == 516 || type == 519 || type == 637)
				{
					int num695 = 3;
					if (type == 28 || type == 37 || type == 516 || type == 519)
					{
						num695 = 4;
					}
					if (type == 29 || type == 470 || type == 637)
					{
						num695 = 7;
					}
					if (type == 142 || type == 143 || type == 144 || type == 341)
					{
						num695 = 5;
					}
					if (type == 108)
					{
						num695 = 10;
					}
					int num696 = (int)(base.position.X / 16f - (float)num695);
					int num697 = (int)(base.position.X / 16f + (float)num695);
					int num698 = (int)(base.position.Y / 16f - (float)num695);
					int num699 = (int)(base.position.Y / 16f + (float)num695);
					if (num696 < 0)
					{
						num696 = 0;
					}
					if (num697 > Main.maxTilesX)
					{
						num697 = Main.maxTilesX;
					}
					if (num698 < 0)
					{
						num698 = 0;
					}
					if (num699 > Main.maxTilesY)
					{
						num699 = Main.maxTilesY;
					}
					bool flag3 = false;
					for (int num700 = num696; num700 <= num697; num700++)
					{
						for (int num701 = num698; num701 <= num699; num701++)
						{
							float num702 = Math.Abs((float)num700 - base.position.X / 16f);
							float num703 = Math.Abs((float)num701 - base.position.Y / 16f);
							double num704 = Math.Sqrt(num702 * num702 + num703 * num703);
							if (num704 < (double)num695 && Main.tile[num700, num701] != null && Main.tile[num700, num701].wall == 0)
							{
								flag3 = true;
								break;
							}
						}
					}
					AchievementsHelper.CurrentlyMining = true;
					for (int num705 = num696; num705 <= num697; num705++)
					{
						for (int num706 = num698; num706 <= num699; num706++)
						{
							float num707 = Math.Abs((float)num705 - base.position.X / 16f);
							float num708 = Math.Abs((float)num706 - base.position.Y / 16f);
							double num709 = Math.Sqrt(num707 * num707 + num708 * num708);
							if (!(num709 < (double)num695))
							{
								continue;
							}
							bool flag4 = true;
							if (Main.tile[num705, num706] != null && Main.tile[num705, num706].active())
							{
								flag4 = true;
								if (Main.tileDungeon[Main.tile[num705, num706].type] || Main.tile[num705, num706].type == 21 || Main.tile[num705, num706].type == 26 || Main.tile[num705, num706].type == 107 || Main.tile[num705, num706].type == 108 || Main.tile[num705, num706].type == 111 || Main.tile[num705, num706].type == 226 || Main.tile[num705, num706].type == 237 || Main.tile[num705, num706].type == 221 || Main.tile[num705, num706].type == 222 || Main.tile[num705, num706].type == 223 || Main.tile[num705, num706].type == 211 || Main.tile[num705, num706].type == 404)
								{
									flag4 = false;
								}
								if (!Main.hardMode && Main.tile[num705, num706].type == 58)
								{
									flag4 = false;
								}
								if (flag4)
								{
									WorldGen.KillTile(num705, num706);
									if (!Main.tile[num705, num706].active() && Main.netMode != 0)
									{
										NetMessage.SendData(17, -1, -1, "", 0, num705, num706);
									}
								}
							}
							if (!flag4)
							{
								continue;
							}
							for (int num710 = num705 - 1; num710 <= num705 + 1; num710++)
							{
								for (int num711 = num706 - 1; num711 <= num706 + 1; num711++)
								{
									if (Main.tile[num710, num711] != null && Main.tile[num710, num711].wall > 0 && flag3)
									{
										WorldGen.KillWall(num710, num711);
										if (Main.tile[num710, num711].wall == 0 && Main.netMode != 0)
										{
											NetMessage.SendData(17, -1, -1, "", 2, num710, num711);
										}
									}
								}
							}
						}
					}
					AchievementsHelper.CurrentlyMining = false;
				}
				if (Main.netMode != 0)
				{
					NetMessage.SendData(29, -1, -1, "", identity, owner);
				}
				if (!noDropItem)
				{
					int num712 = -1;
					if (aiStyle == 10)
					{
						int num713 = (int)(base.position.X + (float)(base.width / 2)) / 16;
						int num714 = (int)(base.position.Y + (float)(base.width / 2)) / 16;
						int num715 = 0;
						int num716 = 2;
						if (type == 109)
						{
							num715 = 147;
							num716 = 0;
						}
						if (type == 31)
						{
							num715 = 53;
							num716 = 0;
						}
						if (type == 42)
						{
							num715 = 53;
							num716 = 0;
						}
						if (type == 56)
						{
							num715 = 112;
							num716 = 0;
						}
						if (type == 65)
						{
							num715 = 112;
							num716 = 0;
						}
						if (type == 67)
						{
							num715 = 116;
							num716 = 0;
						}
						if (type == 68)
						{
							num715 = 116;
							num716 = 0;
						}
						if (type == 71)
						{
							num715 = 123;
							num716 = 0;
						}
						if (type == 39)
						{
							num715 = 59;
							num716 = 176;
						}
						if (type == 40)
						{
							num715 = 57;
							num716 = 172;
						}
						if (type == 179)
						{
							num715 = 224;
							num716 = 0;
						}
						if (type == 241)
						{
							num715 = 234;
							num716 = 0;
						}
						if (type == 354)
						{
							num715 = 234;
							num716 = 0;
						}
						if (type == 411)
						{
							num715 = 330;
							num716 = 71;
						}
						if (type == 412)
						{
							num715 = 331;
							num716 = 72;
						}
						if (type == 413)
						{
							num715 = 332;
							num716 = 73;
						}
						if (type == 414)
						{
							num715 = 333;
							num716 = 74;
						}
						if (type == 109)
						{
							int num717 = Player.FindClosest(base.position, base.width, base.height);
							if ((double)(base.Center - Main.player[num717].Center).Length() > (double)Main.maxScreenW * 0.75)
							{
								num715 = -1;
								num716 = 593;
							}
						}
						if (Main.tile[num713, num714].halfBrick() && velocity.Y > 0f && Math.Abs(velocity.Y) > Math.Abs(velocity.X))
						{
							num714--;
						}
						if (!Main.tile[num713, num714].active() && num715 >= 0)
						{
							bool flag5 = false;
							if (num714 < Main.maxTilesY - 2 && Main.tile[num713, num714 + 1] != null && Main.tile[num713, num714 + 1].active() && Main.tile[num713, num714 + 1].type == 314)
							{
								flag5 = true;
							}
							if (!flag5)
							{
								WorldGen.PlaceTile(num713, num714, num715, false, true);
							}
							if (!flag5 && Main.tile[num713, num714].active() && Main.tile[num713, num714].type == num715)
							{
								if (Main.tile[num713, num714 + 1].halfBrick() || Main.tile[num713, num714 + 1].slope() != 0)
								{
									WorldGen.SlopeTile(num713, num714 + 1);
									if (Main.netMode == 2)
									{
										NetMessage.SendData(17, -1, -1, "", 14, num713, num714 + 1);
									}
								}
								if (Main.netMode != 0)
								{
									NetMessage.SendData(17, -1, -1, "", 1, num713, num714, num715);
								}
							}
							else if (num716 > 0)
							{
								num712 = Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, num716);
							}
						}
						else if (num716 > 0)
						{
							num712 = Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, num716);
						}
					}
					if (type == 1 && Main.rand.Next(3) == 0)
					{
						num712 = Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, 40);
					}
					if (type == 474 && Main.rand.Next(3) == 0)
					{
						num712 = Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, 3003);
					}
					if (type == 103 && Main.rand.Next(6) == 0)
					{
						num712 = ((Main.rand.Next(3) != 0) ? Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, 40) : Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, 545));
					}
					if (type == 2 && Main.rand.Next(3) == 0)
					{
						num712 = ((Main.rand.Next(3) != 0) ? Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, 40) : Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, 41));
					}
					if (type == 172 && Main.rand.Next(3) == 0)
					{
						num712 = ((Main.rand.Next(3) != 0) ? Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, 40) : Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, 988));
					}
					if (type == 171)
					{
						if (ai[1] == 0f)
						{
							num712 = Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, 985);
							Main.item[num712].noGrabDelay = 0;
						}
						else if (ai[1] < 10f)
						{
							num712 = Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, 965, (int)(10f - ai[1]));
							Main.item[num712].noGrabDelay = 0;
						}
					}
					if (type == 475)
					{
						if (ai[1] == 0f)
						{
							num712 = Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, 3005);
							Main.item[num712].noGrabDelay = 0;
						}
						else if (ai[1] < 10f)
						{
							num712 = Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, 2996, (int)(10f - ai[1]));
							Main.item[num712].noGrabDelay = 0;
						}
					}
					if (type == 505)
					{
						if (ai[1] == 0f)
						{
							num712 = Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, 3079);
							Main.item[num712].noGrabDelay = 0;
						}
						else if (ai[1] < 10f)
						{
							num712 = Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, 3077, (int)(10f - ai[1]));
							Main.item[num712].noGrabDelay = 0;
						}
					}
					if (type == 506)
					{
						if (ai[1] == 0f)
						{
							num712 = Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, 3080);
							Main.item[num712].noGrabDelay = 0;
						}
						else if (ai[1] < 10f)
						{
							num712 = Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, 3078, (int)(10f - ai[1]));
							Main.item[num712].noGrabDelay = 0;
						}
					}
					if (type == 91 && Main.rand.Next(6) == 0)
					{
						num712 = Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, 516);
					}
					if (type == 50 && Main.rand.Next(3) == 0)
					{
						num712 = Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, 282);
					}
					if (type == 515 && Main.rand.Next(3) == 0)
					{
						num712 = Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, 3112);
					}
					if (type == 53 && Main.rand.Next(3) == 0)
					{
						num712 = Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, 286);
					}
					if (type == 48 && Main.rand.Next(2) == 0)
					{
						num712 = Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, 279);
					}
					if (type == 54 && Main.rand.Next(2) == 0)
					{
						num712 = Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, 287);
					}
					if (type == 3 && Main.rand.Next(2) == 0)
					{
						num712 = Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, 42);
					}
					if (type == 4 && Main.rand.Next(4) == 0)
					{
						num712 = Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, 47);
					}
					if (type == 12 && damage > 500)
					{
						num712 = Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, 75);
					}
					if (type == 155)
					{
						num712 = Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, 859);
					}
					if (type == 598 && Main.rand.Next(4) == 0)
					{
						num712 = Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, 3378);
					}
					if (type == 599 && Main.rand.Next(4) == 0)
					{
						num712 = Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, 3379);
					}
					if (type == 21 && Main.rand.Next(2) == 0)
					{
						num712 = Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, 154);
					}
					if (Main.netMode == 1 && num712 >= 0)
					{
						NetMessage.SendData(21, -1, -1, "", num712, 1f);
					}
				}
				if (type == 69 || type == 70 || type == 621)
				{
					int i2 = (int)(base.position.X + (float)(base.width / 2)) / 16;
					int j2 = (int)(base.position.Y + (float)(base.height / 2)) / 16;
					if (type == 69)
					{
						WorldGen.Convert(i2, j2, 2);
					}
					if (type == 70)
					{
						WorldGen.Convert(i2, j2, 1);
					}
					if (type == 621)
					{
						WorldGen.Convert(i2, j2, 4);
					}
				}
				if (type == 370 || type == 371)
				{
					float num718 = 80f;
					int num719 = 119;
					if (type == 371)
					{
						num719 = 120;
					}
					for (int num720 = 0; num720 < 16; num720++)
					{
						Player player = Main.player[num720];
						if (player.active && !player.dead && Vector2.Distance(base.Center, player.Center) < num718)
						{
							player.AddBuff(num719, 1800);
						}
					}
					for (int num721 = 0; num721 < 200; num721++)
					{
						NPC nPC = Main.npc[num721];
						if (nPC.active && nPC.life > 0 && Vector2.Distance(base.Center, nPC.Center) < num718)
						{
							nPC.AddBuff(num719, 1800);
						}
					}
				}
				if (type == 378)
				{
					int num722 = Main.rand.Next(2, 4);
					if (Main.rand.Next(5) == 0)
					{
						num722++;
					}
					for (int num723 = 0; num723 < num722; num723++)
					{
						float x2 = velocity.X;
						float y8 = velocity.Y;
						x2 *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
						y8 *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
						NewProjectile(base.Center.X, base.Center.Y, x2, y8, 379, damage, knockBack, owner);
					}
				}
			}
			active = false;
		}

		public Color GetAlpha(Color newColor)
		{
			if (type == 270)
			{
				return new Color(255, 255, 255, Main.rand.Next(0, 255));
			}
			int num;
			int num2;
			int num3;
			if (type == 650)
			{
				num = (int)((double)(int)newColor.R * 1.5);
				num2 = (int)((double)(int)newColor.G * 1.5);
				num3 = (int)((double)(int)newColor.B * 1.5);
				if (num > 255)
				{
					num = 255;
				}
				if (num2 > 255)
				{
					num2 = 255;
				}
				if (num3 > 255)
				{
					num3 = 255;
				}
			}
			else
			{
				if (type == 604 || type == 631)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 0);
				}
				if (type == 636)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 64 - alpha / 4);
				}
				if (type == 603 || type == 633)
				{
					return new Color(255, 255, 255, 200);
				}
				if (type == 623 || (type >= 625 && type <= 628))
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 255 - alpha);
				}
				if (type == 645 || type == 643)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 127 - alpha / 2);
				}
				if (type == 611)
				{
					return new Color(255, 255, 255, 200);
				}
				if (type == 640 || type == 644)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 0);
				}
				if (type == 612)
				{
					return new Color(255, 255, 255, 127);
				}
				if (aiStyle == 105)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 255 - alpha);
				}
				if (type == 554)
				{
					return new Color(200, 200, 200, 200);
				}
				if (type == 601)
				{
					return PortalHelper.GetPortalColor(owner, (int)ai[0]);
				}
				if (type == 602)
				{
					Color portalColor = PortalHelper.GetPortalColor(owner, (int)ai[1]);
					portalColor.A = 227;
					return portalColor;
				}
				if (type == 585)
				{
					byte a = newColor.A;
					newColor = Color.Lerp(newColor, Color.White, 0.5f);
					newColor.A = a;
					return newColor;
				}
				if (type == 573 || type == 578 || type == 579 || type == 617 || type == 641)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 255 - alpha);
				}
				if (type == 9 || type == 490)
				{
					return Color.White;
				}
				if (type == 575 || type == 596)
				{
					if (timeLeft < 30)
					{
						float num4 = (float)timeLeft / 30f;
						alpha = (int)(255f - 255f * num4);
					}
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 128 - alpha / 2);
				}
				if (type == 546)
				{
					return new Color(255, 200, 255, 200);
				}
				if (type == 553)
				{
					return new Color(255, 255, 200, 200);
				}
				if (type == 540)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 0);
				}
				if (type == 498)
				{
					return new Color(255, 100, 20, 200);
				}
				if (type == 538)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 255 - alpha);
				}
				if (type == 518)
				{
					float num5 = 1f - (float)alpha / 255f;
					return new Color((int)(200f * num5), (int)(200f * num5), (int)(200f * num5), (int)(100f * num5));
				}
				if (type == 518 || type == 595)
				{
					Color value = Color.Lerp(newColor, Color.White, 0.85f);
					value.A = 128;
					return value * (1f - (float)alpha / 255f);
				}
				if (type == 536 || type == 607)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 63 - alpha / 4);
				}
				if (type == 591)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 63 - alpha / 4);
				}
				if (type == 493 || type == 494)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 255 - alpha);
				}
				if (type == 492)
				{
					return new Color(255, 255, 255, 255);
				}
				if (type == 491)
				{
					return new Color(255, 255, 255, 255);
				}
				if (type == 485 || type == 502)
				{
					return new Color(255, 255, 255, 200);
				}
				if (type == 488)
				{
					return new Color(255, 255, 255, 255);
				}
				if (type == 477 || type == 478 || type == 479)
				{
					if (alpha == 0)
					{
						return new Color(255, 255, 255, 200);
					}
					return new Color(0, 0, 0, 0);
				}
				if (type == 473)
				{
					return new Color(255, 255, 255, 255);
				}
				if (type == 50 || type == 53 || type == 515)
				{
					return new Color(255, 255, 255, 0);
				}
				if (type == 92)
				{
					return new Color(255, 255, 255, 0);
				}
				if (type == 91)
				{
					return new Color(200, 200, 200, 0);
				}
				if (type == 34 || type == 15 || type == 93 || type == 94 || type == 95 || type == 96 || type == 253 || type == 258 || (type == 102 && alpha < 255))
				{
					return new Color(200, 200, 200, 25);
				}
				if (type == 465)
				{
					return new Color(255, 255, 255, 0) * (1f - (float)alpha / 255f);
				}
				if (type == 503)
				{
					Color value2 = Color.Lerp(newColor, Color.White, 0.5f) * (1f - (float)alpha / 255f);
					Color value3 = Color.Lerp(Color.Purple, Color.White, 0.33f);
					float amount = 0.25f + (float)Math.Cos(localAI[0]) * 0.25f;
					return Color.Lerp(value2, value3, amount);
				}
				if (type == 467)
				{
					return new Color(255, 255, 255, 255) * (1f - (float)alpha / 255f);
				}
				if (type == 634 || type == 635)
				{
					return new Color(255, 255, 255, 127) * Opacity;
				}
				if (type == 451)
				{
					return new Color(255, 255, 255, 200) * ((255f - (float)alpha) / 255f);
				}
				if (type == 454 || type == 452)
				{
					return new Color(255, 255, 255, 255) * (1f - (float)alpha / 255f);
				}
				if (type == 464)
				{
					return new Color(255, 255, 255, 255) * ((255f - (float)alpha) / 255f);
				}
				if (type == 450)
				{
					return new Color(200, 200, 200, 255 - alpha);
				}
				if (type == 459)
				{
					return new Color(255, 255, 255, 200);
				}
				if (type == 447)
				{
					return new Color(255, 255, 255, 200);
				}
				if (type == 446)
				{
					Color value4 = Color.Lerp(newColor, Color.White, 0.8f);
					return value4 * (1f - (float)alpha / 255f);
				}
				if (type >= 646 && type <= 649)
				{
					Color value5 = Color.Lerp(newColor, Color.White, 0.8f);
					return value5 * (1f - (float)alpha / 255f);
				}
				if (type == 445)
				{
					return new Color(255, 255, 255, 128) * (1f - (float)alpha / 255f);
				}
				if (type == 440 || type == 449 || type == 606)
				{
					num = 255 - alpha;
					num2 = 255 - alpha;
					num3 = 255 - alpha;
				}
				else
				{
					if (type == 444)
					{
						return newColor * (1f - (float)alpha / 255f);
					}
					if (type == 443)
					{
						return new Color(255, 255, 255, 128) * (1f - (float)alpha / 255f);
					}
					if (type == 438)
					{
						return new Color(255, 255, 255, 128) * (1f - (float)alpha / 255f);
					}
					if (type == 592)
					{
						return new Color(255, 255, 255, 128) * (1f - (float)alpha / 255f);
					}
					if (type == 437)
					{
						return new Color(255, 255, 255, 0) * (1f - (float)alpha / 255f);
					}
					if (type == 462)
					{
						return new Color(255, 255, 255, 128) * (1f - (float)alpha / 255f);
					}
					if (type == 352)
					{
						return new Color(250, 250, 250, alpha);
					}
					if (type == 435)
					{
						newColor = Color.Lerp(newColor, Color.White, 0.8f);
						return new Color(newColor.R, newColor.G, newColor.B, 25);
					}
					if (type == 436)
					{
						newColor = Color.Lerp(newColor, Color.White, 0.8f);
						return new Color(newColor.R, newColor.G, newColor.B, 25);
					}
					if (type == 409)
					{
						return new Color(250, 250, 250, 200);
					}
					if (type == 348 || type == 349)
					{
						return new Color(200, 200, 200, alpha);
					}
					if (type == 337)
					{
						return new Color(250, 250, 250, 150);
					}
					if (type >= 424 && type <= 426)
					{
						byte b = 150;
						if (newColor.R < b)
						{
							newColor.R = b;
						}
						if (newColor.G < b)
						{
							newColor.G = b;
						}
						if (newColor.B < b)
						{
							newColor.B = b;
						}
						return new Color(newColor.R, newColor.G, newColor.B, 255);
					}
					if (type == 431 || type == 432)
					{
						return new Color(250, 250, 250, 255 - alpha);
					}
					if (type == 343 || type == 344)
					{
						float num6 = 1f - (float)alpha / 255f;
						return new Color((int)(250f * num6), (int)(250f * num6), (int)(250f * num6), (int)(100f * num6));
					}
					if (type == 332)
					{
						return new Color(255, 255, 255, 255);
					}
					if (type == 329)
					{
						return new Color(200, 200, 200, 50);
					}
					if (type >= 326 && type <= 328)
					{
						return Color.Transparent;
					}
					if (type >= 400 && type <= 402)
					{
						return Color.Transparent;
					}
					if (type == 324 && frame >= 6 && frame <= 9)
					{
						return new Color(255, 255, 255, 255);
					}
					if (type == 16)
					{
						return new Color(255, 255, 255, 0);
					}
					if (type == 321)
					{
						return new Color(200, 200, 200, 0);
					}
					if (type == 76 || type == 77 || type == 78)
					{
						return new Color(255, 255, 255, 0);
					}
					if (type == 308)
					{
						return new Color(200, 200, 255, 125);
					}
					if (type == 263)
					{
						if (timeLeft < 255)
						{
							return new Color(255, 255, 255, (byte)timeLeft);
						}
						return new Color(255, 255, 255, 255);
					}
					if (type == 274)
					{
						if (timeLeft < 85)
						{
							byte b2 = (byte)(timeLeft * 3);
							byte a2 = (byte)(100f * ((float)(int)b2 / 255f));
							return new Color(b2, b2, b2, a2);
						}
						return new Color(255, 255, 255, 100);
					}
					if (type == 5)
					{
						return new Color(255, 255, 255, 0);
					}
					if (type == 300 || type == 301)
					{
						return new Color(250, 250, 250, 50);
					}
					if (type == 304)
					{
						return new Color(255 - alpha, 255 - alpha, 255 - alpha, (byte)((float)(255 - alpha) / 3f));
					}
					if (type == 116 || type == 132 || type == 156 || type == 157 || type == 157 || type == 173)
					{
						if (localAI[1] >= 15f)
						{
							return new Color(255, 255, 255, alpha);
						}
						if (localAI[1] < 5f)
						{
							return Color.Transparent;
						}
						int num7 = (int)((localAI[1] - 5f) / 10f * 255f);
						return new Color(num7, num7, num7, num7);
					}
					if (type == 254)
					{
						if (timeLeft < 30)
						{
							float num8 = (float)timeLeft / 30f;
							alpha = (int)(255f - 255f * num8);
						}
						return new Color(255 - alpha, 255 - alpha, 255 - alpha, 0);
					}
					if (type == 265 || type == 355)
					{
						if (alpha > 0)
						{
							return Color.Transparent;
						}
						return new Color(255, 255, 255, 0);
					}
					if (type == 270 && ai[0] >= 0f)
					{
						if (alpha > 0)
						{
							return Color.Transparent;
						}
						return new Color(255, 255, 255, 200);
					}
					if (type == 257)
					{
						if (alpha > 200)
						{
							return Color.Transparent;
						}
						return new Color(255 - alpha, 255 - alpha, 255 - alpha, 0);
					}
					if (type == 259)
					{
						if (alpha > 200)
						{
							return Color.Transparent;
						}
						return new Color(255 - alpha, 255 - alpha, 255 - alpha, 0);
					}
					if (type >= 150 && type <= 152)
					{
						return new Color(255 - alpha, 255 - alpha, 255 - alpha, 255 - alpha);
					}
					if (type == 250)
					{
						return Color.Transparent;
					}
					if (type == 251)
					{
						num = 255 - alpha;
						num2 = 255 - alpha;
						num3 = 255 - alpha;
						return new Color(num, num2, num3, 0);
					}
					if (type == 131)
					{
						return new Color(255 - alpha, 255 - alpha, 255 - alpha, 0);
					}
					if (type == 211)
					{
						return new Color(255, 255, 255, 0);
					}
					if (type == 229)
					{
						return new Color(255, 255, 255, 50);
					}
					if (type == 221)
					{
						return new Color(255, 255, 255, 200);
					}
					if (type == 20)
					{
						if (alpha <= 150)
						{
							return new Color(255, 255, 255, 0);
						}
						return new Color(0, 0, 0, 0);
					}
					if (type == 207)
					{
						num = 255 - alpha;
						num2 = 255 - alpha;
						num3 = 255 - alpha;
					}
					else
					{
						if (type == 242)
						{
							if (alpha < 140)
							{
								return new Color(255, 255, 255, 100);
							}
							return Color.Transparent;
						}
						if (type == 638)
						{
							return new Color(255, 255, 255, 100) * Opacity;
						}
						if (type == 209)
						{
							num = newColor.R - alpha;
							num2 = newColor.G - alpha;
							num3 = newColor.B - alpha / 2;
						}
						else
						{
							if (type == 130)
							{
								return new Color(255, 255, 255, 175);
							}
							if (type == 182)
							{
								return new Color(255, 255, 255, 200);
							}
							if (type == 226)
							{
								num = 255;
								num2 = 255;
								num3 = 255;
								float num9 = (float)(int)Main.mouseTextColor / 200f - 0.3f;
								num = (int)((float)num * num9);
								num2 = (int)((float)num2 * num9);
								num3 = (int)((float)num3 * num9);
								num += 50;
								if (num > 255)
								{
									num = 255;
								}
								num2 += 50;
								if (num2 > 255)
								{
									num2 = 255;
								}
								num3 += 50;
								if (num3 > 255)
								{
									num3 = 255;
								}
								return new Color(num, num2, num3, 200);
							}
							if (type == 227)
							{
								num = (num2 = (num3 = 255));
								float num10 = (float)(int)Main.mouseTextColor / 100f - 1.6f;
								num = (int)((float)num * num10);
								num2 = (int)((float)num2 * num10);
								num3 = (int)((float)num3 * num10);
								int a3 = (int)(100f * num10);
								num += 50;
								if (num > 255)
								{
									num = 255;
								}
								num2 += 50;
								if (num2 > 255)
								{
									num2 = 255;
								}
								num3 += 50;
								if (num3 > 255)
								{
									num3 = 255;
								}
								return new Color(num, num2, num3, a3);
							}
							if (type == 114 || type == 115)
							{
								if (localAI[1] >= 15f)
								{
									return new Color(255, 255, 255, alpha);
								}
								if (localAI[1] < 5f)
								{
									return Color.Transparent;
								}
								int num11 = (int)((localAI[1] - 5f) / 10f * 255f);
								return new Color(num11, num11, num11, num11);
							}
							if (type == 83 || type == 88 || type == 89 || type == 90 || type == 100 || type == 104 || type == 279 || (type >= 283 && type <= 287))
							{
								if (alpha < 200)
								{
									return new Color(255 - alpha, 255 - alpha, 255 - alpha, 0);
								}
								return Color.Transparent;
							}
							if (type == 34 || type == 35 || type == 15 || type == 19 || type == 44 || type == 45)
							{
								return Color.White;
							}
							if (type == 79)
							{
								num = Main.DiscoR;
								num2 = Main.DiscoG;
								num3 = Main.DiscoB;
								return default(Color);
							}
							if (type == 9 || type == 15 || type == 34 || type == 50 || type == 53 || type == 76 || type == 77 || type == 78 || type == 92 || type == 91)
							{
								num = newColor.R - alpha / 3;
								num2 = newColor.G - alpha / 3;
								num3 = newColor.B - alpha / 3;
							}
							else
							{
								if (type == 18)
								{
									return new Color(255, 255, 255, 50);
								}
								if (type == 16 || type == 44 || type == 45)
								{
									num = newColor.R;
									num2 = newColor.G;
									num3 = newColor.B;
								}
								else if (type == 12 || type == 72 || type == 86 || type == 87)
								{
									return new Color(255, 255, 255, newColor.A - alpha);
								}
							}
						}
					}
				}
			}
			float num12 = (float)(255 - alpha) / 255f;
			if (num12 < 0f)
			{
				num12 = 0f;
			}
			num = (int)((float)(int)newColor.R * num12);
			num2 = (int)((float)(int)newColor.G * num12);
			num3 = (int)((float)(int)newColor.B * num12);
			int num13 = newColor.A - alpha;
			if (num13 < 0)
			{
				num13 = 0;
			}
			if (num13 > 255)
			{
				num13 = 255;
			}
			return new Color(num, num2, num3, num13);
		}

		public override string ToString()
		{
			return "type:" + type + "name:" + Name + ", active:" + active + ", whoAmI:" + whoAmI + ", identity:" + identity + ", ai0:" + ai[0] + " , uuid:" + projUUID;
		}
	}
}
