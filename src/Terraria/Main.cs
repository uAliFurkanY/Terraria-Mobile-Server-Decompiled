using Microsoft.Win32;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Windows.Forms;
using Terraria.Achievements;
using Terraria.DataStructures;
using Terraria.GameContent;
using Terraria.GameContent.Achievements;
using Terraria.GameContent.Events;
using Terraria.GameContent.Liquid;
using Terraria.GameContent.Tile_Entities;
using Terraria.GameContent.UI;
using Terraria.GameContent.UI.Chat;
using Terraria.GameContent.UI.States;
using Terraria.Graphics;
using Terraria.Graphics.Capture;
using Terraria.Graphics.Effects;
using Terraria.Graphics.Shaders;
using Terraria.ID;
using Terraria.Initializers;
using Terraria.IO;
using Terraria.Localization;
using Terraria.Map;
using Terraria.Net;
using Terraria.ObjectData;
using Terraria.Server;
using Terraria.Social;
using Terraria.UI;
using Terraria.UI.Chat;
using Terraria.Utilities;
using Terraria.World.Generation;

namespace Terraria
{
	public class Main : Terraria.Server.Game
	{
		public delegate void OnPlayerSelected(PlayerFileData player);

		public const int offLimitBorderTiles = 40;

		public const int maxItemTypes = 3602;

		public const int maxProjectileTypes = 651;

		public const int maxNPCTypes = 540;

		public const int maxTileSets = 419;

		public const int maxWallTypes = 225;

		public const int maxBuffTypes = 191;

		public const int maxGlowMasks = 214;

		public const int maxExtras = 69;

		public const int maxGoreTypes = 907;

		public const int numBannerTypes = 251;

		public const int numArmorHead = 194;

		public const int numArmorBody = 195;

		public const int numArmorLegs = 135;

		public const int numAccHandsOn = 19;

		public const int numAccHandsOff = 12;

		public const int numAccNeck = 9;

		public const int numAccBack = 10;

		public const int numAccFront = 5;

		public const int numAccShoes = 18;

		public const int numAccWaist = 12;

		public const int numAccShield = 6;

		public const int numAccFace = 9;

		public const int numAccBalloon = 16;

		public const int maxWings = 37;

		public const int maxBackgrounds = 207;

		public const int numInfoIcons = 13;

		private const int MF_BYPOSITION = 1024;

		public const int sectionWidth = 200;

		public const int sectionHeight = 150;

		public const int maxDust = 6000;

		public const int maxCombatText = 100;

		public const int maxItemText = 20;

		public const int maxPlayers = 16;

		public const int maxChests = 1000;

		public const int maxItems = 400;

		public const int maxProjectiles = 1000;

		public const int maxNPCs = 200;

		private const double slimeRainMaxTime = 54000.0;

		private const double slimeRainMinTime = 32400.0;

		private const double slimeRainMaxDelay = 604800.0;

		private const double slimeRainMinDelay = 302400.0;

		private const double slimeRainChance = 1728000.0;

		public const int maxGore = 500;

		public const int realInventory = 50;

		public const int maxInventory = 58;

		public const int maxItemSounds = 125;

		public const int maxNPCHitSounds = 57;

		public const int maxNPCKilledSounds = 62;

		public const int maxLiquidTypes = 12;

		public const int maxMusic = 40;

		public const double dayLength = 54000.0;

		public const double nightLength = 32400.0;

		public const int maxStars = 130;

		public const int maxStarTypes = 5;

		public const int maxClouds = 200;

		public const int maxCloudTypes = 22;

		public const int maxHair = 134;

		public const int maxCharSelectHair = 51;

		public const int MaxTimeout = 120;

		public static bool HidePassword = false;

		public static bool ThickMouse = false;

		public static bool ReversedUpDownArmorSetBonuses = false;

		public static uint ThickMousePackedColor = Microsoft.Xna.Framework.Color.White.PackedValue;

		public static bool CaptureModeDisabled = false;

		public bool unityMouseOver;

		public static Main instance;

		public static int curRelease = 155;

		public static int maxSupportSaveRelease = 156;

		public static string versionNumber = "v1.3.0.7.5";

		public static string versionNumber2 = "v1.3.0.7.5";

		public static string SavePath = Program.LaunchParameters.ContainsKey("-savedirectory") ? Program.LaunchParameters["-savedirectory"] : (Environment.GetFolderPath(Environment.SpecialFolder.Personal) + Path.DirectorySeparatorChar + "My Games" + Path.DirectorySeparatorChar + "Terraria" + Path.DirectorySeparatorChar + "Mobile");

		public static Vector2 destroyerHB = new Vector2(0f, 0f);

		public static FavoritesFile LocalFavoriteData = new FavoritesFile(SavePath + "/favorites.json", false);

		public static FavoritesFile CloudFavoritesData = new FavoritesFile("/favorites.json", true);

		public static FileMetadata WorldFileMetadata;

		public static FileMetadata MapFileMetadata;

		private AchievementManager _achievements;

		public static UserInterface MenuUI = new UserInterface();

		public static UserInterface InGameUI = new UserInterface();

		private static OnPlayerSelected _pendingCharacterSelect;

		public static bool drawBackGore = false;

		public static ulong LobbyId = 0uL;

		public static float expertLife = 2f;

		public static float expertDamage = 2f;

		public static float expertDebuffTime = 2f;

		public static float expertKnockBack = 0.9f;

		public static float expertNPCDamage = 1.5f;

		public static float knockBackMultiplier = 1f;

		public static float damageMultiplier = 1f;

		public WaterfallManager waterfallManager;

		public static WorldSections sectionManager;

		public static bool ServerSideCharacter = false;

		public static string clientUUID;

		public static bool ContentLoaded = false;

		public static int maxMsg = 108;

		private static int toolTipDistance = 6;

		public static float GlobalTime = 0f;

		public static bool GlobalTimerPaused = false;

		private static ulong _tileFrameSeed = (ulong)Guid.NewGuid().GetHashCode();

		private static ulong _drawCycleCounter = 0uL;

		public static Effect screenShader;

		public static Effect pixelShader;

		public static Effect tileShader;

		public static int npcStreamSpeed = 60;

		public static int musicError = 0;

		public static bool dedServFPS = false;

		public static int dedServCount1 = 0;

		public static int dedServCount2 = 0;

		public static bool superFast = false;

		public static bool[] hairLoaded = new bool[134];

		public static bool[] wingsLoaded = new bool[37];

		public static bool[] goreLoaded = new bool[907];

		public static bool[] projectileLoaded = new bool[651];

		public static bool[] itemFlameLoaded = new bool[3602];

		public static bool[] backgroundLoaded = new bool[207];

		public static bool[] tileSetsLoaded = new bool[419];

		public static bool[] wallLoaded = new bool[225];

		public static bool[] NPCLoaded = new bool[540];

		public static bool[] armorHeadLoaded = new bool[194];

		public static bool[] armorBodyLoaded = new bool[195];

		public static bool[] armorLegsLoaded = new bool[135];

		public static bool[] accHandsOnLoaded = new bool[19];

		public static bool[] accHandsOffLoaded = new bool[12];

		public static bool[] accBackLoaded = new bool[10];

		public static bool[] accFrontLoaded = new bool[5];

		public static bool[] accShoesLoaded = new bool[18];

		public static bool[] accWaistLoaded = new bool[12];

		public static bool[] accShieldLoaded = new bool[6];

		public static bool[] accNeckLoaded = new bool[9];

		public static bool[] accFaceLoaded = new bool[9];

		public static bool[] accballoonLoaded = new bool[16];

		private static float cameraLerp = 0f;

		private static int cameraLerpTimer = 0;

		private static int cameraLerpTimeToggle = 0;

		public static Vector2[] OffsetsNPCOffhand = new Vector2[5]
		{
			new Vector2(14f, 34f),
			new Vector2(14f, 32f),
			new Vector2(14f, 26f),
			new Vector2(14f, 22f),
			new Vector2(14f, 18f)
		};

		public static Vector2[] OffsetsPlayerOffhand = new Vector2[20]
		{
			new Vector2(14f, 20f),
			new Vector2(14f, 20f),
			new Vector2(14f, 20f),
			new Vector2(14f, 18f),
			new Vector2(14f, 20f),
			new Vector2(16f, 4f),
			new Vector2(16f, 16f),
			new Vector2(18f, 14f),
			new Vector2(18f, 14f),
			new Vector2(18f, 14f),
			new Vector2(16f, 16f),
			new Vector2(16f, 16f),
			new Vector2(16f, 16f),
			new Vector2(16f, 16f),
			new Vector2(14f, 14f),
			new Vector2(14f, 14f),
			new Vector2(12f, 14f),
			new Vector2(14f, 16f),
			new Vector2(16f, 16f),
			new Vector2(16f, 16f)
		};

		public static Vector2[] OffsetsPlayerOnhand = new Vector2[20]
		{
			new Vector2(6f, 19f),
			new Vector2(5f, 10f),
			new Vector2(12f, 10f),
			new Vector2(13f, 17f),
			new Vector2(12f, 19f),
			new Vector2(5f, 10f),
			new Vector2(7f, 17f),
			new Vector2(6f, 16f),
			new Vector2(6f, 16f),
			new Vector2(6f, 16f),
			new Vector2(6f, 17f),
			new Vector2(7f, 17f),
			new Vector2(7f, 17f),
			new Vector2(7f, 17f),
			new Vector2(8f, 17f),
			new Vector2(9f, 16f),
			new Vector2(9f, 12f),
			new Vector2(8f, 17f),
			new Vector2(7f, 17f),
			new Vector2(7f, 17f)
		};

		public static Vector2[] OffsetsPlayerHeadgear = new Vector2[20]
		{
			new Vector2(0f, 2f),
			new Vector2(0f, 2f),
			new Vector2(0f, 2f),
			new Vector2(0f, 2f),
			new Vector2(0f, 2f),
			new Vector2(0f, 2f),
			new Vector2(0f, 2f),
			new Vector2(0f, 0f),
			new Vector2(0f, 0f),
			new Vector2(0f, 0f),
			new Vector2(0f, 2f),
			new Vector2(0f, 2f),
			new Vector2(0f, 2f),
			new Vector2(0f, 2f),
			new Vector2(0f, 0f),
			new Vector2(0f, 0f),
			new Vector2(0f, 0f),
			new Vector2(0f, 2f),
			new Vector2(0f, 2f),
			new Vector2(0f, 2f)
		};

		public static float zoomX;

		public static float zoomY;

		public static float sunCircle;

		public static int BlackFadeIn = 0;

		public static bool noWindowBorder = false;

		private Matrix Transform = Matrix.CreateScale(1f, 1f, 1f) * Matrix.CreateRotationZ(0f) * Matrix.CreateTranslation(new Vector3(0f, 0f, 0f));

		private RasterizerState Rasterizer = RasterizerState.CullCounterClockwise;

		private static string _cachedTitle;

		public static int ugBack = 0;

		public static int oldUgBack = 0;

		public static int[] bgFrame = new int[1];

		public static int[] bgFrameCounter = new int[1];

		public static bool skipMenu = false;

		public static bool verboseNetplay = false;

		public static bool stopTimeOuts = false;

		public static bool showSpam = false;

		public static bool showItemOwner = false;

		public static bool[] nextNPC = new bool[540];

		public static int musicBox = -1;

		public static int musicBox2 = -1;

		public static byte hbPosition = 1;

		public static bool cEd = false;

		public static float wFrCounter = 0f;

		public static float wFrame = 0f;

		public static float upTimer;

		public static float upTimerMax;

		public static float upTimerMaxDelay;

		public static bool drawDiag = false;

		public static bool drawRelease = false;

		public static bool drawBetterDebug = false;

		public static bool betterDebugRelease = false;

		public static bool renderNow = false;

		public static bool drawToScreen = false;

		public static bool targetSet = false;

		public static int mouseX;

		public static int mouseY;

		public static int lastMouseX;

		public static int lastMouseY;

		public static bool mouseLeft;

		public static bool mouseRight;

		private static bool _isMouseLeftConsumedByUI = false;

		public static float essScale = 1f;

		public static int essDir = -1;

		public static float[] cloudBGX = new float[2];

		public static float cloudBGAlpha;

		public static float cloudBGActive;

		public static int[] cloudBG = new int[2]
		{
			112,
			113
		};

		public static int[] treeMntBG = new int[2];

		public static int[] treeBG = new int[3];

		public static int[] corruptBG = new int[3];

		public static int[] jungleBG = new int[3];

		public static int[] snowMntBG = new int[2];

		public static int[] snowBG = new int[3];

		public static int[] hallowBG = new int[3];

		public static int[] crimsonBG = new int[3];

		public static int[] desertBG = new int[2];

		public static int oceanBG;

		public static int[] treeX = new int[4];

		public static int[] treeStyle = new int[4];

		public static int[] caveBackX = new int[4];

		public static int[] caveBackStyle = new int[4];

		public static int iceBackStyle;

		public static int hellBackStyle;

		public static int jungleBackStyle;

		public static string debugWords = "";

		public static bool gamePad = false;

		public static bool xMas = false;

		public static bool halloween = false;

		public static int snowDust = 0;

		public static bool chTitle = false;

		public static bool hairWindow = false;

		public static bool clothesWindow = false;

		public static bool ingameOptionsWindow = false;

		public static bool achievementsWindow = false;

		public static int keyCount = 0;

		public static string[] keyString = new string[10];

		public static int[] keyInt = new int[10];

		public static byte gFade = 0;

		public static float gFader = 0f;

		public static byte gFadeDir = 1;

		public static bool netDiag = false;

		public static int txData = 0;

		public static int rxData = 0;

		public static int txMsg = 0;

		public static int rxMsg = 0;

		public static int[] rxMsgType = new int[maxMsg];

		public static int[] rxDataType = new int[maxMsg];

		public static int[] txMsgType = new int[maxMsg];

		public static int[] txDataType = new int[maxMsg];

		public static float uCarry = 0f;

		public static bool drawSkip = false;

		public static int fpsCount = 0;

		public static Stopwatch fpsTimer = new Stopwatch();

		public static Stopwatch updateTimer = new Stopwatch();

		public bool gammaTest;

		public static int fountainColor = -1;

		public static int monolithType = -1;

		public static bool showSplash = true;

		public static bool ignoreErrors = true;

		public static string defaultIP = "";

		public static int dayRate = 1;

		public static int maxScreenW = 1920;

		public static int minScreenW = 800;

		public static int maxScreenH = 1200;

		public static int minScreenH = 600;

		public static float iS = 1f;

		public static bool render = false;

		public static int qaStyle = 0;

		public static int zoneX = 99;

		public static int zoneY = 87;

		public static float harpNote = 0f;

		public static bool[] projHostile = new bool[651];

		public static bool[] projHook = new bool[651];

		public static bool[] pvpBuff = new bool[191];

		public static bool[] persistentBuff = new bool[191];

		public static bool[] vanityPet = new bool[191];

		public static bool[] lightPet = new bool[191];

		public static bool[] meleeBuff = new bool[191];

		public static bool[] debuff = new bool[191];

		public static bool[] buffNoSave = new bool[191];

		public static bool[] buffNoTimeDisplay = new bool[191];

		public static bool[] buffDoubleApply = new bool[191];

		public static int maxMP = 10;

		public static string[] recentWorld = new string[maxMP];

		public static string[] recentIP = new string[maxMP];

		public static int[] recentPort = new int[maxMP];

		public static bool shortRender = true;

		public static bool owBack = true;

		public static int quickBG = 2;

		public static int bgDelay = 0;

		public static int bgStyle = 0;

		public static float[] bgAlpha = new float[10];

		public static float[] bgAlpha2 = new float[10];

		public static int EquipPage = 0;

		public static int EquipPageSelected = 0;

		public int mouseNPC = -1;

		public static int wof = -1;

		public static int wofT;

		public static int wofB;

		public static int wofF = 0;

		public static int offScreenRange = 200;

		private RenderTarget2D backWaterTarget;

		private RenderTarget2D waterTarget;

		private RenderTarget2D tileTarget;

		private RenderTarget2D blackTarget;

		private RenderTarget2D tile2Target;

		private RenderTarget2D wallTarget;

		private RenderTarget2D backgroundTarget;

		private RenderTarget2D screenTarget;

		public static int maxMapUpdates = 250000;

		public static bool refreshMap = false;

		public static int loadMapLastX = 0;

		public static bool loadMapLock = false;

		public static bool loadMap = false;

		public static bool mapReady = false;

		public static int textureMaxWidth = 2000;

		public static int textureMaxHeight = 1800;

		public static bool updateMap = false;

		public static int mapMinX = 0;

		public static int mapMaxX = 0;

		public static int mapMinY = 0;

		public static int mapMaxY = 0;

		public static int mapTimeMax = 30;

		public static int mapTime = mapTimeMax;

		public static bool clearMap;

		public static int mapTargetX = 5;

		public static int mapTargetY = 2;

		private static bool flameRingLoaded;

		private Texture2D flameRingTexture;

		private Texture2D mapDeathTexture;

		private RenderTarget2D[,] mapTarget = new RenderTarget2D[mapTargetX, mapTargetY];

		private RenderTarget2D mapSectionTexture;

		public static bool[,] initMap = new bool[mapTargetX, mapTargetY];

		public static bool[,] mapWasContentLost = new bool[mapTargetX, mapTargetY];

		private Texture2D[] infoIconTexture = new Texture2D[13];

		public static Texture2D[] clothesTexture = new Texture2D[4];

		public static Texture2D[] mapIconTexture = new Texture2D[9];

		private static Texture2D[] underworldTexture = new Texture2D[5];

		public static Texture2D mapTexture;

		private Texture2D mapBG1Texture;

		private Texture2D mapBG2Texture;

		private Texture2D mapBG3Texture;

		private Texture2D mapBG4Texture;

		private Texture2D mapBG5Texture;

		private Texture2D mapBG6Texture;

		private Texture2D mapBG7Texture;

		private Texture2D mapBG8Texture;

		private Texture2D mapBG9Texture;

		private Texture2D mapBG10Texture;

		private Texture2D mapBG11Texture;

		private Texture2D mapBG12Texture;

		private Texture2D mapBG13Texture;

		private Texture2D mapBG14Texture;

		private Texture2D mapBG15Texture;

		private Texture2D hueTexture;

		public static Texture2D colorSliderTexture;

		public static Texture2D colorBarTexture;

		public static Texture2D colorBlipTexture;

		public static Texture2D smartDigTexture;

		public static Microsoft.Xna.Framework.Color OurFavoriteColor = new Microsoft.Xna.Framework.Color(255, 231, 69);

		public static Texture2D tileCrackTexture;

		private Texture2D iceBarrierTexture;

		public static bool mapInit = false;

		public static bool mapEnabled = true;

		public static int mapStyle = 1;

		public static float grabMapX = 0f;

		public static float grabMapY = 0f;

		public static int miniMapX = 0;

		public static int miniMapY = 0;

		public static int miniMapWidth = 0;

		public static int miniMapHeight = 0;

		public static float mapMinimapScale = 1.25f;

		public static float mapMinimapAlpha = 1f;

		public static float mapOverlayScale = 2.5f;

		public static float mapOverlayAlpha = 0.35f;

		public static bool mapFullscreen = false;

		public static bool resetMapFull = false;

		public static float mapFullscreenScale = 4f;

		public static Vector2 mapFullscreenPos = new Vector2(-1f, -1f);

		private static bool IsEngineLoaded = false;

		private int firstTileX;

		private int lastTileX;

		private int firstTileY;

		private int lastTileY;

		private double bgParallax;

		private int bgStart;

		private int bgLoops;

		private int bgStartY;

		private int bgLoopsY;

		private int bgTop;

		public static int renderCount = 99;

		public static GraphicsDeviceManager graphics;

		public static SpriteBatch spriteBatch;

		public static TileBatch tileBatch;

		public static GenerationProgress AutogenProgress = new GenerationProgress();

		private Process tServer = new Process();

		private static Stopwatch saveTime = new Stopwatch();

		public static MouseState mouseState;

		public static MouseState oldMouseState;

		public static int oldMouseWheel;

		public static KeyboardState keyState;

		public static Microsoft.Xna.Framework.Color mcColor = new Microsoft.Xna.Framework.Color(125, 125, 255);

		public static Microsoft.Xna.Framework.Color hcColor = new Microsoft.Xna.Framework.Color(200, 125, 255);

		public static Microsoft.Xna.Framework.Color highVersionColor = new Microsoft.Xna.Framework.Color(255, 255, 0);

		public static Microsoft.Xna.Framework.Color errorColor = new Microsoft.Xna.Framework.Color(255, 0, 0);

		public static Microsoft.Xna.Framework.Color bgColor;

		public static bool mouseHC = false;

		public static bool craftingHide = false;

		public static bool armorHide = false;

		public static float craftingAlpha = 1f;

		public static float armorAlpha = 1f;

		public static float[] buffAlpha = new float[191];

		public static bool hardMode = false;

		public float chestLootScale = 1f;

		public bool chestLootHover;

		public float chestStackScale = 1f;

		public bool chestStackHover;

		public float chestDepositScale = 1f;

		public bool chestDepositHover;

		public float chestRenameScale = 1f;

		public bool chestRenameHover;

		public float chestCancelScale = 1f;

		public bool chestCancelHover;

		public static Vector2 sceneWaterPos = Vector2.Zero;

		public static Vector2 sceneTilePos = Vector2.Zero;

		public static Vector2 sceneTile2Pos = Vector2.Zero;

		public static Vector2 sceneWallPos = Vector2.Zero;

		public static Vector2 sceneBackgroundPos = Vector2.Zero;

		public static bool maxQ = true;

		public static float gfxQuality = 1f;

		public static float gfxRate = 0.01f;

		public int DiscoStyle;

		public static int DiscoR = 255;

		public static int DiscoB = 0;

		public static int DiscoG = 0;

		public static int teamCooldown = 0;

		public static int teamCooldownLen = 300;

		public static bool gamePaused = false;

		public static bool gameInactive = false;

		public static int updateTime = 0;

		public static int drawTime = 0;

		public static int uCount = 0;

		public static int updateRate = 0;

		public static int frameRate = 0;

		public static bool RGBRelease = false;

		public static bool qRelease = false;

		public static bool netRelease = false;

		public static bool frameRelease = false;

		public static bool showFrameRate = false;

		public static int magmaBGFrame = 0;

		public static int magmaBGFrameCounter = 0;

		public static int saveTimer = 0;

		public static bool autoJoin = false;

		public static bool serverStarting = false;

		public static float leftWorld = 0f;

		public static float rightWorld = 134400f;

		public static float topWorld = 0f;

		public static float bottomWorld = 38400f;

		public static int maxTilesX = (int)rightWorld / 16 + 1;

		public static int maxTilesY = (int)bottomWorld / 16 + 1;

		public static int maxSectionsX = maxTilesX / 200;

		public static int maxSectionsY = maxTilesY / 150;

		public static int numDust = 6000;

		public static int numPlayers = 0;

		public static int maxNetPlayers = 16;

		private static UICharacterSelect _characterSelectMenu = new UICharacterSelect();

		private static UIWorldSelect _worldSelectMenu = new UIWorldSelect();

		public static UIAchievementsMenu AchievementsMenu = new UIAchievementsMenu();

		public static int maxRain = 750;

		public static int slimeWarningTime = 0;

		public static int slimeWarningDelay = 420;

		public static float slimeRainNPCSlots = 0.65f;

		public static bool[] slimeRainNPC = new bool[540];

		public static double slimeRainTime = 0.0;

		public static bool slimeRain = false;

		public static int slimeRainKillCount = 0;

		public int invBottom = 210;

		public static float cameraX = 0f;

		public static bool drewLava = false;

		public static float[] liquidAlpha = new float[12];

		public static int waterStyle = 0;

		public static int worldRate = 1;

		public static float caveParallax = 0.88f;

		public static int dungeonX;

		public static int dungeonY;

		public static Liquid[] liquid = new Liquid[Liquid.resLiquid];

		public static LiquidBuffer[] liquidBuffer = new LiquidBuffer[10000];

		public static bool dedServ = false;

		public static int spamCount = 0;

		public static int curMusic = 0;

		public static int dayMusic = 0;

		public static int ugMusic = 0;

		public int newMusic;

		public static bool showItemText = true;

		public static bool autoSave = true;

		public static bool validateSaves = true;

		public static bool bannerMouseOver = false;

		public static string buffString = "";

		public static string libPath = "";

		public static int lo = 0;

		public static int LogoA = 255;

		public static int LogoB = 0;

		public static bool LogoT = false;

		public static string statusText = "";

		public static string worldName = "";

		public static int worldID;

		public static int background = 0;

		public static int caveBackground = 0;

		public static float ugBackTransition = 0f;

		public static Microsoft.Xna.Framework.Color tileColor;

		public static double worldSurface;

		public static double rockLayer;

		public static Microsoft.Xna.Framework.Color[] teamColor = new Microsoft.Xna.Framework.Color[6];

		public static bool dayTime = true;

		public static double time = 13500.0;

		public static int moonPhase = 0;

		public static short sunModY = 0;

		public static short moonModY = 0;

		public static bool grabSky = false;

		public static bool bloodMoon = false;

		public static bool pumpkinMoon = false;

		public static bool snowMoon = false;

		public static float cloudAlpha = 0f;

		public static float maxRaining = 0f;

		public static float oldMaxRaining = 0f;

		public static int rainTime = 0;

		public static bool raining = false;

		public static bool eclipse = false;

		public static float eclipseLight = 0f;

		public static int checkForSpawns = 0;

		public static int helpText = 0;

		public static bool autoGen = false;

		public static bool autoPause = false;

		public static int[] projFrames = new int[651];

		public static bool[] projPet = new bool[651];

		public static float demonTorch = 1f;

		public static int demonTorchDir = 1;

		public static float martianLight = 1f;

		public static int martianLightDir = 1;

		public static bool placementPreview = true;

		public static int numStars;

		public static int weatherCounter = 0;

		public static int cloudLimit = 200;

		public static int numClouds = cloudLimit;

		public static int numCloudsTemp = numClouds;

		public static float windSpeedTemp = 0f;

		public static float windSpeed = 0f;

		public static float windSpeedSet = 0f;

		public static float windSpeedSpeed = 0f;

		public static Cloud[] cloud = new Cloud[200];

		public static bool resetClouds = true;

		public static int sandTiles;

		public static int evilTiles;

		public static int shroomTiles;

		public static float shroomLight;

		public static int snowTiles;

		public static int holyTiles;

		public static int waterCandles;

		public static int peaceCandles;

		public static int meteorTiles;

		public static int bloodTiles;

		public static int jungleTiles;

		public static int dungeonTiles;

		public static bool sunflower;

		public static bool clock;

		public static bool campfire;

		public static bool starInBottle;

		public static bool heartLantern;

		public static int fadeCounter = 0;

		public static float invAlpha = 1f;

		public static float invDir = 1f;

		[ThreadStatic]
		public static Random rand;

		public static Texture2D[] chestStackTexture = new Texture2D[2];

		private static bool allChestStackHover = false;

		public static Texture2D[] bannerTexture = new Texture2D[3];

		public static Texture2D[] npcHeadTexture = new Texture2D[24];

		public static Texture2D[] npcHeadBossTexture = new Texture2D[31];

		public static Texture2D[] craftToggleTexture = new Texture2D[4];

		public static Texture2D craftUpButtonTexture;

		public static Texture2D craftDownButtonTexture;

		public static Texture2D scrollLeftButtonTexture;

		public static Texture2D scrollRightButtonTexture;

		public static Texture2D frozenTexture;

		public static Texture2D magicPixel;

		public static Texture2D miniMapFrameTexture;

		public static Texture2D miniMapFrame2Texture;

		public static Texture2D[] miniMapButtonTexture = new Texture2D[3];

		public static Texture2D[] destTexture = new Texture2D[3];

		public static Texture2D[] gemTexture = new Texture2D[6];

		public static Texture2D[] rudolphMountTexture = new Texture2D[3];

		public static Texture2D bunnyMountTexture;

		public static Texture2D pigronMountTexture;

		public static Texture2D slimeMountTexture;

		public static Texture2D minecartMountTexture;

		public static Texture2D turtleMountTexture;

		public static Texture2D[] beeMountTexture = new Texture2D[2];

		public static Texture2D[] UFOMountTexture = new Texture2D[2];

		public static Texture2D[] drillMountTexture = new Texture2D[6];

		public static Texture2D[] scutlixMountTexture = new Texture2D[3];

		public static Texture2D unicornMountTexture;

		public static Texture2D[] minecartMechMountTexture = new Texture2D[2];

		public static Texture2D[] cuteFishronMountTexture = new Texture2D[2];

		public static Texture2D minecartWoodMountTexture;

		public static Texture2D[] wingsTexture = new Texture2D[37];

		public static Texture2D[] armorHeadTexture = new Texture2D[194];

		public static Texture2D[] armorBodyTexture = new Texture2D[195];

		public static Texture2D[] femaleBodyTexture = new Texture2D[195];

		public static Texture2D[] armorArmTexture = new Texture2D[195];

		public static Texture2D[] armorLegTexture = new Texture2D[135];

		public static Texture2D[] accHandsOnTexture = new Texture2D[19];

		public static Texture2D[] accHandsOffTexture = new Texture2D[12];

		public static Texture2D[] accBackTexture = new Texture2D[10];

		public static Texture2D[] accFrontTexture = new Texture2D[5];

		public static Texture2D[] accShoesTexture = new Texture2D[18];

		public static Texture2D[] accWaistTexture = new Texture2D[12];

		public static Texture2D[] accShieldTexture = new Texture2D[6];

		public static Texture2D[] accNeckTexture = new Texture2D[9];

		public static Texture2D[] accFaceTexture = new Texture2D[9];

		public static Texture2D[] accBalloonTexture = new Texture2D[16];

		public static Texture2D pulleyTexture;

		public static Texture2D[] xmasTree = new Texture2D[5];

		public static Texture2D[] FlameTexture = new Texture2D[17];

		public static Texture2D timerTexture;

		public static Texture2D[] reforgeTexture = new Texture2D[2];

		public static Texture2D wallOutlineTexture;

		public static Texture2D actuatorTexture;

		public static Texture2D wireTexture;

		public static Texture2D wire2Texture;

		public static Texture2D wire3Texture;

		public static Texture2D[] cameraTexture = new Texture2D[8];

		public static Texture2D flyingCarpetTexture;

		public static Texture2D gridTexture;

		public static Texture2D lightDiscTexture;

		public static Texture2D EyeLaserTexture;

		public static Texture2D BoneEyesTexture;

		public static Texture2D BoneLaserTexture;

		public static Texture2D trashTexture;

		public static Texture2D fishingLineTexture;

		public static Texture2D beetleTexture;

		public static Texture2D probeTexture;

		public static Texture2D eyeLaserSmallTexture;

		public static Texture2D xmasLightTexture;

		public static Texture2D[] golemTexture = new Texture2D[4];

		public static Texture2D confuseTexture;

		public static Texture2D sunOrbTexture;

		public static Texture2D sunAltarTexture;

		public static Texture2D[] chainsTexture = new Texture2D[16];

		public static Texture2D chainTexture;

		public static Texture2D[] gemChainTexture = new Texture2D[7];

		public static Texture2D chain2Texture;

		public static Texture2D chain3Texture;

		public static Texture2D chain4Texture;

		public static Texture2D chain5Texture;

		public static Texture2D chain6Texture;

		public static Texture2D chain7Texture;

		public static Texture2D chain8Texture;

		public static Texture2D chain9Texture;

		public static Texture2D chain10Texture;

		public static Texture2D chain11Texture;

		public static Texture2D chain12Texture;

		public static Texture2D chain13Texture;

		public static Texture2D chain14Texture;

		public static Texture2D chain15Texture;

		public static Texture2D chain16Texture;

		public static Texture2D chain17Texture;

		public static Texture2D chain18Texture;

		public static Texture2D chain19Texture;

		public static Texture2D chain20Texture;

		public static Texture2D chain21Texture;

		public static Texture2D chain22Texture;

		public static Texture2D chain23Texture;

		public static Texture2D chain24Texture;

		public static Texture2D chain25Texture;

		public static Texture2D chain26Texture;

		public static Texture2D chain27Texture;

		public static Texture2D chain28Texture;

		public static Texture2D chain29Texture;

		public static Texture2D chain30Texture;

		public static Texture2D chain31Texture;

		public static Texture2D chain32Texture;

		public static Texture2D chain33Texture;

		public static Texture2D chain34Texture;

		public static Texture2D chain35Texture;

		public static Texture2D chain36Texture;

		public static Texture2D chain37Texture;

		public static Texture2D chain38Texture;

		public static Texture2D chain39Texture;

		public static Texture2D chain40Texture;

		public static Texture2D hbTexture1;

		public static Texture2D hbTexture2;

		public static Texture2D chaosTexture;

		public static Texture2D cdTexture;

		public static Texture2D wofTexture;

		public static Texture2D boneArmTexture;

		public static Texture2D boneArm2Texture;

		public static Texture2D pumpkingArmTexture;

		public static Texture2D pumpkingCloakTexture;

		public static Texture2D[] EquipPageTexture = new Texture2D[11];

		public static Texture2D[] PVPTexture = new Texture2D[3];

		public static Texture2D[] npcToggleTexture = new Texture2D[2];

		public static Texture2D[] HBLockTexture = new Texture2D[2];

		public static Texture2D[] buffTexture = new Texture2D[191];

		public static Texture2D[] itemTexture = new Texture2D[3602];

		public static Texture2D[] itemFlameTexture = new Texture2D[3602];

		public static Texture2D[] npcTexture = new Texture2D[540];

		public static Texture2D[] projectileTexture = new Texture2D[651];

		public static Texture2D[] goreTexture = new Texture2D[907];

		public static Texture2D[] BackPackTexture = new Texture2D[8];

		public static Texture2D rainTexture;

		public static Texture2D[] glowMaskTexture = new Texture2D[214];

		public static Texture2D[] extraTexture = new Texture2D[69];

		public static Texture2D[] coinTexture = new Texture2D[4];

		public static Texture2D[] cursorTextures = new Texture2D[13];

		public static Texture2D dustTexture;

		public static Texture2D sunTexture;

		public static Texture2D sun2Texture;

		public static Texture2D sun3Texture;

		public static int maxMoons = 3;

		public static int moonType = 0;

		public static Texture2D[] moonTexture = new Texture2D[maxMoons];

		public static Texture2D pumpkinMoonTexture;

		public static Texture2D snowMoonTexture;

		public static Texture2D oneDropLogo;

		public static int numTileColors = 31;

		public static RenderTarget2D[,] tileAltTexture = new RenderTarget2D[419, numTileColors];

		public static bool[,] tileAltTextureInit = new bool[419, numTileColors];

		public static bool[,] tileAltTextureDrawn = new bool[419, numTileColors];

		public static int numTreeStyles = 19;

		public static RenderTarget2D[,] treeTopAltTexture = new RenderTarget2D[numTreeStyles, numTileColors];

		public static RenderTarget2D[,] treeBranchAltTexture = new RenderTarget2D[numTreeStyles, numTileColors];

		public static bool[,] treeAltTextureInit = new bool[numTreeStyles, numTileColors];

		public static bool[,] treeAltTextureDrawn = new bool[numTreeStyles, numTileColors];

		public static bool[,] checkTreeAlt = new bool[numTreeStyles, numTileColors];

		public static RenderTarget2D[,] wallAltTexture = new RenderTarget2D[225, numTileColors];

		public static bool[,] wallAltTextureInit = new bool[225, numTileColors];

		public static bool[,] wallAltTextureDrawn = new bool[225, numTileColors];

		public static Texture2D[] tileTexture = new Texture2D[419];

		public static Texture2D blackTileTexture;

		public static Texture2D[] wallTexture = new Texture2D[225];

		public static Texture2D[] backgroundTexture = new Texture2D[207];

		public static Texture2D[] cloudTexture = new Texture2D[22];

		public static Texture2D[] starTexture = new Texture2D[5];

		public static Texture2D[] liquidTexture = new Texture2D[12];

		public static Texture2D heartTexture;

		public static Texture2D heart2Texture;

		public static Texture2D manaTexture;

		public static Texture2D bubbleTexture;

		public static Texture2D flameTexture;

		public static Texture2D[] treeTopTexture = new Texture2D[numTreeStyles];

		public static Texture2D[] treeBranchTexture = new Texture2D[numTreeStyles];

		public static Texture2D[] woodTexture = new Texture2D[7];

		public static RenderTarget2D[,] woodAltTexture = new RenderTarget2D[woodTexture.Length, numTileColors];

		public static Texture2D shroomCapTexture;

		public static Texture2D inventoryBackTexture;

		public static Texture2D inventoryBack2Texture;

		public static Texture2D inventoryBack3Texture;

		public static Texture2D inventoryBack4Texture;

		public static Texture2D inventoryBack5Texture;

		public static Texture2D inventoryBack6Texture;

		public static Texture2D inventoryBack7Texture;

		public static Texture2D inventoryBack8Texture;

		public static Texture2D inventoryBack9Texture;

		public static Texture2D inventoryBack10Texture;

		public static Texture2D inventoryBack11Texture;

		public static Texture2D inventoryBack12Texture;

		public static Texture2D inventoryBack13Texture;

		public static Texture2D inventoryBack14Texture;

		public static Texture2D inventoryBack15Texture;

		public static Texture2D hairStyleBackTexture;

		public static Texture2D clothesStyleBackTexture;

		public static Texture2D inventoryTickOnTexture;

		public static Texture2D inventoryTickOffTexture;

		public static Texture2D loTexture;

		public static Texture2D logoTexture;

		public static Texture2D logo2Texture;

		public static Texture2D textBackTexture;

		public static Texture2D chatTexture;

		public static Texture2D chat2Texture;

		public static Texture2D chatBackTexture;

		public static Texture2D teamTexture;

		public static Texture2D reTexture;

		public static Texture2D raTexture;

		public static Texture2D splashTexture;

		public static Texture2D fadeTexture;

		public static Texture2D ninjaTexture;

		public static Texture2D antLionTexture;

		public static Texture2D spikeBaseTexture;

		public static Texture2D ghostTexture;

		public static Texture2D evilCactusTexture;

		public static Texture2D goodCactusTexture;

		public static Texture2D crimsonCactusTexture;

		public static Texture2D wraithEyeTexture;

		public static Texture2D fireflyTexture;

		public static Texture2D fireflyJarTexture;

		public static Texture2D lightningbugTexture;

		public static Texture2D lightningbugJarTexture;

		public static Texture2D[] jellyfishBowlTexture = new Texture2D[3];

		public static Texture2D glowSnailTexture;

		public static Texture2D iceQueenTexture;

		public static Texture2D santaTankTexture;

		public static Texture2D reaperEyeTexture;

		public static Texture2D jackHatTexture;

		public static Texture2D treeFaceTexture;

		public static Texture2D pumpkingFaceTexture;

		public static Texture2D dukeFishronTexture;

		public static Texture2D miniMinotaurTexture;

		public static Texture2D[,] playerTextures;

		public static Texture2D[] playerHairTexture = new Texture2D[134];

		public static Texture2D[] playerHairAltTexture = new Texture2D[134];

		public static SoundEffect[] soundDrip = new SoundEffect[3];

		public static SoundEffectInstance[] soundInstanceDrip = new SoundEffectInstance[3];

		public static SoundEffect[] soundLiquid = new SoundEffect[2];

		public static SoundEffectInstance[] soundInstanceLiquid = new SoundEffectInstance[2];

		public static SoundEffect[] soundMech = new SoundEffect[1];

		public static SoundEffectInstance[] soundInstanceMech = new SoundEffectInstance[1];

		public static SoundEffect[] soundDig = new SoundEffect[3];

		public static SoundEffectInstance[] soundInstanceDig = new SoundEffectInstance[3];

		public static SoundEffect[] soundTink = new SoundEffect[3];

		public static SoundEffectInstance[] soundInstanceTink = new SoundEffectInstance[3];

		public static SoundEffect[] soundCoin = new SoundEffect[5];

		public static SoundEffectInstance[] soundInstanceCoin = new SoundEffectInstance[5];

		public static SoundEffect[] soundPlayerHit = new SoundEffect[3];

		public static SoundEffectInstance[] soundInstancePlayerHit = new SoundEffectInstance[3];

		public static SoundEffect[] soundFemaleHit = new SoundEffect[3];

		public static SoundEffectInstance[] soundInstanceFemaleHit = new SoundEffectInstance[3];

		public static SoundEffect soundPlayerKilled;

		public static SoundEffectInstance soundInstancePlayerKilled;

		public static SoundEffect soundGrass;

		public static SoundEffectInstance soundInstanceGrass;

		public static SoundEffect soundGrab;

		public static SoundEffectInstance soundInstanceGrab;

		public static SoundEffect soundPixie;

		public static SoundEffectInstance soundInstancePixie;

		public static SoundEffect[] soundItem = new SoundEffect[126];

		public static SoundEffectInstance[] soundInstanceItem = new SoundEffectInstance[126];

		public static SoundEffect[] soundNPCHit = new SoundEffect[58];

		public static SoundEffectInstance[] soundInstanceNPCHit = new SoundEffectInstance[58];

		public static SoundEffect[] soundNPCKilled = new SoundEffect[63];

		public static SoundEffectInstance[] soundInstanceNPCKilled = new SoundEffectInstance[63];

		public static SoundEffectInstance soundInstanceMoonlordCry;

		public static SoundEffect soundDoorOpen;

		public static SoundEffectInstance soundInstanceDoorOpen;

		public static SoundEffect soundDoorClosed;

		public static SoundEffectInstance soundInstanceDoorClosed;

		public static SoundEffect soundMenuOpen;

		public static SoundEffectInstance soundInstanceMenuOpen;

		public static SoundEffect soundMenuClose;

		public static SoundEffectInstance soundInstanceMenuClose;

		public static SoundEffect soundMenuTick;

		public static SoundEffectInstance soundInstanceMenuTick;

		public static SoundEffect soundShatter;

		public static SoundEffectInstance soundInstanceShatter;

		public static SoundEffect soundCamera;

		public static SoundEffectInstance soundInstanceCamera;

		public static SoundEffect[] soundZombie = new SoundEffect[106];

		public static SoundEffectInstance[] soundInstanceZombie = new SoundEffectInstance[106];

		public static SoundEffect[] soundRoar = new SoundEffect[3];

		public static SoundEffectInstance[] soundInstanceRoar = new SoundEffectInstance[3];

		public static SoundEffect[] soundSplash = new SoundEffect[2];

		public static SoundEffectInstance[] soundInstanceSplash = new SoundEffectInstance[2];

		public static SoundEffect soundDoubleJump;

		public static SoundEffectInstance soundInstanceDoubleJump;

		public static SoundEffect soundRun;

		public static SoundEffectInstance soundInstanceRun;

		public static SoundEffect soundCoins;

		public static SoundEffectInstance soundInstanceCoins;

		public static SoundEffect soundUnlock;

		public static SoundEffectInstance soundInstanceUnlock;

		public static SoundEffect soundChat;

		public static SoundEffectInstance soundInstanceChat;

		public static SoundEffect soundMaxMana;

		public static SoundEffectInstance soundInstanceMaxMana;

		public static SoundEffect soundDrown;

		public static SoundEffectInstance soundInstanceDrown;

		public static AudioEngine engine;

		public static SoundBank soundBank;

		public static WaveBank waveBank;

		public static Cue[] music = new Cue[40];

		public static float[] musicFade = new float[40];

		public static float musicVolume = 0.75f;

		public static float ambientVolume = 0.75f;

		public static float soundVolume = 1f;

		public static SpriteFont fontItemStack;

		public static SpriteFont fontMouseText;

		public static SpriteFont fontDeathText;

		public static SpriteFont[] fontCombatText = new SpriteFont[2];

		public static ServerMode MenuServerMode = ServerMode.Lobby | ServerMode.FriendsCanJoin;

		public static bool[] tileLighted = new bool[419];

		public static bool[] tileMergeDirt = new bool[419];

		public static bool[] tileCut = new bool[419];

		public static bool[] tileAlch = new bool[419];

		public static int[] tileShine = new int[419];

		public static bool[] tileShine2 = new bool[419];

		public static bool[] wallHouse = new bool[225];

		public static bool[] wallDungeon = new bool[225];

		public static bool[] wallLight = new bool[225];

		public static int[] wallBlend = new int[225];

		public static bool[] tileStone = new bool[419];

		public static bool[] tileAxe = new bool[419];

		public static bool[] tileHammer = new bool[419];

		public static bool[] tileWaterDeath = new bool[419];

		public static bool[] tileLavaDeath = new bool[419];

		public static bool[] tileTable = new bool[419];

		public static bool[] tileBlockLight = new bool[419];

		public static bool[] tileNoSunLight = new bool[419];

		public static bool[] tileDungeon = new bool[419];

		public static bool[] tileSpelunker = new bool[419];

		public static bool[] tileSolidTop = new bool[419];

		public static bool[] tileSolid = new bool[419];

		public static bool[] tileBouncy = new bool[419];

		public static short[] tileValue = new short[419];

		public static byte[] tileLargeFrames = new byte[419];

		public static byte[] wallLargeFrames = new byte[225];

		public static bool[] tileRope = new bool[419];

		public static bool[] tileBrick = new bool[419];

		public static bool[] tileMoss = new bool[419];

		public static bool[] tileNoAttach = new bool[419];

		public static bool[] tileNoFail = new bool[419];

		public static bool[] tileObsidianKill = new bool[419];

		public static bool[] tileFrameImportant = new bool[419];

		public static bool[] tilePile = new bool[419];

		public static bool[] tileBlendAll = new bool[419];

		public static short[] tileGlowMask = new short[419];

		public static bool[] tileContainer = new bool[419];

		public static bool[] tileSign = new bool[419];

		public static bool[][] tileMerge = new bool[419][];

		public static int cageFrames = 25;

		public static bool critterCage = false;

		public static int[] bunnyCageFrame = new int[cageFrames];

		public static int[] bunnyCageFrameCounter = new int[cageFrames];

		public static int[] squirrelCageFrame = new int[cageFrames];

		public static int[] squirrelCageFrameCounter = new int[cageFrames];

		public static int[] squirrelCageFrameOrange = new int[cageFrames];

		public static int[] squirrelCageFrameCounterOrange = new int[cageFrames];

		public static int[] mallardCageFrame = new int[cageFrames];

		public static int[] mallardCageFrameCounter = new int[cageFrames];

		public static int[] duckCageFrame = new int[cageFrames];

		public static int[] duckCageFrameCounter = new int[cageFrames];

		public static int[] birdCageFrame = new int[cageFrames];

		public static int[] birdCageFrameCounter = new int[cageFrames];

		public static int[] redBirdCageFrame = new int[cageFrames];

		public static int[] redBirdCageFrameCounter = new int[cageFrames];

		public static int[] blueBirdCageFrame = new int[cageFrames];

		public static int[] blueBirdCageFrameCounter = new int[cageFrames];

		public static byte[,] butterflyCageMode = new byte[9, cageFrames];

		public static int[,] butterflyCageFrame = new int[9, cageFrames];

		public static int[,] butterflyCageFrameCounter = new int[9, cageFrames];

		public static int[,] scorpionCageFrame = new int[2, cageFrames];

		public static int[,] scorpionCageFrameCounter = new int[2, cageFrames];

		public static int[] snailCageFrame = new int[cageFrames];

		public static int[] snailCageFrameCounter = new int[cageFrames];

		public static int[] snail2CageFrame = new int[cageFrames];

		public static int[] snail2CageFrameCounter = new int[cageFrames];

		public static byte[] fishBowlFrameMode = new byte[cageFrames];

		public static int[] fishBowlFrame = new int[cageFrames];

		public static int[] fishBowlFrameCounter = new int[cageFrames];

		public static int[] frogCageFrame = new int[cageFrames];

		public static int[] frogCageFrameCounter = new int[cageFrames];

		public static int[] mouseCageFrame = new int[cageFrames];

		public static int[] mouseCageFrameCounter = new int[cageFrames];

		public static byte[,] jellyfishCageMode = new byte[3, cageFrames];

		public static int[,] jellyfishCageFrame = new int[3, cageFrames];

		public static int[,] jellyfishCageFrameCounter = new int[3, cageFrames];

		public static int[] wormCageFrame = new int[cageFrames];

		public static int[] wormCageFrameCounter = new int[cageFrames];

		public static int[] penguinCageFrame = new int[cageFrames];

		public static int[] penguinCageFrameCounter = new int[cageFrames];

		public static int[,] slugCageFrame = new int[3, cageFrames];

		public static int[,] slugCageFrameCounter = new int[3, cageFrames];

		public static int[] grasshopperCageFrame = new int[cageFrames];

		public static int[] grasshopperCageFrameCounter = new int[cageFrames];

		public static bool[] tileSand = new bool[419];

		public static bool[] tileFlame = new bool[419];

		public static bool[] npcCatchable = new bool[540];

		public static int[] tileFrame = new int[419];

		public static int[] tileFrameCounter = new int[419];

		public static byte[] wallFrame = new byte[225];

		public static byte[] wallFrameCounter = new byte[225];

		public static int[] backgroundWidth = new int[207];

		public static int[] backgroundHeight = new int[207];

		public static bool tilesLoaded = false;

		public static WorldMap Map = new WorldMap(maxTilesX, maxTilesY);

		public static Tile[,] tile = new Tile[maxTilesX, maxTilesY];

		public static Dust[] dust = new Dust[6001];

		public static Star[] star = new Star[130];

		public static Item[] item = new Item[401];

		public static int[] itemLockoutTime = new int[401];

		public static NPC[] npc = new NPC[201];

		public static Gore[] gore = new Gore[501];

		public static Rain[] rain = new Rain[maxRain + 1];

		public static Projectile[] projectile = new Projectile[1001];

		public static int[,] projectileIdentity = new int[17, 1001];

		public static CombatText[] combatText = new CombatText[100];

		public static ItemText[] itemText = new ItemText[20];

		public static Chest[] chest = new Chest[1000];

		public static Sign[] sign = new Sign[1000];

		public static int[] itemFrame = new int[401];

		public static int[] itemFrameCounter = new int[401];

		public static DrawAnimation[] itemAnimations = new DrawAnimation[3602];

		public static List<int> itemAnimationsRegistered = new List<int>();

		public static Vector2 screenPosition;

		public static Vector2 screenLastPosition;

		public static int screenWidth = 1152;

		public static int screenHeight = 864;

		public static bool screenMaximized = false;

		public static int chatLength = 600;

		public static bool chatMode = false;

		public static bool chatRelease = false;

		public static int showCount = 10;

		public static int numChatLines = 500;

		public static int startChatLine = 0;

		public static string chatText = "";

		public static ChatLine[] chatLine = new ChatLine[numChatLines];

		public static bool inputTextEnter = false;

		public static bool inputTextEscape = false;

		public static float[] hotbarScale = new float[10]
		{
			1f,
			0.75f,
			0.75f,
			0.75f,
			0.75f,
			0.75f,
			0.75f,
			0.75f,
			0.75f,
			0.75f
		};

		public static byte mouseTextColor = 0;

		public static int mouseTextColorChange = 1;

		public static bool mouseLeftRelease = false;

		public static bool mouseRightRelease = false;

		public static bool playerInventory = false;

		public static int stackSplit;

		public static int stackCounter = 0;

		public static int stackDelay = 7;

		public static int superFastStack = 0;

		public static Item mouseItem = new Item();

		public static Item guideItem = new Item();

		public static Item reforgeItem = new Item();

		public static float inventoryScale = 0.75f;

		public static bool hasFocus = true;

		public static bool recFastScroll = false;

		public static bool recBigList = false;

		public static int recStart = 0;

		public static Recipe[] recipe = new Recipe[Recipe.maxRecipes];

		public static int[] availableRecipe = new int[Recipe.maxRecipes];

		public static float[] availableRecipeY = new float[Recipe.maxRecipes];

		public static int numAvailableRecipes;

		public static int focusRecipe;

		public static int myPlayer = 0;

		public static Player[] player = new Player[17];

		public static List<DrawData> playerDrawData = new List<DrawData>();

		public static List<int> playerDrawDust = new List<int>();

		public static List<int> playerDrawGore = new List<int>();

		public static int spawnTileX;

		public static int spawnTileY;

		public static bool npcChatRelease = false;

		public static bool editSign = false;

		public static bool editChest = false;

		public static bool blockInput = false;

		public static Microsoft.Xna.Framework.Input.Keys blockKey = Microsoft.Xna.Framework.Input.Keys.None;

		public static string defaultChestName = string.Empty;

		public static string npcChatText = "";

		public static bool npcChatFocus1 = false;

		public static bool npcChatFocus2 = false;

		public static bool npcChatFocus3 = false;

		public static int npcShop = 0;

		public static int numShops = 21;

		public static int npcChatCornerItem = 0;

		public Chest[] shop = new Chest[numShops];

		public static int[] travelShop = new int[40];

		public static List<string> anglerWhoFinishedToday = new List<string>();

		public static bool anglerQuestFinished;

		public static int anglerQuest = 0;

		public static int[] anglerQuestItemNetIDs = new int[39]
		{
			2450,
			2451,
			2452,
			2453,
			2454,
			2455,
			2456,
			2457,
			2458,
			2459,
			2460,
			2461,
			2462,
			2463,
			2464,
			2465,
			2466,
			2467,
			2468,
			2469,
			2470,
			2471,
			2472,
			2473,
			2474,
			2475,
			2476,
			2477,
			2478,
			2479,
			2480,
			2481,
			2482,
			2483,
			2484,
			2485,
			2486,
			2487,
			2488
		};

		public static bool craftGuide = false;

		public static bool reforge = false;

		public static Item toolTip = new Item();

		private static int backSpaceCount = 0;

		public static string motd = "";

		public static bool toggleFullscreen;

		public static int numDisplayModes = 0;

		public static int[] displayWidth = new int[99];

		public static int[] displayHeight = new int[99];

		public static bool gameMenu = true;

		private static int maxLoadPlayer = 1000;

		private static int maxLoadWorld = 1000;

		public static List<PlayerFileData> PlayerList = new List<PlayerFileData>();

		public static PlayerFileData ActivePlayerFileData = new PlayerFileData();

		public static Player PendingPlayer = null;

		public static List<WorldFileData> WorldList = new List<WorldFileData>();

		public static WorldFileData ActiveWorldFileData = new WorldFileData();

		public static string WorldPath = SavePath + Path.DirectorySeparatorChar + "Worlds";

		public static string CloudWorldPath = "worlds";

		public static string PlayerPath = SavePath + Path.DirectorySeparatorChar + "Players";

		public static string CloudPlayerPath = "players";

		public static Preferences Configuration = new Preferences(SavePath + Path.DirectorySeparatorChar + "config.json");

		public static string[] itemName = new string[3602];

		public static string[] npcName = new string[540];

		private static KeyboardState inputText;

		private static KeyboardState oldInputText;

		public static int PendingResolutionWidth = 800;

		public static int PendingResolutionHeight = 600;

		public static int invasionType = 0;

		public static double invasionX = 0.0;

		public static int invasionSize = 0;

		public static int invasionDelay = 0;

		public static int invasionWarn = 0;

		public static int invasionSizeStart = 0;

		public static bool invasionProgressNearInvasion = false;

		public static int invasionProgressMode = 2;

		public static int invasionProgressIcon = 0;

		public static int invasionProgress = 0;

		public static int invasionProgressMax = 0;

		public static int invasionProgressWave = 0;

		public static int invasionProgressDisplayLeft = 0;

		public static float invasionProgressAlpha = 0f;

		public static int[] npcFrameCount = new int[540]
		{
			1,
			2,
			2,
			3,
			6,
			2,
			2,
			1,
			1,
			1,
			1,
			1,
			1,
			1,
			1,
			1,
			2,
			25,
			23,
			25,
			21,
			15,
			26,
			2,
			10,
			1,
			16,
			16,
			16,
			3,
			1,
			15,
			3,
			1,
			3,
			1,
			1,
			21,
			25,
			1,
			1,
			1,
			3,
			3,
			15,
			3,
			7,
			7,
			4,
			5,
			6,
			5,
			3,
			3,
			23,
			6,
			3,
			6,
			6,
			2,
			5,
			3,
			2,
			7,
			7,
			4,
			2,
			8,
			1,
			5,
			1,
			2,
			4,
			16,
			5,
			4,
			4,
			15,
			15,
			15,
			15,
			2,
			4,
			6,
			6,
			24,
			16,
			1,
			1,
			1,
			1,
			1,
			1,
			4,
			3,
			1,
			1,
			1,
			1,
			1,
			1,
			5,
			6,
			7,
			16,
			1,
			1,
			25,
			23,
			12,
			20,
			21,
			1,
			2,
			2,
			3,
			6,
			1,
			1,
			1,
			15,
			4,
			11,
			1,
			23,
			6,
			6,
			3,
			1,
			2,
			2,
			1,
			3,
			4,
			1,
			2,
			1,
			4,
			2,
			1,
			15,
			3,
			25,
			4,
			5,
			7,
			3,
			2,
			12,
			12,
			4,
			4,
			4,
			8,
			8,
			9,
			5,
			6,
			4,
			15,
			23,
			3,
			3,
			8,
			5,
			4,
			13,
			15,
			12,
			4,
			14,
			14,
			3,
			2,
			5,
			3,
			2,
			3,
			23,
			5,
			14,
			16,
			5,
			2,
			2,
			12,
			3,
			3,
			3,
			3,
			2,
			2,
			2,
			2,
			2,
			7,
			14,
			15,
			16,
			8,
			3,
			15,
			15,
			15,
			2,
			3,
			20,
			25,
			23,
			26,
			4,
			4,
			16,
			16,
			20,
			20,
			20,
			2,
			2,
			2,
			2,
			8,
			12,
			3,
			4,
			2,
			4,
			25,
			26,
			26,
			6,
			3,
			3,
			3,
			3,
			3,
			3,
			4,
			4,
			5,
			4,
			6,
			7,
			15,
			4,
			7,
			6,
			1,
			1,
			2,
			4,
			3,
			5,
			3,
			3,
			3,
			4,
			5,
			6,
			4,
			2,
			1,
			8,
			4,
			4,
			1,
			8,
			1,
			4,
			15,
			15,
			15,
			15,
			15,
			15,
			15,
			15,
			15,
			15,
			15,
			15,
			3,
			3,
			3,
			3,
			3,
			3,
			15,
			3,
			6,
			12,
			20,
			20,
			20,
			15,
			15,
			15,
			5,
			5,
			6,
			6,
			5,
			2,
			7,
			2,
			6,
			6,
			6,
			6,
			6,
			15,
			15,
			15,
			15,
			15,
			11,
			4,
			2,
			2,
			3,
			3,
			3,
			15,
			15,
			15,
			10,
			14,
			12,
			1,
			10,
			8,
			3,
			3,
			2,
			2,
			2,
			2,
			7,
			15,
			15,
			15,
			6,
			3,
			10,
			10,
			6,
			9,
			8,
			9,
			8,
			20,
			10,
			6,
			23,
			1,
			4,
			24,
			2,
			4,
			6,
			6,
			10,
			15,
			15,
			15,
			15,
			4,
			4,
			26,
			23,
			8,
			2,
			4,
			4,
			4,
			4,
			2,
			2,
			4,
			12,
			12,
			9,
			9,
			9,
			1,
			9,
			11,
			2,
			2,
			9,
			5,
			6,
			4,
			18,
			8,
			11,
			1,
			4,
			5,
			8,
			4,
			1,
			1,
			1,
			1,
			4,
			2,
			5,
			4,
			11,
			5,
			11,
			1,
			1,
			1,
			10,
			10,
			15,
			8,
			17,
			6,
			6,
			1,
			12,
			12,
			13,
			15,
			9,
			5,
			10,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			4,
			4,
			16,
			16,
			25,
			5,
			7,
			3,
			10,
			2,
			6,
			2,
			19,
			19,
			19,
			19,
			26,
			3,
			1,
			1,
			1,
			1,
			1,
			16,
			21,
			9,
			16,
			7,
			6,
			18,
			13,
			20,
			12,
			12,
			20,
			6,
			14,
			14,
			14,
			14,
			6,
			1,
			3,
			25,
			19,
			20,
			22,
			2,
			4,
			4,
			4,
			11,
			9,
			8,
			1,
			9,
			1,
			8,
			8,
			12,
			12,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			1,
			6,
			9,
			1,
			1,
			1,
			1,
			1,
			1,
			4,
			1,
			10,
			1,
			8,
			4,
			1,
			5,
			8,
			8,
			8,
			8,
			9,
			9,
			5,
			4,
			8,
			16,
			8,
			2,
			3,
			3,
			6,
			6
		};

		public static Dictionary<int, byte> npcLifeBytes = new Dictionary<int, byte>();

		private static bool mouseExit = false;

		private static float exitScale = 0.8f;

		private static bool mouseReforge = false;

		private static float reforgeScale = 0.8f;

		public static Player clientPlayer = new Player();

		public static string getIP = defaultIP;

		public static string getPort = Convert.ToString(Netplay.ListenPort);

		public static bool menuMultiplayer = false;

		public static bool menuServer = false;

		public static int netMode = 0;

		private static int _targetNetMode = 0;

		private static bool _hasPendingNetmodeChange = false;

		public static int netPlayCounter;

		public static int lastNPCUpdate;

		public static int lastItemUpdate;

		public static int maxNPCUpdates = 5;

		public static int maxItemUpdates = 5;

		public static string cUp = "W";

		public static string cLeft = "A";

		public static string cDown = "S";

		public static string cRight = "D";

		public static string cJump = "Space";

		public static string cThrowItem = "T";

		public static string cHeal = "H";

		public static string cMana = "J";

		public static string cBuff = "B";

		public static string cHook = "E";

		public static string cTorch = "LeftShift";

		public static string cInv = "Escape";

		public static string cSmart = "LeftControl";

		public static string cMount = "R";

		public static bool cSmartToggle = true;

		public static bool smartDigEnabled = false;

		public static bool smartDigShowing = false;

		public static int smartDigX;

		public static int smartDigY;

		public static int cursorOverride = -1;

		public static int signHover = -1;

		public static string cMapZoomIn = "Add";

		public static string cMapZoomOut = "Subtract";

		public static string cMapAlphaUp = "PageUp";

		public static string cMapAlphaDown = "PageDown";

		public static string cMapFull = "M";

		public static string cMapStyle = "Tab";

		public static Microsoft.Xna.Framework.Color mouseColor = new Microsoft.Xna.Framework.Color(255, 50, 95);

		public static Microsoft.Xna.Framework.Color cursorColor = Microsoft.Xna.Framework.Color.White;

		public static int cursorColorDirection = 1;

		public static float cursorAlpha = 0f;

		public static float cursorScale = 0f;

		public static bool signBubble = false;

		public static int signX = 0;

		public static int signY = 0;

		public static bool hideUI = false;

		public static bool releaseUI = false;

		public static bool terrariasFixedTiming = true;

		private int splashCounter;

		public List<int> DrawCacheNPCsMoonMoon = new List<int>(200);

		public List<int> DrawCacheNPCsOverPlayers = new List<int>(200);

		public List<int> DrawCacheProjsBehindNPCsAndTiles = new List<int>(1000);

		public List<int> DrawCacheProjsBehindNPCs = new List<int>(1000);

		public List<int> DrawCacheProjsBehindProjectiles = new List<int>(1000);

		public List<int> DrawCacheNPCProjectiles = new List<int>(200);

		public static string oldStatusText = "";

		public static bool autoShutdown = false;

		public static bool serverGenLock = false;

		public static int sundialCooldown = 0;

		public static bool fastForwardTime = false;

		public static float ambientWaterfallX = -1f;

		public static float ambientWaterfallY = -1f;

		public static float ambientWaterfallStrength = 0f;

		public static float ambientLavafallX = -1f;

		public static float ambientLavafallY = -1f;

		public static float ambientLavafallStrength = 0f;

		public static float ambientLavaX = -1f;

		public static float ambientLavaY = -1f;

		public static float ambientLavaStrength = 0f;

		public static int ambientCounter = 0;

		public static int ProjectileUpdateLoopIndex = -1;

		private static bool _largeMethodFix = true;

		private float logoRotation;

		private float logoRotationDirection = 1f;

		private float logoRotationSpeed = 1f;

		private float logoScale = 1f;

		private float logoScaleDirection = 1f;

		private float logoScaleSpeed = 1f;

		private static int maxMenuItems = 16;

		private float[] menuItemScale = new float[maxMenuItems];

		private int focusMenu = -1;

		private int selectedMenu = -1;

		private int selectedMenu2 = -1;

		public static int selectedPlayer = 0;

		public static int selectedWorld = 0;

		public static int menuMode = 0;

		public static int menuSkip = 0;

		private static Item cpItem = new Item();

		public int textBlinkerCount;

		public int textBlinkerState;

		public static string newWorldName = "";

		public static string hoverItemName = "";

		public static Microsoft.Xna.Framework.Color inventoryBack = new Microsoft.Xna.Framework.Color(220, 220, 220, 220);

		public static bool mouseText = false;

		private static int mH = 0;

		private static int sX = screenWidth - 800;

		private static int starMana = 20;

		private static float heartLife = 20f;

		private static int rare = 0;

		private static int hairStart = 0;

		private static int oldHairStyle;

		private static Microsoft.Xna.Framework.Color oldHairColor;

		private static int selClothes = 0;

		private static Microsoft.Xna.Framework.Color[] oldClothesColor = new Microsoft.Xna.Framework.Color[4];

		public static int dresserX;

		public static int dresserY;

		public static Microsoft.Xna.Framework.Color selColor = Microsoft.Xna.Framework.Color.White;

		public static int focusColor = 0;

		public static int colorDelay = 0;

		public static int setKey = -1;

		public static int bgScroll = 0;

		public static bool autoPass = false;

		public static int menuFocus = 0;

		private static float hBar = -1f;

		private static float sBar = -1f;

		private static float lBar = 1f;

		private int grabColorSlider;

		public static bool blockMouse = false;

		private bool[] menuWide = new bool[100];

		private static string[] MonolithFilterNames = new string[4]
		{
			"MonolithVortex",
			"MonolithNebula",
			"MonolithStardust",
			"MonolithSolar"
		};

		private static string[] MonolithSkyNames = new string[4]
		{
			"MonolithVortex",
			"MonolithNebula",
			"MonolithStardust",
			"MonolithSolar"
		};

		private static float tranSpeed = 0.05f;

		private static float atmo = 0f;

		private static float bgScale = 1f;

		private static int bgW = (int)(1024f * bgScale);

		private static Microsoft.Xna.Framework.Color backColor = Microsoft.Xna.Framework.Color.White;

		private static Microsoft.Xna.Framework.Color trueBackColor = backColor;

		private float screenOff;

		private float scAdj;

		private float cTop;

		public static bool expertMode
		{
			get
			{
				return ActiveWorldFileData.IsExpertMode;
			}
			set
			{
				ActiveWorldFileData.IsExpertMode = value;
			}
		}

		public static AchievementManager Achievements => instance._achievements;

		public static Vector2 MouseScreen => new Vector2(mouseX, mouseY);

		public static Vector2 MouseWorld
		{
			get
			{
				Vector2 result = MouseScreen + screenPosition;
				if (player[myPlayer].gravDir == -1f)
				{
					result.Y = screenPosition.Y + (float)screenHeight - (float)mouseY;
				}
				return result;
			}
		}

		public static string playerPathName => ActivePlayerFileData.Path;

		public static string worldPathName => ActiveWorldFileData.Path;

		public static event Action OnEngineLoad;

		public static event Action OnTick;

		public static void SetCameraLerp(float lerp, int time)
		{
			cameraLerp = lerp;
			cameraLerpTimeToggle = time;
			cameraLerpTimer = 0;
		}

		public static Vector2 ReverseGravitySupport(Vector2 pos, float height = 0f)
		{
			if (player[myPlayer].gravDir != -1f)
			{
				return pos;
			}
			pos.Y = (float)screenHeight - pos.Y - height;
			return pos;
		}

		public static Microsoft.Xna.Framework.Point ReverseGravitySupport(Microsoft.Xna.Framework.Point pos, int height = 0)
		{
			if (player[myPlayer].gravDir != -1f)
			{
				return pos;
			}
			pos.Y = screenHeight - pos.Y - height;
			return pos;
		}

		public static Microsoft.Xna.Framework.Rectangle ReverseGravitySupport(Microsoft.Xna.Framework.Rectangle box)
		{
			if (player[myPlayer].gravDir != -1f)
			{
				return box;
			}
			box.Y = screenHeight - box.Y - box.Height;
			return box;
		}

		[DllImport("User32")]
		private static extern int RemoveMenu(IntPtr hMenu, int nPosition, int wFlags);

		[DllImport("User32")]
		private static extern IntPtr GetSystemMenu(IntPtr hWnd, bool bRevert);

		[DllImport("User32")]
		private static extern int GetMenuItemCount(IntPtr hWnd);

		[DllImport("kernel32.dll")]
		public static extern IntPtr LoadLibrary(string dllToLoad);

		public static void SetupTileMerge()
		{
			int num = 419;
			tileMerge = new bool[num][];
			for (int i = 0; i < tileMerge.Length; i++)
			{
				tileMerge[i] = new bool[num];
			}
		}

		public static void RegisterItemAnimation(int index, DrawAnimation animation)
		{
			if (!itemAnimationsRegistered.Contains(index))
			{
				itemAnimationsRegistered.Add(index);
			}
			itemAnimations[index] = animation;
		}

		public static void InitializeItemAnimations()
		{
			for (int i = 0; i < itemAnimations.Length; i++)
			{
				itemAnimations[i] = null;
			}
			itemAnimationsRegistered.Clear();
			RegisterItemAnimation(3581, new DrawAnimationVertical(4, 4));
			RegisterItemAnimation(3580, new DrawAnimationVertical(4, 4));
			RegisterItemAnimation(575, new DrawAnimationVertical(5, 4));
			RegisterItemAnimation(547, new DrawAnimationVertical(5, 4));
			RegisterItemAnimation(520, new DrawAnimationVertical(5, 4));
			RegisterItemAnimation(548, new DrawAnimationVertical(5, 4));
			RegisterItemAnimation(521, new DrawAnimationVertical(5, 4));
			RegisterItemAnimation(549, new DrawAnimationVertical(5, 4));
		}

		public static void AnglerQuestSwap()
		{
			if (netMode == 1)
			{
				return;
			}
			anglerWhoFinishedToday.Clear();
			anglerQuestFinished = false;
			bool flag = true;
			while (flag)
			{
				flag = false;
				anglerQuest = rand.Next(anglerQuestItemNetIDs.Length);
				int num = anglerQuestItemNetIDs[anglerQuest];
				if (num == 2454 && (!hardMode || WorldGen.crimson))
				{
					flag = true;
				}
				if (num == 2457 && WorldGen.crimson)
				{
					flag = true;
				}
				if (num == 2462 && !hardMode)
				{
					flag = true;
				}
				if (num == 2463 && (!hardMode || !WorldGen.crimson))
				{
					flag = true;
				}
				if (num == 2465 && !hardMode)
				{
					flag = true;
				}
				if (num == 2468 && !hardMode)
				{
					flag = true;
				}
				if (num == 2471 && !hardMode)
				{
					flag = true;
				}
				if (num == 2473 && !hardMode)
				{
					flag = true;
				}
				if (num == 2477 && !WorldGen.crimson)
				{
					flag = true;
				}
				if (num == 2480 && !hardMode)
				{
					flag = true;
				}
				if (num == 2483 && !hardMode)
				{
					flag = true;
				}
				if (num == 2484 && !hardMode)
				{
					flag = true;
				}
				if (num == 2485 && WorldGen.crimson)
				{
					flag = true;
				}
			}
			NetMessage.SendAnglerQuest();
		}

		public static void LoadWorlds()
		{
			WorldList.Clear();
			Directory.CreateDirectory(WorldPath);
			string[] files = Directory.GetFiles(WorldPath, "*.wld");
			int num = Math.Min(files.Length, maxLoadWorld);
			for (int i = 0; i < num; i++)
			{
				WorldFileData allMetadata = WorldFile.GetAllMetadata(files[i], false);
				if (allMetadata != null)
				{
					WorldList.Add(allMetadata);
				}
				else
				{
					WorldList.Add(WorldFileData.FromInvalidWorld(files[i], false));
				}
			}
			if (SocialAPI.Cloud != null)
			{
				List<string> files2 = SocialAPI.Cloud.GetFiles(Regex.Escape(CloudWorldPath) + "/.+\\.wld");
				foreach (string item2 in files2)
				{
					WorldFileData allMetadata2 = WorldFile.GetAllMetadata(item2, true);
					if (allMetadata2 != null)
					{
						WorldList.Add(allMetadata2);
					}
					else
					{
						WorldList.Add(WorldFileData.FromInvalidWorld(item2, true));
					}
				}
			}
			WorldList.Sort(WorldListSortMethod);
		}

		private static int WorldListSortMethod(WorldFileData data1, WorldFileData data2)
		{
			return data1.Name.CompareTo(data2.Name);
		}

		public static void LoadPlayers()
		{
			PlayerList.Clear();
			Directory.CreateDirectory(PlayerPath);
			string[] files = Directory.GetFiles(PlayerPath, "*.plr");
			int num = Math.Min(maxLoadPlayer, files.Length);
			for (int i = 0; i < num; i++)
			{
				PlayerFileData fileData = Player.GetFileData(files[i], false);
				if (fileData != null)
				{
					PlayerList.Add(fileData);
				}
			}
			if (SocialAPI.Cloud != null)
			{
				List<string> files2 = SocialAPI.Cloud.GetFiles(Regex.Escape(CloudPlayerPath) + "/.+\\.plr");
				foreach (string item2 in files2)
				{
					PlayerFileData fileData2 = Player.GetFileData(item2, true);
					if (fileData2 != null)
					{
						PlayerList.Add(fileData2);
					}
				}
			}
			PlayerList.Sort(PlayerListSortMethod);
		}

		private static int PlayerListSortMethod(PlayerFileData data1, PlayerFileData data2)
		{
			return data1.Name.CompareTo(data2.Name);
		}

		protected void OpenRecent()
		{
			try
			{
				if (File.Exists(SavePath + Path.DirectorySeparatorChar + "servers.dat"))
				{
					using (FileStream input = new FileStream(SavePath + Path.DirectorySeparatorChar + "servers.dat", FileMode.Open))
					{
						using (BinaryReader binaryReader = new BinaryReader(input))
						{
							binaryReader.ReadInt32();
							for (int i = 0; i < 10; i++)
							{
								recentWorld[i] = binaryReader.ReadString();
								recentIP[i] = binaryReader.ReadString();
								recentPort[i] = binaryReader.ReadInt32();
							}
						}
					}
				}
			}
			catch
			{
			}
		}

		public static void SaveRecent()
		{
			Directory.CreateDirectory(SavePath);
			try
			{
				File.SetAttributes(SavePath + Path.DirectorySeparatorChar + "servers.dat", FileAttributes.Normal);
			}
			catch
			{
			}
			try
			{
				using (FileStream output = new FileStream(SavePath + Path.DirectorySeparatorChar + "servers.dat", FileMode.Create))
				{
					using (BinaryWriter binaryWriter = new BinaryWriter(output))
					{
						binaryWriter.Write(curRelease);
						for (int i = 0; i < 10; i++)
						{
							binaryWriter.Write(recentWorld[i]);
							binaryWriter.Write(recentIP[i]);
							binaryWriter.Write(recentPort[i]);
						}
					}
				}
			}
			catch
			{
			}
		}

		public static bool SaveSettings()
		{
			Configuration.Put("SmartCursorToggle", cSmartToggle);
			Configuration.Put("MapEnabled", mapEnabled);
			Configuration.Put("InvasionBarMode", invasionProgressMode);
			Configuration.Put("AutoSave", autoSave);
			Configuration.Put("AutoPause", autoPause);
			Configuration.Put("Language", Lang.lang);
			Configuration.Put("PlacementPreview", placementPreview);
			Configuration.Put("GoreVisualsAllowed", ChildSafety.Disabled);
			Configuration.Put("VolumeSound", soundVolume);
			Configuration.Put("VolumeAmbient", ambientVolume);
			Configuration.Put("VolumeMusic", musicVolume);
			Configuration.Put("KeyUp", cUp);
			Configuration.Put("KeyDown", cDown);
			Configuration.Put("KeyLeft", cLeft);
			Configuration.Put("KeyRight", cRight);
			Configuration.Put("KeyJump", cJump);
			Configuration.Put("KeyThrowItem", cThrowItem);
			Configuration.Put("KeyInventory", cInv);
			Configuration.Put("KeyQuickHeal", cHeal);
			Configuration.Put("KeyQuickMana", cMana);
			Configuration.Put("KeyQuickBuff", cBuff);
			Configuration.Put("KeyUseHook", cHook);
			Configuration.Put("KeyAutoSelect", cTorch);
			Configuration.Put("KeySmartCursor", cSmart);
			Configuration.Put("KeyMount", cMount);
			Configuration.Put("KeyMapStyle", cMapStyle);
			Configuration.Put("KeyFullscreenMap", cMapFull);
			Configuration.Put("KeyMapZoomIn", cMapZoomIn);
			Configuration.Put("KeyMapZoomOut", cMapZoomOut);
			Configuration.Put("KeyMapAlphaUp", cMapAlphaUp);
			Configuration.Put("KeyMapAlphaDown", cMapAlphaDown);
			Configuration.Put("Fullscreen", graphics.IsFullScreen);
			Configuration.Put("WindowMaximized", screenMaximized);
			Configuration.Put("DisplayWidth", graphics.PreferredBackBufferWidth);
			Configuration.Put("DisplayHeight", graphics.PreferredBackBufferHeight);
			Configuration.Put("GraphicsQuality", qaStyle);
			Configuration.Put("BackgroundEnabled", owBack);
			Configuration.Put("FrameSkip", !terrariasFixedTiming);
			Configuration.Put("LightingMode", Lighting.lightMode);
			Configuration.Put("LightingThreads", Lighting.LightingThreads);
			Configuration.Put("MouseColorR", mouseColor.R);
			Configuration.Put("MouseColorG", mouseColor.G);
			Configuration.Put("MouseColorB", mouseColor.B);
			Configuration.Put("Parallax", caveParallax);
			Configuration.Put("ShowItemText", showItemText);
			Configuration.Put("LastLaunchedVersion", curRelease);
			Configuration.Put("ClientUUID", clientUUID);
			Configuration.Put("UseSmartCursorForCommonBlocks", Player.SmartCursorSettings.SmartBlocksEnabled);
			Configuration.Put("UseSmartAxeAfterSmartPickaxe", Player.SmartCursorSettings.SmartAxeAfterPickaxe);
			Configuration.Put("UseSmartWallReplacement", Player.SmartCursorSettings.SmartWallReplacement);
			Configuration.Put("DisableLeftShiftTrashCan", ItemSlot.Options.DisableLeftShiftTrashCan);
			Configuration.Put("HighlightNewItems", ItemSlot.Options.HighlightNewItems);
			Configuration.Put("HidePasswords", HidePassword);
			Configuration.Put("ThickMouseEdges", ThickMouse);
			Configuration.Put("ThickMouseEdgesPackedColor", ThickMousePackedColor);
			Configuration.Put("ReverseUpDownForArmorSetBonuses", ReversedUpDownArmorSetBonuses);
			return Configuration.Save();
		}

		protected void CheckBunny()
		{
			try
			{
				RegistryKey currentUser = Registry.CurrentUser;
				currentUser = currentUser.CreateSubKey("Software\\Terraria");
				if (currentUser != null && currentUser.GetValue("Bunny") != null && currentUser.GetValue("Bunny").ToString() == "1")
				{
					cEd = true;
				}
			}
			catch
			{
				cEd = false;
			}
		}

		protected void OpenSettings()
		{
			if (File.Exists(SavePath + Path.DirectorySeparatorChar + "config.dat"))
			{
				OpenLegacySettings();
				if (SaveSettings())
				{
					File.Delete(SavePath + Path.DirectorySeparatorChar + "config.dat");
				}
				Lighting.LightingThreads = 0;
				return;
			}
			Configuration.Load();
			Configuration.Get("SmartCursorToggle", ref cSmartToggle);
			Configuration.Get("MapEnabled", ref mapEnabled);
			Configuration.Get("InvasionBarMode", ref invasionProgressMode);
			Configuration.Get("AutoSave", ref autoSave);
			Configuration.Get("AutoPause", ref autoPause);
			Configuration.Get("Language", ref Lang.lang);
			Configuration.Get("PlacementPreview", ref placementPreview);
			Configuration.Get("GoreVisualsAllowed", ref ChildSafety.Disabled);
			Configuration.Get("VolumeSound", ref soundVolume);
			Configuration.Get("VolumeAmbient", ref ambientVolume);
			Configuration.Get("VolumeMusic", ref musicVolume);
			Configuration.Get("KeyUp", ref cUp);
			Configuration.Get("KeyDown", ref cDown);
			Configuration.Get("KeyLeft", ref cLeft);
			Configuration.Get("KeyRight", ref cRight);
			Configuration.Get("KeyJump", ref cJump);
			Configuration.Get("KeyThrowItem", ref cThrowItem);
			Configuration.Get("KeyInventory", ref cInv);
			Configuration.Get("KeyQuickHeal", ref cHeal);
			Configuration.Get("KeyQuickMana", ref cMana);
			Configuration.Get("KeyQuickBuff", ref cBuff);
			Configuration.Get("KeyUseHook", ref cHook);
			Configuration.Get("KeyAutoSelect", ref cTorch);
			Configuration.Get("KeySmartCursor", ref cSmart);
			Configuration.Get("KeyMount", ref cMount);
			Configuration.Get("KeyMapStyle", ref cMapStyle);
			Configuration.Get("KeyFullscreenMap", ref cMapFull);
			Configuration.Get("KeyMapZoomIn", ref cMapZoomIn);
			Configuration.Get("KeyMapZoomOut", ref cMapZoomOut);
			Configuration.Get("KeyMapAlphaUp", ref cMapAlphaUp);
			Configuration.Get("KeyMapAlphaDown", ref cMapAlphaDown);
			Configuration.Get("WindowMaximized", ref screenMaximized);
			Configuration.Get("GraphicsQuality", ref qaStyle);
			Configuration.Get("BackgroundEnabled", ref owBack);
			bool currentValue = false;
			Configuration.Get("FrameSkip", ref currentValue);
			terrariasFixedTiming = !currentValue;
			Configuration.Get("LightingMode", ref Lighting.lightMode);
			Configuration.Get("LightingThreads", ref Lighting.LightingThreads);
			Configuration.Get("Parallax", ref caveParallax);
			bgScroll = (int)((1f - caveParallax) * 500f);
			Configuration.Get("ShowItemText", ref showItemText);
			Configuration.Get("ClientUUID", ref clientUUID);
			Configuration.Get("UseSmartCursorForCommonBlocks", ref Player.SmartCursorSettings.SmartBlocksEnabled);
			Configuration.Get("UseSmartWallReplacement", ref Player.SmartCursorSettings.SmartWallReplacement);
			Configuration.Get("UseSmartAxeAfterSmartPickaxe", ref Player.SmartCursorSettings.SmartAxeAfterPickaxe);
			Configuration.Get("DisableLeftShiftTrashCan", ref ItemSlot.Options.DisableLeftShiftTrashCan);
			Configuration.Get("HidePasswords", ref HidePassword);
			Configuration.Get("HighlightNewItems", ref ItemSlot.Options.HighlightNewItems);
			Configuration.Get("ThickMouseEdges", ref ThickMouse);
			Configuration.Get("ThickMouseEdgesPackedColor", ref ThickMousePackedColor);
			Configuration.Get("ReverseUpDownForArmorSetBonuses", ref ReversedUpDownArmorSetBonuses);
			bool currentValue2 = false;
			int currentValue3 = graphics.PreferredBackBufferWidth;
			int currentValue4 = graphics.PreferredBackBufferHeight;
			Configuration.Get("Fullscreen", ref currentValue2);
			Configuration.Get("DisplayWidth", ref currentValue3);
			Configuration.Get("DisplayHeight", ref currentValue4);
			mouseColor.R = Configuration.Get("MouseColorR", mouseColor.R);
			mouseColor.G = Configuration.Get("MouseColorG", mouseColor.G);
			mouseColor.B = Configuration.Get("MouseColorB", mouseColor.B);
			SetDisplayMode(currentValue3, currentValue4, currentValue2);
			int currentValue5 = 0;
			Configuration.Get("LastLaunchedVersion", ref currentValue5);
			if (currentValue5 <= 146)
			{
				Lighting.LightingThreads = 0;
			}
			if (currentValue5 <= 147)
			{
				terrariasFixedTiming = !terrariasFixedTiming;
			}
			if (currentValue5 != curRelease)
			{
				SaveSettings();
			}
		}

		protected void OpenLegacySettings()
		{
			try
			{
				if (File.Exists(SavePath + Path.DirectorySeparatorChar + "config.dat"))
				{
					using (FileStream input = new FileStream(SavePath + Path.DirectorySeparatorChar + "config.dat", FileMode.Open))
					{
						using (BinaryReader binaryReader = new BinaryReader(input))
						{
							int num = binaryReader.ReadInt32();
							if (num >= 68)
							{
								if (num >= 67)
								{
									clientUUID = binaryReader.ReadString();
								}
								bool flag = binaryReader.ReadBoolean();
								mouseColor.R = binaryReader.ReadByte();
								mouseColor.G = binaryReader.ReadByte();
								mouseColor.B = binaryReader.ReadByte();
								soundVolume = binaryReader.ReadSingle();
								if (num >= 90)
								{
									ambientVolume = binaryReader.ReadSingle();
								}
								musicVolume = binaryReader.ReadSingle();
								cUp = binaryReader.ReadString();
								cDown = binaryReader.ReadString();
								cLeft = binaryReader.ReadString();
								cRight = binaryReader.ReadString();
								cJump = binaryReader.ReadString();
								cThrowItem = binaryReader.ReadString();
								if (num >= 1)
								{
									cInv = binaryReader.ReadString();
								}
								if (num >= 12)
								{
									cHeal = binaryReader.ReadString();
									cMana = binaryReader.ReadString();
									cBuff = binaryReader.ReadString();
								}
								if (num >= 13)
								{
									cHook = binaryReader.ReadString();
								}
								caveParallax = binaryReader.ReadSingle();
								if (num >= 2)
								{
									terrariasFixedTiming = binaryReader.ReadBoolean();
								}
								if (num >= 91)
								{
									binaryReader.ReadBoolean();
								}
								if (num >= 4)
								{
									int width = binaryReader.ReadInt32();
									int height = binaryReader.ReadInt32();
									SetDisplayMode(width, height, flag);
								}
								if (num >= 8)
								{
									autoSave = binaryReader.ReadBoolean();
								}
								if (num >= 9)
								{
									autoPause = binaryReader.ReadBoolean();
								}
								if (num >= 19)
								{
									showItemText = binaryReader.ReadBoolean();
								}
								if (num >= 30)
								{
									cTorch = binaryReader.ReadString();
									Lighting.lightMode = binaryReader.ReadByte();
									qaStyle = binaryReader.ReadByte();
								}
								if (num >= 37)
								{
									owBack = binaryReader.ReadBoolean();
								}
								if (num >= 39)
								{
									Lang.lang = binaryReader.ReadByte();
								}
								if (num >= 46)
								{
									mapEnabled = binaryReader.ReadBoolean();
									cMapStyle = binaryReader.ReadString();
									cMapFull = binaryReader.ReadString();
									cMapZoomIn = binaryReader.ReadString();
									cMapZoomOut = binaryReader.ReadString();
									cMapAlphaUp = binaryReader.ReadString();
									cMapAlphaDown = binaryReader.ReadString();
								}
								if (num >= 89)
								{
									Lighting.LightingThreads = binaryReader.ReadInt32();
									if (Lighting.LightingThreads >= Environment.ProcessorCount)
									{
										Lighting.LightingThreads = Environment.ProcessorCount - 1;
									}
								}
								if (num >= 100)
								{
									cSmart = binaryReader.ReadString();
									cSmartToggle = binaryReader.ReadBoolean();
								}
								if (num >= 107)
								{
									invasionProgressMode = binaryReader.ReadByte();
								}
								if (num >= 111)
								{
									placementPreview = binaryReader.ReadBoolean();
								}
								if (num >= 111)
								{
									placementPreview = binaryReader.ReadBoolean();
								}
								SetFullScreen(flag);
							}
							binaryReader.Close();
						}
					}
				}
			}
			catch
			{
			}
		}

		private static void ErasePlayer(int i)
		{
			try
			{
				FileUtilities.Delete(PlayerList[i].Path, PlayerList[i].IsCloudSave);
				FileUtilities.Delete(PlayerList[i].Path + ".bak", PlayerList[i].IsCloudSave);
			}
			catch
			{
			}
			try
			{
				string path = PlayerList[i].Path.Substring(0, PlayerList[i].Path.Length - 4);
				if (Directory.Exists(path))
				{
					Directory.Delete(path, true);
				}
				LoadPlayers();
			}
			catch
			{
			}
		}

		private static void EraseWorld(int i)
		{
			try
			{
				if (!WorldList[i].IsCloudSave)
				{
					FileOperationAPIWrapper.MoveToRecycleBin(WorldList[i].Path);
					FileOperationAPIWrapper.MoveToRecycleBin(WorldList[i].Path + ".bak");
				}
				else if (SocialAPI.Cloud != null)
				{
					SocialAPI.Cloud.Delete(WorldList[i].Path);
				}
				LoadWorlds();
			}
			catch
			{
			}
		}

		public static string GetPlayerPathFromName(string playerName, bool cloudSave)
		{
			string text = "";
			for (int i = 0; i < playerName.Length; i++)
			{
				string text2 = playerName.Substring(i, 1);
				string text3 = "";
				switch (text2)
				{
				case "a":
				case "b":
				case "c":
				case "d":
				case "e":
				case "f":
				case "g":
				case "h":
				case "i":
				case "j":
				case "k":
				case "l":
				case "m":
				case "n":
				case "o":
				case "p":
				case "q":
				case "r":
				case "s":
				case "t":
				case "u":
				case "v":
				case "w":
				case "x":
				case "y":
				case "z":
				case "A":
				case "B":
				case "C":
				case "D":
				case "E":
				case "F":
				case "G":
				case "H":
				case "I":
				case "J":
				case "K":
				case "L":
				case "M":
				case "N":
				case "O":
				case "P":
				case "Q":
				case "R":
				case "S":
				case "T":
				case "U":
				case "V":
				case "W":
				case "X":
				case "Y":
				case "Z":
				case "1":
				case "2":
				case "3":
				case "4":
				case "5":
				case "6":
				case "7":
				case "8":
				case "9":
				case "0":
					text3 = text2;
					break;
				case " ":
					text3 = "_";
					break;
				default:
					text3 = "-";
					break;
				}
				text += text3;
			}
			string text4 = cloudSave ? CloudPlayerPath : PlayerPath;
			string path = text4 + Path.DirectorySeparatorChar + text + ".plr";
			string fullPath = FileUtilities.GetFullPath(path, cloudSave);
			if (fullPath.StartsWith("\\\\.\\", StringComparison.Ordinal))
			{
				text += "_";
			}
			if (FileUtilities.Exists(text4 + Path.DirectorySeparatorChar + text + ".plr", cloudSave))
			{
				int num = 2;
				while (FileUtilities.Exists(text4 + Path.DirectorySeparatorChar + text + num + ".plr", cloudSave))
				{
					num++;
				}
				text += num;
			}
			return text4 + Path.DirectorySeparatorChar + text + ".plr";
		}

		public static string GetWorldPathFromName(string worldName, bool cloudSave)
		{
			string text = "";
			for (int i = 0; i < worldName.Length; i++)
			{
				string text2 = worldName.Substring(i, 1);
				string text3 = "";
				switch (text2)
				{
				case "a":
				case "b":
				case "c":
				case "d":
				case "e":
				case "f":
				case "g":
				case "h":
				case "i":
				case "j":
				case "k":
				case "l":
				case "m":
				case "n":
				case "o":
				case "p":
				case "q":
				case "r":
				case "s":
				case "t":
				case "u":
				case "v":
				case "w":
				case "x":
				case "y":
				case "z":
				case "A":
				case "B":
				case "C":
				case "D":
				case "E":
				case "F":
				case "G":
				case "H":
				case "I":
				case "J":
				case "K":
				case "L":
				case "M":
				case "N":
				case "O":
				case "P":
				case "Q":
				case "R":
				case "S":
				case "T":
				case "U":
				case "V":
				case "W":
				case "X":
				case "Y":
				case "Z":
				case "1":
				case "2":
				case "3":
				case "4":
				case "5":
				case "6":
				case "7":
				case "8":
				case "9":
				case "0":
					text3 = text2;
					break;
				case " ":
					text3 = "_";
					break;
				default:
					text3 = "-";
					break;
				}
				text += text3;
			}
			string text4 = cloudSave ? CloudWorldPath : WorldPath;
			string path = text4 + Path.DirectorySeparatorChar + text + ".wld";
			string fullPath = FileUtilities.GetFullPath(path, cloudSave);
			if (fullPath.StartsWith("\\\\.\\", StringComparison.Ordinal))
			{
				text += "_";
			}
			if (FileUtilities.Exists(text4 + Path.DirectorySeparatorChar + text + ".wld", cloudSave))
			{
				int num = 2;
				while (FileUtilities.Exists(text4 + Path.DirectorySeparatorChar + text + num + ".wld", cloudSave))
				{
					num++;
				}
				text += num;
			}
			return text4 + Path.DirectorySeparatorChar + text + ".wld";
		}

		public void autoCreate(string worldSize)
		{
			switch (worldSize)
			{
			case "0":
				autoGen = false;
				break;
			case "1":
				maxTilesX = 4200;
				maxTilesY = 1200;
				autoGen = true;
				break;
			case "2":
				maxTilesX = 6300;
				maxTilesY = 1800;
				autoGen = true;
				break;
			case "3":
				maxTilesX = 8400;
				maxTilesY = 2400;
				autoGen = true;
				break;
			}
		}

		public void NewMOTD(string newMOTD)
		{
			motd = newMOTD;
		}

		public void LoadDedConfig(string configPath)
		{
			if (File.Exists(configPath))
			{
				using (StreamReader streamReader = new StreamReader(configPath))
				{
					string text;
					while ((text = streamReader.ReadLine()) != null)
					{
						try
						{
							if (text.Length > 6 && text.Substring(0, 6).ToLower() == "world=")
							{
								string file = text.Substring(6);
								ActiveWorldFileData = WorldFile.GetAllMetadata(file, false);
							}
							if (text.Length > 5 && text.Substring(0, 5).ToLower() == "port=")
							{
								string value = text.Substring(5);
								try
								{
									int num = Netplay.ListenPort = Convert.ToInt32(value);
								}
								catch
								{
								}
							}
							if (text.Length > 11 && text.Substring(0, 11).ToLower() == "maxplayers=")
							{
								string value2 = text.Substring(11);
								try
								{
									int num2 = maxNetPlayers = Convert.ToInt32(value2);
								}
								catch
								{
								}
							}
							if (text.Length > 11 && text.Substring(0, 9).ToLower() == "priority=" && !Program.LaunchParameters.ContainsKey("-forcepriority"))
							{
								string value3 = text.Substring(9);
								try
								{
									int num3 = Convert.ToInt32(value3);
									if (num3 >= 0 && num3 <= 5)
									{
										Process currentProcess = Process.GetCurrentProcess();
										switch (num3)
										{
										case 0:
											currentProcess.PriorityClass = ProcessPriorityClass.RealTime;
											break;
										case 1:
											currentProcess.PriorityClass = ProcessPriorityClass.High;
											break;
										case 2:
											currentProcess.PriorityClass = ProcessPriorityClass.AboveNormal;
											break;
										case 3:
											currentProcess.PriorityClass = ProcessPriorityClass.Normal;
											break;
										case 4:
											currentProcess.PriorityClass = ProcessPriorityClass.BelowNormal;
											break;
										case 5:
											currentProcess.PriorityClass = ProcessPriorityClass.Idle;
											break;
										}
									}
								}
								catch
								{
								}
							}
							if (text.Length > 9 && text.Substring(0, 9).ToLower() == "password=")
							{
								string text2 = Netplay.ServerPassword = text.Substring(9);
							}
							if (text.Length > 5 && text.Substring(0, 5).ToLower() == "motd=")
							{
								string text3 = motd = text.Substring(5);
							}
							if (text.Length > 5 && text.Substring(0, 5).ToLower() == "lang=")
							{
								string value4 = text.Substring(5);
								Lang.lang = Convert.ToInt32(value4);
							}
							if (text.Length >= 10 && text.Substring(0, 10).ToLower() == "worldpath=")
							{
								string text4 = WorldPath = text.Substring(10);
							}
							if (text.Length >= 10 && text.Substring(0, 10).ToLower() == "worldname=")
							{
								string text5 = worldName = text.Substring(10);
							}
							if (text.Length > 8 && text.Substring(0, 8).ToLower() == "banlist=")
							{
								string text6 = Netplay.BanFilePath = text.Substring(8);
							}
							if (text.Length > 11 && text.Substring(0, 11).ToLower() == "difficulty=")
							{
								string a = text.Substring(11);
								if (a == "0")
								{
									expertMode = false;
								}
								else if (a == "1")
								{
									expertMode = true;
								}
							}
							if (text.Length > 11 && text.Substring(0, 11).ToLower() == "autocreate=")
							{
								switch (text.Substring(11))
								{
								case "0":
									autoGen = false;
									break;
								case "1":
									maxTilesX = 4200;
									maxTilesY = 1200;
									autoGen = true;
									break;
								case "2":
									maxTilesX = 6300;
									maxTilesY = 1800;
									autoGen = true;
									break;
								case "3":
									maxTilesX = 8400;
									maxTilesY = 2400;
									autoGen = true;
									break;
								}
							}
							if (text.Length > 7 && text.Substring(0, 7).ToLower() == "secure=")
							{
								string a2 = text.Substring(7);
								if (a2 == "1")
								{
									Netplay.spamCheck = true;
								}
							}
							if (text.Length > 5 && text.Substring(0, 5).ToLower() == "upnp=")
							{
								string a3 = text.Substring(5);
								if (a3 != "1")
								{
									Netplay.UseUPNP = false;
								}
							}
							if (text.Length > 10 && text.Substring(0, 10).ToLower() == "npcstream=")
							{
								string value5 = text.Substring(10);
								try
								{
									int num4 = npcStreamSpeed = Convert.ToInt32(value5);
								}
								catch
								{
								}
							}
						}
						catch
						{
						}
					}
				}
			}
		}

		public void SetNetPlayers(int mPlayers)
		{
			maxNetPlayers = mPlayers;
		}

		public void SetWorld(string world, bool cloud)
		{
			ActiveWorldFileData = WorldFile.GetAllMetadata(world, cloud);
		}

		public void SetWorldName(string world)
		{
			worldName = world;
		}

		public void EnableAutoShutdown()
		{
			autoShutdown = true;
		}

		[DllImport("user32.dll")]
		public static extern IntPtr FindWindow(string lpClassName, string lpWindowName);

		[DllImport("user32.dll")]
		private static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

		public void AutoPass()
		{
			autoPass = true;
		}

		public void AutoJoin(string IP)
		{
			defaultIP = IP;
			getIP = IP;
			Netplay.SetRemoteIP(defaultIP);
			autoJoin = true;
		}

		public void AutoHost()
		{
			menuMultiplayer = true;
			menuServer = true;
			menuMode = 1;
		}

		public void loadLib(string path)
		{
			libPath = path;
			LoadLibrary(libPath);
		}

		public void DedServ()
		{
			rand = new Random();
			if (autoShutdown)
			{
				string lpWindowName = Console.Title = "terraria" + rand.Next(int.MaxValue);
				IntPtr ıntPtr = FindWindow(null, lpWindowName);
				if (ıntPtr != IntPtr.Zero)
				{
					ShowWindow(ıntPtr, 0);
				}
			}
			else
			{
				Console.Title = "Terraria Mobile Server " + versionNumber2;
			}
			dedServ = true;
			showSplash = false;
			Initialize();
			if (Lang.lang > 1)
			{
				Lang.setLang(true);
			}
			Lang.setLang();
			for (int i = 0; i < 540; i++)
			{
				NPC nPC = new NPC();
				nPC.SetDefaults(i);
				npcName[i] = nPC.name;
			}
			while (worldPathName == null || worldPathName == "")
			{
				bool flag = true;
				while (flag)
				{
					LoadWorlds();
					Console.WriteLine(Language.GetTextValue("CLI.MobileServer", versionNumber2));
					Console.WriteLine("");
					for (int j = 0; j < WorldList.Count; j++)
					{
						Console.WriteLine(j + 1 + "\t\t" + WorldList[j].Name);
					}
					string textValue = Language.GetTextValue("CLI.NewWorld_Command");
					string textValue2 = Language.GetTextValue("CLI.DeleteWorld_Example");
					int num = (Math.Max(newWorldName.Length, textValue2.Length) + 1) / 8 + 1;
					textValue = textValue + new string('\t', num - textValue.Length / 8) + Language.GetTextValue("CLI.NewWorld_Description");
					textValue2 = textValue2 + new string('\t', num - textValue2.Length / 8) + Language.GetTextValue("CLI.DeleteWorld_Description");
					Console.WriteLine(textValue);
					Console.WriteLine(textValue2);
					Console.WriteLine("");
					Console.Write(Language.GetTextValue("CLI.ChooseWorld"));
					string text2 = Console.ReadLine();
					if (text2 == null)
					{
						text2 = "";
					}
					try
					{
						Console.Clear();
					}
					catch
					{
					}
					if (text2.StartsWith(Language.GetTextValue("CLI.DeleteWorld_Command") + " "))
					{
						try
						{
							int length = Language.GetTextValue("CLI.DeleteWorld_Command").Length;
							int num2 = Convert.ToInt32(text2.Substring(length + 1)) - 1;
							if (num2 < WorldList.Count)
							{
								Console.WriteLine(Language.GetTextValue("CLI.MobileServer", versionNumber2));
								Console.WriteLine("");
								Console.WriteLine(Language.GetTextValue("CLI.DeleteConfirmation", WorldList[num2].Name));
								Console.Write("({0}/{1}): ", Language.GetTextValue("CLI.ShortYes"), Language.GetTextValue("CLI.ShortNo"));
								string text3 = Console.ReadLine();
								if (text3.ToLower() == Language.GetTextValue("CLI.ShortYes").ToLower())
								{
									EraseWorld(num2);
								}
							}
						}
						catch
						{
						}
						try
						{
							Console.Clear();
						}
						catch
						{
						}
					}
					else if (text2 == "n" || text2 == "N")
					{
						bool flag2 = true;
						while (flag2)
						{
							Console.WriteLine(Language.GetTextValue("CLI.MobileServer", versionNumber2));
							Console.WriteLine("");
							Console.WriteLine("1\t" + Language.GetTextValue("UI.WorldSizeSmall"));
							Console.WriteLine("2\t" + Language.GetTextValue("UI.WorldSizeMedium"));
							Console.WriteLine("3\t" + Language.GetTextValue("UI.WorldSizeLarge"));
							Console.WriteLine("");
							Console.Write(Language.GetTextValue("CLI.ChooseSize"));
							string value = Console.ReadLine();
							try
							{
								switch (Convert.ToInt32(value))
								{
								case 1:
									maxTilesX = 4200;
									maxTilesY = 1200;
									flag2 = false;
									break;
								case 2:
									maxTilesX = 6400;
									maxTilesY = 1800;
									flag2 = false;
									break;
								case 3:
									maxTilesX = 8400;
									maxTilesY = 2400;
									flag2 = false;
									break;
								}
							}
							catch
							{
							}
							try
							{
								Console.Clear();
							}
							catch
							{
							}
						}
						flag2 = true;
						while (flag2)
						{
							Console.WriteLine(Language.GetTextValue("CLI.MobileServer", versionNumber2));
							Console.WriteLine("");
							Console.WriteLine("1\t" + Language.GetTextValue("UI.Normal"));
							Console.WriteLine("2\t" + Language.GetTextValue("UI.Expert"));
							Console.WriteLine("");
							Console.Write(Language.GetTextValue("CLI.ChooseDifficulty"));
							string value = Console.ReadLine();
							try
							{
								switch (Convert.ToInt32(value))
								{
								case 1:
									expertMode = false;
									flag2 = false;
									break;
								case 2:
									expertMode = true;
									flag2 = false;
									break;
								}
							}
							catch
							{
							}
							try
							{
								Console.Clear();
							}
							catch
							{
							}
						}
						flag2 = true;
						while (flag2)
						{
							Console.WriteLine(Language.GetTextValue("CLI.MobileServer", versionNumber2));
							Console.WriteLine("");
							Console.Write(Language.GetTextValue("CLI.EnterWorldName"));
							newWorldName = Console.ReadLine();
							if (newWorldName != "" && newWorldName != " " && newWorldName != null)
							{
								flag2 = false;
							}
							try
							{
								Console.Clear();
							}
							catch
							{
							}
						}
						worldName = newWorldName;
						ActiveWorldFileData = WorldFile.CreateMetadata(worldName, SocialAPI.Cloud != null && SocialAPI.Cloud.EnabledByDefault, expertMode);
						menuMode = 10;
						serverGenLock = true;
						GenerationProgress generationProgress = new GenerationProgress();
						WorldGen.CreateNewWorld(generationProgress);
						flag2 = false;
						while (menuMode == 10)
						{
							if (oldStatusText != statusText)
							{
								oldStatusText = statusText;
								Console.WriteLine(statusText);
							}
						}
						try
						{
							Console.Clear();
						}
						catch
						{
						}
						while (serverGenLock)
						{
							statusText = string.Format("{0:0.0%} - " + generationProgress.Message + " - {1:0.0%}", generationProgress.TotalProgress, generationProgress.Value);
							if (oldStatusText != statusText)
							{
								oldStatusText = statusText;
								Console.WriteLine(statusText);
							}
						}
					}
					else
					{
						try
						{
							int num3 = Convert.ToInt32(text2);
							num3--;
							if (num3 >= 0 && num3 < WorldList.Count)
							{
								bool flag3 = true;
								while (flag3)
								{
									Console.WriteLine(Language.GetTextValue("CLI.MobileServer", versionNumber2));
									Console.WriteLine("");
									Console.Write(Language.GetTextValue("CLI.SetInitialMaxPlayers"));
									string text4 = Console.ReadLine();
									try
									{
										if (text4 == "")
										{
											text4 = "8";
										}
										int num4 = Convert.ToInt32(text4);
										if (num4 <= 16 && num4 >= 2)
										{
											maxNetPlayers = num4;
											flag3 = false;
										}
										flag3 = false;
									}
									catch
									{
									}
									try
									{
										Console.Clear();
									}
									catch
									{
									}
								}
								flag3 = true;
								while (flag3)
								{
									Console.WriteLine(Language.GetTextValue("CLI.MobileServer", versionNumber2));
									Console.WriteLine("");
									Console.Write(Language.GetTextValue("CLI.SetInitialPort"));
									string text5 = Console.ReadLine();
									try
									{
										if (text5 == "")
										{
											text5 = "7777";
										}
										int num5 = Convert.ToInt32(text5);
										if (num5 <= 65535)
										{
											Netplay.ListenPort = num5;
											flag3 = false;
										}
									}
									catch
									{
									}
									try
									{
										Console.Clear();
									}
									catch
									{
									}
								}
								flag3 = true;
								while (flag3)
								{
									Console.WriteLine(Language.GetTextValue("CLI.MobileServer", versionNumber2));
									Console.WriteLine("");
									Console.Write(Language.GetTextValue("CLI.AutomaticPortForward", Language.GetTextValue("CLI.ShortYes"), Language.GetTextValue("CLI.ShortNo")));
									string text6 = Console.ReadLine();
									try
									{
										if (text6 == "" || text6.ToLower() == Language.GetTextValue("CLI.ShortYes").ToLower() || text6.ToLower() == Language.GetTextValue("CLI.Yes").ToLower())
										{
											Netplay.UseUPNP = true;
											flag3 = false;
										}
										else if (text6.ToLower() == Language.GetTextValue("CLI.ShortNo").ToLower() || text6.ToLower() == Language.GetTextValue("CLI.No").ToLower())
										{
											Netplay.UseUPNP = false;
											flag3 = false;
										}
									}
									catch
									{
									}
									try
									{
										Console.Clear();
									}
									catch
									{
									}
								}
								Console.WriteLine(Language.GetTextValue("CLI.MobileServer", versionNumber2));
								Console.WriteLine("");
								Console.Write(Language.GetTextValue("CLI.EnterServerPassword"));
								Netplay.ServerPassword = Console.ReadLine();
								ActiveWorldFileData = WorldList[num3];
								flag = false;
								try
								{
									Console.Clear();
								}
								catch
								{
								}
							}
						}
						catch
						{
						}
					}
				}
			}
			try
			{
				Console.Clear();
			}
			catch
			{
			}
			WorldGen.serverLoadWorld();
			Console.WriteLine(Language.GetTextValue("CLI.MobileServer", versionNumber2));
			Console.WriteLine("");
			while (!Netplay.IsServerRunning)
			{
				if (AutogenProgress.TotalProgress != 0f)
				{
					statusText = string.Format("{0:0.0%} - " + AutogenProgress.Message + " - {1:0.0%}", AutogenProgress.TotalProgress, AutogenProgress.Value);
				}
				if (oldStatusText != statusText)
				{
					oldStatusText = statusText;
					Console.WriteLine(statusText);
				}
			}
			try
			{
				Console.Clear();
			}
			catch
			{
			}
			Console.WriteLine(Language.GetTextValue("CLI.MobileServer", versionNumber));
			Console.WriteLine("");
			Console.WriteLine(Language.GetTextValue("CLI.ListeningOnPort", Netplay.ListenPort));
			Console.WriteLine(Language.GetTextValue("CLI.HelpHint"));
			Console.WriteLine("");
			Console.Title = "Terraria Mobile Server: " + worldName;
			Stopwatch stopwatch = new Stopwatch();
			if (!autoShutdown)
			{
				startDedInput();
			}
			stopwatch.Start();
			double num6 = 16.666666666666668;
			double num7 = 0.0;
			int num8 = 0;
			Stopwatch stopwatch2 = new Stopwatch();
			stopwatch2.Start();
			while (!Netplay.disconnect)
			{
				double num9 = stopwatch.ElapsedMilliseconds;
				if (num9 + num7 >= num6)
				{
					num8++;
					num7 += num9 - num6;
					stopwatch.Reset();
					stopwatch.Start();
					if (oldStatusText != statusText)
					{
						oldStatusText = statusText;
						Console.WriteLine(statusText);
					}
					if (Netplay.anyClients)
					{
						Update(new GameTime());
					}
					if (Main.OnTick != null)
					{
						Main.OnTick();
					}
					double num10 = (double)stopwatch.ElapsedMilliseconds + num7;
					if (num10 < num6)
					{
						int num11 = (int)(num6 - num10) - 1;
						if (num11 > 1)
						{
							Thread.Sleep(num11 - 1);
							if (!Netplay.anyClients)
							{
								num7 = 0.0;
								Thread.Sleep(10);
							}
						}
					}
				}
				Thread.Sleep(0);
			}
		}

		public static void startDedInput()
		{
			ThreadPool.QueueUserWorkItem(startDedInputCallBack, 1);
		}

		public static void startDedInputCallBack(object threadContext)
		{
			while (!Netplay.disconnect)
			{
				Console.Write(": ");
				string text = Console.ReadLine();
				string text2 = text;
				text = text.ToLower();
				try
				{
					if (text == Language.GetTextValue("CLI.Help_Command"))
					{
						Console.WriteLine(Language.GetTextValue("CLI.AvailableCommands"));
						Console.WriteLine("");
						List<string> list = new List<string>();
						list.Add("Help");
						list.Add("Playing");
						list.Add("Clear");
						list.Add("Exit");
						list.Add("ExitNoSave");
						list.Add("Save");
						list.Add("Kick");
						list.Add("Ban");
						list.Add("Password");
						list.Add("SetPassword");
						list.Add("Version");
						list.Add("Time");
						list.Add("Port");
						list.Add("MaxPlayers");
						list.Add("Say");
						list.Add("MOTD");
						list.Add("SetMOTD");
						list.Add("Dawn");
						list.Add("Noon");
						list.Add("Dusk");
						list.Add("Midnight");
						list.Add("Settle");
						List<string> list2 = list;
						int num = 0;
						for (int i = 0; i < list2.Count; i++)
						{
							string text3 = Language.Exists("CLI." + list2[i] + "_Example") ? Language.GetTextValue("CLI." + list2[i] + "_Example") : Language.GetTextValue("CLI." + list2[i] + "_Command");
							if (text3.Length > num)
							{
								num = text3.Length;
							}
						}
						int num2 = (num + 1) / 8;
						for (int j = 0; j < list2.Count; j++)
						{
							string text4 = Language.Exists("CLI." + list2[j] + "_Example") ? Language.GetTextValue("CLI." + list2[j] + "_Example") : Language.GetTextValue("CLI." + list2[j] + "_Command");
							Console.WriteLine(text4 + new string('\t', num2 - text4.Length / 8) + Language.GetTextValue("CLI." + list2[j] + "_Description"));
						}
					}
					else if (text == Language.GetTextValue("CLI.Settle_Command"))
					{
						if (!Liquid.panicMode)
						{
							Liquid.StartPanic();
						}
						else
						{
							Console.WriteLine(Language.GetTextValue("CLI.WaterIsAlreadySettling"));
						}
					}
					else if (text == Language.GetTextValue("CLI.Dawn_Command"))
					{
						dayTime = true;
						time = 0.0;
						NetMessage.SendData(7);
					}
					else if (text == Language.GetTextValue("CLI.Dusk_Command"))
					{
						dayTime = false;
						time = 0.0;
						NetMessage.SendData(7);
					}
					else if (text == Language.GetTextValue("CLI.Noon_Command"))
					{
						dayTime = true;
						time = 27000.0;
						NetMessage.SendData(7);
					}
					else if (text == Language.GetTextValue("CLI.Midnight_Command"))
					{
						dayTime = false;
						time = 16200.0;
						NetMessage.SendData(7);
					}
					else if (text == Language.GetTextValue("CLI.ExitNoSave_Command"))
					{
						Netplay.disconnect = true;
					}
					else if (text == Language.GetTextValue("CLI.Exit_Command"))
					{
						WorldFile.saveWorld();
						Netplay.disconnect = true;
						SocialAPI.Shutdown();
					}
					else if (text == Language.GetTextValue("CLI.FPS_Command"))
					{
						if (!dedServFPS)
						{
							dedServFPS = true;
							fpsTimer.Reset();
						}
						else
						{
							dedServCount1 = 0;
							dedServCount2 = 0;
							dedServFPS = false;
						}
					}
					else if (text == Language.GetTextValue("CLI.Save_Command"))
					{
						WorldFile.saveWorld();
					}
					else if (text == Language.GetTextValue("CLI.Time_Command"))
					{
						string text5 = "AM";
						double num3 = time;
						if (!dayTime)
						{
							num3 += 54000.0;
						}
						num3 = num3 / 86400.0 * 24.0;
						double num4 = 7.5;
						num3 = num3 - num4 - 12.0;
						if (num3 < 0.0)
						{
							num3 += 24.0;
						}
						if (num3 >= 12.0)
						{
							text5 = "PM";
						}
						int num5 = (int)num3;
						double num6 = num3 - (double)num5;
						num6 = (int)(num6 * 60.0);
						string text6 = string.Concat(num6);
						if (num6 < 10.0)
						{
							text6 = "0" + text6;
						}
						if (num5 > 12)
						{
							num5 -= 12;
						}
						if (num5 == 0)
						{
							num5 = 12;
						}
						Console.WriteLine(Language.GetTextValue("CLI.Time", num5 + ":" + text6 + " " + text5));
					}
					else if (text == Language.GetTextValue("CLI.MaxPlayers_Command"))
					{
						Console.WriteLine(Language.GetTextValue("CLI.PlayerLimit", maxNetPlayers));
					}
					else if (text == Language.GetTextValue("CLI.Port_Command"))
					{
						Console.WriteLine(Language.GetTextValue("CLI.Port", Netplay.ListenPort));
					}
					else if (text == Language.GetTextValue("CLI.Version_Command"))
					{
						Console.WriteLine(Language.GetTextValue("CLI.MobileServer", versionNumber));
					}
					else if (text == Language.GetTextValue("CLI.Clear_Command"))
					{
						try
						{
							Console.Clear();
						}
						catch
						{
						}
					}
					else if (text == Language.GetTextValue("CLI.Playing_Command"))
					{
						int num7 = 0;
						for (int k = 0; k < 16; k++)
						{
							if (player[k].active)
							{
								num7++;
								Console.WriteLine(string.Concat(player[k].name, " (", Netplay.Clients[k].Socket.GetRemoteAddress(), ")"));
							}
						}
						switch (num7)
						{
						case 0:
							Console.WriteLine(Language.GetTextValue("CLI.NoPlayers"));
							break;
						case 1:
							Console.WriteLine(Language.GetTextValue("CLI.OnePlayerConnected"));
							break;
						default:
							Console.WriteLine(Language.GetTextValue("CLI.PlayersConnected", num7));
							break;
						}
					}
					else if (!(text == ""))
					{
						if (text == Language.GetTextValue("CLI.MOTD_Command"))
						{
							if (motd == "")
							{
								Console.WriteLine(Language.GetTextValue("CLI.NoMOTD", worldName));
							}
							else
							{
								Console.WriteLine(Language.GetTextValue("CLI.MOTD", motd));
							}
						}
						else if (text.StartsWith(Language.GetTextValue("CLI.SetMOTD_Command") + " "))
						{
							string text7 = motd = text2.Substring(Language.GetTextValue("CLI.SetMOTD_Command").Length + 1);
						}
						else if (text == Language.GetTextValue("CLI.Password_Command"))
						{
							if (Netplay.ServerPassword == "")
							{
								Console.WriteLine(Language.GetTextValue("CLI.NoPassword"));
							}
							else
							{
								Console.WriteLine(Language.GetTextValue("CLI.Password", Netplay.ServerPassword));
							}
						}
						else if (text.StartsWith(Language.GetTextValue("CLI.SetPassword_Command") + " "))
						{
							string text8 = text2.Substring(Language.GetTextValue("CLI.SetPassword_Command").Length + 1);
							if (text8 == "")
							{
								Netplay.ServerPassword = "";
								Console.WriteLine(Language.GetTextValue("CLI.PasswordDisabled"));
							}
							else
							{
								Netplay.ServerPassword = text8;
								Console.WriteLine(Language.GetTextValue("CLI.PasswordSet", Netplay.ServerPassword));
							}
						}
						else if (text == Language.GetTextValue("CLI.Say_Command"))
						{
							Console.WriteLine(Language.GetTextValue("CLI.Say_Usage"));
						}
						else if (text.StartsWith(Language.GetTextValue("CLI.Say_Command") + " "))
						{
							int length = Language.GetTextValue("CLI.Say_Command").Length;
							if (text.Length <= length + 1)
							{
								Console.WriteLine(Language.GetTextValue("CLI.Say_Usage"));
							}
							else
							{
								string arg = text2.Substring(length + 1);
								Console.WriteLine(Language.GetTextValue("CLI.ServerMessage", arg));
								NetMessage.SendData(25, -1, -1, Language.GetTextValue("CLI.ServerMessage", arg), 16, 255f, 240f, 20f);
							}
						}
						else if (text == Language.GetTextValue("CLI.Kick_Command"))
						{
							Console.WriteLine(Language.GetTextValue("CLI.Kick_Usage"));
						}
						else if (text.StartsWith(Language.GetTextValue("CLI.Kick_Command") + " "))
						{
							int length2 = Language.GetTextValue("CLI.Kick_Command").Length;
							if (text.Length <= length2 + 1)
							{
								Console.WriteLine(Language.GetTextValue("CLI.Kick_Usage"));
							}
							else
							{
								string text9 = text.Substring(length2 + 1);
								text9 = text9.ToLower();
								for (int l = 0; l < 16; l++)
								{
									if (player[l].active && player[l].name.ToLower() == text9)
									{
										NetMessage.SendData(2, l, -1, Language.GetTextValue("CLI.KickMessage"));
									}
								}
							}
						}
						else if (text == Language.GetTextValue("CLI.Ban_Command"))
						{
							Console.WriteLine(Language.GetTextValue("CLI.Ban_Usage"));
						}
						else if (text.StartsWith(Language.GetTextValue("CLI.Ban_Command") + " "))
						{
							int length3 = Language.GetTextValue("CLI.Ban_Command").Length;
							if (text.Length <= length3 + 1)
							{
								Console.WriteLine(Language.GetTextValue("CLI.Ban_Usage"));
							}
							else
							{
								string text10 = text.Substring(4);
								text10 = text10.ToLower();
								for (int m = 0; m < 16; m++)
								{
									if (player[m].active && player[m].name.ToLower() == text10)
									{
										Netplay.AddBan(m);
										NetMessage.SendData(2, m, -1, Language.GetTextValue("CLI.BanMessage"));
									}
								}
							}
						}
						else
						{
							Console.WriteLine(Language.GetTextValue("CLI.InvalidCommand"));
						}
					}
				}
				catch (Exception ex)
				{
					Console.WriteLine(ex.ToString());
				}
			}
		}

		public static void Sundialing()
		{
			if (sundialCooldown == 0)
			{
				if (netMode == 1)
				{
					NetMessage.SendData(51, -1, -1, "", myPlayer, 3f);
					return;
				}
				fastForwardTime = true;
				sundialCooldown = 8;
				NetMessage.SendData(7);
			}
		}

		public static void UpdateSundial()
		{
			if (fastForwardTime)
			{
				dayRate = 60;
			}
			else
			{
				dayRate = 1;
			}
		}

		public Main()
		{
			instance = this;
		}

		protected void SetTitle()
		{
		}

		public static void InitLifeBytes()
		{
			NPC nPC = new NPC();
			for (int i = -65; i < 540; i++)
			{
				if (i != 0)
				{
					nPC.netDefaults(i);
					if (nPC.lifeMax > 32767 || nPC.boss)
					{
						npcLifeBytes[i] = 4;
					}
					else if (nPC.lifeMax > 127)
					{
						npcLifeBytes[i] = 2;
					}
					else
					{
						npcLifeBytes[i] = 1;
					}
				}
			}
			nPC = null;
		}

		private static void SetTileValue()
		{
			tileValue[28] = 100;
			tileValue[7] = 200;
			tileValue[166] = 210;
			tileValue[6] = 220;
			tileValue[167] = 230;
			tileValue[9] = 240;
			tileValue[168] = 250;
			tileValue[37] = 300;
			tileValue[22] = 310;
			tileValue[204] = 320;
			tileValue[407] = 350;
			tileValue[8] = 400;
			tileValue[169] = 410;
			tileValue[21] = 500;
			tileValue[107] = 600;
			tileValue[221] = 610;
			tileValue[108] = 620;
			tileValue[222] = 630;
			tileValue[111] = 640;
			tileValue[223] = 650;
			tileValue[211] = 700;
			tileValue[12] = 800;
			tileValue[236] = 810;
		}

		protected override void Initialize()
		{
			netMode = 2;
			LocalFavoriteData.Load();
			CloudFavoritesData.Load();
			TileObjectData.Initialize();
			Animation.Initialize();
			Chest.Initialize();
			Wiring.Initialize();
			Framing.Initialize();
			ItemRarity.Initialize();
			TileEntity.InitializeAll();
			InitializeItemAnimations();
			Mount.Initialize();
			Minecart.Initialize();
			WorldGen.RandomizeBackgrounds();
			WorldGen.RandomizeCaveBackgrounds();
			WorldGen.RandomizeMoonState();
			bgAlpha[0] = 1f;
			bgAlpha2[0] = 1f;
			invBottom = 258;
			for (int i = 0; i < 651; i++)
			{
				projFrames[i] = 1;
			}
			projFrames[643] = 8;
			projFrames[566] = 4;
			projFrames[565] = 4;
			projFrames[525] = 5;
			projFrames[519] = 4;
			projFrames[509] = 2;
			projFrames[485] = 5;
			projFrames[492] = 8;
			projFrames[500] = 4;
			projFrames[499] = 12;
			projFrames[518] = 4;
			projFrames[585] = 4;
			projFrames[593] = 4;
			projFrames[595] = 28;
			projFrames[596] = 4;
			projFrames[612] = 5;
			projFrames[613] = 4;
			projFrames[614] = 4;
			projFrames[615] = 7;
			projFrames[623] = 12;
			projFrames[633] = 5;
			projFrames[645] = 7;
			projFrames[650] = 4;
			projFrames[384] = 6;
			projFrames[385] = 3;
			projFrames[386] = 6;
			projFrames[390] = 11;
			projFrames[391] = 11;
			projFrames[392] = 11;
			projFrames[393] = 15;
			projFrames[394] = 15;
			projFrames[395] = 15;
			projFrames[398] = 10;
			projFrames[407] = 6;
			projFrames[408] = 2;
			projFrames[409] = 3;
			projFrames[387] = 3;
			projFrames[388] = 3;
			projFrames[334] = 11;
			projFrames[324] = 10;
			projFrames[351] = 2;
			projFrames[349] = 5;
			projFrames[423] = 4;
			projFrames[435] = 4;
			projFrames[436] = 4;
			projFrames[439] = 6;
			projFrames[443] = 4;
			projFrames[447] = 4;
			projFrames[448] = 3;
			projFrames[450] = 5;
			projFrames[454] = 2;
			projFrames[456] = 4;
			projFrames[459] = 3;
			projFrames[462] = 5;
			projFrames[465] = 4;
			projFrames[467] = 4;
			projFrames[468] = 4;
			projFrames[533] = 21;
			projFrames[535] = 12;
			projFrames[539] = 4;
			projFrames[575] = 4;
			projFrames[574] = 2;
			projFrames[634] = 4;
			projFrames[635] = 4;
			projFrames[353] = 14;
			projFrames[346] = 2;
			projFrames[347] = 2;
			projFrames[335] = 4;
			projFrames[344] = 3;
			projFrames[337] = 5;
			projFrames[317] = 8;
			projFrames[321] = 3;
			projFrames[308] = 10;
			projFrames[316] = 4;
			projFrames[275] = 2;
			projFrames[276] = 2;
			projFrames[254] = 5;
			projFrames[307] = 2;
			projFrames[72] = 4;
			projFrames[86] = 4;
			projFrames[87] = 4;
			projFrames[102] = 2;
			projFrames[111] = 8;
			projFrames[112] = 3;
			projFrames[127] = 16;
			projFrames[175] = 2;
			projFrames[181] = 4;
			projFrames[189] = 4;
			projFrames[191] = 18;
			projFrames[192] = 18;
			projFrames[193] = 18;
			projFrames[194] = 18;
			projFrames[190] = 4;
			projFrames[198] = 4;
			projFrames[199] = 8;
			projFrames[200] = 10;
			projFrames[206] = 5;
			projFrames[208] = 5;
			projFrames[209] = 12;
			projFrames[210] = 12;
			projFrames[211] = 10;
			projFrames[221] = 3;
			projFrames[237] = 4;
			projFrames[238] = 6;
			projFrames[221] = 3;
			projFrames[228] = 5;
			projFrames[229] = 4;
			projFrames[236] = 13;
			projFrames[243] = 4;
			projFrames[244] = 6;
			projFrames[249] = 5;
			projFrames[252] = 4;
			projFrames[266] = 6;
			projFrames[268] = 8;
			projFrames[269] = 7;
			projFrames[270] = 3;
			projFrames[313] = 12;
			projFrames[314] = 13;
			projFrames[319] = 11;
			projFrames[373] = 3;
			projFrames[375] = 8;
			projFrames[377] = 9;
			projFrames[379] = 4;
			projFrames[380] = 4;
			projFrames[601] = 2;
			projFrames[602] = 4;
			projPet[492] = true;
			projPet[499] = true;
			projPet[319] = true;
			projPet[334] = true;
			projPet[324] = true;
			projPet[266] = true;
			projPet[313] = true;
			projPet[314] = true;
			projPet[317] = true;
			projPet[175] = true;
			projPet[111] = true;
			projPet[112] = true;
			projPet[127] = true;
			projPet[191] = true;
			projPet[192] = true;
			projPet[193] = true;
			projPet[194] = true;
			projPet[197] = true;
			projPet[198] = true;
			projPet[199] = true;
			projPet[200] = true;
			projPet[208] = true;
			projPet[209] = true;
			projPet[210] = true;
			projPet[211] = true;
			projPet[236] = true;
			projPet[268] = true;
			projPet[269] = true;
			projPet[353] = true;
			projPet[373] = true;
			projPet[375] = true;
			projPet[377] = true;
			projPet[380] = true;
			projPet[387] = true;
			projPet[388] = true;
			projPet[390] = true;
			projPet[391] = true;
			projPet[392] = true;
			projPet[393] = true;
			projPet[394] = true;
			projPet[395] = true;
			projPet[398] = true;
			projPet[407] = true;
			projPet[423] = true;
			projPet[533] = true;
			projPet[613] = true;
			projPet[623] = true;
			projPet[625] = true;
			projPet[626] = true;
			projPet[627] = true;
			projPet[628] = true;
			tileLighted[237] = true;
			tileLighted[27] = true;
			tileLighted[381] = true;
			tileLighted[184] = true;
			slimeRainNPC[1] = true;
			debuff[158] = true;
			debuff[160] = true;
			debuff[20] = true;
			debuff[21] = true;
			debuff[22] = true;
			debuff[23] = true;
			debuff[24] = true;
			debuff[25] = true;
			debuff[28] = true;
			debuff[30] = true;
			debuff[31] = true;
			debuff[32] = true;
			debuff[33] = true;
			debuff[34] = true;
			debuff[35] = true;
			debuff[36] = true;
			debuff[37] = true;
			debuff[38] = true;
			debuff[39] = true;
			debuff[44] = true;
			debuff[46] = true;
			debuff[47] = true;
			debuff[67] = true;
			debuff[68] = true;
			debuff[69] = true;
			debuff[70] = true;
			debuff[80] = true;
			debuff[86] = true;
			debuff[87] = true;
			debuff[88] = true;
			debuff[89] = true;
			debuff[94] = true;
			debuff[103] = true;
			debuff[119] = true;
			debuff[120] = true;
			debuff[137] = true;
			debuff[145] = true;
			debuff[146] = true;
			debuff[147] = true;
			debuff[148] = true;
			debuff[149] = true;
			debuff[156] = true;
			debuff[157] = true;
			debuff[163] = true;
			debuff[164] = true;
			debuff[144] = true;
			pvpBuff[20] = true;
			pvpBuff[24] = true;
			pvpBuff[31] = true;
			pvpBuff[39] = true;
			pvpBuff[44] = true;
			pvpBuff[20] = true;
			pvpBuff[69] = true;
			pvpBuff[103] = true;
			pvpBuff[119] = true;
			pvpBuff[120] = true;
			pvpBuff[137] = true;
			meleeBuff[71] = true;
			meleeBuff[73] = true;
			meleeBuff[74] = true;
			meleeBuff[75] = true;
			meleeBuff[76] = true;
			meleeBuff[77] = true;
			meleeBuff[78] = true;
			meleeBuff[79] = true;
			buffNoSave[20] = true;
			buffNoSave[22] = true;
			buffNoSave[23] = true;
			buffNoSave[24] = true;
			buffNoSave[28] = true;
			buffNoSave[30] = true;
			buffNoSave[31] = true;
			buffNoSave[34] = true;
			buffNoSave[35] = true;
			buffNoSave[37] = true;
			buffNoSave[38] = true;
			buffNoSave[39] = true;
			buffNoSave[43] = true;
			buffNoSave[44] = true;
			buffNoSave[46] = true;
			buffNoSave[47] = true;
			buffNoSave[48] = true;
			buffNoSave[58] = true;
			buffNoSave[59] = true;
			buffNoSave[60] = true;
			buffNoSave[62] = true;
			buffNoSave[63] = true;
			buffNoSave[64] = true;
			buffNoSave[67] = true;
			buffNoSave[68] = true;
			buffNoSave[69] = true;
			buffNoSave[70] = true;
			buffNoSave[72] = true;
			buffNoSave[80] = true;
			buffNoSave[87] = true;
			buffNoSave[158] = true;
			buffNoSave[146] = true;
			buffNoSave[147] = true;
			buffNoSave[88] = true;
			buffNoSave[89] = true;
			buffNoSave[94] = true;
			buffNoSave[95] = true;
			buffNoSave[96] = true;
			buffNoSave[97] = true;
			buffNoSave[98] = true;
			buffNoSave[99] = true;
			buffNoSave[100] = true;
			buffNoSave[103] = true;
			buffNoSave[118] = true;
			buffNoSave[138] = true;
			buffNoSave[167] = true;
			buffNoSave[166] = true;
			buffNoSave[184] = true;
			buffNoSave[185] = true;
			buffNoSave[119] = true;
			buffNoSave[120] = true;
			buffNoSave[90] = true;
			buffNoSave[125] = true;
			buffNoSave[126] = true;
			buffNoSave[128] = true;
			buffNoSave[129] = true;
			buffNoSave[130] = true;
			buffNoSave[131] = true;
			buffNoSave[132] = true;
			buffNoSave[133] = true;
			buffNoSave[134] = true;
			buffNoSave[135] = true;
			buffNoSave[139] = true;
			buffNoSave[140] = true;
			buffNoSave[141] = true;
			buffNoSave[142] = true;
			buffNoSave[143] = true;
			buffNoSave[137] = true;
			buffNoSave[144] = true;
			buffNoSave[161] = true;
			buffNoSave[162] = true;
			buffNoSave[163] = true;
			buffNoSave[164] = true;
			buffNoSave[168] = true;
			buffNoSave[170] = true;
			buffNoSave[171] = true;
			buffNoSave[172] = true;
			buffNoSave[182] = true;
			buffNoSave[187] = true;
			buffNoSave[188] = true;
			for (int j = 173; j <= 181; j++)
			{
				buffNoSave[j] = true;
			}
			buffNoTimeDisplay[19] = true;
			buffNoTimeDisplay[27] = true;
			buffNoTimeDisplay[28] = true;
			buffNoTimeDisplay[34] = true;
			buffNoTimeDisplay[37] = true;
			buffNoTimeDisplay[38] = true;
			buffNoTimeDisplay[40] = true;
			buffNoTimeDisplay[41] = true;
			buffNoTimeDisplay[42] = true;
			buffNoTimeDisplay[43] = true;
			buffNoTimeDisplay[45] = true;
			buffNoTimeDisplay[49] = true;
			buffNoTimeDisplay[60] = true;
			buffNoTimeDisplay[62] = true;
			buffNoTimeDisplay[64] = true;
			buffNoTimeDisplay[68] = true;
			buffNoTimeDisplay[81] = true;
			buffNoTimeDisplay[82] = true;
			buffNoTimeDisplay[83] = true;
			buffNoTimeDisplay[90] = true;
			buffNoTimeDisplay[95] = true;
			buffNoTimeDisplay[96] = true;
			buffNoTimeDisplay[97] = true;
			buffNoTimeDisplay[98] = true;
			buffNoTimeDisplay[99] = true;
			buffNoTimeDisplay[100] = true;
			buffNoTimeDisplay[101] = true;
			buffNoTimeDisplay[102] = true;
			buffNoTimeDisplay[118] = true;
			buffNoTimeDisplay[138] = true;
			buffNoTimeDisplay[167] = true;
			buffNoTimeDisplay[166] = true;
			buffNoTimeDisplay[184] = true;
			buffNoTimeDisplay[185] = true;
			buffNoTimeDisplay[125] = true;
			buffNoTimeDisplay[126] = true;
			buffNoTimeDisplay[128] = true;
			buffNoTimeDisplay[129] = true;
			buffNoTimeDisplay[130] = true;
			buffNoTimeDisplay[131] = true;
			buffNoTimeDisplay[132] = true;
			buffNoTimeDisplay[133] = true;
			buffNoTimeDisplay[134] = true;
			buffNoTimeDisplay[135] = true;
			buffNoTimeDisplay[136] = true;
			buffNoTimeDisplay[139] = true;
			buffNoTimeDisplay[140] = true;
			buffNoTimeDisplay[141] = true;
			buffNoTimeDisplay[142] = true;
			buffNoTimeDisplay[143] = true;
			buffNoTimeDisplay[137] = true;
			buffNoTimeDisplay[161] = true;
			buffNoTimeDisplay[162] = true;
			buffNoTimeDisplay[163] = true;
			buffNoTimeDisplay[168] = true;
			buffNoTimeDisplay[170] = true;
			buffNoTimeDisplay[171] = true;
			buffNoTimeDisplay[172] = true;
			buffNoTimeDisplay[182] = true;
			buffNoTimeDisplay[165] = true;
			buffNoTimeDisplay[186] = true;
			buffNoTimeDisplay[187] = true;
			buffNoTimeDisplay[188] = true;
			persistentBuff[71] = true;
			persistentBuff[73] = true;
			persistentBuff[74] = true;
			persistentBuff[75] = true;
			persistentBuff[76] = true;
			persistentBuff[77] = true;
			persistentBuff[78] = true;
			persistentBuff[79] = true;
			vanityPet[40] = true;
			vanityPet[41] = true;
			vanityPet[42] = true;
			vanityPet[45] = true;
			vanityPet[50] = true;
			vanityPet[51] = true;
			vanityPet[52] = true;
			vanityPet[53] = true;
			vanityPet[54] = true;
			vanityPet[55] = true;
			vanityPet[56] = true;
			vanityPet[61] = true;
			vanityPet[154] = true;
			vanityPet[65] = true;
			vanityPet[66] = true;
			vanityPet[81] = true;
			vanityPet[82] = true;
			vanityPet[84] = true;
			vanityPet[85] = true;
			vanityPet[91] = true;
			vanityPet[92] = true;
			vanityPet[127] = true;
			vanityPet[136] = true;
			lightPet[19] = true;
			lightPet[155] = true;
			lightPet[27] = true;
			lightPet[101] = true;
			lightPet[102] = true;
			lightPet[57] = true;
			lightPet[190] = true;
			lightPet[152] = true;
			tileFlame[4] = true;
			tileFlame[33] = true;
			tileFlame[34] = true;
			tileFlame[35] = true;
			tileFlame[42] = true;
			tileFlame[49] = true;
			tileFlame[93] = true;
			tileFlame[98] = true;
			tileFlame[100] = true;
			tileFlame[173] = true;
			tileFlame[174] = true;
			tileFlame[372] = true;
			tileRope[213] = true;
			tileRope[214] = true;
			tileRope[353] = true;
			tileRope[365] = true;
			tileRope[366] = true;
			tilePile[330] = true;
			tilePile[331] = true;
			tilePile[332] = true;
			tilePile[333] = true;
			for (int k = 0; k < 540; k++)
			{
				npcCatchable[k] = false;
			}
			npcCatchable[46] = true;
			npcCatchable[55] = true;
			npcCatchable[74] = true;
			npcCatchable[148] = true;
			npcCatchable[149] = true;
			npcCatchable[297] = true;
			npcCatchable[298] = true;
			npcCatchable[299] = true;
			npcCatchable[300] = true;
			npcCatchable[355] = true;
			npcCatchable[356] = true;
			npcCatchable[357] = true;
			npcCatchable[358] = true;
			npcCatchable[359] = true;
			npcCatchable[360] = true;
			npcCatchable[361] = true;
			npcCatchable[362] = true;
			npcCatchable[363] = true;
			npcCatchable[364] = true;
			npcCatchable[365] = true;
			npcCatchable[366] = true;
			npcCatchable[367] = true;
			npcCatchable[374] = true;
			npcCatchable[377] = true;
			npcCatchable[539] = true;
			npcCatchable[538] = true;
			npcCatchable[484] = true;
			npcCatchable[485] = true;
			npcCatchable[486] = true;
			npcCatchable[487] = true;
			for (int l = 442; l <= 448; l++)
			{
				npcCatchable[l] = true;
			}
			SetTileValue();
			tileSpelunker[6] = true;
			tileSpelunker[7] = true;
			tileSpelunker[8] = true;
			tileSpelunker[9] = true;
			tileSpelunker[12] = true;
			tileSpelunker[21] = true;
			tileSpelunker[28] = true;
			tileSpelunker[107] = true;
			tileSpelunker[108] = true;
			tileSpelunker[111] = true;
			tileSpelunker[63] = true;
			tileSpelunker[64] = true;
			tileSpelunker[65] = true;
			tileSpelunker[66] = true;
			tileSpelunker[67] = true;
			tileSpelunker[68] = true;
			tileSpelunker[166] = true;
			tileSpelunker[167] = true;
			tileSpelunker[168] = true;
			tileSpelunker[169] = true;
			tileSpelunker[178] = true;
			tileSpelunker[211] = true;
			tileSpelunker[221] = true;
			tileSpelunker[222] = true;
			tileSpelunker[223] = true;
			tileSpelunker[236] = true;
			tileSpelunker[37] = true;
			tileSpelunker[407] = true;
			tileSpelunker[227] = true;
			SetupTileMerge();
			tileSolid[379] = true;
			tileSolid[371] = true;
			tileMergeDirt[371] = true;
			tileBlockLight[371] = true;
			tileBouncy[371] = true;
			tileFrameImportant[377] = true;
			tileFrameImportant[373] = true;
			tileFrameImportant[375] = true;
			tileFrameImportant[374] = true;
			tileLighted[372] = true;
			tileFrameImportant[372] = true;
			tileWaterDeath[372] = true;
			tileLavaDeath[372] = true;
			tileSolid[357] = true;
			tileBrick[357] = true;
			tileSolid[408] = true;
			tileMergeDirt[408] = true;
			tileBrick[408] = true;
			tileSolid[409] = true;
			tileBrick[409] = true;
			tileSolid[415] = true;
			tileBrick[415] = true;
			tileLighted[415] = true;
			tileSolid[416] = true;
			tileBrick[416] = true;
			tileLighted[416] = true;
			tileSolid[417] = true;
			tileBrick[417] = true;
			tileLighted[417] = true;
			tileSolid[418] = true;
			tileBrick[418] = true;
			tileLighted[418] = true;
			tileBrick[37] = true;
			tileBrick[117] = true;
			tileBrick[25] = true;
			tileBrick[203] = true;
			tileSolid[232] = true;
			tileSolid[311] = true;
			tileSolid[312] = true;
			tileSolid[313] = true;
			tileMergeDirt[311] = true;
			tileSolid[315] = true;
			tileMergeDirt[315] = true;
			tileSolid[321] = true;
			tileSolid[322] = true;
			tileBlockLight[321] = true;
			tileBlockLight[322] = true;
			tileMergeDirt[321] = true;
			tileMergeDirt[322] = true;
			tileBrick[321] = true;
			tileBrick[322] = true;
			tileShine[239] = 1100;
			tileSolid[239] = true;
			tileSolidTop[239] = true;
			tileSolid[380] = true;
			tileSolidTop[380] = true;
			tileFrameImportant[358] = true;
			tileFrameImportant[359] = true;
			tileFrameImportant[360] = true;
			tileFrameImportant[361] = true;
			tileFrameImportant[362] = true;
			tileFrameImportant[363] = true;
			tileFrameImportant[364] = true;
			tileFrameImportant[391] = true;
			tileLighted[391] = true;
			tileFrameImportant[392] = true;
			tileFrameImportant[393] = true;
			tileFrameImportant[394] = true;
			tileFrameImportant[356] = true;
			tileFrameImportant[334] = true;
			tileFrameImportant[300] = true;
			tileFrameImportant[301] = true;
			tileFrameImportant[302] = true;
			tileFrameImportant[303] = true;
			tileFrameImportant[304] = true;
			tileFrameImportant[305] = true;
			tileFrameImportant[306] = true;
			tileFrameImportant[307] = true;
			tileFrameImportant[308] = true;
			tileFrameImportant[354] = true;
			tileFrameImportant[355] = true;
			tileFrameImportant[324] = true;
			tileObsidianKill[324] = true;
			tileLavaDeath[324] = true;
			tileFrameImportant[283] = true;
			tileFrameImportant[288] = true;
			tileFrameImportant[289] = true;
			tileFrameImportant[290] = true;
			tileFrameImportant[291] = true;
			tileFrameImportant[292] = true;
			tileFrameImportant[293] = true;
			tileFrameImportant[294] = true;
			tileFrameImportant[295] = true;
			tileFrameImportant[296] = true;
			tileFrameImportant[297] = true;
			tileFrameImportant[316] = true;
			tileFrameImportant[317] = true;
			tileFrameImportant[318] = true;
			tileLargeFrames[284] = 1;
			wallHouse[224] = true;
			wallLargeFrames[224] = 2;
			wallHouse[60] = true;
			tileLargeFrames[409] = 1;
			tileFrameImportant[410] = true;
			wallHouse[173] = true;
			wallHouse[183] = true;
			wallHouse[179] = true;
			wallLargeFrames[179] = 1;
			tileSolid[367] = true;
			tileBlockLight[367] = true;
			tileMergeDirt[367] = true;
			tileSolid[357] = true;
			tileBlockLight[357] = true;
			tileLargeFrames[357] = 1;
			tileBlendAll[357] = true;
			wallHouse[184] = true;
			wallHouse[181] = true;
			tileSolid[368] = true;
			tileBlockLight[368] = true;
			tileMergeDirt[368] = true;
			tileSolid[369] = true;
			tileBlockLight[369] = true;
			tileBrick[369] = true;
			tileMergeDirt[369] = true;
			wallHouse[186] = true;
			tileLargeFrames[325] = 1;
			tileSolid[325] = true;
			tileBlockLight[325] = true;
			wallLargeFrames[146] = 1;
			wallLargeFrames[147] = 1;
			wallLargeFrames[167] = 1;
			wallLargeFrames[185] = 2;
			tileSolid[326] = true;
			tileBlockLight[326] = true;
			tileSolid[327] = true;
			tileBlockLight[327] = true;
			tileSolid[345] = true;
			tileBlockLight[345] = true;
			tileLighted[327] = true;
			tileSolid[328] = true;
			tileBrick[328] = true;
			tileSolid[329] = true;
			tileBrick[329] = true;
			tileBlockLight[329] = true;
			tileLighted[336] = true;
			tileLighted[340] = true;
			tileLighted[341] = true;
			tileLighted[342] = true;
			tileLighted[343] = true;
			tileLighted[344] = true;
			tileLighted[349] = true;
			tileSolid[284] = true;
			tileBlockLight[284] = true;
			tileSolid[346] = true;
			tileBlockLight[346] = true;
			tileLighted[346] = true;
			tileShine[346] = 2000;
			tileShine2[346] = true;
			tileBrick[346] = true;
			tileMergeDirt[346] = true;
			tileSolid[347] = true;
			tileBlockLight[347] = true;
			tileLighted[347] = true;
			tileShine[347] = 1900;
			tileShine2[347] = true;
			tileBrick[347] = true;
			tileMergeDirt[347] = true;
			tileSolid[348] = true;
			tileBlockLight[348] = true;
			tileLighted[348] = true;
			tileShine[348] = 1800;
			tileShine2[348] = true;
			tileBrick[348] = true;
			tileMergeDirt[348] = true;
			tileSolid[350] = true;
			tileBlockLight[350] = true;
			tileLighted[350] = true;
			tileBrick[350] = true;
			tileMergeDirt[350] = true;
			tileGlowMask[350] = 94;
			tileGlowMask[390] = 130;
			tileGlowMask[381] = 126;
			tileGlowMask[370] = 111;
			tileGlowMask[391] = 131;
			tileGlowMask[410] = 201;
			tileSolid[370] = true;
			tileBlockLight[370] = true;
			tileLighted[370] = true;
			tileShine[370] = 1900;
			tileShine2[370] = true;
			tileBrick[370] = true;
			tileMergeDirt[370] = true;
			tileContainer[21] = true;
			tileContainer[88] = true;
			tileSign[55] = true;
			tileSign[85] = true;
			tileSolid[383] = true;
			tileBrick[383] = true;
			tileBlockLight[383] = true;
			tileSolid[385] = true;
			tileBrick[385] = true;
			tileBlockLight[385] = true;
			tileSolid[396] = true;
			tileBlockLight[396] = true;
			tileSolid[397] = true;
			tileBlockLight[397] = true;
			tileSolid[399] = true;
			tileBlockLight[399] = true;
			tileSolid[401] = true;
			tileBlockLight[401] = true;
			tileSolid[398] = true;
			tileBlockLight[398] = true;
			tileSolid[400] = true;
			tileBlockLight[400] = true;
			tileSolid[402] = true;
			tileBlockLight[402] = true;
			tileSolid[403] = true;
			tileBlockLight[403] = true;
			tileSolid[404] = true;
			tileBlockLight[404] = true;
			tileSolid[407] = true;
			tileBlockLight[407] = true;
			tileShine2[407] = true;
			tileShine[407] = 1000;
			tileFrameImportant[36] = true;
			tileFrameImportant[275] = true;
			tileFrameImportant[276] = true;
			tileFrameImportant[277] = true;
			tileFrameImportant[278] = true;
			tileFrameImportant[279] = true;
			tileFrameImportant[280] = true;
			tileFrameImportant[281] = true;
			tileFrameImportant[282] = true;
			tileFrameImportant[285] = true;
			tileFrameImportant[286] = true;
			tileFrameImportant[414] = true;
			tileFrameImportant[413] = true;
			tileFrameImportant[309] = true;
			tileFrameImportant[310] = true;
			tileFrameImportant[339] = true;
			tileLighted[286] = true;
			tileLighted[302] = true;
			tileFrameImportant[298] = true;
			tileFrameImportant[299] = true;
			tileSolid[170] = true;
			tileFrameImportant[171] = true;
			tileLighted[171] = true;
			tileFrameImportant[247] = true;
			tileFrameImportant[245] = true;
			tileFrameImportant[246] = true;
			tileFrameImportant[239] = true;
			tileFrameImportant[240] = true;
			tileFrameImportant[241] = true;
			tileFrameImportant[242] = true;
			tileFrameImportant[243] = true;
			tileFrameImportant[244] = true;
			tileFrameImportant[254] = true;
			tileSolid[221] = true;
			tileBlockLight[221] = true;
			tileMergeDirt[221] = true;
			tileLighted[96] = true;
			tileMergeDirt[250] = true;
			tileSolid[272] = true;
			tileBlockLight[272] = true;
			tileSolid[229] = true;
			tileBlockLight[229] = true;
			tileMergeDirt[229] = true;
			tileSolid[230] = true;
			tileBlockLight[230] = true;
			tileMergeDirt[230] = true;
			tileSolid[222] = true;
			tileBlockLight[222] = true;
			tileMergeDirt[222] = true;
			tileSolid[223] = true;
			tileBlockLight[223] = true;
			tileMergeDirt[223] = true;
			tileSolid[224] = true;
			tileBlockLight[224] = true;
			tileFrameImportant[237] = true;
			tileFrameImportant[238] = true;
			tileSolid[225] = true;
			tileBlockLight[225] = true;
			tileBrick[225] = true;
			tileSolid[226] = true;
			tileBlockLight[226] = true;
			tileBrick[226] = true;
			tileSolid[235] = true;
			tileBlockLight[235] = true;
			tileFrameImportant[235] = true;
			tileLighted[238] = true;
			tileFrameImportant[236] = true;
			tileCut[236] = true;
			tileSolid[191] = true;
			tileBrick[191] = true;
			tileBlockLight[191] = true;
			tileSolid[211] = true;
			tileBlockLight[211] = true;
			tileSolid[208] = true;
			tileBrick[208] = true;
			tileBlockLight[208] = true;
			tileSolid[192] = true;
			tileBrick[192] = true;
			tileBlockLight[192] = true;
			tileSolid[193] = true;
			tileBrick[193] = true;
			tileBlockLight[193] = true;
			tileMergeDirt[193] = true;
			tileSolid[194] = true;
			tileBrick[194] = true;
			tileBlockLight[194] = true;
			tileSolid[195] = true;
			tileBrick[195] = true;
			tileMergeDirt[195] = true;
			tileBlockLight[195] = true;
			tileBlockLight[200] = true;
			tileSolid[200] = true;
			tileBrick[200] = true;
			tileBlockLight[203] = true;
			tileSolid[203] = true;
			tileMergeDirt[203] = true;
			tileBlockLight[204] = true;
			tileSolid[204] = true;
			tileMergeDirt[204] = true;
			tileBlockLight[165] = true;
			tileShine2[147] = true;
			tileShine2[161] = true;
			tileShine2[163] = true;
			tileShine2[164] = true;
			tileSolid[189] = true;
			tileBlockLight[51] = true;
			tileLighted[204] = true;
			tileShine[204] = 1150;
			tileShine2[204] = true;
			tileSolid[190] = true;
			tileBlockLight[190] = true;
			tileBrick[190] = true;
			tileSolid[198] = true;
			tileMergeDirt[198] = true;
			tileBrick[198] = true;
			tileBlockLight[198] = true;
			tileSolid[206] = true;
			tileBlockLight[206] = true;
			tileMergeDirt[206] = true;
			tileBrick[206] = true;
			tileBlockLight[234] = true;
			tileSolid[248] = true;
			tileSolid[249] = true;
			tileSolid[250] = true;
			tileBrick[248] = true;
			tileBrick[249] = true;
			tileBrick[250] = true;
			tileSolid[251] = true;
			tileSolid[252] = true;
			tileBrick[252] = true;
			tileSolid[253] = true;
			tileBrick[253] = true;
			tileMergeDirt[251] = true;
			tileMergeDirt[252] = true;
			tileMergeDirt[253] = true;
			tileBlockLight[251] = true;
			tileBlockLight[252] = true;
			tileBlockLight[253] = true;
			tileBlockLight[248] = true;
			tileBlockLight[249] = true;
			tileBlockLight[250] = true;
			tileLargeFrames[273] = 1;
			tileSolid[273] = true;
			tileBlockLight[273] = true;
			tileLargeFrames[274] = 1;
			tileSolid[274] = true;
			tileBlockLight[274] = true;
			for (int m = 255; m <= 268; m++)
			{
				tileSolid[m] = true;
				if (m > 261)
				{
					tileLighted[m] = true;
					tileShine2[m] = true;
				}
			}
			tileFrameImportant[269] = true;
			tileFrameImportant[334] = true;
			tileFrameImportant[390] = true;
			tileNoAttach[390] = true;
			tileLavaDeath[390] = true;
			tileLighted[390] = true;
			wallHouse[168] = true;
			wallHouse[169] = true;
			wallHouse[142] = true;
			wallHouse[143] = true;
			wallHouse[144] = true;
			wallHouse[149] = true;
			wallHouse[151] = true;
			wallHouse[150] = true;
			wallHouse[152] = true;
			wallHouse[175] = true;
			wallHouse[176] = true;
			wallHouse[182] = true;
			for (int n = 153; n < 167; n++)
			{
				wallHouse[n] = true;
			}
			wallHouse[146] = true;
			wallHouse[147] = true;
			wallHouse[149] = true;
			wallHouse[167] = true;
			wallHouse[168] = true;
			wallHouse[133] = true;
			wallHouse[134] = true;
			wallHouse[135] = true;
			wallHouse[136] = true;
			wallHouse[137] = true;
			wallHouse[75] = true;
			wallHouse[76] = true;
			wallHouse[78] = true;
			wallHouse[82] = true;
			wallHouse[77] = true;
			wallHouse[1] = true;
			wallHouse[4] = true;
			wallHouse[5] = true;
			wallHouse[6] = true;
			wallHouse[10] = true;
			wallHouse[11] = true;
			wallHouse[12] = true;
			wallHouse[16] = true;
			wallHouse[17] = true;
			wallHouse[18] = true;
			wallHouse[19] = true;
			wallHouse[20] = true;
			wallHouse[21] = true;
			wallHouse[22] = true;
			wallHouse[23] = true;
			wallHouse[24] = true;
			wallHouse[25] = true;
			wallHouse[26] = true;
			wallHouse[27] = true;
			wallHouse[29] = true;
			wallHouse[30] = true;
			wallHouse[31] = true;
			wallHouse[32] = true;
			wallHouse[33] = true;
			wallHouse[34] = true;
			wallHouse[35] = true;
			wallHouse[36] = true;
			wallHouse[37] = true;
			wallHouse[38] = true;
			wallHouse[39] = true;
			wallHouse[41] = true;
			wallHouse[42] = true;
			wallHouse[43] = true;
			wallHouse[44] = true;
			wallHouse[45] = true;
			wallHouse[46] = true;
			wallHouse[47] = true;
			wallHouse[66] = true;
			wallHouse[67] = true;
			wallHouse[68] = true;
			wallHouse[72] = true;
			wallHouse[73] = true;
			wallHouse[107] = true;
			wallHouse[106] = true;
			wallHouse[109] = true;
			wallHouse[110] = true;
			wallHouse[111] = true;
			wallHouse[112] = true;
			wallHouse[113] = true;
			wallHouse[114] = true;
			wallHouse[115] = true;
			wallHouse[116] = true;
			wallHouse[117] = true;
			wallHouse[118] = true;
			wallHouse[119] = true;
			wallHouse[120] = true;
			wallHouse[121] = true;
			wallHouse[122] = true;
			wallHouse[123] = true;
			wallHouse[124] = true;
			wallHouse[125] = true;
			wallHouse[108] = true;
			wallHouse[100] = true;
			wallHouse[101] = true;
			wallHouse[102] = true;
			wallHouse[103] = true;
			wallHouse[104] = true;
			wallHouse[105] = true;
			wallHouse[84] = true;
			wallHouse[74] = true;
			wallHouse[85] = true;
			wallHouse[88] = true;
			wallHouse[89] = true;
			wallHouse[90] = true;
			wallHouse[91] = true;
			wallHouse[92] = true;
			wallHouse[93] = true;
			wallHouse[126] = true;
			wallHouse[127] = true;
			wallHouse[128] = true;
			wallHouse[129] = true;
			wallHouse[130] = true;
			wallHouse[131] = true;
			wallHouse[132] = true;
			wallHouse[138] = true;
			wallHouse[139] = true;
			wallHouse[140] = true;
			wallHouse[141] = true;
			wallHouse[177] = true;
			wallHouse[172] = true;
			wallHouse[174] = true;
			wallHouse[223] = true;
			wallLight[0] = true;
			wallLight[21] = true;
			wallLight[106] = true;
			wallLight[107] = true;
			wallLight[138] = true;
			wallLight[140] = true;
			wallLight[141] = true;
			wallLight[139] = true;
			wallLight[145] = true;
			wallLight[150] = true;
			wallLight[152] = true;
			wallLight[168] = true;
			for (int num = 0; num < 225; num++)
			{
				wallDungeon[num] = false;
			}
			wallDungeon[7] = true;
			wallDungeon[8] = true;
			wallDungeon[9] = true;
			wallDungeon[94] = true;
			wallDungeon[95] = true;
			wallDungeon[96] = true;
			wallDungeon[97] = true;
			wallDungeon[98] = true;
			wallDungeon[99] = true;
			for (int num2 = 0; num2 < 10; num2++)
			{
				recentWorld[num2] = "";
				recentIP[num2] = "";
				recentPort[num2] = 0;
			}
			if (rand == null)
			{
				rand = new Random((int)DateTime.Now.Ticks);
			}
			if (WorldGen.genRand == null)
			{
				WorldGen.genRand = new Random((int)DateTime.Now.Ticks);
			}
			SetTitle();
			lo = rand.Next(6);
			critterCage = true;
			for (int num3 = 0; num3 < 3600; num3++)
			{
				CritterCages();
			}
			critterCage = false;
			tileBrick[1] = true;
			tileBrick[54] = true;
			tileBrick[118] = true;
			tileBrick[119] = true;
			tileBrick[120] = true;
			tileBrick[121] = true;
			tileBrick[122] = true;
			tileBrick[140] = true;
			tileBrick[148] = true;
			tileBrick[150] = true;
			tileBrick[151] = true;
			tileBrick[152] = true;
			tileBrick[30] = true;
			tileBrick[38] = true;
			tileBrick[39] = true;
			tileBrick[41] = true;
			tileBrick[43] = true;
			tileBrick[44] = true;
			tileBrick[45] = true;
			tileBrick[46] = true;
			tileBrick[47] = true;
			tileBrick[75] = true;
			tileBrick[76] = true;
			tileBrick[160] = true;
			tileBrick[2] = true;
			tileBrick[199] = true;
			tileBrick[23] = true;
			tileBrick[60] = true;
			tileBrick[70] = true;
			tileBrick[109] = true;
			tileBrick[53] = true;
			tileBrick[116] = true;
			tileBrick[234] = true;
			tileBrick[112] = true;
			tileBrick[147] = true;
			tileBrick[153] = true;
			tileBrick[154] = true;
			tileBrick[155] = true;
			tileBrick[156] = true;
			tileBrick[157] = true;
			tileBrick[158] = true;
			tileBrick[159] = true;
			tileMergeDirt[202] = true;
			tileBrick[202] = true;
			tileSolid[202] = true;
			tileBlockLight[202] = true;
			tileBrick[161] = true;
			tileBlockLight[161] = true;
			tileBlockLight[163] = true;
			tileBlockLight[164] = true;
			tileSolid[188] = true;
			tileBlockLight[188] = true;
			tileBrick[188] = true;
			tileMergeDirt[188] = true;
			tileBrick[179] = true;
			tileSolid[179] = true;
			tileBlockLight[179] = true;
			tileMoss[179] = true;
			tileBrick[381] = true;
			tileSolid[381] = true;
			tileBlockLight[381] = true;
			tileMoss[381] = true;
			tileBrick[180] = true;
			tileSolid[180] = true;
			tileBlockLight[180] = true;
			tileMoss[180] = true;
			tileBrick[181] = true;
			tileSolid[181] = true;
			tileBlockLight[181] = true;
			tileMoss[181] = true;
			tileBrick[182] = true;
			tileSolid[182] = true;
			tileBlockLight[182] = true;
			tileMoss[182] = true;
			tileBrick[183] = true;
			tileSolid[183] = true;
			tileBlockLight[183] = true;
			tileMoss[183] = true;
			tileMergeDirt[177] = true;
			tileMergeDirt[190] = true;
			tileSolid[196] = true;
			tileSolid[197] = true;
			tileMergeDirt[197] = true;
			tileBlockLight[197] = true;
			tileNoSunLight[197] = true;
			tileBrick[175] = true;
			tileSolid[175] = true;
			tileBlockLight[175] = true;
			tileBrick[176] = true;
			tileSolid[176] = true;
			tileBlockLight[176] = true;
			tileBrick[177] = true;
			tileSolid[177] = true;
			tileBlockLight[177] = true;
			tileBrick[225] = true;
			tileBrick[229] = true;
			tileShine[221] = 925;
			tileShine[222] = 875;
			tileShine[223] = 825;
			tileShine2[221] = true;
			tileShine2[222] = true;
			tileShine2[223] = true;
			tileMergeDirt[175] = true;
			tileMergeDirt[176] = true;
			tileMergeDirt[177] = true;
			tileMergeDirt[208] = true;
			tileBrick[162] = true;
			tileSolid[162] = true;
			tileBlockLight[162] = false;
			tileBrick[163] = true;
			tileSolid[163] = true;
			tileBrick[164] = true;
			tileSolid[164] = true;
			tileShine2[6] = true;
			tileShine2[7] = true;
			tileShine2[8] = true;
			tileShine2[9] = true;
			tileShine2[166] = true;
			tileShine2[167] = true;
			tileShine2[168] = true;
			tileShine2[169] = true;
			tileShine2[12] = true;
			tileShine2[21] = true;
			tileShine2[22] = true;
			tileShine2[25] = true;
			tileShine2[45] = true;
			tileShine2[46] = true;
			tileShine2[47] = true;
			tileShine2[63] = true;
			tileShine2[64] = true;
			tileShine2[65] = true;
			tileShine2[66] = true;
			tileShine2[67] = true;
			tileShine2[68] = true;
			tileShine2[107] = true;
			tileShine2[108] = true;
			tileShine2[111] = true;
			tileShine2[121] = true;
			tileShine2[122] = true;
			tileShine2[117] = true;
			tileShine2[211] = true;
			tileShine[129] = 300;
			tileNoFail[330] = true;
			tileNoFail[331] = true;
			tileNoFail[332] = true;
			tileNoFail[333] = true;
			tileNoFail[129] = true;
			tileNoFail[192] = true;
			tileHammer[26] = true;
			tileHammer[31] = true;
			tileAxe[5] = true;
			tileAxe[72] = true;
			tileAxe[80] = true;
			tileAxe[323] = true;
			tileBrick[59] = true;
			tileBrick[234] = true;
			tileSolid[234] = true;
			tileMergeDirt[234] = true;
			tileSand[53] = true;
			tileSand[112] = true;
			tileSand[116] = true;
			tileSand[234] = true;
			tileFrameImportant[233] = true;
			tileLighted[215] = true;
			tileFrameImportant[227] = true;
			tileFrameImportant[228] = true;
			tileFrameImportant[231] = true;
			tileCut[231] = true;
			tileFrameImportant[216] = true;
			tileFrameImportant[217] = true;
			tileFrameImportant[218] = true;
			tileFrameImportant[219] = true;
			tileFrameImportant[220] = true;
			tileFrameImportant[338] = true;
			tileFrameImportant[165] = true;
			tileFrameImportant[209] = true;
			tileFrameImportant[215] = true;
			tileFrameImportant[210] = true;
			tileFrameImportant[212] = true;
			tileFrameImportant[207] = true;
			tileFrameImportant[178] = true;
			tileFrameImportant[184] = true;
			tileFrameImportant[185] = true;
			tileFrameImportant[186] = true;
			tileFrameImportant[187] = true;
			tileFrameImportant[173] = true;
			tileFrameImportant[174] = true;
			tileLighted[173] = true;
			tileLighted[174] = true;
			tileFrameImportant[139] = true;
			tileLighted[160] = true;
			tileLighted[149] = true;
			tileFrameImportant[149] = true;
			tileFrameImportant[142] = true;
			tileFrameImportant[143] = true;
			tileFrameImportant[144] = true;
			tileStone[131] = true;
			tileFrameImportant[136] = true;
			tileFrameImportant[137] = true;
			tileFrameImportant[138] = true;
			tileBlockLight[137] = true;
			tileSolid[137] = true;
			tileBlockLight[160] = true;
			tileSolid[160] = true;
			tileMergeDirt[160] = true;
			tileBlockLight[161] = true;
			tileSolid[161] = true;
			tileBlockLight[145] = true;
			tileSolid[145] = true;
			tileMergeDirt[145] = true;
			tileBlockLight[146] = true;
			tileSolid[146] = true;
			tileMergeDirt[146] = true;
			tileBlockLight[147] = true;
			tileSolid[147] = true;
			tileBlockLight[148] = true;
			tileSolid[148] = true;
			tileMergeDirt[148] = true;
			tileBlockLight[138] = true;
			tileSolid[138] = true;
			tileBlockLight[140] = true;
			tileSolid[140] = true;
			tileBlockLight[151] = true;
			tileSolid[151] = true;
			tileMergeDirt[151] = true;
			tileBlockLight[152] = true;
			tileSolid[152] = true;
			tileMergeDirt[152] = true;
			tileBlockLight[153] = true;
			tileSolid[153] = true;
			tileMergeDirt[153] = true;
			tileBlockLight[154] = true;
			tileSolid[154] = true;
			tileMergeDirt[154] = true;
			tileBlockLight[155] = true;
			tileSolid[155] = true;
			tileMergeDirt[155] = true;
			tileBlockLight[156] = true;
			tileSolid[156] = true;
			tileMergeDirt[156] = true;
			tileMergeDirt[150] = true;
			tileBlockLight[157] = true;
			tileSolid[157] = true;
			tileMergeDirt[157] = true;
			tileBlockLight[158] = true;
			tileSolid[158] = true;
			tileMergeDirt[158] = true;
			tileBlockLight[159] = true;
			tileSolid[159] = true;
			tileMergeDirt[159] = true;
			tileFrameImportant[320] = true;
			tileShine[22] = 1150;
			tileShine[6] = 1150;
			tileShine[7] = 1100;
			tileShine[8] = 1000;
			tileShine[9] = 1050;
			tileShine[166] = 1125;
			tileShine[167] = 1075;
			tileShine[168] = 1025;
			tileShine[169] = 975;
			tileShine[178] = 500;
			tileShine2[178] = true;
			tileShine[12] = 300;
			tileShine[21] = 1200;
			tileShine[63] = 900;
			tileShine[64] = 900;
			tileShine[65] = 900;
			tileShine[66] = 900;
			tileShine[67] = 900;
			tileShine[68] = 900;
			tileShine[45] = 1900;
			tileShine[46] = 2000;
			tileShine[47] = 2100;
			tileShine[122] = 1800;
			tileShine[121] = 1850;
			tileShine[125] = 600;
			tileShine[109] = 9000;
			tileShine[110] = 9000;
			tileShine[116] = 9000;
			tileShine[117] = 9000;
			tileShine[118] = 8000;
			tileShine[107] = 950;
			tileShine[108] = 900;
			tileShine[111] = 850;
			tileShine[211] = 800;
			tileLighted[4] = true;
			tileLighted[17] = true;
			tileLighted[133] = true;
			tileLighted[31] = true;
			tileLighted[33] = true;
			tileLighted[34] = true;
			tileLighted[35] = true;
			tileLighted[37] = true;
			tileLighted[42] = true;
			tileLighted[49] = true;
			tileLighted[58] = true;
			tileLighted[61] = true;
			tileLighted[70] = true;
			tileLighted[71] = true;
			tileLighted[72] = true;
			tileLighted[76] = true;
			tileLighted[77] = true;
			tileLighted[19] = true;
			tileLighted[22] = true;
			tileLighted[26] = true;
			tileLighted[83] = true;
			tileLighted[84] = true;
			tileLighted[92] = true;
			tileLighted[93] = true;
			tileLighted[95] = true;
			tileLighted[98] = true;
			tileLighted[100] = true;
			tileLighted[109] = true;
			tileLighted[125] = true;
			tileLighted[126] = true;
			tileLighted[129] = true;
			tileLighted[140] = true;
			tileLighted[270] = true;
			tileLighted[271] = true;
			tileMergeDirt[1] = true;
			tileMergeDirt[6] = true;
			tileMergeDirt[7] = true;
			tileMergeDirt[8] = true;
			tileMergeDirt[9] = true;
			tileMergeDirt[166] = true;
			tileMergeDirt[167] = true;
			tileMergeDirt[168] = true;
			tileMergeDirt[169] = true;
			tileMergeDirt[22] = true;
			tileMergeDirt[25] = true;
			tileMergeDirt[30] = true;
			tileMergeDirt[37] = true;
			tileMergeDirt[38] = true;
			tileMergeDirt[40] = true;
			tileMergeDirt[53] = true;
			tileMergeDirt[56] = true;
			tileMergeDirt[107] = true;
			tileMergeDirt[108] = true;
			tileMergeDirt[111] = true;
			tileMergeDirt[112] = true;
			tileMergeDirt[116] = true;
			tileMergeDirt[117] = true;
			tileMergeDirt[123] = true;
			tileMergeDirt[140] = true;
			tileMergeDirt[39] = true;
			tileMergeDirt[122] = true;
			tileMergeDirt[121] = true;
			tileMergeDirt[120] = true;
			tileMergeDirt[119] = true;
			tileMergeDirt[118] = true;
			tileMergeDirt[47] = true;
			tileMergeDirt[46] = true;
			tileMergeDirt[45] = true;
			tileMergeDirt[44] = true;
			tileMergeDirt[43] = true;
			tileMergeDirt[41] = true;
			tileFrameImportant[380] = true;
			tileFrameImportant[201] = true;
			tileFrameImportant[3] = true;
			tileFrameImportant[4] = true;
			tileFrameImportant[5] = true;
			tileFrameImportant[10] = true;
			tileFrameImportant[11] = true;
			tileFrameImportant[12] = true;
			tileFrameImportant[13] = true;
			tileFrameImportant[14] = true;
			tileFrameImportant[15] = true;
			tileFrameImportant[16] = true;
			tileFrameImportant[17] = true;
			tileFrameImportant[18] = true;
			tileFrameImportant[19] = true;
			tileFrameImportant[20] = true;
			tileFrameImportant[21] = true;
			tileFrameImportant[24] = true;
			tileFrameImportant[26] = true;
			tileFrameImportant[27] = true;
			tileFrameImportant[28] = true;
			tileFrameImportant[29] = true;
			tileFrameImportant[31] = true;
			tileFrameImportant[33] = true;
			tileFrameImportant[34] = true;
			tileFrameImportant[35] = true;
			tileFrameImportant[42] = true;
			tileFrameImportant[50] = true;
			tileFrameImportant[55] = true;
			tileFrameImportant[61] = true;
			tileFrameImportant[71] = true;
			tileFrameImportant[72] = true;
			tileFrameImportant[73] = true;
			tileFrameImportant[74] = true;
			tileFrameImportant[77] = true;
			tileFrameImportant[78] = true;
			tileFrameImportant[79] = true;
			tileFrameImportant[81] = true;
			tileFrameImportant[82] = true;
			tileFrameImportant[83] = true;
			tileFrameImportant[84] = true;
			tileFrameImportant[85] = true;
			tileFrameImportant[86] = true;
			tileFrameImportant[87] = true;
			tileFrameImportant[88] = true;
			tileFrameImportant[89] = true;
			tileFrameImportant[90] = true;
			tileFrameImportant[91] = true;
			tileFrameImportant[92] = true;
			tileFrameImportant[93] = true;
			tileFrameImportant[94] = true;
			tileFrameImportant[95] = true;
			tileFrameImportant[96] = true;
			tileFrameImportant[97] = true;
			tileFrameImportant[98] = true;
			tileFrameImportant[99] = true;
			tileFrameImportant[101] = true;
			tileFrameImportant[102] = true;
			tileFrameImportant[103] = true;
			tileFrameImportant[104] = true;
			tileFrameImportant[105] = true;
			tileFrameImportant[100] = true;
			tileFrameImportant[106] = true;
			tileFrameImportant[110] = true;
			tileFrameImportant[113] = true;
			tileFrameImportant[114] = true;
			tileFrameImportant[125] = true;
			tileFrameImportant[287] = true;
			tileFrameImportant[126] = true;
			tileFrameImportant[128] = true;
			tileFrameImportant[129] = true;
			tileFrameImportant[132] = true;
			tileFrameImportant[133] = true;
			tileFrameImportant[134] = true;
			tileFrameImportant[135] = true;
			tileFrameImportant[172] = true;
			tileFrameImportant[319] = true;
			tileFrameImportant[323] = true;
			tileFrameImportant[335] = true;
			tileFrameImportant[337] = true;
			tileFrameImportant[349] = true;
			tileFrameImportant[376] = true;
			tileFrameImportant[378] = true;
			tileFrameImportant[141] = true;
			tileFrameImportant[270] = true;
			tileFrameImportant[271] = true;
			tileFrameImportant[314] = true;
			tileSolidTop[376] = true;
			tileTable[376] = true;
			tileTable[380] = true;
			tileCut[201] = true;
			tileCut[3] = true;
			tileCut[24] = true;
			tileCut[28] = true;
			tileCut[32] = true;
			tileCut[51] = true;
			tileCut[52] = true;
			tileCut[61] = true;
			tileCut[62] = true;
			tileCut[69] = true;
			tileCut[71] = true;
			tileCut[73] = true;
			tileCut[74] = true;
			tileCut[82] = true;
			tileCut[83] = true;
			tileCut[84] = true;
			tileCut[110] = true;
			tileCut[113] = true;
			tileCut[115] = true;
			tileCut[184] = true;
			tileCut[205] = true;
			tileCut[352] = true;
			tileCut[382] = true;
			tileAlch[82] = true;
			tileAlch[83] = true;
			tileAlch[84] = true;
			tileSolid[127] = true;
			tileSolid[130] = true;
			tileBlockLight[130] = true;
			tileBlockLight[131] = true;
			tileNoAttach[232] = true;
			tileSolid[107] = true;
			tileBlockLight[107] = true;
			tileSolid[108] = true;
			tileBlockLight[108] = true;
			tileSolid[111] = true;
			tileBlockLight[111] = true;
			tileSolid[109] = true;
			tileBlockLight[109] = true;
			tileSolid[110] = false;
			tileNoAttach[110] = true;
			tileNoFail[110] = true;
			tileSolid[112] = true;
			tileBlockLight[112] = true;
			tileSolid[116] = true;
			tileBlockLight[116] = true;
			tileBrick[117] = true;
			tileBrick[25] = true;
			tileBrick[203] = true;
			tileSolid[117] = true;
			tileBlockLight[117] = true;
			tileSolid[123] = true;
			tileBlockLight[123] = true;
			tileNoFail[165] = true;
			tileNoFail[184] = true;
			tileNoFail[185] = true;
			tileNoFail[186] = true;
			tileNoFail[187] = true;
			tileSolid[118] = true;
			tileBlockLight[118] = true;
			tileSolid[119] = true;
			tileBlockLight[119] = true;
			tileSolid[120] = true;
			tileBlockLight[120] = true;
			tileSolid[121] = true;
			tileBlockLight[121] = true;
			tileSolid[122] = true;
			tileBlockLight[122] = true;
			tileSolid[150] = true;
			tileBlockLight[150] = true;
			tileBlockLight[115] = true;
			tileSolid[199] = true;
			tileBlockLight[199] = true;
			tileNoFail[162] = true;
			tileSolid[0] = true;
			tileBlockLight[0] = true;
			tileSolid[1] = true;
			tileBlockLight[1] = true;
			tileSolid[2] = true;
			tileBlockLight[2] = true;
			tileSolid[3] = false;
			tileNoAttach[3] = true;
			tileNoFail[3] = true;
			tileNoFail[201] = true;
			tileSolid[4] = false;
			tileNoAttach[4] = true;
			tileNoFail[4] = true;
			tileNoFail[24] = true;
			tileSolid[5] = false;
			tileSolid[6] = true;
			tileBlockLight[6] = true;
			tileSolid[7] = true;
			tileBlockLight[7] = true;
			tileSolid[8] = true;
			tileBlockLight[8] = true;
			tileSolid[9] = true;
			tileBlockLight[9] = true;
			tileSolid[166] = true;
			tileBlockLight[166] = true;
			tileSolid[167] = true;
			tileBlockLight[167] = true;
			tileSolid[168] = true;
			tileBlockLight[168] = true;
			tileSolid[169] = true;
			tileBlockLight[169] = true;
			tileBlockLight[10] = true;
			tileSolid[10] = true;
			tileNoAttach[10] = true;
			tileBlockLight[10] = true;
			tileSolid[11] = false;
			tileSolidTop[19] = true;
			tileSolid[19] = true;
			tileSolid[22] = true;
			tileSolid[23] = true;
			tileSolid[25] = true;
			tileSolid[30] = true;
			tileNoFail[32] = true;
			tileBlockLight[32] = true;
			tileNoFail[352] = true;
			tileBlockLight[352] = true;
			tileSolid[37] = true;
			tileBlockLight[37] = true;
			tileSolid[38] = true;
			tileBlockLight[38] = true;
			tileSolid[39] = true;
			tileBlockLight[39] = true;
			tileSolid[40] = true;
			tileBlockLight[40] = true;
			tileSolid[41] = true;
			tileBlockLight[41] = true;
			tileSolid[43] = true;
			tileBlockLight[43] = true;
			tileSolid[44] = true;
			tileBlockLight[44] = true;
			tileSolid[45] = true;
			tileBlockLight[45] = true;
			tileSolid[46] = true;
			tileBlockLight[46] = true;
			tileSolid[47] = true;
			tileBlockLight[47] = true;
			tileSolid[48] = true;
			tileBlockLight[48] = true;
			tileSolid[53] = true;
			tileBlockLight[53] = true;
			tileSolid[54] = true;
			tileBlockLight[52] = true;
			tileBlockLight[205] = true;
			tileSolid[56] = true;
			tileBlockLight[56] = true;
			tileSolid[57] = true;
			tileBlockLight[57] = true;
			tileSolid[58] = true;
			tileBlockLight[58] = true;
			tileBlockLight[382] = true;
			tileSolid[59] = true;
			tileBlockLight[59] = true;
			tileSolid[60] = true;
			tileBlockLight[60] = true;
			tileSolid[63] = true;
			tileBlockLight[63] = true;
			tileStone[63] = true;
			tileStone[130] = true;
			tileSolid[64] = true;
			tileBlockLight[64] = true;
			tileStone[64] = true;
			tileSolid[65] = true;
			tileBlockLight[65] = true;
			tileStone[65] = true;
			tileSolid[66] = true;
			tileBlockLight[66] = true;
			tileStone[66] = true;
			tileSolid[67] = true;
			tileBlockLight[67] = true;
			tileStone[67] = true;
			tileSolid[68] = true;
			tileBlockLight[68] = true;
			tileStone[68] = true;
			tileSolid[75] = true;
			tileBlockLight[75] = true;
			tileSolid[76] = true;
			tileBlockLight[76] = true;
			tileSolid[70] = true;
			tileBlockLight[70] = true;
			tileNoFail[50] = true;
			tileNoAttach[50] = true;
			tileDungeon[41] = true;
			tileDungeon[43] = true;
			tileDungeon[44] = true;
			tileBlockLight[30] = true;
			tileBlockLight[25] = true;
			tileBlockLight[23] = true;
			tileBlockLight[22] = true;
			tileBlockLight[62] = true;
			tileSolidTop[18] = true;
			tileSolidTop[14] = true;
			tileSolidTop[16] = true;
			tileSolidTop[134] = true;
			tileSolidTop[114] = true;
			tileNoAttach[20] = true;
			tileNoAttach[19] = true;
			tileNoAttach[13] = true;
			tileNoAttach[14] = true;
			tileNoAttach[15] = true;
			tileNoAttach[16] = true;
			tileNoAttach[134] = true;
			tileNoAttach[17] = true;
			tileNoAttach[18] = true;
			tileNoAttach[19] = true;
			tileNoAttach[21] = true;
			tileNoAttach[27] = true;
			tileNoAttach[114] = true;
			tileTable[14] = true;
			tileTable[18] = true;
			tileTable[19] = true;
			tileTable[114] = true;
			tileNoAttach[86] = true;
			tileNoAttach[87] = true;
			tileNoAttach[88] = true;
			tileNoAttach[89] = true;
			tileNoAttach[90] = true;
			tileTable[101] = true;
			tileNoAttach[101] = true;
			tileNoAttach[102] = true;
			tileNoAttach[94] = true;
			tileNoAttach[95] = true;
			tileNoAttach[96] = true;
			tileNoAttach[97] = true;
			tileNoAttach[98] = true;
			tileNoAttach[99] = true;
			tileTable[87] = true;
			tileTable[88] = true;
			tileSolidTop[87] = true;
			tileSolidTop[88] = true;
			tileSolidTop[101] = true;
			tileNoAttach[91] = true;
			tileNoAttach[92] = true;
			tileNoAttach[93] = true;
			tileLighted[190] = true;
			tileBlockLight[192] = true;
			tileBrick[192] = false;
			tileWaterDeath[215] = true;
			tileWaterDeath[4] = true;
			tileWaterDeath[51] = true;
			tileWaterDeath[93] = true;
			tileWaterDeath[98] = true;
			tileLavaDeath[3] = true;
			tileLavaDeath[5] = true;
			tileLavaDeath[10] = true;
			tileLavaDeath[11] = true;
			tileLavaDeath[12] = true;
			tileLavaDeath[13] = true;
			tileLavaDeath[14] = true;
			tileLavaDeath[15] = true;
			tileLavaDeath[16] = true;
			tileLavaDeath[17] = true;
			tileLavaDeath[18] = true;
			tileLavaDeath[19] = true;
			tileLavaDeath[20] = true;
			tileLavaDeath[24] = true;
			tileLavaDeath[27] = true;
			tileLavaDeath[28] = true;
			tileLavaDeath[29] = true;
			tileLavaDeath[32] = true;
			tileLavaDeath[33] = true;
			tileLavaDeath[34] = true;
			tileLavaDeath[35] = true;
			tileLavaDeath[36] = true;
			tileLavaDeath[42] = true;
			tileLavaDeath[49] = true;
			tileLavaDeath[50] = true;
			tileLavaDeath[51] = true;
			tileLavaDeath[52] = true;
			tileLavaDeath[55] = true;
			tileLavaDeath[61] = true;
			tileLavaDeath[62] = true;
			tileLavaDeath[69] = true;
			tileLavaDeath[71] = true;
			tileLavaDeath[72] = true;
			tileLavaDeath[73] = true;
			tileLavaDeath[74] = true;
			tileLavaDeath[79] = true;
			tileLavaDeath[80] = true;
			tileLavaDeath[81] = true;
			tileLavaDeath[86] = true;
			tileLavaDeath[87] = true;
			tileLavaDeath[88] = true;
			tileLavaDeath[89] = true;
			tileLavaDeath[90] = true;
			tileLavaDeath[91] = true;
			tileLavaDeath[92] = true;
			tileLavaDeath[93] = true;
			tileLavaDeath[94] = true;
			tileLavaDeath[95] = true;
			tileLavaDeath[96] = true;
			tileLavaDeath[97] = true;
			tileLavaDeath[98] = true;
			tileLavaDeath[100] = true;
			tileLavaDeath[101] = true;
			tileLavaDeath[102] = true;
			tileLavaDeath[103] = true;
			tileLavaDeath[104] = true;
			tileLavaDeath[106] = true;
			tileLavaDeath[110] = true;
			tileLavaDeath[113] = true;
			tileLavaDeath[115] = true;
			tileLavaDeath[125] = true;
			tileLavaDeath[126] = true;
			tileLavaDeath[128] = true;
			tileLavaDeath[149] = true;
			tileLavaDeath[172] = true;
			tileLavaDeath[173] = true;
			tileLavaDeath[174] = true;
			tileLavaDeath[184] = true;
			tileLavaDeath[201] = true;
			tileLavaDeath[205] = true;
			tileLavaDeath[201] = true;
			tileLavaDeath[209] = true;
			tileLavaDeath[210] = true;
			tileLavaDeath[212] = true;
			tileLavaDeath[213] = true;
			tileLavaDeath[353] = true;
			tileLavaDeath[214] = true;
			tileLavaDeath[215] = true;
			tileLavaDeath[216] = true;
			tileLavaDeath[217] = true;
			tileLavaDeath[218] = true;
			tileLavaDeath[219] = true;
			tileLavaDeath[220] = true;
			tileLavaDeath[227] = true;
			tileLavaDeath[228] = true;
			tileLavaDeath[233] = true;
			tileLavaDeath[236] = true;
			tileLavaDeath[238] = true;
			tileLavaDeath[240] = true;
			tileLavaDeath[241] = true;
			tileLavaDeath[242] = true;
			tileLavaDeath[243] = true;
			tileLavaDeath[244] = true;
			tileLavaDeath[245] = true;
			tileLavaDeath[246] = true;
			tileLavaDeath[247] = true;
			tileLavaDeath[254] = true;
			tileLavaDeath[269] = true;
			tileLavaDeath[270] = true;
			tileLavaDeath[271] = true;
			tileLavaDeath[275] = true;
			tileLavaDeath[413] = true;
			tileLavaDeath[276] = true;
			tileLavaDeath[277] = true;
			tileLavaDeath[278] = true;
			tileLavaDeath[279] = true;
			tileLavaDeath[280] = true;
			tileLavaDeath[281] = true;
			tileLavaDeath[282] = true;
			tileLavaDeath[283] = true;
			tileLavaDeath[285] = true;
			tileLavaDeath[286] = true;
			tileLavaDeath[287] = true;
			tileLavaDeath[288] = true;
			tileLavaDeath[289] = true;
			tileLavaDeath[290] = true;
			tileLavaDeath[291] = true;
			tileLavaDeath[292] = true;
			tileLavaDeath[293] = true;
			tileLavaDeath[294] = true;
			tileLavaDeath[295] = true;
			tileLavaDeath[296] = true;
			tileLavaDeath[297] = true;
			tileLavaDeath[298] = true;
			tileLavaDeath[299] = true;
			tileLavaDeath[300] = true;
			tileLavaDeath[301] = true;
			tileLavaDeath[302] = true;
			tileLavaDeath[303] = true;
			tileLavaDeath[304] = true;
			tileLavaDeath[305] = true;
			tileLavaDeath[306] = true;
			tileLavaDeath[307] = true;
			tileLavaDeath[308] = true;
			tileLavaDeath[309] = true;
			tileLavaDeath[310] = true;
			tileLavaDeath[316] = true;
			tileLavaDeath[317] = true;
			tileLavaDeath[318] = true;
			tileLavaDeath[319] = true;
			tileLavaDeath[354] = true;
			tileLavaDeath[355] = true;
			tileLavaDeath[323] = true;
			tileLavaDeath[335] = true;
			tileLavaDeath[338] = true;
			tileLavaDeath[339] = true;
			tileLavaDeath[352] = true;
			tileLavaDeath[382] = true;
			tileLighted[316] = true;
			tileLighted[317] = true;
			tileLighted[318] = true;
			for (int num4 = 0; num4 < 419; num4++)
			{
				if (tileLavaDeath[num4])
				{
					tileObsidianKill[num4] = true;
				}
			}
			tileObsidianKill[77] = true;
			tileObsidianKill[78] = true;
			tileObsidianKill[82] = true;
			tileObsidianKill[83] = true;
			tileObsidianKill[84] = true;
			tileObsidianKill[85] = true;
			tileObsidianKill[105] = true;
			tileObsidianKill[129] = true;
			tileObsidianKill[132] = true;
			tileObsidianKill[133] = true;
			tileObsidianKill[134] = true;
			tileObsidianKill[135] = true;
			tileObsidianKill[136] = true;
			tileObsidianKill[139] = true;
			tileObsidianKill[165] = true;
			tileObsidianKill[178] = true;
			tileObsidianKill[185] = true;
			tileObsidianKill[186] = true;
			tileObsidianKill[187] = true;
			tileObsidianKill[231] = true;
			tileObsidianKill[337] = true;
			tileObsidianKill[349] = true;
			tileSolid[384] = true;
			tileBlockLight[384] = true;
			tileNoFail[384] = true;
			tileFrameImportant[395] = true;
			tileLavaDeath[395] = true;
			tileFrameImportant[405] = true;
			tileLavaDeath[405] = true;
			tileSolidTop[405] = true;
			tileTable[405] = true;
			tileLighted[405] = true;
			tileWaterDeath[405] = true;
			tileFrameImportant[406] = true;
			tileLavaDeath[406] = true;
			tileFrameImportant[411] = true;
			tileLavaDeath[411] = true;
			tileFrameImportant[412] = true;
			for (int num5 = 0; num5 < 225; num5++)
			{
				switch (num5)
				{
				case 20:
					wallBlend[num5] = 14;
					break;
				case 19:
					wallBlend[num5] = 9;
					break;
				case 18:
					wallBlend[num5] = 8;
					break;
				case 17:
					wallBlend[num5] = 7;
					break;
				case 16:
				case 59:
					wallBlend[num5] = 2;
					break;
				case 1:
				case 48:
				case 49:
				case 50:
				case 51:
				case 52:
				case 53:
					wallBlend[num5] = 1;
					break;
				default:
					wallBlend[num5] = num5;
					break;
				}
			}
			wallBlend[65] = 63;
			wallBlend[66] = 63;
			wallBlend[68] = 63;
			wallBlend[67] = 64;
			wallBlend[80] = 74;
			wallBlend[81] = 77;
			wallBlend[94] = 7;
			wallBlend[95] = 7;
			wallBlend[100] = 7;
			wallBlend[101] = 7;
			wallBlend[96] = 8;
			wallBlend[97] = 8;
			wallBlend[102] = 8;
			wallBlend[103] = 8;
			wallBlend[98] = 9;
			wallBlend[99] = 9;
			wallBlend[104] = 9;
			wallBlend[105] = 9;
			tileNoFail[24] = true;
			tileNoFail[3] = true;
			tileNoFail[52] = true;
			tileNoFail[62] = true;
			tileNoFail[32] = true;
			tileNoFail[61] = true;
			tileNoFail[69] = true;
			tileNoFail[73] = true;
			tileNoFail[74] = true;
			tileNoFail[82] = true;
			tileNoFail[83] = true;
			tileNoFail[84] = true;
			tileNoFail[110] = true;
			tileNoFail[113] = true;
			tileNoFail[115] = true;
			tileNoFail[165] = true;
			tileNoFail[184] = true;
			tileNoFail[201] = true;
			tileNoFail[205] = true;
			tileNoFail[227] = true;
			tileNoFail[233] = true;
			tileNoFail[352] = true;
			tileNoFail[382] = true;
			tileFrameImportant[387] = true;
			tileSolid[387] = true;
			tileBlockLight[387] = true;
			tileNoAttach[387] = true;
			tileLavaDeath[387] = true;
			tileFrameImportant[386] = true;
			tileLavaDeath[386] = true;
			tileNoSunLight[386] = true;
			tileFrameImportant[388] = true;
			tileSolid[388] = true;
			tileBlockLight[388] = true;
			tileNoAttach[388] = true;
			tileLavaDeath[388] = true;
			tileFrameImportant[389] = true;
			tileLavaDeath[389] = true;
			tileNoSunLight[389] = true;
			for (int num6 = 0; num6 < 419; num6++)
			{
				if (tileSolid[num6])
				{
					tileNoSunLight[num6] = true;
				}
				tileFrame[num6] = 0;
				tileFrameCounter[num6] = 0;
			}
			tileNoSunLight[379] = false;
			tileNoSunLight[54] = false;
			tileNoSunLight[328] = false;
			tileNoSunLight[19] = false;
			tileNoSunLight[11] = true;
			tileNoSunLight[189] = false;
			tileNoSunLight[196] = false;
			for (int num7 = 0; num7 < maxMenuItems; num7++)
			{
				menuItemScale[num7] = 0.8f;
			}
			for (int num8 = 0; num8 < 6001; num8++)
			{
				dust[num8] = new Dust();
			}
			for (int num9 = 0; num9 < 401; num9++)
			{
				item[num9] = new Item();
			}
			for (int num10 = 0; num10 < 201; num10++)
			{
				npc[num10] = new NPC();
				npc[num10].whoAmI = num10;
			}
			for (int num11 = 0; num11 < 17; num11++)
			{
				player[num11] = new Player();
			}
			for (int num12 = 0; num12 < 1001; num12++)
			{
				Main.projectile[num12] = new Projectile();
			}
			for (int num13 = 0; num13 < 501; num13++)
			{
				gore[num13] = new Gore();
			}
			for (int num14 = 0; num14 < maxRain + 1; num14++)
			{
				rain[num14] = new Rain();
			}
			for (int num15 = 0; num15 < 200; num15++)
			{
				cloud[num15] = new Cloud();
			}
			for (int num16 = 0; num16 < 100; num16++)
			{
				combatText[num16] = new CombatText();
			}
			for (int num17 = 0; num17 < 20; num17++)
			{
				itemText[num17] = new ItemText();
			}
			ItemID.GenerateItemNameList(itemName);
			for (int num18 = 0; num18 < 3602; num18++)
			{
				Item ıtem = new Item();
				ıtem.SetDefaults(num18);
				if (ıtem.headSlot > 0)
				{
					Item.headType[ıtem.headSlot] = ıtem.type;
				}
				if (ıtem.bodySlot > 0)
				{
					Item.bodyType[ıtem.bodySlot] = ıtem.type;
				}
				if (ıtem.legSlot > 0)
				{
					Item.legType[ıtem.legSlot] = ıtem.type;
				}
				switch (ıtem.type)
				{
				case 683:
				case 723:
				case 726:
				case 739:
				case 740:
				case 741:
				case 742:
				case 743:
				case 744:
				case 788:
				case 1308:
				case 1326:
				case 1444:
				case 1445:
				case 1446:
				case 1801:
				case 1930:
				case 1931:
				case 2188:
				case 2750:
				case 3006:
				case 3051:
				case 3209:
				case 3210:
				case 3377:
				case 3476:
				case 3569:
				case 3571:
					Item.staff[ıtem.type] = true;
					break;
				case 1827:
				case 3245:
					Item.claw[ıtem.type] = true;
					break;
				}
			}
			InitLifeBytes();
			for (int num19 = 0; num19 < Recipe.maxRecipes; num19++)
			{
				recipe[num19] = new Recipe();
				availableRecipeY[num19] = 65 * num19;
			}
			Recipe.SetupRecipes();
			for (int num20 = 0; num20 < numChatLines; num20++)
			{
				chatLine[num20] = new ChatLine();
			}
			for (int num21 = 0; num21 < Liquid.resLiquid; num21++)
			{
				liquid[num21] = new Liquid();
			}
			for (int num22 = 0; num22 < 10000; num22++)
			{
				liquidBuffer[num22] = new LiquidBuffer();
			}
			waterfallManager = new WaterfallManager();
			Lighting.LightingThreads = 0;
			shop[0] = new Chest();
			Chest.SetupTravelShop();
			for (int num23 = 1; num23 < numShops; num23++)
			{
				shop[num23] = new Chest();
				shop[num23].SetupShop(num23);
			}
			teamColor[0] = Microsoft.Xna.Framework.Color.White;
			teamColor[1] = new Microsoft.Xna.Framework.Color(218, 59, 59);
			teamColor[2] = new Microsoft.Xna.Framework.Color(59, 218, 85);
			teamColor[3] = new Microsoft.Xna.Framework.Color(59, 149, 218);
			teamColor[4] = new Microsoft.Xna.Framework.Color(242, 221, 100);
			teamColor[5] = new Microsoft.Xna.Framework.Color(224, 100, 242);
			if (menuMode == 1)
			{
				LoadPlayers();
			}
			for (int num24 = 1; num24 < 651; num24++)
			{
				Projectile projectile = new Projectile();
				projectile.SetDefaults(num24);
				if (projectile.hostile)
				{
					projHostile[num24] = true;
				}
				if (projectile.aiStyle == 7)
				{
					projHook[num24] = true;
				}
			}
			Netplay.Initialize();
			NetworkInitializer.Load();
			if (skipMenu)
			{
				WorldGen.clearWorld();
				gameMenu = false;
				LoadPlayers();
				PlayerList[0].SetAsActive();
				LoadWorlds();
				WorldGen.generateWorld();
				WorldGen.EveryTileFrame();
				player[myPlayer].Spawn();
				ActivePlayerFileData.StartPlayTimer();
				Player.EnterWorld(player[myPlayer]);
			}
			if (!dedServ)
			{
				clientUUID = Guid.NewGuid().ToString();
				base.Initialize();
				base.Window.AllowUserResizing = true;
				OpenSettings();
				if (screenWidth > GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Width)
				{
					screenWidth = GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Width;
				}
				if (screenHeight > GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Height)
				{
					screenHeight = GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Height;
				}
				graphics.ApplyChanges();
				CheckBunny();
				if (Lang.lang > 1)
				{
					Lang.setLang(true);
				}
				Lang.setLang();
				if (Lang.lang == 0)
				{
					menuMode = 1212;
				}
				OpenRecent();
				Star.SpawnStars();
				WorldGen.RandomizeWeather();
				foreach (DisplayMode supportedDisplayMode in GraphicsAdapter.DefaultAdapter.SupportedDisplayModes)
				{
					if (supportedDisplayMode.Width >= minScreenW && supportedDisplayMode.Height >= minScreenH && supportedDisplayMode.Width <= maxScreenW && supportedDisplayMode.Height <= maxScreenH)
					{
						bool flag = true;
						for (int num25 = 0; num25 < numDisplayModes; num25++)
						{
							if (supportedDisplayMode.Width == displayWidth[num25] && supportedDisplayMode.Height == displayHeight[num25])
							{
								flag = false;
								break;
							}
						}
						if (flag)
						{
							displayHeight[numDisplayModes] = supportedDisplayMode.Height;
							displayWidth[numDisplayModes] = supportedDisplayMode.Width;
							numDisplayModes++;
						}
					}
				}
				if (autoJoin)
				{
					LoadPlayers();
					menuMode = 1;
					menuMultiplayer = true;
				}
				fpsTimer.Start();
				updateTimer.Start();
			}
		}

		protected override void LoadContent()
		{
			TextureManager.Initialize();
			try
			{
				mapSectionTexture = new RenderTarget2D(base.GraphicsDevice, 200, 150);
				pixelShader = base.Content.Load<Effect>("PixelShader");
				tileShader = base.Content.Load<Effect>("TileShader");
				screenShader = base.Content.Load<Effect>("ScreenShader");
				engine = new AudioEngine("Content" + Path.DirectorySeparatorChar + "TerrariaMusic.xgs");
				soundBank = new SoundBank(engine, "Content" + Path.DirectorySeparatorChar + "Sound Bank.xsb");
				waveBank = new WaveBank(engine, "Content" + Path.DirectorySeparatorChar + "Wave Bank.xwb");
				for (int i = 1; i < 40; i++)
				{
					music[i] = soundBank.GetCue("Music_" + i);
				}
				soundMech[0] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Mech_0");
				soundInstanceMech[0] = soundMech[0].CreateInstance();
				soundGrab = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Grab");
				soundInstanceGrab = soundGrab.CreateInstance();
				soundPixie = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Pixie");
				soundInstancePixie = soundGrab.CreateInstance();
				soundDig[0] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Dig_0");
				soundInstanceDig[0] = soundDig[0].CreateInstance();
				soundDig[1] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Dig_1");
				soundInstanceDig[1] = soundDig[1].CreateInstance();
				soundDig[2] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Dig_2");
				soundInstanceDig[2] = soundDig[2].CreateInstance();
				soundTink[0] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Tink_0");
				soundInstanceTink[0] = soundTink[0].CreateInstance();
				soundTink[1] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Tink_1");
				soundInstanceTink[1] = soundTink[1].CreateInstance();
				soundTink[2] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Tink_2");
				soundInstanceTink[2] = soundTink[2].CreateInstance();
				soundPlayerHit[0] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Player_Hit_0");
				soundInstancePlayerHit[0] = soundPlayerHit[0].CreateInstance();
				soundPlayerHit[1] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Player_Hit_1");
				soundInstancePlayerHit[1] = soundPlayerHit[1].CreateInstance();
				soundPlayerHit[2] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Player_Hit_2");
				soundInstancePlayerHit[2] = soundPlayerHit[2].CreateInstance();
				soundFemaleHit[0] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Female_Hit_0");
				soundInstanceFemaleHit[0] = soundFemaleHit[0].CreateInstance();
				soundFemaleHit[1] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Female_Hit_1");
				soundInstanceFemaleHit[1] = soundFemaleHit[1].CreateInstance();
				soundFemaleHit[2] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Female_Hit_2");
				soundInstanceFemaleHit[2] = soundFemaleHit[2].CreateInstance();
				soundPlayerKilled = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Player_Killed");
				soundInstancePlayerKilled = soundPlayerKilled.CreateInstance();
				soundChat = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Chat");
				soundInstanceChat = soundChat.CreateInstance();
				soundGrass = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Grass");
				soundInstanceGrass = soundGrass.CreateInstance();
				soundDoorOpen = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Door_Opened");
				soundInstanceDoorOpen = soundDoorOpen.CreateInstance();
				soundDoorClosed = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Door_Closed");
				soundInstanceDoorClosed = soundDoorClosed.CreateInstance();
				soundMenuTick = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Menu_Tick");
				soundInstanceMenuTick = soundMenuTick.CreateInstance();
				soundMenuOpen = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Menu_Open");
				soundInstanceMenuOpen = soundMenuOpen.CreateInstance();
				soundMenuClose = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Menu_Close");
				soundInstanceMenuClose = soundMenuClose.CreateInstance();
				soundShatter = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Shatter");
				soundInstanceShatter = soundShatter.CreateInstance();
				soundCamera = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Camera");
				soundInstanceCamera = soundShatter.CreateInstance();
				for (int j = 0; j < soundCoin.Length; j++)
				{
					soundCoin[j] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Coin_" + j);
					soundInstanceCoin[j] = soundCoin[j].CreateInstance();
				}
				for (int k = 0; k < soundDrip.Length; k++)
				{
					soundDrip[k] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Drip_" + k);
					soundInstanceDrip[k] = soundDrip[k].CreateInstance();
				}
				for (int l = 0; l < soundZombie.Length; l++)
				{
					soundZombie[l] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Zombie_" + l);
					soundInstanceZombie[l] = soundZombie[l].CreateInstance();
				}
				for (int m = 0; m < soundLiquid.Length; m++)
				{
					soundLiquid[m] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Liquid_" + m);
					soundInstanceLiquid[m] = soundLiquid[m].CreateInstance();
				}
				for (int n = 0; n < soundRoar.Length; n++)
				{
					soundRoar[n] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Roar_" + n);
					soundInstanceRoar[n] = soundRoar[n].CreateInstance();
				}
				soundSplash[0] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Splash_0");
				soundInstanceSplash[0] = soundRoar[0].CreateInstance();
				soundSplash[1] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Splash_1");
				soundInstanceSplash[1] = soundSplash[1].CreateInstance();
				soundDoubleJump = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Double_Jump");
				soundInstanceDoubleJump = soundRoar[0].CreateInstance();
				soundRun = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Run");
				soundInstanceRun = soundRun.CreateInstance();
				soundCoins = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Coins");
				soundInstanceCoins = soundCoins.CreateInstance();
				soundUnlock = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Unlock");
				soundInstanceUnlock = soundUnlock.CreateInstance();
				soundMaxMana = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "MaxMana");
				soundInstanceMaxMana = soundMaxMana.CreateInstance();
				soundDrown = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Drown");
				soundInstanceDrown = soundDrown.CreateInstance();
				for (int num = 1; num < 126; num++)
				{
					soundItem[num] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Item_" + num);
					soundInstanceItem[num] = soundItem[num].CreateInstance();
				}
				for (int num2 = 1; num2 < 58; num2++)
				{
					soundNPCHit[num2] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "NPC_Hit_" + num2);
					soundInstanceNPCHit[num2] = soundNPCHit[num2].CreateInstance();
				}
				for (int num3 = 1; num3 < 63; num3++)
				{
					soundNPCKilled[num3] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "NPC_Killed_" + num3);
					soundInstanceNPCKilled[num3] = soundNPCKilled[num3].CreateInstance();
				}
				soundInstanceMoonlordCry = soundNPCKilled[10].CreateInstance();
			}
			catch
			{
				musicVolume = 0f;
				soundVolume = 0f;
			}
			tileCrackTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "TileCracks");
			chestStackTexture[0] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "ChestStack_0");
			chestStackTexture[1] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "ChestStack_1");
			smartDigTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "SmartDig");
			iceBarrierTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "IceBarrier");
			frozenTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Frozen");
			for (int num4 = 0; num4 < PVPTexture.Length; num4++)
			{
				PVPTexture[num4] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "UI" + Path.DirectorySeparatorChar + "PVP_" + num4);
			}
			for (int num5 = 0; num5 < EquipPageTexture.Length; num5++)
			{
				EquipPageTexture[num5] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "UI" + Path.DirectorySeparatorChar + "DisplaySlots_" + num5);
			}
			for (int num6 = 0; num6 < craftToggleTexture.Length; num6++)
			{
				craftToggleTexture[num6] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "UI" + Path.DirectorySeparatorChar + "Craft_Toggle_" + num6);
			}
			for (int num7 = 0; num7 < infoIconTexture.Length; num7++)
			{
				infoIconTexture[num7] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "UI" + Path.DirectorySeparatorChar + "InfoIcon_" + num7);
			}
			for (int num8 = 0; num8 < reforgeTexture.Length; num8++)
			{
				reforgeTexture[num8] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "UI" + Path.DirectorySeparatorChar + "Reforge_" + num8);
			}
			for (int num9 = 0; num9 < cameraTexture.Length; num9++)
			{
				cameraTexture[num9] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "UI" + Path.DirectorySeparatorChar + "Camera_" + num9);
			}
			craftUpButtonTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "RecUp");
			craftDownButtonTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "RecDown");
			scrollLeftButtonTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "RecLeft");
			scrollRightButtonTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "RecRight");
			oneDropLogo = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "OneDropLogo");
			pulleyTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "PlayerPulley");
			timerTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Timer");
			wofTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "WallOfFlesh");
			wallOutlineTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Wall_Outline");
			fadeTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "fade-out");
			ghostTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Ghost");
			evilCactusTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Evil_Cactus");
			goodCactusTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Good_Cactus");
			crimsonCactusTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Crimson_Cactus");
			wraithEyeTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Wraith_Eyes");
			fireflyTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Firefly");
			fireflyJarTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "FireflyJar");
			lightningbugTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "LightningBug");
			lightningbugJarTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "LightningBugJar");
			AchievementCompleteUI.LoadContent();
			for (int num10 = 1; num10 <= 3; num10++)
			{
				jellyfishBowlTexture[num10 - 1] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "jellyfishBowl" + num10);
			}
			glowSnailTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "GlowSnail");
			iceQueenTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "IceQueen");
			santaTankTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "SantaTank");
			jackHatTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "JackHat");
			treeFaceTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "TreeFace");
			pumpkingFaceTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "PumpkingFace");
			reaperEyeTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Reaper_Eyes");
			mapDeathTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapDeath");
			dukeFishronTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "DukeFishron");
			miniMinotaurTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MiniMinotaur");
			mapTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Map");
			mapBG1Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG1");
			mapBG2Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG2");
			mapBG3Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG3");
			mapBG4Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG4");
			mapBG5Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG5");
			mapBG6Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG6");
			mapBG7Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG7");
			mapBG8Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG8");
			mapBG9Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG9");
			mapBG10Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG10");
			mapBG11Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG11");
			mapBG12Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG12");
			mapBG13Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG13");
			mapBG14Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG14");
			mapBG15Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG15");
			hueTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Hue");
			colorSliderTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "ColorSlider");
			colorBarTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "ColorBar");
			colorBlipTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "ColorBlip");
			rainTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Rain");
			for (int num11 = 0; num11 < 214; num11++)
			{
				glowMaskTexture[num11] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Glow_" + num11);
			}
			for (int num12 = 0; num12 < 69; num12++)
			{
				extraTexture[num12] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Extra_" + num12);
			}
			for (int num13 = 0; num13 < 4; num13++)
			{
				coinTexture[num13] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Coin_" + num13);
			}
			magicPixel = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MagicPixel");
			miniMapFrameTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MiniMapFrame");
			miniMapFrame2Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MiniMapFrame2");
			for (int num14 = 0; num14 < xmasTree.Length; num14++)
			{
				xmasTree[num14] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Xmas_" + num14);
			}
			for (int num15 = 0; num15 < 4; num15++)
			{
				clothesTexture[num15] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Clothes_" + num15);
			}
			for (int num16 = 0; num16 < FlameTexture.Length; num16++)
			{
				FlameTexture[num16] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Flame_" + num16);
			}
			for (int num17 = 0; num17 < 3; num17++)
			{
				miniMapButtonTexture[num17] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MiniMapButton_" + num17);
			}
			for (int num18 = 0; num18 < 8; num18++)
			{
				mapIconTexture[num18] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Map_" + num18);
			}
			for (int num19 = 0; num19 < underworldTexture.Length; num19++)
			{
				underworldTexture[num19] = base.Content.Load<Texture2D>("Images/Backgrounds/Underworld " + num19);
			}
			destTexture[0] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Dest1");
			destTexture[1] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Dest2");
			destTexture[2] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Dest3");
			actuatorTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Actuator");
			wireTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Wires");
			wire2Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Wires2");
			wire3Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Wires3");
			flyingCarpetTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "FlyingCarpet");
			hbTexture1 = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "HealthBar1");
			hbTexture2 = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "HealthBar2");
			loTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "logo_" + rand.Next(1, 9));
			spriteBatch = new SpriteBatch(base.GraphicsDevice);
			tileBatch = new TileBatch(base.GraphicsDevice);
			for (int num20 = 1; num20 < 2; num20++)
			{
				bannerTexture[num20] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "House_Banner_" + num20);
			}
			for (int num21 = 0; num21 < npcHeadTexture.Length; num21++)
			{
				npcHeadTexture[num21] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "NPC_Head_" + num21);
			}
			for (int num22 = 0; num22 < npcHeadBossTexture.Length; num22++)
			{
				npcHeadBossTexture[num22] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "NPC_Head_Boss_" + num22);
			}
			for (int num23 = 1; num23 < BackPackTexture.Length; num23++)
			{
				BackPackTexture[num23] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "BackPack_" + num23);
			}
			for (int num24 = 1; num24 < 191; num24++)
			{
				buffTexture[num24] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Buff_" + num24);
			}
			LoadBackground(0);
			LoadBackground(49);
			minecartMountTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Minecart");
			for (int num25 = 0; num25 < rudolphMountTexture.Length; num25++)
			{
				rudolphMountTexture[num25] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Rudolph_" + num25);
			}
			bunnyMountTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Bunny");
			pigronMountTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Pigron");
			slimeMountTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Slime");
			turtleMountTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Turtle");
			unicornMountTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Unicorn");
			minecartMechMountTexture[0] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_MinecartMech");
			minecartMechMountTexture[1] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_MinecartMechGlow");
			cuteFishronMountTexture[0] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_CuteFishron1");
			cuteFishronMountTexture[1] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_CuteFishron2");
			minecartWoodMountTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_MinecartWood");
			beeMountTexture[0] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Bee");
			beeMountTexture[1] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_BeeWings");
			UFOMountTexture[0] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_UFO");
			UFOMountTexture[1] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_UFOGlow");
			drillMountTexture[0] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_DrillRing");
			drillMountTexture[1] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_DrillSeat");
			drillMountTexture[2] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_DrillDiode");
			drillMountTexture[3] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Glow_DrillRing");
			drillMountTexture[4] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Glow_DrillSeat");
			drillMountTexture[5] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Glow_DrillDiode");
			scutlixMountTexture[0] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Scutlix");
			scutlixMountTexture[1] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_ScutlixEyes");
			scutlixMountTexture[2] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_ScutlixEyeGlow");
			for (int num26 = 0; num26 < 3602; num26++)
			{
				itemTexture[num26] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Item_" + num26);
			}
			for (int num27 = 0; num27 < 6; num27++)
			{
				gemTexture[num27] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Gem_" + num27);
			}
			for (int num28 = 0; num28 < 540; num28++)
			{
				NPC nPC = new NPC();
				nPC.SetDefaults(num28);
				npcName[num28] = nPC.name;
			}
			for (int num29 = 0; num29 < 22; num29++)
			{
				cloudTexture[num29] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Cloud_" + num29);
			}
			for (int num30 = 0; num30 < 5; num30++)
			{
				starTexture[num30] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Star_" + num30);
			}
			for (int num31 = 0; num31 < 12; num31++)
			{
				liquidTexture[num31] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Liquid_" + num31);
			}
			waterfallManager.LoadContent(base.Content);
			npcToggleTexture[0] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "House_1");
			npcToggleTexture[1] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "House_2");
			HBLockTexture[0] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Lock_0");
			HBLockTexture[1] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Lock_1");
			gridTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Grid");
			trashTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Trash");
			cdTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "CoolDown");
			logoTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Logo");
			logo2Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Logo2");
			dustTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Dust");
			sunTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Sun");
			sun2Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Sun2");
			sun3Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Sun3");
			blackTileTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Black_Tile");
			heartTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Heart");
			heart2Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Heart2");
			bubbleTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Bubble");
			flameTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Flame");
			manaTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mana");
			for (int num32 = 0; num32 < cursorTextures.Length; num32++)
			{
				cursorTextures[num32] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "UI" + Path.DirectorySeparatorChar + "Cursor_" + num32);
			}
			ninjaTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Ninja");
			antLionTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "AntlionBody");
			spikeBaseTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Spike_Base");
			woodTexture[0] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Tiles_5_0");
			woodTexture[1] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Tiles_5_1");
			woodTexture[2] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Tiles_5_2");
			woodTexture[3] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Tiles_5_3");
			woodTexture[4] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Tiles_5_4");
			woodTexture[5] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Tiles_5_5");
			woodTexture[6] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Tiles_5_6");
			pumpkinMoonTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Moon_Pumpkin");
			snowMoonTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Moon_Snow");
			for (int num33 = 0; num33 < moonTexture.Length; num33++)
			{
				moonTexture[num33] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Moon_" + num33);
			}
			for (int num34 = 0; num34 < treeTopTexture.Length; num34++)
			{
				treeTopTexture[num34] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Tree_Tops_" + num34);
			}
			for (int num35 = 0; num35 < treeBranchTexture.Length; num35++)
			{
				treeBranchTexture[num35] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Tree_Branches_" + num35);
			}
			shroomCapTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Shroom_Tops");
			inventoryBackTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back");
			inventoryBack2Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back2");
			inventoryBack3Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back3");
			inventoryBack4Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back4");
			inventoryBack5Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back5");
			inventoryBack6Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back6");
			inventoryBack7Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back7");
			inventoryBack8Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back8");
			inventoryBack9Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back9");
			inventoryBack10Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back10");
			inventoryBack11Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back11");
			inventoryBack12Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back12");
			inventoryBack13Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back13");
			inventoryBack14Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back14");
			inventoryBack15Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back15");
			hairStyleBackTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "HairStyleBack");
			clothesStyleBackTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "ClothesStyleBack");
			inventoryTickOffTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Tick_Off");
			inventoryTickOnTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Tick_On");
			textBackTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Text_Back");
			chatTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chat");
			chat2Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chat2");
			chatBackTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chat_Back");
			teamTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Team");
			PlayerDataInitializer.Load();
			chaosTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chaos");
			EyeLaserTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Eye_Laser");
			BoneEyesTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Bone_Eyes");
			BoneLaserTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Bone_Laser");
			lightDiscTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Light_Disc");
			confuseTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Confuse");
			probeTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Probe");
			sunOrbTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "SunOrb");
			sunAltarTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "SunAltar");
			xmasLightTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "XmasLight");
			beetleTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "BeetleOrb");
			for (int num36 = 0; num36 < 16; num36++)
			{
				chainsTexture[num36] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chains_" + num36);
			}
			chain20Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain20");
			fishingLineTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "FishingLine");
			chainTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain");
			chain2Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain2");
			chain3Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain3");
			chain4Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain4");
			chain5Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain5");
			chain6Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain6");
			chain7Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain7");
			chain8Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain8");
			chain9Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain9");
			chain10Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain10");
			chain11Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain11");
			chain12Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain12");
			chain13Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain13");
			chain14Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain14");
			chain15Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain15");
			chain16Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain16");
			chain17Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain17");
			chain18Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain18");
			chain19Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain19");
			chain20Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain20");
			chain21Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain21");
			chain22Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain22");
			chain23Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain23");
			chain24Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain24");
			chain25Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain25");
			chain26Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain26");
			chain27Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain27");
			chain28Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain28");
			chain29Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain29");
			chain30Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain30");
			chain31Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain31");
			chain32Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain32");
			chain33Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain33");
			chain34Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain34");
			chain35Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain35");
			chain36Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain36");
			chain37Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain37");
			chain38Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain38");
			chain39Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain39");
			chain40Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain40");
			eyeLaserSmallTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Eye_Laser_Small");
			boneArmTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Arm_Bone");
			pumpkingArmTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "PumpkingArm");
			pumpkingCloakTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "PumpkingCloak");
			boneArm2Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Arm_Bone_2");
			for (int num37 = 1; num37 < gemChainTexture.Length; num37++)
			{
				gemChainTexture[num37] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "GemChain_" + num37);
			}
			for (int num38 = 1; num38 < golemTexture.Length; num38++)
			{
				golemTexture[num38] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "GolemLights" + num38);
			}
			fontItemStack = base.Content.Load<SpriteFont>("Fonts" + Path.DirectorySeparatorChar + "Item_Stack");
			fontMouseText = base.Content.Load<SpriteFont>("Fonts" + Path.DirectorySeparatorChar + "Mouse_Text");
			fontDeathText = base.Content.Load<SpriteFont>("Fonts" + Path.DirectorySeparatorChar + "Death_Text");
			fontCombatText[0] = base.Content.Load<SpriteFont>("Fonts" + Path.DirectorySeparatorChar + "Combat_Text");
			fontCombatText[1] = base.Content.Load<SpriteFont>("Fonts" + Path.DirectorySeparatorChar + "Combat_Crit");
			Mount.Initialize();
			Minecart.Initialize();
		}

		protected override void UnloadContent()
		{
		}

		public static void stopMoonEvent()
		{
			if (pumpkinMoon)
			{
				pumpkinMoon = false;
				if (netMode != 1)
				{
					NPC.waveKills = 0f;
					NPC.waveCount = 0;
				}
			}
			if (snowMoon)
			{
				snowMoon = false;
				if (netMode != 1)
				{
					NPC.waveKills = 0f;
					NPC.waveCount = 0;
				}
			}
		}

		public static void startPumpkinMoon()
		{
			pumpkinMoon = true;
			snowMoon = false;
			bloodMoon = false;
			if (netMode != 1)
			{
				NPC.waveKills = 0f;
				NPC.waveCount = 1;
				string ınvasionWaveText = Lang.GetInvasionWaveText(1, 305);
				if (netMode == 0)
				{
					NewText(ınvasionWaveText, 175, 75);
				}
				else if (netMode == 2)
				{
					NetMessage.SendData(25, -1, -1, ınvasionWaveText, 16, 175f, 75f, 255f);
				}
			}
		}

		public static void startSnowMoon()
		{
			snowMoon = true;
			pumpkinMoon = false;
			bloodMoon = false;
			if (netMode != 1)
			{
				NPC.waveKills = 0f;
				NPC.waveCount = 1;
				string ınvasionWaveText = Lang.GetInvasionWaveText(1, 338, 342);
				if (netMode == 0)
				{
					NewText(ınvasionWaveText, 175, 75);
				}
				else if (netMode == 2)
				{
					NetMessage.SendData(25, -1, -1, ınvasionWaveText, 16, 175f, 75f, 255f);
				}
			}
		}

		protected void UpdateMusic()
		{
			if (musicVolume == 0f)
			{
				curMusic = 0;
			}
			try
			{
				if (!dedServ)
				{
					if (curMusic > 0)
					{
						if (!base.IsActive)
						{
							for (int i = 0; i < music.Length; i++)
							{
								if (music[i] != null && !music[i].IsPaused && music[i].IsPlaying && musicFade[i] > 0f)
								{
									try
									{
										music[i].Pause();
									}
									catch (Exception)
									{
									}
								}
							}
						}
						else
						{
							for (int j = 0; j < music.Length; j++)
							{
								if (music[j] != null && music[j].IsPaused && musicFade[j] > 0f)
								{
									try
									{
										music[j].Resume();
									}
									catch (Exception)
									{
									}
								}
							}
						}
					}
					bool flag = false;
					bool flag2 = false;
					bool flag3 = false;
					bool flag4 = false;
					bool flag5 = false;
					bool flag6 = false;
					bool flag7 = false;
					bool flag8 = false;
					bool flag9 = false;
					bool flag10 = false;
					bool flag11 = false;
					Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)screenPosition.X, (int)screenPosition.Y, screenWidth, screenHeight);
					int num = 5000;
					for (int k = 0; k < 200; k++)
					{
						if (npc[k].active)
						{
							int num2 = 0;
							switch (npc[k].type)
							{
							case 13:
							case 14:
							case 15:
								num2 = 1;
								break;
							case 26:
							case 27:
							case 28:
							case 29:
							case 111:
								num2 = 11;
								break;
							case 113:
							case 114:
							case 125:
							case 126:
								num2 = 2;
								break;
							case 134:
							case 143:
							case 144:
							case 145:
							case 266:
								num2 = 3;
								break;
							case 212:
							case 213:
							case 214:
							case 215:
							case 216:
							case 491:
								num2 = 8;
								break;
							case 245:
								num2 = 4;
								break;
							case 222:
								num2 = 5;
								break;
							case 262:
							case 263:
							case 264:
								num2 = 6;
								break;
							case 381:
							case 382:
							case 383:
							case 385:
							case 386:
							case 388:
							case 389:
							case 390:
							case 391:
							case 395:
							case 520:
								num2 = 9;
								break;
							case 398:
								num2 = 7;
								break;
							case 422:
							case 493:
							case 507:
							case 517:
								num2 = 10;
								break;
							case 439:
								num2 = 4;
								break;
							case 438:
								if (npc[k].ai[1] == 1f)
								{
									num2 = 4;
								}
								break;
							}
							if (num2 == 0 && npc[k].boss)
							{
								num2 = 1;
							}
							if (num2 != 0)
							{
								Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle((int)(npc[k].position.X + (float)(npc[k].width / 2)) - num, (int)(npc[k].position.Y + (float)(npc[k].height / 2)) - num, num * 2, num * 2);
								if (rectangle.Intersects(value))
								{
									switch (num2)
									{
									case 1:
										flag = true;
										break;
									case 2:
										flag2 = true;
										break;
									case 3:
										flag3 = true;
										break;
									case 4:
										flag4 = true;
										break;
									case 5:
										flag5 = true;
										break;
									case 6:
										flag6 = true;
										break;
									case 7:
										flag7 = true;
										break;
									case 8:
										flag8 = true;
										break;
									case 9:
										flag9 = true;
										break;
									case 10:
										flag10 = true;
										break;
									case 11:
										flag11 = true;
										break;
									}
									break;
								}
							}
						}
					}
					int num3 = (int)((screenPosition.X + (float)(screenWidth / 2)) / 16f);
					if (musicVolume == 0f)
					{
						newMusic = 0;
					}
					else if (gameMenu)
					{
						if (netMode != 2)
						{
							newMusic = 6;
						}
						else
						{
							newMusic = 0;
						}
					}
					else
					{
						float num4 = maxTilesX / 4200;
						num4 *= num4;
						float num5 = (float)((double)((screenPosition.Y + (float)(screenHeight / 2)) / 16f - (65f + 10f * num4)) / (worldSurface / 5.0));
						if (flag7)
						{
							newMusic = 38;
						}
						else if (flag9)
						{
							newMusic = 37;
						}
						else if (flag10)
						{
							newMusic = 34;
						}
						else if (flag6)
						{
							newMusic = 24;
						}
						else if (flag2)
						{
							newMusic = 12;
						}
						else if (flag)
						{
							newMusic = 5;
						}
						else if (flag3)
						{
							newMusic = 13;
						}
						else if (flag4)
						{
							newMusic = 17;
						}
						else if (flag5)
						{
							newMusic = 25;
						}
						else if (flag8)
						{
							newMusic = 35;
						}
						else if (flag11)
						{
							newMusic = 39;
						}
						else if (player[myPlayer].position.Y > (float)((maxTilesY - 200) * 16))
						{
							newMusic = 36;
						}
						else if (eclipse && (double)player[myPlayer].position.Y < worldSurface * 16.0 + (double)(screenHeight / 2))
						{
							newMusic = 27;
						}
						else if (num5 < 1f)
						{
							newMusic = 15;
						}
						else if (tile[(int)(player[myPlayer].Center.X / 16f), (int)(player[myPlayer].Center.Y / 16f)].wall == 87)
						{
							newMusic = 26;
						}
						else if ((bgStyle == 9 && (double)player[myPlayer].position.Y < worldSurface * 16.0 + (double)(screenHeight / 2)) || ugBack == 2)
						{
							newMusic = 29;
						}
						else if (player[myPlayer].ZoneCorrupt)
						{
							if ((double)player[myPlayer].position.Y > worldSurface * 16.0 + (double)(screenHeight / 2))
							{
								newMusic = 10;
							}
							else
							{
								newMusic = 8;
							}
						}
						else if (player[myPlayer].ZoneCrimson)
						{
							if ((double)player[myPlayer].position.Y > worldSurface * 16.0 + (double)(screenHeight / 2))
							{
								newMusic = 33;
							}
							else
							{
								newMusic = 16;
							}
						}
						else if (player[myPlayer].ZoneDungeon)
						{
							newMusic = 23;
						}
						else if (player[myPlayer].ZoneMeteor)
						{
							newMusic = 2;
						}
						else if (player[myPlayer].ZoneJungle)
						{
							newMusic = 7;
						}
						else if (player[myPlayer].ZoneSnow)
						{
							if ((double)player[myPlayer].position.Y > worldSurface * 16.0 + (double)(screenHeight / 2))
							{
								newMusic = 20;
							}
							else
							{
								newMusic = 14;
							}
						}
						else if ((double)player[myPlayer].position.Y > worldSurface * 16.0 + (double)(screenHeight / 2))
						{
							if (player[myPlayer].ZoneHoly)
							{
								newMusic = 11;
							}
							else if (sandTiles > 2200)
							{
								newMusic = 21;
							}
							else
							{
								if (ugMusic == 0)
								{
									ugMusic = 4;
								}
								if (!music[4].IsPlaying && !music[31].IsPlaying)
								{
									if (musicFade[4] == 1f)
									{
										musicFade[31] = 1f;
									}
									if (musicFade[31] == 1f)
									{
										musicFade[4] = 1f;
									}
									switch (rand.Next(2))
									{
									case 0:
										ugMusic = 4;
										musicFade[31] = 0f;
										break;
									case 1:
										ugMusic = 31;
										musicFade[4] = 0f;
										break;
									}
								}
								newMusic = ugMusic;
							}
						}
						else if (dayTime && player[myPlayer].ZoneHoly)
						{
							if (cloudAlpha > 0f && !gameMenu)
							{
								newMusic = 19;
							}
							else
							{
								newMusic = 9;
							}
						}
						else if ((double)(screenPosition.Y / 16f) < worldSurface + 10.0 && (num3 < 380 || num3 > maxTilesX - 380))
						{
							newMusic = 22;
						}
						else if (sandTiles > 1000)
						{
							newMusic = 21;
						}
						else if (dayTime)
						{
							if (cloudAlpha > 0f && !gameMenu)
							{
								newMusic = 19;
							}
							else
							{
								if (dayMusic == 0)
								{
									dayMusic = 1;
								}
								if (!music[1].IsPlaying && !music[18].IsPlaying)
								{
									switch (rand.Next(2))
									{
									case 0:
										dayMusic = 1;
										break;
									case 1:
										dayMusic = 18;
										break;
									}
								}
								newMusic = dayMusic;
							}
						}
						else if (!dayTime)
						{
							if (bloodMoon)
							{
								newMusic = 2;
							}
							else if (cloudAlpha > 0f && !gameMenu)
							{
								newMusic = 19;
							}
							else
							{
								newMusic = 3;
							}
						}
						if ((double)(screenPosition.Y / 16f) < worldSurface + 10.0 && pumpkinMoon)
						{
							newMusic = 30;
						}
						if ((double)(screenPosition.Y / 16f) < worldSurface + 10.0 && snowMoon)
						{
							newMusic = 32;
						}
					}
					if (gameMenu || musicVolume == 0f)
					{
						musicBox2 = -1;
						musicBox = -1;
					}
					if (musicBox2 >= 0)
					{
						musicBox = musicBox2;
					}
					if (musicBox >= 0)
					{
						if (musicBox == 0)
						{
							newMusic = 1;
						}
						if (musicBox == 1)
						{
							newMusic = 2;
						}
						if (musicBox == 2)
						{
							newMusic = 3;
						}
						if (musicBox == 4)
						{
							newMusic = 4;
						}
						if (musicBox == 5)
						{
							newMusic = 5;
						}
						if (musicBox == 3)
						{
							newMusic = 6;
						}
						if (musicBox == 6)
						{
							newMusic = 7;
						}
						if (musicBox == 7)
						{
							newMusic = 8;
						}
						if (musicBox == 9)
						{
							newMusic = 9;
						}
						if (musicBox == 8)
						{
							newMusic = 10;
						}
						if (musicBox == 11)
						{
							newMusic = 11;
						}
						if (musicBox == 10)
						{
							newMusic = 12;
						}
						if (musicBox == 12)
						{
							newMusic = 13;
						}
						if (musicBox == 13)
						{
							newMusic = 14;
						}
						if (musicBox == 14)
						{
							newMusic = 15;
						}
						if (musicBox == 15)
						{
							newMusic = 16;
						}
						if (musicBox == 16)
						{
							newMusic = 17;
						}
						if (musicBox == 17)
						{
							newMusic = 18;
						}
						if (musicBox == 18)
						{
							newMusic = 19;
						}
						if (musicBox == 19)
						{
							newMusic = 20;
						}
						if (musicBox == 20)
						{
							newMusic = 21;
						}
						if (musicBox == 21)
						{
							newMusic = 22;
						}
						if (musicBox == 22)
						{
							newMusic = 23;
						}
						if (musicBox == 23)
						{
							newMusic = 24;
						}
						if (musicBox == 24)
						{
							newMusic = 25;
						}
						if (musicBox == 25)
						{
							newMusic = 26;
						}
						if (musicBox == 26)
						{
							newMusic = 27;
						}
						if (musicBox == 27)
						{
							newMusic = 29;
						}
						if (musicBox == 28)
						{
							newMusic = 30;
						}
						if (musicBox == 29)
						{
							newMusic = 31;
						}
						if (musicBox == 30)
						{
							newMusic = 32;
						}
						if (musicBox == 31)
						{
							newMusic = 33;
						}
						if (musicBox == 32)
						{
							newMusic = 38;
						}
						if (musicBox == 33)
						{
							newMusic = 37;
						}
						if (musicBox == 34)
						{
							newMusic = 35;
						}
						if (musicBox == 35)
						{
							newMusic = 36;
						}
						if (musicBox == 36)
						{
							newMusic = 34;
						}
						if (musicBox == 37)
						{
							newMusic = 39;
						}
					}
					curMusic = newMusic;
					float num6 = 1f;
					if (NPC.MoonLordCountdown > 0)
					{
						num6 = (float)NPC.MoonLordCountdown / 3600f;
						num6 *= num6;
						if (NPC.MoonLordCountdown > 720)
						{
							num6 = MathHelper.Lerp(0f, 1f, num6);
						}
						else
						{
							num6 = 0f;
							curMusic = 0;
						}
						if (NPC.MoonLordCountdown == 1 && curMusic >= 1 && curMusic < 40)
						{
							musicFade[curMusic] = 0f;
						}
					}
					for (int l = 1; l < 40; l++)
					{
						if (l == 28)
						{
							if (cloudAlpha > 0f && (double)player[myPlayer].position.Y < worldSurface * 16.0 + (double)(screenHeight / 2) && !player[myPlayer].ZoneSnow)
							{
								if (ambientVolume == 0f)
								{
									if (music[l].IsPlaying)
									{
										music[l].Stop(AudioStopOptions.Immediate);
									}
								}
								else if (!music[l].IsPlaying)
								{
									music[l] = soundBank.GetCue("Music_" + l);
									music[l].Play();
									music[l].SetVariable("Volume", musicFade[l] * ambientVolume);
								}
								else if (music[l].IsPaused)
								{
									music[l].Resume();
								}
								else
								{
									musicFade[l] += 0.005f;
									if (musicFade[l] > 1f)
									{
										musicFade[l] = 1f;
									}
									music[l].SetVariable("Volume", musicFade[l] * ambientVolume);
								}
							}
							else if (music[l].IsPlaying)
							{
								if (musicFade[curMusic] > 0.25f)
								{
									musicFade[l] -= 0.005f;
								}
								else if (curMusic == 0)
								{
									musicFade[l] = 0f;
								}
								if (musicFade[l] <= 0f)
								{
									musicFade[l] -= 0f;
									music[l].Stop(AudioStopOptions.Immediate);
								}
								else
								{
									music[l].SetVariable("Volume", musicFade[l] * ambientVolume);
								}
							}
							else
							{
								musicFade[l] = 0f;
							}
						}
						else if (l == curMusic)
						{
							if (!music[l].IsPlaying)
							{
								music[l] = soundBank.GetCue("Music_" + l);
								music[l].Play();
								music[l].SetVariable("Volume", musicFade[l] * musicVolume * num6);
							}
							else
							{
								musicFade[l] += 0.005f;
								if (musicFade[l] > 1f)
								{
									musicFade[l] = 1f;
								}
								music[l].SetVariable("Volume", musicFade[l] * musicVolume * num6);
							}
						}
						else if (music[l].IsPlaying)
						{
							if (musicFade[curMusic] > 0.25f)
							{
								musicFade[l] -= 0.005f;
							}
							else if (curMusic == 0)
							{
								musicFade[l] = 0f;
							}
							if (musicFade[l] <= 0f)
							{
								musicFade[l] -= 0f;
								music[l].Stop(AudioStopOptions.Immediate);
							}
							else
							{
								music[l].SetVariable("Volume", musicFade[l] * musicVolume * num6);
							}
						}
						else
						{
							musicFade[l] = 0f;
						}
					}
					if (musicError > 0)
					{
						musicError--;
					}
				}
			}
			catch
			{
				musicError++;
				if (musicError >= 100)
				{
					musicError = 0;
					musicVolume = 0f;
				}
			}
		}

		public static void snowing()
		{
			if (!gamePaused && snowTiles > 0 && (double)player[myPlayer].position.Y < worldSurface * 16.0)
			{
				int maxValue = 800 / snowTiles;
				float num = (float)screenWidth / 1920f;
				int num2 = (int)(500f * num);
				num2 = (int)((float)num2 * (1f + 2f * cloudAlpha));
				float num3 = 1f + 50f * cloudAlpha;
				for (int i = 0; (float)i < num3; i++)
				{
					try
					{
						if (!((float)snowDust < (float)num2 * (gfxQuality / 2f + 0.5f) + (float)num2 * 0.1f))
						{
							return;
						}
						if (rand.Next(maxValue) == 0)
						{
							int num4 = rand.Next(screenWidth + 1000) - 500;
							int num5 = (int)screenPosition.Y - rand.Next(50);
							if (player[myPlayer].velocity.Y > 0f)
							{
								num5 -= (int)player[myPlayer].velocity.Y;
							}
							if (rand.Next(5) == 0)
							{
								num4 = rand.Next(500) - 500;
							}
							else if (rand.Next(5) == 0)
							{
								num4 = rand.Next(500) + screenWidth;
							}
							if (num4 < 0 || num4 > screenWidth)
							{
								num5 += rand.Next((int)((double)screenHeight * 0.5)) + (int)((double)screenHeight * 0.1);
							}
							num4 += (int)screenPosition.X;
							int num6 = num4 / 16;
							int num7 = num5 / 16;
							if (tile[num6, num7] != null && tile[num6, num7].wall == 0)
							{
								int num8 = Dust.NewDust(new Vector2(num4, num5), 10, 10, 76);
								dust[num8].scale += cloudAlpha * 0.2f;
								dust[num8].velocity.Y = 3f + (float)rand.Next(30) * 0.1f;
								dust[num8].velocity.Y *= dust[num8].scale;
								dust[num8].velocity.X = windSpeed + (float)rand.Next(-10, 10) * 0.1f;
								dust[num8].velocity.X += windSpeed * cloudAlpha * 10f;
								dust[num8].velocity.Y *= 1f + 0.3f * cloudAlpha;
								dust[num8].scale += cloudAlpha * 0.2f;
								dust[num8].velocity *= 1f + cloudAlpha * 0.5f;
							}
						}
					}
					catch
					{
					}
				}
			}
		}

		public static void checkXMas()
		{
			DateTime now = DateTime.Now;
			int day = now.Day;
			int month = now.Month;
			if (day >= 15 && month == 12)
			{
				xMas = true;
			}
			else
			{
				xMas = false;
			}
		}

		public static void checkHalloween()
		{
			DateTime now = DateTime.Now;
			int day = now.Day;
			int month = now.Month;
			if (day >= 20 && month == 10)
			{
				halloween = true;
			}
			else if (day <= 10 && month == 11)
			{
				halloween = true;
			}
			else
			{
				halloween = false;
			}
		}

		public void updateCloudLayer()
		{
			if (netMode == 1 || (netMode == 0 && gameMenu))
			{
				return;
			}
			int num = 86400;
			int num2 = num / 24;
			float num3 = Math.Max(1f, 1f + 4f * cloudAlpha);
			if (cloudBGActive > 0f)
			{
				if (cloudBGActive > 1f)
				{
					cloudBGActive -= (float)dayRate / num3;
				}
				if (cloudBGActive < 1f)
				{
					cloudBGActive = 1f;
				}
				if (cloudBGActive == 1f && rand.Next((int)((float)(num2 * 2 / Math.Max(dayRate, 1)) * num3)) == 0)
				{
					cloudBGActive = -rand.Next(num2 * 4, num * 4);
					if (netMode == 2)
					{
						NetMessage.SendData(7);
					}
				}
				return;
			}
			if (cloudBGActive < 0f)
			{
				cloudBGActive += (float)dayRate * num3;
				if (raining)
				{
					cloudBGActive += (float)(2 * dayRate) * num3;
				}
			}
			if (cloudBGActive > 0f)
			{
				cloudBGActive = 0f;
			}
			if (cloudBGActive == 0f && rand.Next((int)((float)(num2 * 8 / ((dayRate == 0) ? 1 : dayRate)) / num3)) == 0)
			{
				cloudBGActive = rand.Next(num2 * 3, num * 2);
				if (netMode == 2)
				{
					NetMessage.SendData(7);
				}
			}
		}

		public static void TeleportEffect(Microsoft.Xna.Framework.Rectangle effectRect, int Style, int extraInfo = 0)
		{
			switch (Style)
			{
			case 0:
			{
				PlaySound(2, effectRect.X + effectRect.Width / 2, effectRect.Y + effectRect.Height / 2, 6);
				int num2 = effectRect.Width * effectRect.Height / 5;
				for (int j = 0; j < num2; j++)
				{
					int num3 = Dust.NewDust(new Vector2(effectRect.X, effectRect.Y), effectRect.Width, effectRect.Height, 159);
					Main.dust[num3].scale = (float)rand.Next(20, 70) * 0.01f;
					if (j < 10)
					{
						Main.dust[num3].scale += 0.25f;
					}
					if (j < 5)
					{
						Main.dust[num3].scale += 0.25f;
					}
				}
				break;
			}
			case 1:
			{
				PlaySound(2, effectRect.X + effectRect.Width / 2, effectRect.Y + effectRect.Height / 2, 8);
				int num5 = effectRect.Width * effectRect.Height / 5;
				for (int m = 0; m < num5; m++)
				{
					int num6 = Dust.NewDust(new Vector2(effectRect.X, effectRect.Y), effectRect.Width, effectRect.Height, 164);
					Main.dust[num6].scale = (float)rand.Next(20, 70) * 0.01f;
					if (m < 10)
					{
						Main.dust[num6].scale += 0.25f;
					}
					if (m < 5)
					{
						Main.dust[num6].scale += 0.25f;
					}
				}
				break;
			}
			case 2:
			{
				for (int n = 0; n < 50; n++)
				{
					Main.dust[Dust.NewDust(new Vector2(effectRect.X, effectRect.Y), effectRect.Width, effectRect.Height, 58, 0f, 0f, 150, Microsoft.Xna.Framework.Color.GhostWhite, 1.2f)].velocity *= 0.5f;
				}
				break;
			}
			case 3:
			{
				PlaySound(2, effectRect.X + effectRect.Width / 2, effectRect.Y + effectRect.Height / 2, 6);
				for (int k = 0; k < 50; k++)
				{
					int num4 = Dust.NewDust(new Vector2(effectRect.X, effectRect.Y), effectRect.Width, effectRect.Height, 180);
					Main.dust[num4].noGravity = true;
					for (int l = 0; l < 5; l++)
					{
						if (rand.Next(3) == 0)
						{
							Main.dust[num4].velocity *= 0.75f;
						}
					}
					if (rand.Next(3) == 0)
					{
						Main.dust[num4].velocity *= 2f;
						Main.dust[num4].scale *= 1.2f;
					}
					if (rand.Next(3) == 0)
					{
						Main.dust[num4].velocity *= 2f;
						Main.dust[num4].scale *= 1.2f;
					}
					if (rand.Next(2) == 0)
					{
						Main.dust[num4].fadeIn = (float)rand.Next(75, 100) * 0.01f;
						Main.dust[num4].scale = (float)rand.Next(25, 75) * 0.01f;
					}
					Main.dust[num4].scale *= 0.8f;
				}
				break;
			}
			case 4:
			{
				PlaySound(2, effectRect.X + effectRect.Width / 2, effectRect.Y + effectRect.Height / 2, 8);
				int num = effectRect.Width * effectRect.Height / 5;
				for (int i = 0; i < num; i++)
				{
					Dust dust = Main.dust[Dust.NewDust(effectRect.TopLeft(), effectRect.Width, effectRect.Height, 263)];
					dust.color = PortalHelper.GetPortalColor(extraInfo);
					dust.noLight = true;
					dust.noGravity = true;
					dust.scale = 1.2f;
					dust.fadeIn = 0.4f;
					dust.color.A = byte.MaxValue;
				}
				break;
			}
			}
		}

		public static void Ambience()
		{
			ambientCounter++;
			if (ambientCounter >= 15)
			{
				ambientCounter = 0;
				PlaySound(34, (int)ambientWaterfallX, (int)ambientWaterfallY, (int)ambientWaterfallStrength);
				float num = Math.Abs(ambientLavaX - (screenPosition.X + (float)(screenWidth / 2))) + Math.Abs(ambientLavaY - (screenPosition.Y + (float)(screenHeight / 2)));
				float num2 = Math.Abs(ambientLavafallX - (screenPosition.X + (float)(screenWidth / 2))) + Math.Abs(ambientLavafallY - (screenPosition.Y + (float)(screenHeight / 2)));
				float num3 = ambientLavaX;
				float num4 = ambientLavaY;
				if (num2 < num)
				{
					num3 = ambientLavafallX;
					num4 = ambientLavafallY;
				}
				float num5 = ambientLavafallStrength + ambientLavaStrength;
				PlaySound(35, (int)num3, (int)num4, (int)num5);
			}
		}

		public static void CritterCages()
		{
			if (!critterCage)
			{
				return;
			}
			for (int i = 0; i < cageFrames; i++)
			{
				if (bunnyCageFrame[i] == 0)
				{
					bunnyCageFrameCounter[i]++;
					if (bunnyCageFrameCounter[i] <= rand.Next(30, 900))
					{
						continue;
					}
					if (rand.Next(3) != 0)
					{
						int num = rand.Next(7);
						if (num == 0)
						{
							bunnyCageFrame[i] = 4;
						}
						else if (num <= 2)
						{
							bunnyCageFrame[i] = 2;
						}
						else
						{
							bunnyCageFrame[i] = 1;
						}
					}
					bunnyCageFrameCounter[i] = 0;
				}
				else if (bunnyCageFrame[i] == 1)
				{
					bunnyCageFrameCounter[i]++;
					if (bunnyCageFrameCounter[i] >= 10)
					{
						bunnyCageFrameCounter[i] = 0;
						bunnyCageFrame[i] = 0;
					}
				}
				else if (bunnyCageFrame[i] >= 2 && bunnyCageFrame[i] <= 3)
				{
					bunnyCageFrameCounter[i]++;
					if (bunnyCageFrameCounter[i] >= 10)
					{
						bunnyCageFrameCounter[i] = 0;
						bunnyCageFrame[i]++;
					}
					if (bunnyCageFrame[i] > 3)
					{
						bunnyCageFrame[i] = 0;
					}
				}
				else if (bunnyCageFrame[i] >= 4 && bunnyCageFrame[i] <= 10)
				{
					bunnyCageFrameCounter[i]++;
					if (bunnyCageFrameCounter[i] >= 5)
					{
						bunnyCageFrameCounter[i] = 0;
						bunnyCageFrame[i]++;
					}
				}
				else if (bunnyCageFrame[i] == 11)
				{
					bunnyCageFrameCounter[i]++;
					if (bunnyCageFrameCounter[i] <= rand.Next(30, 900))
					{
						continue;
					}
					if (rand.Next(3) != 0)
					{
						if (rand.Next(7) == 0)
						{
							bunnyCageFrame[i] = 13;
						}
						else
						{
							bunnyCageFrame[i] = 12;
						}
					}
					bunnyCageFrameCounter[i] = 0;
				}
				else if (bunnyCageFrame[i] == 12)
				{
					bunnyCageFrameCounter[i]++;
					if (bunnyCageFrameCounter[i] >= 10)
					{
						bunnyCageFrameCounter[i] = 0;
						bunnyCageFrame[i] = 11;
					}
				}
				else if (bunnyCageFrame[i] >= 13)
				{
					bunnyCageFrameCounter[i]++;
					if (bunnyCageFrameCounter[i] >= 5)
					{
						bunnyCageFrameCounter[i] = 0;
						bunnyCageFrame[i]++;
					}
					if (bunnyCageFrame[i] > 21)
					{
						bunnyCageFrame[i] = 0;
					}
				}
			}
			for (int j = 0; j < cageFrames; j++)
			{
				if (squirrelCageFrame[j] == 0)
				{
					squirrelCageFrameCounter[j]++;
					if (squirrelCageFrameCounter[j] <= rand.Next(30, 900))
					{
						continue;
					}
					if (rand.Next(3) != 0)
					{
						int num = rand.Next(7);
						if (num == 0)
						{
							squirrelCageFrame[j] = 4;
						}
						else if (num <= 2)
						{
							squirrelCageFrame[j] = 2;
						}
						else
						{
							squirrelCageFrame[j] = 1;
						}
					}
					squirrelCageFrameCounter[j] = 0;
				}
				else if (squirrelCageFrame[j] == 1)
				{
					squirrelCageFrameCounter[j]++;
					if (squirrelCageFrameCounter[j] >= 10)
					{
						squirrelCageFrameCounter[j] = 0;
						squirrelCageFrame[j] = 0;
					}
				}
				else if (squirrelCageFrame[j] >= 2 && squirrelCageFrame[j] <= 3)
				{
					squirrelCageFrameCounter[j]++;
					if (squirrelCageFrameCounter[j] >= 5)
					{
						squirrelCageFrameCounter[j] = 0;
						squirrelCageFrame[j]++;
					}
					if (squirrelCageFrame[j] > 3)
					{
						if (rand.Next(5) == 0)
						{
							squirrelCageFrame[j] = 0;
						}
						else
						{
							squirrelCageFrame[j] = 2;
						}
					}
				}
				else if (squirrelCageFrame[j] >= 4 && squirrelCageFrame[j] <= 8)
				{
					squirrelCageFrameCounter[j]++;
					if (squirrelCageFrameCounter[j] >= 5)
					{
						squirrelCageFrameCounter[j] = 0;
						squirrelCageFrame[j]++;
					}
				}
				else if (squirrelCageFrame[j] == 9)
				{
					squirrelCageFrameCounter[j]++;
					if (squirrelCageFrameCounter[j] <= rand.Next(30, 900))
					{
						continue;
					}
					if (rand.Next(3) != 0)
					{
						int num = rand.Next(7);
						if (num == 0)
						{
							squirrelCageFrame[j] = 13;
						}
						else if (num <= 2)
						{
							squirrelCageFrame[j] = 11;
						}
						else
						{
							squirrelCageFrame[j] = 10;
						}
					}
					squirrelCageFrameCounter[j] = 0;
				}
				else if (squirrelCageFrame[j] == 10)
				{
					squirrelCageFrameCounter[j]++;
					if (squirrelCageFrameCounter[j] >= 10)
					{
						squirrelCageFrameCounter[j] = 0;
						squirrelCageFrame[j] = 9;
					}
				}
				else if (squirrelCageFrame[j] == 11 || squirrelCageFrame[j] == 12)
				{
					squirrelCageFrameCounter[j]++;
					if (squirrelCageFrameCounter[j] < 5)
					{
						continue;
					}
					squirrelCageFrame[j]++;
					if (squirrelCageFrame[j] > 12)
					{
						if (rand.Next(5) != 0)
						{
							squirrelCageFrame[j] = 11;
						}
						else
						{
							squirrelCageFrame[j] = 9;
						}
					}
					squirrelCageFrameCounter[j] = 0;
				}
				else if (squirrelCageFrame[j] >= 13)
				{
					squirrelCageFrameCounter[j]++;
					if (squirrelCageFrameCounter[j] >= 5)
					{
						squirrelCageFrameCounter[j] = 0;
						squirrelCageFrame[j]++;
					}
					if (squirrelCageFrame[j] > 17)
					{
						squirrelCageFrame[j] = 0;
					}
				}
			}
			for (int k = 0; k < cageFrames; k++)
			{
				if (squirrelCageFrameOrange[k] == 0)
				{
					squirrelCageFrameCounterOrange[k]++;
					if (squirrelCageFrameCounterOrange[k] <= rand.Next(30, 900))
					{
						continue;
					}
					if (rand.Next(3) != 0)
					{
						int num = rand.Next(7);
						if (num == 0)
						{
							squirrelCageFrameOrange[k] = 4;
						}
						else if (num <= 2)
						{
							squirrelCageFrameOrange[k] = 2;
						}
						else
						{
							squirrelCageFrameOrange[k] = 1;
						}
					}
					squirrelCageFrameCounterOrange[k] = 0;
				}
				else if (squirrelCageFrameOrange[k] == 1)
				{
					squirrelCageFrameCounterOrange[k]++;
					if (squirrelCageFrameCounterOrange[k] >= 10)
					{
						squirrelCageFrameCounterOrange[k] = 0;
						squirrelCageFrameOrange[k] = 0;
					}
				}
				else if (squirrelCageFrameOrange[k] >= 2 && squirrelCageFrameOrange[k] <= 3)
				{
					squirrelCageFrameCounterOrange[k]++;
					if (squirrelCageFrameCounterOrange[k] >= 5)
					{
						squirrelCageFrameCounterOrange[k] = 0;
						squirrelCageFrameOrange[k]++;
					}
					if (squirrelCageFrameOrange[k] > 3)
					{
						if (rand.Next(5) == 0)
						{
							squirrelCageFrameOrange[k] = 0;
						}
						else
						{
							squirrelCageFrameOrange[k] = 2;
						}
					}
				}
				else if (squirrelCageFrameOrange[k] >= 4 && squirrelCageFrameOrange[k] <= 8)
				{
					squirrelCageFrameCounterOrange[k]++;
					if (squirrelCageFrameCounterOrange[k] >= 5)
					{
						squirrelCageFrameCounterOrange[k] = 0;
						squirrelCageFrameOrange[k]++;
					}
				}
				else if (squirrelCageFrameOrange[k] == 9)
				{
					squirrelCageFrameCounterOrange[k]++;
					if (squirrelCageFrameCounterOrange[k] <= rand.Next(30, 900))
					{
						continue;
					}
					if (rand.Next(3) != 0)
					{
						int num = rand.Next(7);
						if (num == 0)
						{
							squirrelCageFrameOrange[k] = 13;
						}
						else if (num <= 2)
						{
							squirrelCageFrameOrange[k] = 11;
						}
						else
						{
							squirrelCageFrameOrange[k] = 10;
						}
					}
					squirrelCageFrameCounterOrange[k] = 0;
				}
				else if (squirrelCageFrameOrange[k] == 10)
				{
					squirrelCageFrameCounterOrange[k]++;
					if (squirrelCageFrameCounterOrange[k] >= 10)
					{
						squirrelCageFrameCounterOrange[k] = 0;
						squirrelCageFrameOrange[k] = 9;
					}
				}
				else if (squirrelCageFrameOrange[k] == 11 || squirrelCageFrameOrange[k] == 12)
				{
					squirrelCageFrameCounterOrange[k]++;
					if (squirrelCageFrameCounterOrange[k] < 5)
					{
						continue;
					}
					squirrelCageFrameOrange[k]++;
					if (squirrelCageFrameOrange[k] > 12)
					{
						if (rand.Next(5) != 0)
						{
							squirrelCageFrameOrange[k] = 11;
						}
						else
						{
							squirrelCageFrameOrange[k] = 9;
						}
					}
					squirrelCageFrameCounterOrange[k] = 0;
				}
				else if (squirrelCageFrameOrange[k] >= 13)
				{
					squirrelCageFrameCounterOrange[k]++;
					if (squirrelCageFrameCounterOrange[k] >= 5)
					{
						squirrelCageFrameCounterOrange[k] = 0;
						squirrelCageFrameOrange[k]++;
					}
					if (squirrelCageFrameOrange[k] > 17)
					{
						squirrelCageFrameOrange[k] = 0;
					}
				}
			}
			for (int l = 0; l < cageFrames; l++)
			{
				if (mallardCageFrame[l] == 0 || mallardCageFrame[l] == 4)
				{
					mallardCageFrameCounter[l]++;
					if (mallardCageFrameCounter[l] <= rand.Next(45, 2700))
					{
						continue;
					}
					if ((mallardCageFrame[l] == 0 && rand.Next(3) != 0) || (mallardCageFrame[l] == 4 && rand.Next(5) == 0))
					{
						if (rand.Next(6) == 0)
						{
							mallardCageFrame[l] = 5;
						}
						else if (rand.Next(3) == 0)
						{
							if (mallardCageFrame[l] == 4)
							{
								mallardCageFrame[l] = 0;
							}
							else
							{
								mallardCageFrame[l] = 4;
							}
						}
						else
						{
							mallardCageFrame[l] = 1;
						}
					}
					mallardCageFrameCounter[l] = 0;
				}
				else if (mallardCageFrame[l] >= 1 && mallardCageFrame[l] <= 3)
				{
					mallardCageFrameCounter[l]++;
					if (mallardCageFrameCounter[l] >= 5)
					{
						mallardCageFrameCounter[l] = 0;
						mallardCageFrame[l]++;
					}
					if (mallardCageFrame[l] > 3)
					{
						if (rand.Next(5) == 0)
						{
							mallardCageFrame[l] = 0;
						}
						else
						{
							mallardCageFrame[l] = 1;
						}
					}
				}
				else if (mallardCageFrame[l] >= 5 && mallardCageFrame[l] <= 11)
				{
					mallardCageFrameCounter[l]++;
					if (mallardCageFrameCounter[l] >= 5)
					{
						mallardCageFrameCounter[l] = 0;
						mallardCageFrame[l]++;
					}
				}
				else if (mallardCageFrame[l] == 12 || mallardCageFrame[l] == 16)
				{
					mallardCageFrameCounter[l]++;
					if (mallardCageFrameCounter[l] <= rand.Next(45, 2700))
					{
						continue;
					}
					if ((mallardCageFrame[l] == 12 && rand.Next(3) != 0) || (mallardCageFrame[l] == 16 && rand.Next(5) == 0))
					{
						if (rand.Next(6) == 0)
						{
							mallardCageFrame[l] = 17;
						}
						else if (rand.Next(3) == 0)
						{
							if (mallardCageFrame[l] == 16)
							{
								mallardCageFrame[l] = 12;
							}
							else
							{
								mallardCageFrame[l] = 16;
							}
						}
						else
						{
							mallardCageFrame[l] = 13;
						}
					}
					mallardCageFrameCounter[l] = 0;
				}
				else if (mallardCageFrame[l] >= 13 && mallardCageFrame[l] <= 15)
				{
					mallardCageFrameCounter[l]++;
					if (mallardCageFrameCounter[l] < 5)
					{
						continue;
					}
					mallardCageFrame[l]++;
					if (mallardCageFrame[l] > 15)
					{
						if (rand.Next(5) != 0)
						{
							mallardCageFrame[l] = 12;
						}
						else
						{
							mallardCageFrame[l] = 13;
						}
					}
					mallardCageFrameCounter[l] = 0;
				}
				else if (mallardCageFrame[l] >= 17)
				{
					mallardCageFrameCounter[l]++;
					if (mallardCageFrameCounter[l] >= 5)
					{
						mallardCageFrameCounter[l] = 0;
						mallardCageFrame[l]++;
					}
					if (mallardCageFrame[l] > 23)
					{
						mallardCageFrame[l] = 0;
					}
				}
			}
			for (int m = 0; m < cageFrames; m++)
			{
				if (duckCageFrame[m] == 0 || duckCageFrame[m] == 4)
				{
					duckCageFrameCounter[m]++;
					if (duckCageFrameCounter[m] <= rand.Next(45, 2700))
					{
						continue;
					}
					if ((duckCageFrame[m] == 0 && rand.Next(3) != 0) || (duckCageFrame[m] == 4 && rand.Next(5) == 0))
					{
						if (rand.Next(6) == 0)
						{
							duckCageFrame[m] = 5;
						}
						else if (rand.Next(3) == 0)
						{
							if (duckCageFrame[m] == 4)
							{
								duckCageFrame[m] = 0;
							}
							else
							{
								duckCageFrame[m] = 4;
							}
						}
						else
						{
							duckCageFrame[m] = 1;
						}
					}
					duckCageFrameCounter[m] = 0;
				}
				else if (duckCageFrame[m] >= 1 && duckCageFrame[m] <= 3)
				{
					duckCageFrameCounter[m]++;
					if (duckCageFrameCounter[m] >= 5)
					{
						duckCageFrameCounter[m] = 0;
						duckCageFrame[m]++;
					}
					if (duckCageFrame[m] > 3)
					{
						if (rand.Next(5) == 0)
						{
							duckCageFrame[m] = 0;
						}
						else
						{
							duckCageFrame[m] = 1;
						}
					}
				}
				else if (duckCageFrame[m] >= 5 && duckCageFrame[m] <= 11)
				{
					duckCageFrameCounter[m]++;
					if (duckCageFrameCounter[m] >= 5)
					{
						duckCageFrameCounter[m] = 0;
						duckCageFrame[m]++;
					}
				}
				else if (duckCageFrame[m] == 12 || duckCageFrame[m] == 16)
				{
					duckCageFrameCounter[m]++;
					if (duckCageFrameCounter[m] <= rand.Next(45, 2700))
					{
						continue;
					}
					if ((duckCageFrame[m] == 12 && rand.Next(3) != 0) || (duckCageFrame[m] == 16 && rand.Next(5) == 0))
					{
						if (rand.Next(6) == 0)
						{
							duckCageFrame[m] = 17;
						}
						else if (rand.Next(3) == 0)
						{
							if (duckCageFrame[m] == 16)
							{
								duckCageFrame[m] = 12;
							}
							else
							{
								duckCageFrame[m] = 16;
							}
						}
						else
						{
							duckCageFrame[m] = 13;
						}
					}
					duckCageFrameCounter[m] = 0;
				}
				else if (duckCageFrame[m] >= 13 && duckCageFrame[m] <= 15)
				{
					duckCageFrameCounter[m]++;
					if (duckCageFrameCounter[m] < 5)
					{
						continue;
					}
					duckCageFrame[m]++;
					if (duckCageFrame[m] > 15)
					{
						if (rand.Next(5) != 0)
						{
							duckCageFrame[m] = 12;
						}
						else
						{
							duckCageFrame[m] = 13;
						}
					}
					duckCageFrameCounter[m] = 0;
				}
				else if (duckCageFrame[m] >= 17)
				{
					duckCageFrameCounter[m]++;
					if (duckCageFrameCounter[m] >= 5)
					{
						duckCageFrameCounter[m] = 0;
						duckCageFrame[m]++;
					}
					if (duckCageFrame[m] > 23)
					{
						duckCageFrame[m] = 0;
					}
				}
			}
			for (int n = 0; n < cageFrames; n++)
			{
				if (birdCageFrame[n] == 0)
				{
					birdCageFrameCounter[n]++;
					if (birdCageFrameCounter[n] <= rand.Next(30, 2700))
					{
						continue;
					}
					if (rand.Next(3) != 0)
					{
						if (rand.Next(3) != 0)
						{
							birdCageFrame[n] = 2;
						}
						else
						{
							birdCageFrame[n] = 1;
						}
					}
					birdCageFrameCounter[n] = 0;
				}
				else if (birdCageFrame[n] == 1)
				{
					birdCageFrameCounter[n]++;
					if (birdCageFrameCounter[n] > rand.Next(900, 18000) && rand.Next(3) == 0)
					{
						birdCageFrameCounter[n] = 0;
						birdCageFrame[n] = 0;
					}
				}
				else if (birdCageFrame[n] >= 2 && birdCageFrame[n] <= 5)
				{
					birdCageFrameCounter[n]++;
					if (birdCageFrameCounter[n] >= 5)
					{
						birdCageFrameCounter[n] = 0;
						if (birdCageFrame[n] == 3 && rand.Next(3) == 0)
						{
							birdCageFrame[n] = 13;
						}
						else
						{
							birdCageFrame[n]++;
						}
					}
				}
				else if (birdCageFrame[n] == 6)
				{
					birdCageFrameCounter[n]++;
					if (birdCageFrameCounter[n] <= rand.Next(45, 2700))
					{
						continue;
					}
					if (rand.Next(3) != 0)
					{
						if (rand.Next(6) == 0)
						{
							birdCageFrame[n] = 7;
						}
						else if (rand.Next(6) == 0)
						{
							birdCageFrame[n] = 11;
						}
					}
					birdCageFrameCounter[n] = 0;
				}
				else if (birdCageFrame[n] >= 7 && birdCageFrame[n] <= 10)
				{
					birdCageFrameCounter[n]++;
					if (birdCageFrameCounter[n] >= 5)
					{
						birdCageFrame[n]++;
						if (birdCageFrame[n] > 10)
						{
							birdCageFrame[n] = 0;
						}
						birdCageFrameCounter[n] = 0;
					}
				}
				else if (birdCageFrame[n] >= 11 && birdCageFrame[n] <= 13)
				{
					birdCageFrameCounter[n]++;
					if (birdCageFrameCounter[n] >= 5)
					{
						birdCageFrame[n]++;
						birdCageFrameCounter[n] = 0;
					}
				}
				else if (birdCageFrame[n] == 14)
				{
					birdCageFrameCounter[n]++;
					if (birdCageFrameCounter[n] > rand.Next(5, 600))
					{
						if (rand.Next(20) == 0)
						{
							birdCageFrame[n] = 16;
						}
						else if (rand.Next(20) == 0)
						{
							birdCageFrame[n] = 4;
						}
						else
						{
							birdCageFrame[n] = 15;
						}
						birdCageFrameCounter[n] = 0;
					}
				}
				else if (birdCageFrame[n] == 15)
				{
					birdCageFrameCounter[n]++;
					if (birdCageFrameCounter[n] >= 10)
					{
						birdCageFrameCounter[n] = 0;
						birdCageFrame[n] = 14;
					}
				}
				else
				{
					if (birdCageFrame[n] < 16 || birdCageFrame[n] > 18)
					{
						continue;
					}
					birdCageFrameCounter[n]++;
					if (birdCageFrameCounter[n] >= 5)
					{
						birdCageFrame[n]++;
						if (birdCageFrame[n] > 18)
						{
							birdCageFrame[n] = 0;
						}
						birdCageFrameCounter[n] = 0;
					}
				}
			}
			for (int num2 = 0; num2 < cageFrames; num2++)
			{
				if (blueBirdCageFrame[num2] == 0)
				{
					blueBirdCageFrameCounter[num2]++;
					if (blueBirdCageFrameCounter[num2] <= rand.Next(30, 2700))
					{
						continue;
					}
					if (rand.Next(3) != 0)
					{
						if (rand.Next(3) != 0)
						{
							blueBirdCageFrame[num2] = 2;
						}
						else
						{
							blueBirdCageFrame[num2] = 1;
						}
					}
					blueBirdCageFrameCounter[num2] = 0;
				}
				else if (blueBirdCageFrame[num2] == 1)
				{
					blueBirdCageFrameCounter[num2]++;
					if (blueBirdCageFrameCounter[num2] > rand.Next(900, 18000) && rand.Next(3) == 0)
					{
						blueBirdCageFrameCounter[num2] = 0;
						blueBirdCageFrame[num2] = 0;
					}
				}
				else if (blueBirdCageFrame[num2] >= 2 && blueBirdCageFrame[num2] <= 5)
				{
					blueBirdCageFrameCounter[num2]++;
					if (blueBirdCageFrameCounter[num2] >= 5)
					{
						blueBirdCageFrameCounter[num2] = 0;
						if (blueBirdCageFrame[num2] == 3 && rand.Next(3) == 0)
						{
							blueBirdCageFrame[num2] = 13;
						}
						else
						{
							blueBirdCageFrame[num2]++;
						}
					}
				}
				else if (blueBirdCageFrame[num2] == 6)
				{
					blueBirdCageFrameCounter[num2]++;
					if (blueBirdCageFrameCounter[num2] <= rand.Next(45, 2700))
					{
						continue;
					}
					if (rand.Next(3) != 0)
					{
						if (rand.Next(6) == 0)
						{
							blueBirdCageFrame[num2] = 7;
						}
						else if (rand.Next(6) == 0)
						{
							blueBirdCageFrame[num2] = 11;
						}
					}
					blueBirdCageFrameCounter[num2] = 0;
				}
				else if (blueBirdCageFrame[num2] >= 7 && blueBirdCageFrame[num2] <= 10)
				{
					blueBirdCageFrameCounter[num2]++;
					if (blueBirdCageFrameCounter[num2] >= 5)
					{
						blueBirdCageFrame[num2]++;
						if (blueBirdCageFrame[num2] > 10)
						{
							blueBirdCageFrame[num2] = 0;
						}
						blueBirdCageFrameCounter[num2] = 0;
					}
				}
				else if (blueBirdCageFrame[num2] >= 11 && blueBirdCageFrame[num2] <= 13)
				{
					blueBirdCageFrameCounter[num2]++;
					if (blueBirdCageFrameCounter[num2] >= 5)
					{
						blueBirdCageFrame[num2]++;
						blueBirdCageFrameCounter[num2] = 0;
					}
				}
				else if (blueBirdCageFrame[num2] == 14)
				{
					blueBirdCageFrameCounter[num2]++;
					if (blueBirdCageFrameCounter[num2] > rand.Next(5, 600))
					{
						if (rand.Next(20) == 0)
						{
							blueBirdCageFrame[num2] = 16;
						}
						else if (rand.Next(20) == 0)
						{
							blueBirdCageFrame[num2] = 4;
						}
						else
						{
							blueBirdCageFrame[num2] = 15;
						}
						blueBirdCageFrameCounter[num2] = 0;
					}
				}
				else if (blueBirdCageFrame[num2] == 15)
				{
					blueBirdCageFrameCounter[num2]++;
					if (blueBirdCageFrameCounter[num2] >= 10)
					{
						blueBirdCageFrameCounter[num2] = 0;
						blueBirdCageFrame[num2] = 14;
					}
				}
				else
				{
					if (blueBirdCageFrame[num2] < 16 || blueBirdCageFrame[num2] > 18)
					{
						continue;
					}
					blueBirdCageFrameCounter[num2]++;
					if (blueBirdCageFrameCounter[num2] >= 5)
					{
						blueBirdCageFrame[num2]++;
						if (blueBirdCageFrame[num2] > 18)
						{
							blueBirdCageFrame[num2] = 0;
						}
						blueBirdCageFrameCounter[num2] = 0;
					}
				}
			}
			for (int num3 = 0; num3 < cageFrames; num3++)
			{
				if (redBirdCageFrame[num3] == 0)
				{
					redBirdCageFrameCounter[num3]++;
					if (redBirdCageFrameCounter[num3] <= rand.Next(30, 2700))
					{
						continue;
					}
					if (rand.Next(3) != 0)
					{
						if (rand.Next(3) != 0)
						{
							redBirdCageFrame[num3] = 2;
						}
						else
						{
							redBirdCageFrame[num3] = 1;
						}
					}
					redBirdCageFrameCounter[num3] = 0;
				}
				else if (redBirdCageFrame[num3] == 1)
				{
					redBirdCageFrameCounter[num3]++;
					if (redBirdCageFrameCounter[num3] > rand.Next(900, 18000) && rand.Next(3) == 0)
					{
						redBirdCageFrameCounter[num3] = 0;
						redBirdCageFrame[num3] = 0;
					}
				}
				else if (redBirdCageFrame[num3] >= 2 && redBirdCageFrame[num3] <= 5)
				{
					redBirdCageFrameCounter[num3]++;
					if (redBirdCageFrameCounter[num3] >= 5)
					{
						redBirdCageFrameCounter[num3] = 0;
						if (redBirdCageFrame[num3] == 3 && rand.Next(3) == 0)
						{
							redBirdCageFrame[num3] = 13;
						}
						else
						{
							redBirdCageFrame[num3]++;
						}
					}
				}
				else if (redBirdCageFrame[num3] == 6)
				{
					redBirdCageFrameCounter[num3]++;
					if (redBirdCageFrameCounter[num3] <= rand.Next(45, 2700))
					{
						continue;
					}
					if (rand.Next(3) != 0)
					{
						if (rand.Next(6) == 0)
						{
							redBirdCageFrame[num3] = 7;
						}
						else if (rand.Next(6) == 0)
						{
							redBirdCageFrame[num3] = 11;
						}
					}
					redBirdCageFrameCounter[num3] = 0;
				}
				else if (redBirdCageFrame[num3] >= 7 && redBirdCageFrame[num3] <= 10)
				{
					redBirdCageFrameCounter[num3]++;
					if (redBirdCageFrameCounter[num3] >= 5)
					{
						redBirdCageFrame[num3]++;
						if (redBirdCageFrame[num3] > 10)
						{
							redBirdCageFrame[num3] = 0;
						}
						redBirdCageFrameCounter[num3] = 0;
					}
				}
				else if (redBirdCageFrame[num3] >= 11 && redBirdCageFrame[num3] <= 13)
				{
					redBirdCageFrameCounter[num3]++;
					if (redBirdCageFrameCounter[num3] >= 5)
					{
						redBirdCageFrame[num3]++;
						redBirdCageFrameCounter[num3] = 0;
					}
				}
				else if (redBirdCageFrame[num3] == 14)
				{
					redBirdCageFrameCounter[num3]++;
					if (redBirdCageFrameCounter[num3] > rand.Next(5, 600))
					{
						if (rand.Next(20) == 0)
						{
							redBirdCageFrame[num3] = 16;
						}
						else if (rand.Next(20) == 0)
						{
							redBirdCageFrame[num3] = 4;
						}
						else
						{
							redBirdCageFrame[num3] = 15;
						}
						redBirdCageFrameCounter[num3] = 0;
					}
				}
				else if (redBirdCageFrame[num3] == 15)
				{
					redBirdCageFrameCounter[num3]++;
					if (redBirdCageFrameCounter[num3] >= 10)
					{
						redBirdCageFrameCounter[num3] = 0;
						redBirdCageFrame[num3] = 14;
					}
				}
				else
				{
					if (redBirdCageFrame[num3] < 16 || redBirdCageFrame[num3] > 18)
					{
						continue;
					}
					redBirdCageFrameCounter[num3]++;
					if (redBirdCageFrameCounter[num3] >= 5)
					{
						redBirdCageFrame[num3]++;
						if (redBirdCageFrame[num3] > 18)
						{
							redBirdCageFrame[num3] = 0;
						}
						redBirdCageFrameCounter[num3] = 0;
					}
				}
			}
			for (int num4 = 0; num4 < 2; num4++)
			{
				for (int num5 = 0; num5 < cageFrames; num5++)
				{
					if (scorpionCageFrame[num4, num5] == 0 || scorpionCageFrame[num4, num5] == 7)
					{
						scorpionCageFrameCounter[num4, num5]++;
						if (scorpionCageFrameCounter[num4, num5] <= rand.Next(30, 3600))
						{
							continue;
						}
						if (scorpionCageFrame[num4, num5] == 7)
						{
							scorpionCageFrame[num4, num5] = 0;
						}
						else if (rand.Next(3) == 0)
						{
							if (rand.Next(7) == 0)
							{
								scorpionCageFrame[num4, num5] = 1;
							}
							else if (rand.Next(4) == 0)
							{
								scorpionCageFrame[num4, num5] = 8;
							}
							else if (rand.Next(3) == 0)
							{
								scorpionCageFrame[num4, num5] = 7;
							}
							else
							{
								scorpionCageFrame[num4, num5] = 14;
							}
						}
						scorpionCageFrameCounter[num4, num5] = 0;
					}
					else if (scorpionCageFrame[num4, num5] >= 1 && scorpionCageFrame[num4, num5] <= 2)
					{
						scorpionCageFrameCounter[num4, num5]++;
						if (scorpionCageFrameCounter[num4, num5] >= 10)
						{
							scorpionCageFrameCounter[num4, num5] = 0;
							scorpionCageFrame[num4, num5]++;
						}
					}
					else if (scorpionCageFrame[num4, num5] >= 8 && scorpionCageFrame[num4, num5] <= 10)
					{
						scorpionCageFrameCounter[num4, num5]++;
						if (scorpionCageFrameCounter[num4, num5] >= 10)
						{
							scorpionCageFrameCounter[num4, num5] = 0;
							scorpionCageFrame[num4, num5]++;
						}
					}
					else if (scorpionCageFrame[num4, num5] == 11)
					{
						scorpionCageFrameCounter[num4, num5]++;
						if (scorpionCageFrameCounter[num4, num5] > rand.Next(45, 5400))
						{
							if (rand.Next(6) == 0)
							{
								scorpionCageFrame[num4, num5] = 12;
							}
							scorpionCageFrameCounter[num4, num5] = 0;
						}
					}
					else if (scorpionCageFrame[num4, num5] >= 12 && scorpionCageFrame[num4, num5] <= 13)
					{
						scorpionCageFrameCounter[num4, num5]++;
						if (scorpionCageFrameCounter[num4, num5] >= 10)
						{
							scorpionCageFrameCounter[num4, num5] = 0;
							scorpionCageFrame[num4, num5]++;
							if (scorpionCageFrame[num4, num5] > 13)
							{
								scorpionCageFrame[num4, num5] = 0;
							}
						}
					}
					else if (scorpionCageFrame[num4, num5] >= 14 && scorpionCageFrame[num4, num5] <= 15)
					{
						scorpionCageFrameCounter[num4, num5]++;
						if (scorpionCageFrameCounter[num4, num5] >= 5)
						{
							scorpionCageFrameCounter[num4, num5] = 0;
							scorpionCageFrame[num4, num5]++;
							if (scorpionCageFrame[num4, num5] > 15)
							{
								scorpionCageFrame[num4, num5] = 14;
							}
							if (rand.Next(5) == 0)
							{
								scorpionCageFrame[num4, num5] = 0;
							}
						}
					}
					else if (scorpionCageFrame[num4, num5] == 4 || scorpionCageFrame[num4, num5] == 3)
					{
						scorpionCageFrameCounter[num4, num5]++;
						if (scorpionCageFrameCounter[num4, num5] <= rand.Next(30, 3600))
						{
							continue;
						}
						if (scorpionCageFrame[num4, num5] == 3)
						{
							scorpionCageFrame[num4, num5] = 4;
						}
						else if (rand.Next(3) == 0)
						{
							if (rand.Next(5) == 0)
							{
								scorpionCageFrame[num4, num5] = 5;
							}
							else if (rand.Next(3) == 0)
							{
								scorpionCageFrame[num4, num5] = 3;
							}
							else
							{
								scorpionCageFrame[num4, num5] = 16;
							}
						}
						scorpionCageFrameCounter[num4, num5] = 0;
					}
					else if (scorpionCageFrame[num4, num5] >= 5 && scorpionCageFrame[num4, num5] <= 6)
					{
						scorpionCageFrameCounter[num4, num5]++;
						if (scorpionCageFrameCounter[num4, num5] >= 10)
						{
							scorpionCageFrameCounter[num4, num5] = 0;
							scorpionCageFrame[num4, num5]++;
							if (scorpionCageFrame[num4, num5] > 7)
							{
								scorpionCageFrame[num4, num5] = 0;
							}
						}
					}
					else
					{
						if (scorpionCageFrame[num4, num5] < 16 || scorpionCageFrame[num4, num5] > 17)
						{
							continue;
						}
						scorpionCageFrameCounter[num4, num5]++;
						if (scorpionCageFrameCounter[num4, num5] >= 5)
						{
							scorpionCageFrameCounter[num4, num5] = 0;
							scorpionCageFrame[num4, num5]++;
							if (scorpionCageFrame[num4, num5] > 17)
							{
								scorpionCageFrame[num4, num5] = 16;
							}
							if (rand.Next(5) == 0)
							{
								scorpionCageFrame[num4, num5] = 4;
							}
						}
					}
				}
			}
			for (int num6 = 0; num6 < cageFrames; num6++)
			{
				if (penguinCageFrame[num6] == 0)
				{
					penguinCageFrameCounter[num6]++;
					if (penguinCageFrameCounter[num6] <= rand.Next(30, 1800))
					{
						continue;
					}
					if (rand.Next(2) == 0)
					{
						if (rand.Next(10) == 0)
						{
							penguinCageFrame[num6] = 4;
						}
						else if (rand.Next(7) == 0)
						{
							penguinCageFrame[num6] = 15;
						}
						else if (rand.Next(3) == 0)
						{
							penguinCageFrame[num6] = 2;
						}
						else
						{
							penguinCageFrame[num6] = 1;
						}
					}
					penguinCageFrameCounter[num6] = 0;
				}
				else if (penguinCageFrame[num6] == 1)
				{
					penguinCageFrameCounter[num6]++;
					if (penguinCageFrameCounter[num6] >= 10)
					{
						penguinCageFrameCounter[num6] = 0;
						penguinCageFrame[num6] = 0;
					}
				}
				else if (penguinCageFrame[num6] >= 2 && penguinCageFrame[num6] <= 3)
				{
					penguinCageFrameCounter[num6]++;
					if (penguinCageFrameCounter[num6] < 5)
					{
						continue;
					}
					penguinCageFrameCounter[num6] = 0;
					penguinCageFrame[num6]++;
					if (penguinCageFrame[num6] > 3)
					{
						if (rand.Next(3) == 0)
						{
							penguinCageFrame[num6] = 0;
						}
						else
						{
							penguinCageFrame[num6] = 2;
						}
					}
				}
				else if (penguinCageFrame[num6] >= 4 && penguinCageFrame[num6] <= 6)
				{
					penguinCageFrameCounter[num6]++;
					if (penguinCageFrameCounter[num6] >= 10)
					{
						penguinCageFrameCounter[num6] = 0;
						penguinCageFrame[num6]++;
					}
				}
				else if (penguinCageFrame[num6] == 15)
				{
					penguinCageFrameCounter[num6]++;
					if (penguinCageFrameCounter[num6] > rand.Next(10, 1800))
					{
						if (rand.Next(2) == 0)
						{
							penguinCageFrame[num6] = 0;
						}
						penguinCageFrameCounter[num6] = 0;
					}
				}
				else if (penguinCageFrame[num6] == 8)
				{
					penguinCageFrameCounter[num6]++;
					if (penguinCageFrameCounter[num6] <= rand.Next(30, 3600))
					{
						continue;
					}
					if (rand.Next(2) == 0)
					{
						if (rand.Next(10) == 0)
						{
							penguinCageFrame[num6] = 12;
						}
						else if (rand.Next(7) == 0)
						{
							penguinCageFrame[num6] = 7;
						}
						else if (rand.Next(3) == 0)
						{
							penguinCageFrame[num6] = 10;
						}
						else
						{
							penguinCageFrame[num6] = 9;
						}
					}
					penguinCageFrameCounter[num6] = 0;
				}
				else if (penguinCageFrame[num6] == 9)
				{
					penguinCageFrameCounter[num6]++;
					if (penguinCageFrameCounter[num6] >= 10)
					{
						penguinCageFrameCounter[num6] = 0;
						penguinCageFrame[num6] = 8;
					}
				}
				else if (penguinCageFrame[num6] >= 10 && penguinCageFrame[num6] <= 11)
				{
					penguinCageFrameCounter[num6]++;
					if (penguinCageFrameCounter[num6] < 5)
					{
						continue;
					}
					penguinCageFrameCounter[num6] = 0;
					penguinCageFrame[num6]++;
					if (penguinCageFrame[num6] > 3)
					{
						if (rand.Next(3) == 0)
						{
							penguinCageFrame[num6] = 8;
						}
						else
						{
							penguinCageFrame[num6] = 10;
						}
					}
				}
				else if (penguinCageFrame[num6] >= 12 && penguinCageFrame[num6] <= 14)
				{
					penguinCageFrameCounter[num6]++;
					if (penguinCageFrameCounter[num6] >= 10)
					{
						penguinCageFrameCounter[num6] = 0;
						penguinCageFrame[num6]++;
					}
				}
				else
				{
					if (penguinCageFrame[num6] != 7)
					{
						continue;
					}
					penguinCageFrameCounter[num6]++;
					if (penguinCageFrameCounter[num6] > rand.Next(10, 3600))
					{
						if (rand.Next(2) == 0)
						{
							penguinCageFrame[num6] = 8;
						}
						penguinCageFrameCounter[num6] = 0;
					}
				}
			}
			for (int num7 = 0; num7 < cageFrames; num7++)
			{
				if (snailCageFrame[num7] >= 0 && snailCageFrame[num7] <= 13)
				{
					snailCageFrameCounter[num7]++;
					if (snailCageFrameCounter[num7] <= rand.Next(45, 3600))
					{
						continue;
					}
					if (snailCageFrame[num7] == 8 && rand.Next(2) == 0)
					{
						snailCageFrame[num7] = 14;
					}
					else if (snailCageFrame[num7] == 1 && rand.Next(3) == 0)
					{
						snailCageFrame[num7] = 19;
					}
					else if (snailCageFrame[num7] == 1 && rand.Next(3) == 0)
					{
						snailCageFrame[num7] = 20;
					}
					else
					{
						snailCageFrame[num7]++;
						if (snailCageFrame[num7] > 13)
						{
							snailCageFrame[num7] = 0;
						}
					}
					snailCageFrameCounter[num7] = 0;
				}
				else if (snailCageFrame[num7] >= 14 && snailCageFrame[num7] <= 18)
				{
					snailCageFrameCounter[num7]++;
					if (snailCageFrameCounter[num7] >= 5)
					{
						snailCageFrameCounter[num7] = 0;
						snailCageFrame[num7]++;
					}
					if (snailCageFrame[num7] > 18)
					{
						snailCageFrame[num7] = 20;
					}
				}
				else
				{
					if (snailCageFrame[num7] != 19 && snailCageFrame[num7] != 20)
					{
						continue;
					}
					snailCageFrameCounter[num7]++;
					if (snailCageFrameCounter[num7] <= rand.Next(60, 7200))
					{
						continue;
					}
					snailCageFrameCounter[num7] = 0;
					if (rand.Next(4) == 0)
					{
						if (rand.Next(3) == 0)
						{
							snailCageFrame[num7] = 2;
						}
						else if (snailCageFrame[num7] == 19)
						{
							snailCageFrame[num7] = 20;
						}
						else
						{
							snailCageFrame[num7] = 19;
						}
					}
				}
			}
			for (int num8 = 0; num8 < cageFrames; num8++)
			{
				if (snail2CageFrame[num8] >= 0 && snail2CageFrame[num8] <= 13)
				{
					snail2CageFrameCounter[num8]++;
					if (snail2CageFrameCounter[num8] <= rand.Next(30, 2700))
					{
						continue;
					}
					if (snail2CageFrame[num8] == 8 && rand.Next(2) == 0)
					{
						snail2CageFrame[num8] = 14;
					}
					else if (snail2CageFrame[num8] == 1 && rand.Next(3) == 0)
					{
						snail2CageFrame[num8] = 19;
					}
					else if (snail2CageFrame[num8] == 1 && rand.Next(3) == 0)
					{
						snail2CageFrame[num8] = 20;
					}
					else
					{
						snail2CageFrame[num8]++;
						if (snail2CageFrame[num8] > 13)
						{
							snail2CageFrame[num8] = 0;
						}
					}
					snail2CageFrameCounter[num8] = 0;
				}
				else if (snail2CageFrame[num8] >= 14 && snail2CageFrame[num8] <= 18)
				{
					snail2CageFrameCounter[num8]++;
					if (snail2CageFrameCounter[num8] >= 5)
					{
						snail2CageFrameCounter[num8] = 0;
						snail2CageFrame[num8]++;
					}
					if (snail2CageFrame[num8] > 18)
					{
						snail2CageFrame[num8] = 20;
					}
				}
				else
				{
					if (snail2CageFrame[num8] != 19 && snail2CageFrame[num8] != 20)
					{
						continue;
					}
					snail2CageFrameCounter[num8]++;
					if (snail2CageFrameCounter[num8] <= rand.Next(45, 5400))
					{
						continue;
					}
					snail2CageFrameCounter[num8] = 0;
					if (rand.Next(4) == 0)
					{
						if (rand.Next(3) == 0)
						{
							snail2CageFrame[num8] = 2;
						}
						else if (snail2CageFrame[num8] == 19)
						{
							snail2CageFrame[num8] = 20;
						}
						else
						{
							snail2CageFrame[num8] = 19;
						}
					}
				}
			}
			for (int num9 = 0; num9 < cageFrames; num9++)
			{
				if (frogCageFrame[num9] == 0)
				{
					frogCageFrameCounter[num9]++;
					if (frogCageFrameCounter[num9] > rand.Next(45, 3600))
					{
						if (rand.Next(10) == 0)
						{
							frogCageFrame[num9] = 1;
						}
						else
						{
							frogCageFrame[num9] = 12;
						}
						frogCageFrameCounter[num9] = 0;
					}
				}
				else if (frogCageFrame[num9] >= 1 && frogCageFrame[num9] <= 5)
				{
					frogCageFrameCounter[num9]++;
					if (frogCageFrameCounter[num9] >= 5)
					{
						frogCageFrame[num9]++;
						frogCageFrameCounter[num9] = 0;
					}
				}
				else if (frogCageFrame[num9] >= 12 && frogCageFrame[num9] <= 17)
				{
					frogCageFrameCounter[num9]++;
					if (frogCageFrameCounter[num9] >= 5)
					{
						frogCageFrameCounter[num9] = 0;
						frogCageFrame[num9]++;
					}
					if (frogCageFrame[num9] > 17)
					{
						if (rand.Next(3) == 0)
						{
							frogCageFrame[num9] = 0;
						}
						else
						{
							frogCageFrame[num9] = 12;
						}
					}
				}
				else if (frogCageFrame[num9] == 6)
				{
					frogCageFrameCounter[num9]++;
					if (frogCageFrameCounter[num9] > rand.Next(45, 3600))
					{
						if (rand.Next(10) == 0)
						{
							frogCageFrame[num9] = 7;
						}
						else
						{
							frogCageFrame[num9] = 18;
						}
						frogCageFrameCounter[num9] = 0;
					}
				}
				else if (frogCageFrame[num9] >= 7 && frogCageFrame[num9] <= 11)
				{
					frogCageFrameCounter[num9]++;
					if (frogCageFrameCounter[num9] >= 5)
					{
						frogCageFrame[num9]++;
						frogCageFrameCounter[num9] = 0;
						if (frogCageFrame[num9] > 11)
						{
							frogCageFrame[num9] = 0;
						}
					}
				}
				else
				{
					if (frogCageFrame[num9] < 18 || frogCageFrame[num9] > 23)
					{
						continue;
					}
					frogCageFrameCounter[num9]++;
					if (frogCageFrameCounter[num9] >= 5)
					{
						frogCageFrameCounter[num9] = 0;
						frogCageFrame[num9]++;
					}
					if (frogCageFrame[num9] > 17)
					{
						if (rand.Next(3) == 0)
						{
							frogCageFrame[num9] = 6;
						}
						else
						{
							frogCageFrame[num9] = 18;
						}
					}
				}
			}
			for (int num10 = 0; num10 < cageFrames; num10++)
			{
				if (mouseCageFrame[num10] >= 0 && mouseCageFrame[num10] <= 1)
				{
					mouseCageFrameCounter[num10]++;
					if (mouseCageFrameCounter[num10] >= 5)
					{
						mouseCageFrame[num10]++;
						if (mouseCageFrame[num10] > 1)
						{
							mouseCageFrame[num10] = 0;
						}
						mouseCageFrameCounter[num10] = 0;
						if (rand.Next(15) == 0)
						{
							mouseCageFrame[num10] = 4;
						}
					}
				}
				else if (mouseCageFrame[num10] >= 4 && mouseCageFrame[num10] <= 7)
				{
					mouseCageFrameCounter[num10]++;
					if (mouseCageFrameCounter[num10] >= 5)
					{
						mouseCageFrameCounter[num10] = 0;
						mouseCageFrame[num10]++;
					}
					if (mouseCageFrame[num10] > 7)
					{
						mouseCageFrame[num10] = 2;
					}
				}
				else if (mouseCageFrame[num10] >= 2 && mouseCageFrame[num10] <= 3)
				{
					mouseCageFrameCounter[num10]++;
					if (mouseCageFrameCounter[num10] >= 5)
					{
						mouseCageFrame[num10]++;
						if (mouseCageFrame[num10] > 3)
						{
							mouseCageFrame[num10] = 2;
						}
						mouseCageFrameCounter[num10] = 0;
						if (rand.Next(15) == 0)
						{
							mouseCageFrame[num10] = 8;
						}
						else if (rand.Next(15) == 0)
						{
							mouseCageFrame[num10] = 12;
						}
					}
				}
				else if (mouseCageFrame[num10] >= 8 && mouseCageFrame[num10] <= 11)
				{
					mouseCageFrameCounter[num10]++;
					if (mouseCageFrameCounter[num10] >= 5)
					{
						mouseCageFrameCounter[num10] = 0;
						mouseCageFrame[num10]++;
					}
					if (mouseCageFrame[num10] > 11)
					{
						mouseCageFrame[num10] = 0;
					}
				}
				else if (mouseCageFrame[num10] >= 12 && mouseCageFrame[num10] <= 13)
				{
					mouseCageFrameCounter[num10]++;
					if (mouseCageFrameCounter[num10] >= 5)
					{
						mouseCageFrameCounter[num10] = 0;
						mouseCageFrame[num10]++;
					}
				}
				else if (mouseCageFrame[num10] >= 14 && mouseCageFrame[num10] <= 17)
				{
					mouseCageFrameCounter[num10]++;
					if (mouseCageFrameCounter[num10] >= 5)
					{
						mouseCageFrameCounter[num10] = 0;
						mouseCageFrame[num10]++;
						if (mouseCageFrame[num10] > 17 && rand.Next(20) != 0)
						{
							mouseCageFrame[num10] = 14;
						}
					}
				}
				else
				{
					if (mouseCageFrame[num10] < 18 || mouseCageFrame[num10] > 19)
					{
						continue;
					}
					mouseCageFrameCounter[num10]++;
					if (mouseCageFrameCounter[num10] >= 5)
					{
						mouseCageFrameCounter[num10] = 0;
						mouseCageFrame[num10]++;
						if (mouseCageFrame[num10] > 19)
						{
							mouseCageFrame[num10] = 0;
						}
					}
				}
			}
			for (int num11 = 0; num11 < cageFrames; num11++)
			{
				wormCageFrameCounter[num11]++;
				if (wormCageFrameCounter[num11] < rand.Next(30, 91))
				{
					continue;
				}
				wormCageFrameCounter[num11] = 0;
				if (rand.Next(4) != 0)
				{
					continue;
				}
				wormCageFrame[num11]++;
				if (wormCageFrame[num11] == 9 && rand.Next(2) == 0)
				{
					wormCageFrame[num11] = 0;
				}
				if (wormCageFrame[num11] > 18)
				{
					if (rand.Next(2) == 0)
					{
						wormCageFrame[num11] = 9;
					}
					else
					{
						wormCageFrame[num11] = 0;
					}
				}
			}
			int num12 = 0;
			for (int num13 = 0; num13 < 3; num13++)
			{
				switch (num13)
				{
				case 0:
					num12 = 24;
					break;
				case 1:
					num12 = 31;
					break;
				case 2:
					num12 = 34;
					break;
				}
				for (int num14 = 0; num14 < cageFrames; num14++)
				{
					if (++slugCageFrameCounter[num13, num14] >= rand.Next(5, 15))
					{
						slugCageFrameCounter[num13, num14] = 0;
						if (++slugCageFrame[num13, num14] >= num12)
						{
							slugCageFrame[num13, num14] = 0;
						}
					}
				}
			}
			for (int num15 = 0; num15 < cageFrames; num15++)
			{
				if (grasshopperCageFrame[num15] >= 0 && grasshopperCageFrame[num15] <= 1)
				{
					grasshopperCageFrameCounter[num15]++;
					if (grasshopperCageFrameCounter[num15] >= 5)
					{
						grasshopperCageFrame[num15]++;
						if (grasshopperCageFrame[num15] > 1)
						{
							grasshopperCageFrame[num15] = 0;
						}
						grasshopperCageFrameCounter[num15] = 0;
						if (rand.Next(15) == 0)
						{
							grasshopperCageFrame[num15] = 2;
						}
					}
				}
				else if (grasshopperCageFrame[num15] >= 2 && grasshopperCageFrame[num15] <= 5)
				{
					grasshopperCageFrameCounter[num15]++;
					if (grasshopperCageFrameCounter[num15] >= 5)
					{
						grasshopperCageFrameCounter[num15] = 0;
						grasshopperCageFrame[num15]++;
					}
					if (grasshopperCageFrame[num15] > 5)
					{
						grasshopperCageFrame[num15] = 6;
					}
				}
				else if (grasshopperCageFrame[num15] >= 6 && grasshopperCageFrame[num15] <= 7)
				{
					grasshopperCageFrameCounter[num15]++;
					if (grasshopperCageFrameCounter[num15] >= 5)
					{
						grasshopperCageFrame[num15]++;
						if (grasshopperCageFrame[num15] > 7)
						{
							grasshopperCageFrame[num15] = 6;
						}
						grasshopperCageFrameCounter[num15] = 0;
						if (rand.Next(15) == 0)
						{
							grasshopperCageFrame[num15] = 8;
						}
					}
				}
				else if (grasshopperCageFrame[num15] >= 8 && grasshopperCageFrame[num15] <= 11)
				{
					grasshopperCageFrameCounter[num15]++;
					if (grasshopperCageFrameCounter[num15] >= 5)
					{
						grasshopperCageFrameCounter[num15] = 0;
						grasshopperCageFrame[num15]++;
					}
					if (grasshopperCageFrame[num15] > 11)
					{
						grasshopperCageFrame[num15] = 0;
					}
				}
			}
			for (int num16 = 0; num16 < cageFrames; num16++)
			{
				byte maxValue = 5;
				if (fishBowlFrameMode[num16] == 1)
				{
					if (rand.Next(900) == 0)
					{
						fishBowlFrameMode[num16] = (byte)rand.Next(maxValue);
					}
					fishBowlFrameCounter[num16]++;
					if (fishBowlFrameCounter[num16] < 5)
					{
						continue;
					}
					fishBowlFrameCounter[num16] = 0;
					if (fishBowlFrame[num16] == 10)
					{
						if (rand.Next(20) == 0)
						{
							fishBowlFrame[num16] = 11;
							fishBowlFrameMode[num16] = 0;
						}
						else
						{
							fishBowlFrame[num16] = 1;
						}
					}
					else
					{
						fishBowlFrame[num16]++;
					}
				}
				else if (fishBowlFrameMode[num16] == 2)
				{
					if (rand.Next(3600) == 0)
					{
						fishBowlFrameMode[num16] = (byte)rand.Next(maxValue);
					}
					fishBowlFrameCounter[num16]++;
					if (fishBowlFrameCounter[num16] < 20)
					{
						continue;
					}
					fishBowlFrameCounter[num16] = 0;
					if (fishBowlFrame[num16] == 10)
					{
						if (rand.Next(20) == 0)
						{
							fishBowlFrame[num16] = 11;
							fishBowlFrameMode[num16] = 0;
						}
						else
						{
							fishBowlFrame[num16] = 1;
						}
					}
					else
					{
						fishBowlFrame[num16]++;
					}
				}
				else if (fishBowlFrameMode[num16] == 3)
				{
					if (rand.Next(3600) == 0)
					{
						fishBowlFrameMode[num16] = (byte)rand.Next(maxValue);
					}
					fishBowlFrameCounter[num16]++;
					if (fishBowlFrameCounter[num16] < rand.Next(5, 3600))
					{
						continue;
					}
					fishBowlFrameCounter[num16] = 0;
					if (fishBowlFrame[num16] == 10)
					{
						if (rand.Next(20) == 0)
						{
							fishBowlFrame[num16] = 11;
							fishBowlFrameMode[num16] = 0;
						}
						else
						{
							fishBowlFrame[num16] = 1;
						}
					}
					else
					{
						fishBowlFrame[num16]++;
					}
				}
				else if (fishBowlFrame[num16] <= 10)
				{
					if (rand.Next(3600) == 0)
					{
						fishBowlFrameMode[num16] = (byte)rand.Next(maxValue);
					}
					fishBowlFrameCounter[num16]++;
					if (fishBowlFrameCounter[num16] < 10)
					{
						continue;
					}
					fishBowlFrameCounter[num16] = 0;
					if (fishBowlFrame[num16] == 10)
					{
						if (rand.Next(12) == 0)
						{
							fishBowlFrame[num16] = 11;
						}
						else
						{
							fishBowlFrame[num16] = 1;
						}
					}
					else
					{
						fishBowlFrame[num16]++;
					}
				}
				else if (fishBowlFrame[num16] == 12 || fishBowlFrame[num16] == 13)
				{
					fishBowlFrameCounter[num16]++;
					if (fishBowlFrameCounter[num16] < 10)
					{
						continue;
					}
					fishBowlFrameCounter[num16] = 0;
					fishBowlFrame[num16]++;
					if (fishBowlFrame[num16] > 13)
					{
						if (rand.Next(20) == 0)
						{
							fishBowlFrame[num16] = 14;
						}
						else
						{
							fishBowlFrame[num16] = 12;
						}
					}
				}
				else
				{
					if (fishBowlFrame[num16] < 11)
					{
						continue;
					}
					fishBowlFrameCounter[num16]++;
					if (fishBowlFrameCounter[num16] >= 10)
					{
						fishBowlFrameCounter[num16] = 0;
						fishBowlFrame[num16]++;
						if (fishBowlFrame[num16] > 16)
						{
							fishBowlFrame[num16] = 4;
						}
					}
				}
			}
			for (int num17 = 0; num17 < 9; num17++)
			{
				for (int num18 = 0; num18 < cageFrames; num18++)
				{
					butterflyCageFrameCounter[num17, num18]++;
					if (rand.Next(3600) == 0)
					{
						butterflyCageMode[num17, num18] = (byte)rand.Next(5);
						if (rand.Next(2) == 0)
						{
							butterflyCageMode[num17, num18] += 10;
						}
					}
					int num19 = rand.Next(3, 16);
					if (butterflyCageMode[num17, num18] == 1 || butterflyCageMode[num17, num18] == 11)
					{
						num19 = 3;
					}
					if (butterflyCageMode[num17, num18] == 2 || butterflyCageMode[num17, num18] == 12)
					{
						num19 = 5;
					}
					if (butterflyCageMode[num17, num18] == 3 || butterflyCageMode[num17, num18] == 13)
					{
						num19 = 10;
					}
					if (butterflyCageMode[num17, num18] == 4 || butterflyCageMode[num17, num18] == 14)
					{
						num19 = 15;
					}
					if (butterflyCageMode[num17, num18] >= 10)
					{
						if (butterflyCageFrame[num17, num18] <= 7)
						{
							if (butterflyCageFrameCounter[num17, num18] < num19)
							{
								continue;
							}
							butterflyCageFrameCounter[num17, num18] = 0;
							butterflyCageFrame[num17, num18]--;
							if (butterflyCageFrame[num17, num18] < 0)
							{
								butterflyCageFrame[num17, num18] = 7;
							}
							if (butterflyCageFrame[num17, num18] != 1 && butterflyCageFrame[num17, num18] != 4 && butterflyCageFrame[num17, num18] != 6)
							{
								continue;
							}
							if (rand.Next(20) == 0)
							{
								butterflyCageFrame[num17, num18] += 8;
							}
							else if (rand.Next(6) == 0)
							{
								if (butterflyCageMode[num17, num18] >= 10)
								{
									butterflyCageMode[num17, num18] -= 10;
								}
								else
								{
									butterflyCageMode[num17, num18] += 10;
								}
							}
						}
						else
						{
							if (butterflyCageFrameCounter[num17, num18] < num19)
							{
								continue;
							}
							butterflyCageFrameCounter[num17, num18] = 0;
							butterflyCageFrame[num17, num18]--;
							if (butterflyCageFrame[num17, num18] < 8)
							{
								butterflyCageFrame[num17, num18] = 14;
							}
							if (butterflyCageFrame[num17, num18] != 9 && butterflyCageFrame[num17, num18] != 12 && butterflyCageFrame[num17, num18] != 14)
							{
								continue;
							}
							if (rand.Next(20) == 0)
							{
								butterflyCageFrame[num17, num18] -= 8;
							}
							else if (rand.Next(6) == 0)
							{
								if (butterflyCageMode[num17, num18] >= 10)
								{
									butterflyCageMode[num17, num18] -= 10;
								}
								else
								{
									butterflyCageMode[num17, num18] += 10;
								}
							}
						}
					}
					else if (butterflyCageFrame[num17, num18] <= 7)
					{
						if (butterflyCageFrameCounter[num17, num18] >= num19)
						{
							butterflyCageFrameCounter[num17, num18] = 0;
							butterflyCageFrame[num17, num18]++;
							if (butterflyCageFrame[num17, num18] > 7)
							{
								butterflyCageFrame[num17, num18] = 0;
							}
							if ((butterflyCageFrame[num17, num18] == 1 || butterflyCageFrame[num17, num18] == 4 || butterflyCageFrame[num17, num18] == 6) && rand.Next(10) == 0)
							{
								butterflyCageFrame[num17, num18] += 8;
							}
						}
					}
					else if (butterflyCageFrameCounter[num17, num18] >= num19)
					{
						butterflyCageFrameCounter[num17, num18] = 0;
						butterflyCageFrame[num17, num18]++;
						if (butterflyCageFrame[num17, num18] > 15)
						{
							butterflyCageFrame[num17, num18] = 8;
						}
						if ((butterflyCageFrame[num17, num18] == 9 || butterflyCageFrame[num17, num18] == 12 || butterflyCageFrame[num17, num18] == 14) && rand.Next(10) == 0)
						{
							butterflyCageFrame[num17, num18] -= 8;
						}
					}
				}
			}
			for (int num20 = 0; num20 < 3; num20++)
			{
				for (int num21 = 0; num21 < cageFrames; num21++)
				{
					jellyfishCageFrameCounter[num20, num21]++;
					if (jellyfishCageMode[num20, num21] == 0 && rand.Next(1800) == 0)
					{
						jellyfishCageMode[num20, num21] = 1;
					}
					if (jellyfishCageMode[num20, num21] == 2 && rand.Next(60) == 0)
					{
						jellyfishCageMode[num20, num21] = 3;
					}
					int num22 = 1;
					if (jellyfishCageMode[num20, num21] == 0)
					{
						num22 = rand.Next(10, 20);
					}
					if (jellyfishCageMode[num20, num21] == 1)
					{
						num22 = rand.Next(15, 25);
					}
					if (jellyfishCageMode[num20, num21] == 2)
					{
						num22 = rand.Next(4, 9);
					}
					if (jellyfishCageMode[num20, num21] == 3)
					{
						num22 = rand.Next(15, 25);
					}
					if (jellyfishCageMode[num20, num21] == 0 && jellyfishCageFrame[num20, num21] <= 3 && jellyfishCageFrameCounter[num20, num21] >= num22)
					{
						jellyfishCageFrameCounter[num20, num21] = 0;
						jellyfishCageFrame[num20, num21]++;
						if (jellyfishCageFrame[num20, num21] >= 4)
						{
							jellyfishCageFrame[num20, num21] = 0;
						}
					}
					if (jellyfishCageMode[num20, num21] == 1 && jellyfishCageFrame[num20, num21] <= 7 && jellyfishCageFrameCounter[num20, num21] >= num22)
					{
						jellyfishCageFrameCounter[num20, num21] = 0;
						jellyfishCageFrame[num20, num21]++;
						if (jellyfishCageFrame[num20, num21] >= 7)
						{
							jellyfishCageMode[num20, num21] = 2;
						}
					}
					if (jellyfishCageMode[num20, num21] == 2 && jellyfishCageFrame[num20, num21] <= 9 && jellyfishCageFrameCounter[num20, num21] >= num22)
					{
						jellyfishCageFrameCounter[num20, num21] = 0;
						jellyfishCageFrame[num20, num21]++;
						if (jellyfishCageFrame[num20, num21] >= 9)
						{
							jellyfishCageFrame[num20, num21] = 7;
						}
					}
					if (jellyfishCageMode[num20, num21] == 3 && jellyfishCageFrame[num20, num21] <= 10 && jellyfishCageFrameCounter[num20, num21] >= num22)
					{
						jellyfishCageFrameCounter[num20, num21] = 0;
						jellyfishCageFrame[num20, num21]++;
						if (jellyfishCageFrame[num20, num21] >= 10)
						{
							jellyfishCageFrame[num20, num21] = 3;
							jellyfishCageMode[num20, num21] = 0;
						}
					}
				}
			}
		}

		public static void UpdateDrawAnimations()
		{
			for (int i = 0; i < itemAnimationsRegistered.Count; i++)
			{
				int num = itemAnimationsRegistered[i];
				if (itemAnimations[num] != null)
				{
					itemAnimations[num].Update();
				}
			}
		}

		protected override void Update(GameTime gameTime)
		{
			if (_largeMethodFix)
			{
				_largeMethodFix = false;
				new Projectile().AI();
				new NPC().AI();
			}
			if (_hasPendingNetmodeChange)
			{
				netMode = _targetNetMode;
				_hasPendingNetmodeChange = false;
			}
			tileNoFail[384] = true;
			if (CaptureManager.Instance.IsCapturing)
			{
				return;
			}
			if (ActivePlayerFileData != null)
			{
				ActivePlayerFileData.UpdatePlayTimer();
			}
			ignoreErrors = true;
			if (expertMode)
			{
				damageMultiplier = expertDamage;
				knockBackMultiplier = expertKnockBack;
			}
			else
			{
				damageMultiplier = 1f;
				knockBackMultiplier = 1f;
			}
			if (!GlobalTimerPaused)
			{
				GlobalTime += 0.0166666675f;
				if (GlobalTime > 3600f)
				{
					GlobalTime -= 3600f;
				}
			}
			gameInactive = !base.IsActive;
			if (netMode == 2)
			{
				cloudAlpha = maxRaining;
			}
			if (base.IsActive && cloudAlpha > 0f)
			{
				Rain.MakeRain();
			}
			if (netMode != 1)
			{
				updateCloudLayer();
			}
			UpdateWeather();
			Ambience();
			if (netMode != 2)
			{
				if (ignoreErrors)
				{
					try
					{
						snowing();
					}
					catch
					{
					}
				}
				else
				{
					snowing();
				}
			}
			if (chTitle)
			{
				chTitle = false;
				SetTitle();
			}
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			WorldGen.destroyObject = false;
			if (gameMenu)
			{
				mapFullscreen = false;
			}
			if (dedServ)
			{
				if (dedServFPS)
				{
					updateTime++;
					if (!fpsTimer.IsRunning)
					{
						fpsTimer.Restart();
					}
					if (fpsTimer.ElapsedMilliseconds >= 1000)
					{
						dedServCount1 += updateTime;
						dedServCount2++;
						float num = (float)dedServCount1 / (float)dedServCount2;
						Console.WriteLine(updateTime + "  (" + num + ")");
						updateTime = 0;
						fpsTimer.Restart();
					}
				}
				else
				{
					if (fpsTimer.IsRunning)
					{
						fpsTimer.Stop();
					}
					updateTime = 0;
				}
			}
			if (!dedServ)
			{
				if (superFast)
				{
					base.IsFixedTimeStep = false;
					graphics.SynchronizeWithVerticalRetrace = false;
				}
				else
				{
					if (terrariasFixedTiming)
					{
						if (base.IsActive)
						{
							base.IsFixedTimeStep = false;
						}
						else
						{
							base.IsFixedTimeStep = true;
						}
					}
					else
					{
						base.IsFixedTimeStep = true;
						graphics.SynchronizeWithVerticalRetrace = true;
					}
					graphics.SynchronizeWithVerticalRetrace = true;
				}
				if (treeMntBG[1] == 94 || (treeMntBG[1] >= 114 && treeMntBG[1] <= 116))
				{
					bgFrameCounter[0]++;
					if (bgFrameCounter[0] >= 6)
					{
						bgFrameCounter[0] = 0;
						bgFrame[0]++;
						if (bgFrame[0] >= 4)
						{
							bgFrame[0] = 0;
						}
					}
					if (bgFrame[0] == 0)
					{
						treeMntBG[1] = 94;
					}
					else if (bgFrame[0] == 1)
					{
						treeMntBG[1] = 114;
					}
					else if (bgFrame[0] == 2)
					{
						treeMntBG[1] = 115;
					}
					else
					{
						treeMntBG[1] = 116;
					}
					if (bgFrame[0] == 0)
					{
						treeMntBG[0] = 93;
					}
					else if (bgFrame[0] == 1)
					{
						treeMntBG[0] = 168;
					}
					else if (bgFrame[0] == 2)
					{
						treeMntBG[0] = 169;
					}
					else
					{
						treeMntBG[0] = 170;
					}
				}
				if (treeMntBG[1] >= 180 && treeMntBG[1] <= 183)
				{
					bgFrameCounter[0]++;
					if (bgFrameCounter[0] >= 6)
					{
						bgFrameCounter[0] = 0;
						bgFrame[0]++;
						if (bgFrame[0] >= 4)
						{
							bgFrame[0] = 0;
						}
					}
					if (bgFrame[0] == 0)
					{
						treeMntBG[1] = 180;
					}
					else if (bgFrame[0] == 1)
					{
						treeMntBG[1] = 181;
					}
					else if (bgFrame[0] == 2)
					{
						treeMntBG[1] = 182;
					}
					else
					{
						treeMntBG[1] = 183;
					}
				}
				Animation.UpdateAll();
				AchievementCompleteUI.Update();
				UpdateMusic();
				if (showSplash)
				{
					return;
				}
				if (!gameMenu && netMode == 1)
				{
					if (!saveTime.IsRunning)
					{
						saveTime.Start();
					}
					if (saveTime.ElapsedMilliseconds > 300000)
					{
						saveTime.Reset();
						WorldGen.saveToonWhilePlaying();
					}
				}
				else if (!gameMenu && autoSave)
				{
					if (!saveTime.IsRunning)
					{
						saveTime.Start();
					}
					if (saveTime.ElapsedMilliseconds > 600000)
					{
						saveTime.Reset();
						WorldGen.saveToonWhilePlaying();
						WorldGen.saveAndPlay();
					}
				}
				else if (saveTime.IsRunning)
				{
					saveTime.Stop();
				}
				if (teamCooldown > 0)
				{
					teamCooldown--;
				}
				updateTime++;
				if (fpsTimer.ElapsedMilliseconds >= 1000)
				{
					if ((float)fpsCount >= 30f + 30f * gfxQuality)
					{
						gfxQuality += gfxRate;
						gfxRate += 0.005f;
					}
					else if ((float)fpsCount < 29f + 30f * gfxQuality)
					{
						gfxRate = 0.01f;
						gfxQuality -= 0.1f;
					}
					if (gfxQuality < 0f)
					{
						gfxQuality = 0f;
					}
					if (gfxQuality > 1f)
					{
						gfxQuality = 1f;
					}
					if (maxQ && base.IsActive)
					{
						gfxQuality = 1f;
						maxQ = false;
					}
					updateRate = uCount;
					frameRate = fpsCount;
					fpsCount = 0;
					fpsTimer.Restart();
					updateTime = 0;
					drawTime = 0;
					uCount = 0;
					if ((double)gfxQuality < 0.8)
					{
						mapTimeMax = (int)((1f - gfxQuality) * 60f);
					}
					else
					{
						mapTimeMax = 0;
					}
					int netMode2 = netMode;
					int num31 = 2;
				}
				if (terrariasFixedTiming)
				{
					float num2 = 16f;
					float num3 = updateTimer.ElapsedMilliseconds;
					if (num3 + uCarry < num2 && !superFast)
					{
						drawSkip = true;
						return;
					}
					uCarry += num3 - num2;
					if (uCarry > 1000f)
					{
						uCarry = 1000f;
					}
					updateTimer.Restart();
				}
				uCount++;
				drawSkip = false;
				if (qaStyle == 1)
				{
					gfxQuality = 1f;
				}
				else if (qaStyle == 2)
				{
					gfxQuality = 0.5f;
				}
				else if (qaStyle == 3)
				{
					gfxQuality = 0f;
				}
				numDust = (int)(6000f * (gfxQuality * 0.7f + 0.3f));
				if ((double)gfxQuality < 0.9)
				{
					numDust = (int)((float)numDust * gfxQuality);
				}
				if (numDust < 1000)
				{
					numDust = 1000;
				}
				Gore.goreTime = (int)(600f * gfxQuality);
				Liquid.maxLiquid = (int)(2500f + 2500f * gfxQuality);
				Liquid.cycles = (int)(17f - 10f * gfxQuality);
				if (superFast)
				{
					graphics.SynchronizeWithVerticalRetrace = false;
					drawSkip = false;
				}
				if ((double)gfxQuality < 0.2)
				{
					Lighting.maxRenderCount = 8;
				}
				else if ((double)gfxQuality < 0.4)
				{
					Lighting.maxRenderCount = 7;
				}
				else if ((double)gfxQuality < 0.6)
				{
					Lighting.maxRenderCount = 6;
				}
				else if ((double)gfxQuality < 0.8)
				{
					Lighting.maxRenderCount = 5;
				}
				else
				{
					Lighting.maxRenderCount = 4;
				}
				if (Liquid.quickSettle)
				{
					Liquid.maxLiquid = Liquid.resLiquid;
					Liquid.cycles = 1;
				}
				hasFocus = base.IsActive;
				if (!gameMenu || netMode == 2)
				{
					WorldFile.tempRaining = raining;
					WorldFile.tempRainTime = rainTime;
					WorldFile.tempMaxRain = maxRaining;
				}
				if (!base.IsActive && netMode == 0)
				{
					base.IsMouseVisible = true;
					if (netMode != 2 && myPlayer >= 0)
					{
						player[myPlayer].delayUseItem = true;
					}
					mouseLeftRelease = false;
					mouseRightRelease = false;
					if (gameMenu)
					{
						UpdateMenu();
					}
					gamePaused = true;
					return;
				}
				base.IsMouseVisible = false;
				EmoteBubble.UpdateAll();
				ScreenObstruction.Update();
				ScreenDarkness.Update();
				MoonlordDeathDrama.Update();
				CursorColor();
				mouseTextColor += (byte)mouseTextColorChange;
				if (mouseTextColor >= 250)
				{
					mouseTextColorChange = -4;
				}
				if (mouseTextColor <= 175)
				{
					mouseTextColorChange = 4;
				}
				demonTorch += (float)demonTorchDir * 0.01f;
				if (demonTorch > 1f)
				{
					demonTorch = 1f;
					demonTorchDir = -1;
				}
				if (demonTorch < 0f)
				{
					demonTorch = 0f;
					demonTorchDir = 1;
				}
				martianLight += (float)martianLightDir * 0.015f;
				if (martianLight > 1f)
				{
					martianLight = 1f;
					martianLightDir = -1;
				}
				if (martianLight < 0f)
				{
					martianLight = 0f;
					martianLightDir = 1;
				}
				int num4 = 7;
				if (DiscoStyle == 0)
				{
					DiscoG += num4;
					if (DiscoG >= 255)
					{
						DiscoG = 255;
						DiscoStyle++;
					}
				}
				if (DiscoStyle == 1)
				{
					DiscoR -= num4;
					if (DiscoR <= 0)
					{
						DiscoR = 0;
						DiscoStyle++;
					}
				}
				if (DiscoStyle == 2)
				{
					DiscoB += num4;
					if (DiscoB >= 255)
					{
						DiscoB = 255;
						DiscoStyle++;
					}
				}
				if (DiscoStyle == 3)
				{
					DiscoG -= num4;
					if (DiscoG <= 0)
					{
						DiscoG = 0;
						DiscoStyle++;
					}
				}
				if (DiscoStyle == 4)
				{
					DiscoR += num4;
					if (DiscoR >= 255)
					{
						DiscoR = 255;
						DiscoStyle++;
					}
				}
				if (DiscoStyle == 5)
				{
					DiscoB -= num4;
					if (DiscoB <= 0)
					{
						DiscoB = 0;
						DiscoStyle = 0;
					}
				}
				if (gFadeDir == 1)
				{
					gFader += 0.1f;
					gFade = (byte)gFader;
					if (gFade > 150)
					{
						gFadeDir = 0;
					}
				}
				else
				{
					gFader -= 0.1f;
					gFade = (byte)gFader;
					if (gFade < 100)
					{
						gFadeDir = 1;
					}
				}
				wFrCounter += windSpeed * 2f;
				if (wFrCounter > 4f)
				{
					wFrCounter = 0f;
					wFrame += 1f;
				}
				if (wFrCounter < 0f)
				{
					wFrCounter = 4f;
					wFrame -= 1f;
				}
				if (wFrame > 16f)
				{
					wFrame = 1f;
				}
				if (wFrame < 1f)
				{
					wFrame = 16f;
				}
				waterfallManager.UpdateFrame();
				wallFrameCounter[136]++;
				if (wallFrameCounter[136] >= 5)
				{
					wallFrameCounter[136] = 0;
					wallFrame[136]++;
					if (wallFrame[136] > 7)
					{
						wallFrame[136] = 0;
					}
				}
				wallFrameCounter[137]++;
				if (wallFrameCounter[137] >= 10)
				{
					wallFrameCounter[137] = 0;
					wallFrame[137]++;
					if (wallFrame[137] > 7)
					{
						wallFrame[137] = 0;
					}
				}
				wallFrameCounter[172]++;
				if (wallFrameCounter[172] >= 10)
				{
					wallFrameCounter[172] = 0;
					wallFrame[172]++;
					if (wallFrame[172] > 7)
					{
						wallFrame[172] = 0;
					}
				}
				wallFrameCounter[168]++;
				if (wallFrameCounter[168] >= 5)
				{
					wallFrameCounter[168] = 0;
					wallFrame[168]++;
					if (wallFrame[168] > 7)
					{
						wallFrame[168] = 0;
					}
				}
				wallFrameCounter[169]++;
				if (wallFrameCounter[169] >= 5)
				{
					wallFrameCounter[169] = 0;
					wallFrame[169]++;
					if (wallFrame[169] > 7)
					{
						wallFrame[169] = 0;
					}
				}
				wallFrameCounter[144]++;
				int num5 = 5;
				int num6 = 10;
				if (wallFrameCounter[144] < num5)
				{
					wallFrame[144] = 0;
				}
				else if (wallFrameCounter[144] < num5)
				{
					wallFrame[144] = 1;
				}
				else if (wallFrameCounter[144] < num5 * 2)
				{
					wallFrame[144] = 2;
				}
				else if (wallFrameCounter[144] < num5 * 3)
				{
					wallFrame[144] = 3;
				}
				else if (wallFrameCounter[144] < num5 * 4)
				{
					wallFrame[144] = 4;
				}
				else if (wallFrameCounter[144] < num5 * 5)
				{
					wallFrame[144] = 5;
				}
				else if (wallFrameCounter[144] < num5 * 6)
				{
					wallFrame[144] = 6;
				}
				else if (wallFrameCounter[144] < num5 * 7)
				{
					wallFrame[144] = 7;
				}
				else if (wallFrameCounter[144] < num5 * (8 + num6))
				{
					wallFrame[144] = 8;
				}
				else if (wallFrameCounter[144] < num5 * (9 + num6))
				{
					wallFrame[144] = 7;
				}
				else if (wallFrameCounter[144] < num5 * (10 + num6))
				{
					wallFrame[144] = 6;
				}
				else if (wallFrameCounter[144] < num5 * (11 + num6))
				{
					wallFrame[144] = 5;
				}
				else if (wallFrameCounter[144] < num5 * (12 + num6))
				{
					wallFrame[144] = 4;
				}
				else if (wallFrameCounter[144] < num5 * (13 + num6))
				{
					wallFrame[144] = 3;
				}
				else if (wallFrameCounter[144] < num5 * (14 + num6))
				{
					wallFrame[144] = 2;
				}
				else if (wallFrameCounter[144] < num5 * (15 + num6))
				{
					wallFrame[144] = 1;
				}
				else
				{
					wallFrame[144] = 0;
					if (wallFrameCounter[144] > num5 * (16 + num6 * 2))
					{
						wallFrameCounter[144] = 0;
					}
				}
				tileFrameCounter[12]++;
				if (tileFrameCounter[12] > 5)
				{
					tileFrameCounter[12] = 0;
					tileFrame[12]++;
					if (tileFrame[12] >= 10)
					{
						tileFrame[12] = 0;
					}
				}
				tileFrameCounter[17]++;
				if (tileFrameCounter[17] > 5)
				{
					tileFrameCounter[17] = 0;
					tileFrame[17]++;
					if (tileFrame[17] >= 12)
					{
						tileFrame[17] = 0;
					}
				}
				if (++tileFrameCounter[133] >= 4)
				{
					tileFrameCounter[133] = 0;
					if (++tileFrame[133] >= 6)
					{
						tileFrame[133] = 0;
					}
				}
				tileFrameCounter[31]++;
				if (tileFrameCounter[31] > 10)
				{
					tileFrameCounter[31] = 0;
					tileFrame[31]++;
					if (tileFrame[31] > 1)
					{
						tileFrame[31] = 0;
					}
				}
				tileFrameCounter[77]++;
				if (tileFrameCounter[77] > 5)
				{
					tileFrameCounter[77] = 0;
					tileFrame[77]++;
					if (tileFrame[77] >= 12)
					{
						tileFrame[77] = 0;
					}
				}
				tileFrameCounter[106]++;
				if (tileFrameCounter[106] > 4)
				{
					tileFrameCounter[106] = 0;
					tileFrame[106]++;
					if (tileFrame[106] >= 2)
					{
						tileFrame[106] = 0;
					}
				}
				tileFrameCounter[207]++;
				if (tileFrameCounter[207] > 4)
				{
					tileFrameCounter[207] = 0;
					tileFrame[207]++;
					if (tileFrame[207] >= 6)
					{
						tileFrame[207] = 0;
					}
				}
				tileFrameCounter[215]++;
				if (tileFrameCounter[215] >= 4)
				{
					tileFrameCounter[215] = 0;
					tileFrame[215]++;
					if (tileFrame[215] >= 8)
					{
						tileFrame[215] = 0;
					}
				}
				tileFrameCounter[217]++;
				if (tileFrameCounter[217] > 4)
				{
					tileFrameCounter[217] = 0;
					tileFrame[217]++;
					if (tileFrame[217] >= 5)
					{
						tileFrame[217] = 0;
					}
				}
				tileFrameCounter[218]++;
				if (tileFrameCounter[218] > 4)
				{
					tileFrameCounter[218] = 0;
					tileFrame[218]++;
					if (tileFrame[218] >= 2)
					{
						tileFrame[218] = 0;
					}
				}
				tileFrameCounter[219]++;
				if (tileFrameCounter[219] > 4)
				{
					tileFrameCounter[219] = 0;
					tileFrame[219]++;
					if (tileFrame[219] >= 10)
					{
						tileFrame[219] = 0;
					}
				}
				tileFrameCounter[220]++;
				if (tileFrameCounter[220] > 4)
				{
					tileFrameCounter[220] = 0;
					tileFrame[220]++;
					if (tileFrame[220] >= 4)
					{
						tileFrame[220] = 0;
					}
				}
				tileFrameCounter[231]++;
				if (tileFrameCounter[231] > 16)
				{
					tileFrameCounter[231] = 0;
					tileFrame[231]++;
					if (tileFrame[231] >= 7)
					{
						tileFrame[231] = 0;
					}
				}
				tileFrameCounter[235]++;
				if (tileFrameCounter[235] > 20)
				{
					tileFrameCounter[235] = 0;
					tileFrame[235]++;
					if (tileFrame[235] >= 4)
					{
						tileFrame[235] = 0;
					}
					if (tileFrame[235] > 1)
					{
						tileLighted[235] = true;
					}
					else
					{
						tileLighted[235] = false;
					}
				}
				tileFrameCounter[238]++;
				if (tileFrameCounter[238] > 20)
				{
					tileFrameCounter[238] = 0;
					tileFrame[238]++;
					if (tileFrame[238] >= 4)
					{
						tileFrame[238] = 0;
					}
				}
				tileFrameCounter[243]++;
				if (tileFrameCounter[243] > 4)
				{
					tileFrameCounter[243] = 0;
					tileFrame[243]++;
					if (tileFrame[243] >= 6)
					{
						tileFrame[243] = 0;
					}
				}
				tileFrameCounter[244]++;
				if (tileFrameCounter[244] > 4)
				{
					tileFrameCounter[244] = 0;
					tileFrame[244]++;
					if (tileFrame[244] >= 6)
					{
						tileFrame[244] = 0;
					}
				}
				tileFrameCounter[247]++;
				if (tileFrameCounter[247] > 4)
				{
					tileFrameCounter[247] = 0;
					tileFrame[247]++;
					if (tileFrame[247] > 7)
					{
						tileFrame[247] = 0;
					}
				}
				tileFrameCounter[96]++;
				if (tileFrameCounter[96] > 4)
				{
					tileFrameCounter[96] = 0;
					tileFrame[96]++;
					if (tileFrame[96] > 3)
					{
						tileFrame[96] = 0;
					}
				}
				tileFrameCounter[171]++;
				if (tileFrameCounter[171] > 16)
				{
					tileFrameCounter[171] = 0;
					tileFrame[171]++;
					if (tileFrame[171] > 3)
					{
						tileFrame[171] = 0;
					}
				}
				tileFrameCounter[270]++;
				if (tileFrameCounter[270] > 8)
				{
					tileFrameCounter[270] = 0;
					tileFrame[270]++;
					if (tileFrame[270] > 5)
					{
						tileFrame[270] = 0;
					}
				}
				tileFrame[271] = tileFrame[270];
				tileFrameCounter[272]++;
				if (tileFrameCounter[272] >= 10)
				{
					tileFrameCounter[272] = 0;
					tileFrame[272]++;
					if (tileFrame[272] > 1)
					{
						tileFrame[272] = 0;
					}
				}
				tileFrameCounter[300]++;
				if (tileFrameCounter[300] >= 5)
				{
					tileFrameCounter[300] = 0;
					tileFrame[300]++;
					if (tileFrame[300] > 6)
					{
						tileFrame[300] = 0;
					}
				}
				tileFrameCounter[301]++;
				if (tileFrameCounter[301] >= 5)
				{
					tileFrameCounter[301] = 0;
					tileFrame[301]++;
					if (tileFrame[301] > 7)
					{
						tileFrame[301] = 0;
					}
				}
				tileFrameCounter[302]++;
				if (tileFrameCounter[302] >= 5)
				{
					tileFrameCounter[302] = 0;
					tileFrame[302]++;
					if (tileFrame[302] > 3)
					{
						tileFrame[302] = 0;
					}
				}
				tileFrameCounter[303]++;
				if (tileFrameCounter[303] >= 5)
				{
					tileFrameCounter[303] = 0;
					tileFrame[303]++;
					if (tileFrame[303] > 4)
					{
						tileFrame[303] = 0;
					}
				}
				tileFrameCounter[305]++;
				if (tileFrameCounter[305] >= 5)
				{
					tileFrameCounter[305] = 0;
					tileFrame[305]++;
					if (tileFrame[305] > 11)
					{
						tileFrame[305] = 0;
					}
				}
				tileFrameCounter[306]++;
				if (tileFrameCounter[306] >= 5)
				{
					tileFrameCounter[306] = 0;
					tileFrame[306]++;
					if (tileFrame[306] > 11)
					{
						tileFrame[306] = 0;
					}
				}
				tileFrameCounter[307]++;
				if (tileFrameCounter[307] >= 5)
				{
					tileFrameCounter[307] = 0;
					tileFrame[307]++;
					if (tileFrame[307] > 1)
					{
						tileFrame[307] = 0;
					}
				}
				tileFrameCounter[308]++;
				if (tileFrameCounter[308] >= 5)
				{
					tileFrameCounter[308] = 0;
					tileFrame[308]++;
					if (tileFrame[308] > 7)
					{
						tileFrame[308] = 0;
					}
				}
				tileFrameCounter[314]++;
				if (tileFrameCounter[314] >= 10)
				{
					tileFrameCounter[314] = 0;
					tileFrame[314]++;
					if (tileFrame[314] > 4)
					{
						tileFrame[314] = 0;
					}
				}
				tileFrameCounter[326]++;
				if (tileFrameCounter[326] >= 5)
				{
					tileFrameCounter[326] = 0;
					tileFrame[326]++;
					if (tileFrame[326] > 7)
					{
						tileFrame[326] = 0;
					}
				}
				tileFrameCounter[327]++;
				if (tileFrameCounter[327] >= 10)
				{
					tileFrameCounter[327] = 0;
					tileFrame[327]++;
					if (tileFrame[327] > 7)
					{
						tileFrame[327] = 0;
					}
				}
				tileFrameCounter[345]++;
				if (tileFrameCounter[345] >= 10)
				{
					tileFrameCounter[345] = 0;
					tileFrame[345]++;
					if (tileFrame[345] > 7)
					{
						tileFrame[345] = 0;
					}
				}
				tileFrameCounter[336]++;
				if (tileFrameCounter[336] >= 5)
				{
					tileFrameCounter[336] = 0;
					tileFrame[336]++;
					if (tileFrame[336] > 3)
					{
						tileFrame[336] = 0;
					}
				}
				tileFrameCounter[328]++;
				if (tileFrameCounter[328] >= 5)
				{
					tileFrameCounter[328] = 0;
					tileFrame[328]++;
					if (tileFrame[328] > 7)
					{
						tileFrame[328] = 0;
					}
				}
				tileFrameCounter[329]++;
				if (tileFrameCounter[329] >= 5)
				{
					tileFrameCounter[329] = 0;
					tileFrame[329]++;
					if (tileFrame[329] > 7)
					{
						tileFrame[329] = 0;
					}
				}
				for (int i = 340; i <= 344; i++)
				{
					tileFrameCounter[i]++;
					if (tileFrameCounter[i] >= 5)
					{
						tileFrameCounter[i] = 0;
						tileFrame[i]++;
						if (tileFrame[i] > 3)
						{
							tileFrame[i] = 0;
						}
					}
				}
				tileFrameCounter[351]++;
				if (tileFrameCounter[351] >= 5)
				{
					tileFrameCounter[351] = 0;
					tileFrame[351]++;
					if (tileFrame[351] > 2)
					{
						tileFrame[351] = 0;
					}
				}
				tileFrameCounter[354]++;
				if (tileFrameCounter[354] >= 5)
				{
					tileFrameCounter[354] = 0;
					tileFrame[354]++;
					if (tileFrame[354] >= 8)
					{
						tileFrame[354] = 0;
					}
				}
				tileFrame[355] = tileFrame[354];
				tileFrameCounter[377]++;
				if (tileFrameCounter[377] >= 5)
				{
					tileFrameCounter[377] = 0;
					tileFrame[377]++;
					if (tileFrame[377] >= 4)
					{
						tileFrame[377] = 0;
					}
				}
				tileFrameCounter[379]++;
				if (tileFrameCounter[379] >= 10)
				{
					tileFrameCounter[379] = 0;
					tileFrame[379]++;
					if (tileFrame[379] >= 4)
					{
						tileFrame[379] = 0;
					}
				}
				if (++tileFrameCounter[390] >= 8)
				{
					tileFrameCounter[390] = 0;
					if (++tileFrame[390] >= 7)
					{
						tileFrame[390] = 0;
					}
				}
				if (++tileFrameCounter[228] >= 5)
				{
					tileFrameCounter[228] = 0;
					if (++tileFrame[228] >= 3)
					{
						tileFrame[228] = 0;
					}
				}
				if (++tileFrameCounter[405] >= 5)
				{
					tileFrameCounter[405] = 0;
					if (++tileFrame[405] >= 8)
					{
						tileFrame[405] = 0;
					}
				}
				if (++tileFrameCounter[406] >= 8)
				{
					tileFrameCounter[406] = 0;
					if (++tileFrame[406] >= 6)
					{
						tileFrame[406] = 0;
					}
				}
				if (++tileFrame[412] >= 240)
				{
					tileFrame[412] = 0;
				}
				if (++tileFrameCounter[410] >= 8)
				{
					tileFrameCounter[410] = 0;
					if (++tileFrame[410] >= 8)
					{
						tileFrame[410] = 0;
					}
				}
				CritterCages();
				UpdateDrawAnimations();
				if (keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.F10) && !chatMode && !editSign && !editChest)
				{
					if (frameRelease)
					{
						PlaySound(12);
						if (showFrameRate)
						{
							showFrameRate = false;
						}
						else
						{
							showFrameRate = true;
						}
					}
					frameRelease = false;
				}
				else
				{
					frameRelease = true;
				}
				if (keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.F9) && !chatMode && !editSign && !editChest)
				{
					if (RGBRelease)
					{
						PlaySound(12);
						Lighting.NextLightMode();
					}
					RGBRelease = false;
				}
				else
				{
					RGBRelease = true;
				}
				if (keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.F8) && !chatMode && !editSign && !editChest)
				{
					if (netRelease)
					{
						PlaySound(12);
						if (netDiag)
						{
							netDiag = false;
						}
						else
						{
							netDiag = true;
						}
					}
					netRelease = false;
				}
				else
				{
					netRelease = true;
				}
				if (keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.F7) && !chatMode && !editSign && !editChest)
				{
					if (drawRelease)
					{
						PlaySound(12);
						if (keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftAlt) || keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.RightAlt))
						{
							TimeLogger.Start();
						}
						else if (drawDiag)
						{
							drawDiag = false;
						}
						else
						{
							drawDiag = true;
						}
					}
					drawRelease = false;
				}
				else
				{
					drawRelease = true;
				}
				if (keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.F11))
				{
					if (releaseUI)
					{
						if (hideUI)
						{
							hideUI = false;
						}
						else
						{
							hideUI = true;
						}
					}
					releaseUI = false;
				}
				else
				{
					releaseUI = true;
				}
				if ((keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftAlt) || keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.RightAlt)) && keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Enter) && hasFocus)
				{
					if (toggleFullscreen)
					{
						ToggleFullScreen();
						chatRelease = false;
					}
					toggleFullscreen = false;
				}
				else
				{
					toggleFullscreen = true;
				}
				if (!gamePad || gameMenu)
				{
					oldMouseState = mouseState;
					oldMouseWheel = mouseState.ScrollWheelValue;
					mouseState = Mouse.GetState();
					lastMouseX = mouseX;
					lastMouseY = mouseY;
					mouseX = mouseState.X;
					mouseY = mouseState.Y;
					mouseLeft = false;
					mouseRight = false;
					if (base.IsActive)
					{
						if (UserInterface.ActiveInstance.IsElementUnderMouse())
						{
							oldMouseWheel = mouseState.ScrollWheelValue;
							_isMouseLeftConsumedByUI = true;
						}
						else
						{
							if (mouseState.LeftButton == Microsoft.Xna.Framework.Input.ButtonState.Released)
							{
								_isMouseLeftConsumedByUI = false;
							}
							if (!_isMouseLeftConsumedByUI)
							{
								if (mouseState.LeftButton == Microsoft.Xna.Framework.Input.ButtonState.Pressed)
								{
									mouseLeft = true;
								}
								if (mouseState.RightButton == Microsoft.Xna.Framework.Input.ButtonState.Pressed)
								{
									mouseRight = true;
								}
							}
						}
					}
				}
				keyState = Keyboard.GetState();
				if (editSign)
				{
					chatMode = false;
				}
				if (!chatMode)
				{
					startChatLine = 0;
				}
				else
				{
					showCount = (int)((float)(screenHeight / 3) / fontMouseText.MeasureString("1").Y) - 1;
					if (keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Up))
					{
						startChatLine++;
						if (startChatLine + showCount >= numChatLines - 1)
						{
							startChatLine = numChatLines - showCount - 1;
						}
						if (chatLine[startChatLine + showCount].text == "")
						{
							startChatLine--;
						}
					}
					else if (keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Down))
					{
						startChatLine--;
						if (startChatLine < 0)
						{
							startChatLine = 0;
						}
					}
					if (keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Escape))
					{
						chatMode = false;
					}
					string a = chatText;
					chatText = GetInputText(chatText);
					int num7 = 470;
					num7 = screenWidth - 330;
					if (a != chatText)
					{
						while (ChatManager.GetStringSize(fontMouseText, chatText, Vector2.One).X > (float)num7)
						{
							chatText = chatText.Substring(0, chatText.Length - 1);
						}
					}
					if (a != chatText)
					{
						PlaySound(12);
					}
					if (inputTextEnter && chatRelease)
					{
						if (chatText != "")
						{
							NetMessage.SendData(25, -1, -1, chatText, myPlayer);
						}
						if (netMode == 0 && chatText != "")
						{
							Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
							if (player[myPlayer].difficulty == 2)
							{
								white = hcColor;
							}
							else if (player[myPlayer].difficulty == 1)
							{
								white = mcColor;
							}
							string text = chatText;
							text = NameTagHandler.GenerateTag(player[myPlayer].name) + " " + chatText;
							player[myPlayer].chatOverhead.NewMessage(chatText, chatLength / 2);
							NewText(text, white.R, white.G, white.B);
						}
						chatText = "";
						chatMode = false;
						chatRelease = false;
						player[myPlayer].releaseHook = false;
						player[myPlayer].releaseThrow = false;
						PlaySound(11);
					}
				}
				if (keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Enter) && netMode == 1 && !keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftAlt) && !keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.RightAlt) && hasFocus)
				{
					if (chatRelease && !chatMode && !editSign && !editChest && !gameMenu && !keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Escape))
					{
						PlaySound(10);
						chatMode = true;
						clrInput();
						chatText = "";
					}
					chatRelease = false;
				}
				else
				{
					chatRelease = true;
				}
				if (gameMenu)
				{
					UpdateMenu();
					if (netMode != 2)
					{
						return;
					}
					gamePaused = false;
				}
				CheckInvasionProgressDisplay();
			}
			if (netMode == 1)
			{
				for (int j = 0; j < 59; j++)
				{
					if (player[myPlayer].inventory[j].IsNotTheSameAs(clientPlayer.inventory[j]))
					{
						NetMessage.SendData(5, -1, -1, "", myPlayer, j, (int)player[myPlayer].inventory[j].prefix);
					}
				}
				for (int k = 0; k < player[myPlayer].armor.Length; k++)
				{
					if (player[myPlayer].armor[k].IsNotTheSameAs(clientPlayer.armor[k]))
					{
						NetMessage.SendData(5, -1, -1, "", myPlayer, 59 + k, (int)player[myPlayer].armor[k].prefix);
					}
				}
				for (int l = 0; l < player[myPlayer].miscEquips.Length; l++)
				{
					if (player[myPlayer].miscEquips[l].IsNotTheSameAs(clientPlayer.miscEquips[l]))
					{
						NetMessage.SendData(5, -1, -1, "", myPlayer, 58 + player[myPlayer].armor.Length + player[myPlayer].dye.Length + 1 + l, (int)player[myPlayer].miscEquips[l].prefix);
					}
				}
				for (int m = 0; m < player[myPlayer].miscDyes.Length; m++)
				{
					if (player[myPlayer].miscDyes[m].IsNotTheSameAs(clientPlayer.miscDyes[m]))
					{
						NetMessage.SendData(5, -1, -1, "", myPlayer, 58 + player[myPlayer].armor.Length + player[myPlayer].dye.Length + player[myPlayer].miscEquips.Length + 1 + m, (int)player[myPlayer].miscDyes[m].prefix);
					}
				}
				for (int n = 0; n < player[myPlayer].bank.item.Length; n++)
				{
					if (player[myPlayer].bank.item[n].IsNotTheSameAs(clientPlayer.bank.item[n]))
					{
						NetMessage.SendData(5, -1, -1, "", myPlayer, 58 + player[myPlayer].armor.Length + player[myPlayer].dye.Length + player[myPlayer].miscEquips.Length + player[myPlayer].miscDyes.Length + 1 + n, (int)player[myPlayer].bank.item[n].prefix);
					}
				}
				for (int num8 = 0; num8 < player[myPlayer].bank2.item.Length; num8++)
				{
					if (player[myPlayer].bank2.item[num8].IsNotTheSameAs(clientPlayer.bank2.item[num8]))
					{
						NetMessage.SendData(5, -1, -1, "", myPlayer, 58 + player[myPlayer].armor.Length + player[myPlayer].dye.Length + player[myPlayer].miscEquips.Length + player[myPlayer].miscDyes.Length + player[myPlayer].bank.item.Length + 1 + num8, (int)player[myPlayer].bank2.item[num8].prefix);
					}
				}
				if (player[myPlayer].trashItem.IsNotTheSameAs(clientPlayer.trashItem))
				{
					NetMessage.SendData(5, -1, -1, "", myPlayer, 58 + player[myPlayer].armor.Length + player[myPlayer].dye.Length + player[myPlayer].miscEquips.Length + player[myPlayer].miscDyes.Length + player[myPlayer].bank.item.Length + player[myPlayer].bank2.item.Length + 1, (int)player[myPlayer].trashItem.prefix);
				}
				for (int num9 = 0; num9 < player[myPlayer].dye.Length; num9++)
				{
					if (player[myPlayer].dye[num9].IsNotTheSameAs(clientPlayer.dye[num9]))
					{
						NetMessage.SendData(5, -1, -1, "", myPlayer, 58 + player[myPlayer].armor.Length + 1 + num9, (int)player[myPlayer].dye[num9].prefix);
					}
				}
				if (player[myPlayer].chest != clientPlayer.chest && player[myPlayer].chest < 0)
				{
					if (player[myPlayer].editedChestName)
					{
						if (chest[clientPlayer.chest] != null)
						{
							NetMessage.SendData(33, -1, -1, chest[clientPlayer.chest].name, player[myPlayer].chest, 1f);
						}
						else
						{
							NetMessage.SendData(33, -1, -1, "", player[myPlayer].chest);
						}
						player[myPlayer].editedChestName = false;
					}
					else
					{
						NetMessage.SendData(33, -1, -1, "", player[myPlayer].chest);
					}
				}
				if (player[myPlayer].talkNPC != clientPlayer.talkNPC)
				{
					NetMessage.SendData(40, -1, -1, "", myPlayer);
				}
				bool flag = false;
				if ((byte)player[myPlayer].zone1 != (byte)clientPlayer.zone1)
				{
					flag = true;
				}
				if ((byte)player[myPlayer].zone2 != (byte)clientPlayer.zone2)
				{
					flag = true;
				}
				if (flag)
				{
					NetMessage.SendData(36, -1, -1, "", myPlayer);
				}
				if (player[myPlayer].statLife != clientPlayer.statLife || player[myPlayer].statLifeMax != clientPlayer.statLifeMax)
				{
					player[myPlayer].netLife = true;
				}
				if (player[myPlayer].netLifeTime > 0)
				{
					player[myPlayer].netLifeTime--;
				}
				else if (player[myPlayer].netLife)
				{
					player[myPlayer].netLife = false;
					player[myPlayer].netLifeTime = 60;
					NetMessage.SendData(16, -1, -1, "", myPlayer);
				}
				if (player[myPlayer].statMana != clientPlayer.statMana || player[myPlayer].statManaMax != clientPlayer.statManaMax)
				{
					player[myPlayer].netMana = true;
				}
				if (player[myPlayer].netManaTime > 0)
				{
					player[myPlayer].netManaTime--;
				}
				else if (player[myPlayer].netMana)
				{
					player[myPlayer].netMana = false;
					player[myPlayer].netManaTime = 60;
					NetMessage.SendData(42, -1, -1, "", myPlayer);
				}
				bool flag2 = false;
				for (int num10 = 0; num10 < 22; num10++)
				{
					if (player[myPlayer].buffType[num10] != clientPlayer.buffType[num10])
					{
						flag2 = true;
					}
				}
				if (flag2)
				{
					NetMessage.SendData(50, -1, -1, "", myPlayer);
					NetMessage.SendData(13, -1, -1, "", myPlayer);
				}
				bool flag3 = false;
				if (player[myPlayer].MinionTargetPoint != clientPlayer.MinionTargetPoint)
				{
					flag3 = true;
				}
				if (flag3)
				{
					NetMessage.SendData(99, -1, -1, "", myPlayer);
				}
			}
			if (netMode == 1)
			{
				clientPlayer = (Player)player[myPlayer].clientClone();
			}
			if (netMode == 0 && (playerInventory || npcChatText != "" || player[myPlayer].sign >= 0 || ingameOptionsWindow || achievementsWindow) && autoPause)
			{
				if (!chatMode && !editSign && !editChest && !blockInput)
				{
					Microsoft.Xna.Framework.Input.Keys[] pressedKeys = keyState.GetPressedKeys();
					if (blockKey != 0)
					{
						bool flag4 = false;
						for (int num11 = 0; num11 < pressedKeys.Length; num11++)
						{
							if (pressedKeys[num11] == blockKey)
							{
								pressedKeys[num11] = Microsoft.Xna.Framework.Input.Keys.None;
								flag4 = true;
							}
						}
						if (!flag4)
						{
							blockKey = Microsoft.Xna.Framework.Input.Keys.None;
						}
					}
					player[myPlayer].controlInv = false;
					for (int num12 = 0; num12 < pressedKeys.Length; num12++)
					{
						string a2 = string.Concat(pressedKeys[num12]);
						if (a2 == cInv)
						{
							player[myPlayer].controlInv = true;
						}
					}
					if (player[myPlayer].controlInv)
					{
						if (player[myPlayer].releaseInventory)
						{
							player[myPlayer].ToggleInv();
						}
						player[myPlayer].releaseInventory = false;
					}
					else
					{
						player[myPlayer].releaseInventory = true;
					}
				}
				if (playerInventory)
				{
					int num13 = (mouseState.ScrollWheelValue - oldMouseWheel) / 120;
					bool flag5 = true;
					if (recBigList)
					{
						int num14 = 42;
						int num15 = 340;
						int num16 = 310;
						int num17 = (screenWidth - num16 - 280) / num14;
						int num18 = (screenHeight - num15 - 20) / num14;
						if (new Microsoft.Xna.Framework.Rectangle(num16, num15, num17 * num14, num18 * num14).Contains(MouseScreen.ToPoint()))
						{
							int num19 = Math.Sign(num13);
							while (num13 != 0)
							{
								if (num13 < 0)
								{
									recStart -= num17;
									if (recStart < 0)
									{
										recStart = 0;
									}
								}
								else
								{
									recStart += num17;
									PlaySound(12);
									if (recStart > numAvailableRecipes - num17)
									{
										recStart = numAvailableRecipes - num17;
									}
								}
								num13 -= num19;
							}
						}
					}
					if (flag5)
					{
						focusRecipe += num13;
						if (focusRecipe > numAvailableRecipes - 1)
						{
							focusRecipe = numAvailableRecipes - 1;
						}
						if (focusRecipe < 0)
						{
							focusRecipe = 0;
						}
					}
					player[myPlayer].dropItemCheck();
				}
				player[myPlayer].head = player[myPlayer].armor[0].headSlot;
				player[myPlayer].body = player[myPlayer].armor[1].bodySlot;
				player[myPlayer].legs = player[myPlayer].armor[2].legSlot;
				if (!player[myPlayer].hostile)
				{
					if (player[myPlayer].armor[10].headSlot >= 0)
					{
						player[myPlayer].head = player[myPlayer].armor[10].headSlot;
					}
					if (player[myPlayer].armor[11].bodySlot >= 0)
					{
						player[myPlayer].body = player[myPlayer].armor[11].bodySlot;
					}
					if (player[myPlayer].armor[12].legSlot >= 0)
					{
						player[myPlayer].legs = player[myPlayer].armor[12].legSlot;
					}
				}
				if (editSign)
				{
					if (player[myPlayer].sign == -1)
					{
						editSign = false;
					}
					else
					{
						npcChatText = GetInputText(npcChatText);
						if (inputTextEnter)
						{
							byte[] bytes = new byte[1]
							{
								10
							};
							npcChatText += Encoding.ASCII.GetString(bytes);
						}
						else if (inputTextEscape)
						{
							PlaySound(12);
							editSign = false;
							blockKey = Microsoft.Xna.Framework.Input.Keys.Escape;
							npcChatText = sign[player[myPlayer].sign].text;
						}
					}
				}
				else if (editChest)
				{
					string ınputText = GetInputText(npcChatText);
					if (player[myPlayer].chest == -1)
					{
						editChest = false;
					}
					else if (inputTextEnter)
					{
						PlaySound(12);
						editChest = false;
						int num20 = player[myPlayer].chest;
						if (npcChatText == defaultChestName)
						{
							npcChatText = "";
						}
						if (chest[num20].name != npcChatText)
						{
							chest[num20].name = npcChatText;
							if (netMode == 1)
							{
								player[myPlayer].editedChestName = true;
							}
						}
					}
					else if (inputTextEscape)
					{
						PlaySound(12);
						editChest = false;
						npcChatText = string.Empty;
						blockKey = Microsoft.Xna.Framework.Input.Keys.Escape;
					}
					else if (ınputText.Length <= 20)
					{
						npcChatText = ınputText;
					}
				}
				player[myPlayer].lastChest = player[myPlayer].chest;
				if (playerInventory)
				{
					player[myPlayer].AdjTiles();
				}
				gamePaused = true;
				return;
			}
			gamePaused = false;
			if (!dedServ && (double)screenPosition.Y < worldSurface * 16.0 + 16.0 && netMode != 2)
			{
				Star.UpdateStars();
				Cloud.UpdateClouds();
			}
			PortalHelper.UpdatePortalPoints();
			tileSolid[379] = false;
			numPlayers = 0;
			for (int num21 = 0; num21 < 16; num21++)
			{
				if (ignoreErrors)
				{
					try
					{
						player[num21].Update(num21);
					}
					catch
					{
					}
				}
				else
				{
					player[num21].Update(num21);
				}
			}
			if (netMode != 1)
			{
				try
				{
					NPC.SpawnNPC();
				}
				catch
				{
				}
			}
			for (int num22 = 0; num22 < 16; num22++)
			{
				player[num22].activeNPCs = 0f;
				player[num22].townNPCs = 0f;
			}
			if (wof >= 0 && !npc[wof].active)
			{
				wof = -1;
			}
			if (NPC.golemBoss >= 0 && !npc[NPC.golemBoss].active)
			{
				NPC.golemBoss = -1;
			}
			if (NPC.plantBoss >= 0 && !npc[NPC.plantBoss].active)
			{
				NPC.plantBoss = -1;
			}
			if (NPC.crimsonBoss >= 0 && !npc[NPC.crimsonBoss].active)
			{
				NPC.crimsonBoss = -1;
			}
			NPC.taxCollector = false;
			for (int num23 = 0; num23 < 200; num23++)
			{
				if (ignoreErrors)
				{
					try
					{
						npc[num23].UpdateNPC(num23);
					}
					catch (Exception)
					{
						npc[num23] = new NPC();
					}
				}
				else
				{
					npc[num23].UpdateNPC(num23);
				}
			}
			for (int num24 = 0; num24 < 500; num24++)
			{
				if (ignoreErrors)
				{
					try
					{
						gore[num24].Update();
					}
					catch
					{
						gore[num24] = new Gore();
					}
				}
				else
				{
					gore[num24].Update();
				}
			}
			for (int num25 = 0; num25 < 1000; num25++)
			{
				ProjectileUpdateLoopIndex = num25;
				if (ignoreErrors)
				{
					try
					{
						projectile[num25].Update(num25);
					}
					catch
					{
						projectile[num25] = new Projectile();
					}
				}
				else
				{
					projectile[num25].Update(num25);
				}
			}
			ProjectileUpdateLoopIndex = -1;
			for (int num26 = 0; num26 < 400; num26++)
			{
				if (ignoreErrors)
				{
					try
					{
						item[num26].UpdateItem(num26);
					}
					catch
					{
						item[num26] = new Item();
					}
				}
				else
				{
					item[num26].UpdateItem(num26);
				}
			}
			if (ignoreErrors)
			{
				try
				{
					Dust.UpdateDust();
				}
				catch
				{
					for (int num27 = 0; num27 < 6000; num27++)
					{
						dust[num27] = new Dust();
					}
				}
			}
			else
			{
				Dust.UpdateDust();
			}
			if (netMode != 2)
			{
				CombatText.UpdateCombatText();
				ItemText.UpdateItemText();
			}
			if (ignoreErrors)
			{
				try
				{
					UpdateTime();
				}
				catch
				{
					checkForSpawns = 0;
				}
			}
			else
			{
				UpdateTime();
			}
			tileSolid[379] = true;
			if (netMode != 1)
			{
				if (ignoreErrors)
				{
					try
					{
						WorldGen.UpdateWorld();
						UpdateInvasion();
					}
					catch
					{
					}
				}
				else
				{
					WorldGen.UpdateWorld();
					UpdateInvasion();
				}
			}
			if (ignoreErrors)
			{
				try
				{
					if (netMode == 2)
					{
						UpdateServer();
					}
					if (netMode == 1)
					{
						UpdateClient();
					}
				}
				catch
				{
					int netMode3 = netMode;
					int num32 = 2;
				}
			}
			else
			{
				if (netMode == 2)
				{
					UpdateServer();
				}
				if (netMode == 1)
				{
					UpdateClient();
				}
			}
			if (ignoreErrors)
			{
				try
				{
					for (int num28 = 0; num28 < numChatLines; num28++)
					{
						if (chatLine[num28].showTime > 0)
						{
							chatLine[num28].showTime--;
						}
					}
				}
				catch
				{
					for (int num29 = 0; num29 < numChatLines; num29++)
					{
						chatLine[num29] = new ChatLine();
					}
				}
			}
			else
			{
				for (int num30 = 0; num30 < numChatLines; num30++)
				{
					if (chatLine[num30].showTime > 0)
					{
						chatLine[num30].showTime--;
					}
				}
			}
			upTimer = (float)stopwatch.Elapsed.TotalMilliseconds;
			if (upTimerMaxDelay > 0f)
			{
				upTimerMaxDelay -= 1f;
			}
			else
			{
				upTimerMax = 0f;
			}
			if (upTimer > upTimerMax)
			{
				upTimerMax = upTimer;
				upTimerMaxDelay = 400f;
			}
			Chest.UpdateChestFrames();
			if (cameraLerp > 0f)
			{
				cameraLerpTimer++;
				if (cameraLerpTimer >= cameraLerpTimeToggle)
				{
					cameraLerp += (float)((cameraLerpTimer - cameraLerpTimeToggle) / 3 + 1) * 0.001f;
				}
				if (cameraLerp > 1f)
				{
					cameraLerp = 1f;
				}
			}
			base.Update(gameTime);
		}

		private static void UpdateMenu()
		{
			AchievementCompleteUI.Clear();
			playerInventory = false;
			exitScale = 0.8f;
			if (netMode == 0)
			{
				maxRaining = 0f;
				raining = false;
				if (grabSky)
				{
					return;
				}
				time += 86.4;
				if (!dayTime)
				{
					if (time > 32400.0)
					{
						bloodMoon = false;
						time = 0.0;
						dayTime = true;
						moonPhase++;
						if (moonPhase >= 8)
						{
							moonPhase = 0;
						}
					}
				}
				else if (time > 54000.0)
				{
					time = 0.0;
					dayTime = false;
				}
			}
			else if (netMode == 1)
			{
				UpdateTime();
			}
		}

		public static void clrInput()
		{
			keyCount = 0;
		}

		[DllImport("user32.dll", CharSet = CharSet.Auto, ExactSpelling = true)]
		public static extern short GetKeyState(int keyCode);

		public static string GetInputText(string oldString)
		{
			return "";
		}

		public void MouseText(string cursorText, int rare = 0, byte diff = 0)
		{
			int num = -1;
			if (mouseNPC > -1 || cursorText == null)
			{
				return;
			}
			int num2 = mouseX + 10;
			int num3 = mouseY + 10;
			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor);
			float num32;
			if (toolTip.type > 0)
			{
				rare = toolTip.rare;
				float knockBack = toolTip.knockBack;
				float num4 = 1f;
				if (toolTip.melee && player[myPlayer].kbGlove)
				{
					num4 += 1f;
				}
				if (player[myPlayer].kbBuff)
				{
					num4 += 0.5f;
				}
				if (num4 != 1f)
				{
					toolTip.knockBack *= num4;
				}
				if (toolTip.ranged && player[myPlayer].shroomiteStealth)
				{
					toolTip.knockBack *= 1f + (1f - player[myPlayer].stealth) * 0.5f;
				}
				int num5 = 20;
				int num6 = 1;
				string[] array = new string[num5];
				bool[] array2 = new bool[num5];
				bool[] array3 = new bool[num5];
				for (int i = 0; i < num5; i++)
				{
					array2[i] = false;
					array3[i] = false;
				}
				array[0] = toolTip.AffixName();
				if (toolTip.stack > 1)
				{
					string[] array4;
					string[] array5 = array4 = array;
					object obj = array4[0];
					array5[0] = string.Concat(obj, " (", toolTip.stack, ")");
				}
				if (toolTip.favorited)
				{
					array[num6++] = Lang.tip[56].Value;
					array[num6++] = Lang.tip[57].Value;
				}
				if (toolTip.social)
				{
					array[num6] = Lang.tip[0].Value;
					num6++;
					array[num6] = Lang.tip[1].Value;
					num6++;
				}
				else
				{
					if (toolTip.damage > 0 && (!toolTip.notAmmo || toolTip.useStyle > 0))
					{
						float num7 = 5E-06f;
						int damage = toolTip.damage;
						if (toolTip.melee)
						{
							array[num6] = string.Concat((int)(player[myPlayer].meleeDamage * (float)damage + num7));
							string[] array4;
							string[] array6 = array4 = array;
							int num8 = num6;
							IntPtr ıntPtr = (IntPtr)num8;
							array6[num8] = array4[(long)ıntPtr] + Lang.tip[2].Value;
						}
						else if (toolTip.ranged)
						{
							float num9 = (float)damage * player[myPlayer].rangedDamage;
							if (toolTip.useAmmo == 1 || toolTip.useAmmo == 323)
							{
								num9 *= player[myPlayer].arrowDamage;
							}
							if (toolTip.useAmmo == 1 && player[myPlayer].archery)
							{
								num9 *= 1.2f;
							}
							if (toolTip.useAmmo == 14 || toolTip.useAmmo == 311)
							{
								num9 *= player[myPlayer].bulletDamage;
							}
							if (toolTip.useAmmo == 771 || toolTip.useAmmo == 246 || toolTip.useAmmo == 312 || toolTip.useAmmo == 514)
							{
								num9 *= player[myPlayer].rocketDamage;
							}
							array[num6] = string.Concat((int)(num9 + num7));
							string[] array4;
							string[] array7 = array4 = array;
							int num10 = num6;
							IntPtr ıntPtr = (IntPtr)num10;
							array7[num10] = array4[(long)ıntPtr] + Lang.tip[3].Value;
						}
						else if (toolTip.magic)
						{
							array[num6] = string.Concat((int)(player[myPlayer].magicDamage * (float)damage + num7));
							string[] array4;
							string[] array8 = array4 = array;
							int num11 = num6;
							IntPtr ıntPtr = (IntPtr)num11;
							array8[num11] = array4[(long)ıntPtr] + Lang.tip[4].Value;
						}
						else if (toolTip.thrown)
						{
							array[num6] = string.Concat((int)(player[myPlayer].thrownDamage * (float)damage + num7));
							string[] array4;
							string[] array9 = array4 = array;
							int num12 = num6;
							IntPtr ıntPtr = (IntPtr)num12;
							array9[num12] = array4[(long)ıntPtr] + Lang.tip[58].Value;
						}
						else if (toolTip.summon)
						{
							array[num6] = string.Concat((int)(player[myPlayer].minionDamage * (float)damage + num7));
							string[] array4;
							string[] array10 = array4 = array;
							int num13 = num6;
							IntPtr ıntPtr = (IntPtr)num13;
							array10[num13] = array4[(long)ıntPtr] + Lang.tip[53].Value;
						}
						else
						{
							array[num6] = string.Concat(damage);
							string[] array4;
							string[] array11 = array4 = array;
							int num14 = num6;
							IntPtr ıntPtr = (IntPtr)num14;
							array11[num14] = array4[(long)ıntPtr] + Lang.tip[55].Value;
						}
						num6++;
						if (toolTip.melee)
						{
							int num15 = player[myPlayer].meleeCrit - player[myPlayer].inventory[player[myPlayer].selectedItem].crit + toolTip.crit;
							array[num6] = num15 + Lang.tip[5].Value;
							num6++;
						}
						else if (toolTip.ranged)
						{
							int num16 = player[myPlayer].rangedCrit - player[myPlayer].inventory[player[myPlayer].selectedItem].crit + toolTip.crit;
							array[num6] = num16 + Lang.tip[5].Value;
							num6++;
						}
						else if (toolTip.magic)
						{
							int num17 = player[myPlayer].magicCrit - player[myPlayer].inventory[player[myPlayer].selectedItem].crit + toolTip.crit;
							array[num6] = num17 + Lang.tip[5].Value;
							num6++;
						}
						else if (toolTip.thrown)
						{
							int num18 = player[myPlayer].thrownCrit - player[myPlayer].inventory[player[myPlayer].selectedItem].crit + toolTip.crit;
							array[num6] = num18 + Lang.tip[5].Value;
							num6++;
						}
						if (toolTip.useStyle > 0 && !toolTip.summon)
						{
							if (toolTip.useAnimation <= 8)
							{
								array[num6] = Lang.tip[6].Value;
							}
							else if (toolTip.useAnimation <= 20)
							{
								array[num6] = Lang.tip[7].Value;
							}
							else if (toolTip.useAnimation <= 25)
							{
								array[num6] = Lang.tip[8].Value;
							}
							else if (toolTip.useAnimation <= 30)
							{
								array[num6] = Lang.tip[9].Value;
							}
							else if (toolTip.useAnimation <= 35)
							{
								array[num6] = Lang.tip[10].Value;
							}
							else if (toolTip.useAnimation <= 45)
							{
								array[num6] = Lang.tip[11].Value;
							}
							else if (toolTip.useAnimation <= 55)
							{
								array[num6] = Lang.tip[12].Value;
							}
							else
							{
								array[num6] = Lang.tip[13].Value;
							}
							num6++;
						}
						float num19 = toolTip.knockBack;
						if (toolTip.summon)
						{
							num19 += player[myPlayer].minionKB;
						}
						if ((player[myPlayer].magicQuiver && toolTip.useAmmo == 1) || toolTip.useAmmo == 323)
						{
							num19 = (int)(num19 * 1.1f);
						}
						if (player[myPlayer].inventory[player[myPlayer].selectedItem].type == 3106 && toolTip.type == 3106)
						{
							num19 += num19 * (1f - player[myPlayer].stealth);
						}
						if (num19 == 0f)
						{
							array[num6] = Lang.tip[14].Value;
						}
						else if ((double)num19 <= 1.5)
						{
							array[num6] = Lang.tip[15].Value;
						}
						else if (num19 <= 3f)
						{
							array[num6] = Lang.tip[16].Value;
						}
						else if (num19 <= 4f)
						{
							array[num6] = Lang.tip[17].Value;
						}
						else if (num19 <= 6f)
						{
							array[num6] = Lang.tip[18].Value;
						}
						else if (num19 <= 7f)
						{
							array[num6] = Lang.tip[19].Value;
						}
						else if (num19 <= 9f)
						{
							array[num6] = Lang.tip[20].Value;
						}
						else if (num19 <= 11f)
						{
							array[num6] = Lang.tip[21].Value;
						}
						else
						{
							array[num6] = Lang.tip[22].Value;
						}
						num6++;
					}
					if (toolTip.fishingPole > 0)
					{
						array[num6] = toolTip.fishingPole + "% fishing power";
						num6++;
						array[num6] = "Requires bait to catch fish";
						num6++;
					}
					if (toolTip.bait > 0)
					{
						array[num6] = toolTip.bait + "% bait power";
						num6++;
					}
					if (toolTip.headSlot > 0 || toolTip.bodySlot > 0 || toolTip.legSlot > 0 || toolTip.accessory || projHook[toolTip.shoot] || toolTip.mountType != -1 || (toolTip.buffType > 0 && (lightPet[toolTip.buffType] || vanityPet[toolTip.buffType])))
					{
						array[num6] = Lang.tip[23].Value;
						num6++;
					}
					if (toolTip.tileWand > 0)
					{
						array[num6] = Lang.tip[52].Value + Lang.GetItemNameValue(toolTip.tileWand);
						num6++;
					}
					if (toolTip.questItem)
					{
						array[num6] = Lang.inter[65].Value;
						num6++;
					}
					if (toolTip.vanity)
					{
						array[num6] = Lang.tip[24].Value;
						num6++;
					}
					if (toolTip.defense > 0)
					{
						array[num6] = toolTip.defense + Lang.tip[25].Value;
						num6++;
					}
					if (toolTip.pick > 0)
					{
						array[num6] = toolTip.pick + Lang.tip[26].Value;
						num6++;
					}
					if (toolTip.axe > 0)
					{
						array[num6] = toolTip.axe * 5 + Lang.tip[27].Value;
						num6++;
					}
					if (toolTip.hammer > 0)
					{
						array[num6] = toolTip.hammer + Lang.tip[28].Value;
						num6++;
					}
					if (toolTip.tileBoost != 0)
					{
						int tileBoost = toolTip.tileBoost;
						if (tileBoost > 0)
						{
							array[num6] = "+" + tileBoost + Lang.tip[54].Value;
						}
						else
						{
							array[num6] = tileBoost + Lang.tip[54].Value;
						}
						num6++;
					}
					if (toolTip.healLife > 0)
					{
						array[num6] = Lang.tip[29].Value + " " + toolTip.healLife + " " + Lang.tip[30].Value;
						num6++;
					}
					if (toolTip.healMana > 0)
					{
						array[num6] = Lang.tip[29].Value + " " + toolTip.healMana + " " + Lang.tip[31].Value;
						num6++;
					}
					if (toolTip.mana > 0 && (toolTip.type != 127 || !player[myPlayer].spaceGun))
					{
						array[num6] = Lang.tip[32].Value + " " + (int)((float)toolTip.mana * player[myPlayer].manaCost) + " " + Lang.tip[31].Value;
						num6++;
					}
					if (toolTip.createWall > 0 || toolTip.createTile > -1)
					{
						if (toolTip.type != 213 && toolTip.tileWand < 1)
						{
							array[num6] = Lang.tip[33].Value;
							num6++;
						}
					}
					else if (toolTip.ammo > 0 && !toolTip.notAmmo)
					{
						array[num6] = Lang.tip[34].Value;
						num6++;
					}
					else if (toolTip.consumable)
					{
						array[num6] = Lang.tip[35].Value;
						num6++;
					}
					if (toolTip.material)
					{
						array[num6] = Lang.tip[36].Value;
						num6++;
					}
					if (toolTip.ToolTip != null)
					{
						for (int j = 0; j < toolTip.ToolTip.Lines; j++)
						{
							if (j == 0 && toolTip.type >= 1533 && toolTip.type <= 1537 && !NPC.downedPlantBoss)
							{
								array[num6] = Lang.tip[59].Value;
								num6++;
							}
							else
							{
								array[num6] = toolTip.ToolTip.GetLine(j);
								num6++;
							}
						}
					}
					if (toolTip.buffType == 26 && expertMode)
					{
						array[num6] = Lang.misc[40].Value;
						num6++;
					}
					if (toolTip.buffTime > 0)
					{
						string text = "0 s";
						text = (array[num6] = ((toolTip.buffTime / 60 < 60) ? string.Concat(Math.Round((double)toolTip.buffTime / 60.0), Lang.tip[38]) : string.Concat(Math.Round((double)(toolTip.buffTime / 60) / 60.0), Lang.tip[37])));
						num6++;
					}
					if (toolTip.type == 3262 || toolTip.type == 3282 || toolTip.type == 3283 || toolTip.type == 3284 || toolTip.type == 3285 || toolTip.type == 3286 || toolTip.type == 3316 || toolTip.type == 3315 || toolTip.type == 3317 || toolTip.type == 3389)
					{
						array[num6] = " ";
						num = num6;
						num6++;
					}
					if (toolTip.prefix > 0)
					{
						if (cpItem == null || cpItem.netID != toolTip.netID)
						{
							cpItem = new Item();
							cpItem.netDefaults(toolTip.netID);
						}
						if (cpItem.damage != toolTip.damage)
						{
							double num20 = (float)toolTip.damage - (float)cpItem.damage;
							num20 = num20 / (double)(float)cpItem.damage * 100.0;
							num20 = Math.Round(num20);
							if (num20 > 0.0)
							{
								array[num6] = "+" + num20 + Lang.tip[39];
							}
							else
							{
								array[num6] = num20 + Lang.tip[39].Value;
							}
							if (num20 < 0.0)
							{
								array3[num6] = true;
							}
							array2[num6] = true;
							num6++;
						}
						if (cpItem.useAnimation != toolTip.useAnimation)
						{
							double num21 = (float)toolTip.useAnimation - (float)cpItem.useAnimation;
							num21 = num21 / (double)(float)cpItem.useAnimation * 100.0;
							num21 = Math.Round(num21);
							num21 *= -1.0;
							if (num21 > 0.0)
							{
								array[num6] = "+" + num21 + Lang.tip[40];
							}
							else
							{
								array[num6] = num21 + Lang.tip[40].Value;
							}
							if (num21 < 0.0)
							{
								array3[num6] = true;
							}
							array2[num6] = true;
							num6++;
						}
						if (cpItem.crit != toolTip.crit)
						{
							double num22 = (float)toolTip.crit - (float)cpItem.crit;
							if (num22 > 0.0)
							{
								array[num6] = "+" + num22 + Lang.tip[41];
							}
							else
							{
								array[num6] = num22 + Lang.tip[41].Value;
							}
							if (num22 < 0.0)
							{
								array3[num6] = true;
							}
							array2[num6] = true;
							num6++;
						}
						if (cpItem.mana != toolTip.mana)
						{
							double num23 = (float)toolTip.mana - (float)cpItem.mana;
							num23 = num23 / (double)(float)cpItem.mana * 100.0;
							num23 = Math.Round(num23);
							if (num23 > 0.0)
							{
								array[num6] = "+" + num23 + Lang.tip[42];
							}
							else
							{
								array[num6] = num23 + Lang.tip[42].Value;
							}
							if (num23 > 0.0)
							{
								array3[num6] = true;
							}
							array2[num6] = true;
							num6++;
						}
						if (cpItem.scale != toolTip.scale)
						{
							double num24 = toolTip.scale - cpItem.scale;
							num24 = num24 / (double)cpItem.scale * 100.0;
							num24 = Math.Round(num24);
							if (num24 > 0.0)
							{
								array[num6] = "+" + num24 + Lang.tip[43];
							}
							else
							{
								array[num6] = num24 + Lang.tip[43].Value;
							}
							if (num24 < 0.0)
							{
								array3[num6] = true;
							}
							array2[num6] = true;
							num6++;
						}
						if (cpItem.shootSpeed != toolTip.shootSpeed)
						{
							double num25 = toolTip.shootSpeed - cpItem.shootSpeed;
							num25 = num25 / (double)cpItem.shootSpeed * 100.0;
							num25 = Math.Round(num25);
							if (num25 > 0.0)
							{
								array[num6] = "+" + num25 + Lang.tip[44];
							}
							else
							{
								array[num6] = num25 + Lang.tip[44].Value;
							}
							if (num25 < 0.0)
							{
								array3[num6] = true;
							}
							array2[num6] = true;
							num6++;
						}
						if (cpItem.knockBack != knockBack)
						{
							double num26 = knockBack - cpItem.knockBack;
							num26 = num26 / (double)cpItem.knockBack * 100.0;
							num26 = Math.Round(num26);
							if (num26 > 0.0)
							{
								array[num6] = "+" + num26 + Lang.tip[45];
							}
							else
							{
								array[num6] = num26 + Lang.tip[45].Value;
							}
							if (num26 < 0.0)
							{
								array3[num6] = true;
							}
							array2[num6] = true;
							num6++;
						}
						if (toolTip.prefix == 62)
						{
							array[num6] = "+1" + Lang.tip[25].Value;
							array2[num6] = true;
							num6++;
						}
						if (toolTip.prefix == 63)
						{
							array[num6] = "+2" + Lang.tip[25].Value;
							array2[num6] = true;
							num6++;
						}
						if (toolTip.prefix == 64)
						{
							array[num6] = "+3" + Lang.tip[25].Value;
							array2[num6] = true;
							num6++;
						}
						if (toolTip.prefix == 65)
						{
							array[num6] = "+4" + Lang.tip[25].Value;
							array2[num6] = true;
							num6++;
						}
						if (toolTip.prefix == 66)
						{
							array[num6] = "+20 " + Lang.tip[31].Value;
							array2[num6] = true;
							num6++;
						}
						if (toolTip.prefix == 67)
						{
							array[num6] = "+2" + Lang.tip[5].Value;
							array2[num6] = true;
							num6++;
						}
						if (toolTip.prefix == 68)
						{
							array[num6] = "+4" + Lang.tip[5].Value;
							array2[num6] = true;
							num6++;
						}
						if (toolTip.prefix == 69)
						{
							array[num6] = "+1" + Lang.tip[39].Value;
							array2[num6] = true;
							num6++;
						}
						if (toolTip.prefix == 70)
						{
							array[num6] = "+2" + Lang.tip[39].Value;
							array2[num6] = true;
							num6++;
						}
						if (toolTip.prefix == 71)
						{
							array[num6] = "+3" + Lang.tip[39].Value;
							array2[num6] = true;
							num6++;
						}
						if (toolTip.prefix == 72)
						{
							array[num6] = "+4" + Lang.tip[39].Value;
							array2[num6] = true;
							num6++;
						}
						if (toolTip.prefix == 73)
						{
							array[num6] = "+1" + Lang.tip[46].Value;
							array2[num6] = true;
							num6++;
						}
						if (toolTip.prefix == 74)
						{
							array[num6] = "+2" + Lang.tip[46].Value;
							array2[num6] = true;
							num6++;
						}
						if (toolTip.prefix == 75)
						{
							array[num6] = "+3" + Lang.tip[46].Value;
							array2[num6] = true;
							num6++;
						}
						if (toolTip.prefix == 76)
						{
							array[num6] = "+4" + Lang.tip[46].Value;
							array2[num6] = true;
							num6++;
						}
						if (toolTip.prefix == 77)
						{
							array[num6] = "+1" + Lang.tip[47].Value;
							array2[num6] = true;
							num6++;
						}
						if (toolTip.prefix == 78)
						{
							array[num6] = "+2" + Lang.tip[47].Value;
							array2[num6] = true;
							num6++;
						}
						if (toolTip.prefix == 79)
						{
							array[num6] = "+3" + Lang.tip[47].Value;
							array2[num6] = true;
							num6++;
						}
						if (toolTip.prefix == 80)
						{
							array[num6] = "+4" + Lang.tip[47].Value;
							array2[num6] = true;
							num6++;
						}
					}
					if (toolTip.wornArmor && player[myPlayer].setBonus != "")
					{
						array[num6] = string.Concat(Lang.tip[48], " ", player[myPlayer].setBonus);
						num6++;
					}
				}
				if (toolTip.expert)
				{
					array[num6] = Language.GetTextValue("UI.Expert");
					num6++;
				}
				if (npcShop > 0)
				{
					if (toolTip.value > 0)
					{
						string text2 = "";
						int num27 = 0;
						int num28 = 0;
						int num29 = 0;
						int num30 = 0;
						int num31 = toolTip.value * toolTip.stack;
						if (!toolTip.buy)
						{
							num31 = toolTip.value / 5 * toolTip.stack;
						}
						if (num31 < 1)
						{
							num31 = 1;
						}
						if (num31 >= 1000000)
						{
							num27 = num31 / 1000000;
							num31 -= num27 * 1000000;
						}
						if (num31 >= 10000)
						{
							num28 = num31 / 10000;
							num31 -= num28 * 10000;
						}
						if (num31 >= 100)
						{
							num29 = num31 / 100;
							num31 -= num29 * 100;
						}
						if (num31 >= 1)
						{
							num30 = num31;
						}
						if (num27 > 0)
						{
							object obj = text2;
							text2 = string.Concat(obj, num27, " ", Lang.inter[15], " ");
						}
						if (num28 > 0)
						{
							object obj = text2;
							text2 = string.Concat(obj, num28, " ", Lang.inter[16], " ");
						}
						if (num29 > 0)
						{
							object obj = text2;
							text2 = string.Concat(obj, num29, " ", Lang.inter[17], " ");
						}
						if (num30 > 0)
						{
							object obj = text2;
							text2 = string.Concat(obj, num30, " ", Lang.inter[18], " ");
						}
						if (!toolTip.buy)
						{
							array[num6] = string.Concat(Lang.tip[49], " ", text2);
						}
						else
						{
							array[num6] = string.Concat(Lang.tip[50], " ", text2);
						}
						num6++;
						num32 = (float)(int)mouseTextColor / 255f;
						if (num27 > 0)
						{
							color = new Microsoft.Xna.Framework.Color((byte)(220f * num32), (byte)(220f * num32), (byte)(198f * num32), mouseTextColor);
						}
						else if (num28 > 0)
						{
							color = new Microsoft.Xna.Framework.Color((byte)(224f * num32), (byte)(201f * num32), (byte)(92f * num32), mouseTextColor);
						}
						else if (num29 > 0)
						{
							color = new Microsoft.Xna.Framework.Color((byte)(181f * num32), (byte)(192f * num32), (byte)(193f * num32), mouseTextColor);
						}
						else if (num30 > 0)
						{
							color = new Microsoft.Xna.Framework.Color((byte)(246f * num32), (byte)(138f * num32), (byte)(96f * num32), mouseTextColor);
						}
					}
					else
					{
						num32 = (float)(int)mouseTextColor / 255f;
						array[num6] = Lang.tip[51].Value;
						num6++;
						color = new Microsoft.Xna.Framework.Color((byte)(120f * num32), (byte)(120f * num32), (byte)(120f * num32), mouseTextColor);
					}
				}
				Vector2 zero = Vector2.Zero;
				int num33 = 0;
				for (int k = 0; k < num6; k++)
				{
					Vector2 vector = fontMouseText.MeasureString(array[k]);
					if (vector.X > zero.X)
					{
						zero.X = vector.X;
					}
					zero.Y += vector.Y + (float)num33;
				}
				num2 += toolTipDistance;
				num3 += toolTipDistance;
				if ((float)num2 + zero.X + 4f > (float)screenWidth)
				{
					num2 = (int)((float)screenWidth - zero.X - 4f);
				}
				if ((float)num3 + zero.Y + 4f > (float)screenHeight)
				{
					num3 = (int)((float)screenHeight - zero.Y - 4f);
				}
				int num34 = 0;
				num32 = (float)(int)mouseTextColor / 255f;
				for (int l = 0; l < num6; l++)
				{
					if (l == num)
					{
						float num35 = 1f;
						int num36 = (int)((float)(int)mouseTextColor * num35);
						Microsoft.Xna.Framework.Color color2 = Microsoft.Xna.Framework.Color.Black;
						for (int m = 0; m < 5; m++)
						{
							int num37 = num2;
							int num38 = num3 + num34;
							if (m == 4)
							{
								color2 = new Microsoft.Xna.Framework.Color(num36, num36, num36, num36);
							}
							switch (m)
							{
							case 0:
								num37--;
								break;
							case 1:
								num37++;
								break;
							case 2:
								num38--;
								break;
							case 3:
								num38++;
								break;
							}
							spriteBatch.Draw(oneDropLogo, new Vector2(num37, num38), null, color2, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						}
					}
					else
					{
						for (int n = 0; n < 5; n++)
						{
							int num39 = num2;
							int num40 = num3 + num34;
							Microsoft.Xna.Framework.Color color3 = Microsoft.Xna.Framework.Color.Black;
							switch (n)
							{
							case 0:
								num39 -= 2;
								break;
							case 1:
								num39 += 2;
								break;
							case 2:
								num40 -= 2;
								break;
							case 3:
								num40 += 2;
								break;
							default:
								color3 = new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor);
								if (l == 0)
								{
									if (rare == -11)
									{
										color3 = new Microsoft.Xna.Framework.Color((byte)(255f * num32), (byte)(175f * num32), (byte)(0f * num32), mouseTextColor);
									}
									if (rare == -1)
									{
										color3 = new Microsoft.Xna.Framework.Color((byte)(130f * num32), (byte)(130f * num32), (byte)(130f * num32), mouseTextColor);
									}
									if (rare == 1)
									{
										color3 = new Microsoft.Xna.Framework.Color((byte)(150f * num32), (byte)(150f * num32), (byte)(255f * num32), mouseTextColor);
									}
									if (rare == 2)
									{
										color3 = new Microsoft.Xna.Framework.Color((byte)(150f * num32), (byte)(255f * num32), (byte)(150f * num32), mouseTextColor);
									}
									if (rare == 3)
									{
										color3 = new Microsoft.Xna.Framework.Color((byte)(255f * num32), (byte)(200f * num32), (byte)(150f * num32), mouseTextColor);
									}
									if (rare == 4)
									{
										color3 = new Microsoft.Xna.Framework.Color((byte)(255f * num32), (byte)(150f * num32), (byte)(150f * num32), mouseTextColor);
									}
									if (rare == 5)
									{
										color3 = new Microsoft.Xna.Framework.Color((byte)(255f * num32), (byte)(150f * num32), (byte)(255f * num32), mouseTextColor);
									}
									if (rare == 6)
									{
										color3 = new Microsoft.Xna.Framework.Color((byte)(210f * num32), (byte)(160f * num32), (byte)(255f * num32), mouseTextColor);
									}
									if (rare == 7)
									{
										color3 = new Microsoft.Xna.Framework.Color((byte)(150f * num32), (byte)(255f * num32), (byte)(10f * num32), mouseTextColor);
									}
									if (rare == 8)
									{
										color3 = new Microsoft.Xna.Framework.Color((byte)(255f * num32), (byte)(255f * num32), (byte)(10f * num32), mouseTextColor);
									}
									if (rare == 9)
									{
										color3 = new Microsoft.Xna.Framework.Color((byte)(5f * num32), (byte)(200f * num32), (byte)(255f * num32), mouseTextColor);
									}
									if (rare == 10)
									{
										color3 = new Microsoft.Xna.Framework.Color((byte)(255f * num32), (byte)(40f * num32), (byte)(100f * num32), mouseTextColor);
									}
									if (rare >= 11)
									{
										color3 = new Microsoft.Xna.Framework.Color((byte)(180f * num32), (byte)(40f * num32), (byte)(255f * num32), mouseTextColor);
									}
									if (diff == 1)
									{
										color3 = new Microsoft.Xna.Framework.Color((byte)((float)(int)mcColor.R * num32), (byte)((float)(int)mcColor.G * num32), (byte)((float)(int)mcColor.B * num32), mouseTextColor);
									}
									if (diff == 2)
									{
										color3 = new Microsoft.Xna.Framework.Color((byte)((float)(int)hcColor.R * num32), (byte)((float)(int)hcColor.G * num32), (byte)((float)(int)hcColor.B * num32), mouseTextColor);
									}
									if (toolTip.expert || rare == -12)
									{
										color3 = new Microsoft.Xna.Framework.Color((byte)((float)DiscoR * num32), (byte)((float)DiscoG * num32), (byte)((float)DiscoB * num32), mouseTextColor);
									}
								}
								else if (array2[l])
								{
									color3 = ((!array3[l]) ? new Microsoft.Xna.Framework.Color((byte)(120f * num32), (byte)(190f * num32), (byte)(120f * num32), mouseTextColor) : new Microsoft.Xna.Framework.Color((byte)(190f * num32), (byte)(120f * num32), (byte)(120f * num32), mouseTextColor));
								}
								else if (l == num6 - 1)
								{
									color3 = color;
								}
								break;
							}
							spriteBatch.DrawString(fontMouseText, array[l], new Vector2(num39, num40), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						}
					}
					num34 += (int)(fontMouseText.MeasureString(array[l]).Y + (float)num33);
				}
				return;
			}
			if (buffString != "" && buffString != null)
			{
				for (int num41 = 0; num41 < 5; num41++)
				{
					int num42 = num2;
					int num43 = num3 + (int)fontMouseText.MeasureString(buffString).Y;
					Microsoft.Xna.Framework.Color color4 = Microsoft.Xna.Framework.Color.Black;
					switch (num41)
					{
					case 0:
						num42 -= 2;
						break;
					case 1:
						num42 += 2;
						break;
					case 2:
						num43 -= 2;
						break;
					case 3:
						num43 += 2;
						break;
					default:
						color4 = new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor);
						break;
					}
					spriteBatch.DrawString(fontMouseText, buffString, new Vector2(num42, num43), color4, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				if (bannerMouseOver)
				{
					int num44 = 0;
					for (int num45 = 0; num45 < 251; num45++)
					{
						if (Item.BannerToNPC(num45) == 0 || !player[myPlayer].NPCBannerBuff[num45])
						{
							continue;
						}
						num44++;
						for (int num46 = 0; num46 < 5; num46++)
						{
							int num47 = num2;
							int num48 = num3 + (int)fontMouseText.MeasureString(buffString).Y + num44 * 20 + 10;
							int num49 = (screenHeight - 250) / 20;
							if (num44 > num49)
							{
								num47 += 260;
								num48 -= num49 * 20;
							}
							if (num44 > num49 * 2)
							{
								num47 += 260;
								num48 -= num49 * 20;
							}
							if (num44 > num49 * 3)
							{
								num47 += 260;
								num48 -= num49 * 20;
							}
							Microsoft.Xna.Framework.Color color5 = Microsoft.Xna.Framework.Color.Black;
							switch (num46)
							{
							case 0:
								num47 -= 2;
								break;
							case 1:
								num47 += 2;
								break;
							case 2:
								num48 -= 2;
								break;
							case 3:
								num48 += 2;
								break;
							default:
								num32 = (float)(int)mouseTextColor / 255f;
								color5 = new Microsoft.Xna.Framework.Color((byte)(80f * num32), (byte)(255f * num32), (byte)(120f * num32), mouseTextColor);
								break;
							}
							spriteBatch.DrawString(fontMouseText, Lang.GetNPCNameValue(Item.BannerToNPC(num45)), new Vector2(num47, num48), color5, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						}
					}
				}
			}
			Vector2 vector2 = fontMouseText.MeasureString(cursorText);
			if ((float)num2 + vector2.X + 4f > (float)screenWidth)
			{
				num2 = (int)((float)screenWidth - vector2.X - 4f);
			}
			if ((float)num3 + vector2.Y + 4f > (float)screenHeight)
			{
				num3 = (int)((float)screenHeight - vector2.Y - 4f);
			}
			spriteBatch.DrawString(fontMouseText, cursorText, new Vector2(num2, num3 - 2), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			spriteBatch.DrawString(fontMouseText, cursorText, new Vector2(num2, num3 + 2), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			spriteBatch.DrawString(fontMouseText, cursorText, new Vector2(num2 - 2, num3), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			spriteBatch.DrawString(fontMouseText, cursorText, new Vector2(num2 + 2, num3), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			num32 = (float)(int)mouseTextColor / 255f;
			Microsoft.Xna.Framework.Color color6 = new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor);
			if (rare == -11)
			{
				color6 = new Microsoft.Xna.Framework.Color((byte)(255f * num32), (byte)(175f * num32), (byte)(0f * num32), mouseTextColor);
			}
			if (rare == -10)
			{
				color6 = new Microsoft.Xna.Framework.Color((byte)(65f * num32), (byte)(255f * num32), (byte)(110f * num32), mouseTextColor);
			}
			if (rare == -1)
			{
				color6 = new Microsoft.Xna.Framework.Color((byte)(130f * num32), (byte)(130f * num32), (byte)(130f * num32), mouseTextColor);
			}
			if (rare == 1)
			{
				color6 = new Microsoft.Xna.Framework.Color((byte)(150f * num32), (byte)(150f * num32), (byte)(255f * num32), mouseTextColor);
			}
			if (rare == 2)
			{
				color6 = new Microsoft.Xna.Framework.Color((byte)(150f * num32), (byte)(255f * num32), (byte)(150f * num32), mouseTextColor);
			}
			if (rare == 3)
			{
				color6 = new Microsoft.Xna.Framework.Color((byte)(255f * num32), (byte)(200f * num32), (byte)(150f * num32), mouseTextColor);
			}
			if (rare == 4)
			{
				color6 = new Microsoft.Xna.Framework.Color((byte)(255f * num32), (byte)(150f * num32), (byte)(150f * num32), mouseTextColor);
			}
			if (rare == 5)
			{
				color6 = new Microsoft.Xna.Framework.Color((byte)(255f * num32), (byte)(150f * num32), (byte)(255f * num32), mouseTextColor);
			}
			if (rare == 6)
			{
				color6 = new Microsoft.Xna.Framework.Color((byte)(210f * num32), (byte)(160f * num32), (byte)(255f * num32), mouseTextColor);
			}
			if (rare == 7)
			{
				color6 = new Microsoft.Xna.Framework.Color((byte)(150f * num32), (byte)(255f * num32), (byte)(10f * num32), mouseTextColor);
			}
			if (rare == 8)
			{
				color6 = new Microsoft.Xna.Framework.Color((byte)(255f * num32), (byte)(255f * num32), (byte)(10f * num32), mouseTextColor);
			}
			if (rare == 9)
			{
				color6 = new Microsoft.Xna.Framework.Color((byte)(5f * num32), (byte)(200f * num32), (byte)(255f * num32), mouseTextColor);
			}
			if (rare == 10)
			{
				color6 = new Microsoft.Xna.Framework.Color((byte)(255f * num32), (byte)(40f * num32), (byte)(100f * num32), mouseTextColor);
			}
			if (rare >= 11)
			{
				color6 = new Microsoft.Xna.Framework.Color((byte)(180f * num32), (byte)(40f * num32), (byte)(255f * num32), mouseTextColor);
			}
			if (toolTip.expert || rare == -12)
			{
				color6 = new Microsoft.Xna.Framework.Color((byte)((float)DiscoR * num32), (byte)((float)DiscoG * num32), (byte)((float)DiscoB * num32), mouseTextColor);
			}
			if (diff == 1)
			{
				color6 = new Microsoft.Xna.Framework.Color((byte)((float)(int)mcColor.R * num32), (byte)((float)(int)mcColor.G * num32), (byte)((float)(int)mcColor.B * num32), mouseTextColor);
			}
			if (diff == 2)
			{
				color6 = new Microsoft.Xna.Framework.Color((byte)((float)(int)hcColor.R * num32), (byte)((float)(int)hcColor.G * num32), (byte)((float)(int)hcColor.B * num32), mouseTextColor);
			}
			spriteBatch.DrawString(fontMouseText, cursorText, new Vector2(num2, num3), color6, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
		}

		protected void DrawFPS()
		{
			if (showFrameRate)
			{
				string text = string.Concat(frameRate);
				object obj = text;
				text = string.Concat(obj, " (", Liquid.numLiquid + LiquidBuffer.numLiquidBuffer, ")");
				object obj2 = text;
				text = string.Concat(obj2, " (", (int)(gfxQuality * 100f), "%)");
				int num = 4;
				if (!gameMenu)
				{
					num = screenHeight - 24;
				}
				spriteBatch.DrawString(fontMouseText, text + " " + debugWords, new Vector2(4f, num), new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			}
		}

		public static Microsoft.Xna.Framework.Color shine(Microsoft.Xna.Framework.Color newColor, int type)
		{
			int num = newColor.R;
			int g = newColor.G;
			int b = newColor.B;
			float num2 = 0.6f;
			switch (type)
			{
			case 25:
				num = (int)((float)(int)newColor.R * 0.95f);
				g = (int)((float)(int)newColor.G * 0.85f);
				b = (int)((double)(float)(int)newColor.B * 1.1);
				break;
			case 117:
				num = (int)((float)(int)newColor.R * 1.1f);
				g = (int)((float)(int)newColor.G * 1f);
				b = (int)((double)(float)(int)newColor.B * 1.2);
				break;
			case 204:
				num2 = 0.3f + (float)(int)mouseTextColor / 300f;
				num = (int)((float)(int)newColor.R * (1.3f * num2));
				if (num > 255)
				{
					num = 255;
				}
				return new Microsoft.Xna.Framework.Color(num, g, b, 255);
			case 211:
				num2 = 0.3f + (float)(int)mouseTextColor / 300f;
				g = (int)((float)(int)newColor.G * (1.5f * num2));
				b = (int)((float)(int)newColor.B * (1.1f * num2));
				break;
			case 147:
			case 161:
				num = (int)((float)(int)newColor.R * 1.1f);
				g = (int)((float)(int)newColor.G * 1.12f);
				b = (int)((double)(float)(int)newColor.B * 1.15);
				break;
			case 163:
				num = (int)((float)(int)newColor.R * 1.05f);
				g = (int)((float)(int)newColor.G * 1.1f);
				b = (int)((double)(float)(int)newColor.B * 1.15);
				break;
			case 164:
				num = (int)((float)(int)newColor.R * 1.1f);
				g = (int)((float)(int)newColor.G * 1.1f);
				b = (int)((double)(float)(int)newColor.B * 1.2);
				break;
			case 178:
				num2 = 0.5f;
				num = (int)((float)(int)newColor.R * (1f + num2));
				g = (int)((float)(int)newColor.G * (1f + num2));
				b = (int)((float)(int)newColor.B * (1f + num2));
				break;
			case 185:
			case 186:
				num2 = 0.3f;
				num = (int)((float)(int)newColor.R * (1f + num2));
				g = (int)((float)(int)newColor.G * (1f + num2));
				b = (int)((float)(int)newColor.B * (1f + num2));
				break;
			case 262:
			case 263:
			case 264:
			case 265:
			case 266:
			case 267:
			case 268:
				b += 100;
				num += 100;
				g += 100;
				break;
			default:
				num = (int)((float)(int)newColor.R * (1f + num2));
				g = (int)((float)(int)newColor.G * (1f + num2));
				b = (int)((float)(int)newColor.B * (1f + num2));
				break;
			}
			if (num > 255)
			{
				num = 255;
			}
			if (g > 255)
			{
				g = 255;
			}
			if (b > 255)
			{
				b = 255;
			}
			newColor.R = (byte)num;
			newColor.G = (byte)g;
			newColor.B = (byte)b;
			return new Microsoft.Xna.Framework.Color((byte)num, (byte)g, (byte)b, newColor.A);
		}

		public static bool canDrawColorTree(int i, int j, int treeColor)
		{
			if (tile[i, j] != null && tile[i, j].color() > 0 && tile[i, j].color() < numTileColors && woodAltTexture[treeColor, tile[i, j].color()] != null)
			{
				return !woodAltTexture[treeColor, tile[i, j].color()].IsContentLost;
			}
			return false;
		}

		public static bool canDrawColorTile(int i, int j)
		{
			if (tile[i, j] != null && tile[i, j].color() > 0 && tile[i, j].color() < numTileColors && tileAltTextureDrawn[tile[i, j].type, tile[i, j].color()] && tileAltTextureInit[tile[i, j].type, tile[i, j].color()])
			{
				return true;
			}
			return false;
		}

		public static bool canDrawColorTile(ushort type, int color)
		{
			if (color > 0 && color < numTileColors && tileAltTextureDrawn[type, color] && tileAltTextureInit[type, color])
			{
				return true;
			}
			return false;
		}

		public static bool canDrawColorWall(int i, int j)
		{
			if (tile[i, j] != null && tile[i, j].wallColor() > 0 && wallAltTextureDrawn[tile[i, j].wall, tile[i, j].wallColor()] && wallAltTextureInit[tile[i, j].wall, tile[i, j].wallColor()])
			{
				return true;
			}
			return false;
		}

		protected void DrawTiles(bool solidOnly = true, int waterStyleOverride = -1)
		{
			if (!solidOnly)
			{
				critterCage = false;
			}
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			int num = (int)(255f * (1f - gfxQuality) + 30f * gfxQuality);
			int num2 = (int)(50f * (1f - gfxQuality) + 2f * gfxQuality);
			Vector2 value = new Vector2(offScreenRange, offScreenRange);
			if (drawToScreen)
			{
				value = Vector2.Zero;
			}
			int num3 = 0;
			int[] array = new int[1000];
			int[] array2 = new int[1000];
			int num4 = array.Length - 1;
			int num5 = (int)((screenPosition.X - value.X) / 16f - 1f);
			int num6 = (int)((screenPosition.X + (float)screenWidth + value.X) / 16f) + 2;
			int num7 = (int)((screenPosition.Y - value.Y) / 16f - 1f);
			int num8 = (int)((screenPosition.Y + (float)screenHeight + value.Y) / 16f) + 5;
			if (num5 < 0)
			{
				num5 = 0;
			}
			if (num6 > maxTilesX)
			{
				num6 = maxTilesX;
			}
			if (num7 < 0)
			{
				num7 = 0;
			}
			if (num8 > maxTilesY)
			{
				num8 = maxTilesY;
			}
			if (sectionManager.FrameSectionsLeft > 0)
			{
				TimeLogger.DetailedDrawReset();
				WorldGen.SectionTileFrameWithCheck(num5, num7, num6, num8);
				TimeLogger.DetailedDrawTime(5);
			}
			Dictionary<Microsoft.Xna.Framework.Point, int> dictionary = new Dictionary<Microsoft.Xna.Framework.Point, int>();
			Dictionary<Microsoft.Xna.Framework.Point, int> dictionary2 = new Dictionary<Microsoft.Xna.Framework.Point, int>();
			Dictionary<Microsoft.Xna.Framework.Point, int> dictionary3 = new Dictionary<Microsoft.Xna.Framework.Point, int>();
			int num9 = 16;
			int num10 = 16;
			Microsoft.Xna.Framework.Color[] slices = new Microsoft.Xna.Framework.Color[9];
			for (int i = num7; i < num8 + 4; i++)
			{
				for (int j = num5 - 2; j < num6 + 2; j++)
				{
					if (j == 809)
					{
						int num320 = 282;
					}
					Tile tile = Main.tile[j, i];
					if (tile == null)
					{
						tile = new Tile();
						Main.tile[j, i] = tile;
						mapTime += 60;
					}
					ushort type = tile.type;
					short num11 = tile.frameX;
					short frameY = tile.frameY;
					bool flag = tileSolid[type];
					if (type == 11)
					{
						flag = true;
					}
					if (!tile.active() || flag != solidOnly)
					{
						continue;
					}
					if (!tileSetsLoaded[type])
					{
						LoadTiles(type);
					}
					SpriteEffects effects = SpriteEffects.None;
					switch (type)
					{
					case 3:
					case 13:
					case 20:
					case 24:
					case 49:
					case 50:
					case 52:
					case 61:
					case 62:
					case 71:
					case 73:
					case 74:
					case 81:
					case 82:
					case 83:
					case 84:
					case 91:
					case 92:
					case 93:
					case 110:
					case 113:
					case 115:
					case 135:
					case 141:
					case 165:
					case 174:
					case 201:
					case 205:
					case 227:
					case 270:
					case 271:
					case 372:
					case 382:
						if (j % 2 == 1)
						{
							effects = SpriteEffects.FlipHorizontally;
						}
						break;
					case 184:
						if (frameY < 108)
						{
							if (j % 2 == 1)
							{
								effects = SpriteEffects.FlipHorizontally;
							}
						}
						else if (i % 2 == 1)
						{
							effects = SpriteEffects.FlipVertically;
						}
						break;
					case 185:
						if (frameY == 0 && j % 2 == 1)
						{
							effects = SpriteEffects.FlipHorizontally;
						}
						break;
					}
					Microsoft.Xna.Framework.Color color = Lighting.GetColor(j, i);
					int num12 = 0;
					num9 = 16;
					if (type >= 330 && type <= 333)
					{
						num12 += 2;
					}
					if (type == 4 && WorldGen.SolidTile(j, i - 1))
					{
						num12 = 2;
						if (WorldGen.SolidTile(j - 1, i + 1) || WorldGen.SolidTile(j + 1, i + 1))
						{
							num12 = 4;
						}
					}
					if (type == 336)
					{
						num12 = 2;
					}
					if ((type >= 275 && type <= 282) || type == 414 || type == 413)
					{
						num12 = 2;
					}
					if (type == 285 || type == 286 || type == 298 || type == 299 || type == 309 || type == 358 || type == 359 || type == 360 || type == 361 || type == 362 || type == 363 || type == 364 || type == 391 || type == 392 || type == 393 || type == 394 || type == 310)
					{
						num12 = 2;
					}
					if (type == 100 || type == 283)
					{
						num12 = 2;
					}
					if (type == 78 || type == 85 || type == 210 || type == 133 || type == 134 || type == 233)
					{
						num12 = 2;
					}
					if (type == 33 || type == 49 || type == 174 || type == 372)
					{
						num12 = -4;
					}
					switch (type)
					{
					case 3:
					case 4:
					case 5:
					case 24:
					case 33:
					case 49:
					case 61:
					case 71:
					case 110:
					case 174:
					case 201:
					case 323:
					case 324:
					case 372:
						num9 = 20;
						break;
					case 16:
					case 17:
					case 18:
					case 20:
					case 26:
					case 32:
					case 69:
					case 72:
					case 77:
					case 79:
					case 80:
					case 352:
						num9 = 18;
						break;
					case 14:
					case 15:
					case 21:
					case 411:
						if (frameY == 18)
						{
							num9 = 18;
						}
						break;
					case 172:
					case 376:
						if (frameY % 38 == 18)
						{
							num9 = 18;
						}
						break;
					case 27:
						if (frameY % 74 == 54)
						{
							num9 = 18;
						}
						break;
					case 137:
						num9 = 18;
						break;
					case 135:
						num12 = 2;
						num9 = 18;
						break;
					case 378:
						num12 = 2;
						break;
					case 254:
						num12 = 2;
						break;
					case 132:
						num12 = 2;
						num9 = 18;
						break;
					case 405:
						num9 = 16;
						if (frameY > 0)
						{
							num9 = 18;
						}
						break;
					case 406:
						num9 = 16;
						if (frameY % 54 >= 36)
						{
							num9 = 18;
						}
						break;
					default:
						num9 = 16;
						break;
					}
					if (type == 52)
					{
						num12 -= 2;
					}
					if (type == 324)
					{
						num12 = -2;
					}
					if (type == 231 || type == 238)
					{
						num12 += 2;
					}
					if (type == 207)
					{
						num12 = 2;
					}
					num10 = ((type != 4 && type != 5 && type != 323 && type != 324) ? 16 : 20);
					if (type == 73 || type == 74 || type == 113)
					{
						num12 -= 12;
						num9 = 32;
					}
					if (type == 388 || type == 389)
					{
						TileObjectData tileData = TileObjectData.GetTileData(type, num11 / 18);
						int height = tileData.Height;
						int num13 = height * 18 + 4;
						num12 = -2;
						if (frameY == num13 - 20 || frameY == num13 * 2 - 20 || frameY == 0 || frameY == num13)
						{
							num9 = 18;
						}
					}
					if (type == 410 && frameY == 36)
					{
						num9 = 18;
					}
					if (type == 227)
					{
						num10 = 32;
						num9 = 38;
						num12 = ((num11 != 238) ? (num12 - 20) : (num12 - 6));
					}
					if (type == 185 || type == 186 || type == 187)
					{
						num12 = 2;
						switch (type)
						{
						case 185:
							if (frameY == 18 && num11 >= 576 && num11 <= 882)
							{
								tileShine2[185] = true;
							}
							else
							{
								tileShine2[185] = false;
							}
							break;
						case 186:
							if (num11 >= 864 && num11 <= 1170)
							{
								tileShine2[186] = true;
							}
							else
							{
								tileShine2[186] = false;
							}
							break;
						}
					}
					if (type == 178 && frameY <= 36)
					{
						num12 = 2;
					}
					if (type == 184)
					{
						num10 = 20;
						if (frameY <= 36)
						{
							num12 = 2;
						}
						else if (frameY <= 108)
						{
							num12 = -2;
						}
					}
					if (type == 28)
					{
						num12 += 2;
					}
					if (type == 81)
					{
						num12 -= 8;
						num9 = 26;
						num10 = 24;
					}
					if (type == 105)
					{
						num12 = 2;
					}
					if (type == 124)
					{
						num9 = 18;
					}
					if (type == 137)
					{
						num9 = 18;
					}
					if (type == 138)
					{
						num9 = 18;
					}
					if (type == 139 || type == 142 || type == 143)
					{
						num12 = 2;
					}
					int num14 = 0;
					if (tile.halfBrick())
					{
						num14 = 8;
					}
					int num15 = tileFrame[type] * 38;
					int num16 = 0;
					if (type == 272)
					{
						num15 = 0;
					}
					if (type == 106)
					{
						num15 = tileFrame[type] * 54;
					}
					if (type >= 300 && type <= 308)
					{
						num15 = tileFrame[type] * 54;
						num12 = 2;
					}
					if (type == 354)
					{
						num15 = tileFrame[type] * 54;
						num12 = 2;
					}
					if (type == 355)
					{
						num15 = tileFrame[type] * 54;
						num12 = 2;
					}
					if (type == 377)
					{
						num15 = tileFrame[type] * 38;
						num12 = 2;
					}
					if (type == 379)
					{
						num15 = tileFrame[type] * 90;
					}
					if (type == 349)
					{
						int num17 = num11 % 36;
						int num18 = frameY % 54;
						int frameData;
						if (Animation.GetTemporaryFrame(j - num17 / 18, i - num18 / 18, out frameData))
						{
							num11 = (short)(36 * frameData + num17);
						}
					}
					if (type == 390)
					{
						num15 = tileFrame[type] * 36;
					}
					if (type == 412)
					{
						num15 = 0;
						num12 = 2;
					}
					if (type == 406)
					{
						int num19 = tileFrame[type];
						if (frameY >= 108)
						{
							num19 = 6 - frameY / 54;
						}
						else if (frameY >= 54)
						{
							num19 = tileFrame[type] - 1;
						}
						num15 = num19 * 56;
						num15 += frameY / 54 * 2;
					}
					if (type == 405)
					{
						int num20 = tileFrame[type];
						if (num11 >= 54)
						{
							num20 = 0;
						}
						num15 = num20 * 38;
					}
					if (type == 12)
					{
						num15 = tileFrame[type] * 36;
					}
					if (type == 96)
					{
						num15 = tileFrame[type] * 36;
					}
					if (type == 238)
					{
						num15 = tileFrame[type] * 36;
					}
					if (type == 31)
					{
						num15 = tileFrame[type] * 36;
					}
					if (type == 215)
					{
						num15 = ((frameY >= 36) ? 252 : (tileFrame[type] * 36));
						num12 = 2;
					}
					if (type == 231)
					{
						num15 = tileFrame[type] * 54;
						num12 = 2;
					}
					if (type == 243)
					{
						num15 = tileFrame[type] * 54;
						num12 = 2;
					}
					if (type == 247)
					{
						num15 = tileFrame[type] * 54;
						num12 = 2;
					}
					if (type == 228)
					{
						num15 = tileFrame[type] * 54;
						num12 = 2;
					}
					if (type == 244)
					{
						num12 = 2;
						num15 = ((num11 < 54) ? (tileFrame[type] * 36) : 0);
					}
					if (type == 235)
					{
						num15 = tileFrame[type] * 18;
					}
					if (type == 217 || type == 218)
					{
						num15 = tileFrame[type] * 36;
						num12 = 2;
					}
					if (type == 219 || type == 220)
					{
						num15 = tileFrame[type] * 54;
						num12 = 2;
					}
					if (type == 270 || type == 271)
					{
						int num21 = tileFrame[type] + j % 6;
						if (j % 2 == 0)
						{
							num21 += 3;
						}
						if (j % 3 == 0)
						{
							num21 += 3;
						}
						if (j % 4 == 0)
						{
							num21 += 3;
						}
						while (num21 > 5)
						{
							num21 -= 6;
						}
						num16 = num21 * 18;
						num15 = 0;
					}
					if (type == 373 || type == 374 || type == 375)
					{
						int num22 = 60;
						switch (type)
						{
						case 374:
							num22 = 120;
							break;
						case 375:
							num22 = 180;
							break;
						}
						if (rand.Next(num22 * 2) != 0 || tile.liquid != 0)
						{
							continue;
						}
						Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(j * 16, i * 16, 16, 16);
						rectangle.X -= 34;
						rectangle.Width += 68;
						rectangle.Y -= 100;
						rectangle.Height = 400;
						bool flag2 = true;
						for (int k = 0; k < 500; k++)
						{
							if (gore[k].active && gore[k].type >= 706 && gore[k].type <= 717)
							{
								Microsoft.Xna.Framework.Rectangle value2 = new Microsoft.Xna.Framework.Rectangle((int)gore[k].position.X, (int)gore[k].position.Y, 16, 16);
								if (rectangle.Intersects(value2))
								{
									flag2 = false;
								}
							}
						}
						if (flag2)
						{
							Vector2 position = new Vector2(j * 16, i * 16);
							int type2 = 706;
							if (waterStyle > 1)
							{
								type2 = 706 + waterStyle - 1;
							}
							if (type == 374)
							{
								type2 = 716;
							}
							if (type == 375)
							{
								type2 = 717;
							}
							int num23 = Gore.NewGore(position, default(Vector2), type2);
							gore[num23].velocity *= 0f;
						}
						continue;
					}
					if ((type >= 275 && type <= 281) || type == 296 || type == 297 || type == 309 || type == 358 || type == 359 || type == 414 || type == 413)
					{
						critterCage = true;
						int num24 = j - num11 / 18;
						int num25 = i - frameY / 18;
						int num26 = num24 / 6 * (num25 / 4);
						num26 %= cageFrames;
						if (type == 275 || type == 359)
						{
							num15 = bunnyCageFrame[num26] * 54;
						}
						if (type == 276 || type == 414)
						{
							num15 = squirrelCageFrame[num26] * 54;
						}
						if (type == 413)
						{
							num15 = squirrelCageFrameOrange[num26] * 54;
						}
						if (type == 277)
						{
							num15 = mallardCageFrame[num26] * 54;
						}
						if (type == 278)
						{
							num15 = duckCageFrame[num26] * 54;
						}
						if (type == 279 || type == 358)
						{
							num15 = birdCageFrame[num26] * 54;
						}
						if (type == 280)
						{
							num15 = blueBirdCageFrame[num26] * 54;
						}
						if (type == 281)
						{
							num15 = redBirdCageFrame[num26] * 54;
						}
						if (type == 296)
						{
							num15 = scorpionCageFrame[0, num26] * 54;
						}
						if (type == 297)
						{
							num15 = scorpionCageFrame[0, num26] * 54;
						}
						if (type == 309)
						{
							num15 = penguinCageFrame[num26] * 54;
						}
					}
					else if (type == 285 || type == 286 || type == 298 || type == 299 || type == 310 || type == 339 || (type >= 361 && type <= 364) || (type >= 391 && type <= 394))
					{
						critterCage = true;
						int num27 = j - num11 / 18;
						int num28 = i - frameY / 18;
						int num29 = num27 / 3 * (num28 / 3);
						num29 %= cageFrames;
						if (type == 285)
						{
							num15 = snailCageFrame[num29] * 36;
						}
						if (type == 286)
						{
							num15 = snail2CageFrame[num29] * 36;
						}
						if (type == 298 || type == 361)
						{
							num15 = frogCageFrame[num29] * 36;
						}
						if (type == 299 || type == 363)
						{
							num15 = mouseCageFrame[num29] * 36;
						}
						if (type == 310 || type == 364 || type == 391)
						{
							num15 = wormCageFrame[num29] * 36;
						}
						if (type == 339 || type == 362)
						{
							num15 = grasshopperCageFrame[num29] * 36;
						}
						if (type == 392 || type == 393 || type == 394)
						{
							num15 = slugCageFrame[type - 392, num29] * 36;
						}
					}
					else if (type == 282 || (type >= 288 && type <= 295) || (type >= 316 && type <= 318) || type == 360)
					{
						critterCage = true;
						int num30 = j - num11 / 18;
						int num31 = i - frameY / 18;
						int num32 = num30 / 2 * (num31 / 3);
						num32 %= cageFrames;
						if (type == 282)
						{
							num15 = fishBowlFrame[num32] * 36;
						}
						else if ((type >= 288 && type <= 295) || type == 360)
						{
							int num33 = type - 288;
							if (type == 360)
							{
								num33 = 8;
							}
							num15 = butterflyCageFrame[num33, num32] * 36;
						}
						else if (type >= 316 && type <= 318)
						{
							int num34 = type - 316;
							num15 = jellyfishCageFrame[num34, num32] * 36;
						}
					}
					else
					{
						switch (type)
						{
						case 207:
							if (frameY >= 72)
							{
								num15 = tileFrame[type];
								int num35 = j;
								if (num11 % 36 != 0)
								{
									num35--;
								}
								num15 += num35 % 6;
								if (num15 >= 6)
								{
									num15 -= 6;
								}
								num15 *= 72;
							}
							else
							{
								num15 = 0;
							}
							break;
						case 410:
							if (frameY >= 56)
							{
								num15 = tileFrame[type];
								num15 *= 56;
							}
							else
							{
								num15 = 0;
							}
							break;
						case 326:
						case 327:
						case 328:
						case 329:
						case 336:
						case 340:
						case 341:
						case 342:
						case 343:
						case 344:
						case 345:
						case 351:
							num15 = tileFrame[type] * 90;
							break;
						}
					}
					Texture2D texture2D = null;
					Microsoft.Xna.Framework.Rectangle value3 = Microsoft.Xna.Framework.Rectangle.Empty;
					Microsoft.Xna.Framework.Color color2 = Microsoft.Xna.Framework.Color.Transparent;
					byte b = (byte)(100f + 150f * martianLight);
					Microsoft.Xna.Framework.Color color3 = new Microsoft.Xna.Framework.Color(b, b, b, 0);
					Microsoft.Xna.Framework.Color color4 = new Microsoft.Xna.Framework.Color(100, 100, 100, 0);
					Microsoft.Xna.Framework.Color color5 = new Microsoft.Xna.Framework.Color(150, 100, 50, 0);
					switch (type)
					{
					case 184:
						if (tile.frameX == 110)
						{
							texture2D = glowMaskTexture[127];
							value3 = new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9);
							color2 = color5;
						}
						break;
					case 19:
					{
						int num36 = frameY / 18;
						if (num36 == 26)
						{
							texture2D = glowMaskTexture[65];
							value3 = new Microsoft.Xna.Framework.Rectangle(num11, frameY % 18, num10, num9);
							color2 = color3;
						}
						if (num36 == 27)
						{
							texture2D = glowMaskTexture[112];
							value3 = new Microsoft.Xna.Framework.Rectangle(num11, frameY % 18, num10, num9);
							color2 = color4;
						}
						break;
					}
					case 90:
					{
						int num36 = frameY / 36;
						if (num36 == 27)
						{
							texture2D = glowMaskTexture[52];
							value3 = new Microsoft.Xna.Framework.Rectangle(num11, frameY % 36, num10, num9);
							color2 = color3;
						}
						if (num36 == 28)
						{
							texture2D = glowMaskTexture[113];
							value3 = new Microsoft.Xna.Framework.Rectangle(num11, frameY % 36, num10, num9);
							color2 = color4;
						}
						break;
					}
					case 79:
					{
						int num36 = frameY / 36;
						if (num36 == 27)
						{
							texture2D = glowMaskTexture[53];
							value3 = new Microsoft.Xna.Framework.Rectangle(num11, frameY % 36, num10, num9);
							color2 = color3;
						}
						if (num36 == 28)
						{
							texture2D = glowMaskTexture[114];
							value3 = new Microsoft.Xna.Framework.Rectangle(num11, frameY % 36, num10, num9);
							color2 = color4;
						}
						break;
					}
					case 89:
					{
						int num36 = num11 / 54;
						if (num36 == 29)
						{
							texture2D = glowMaskTexture[66];
							value3 = new Microsoft.Xna.Framework.Rectangle(num11 % 54, frameY, num10, num9);
							color2 = color3;
						}
						if (num36 == 30)
						{
							texture2D = glowMaskTexture[123];
							value3 = new Microsoft.Xna.Framework.Rectangle(num11 % 54, frameY, num10, num9);
							color2 = color4;
						}
						break;
					}
					case 100:
						if (num11 / 36 == 0)
						{
							int num36 = frameY / 36;
							if (num36 == 27)
							{
								texture2D = glowMaskTexture[68];
								value3 = new Microsoft.Xna.Framework.Rectangle(num11, frameY % 36, num10, num9);
								color2 = color3;
							}
						}
						break;
					case 33:
						if (num11 / 18 == 0)
						{
							int num36 = frameY / 22;
							if (num36 == 26)
							{
								texture2D = glowMaskTexture[61];
								value3 = new Microsoft.Xna.Framework.Rectangle(num11, frameY % 22, num10, num9);
								color2 = color3;
							}
						}
						break;
					case 15:
					{
						int num36 = frameY / 40;
						if (num36 == 32)
						{
							texture2D = glowMaskTexture[54];
							value3 = new Microsoft.Xna.Framework.Rectangle(num11, frameY % 40, num10, num9);
							color2 = color3;
						}
						if (num36 == 33)
						{
							texture2D = glowMaskTexture[116];
							value3 = new Microsoft.Xna.Framework.Rectangle(num11, frameY % 40, num10, num9);
							color2 = color4;
						}
						break;
					}
					case 34:
						if (num11 / 54 == 0)
						{
							int num36 = frameY / 54;
							if (num36 == 33)
							{
								texture2D = glowMaskTexture[55];
								value3 = new Microsoft.Xna.Framework.Rectangle(num11, frameY % 54, num10, num9);
								color2 = color3;
							}
						}
						break;
					case 21:
					{
						int num36 = num11 / 36;
						if (num36 == 48)
						{
							texture2D = glowMaskTexture[56];
							value3 = new Microsoft.Xna.Framework.Rectangle(num11 % 36, frameY, num10, num9);
							color2 = color3;
						}
						if (num36 == 49)
						{
							texture2D = glowMaskTexture[117];
							value3 = new Microsoft.Xna.Framework.Rectangle(num11 % 36, frameY, num10, num9);
							color2 = color4;
						}
						break;
					}
					case 10:
					{
						int num36 = frameY / 54;
						if (num36 == 32)
						{
							texture2D = glowMaskTexture[57];
							value3 = new Microsoft.Xna.Framework.Rectangle(num11, frameY % 54, num10, num9);
							color2 = color3;
						}
						break;
					}
					case 11:
					{
						int num36 = frameY / 54;
						if (num36 == 32)
						{
							texture2D = glowMaskTexture[58];
							value3 = new Microsoft.Xna.Framework.Rectangle(num11, frameY % 54, num10, num9);
							color2 = color3;
						}
						if (num36 == 33)
						{
							texture2D = glowMaskTexture[119];
							value3 = new Microsoft.Xna.Framework.Rectangle(num11, frameY % 54, num10, num9);
							color2 = color4;
						}
						break;
					}
					case 88:
					{
						int num36 = num11 / 54;
						if (num36 == 24)
						{
							texture2D = glowMaskTexture[59];
							value3 = new Microsoft.Xna.Framework.Rectangle(num11 % 54, frameY, num10, num9);
							color2 = color3;
						}
						if (num36 == 25)
						{
							texture2D = glowMaskTexture[120];
							value3 = new Microsoft.Xna.Framework.Rectangle(num11 % 54, frameY, num10, num9);
							color2 = color4;
						}
						break;
					}
					case 42:
					{
						int num36 = frameY / 36;
						if (num36 == 33)
						{
							texture2D = glowMaskTexture[63];
							value3 = new Microsoft.Xna.Framework.Rectangle(num11, frameY % 36, num10, num9);
							color2 = color3;
						}
						break;
					}
					case 87:
					{
						int num36 = num11 / 54;
						if (num36 == 26)
						{
							texture2D = glowMaskTexture[64];
							value3 = new Microsoft.Xna.Framework.Rectangle(num11 % 54, frameY, num10, num9);
							color2 = color3;
						}
						if (num36 == 27)
						{
							texture2D = glowMaskTexture[121];
							value3 = new Microsoft.Xna.Framework.Rectangle(num11 % 54, frameY, num10, num9);
							color2 = color4;
						}
						break;
					}
					case 14:
					{
						int num36 = num11 / 54;
						if (num36 == 31)
						{
							texture2D = glowMaskTexture[67];
							value3 = new Microsoft.Xna.Framework.Rectangle(num11 % 54, frameY, num10, num9);
							color2 = color3;
						}
						if (num36 == 32)
						{
							texture2D = glowMaskTexture[124];
							value3 = new Microsoft.Xna.Framework.Rectangle(num11 % 54, frameY, num10, num9);
							color2 = color4;
						}
						break;
					}
					case 93:
					{
						int num36 = num11 / 54;
						if (num36 == 27)
						{
							texture2D = glowMaskTexture[62];
							value3 = new Microsoft.Xna.Framework.Rectangle(num11, frameY % 54, num10, num9);
							color2 = color3;
						}
						break;
					}
					case 18:
					{
						int num36 = num11 / 36;
						if (num36 == 27)
						{
							texture2D = glowMaskTexture[69];
							value3 = new Microsoft.Xna.Framework.Rectangle(num11 % 36, frameY, num10, num9);
							color2 = color3;
						}
						if (num36 == 28)
						{
							texture2D = glowMaskTexture[125];
							value3 = new Microsoft.Xna.Framework.Rectangle(num11 % 36, frameY, num10, num9);
							color2 = color4;
						}
						break;
					}
					case 101:
					{
						int num36 = num11 / 54;
						if (num36 == 28)
						{
							texture2D = glowMaskTexture[60];
							value3 = new Microsoft.Xna.Framework.Rectangle(num11 % 54, frameY, num10, num9);
							color2 = color3;
						}
						if (num36 == 29)
						{
							texture2D = glowMaskTexture[115];
							value3 = new Microsoft.Xna.Framework.Rectangle(num11 % 54, frameY, num10, num9);
							color2 = color4;
						}
						break;
					}
					case 104:
					{
						int num36 = num11 / 36;
						if (num36 == 24)
						{
							texture2D = glowMaskTexture[51];
							value3 = new Microsoft.Xna.Framework.Rectangle(num11 % 36, frameY, num10, num9);
							color2 = color3;
						}
						if (num36 == 25)
						{
							texture2D = glowMaskTexture[118];
							value3 = new Microsoft.Xna.Framework.Rectangle(num11 % 36, frameY, num10, num9);
							color2 = color4;
						}
						break;
					}
					case 172:
					{
						int num36 = frameY / 38;
						if (num36 == 28)
						{
							texture2D = glowMaskTexture[88];
							value3 = new Microsoft.Xna.Framework.Rectangle(num11, frameY % 38, num10, num9);
							color2 = color3;
						}
						if (num36 == 29)
						{
							texture2D = glowMaskTexture[122];
							value3 = new Microsoft.Xna.Framework.Rectangle(num11, frameY % 38, num10, num9);
							color2 = color4;
						}
						break;
					}
					}
					if (player[myPlayer].dangerSense)
					{
						bool flag3 = false || type == 135 || type == 137 || type == 138 || type == 141 || type == 210;
						if (tile.slope() == 0 && !tile.inActive())
						{
							flag3 = (flag3 || type == 32 || type == 69 || type == 48 || type == 232 || type == 352 || type == 51 || type == 229);
							if (!player[myPlayer].fireWalk)
							{
								flag3 = (flag3 || type == 37 || type == 58 || type == 76);
							}
							if (!player[myPlayer].iceSkate)
							{
								flag3 = (flag3 || type == 162);
							}
						}
						if (flag3)
						{
							if (color.R < byte.MaxValue)
							{
								color.R = byte.MaxValue;
							}
							if (color.G < 50)
							{
								color.G = 50;
							}
							if (color.B < 50)
							{
								color.B = 50;
							}
							color.A = mouseTextColor;
							if (!gamePaused && base.IsActive && rand.Next(30) == 0)
							{
								int num37 = Dust.NewDust(new Vector2(j * 16, i * 16), 16, 16, 60, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 0.3f);
								dust[num37].fadeIn = 1f;
								dust[num37].velocity *= 0.1f;
								dust[num37].noLight = true;
								dust[num37].noGravity = true;
							}
						}
					}
					if (player[myPlayer].findTreasure)
					{
						bool flag4 = false;
						if (type == 185 && frameY == 18 && num11 >= 576 && num11 <= 882)
						{
							flag4 = true;
						}
						if (type == 186 && num11 >= 864 && num11 <= 1170)
						{
							flag4 = true;
						}
						if (flag4 || tileSpelunker[type] || (tileAlch[type] && type != 82))
						{
							byte b2 = 200;
							byte b3 = 170;
							if (color.R < b2)
							{
								color.R = b2;
							}
							if (color.G < b3)
							{
								color.G = b3;
							}
							color.A = mouseTextColor;
							if (!gamePaused && base.IsActive && rand.Next(60) == 0)
							{
								int num38 = Dust.NewDust(new Vector2(j * 16, i * 16), 16, 16, 204, 0f, 0f, 150, default(Microsoft.Xna.Framework.Color), 0.3f);
								dust[num38].fadeIn = 1f;
								dust[num38].velocity *= 0.1f;
								dust[num38].noLight = true;
							}
						}
					}
					if (!gamePaused && base.IsActive && (Lighting.lightMode < 2 || rand.Next(4) == 0))
					{
						if (type == 238 && rand.Next(10) == 0)
						{
							int num39 = Dust.NewDust(new Vector2(j * 16, i * 16), 16, 16, 168);
							dust[num39].noGravity = true;
							dust[num39].alpha = 200;
						}
						if (type == 244 && num11 == 18 && frameY == 18 && rand.Next(2) == 0)
						{
							if (rand.Next(500) == 0)
							{
								Gore.NewGore(new Vector2(j * 16 + 8, i * 16 + 8), default(Vector2), 415, (float)rand.Next(51, 101) * 0.01f);
							}
							else if (rand.Next(250) == 0)
							{
								Gore.NewGore(new Vector2(j * 16 + 8, i * 16 + 8), default(Vector2), 414, (float)rand.Next(51, 101) * 0.01f);
							}
							else if (rand.Next(80) == 0)
							{
								Gore.NewGore(new Vector2(j * 16 + 8, i * 16 + 8), default(Vector2), 413, (float)rand.Next(51, 101) * 0.01f);
							}
							else if (rand.Next(10) == 0)
							{
								Gore.NewGore(new Vector2(j * 16 + 8, i * 16 + 8), default(Vector2), 412, (float)rand.Next(51, 101) * 0.01f);
							}
							else if (rand.Next(3) == 0)
							{
								Gore.NewGore(new Vector2(j * 16 + 8, i * 16 + 8), default(Vector2), 411, (float)rand.Next(51, 101) * 0.01f);
							}
						}
						if (type == 165 && num11 >= 162 && num11 <= 214 && frameY == 72 && rand.Next(60) == 0)
						{
							int num40 = Dust.NewDust(new Vector2(j * 16 + 2, i * 16 + 6), 8, 4, 153);
							dust[num40].scale -= (float)rand.Next(3) * 0.1f;
							dust[num40].velocity.Y = 0f;
							dust[num40].velocity.X *= 0.05f;
							dust[num40].alpha = 100;
						}
						if (type == 42 && num11 == 0)
						{
							int num41 = frameY / 36;
							int num42 = frameY / 18 % 2;
							if (num41 == 7 && num42 == 1)
							{
								if (rand.Next(50) == 0)
								{
									int num43 = Dust.NewDust(new Vector2(j * 16 + 4, i * 16 + 4), 8, 8, 58, 0f, 0f, 150);
									dust[num43].velocity *= 0.5f;
								}
								if (rand.Next(100) == 0)
								{
									int num44 = Gore.NewGore(new Vector2(j * 16 - 2, i * 16 - 4), default(Vector2), rand.Next(16, 18));
									gore[num44].scale *= 0.7f;
									gore[num44].velocity *= 0.25f;
								}
							}
							else if (num41 == 29 && num42 == 1 && rand.Next(40) == 0)
							{
								int num45 = Dust.NewDust(new Vector2(j * 16 + 4, i * 16), 8, 8, 59, 0f, 0f, 100);
								if (rand.Next(3) != 0)
								{
									dust[num45].noGravity = true;
								}
								dust[num45].velocity *= 0.3f;
								dust[num45].velocity.Y -= 1.5f;
							}
						}
						if (type == 215 && frameY < 36 && rand.Next(3) == 0 && ((drawToScreen && rand.Next(4) == 0) || !drawToScreen) && frameY == 0)
						{
							int num46 = Dust.NewDust(new Vector2(j * 16 + 2, i * 16 - 4), 4, 8, 31, 0f, 0f, 100);
							if (num11 == 0)
							{
								dust[num46].position.X += rand.Next(8);
							}
							if (num11 == 36)
							{
								dust[num46].position.X -= rand.Next(8);
							}
							dust[num46].alpha += rand.Next(100);
							dust[num46].velocity *= 0.2f;
							dust[num46].velocity.Y -= 0.5f + (float)rand.Next(10) * 0.1f;
							dust[num46].fadeIn = 0.5f + (float)rand.Next(10) * 0.1f;
						}
						if (type == 4 && rand.Next(40) == 0 && num11 < 66)
						{
							int num47 = frameY / 22;
							switch (num47)
							{
							case 0:
								num47 = 6;
								break;
							case 8:
								num47 = 75;
								break;
							case 9:
								num47 = 135;
								break;
							case 10:
								num47 = 158;
								break;
							case 11:
								num47 = 169;
								break;
							case 12:
								num47 = 156;
								break;
							case 13:
								num47 = 234;
								break;
							case 14:
								num47 = 66;
								break;
							default:
								num47 = 58 + num47;
								break;
							}
							int num48 = 0;
							switch (num11)
							{
							case 22:
								num48 = Dust.NewDust(new Vector2(j * 16 + 6, i * 16), 4, 4, num47, 0f, 0f, 100);
								break;
							case 44:
								num48 = Dust.NewDust(new Vector2(j * 16 + 2, i * 16), 4, 4, num47, 0f, 0f, 100);
								break;
							default:
								num48 = Dust.NewDust(new Vector2(j * 16 + 4, i * 16), 4, 4, num47, 0f, 0f, 100);
								break;
							}
							if (rand.Next(3) != 0)
							{
								dust[num48].noGravity = true;
							}
							dust[num48].velocity *= 0.3f;
							dust[num48].velocity.Y -= 1.5f;
							if (num47 == 66)
							{
								dust[num48].color = new Microsoft.Xna.Framework.Color(DiscoR, DiscoG, DiscoB);
								dust[num48].noGravity = true;
							}
						}
						if (type == 93 && rand.Next(40) == 0 && num11 == 0)
						{
							int num49 = frameY / 54;
							if (frameY / 18 % 3 == 0)
							{
								int num50;
								switch (num49)
								{
								case 0:
								case 6:
								case 7:
								case 8:
								case 10:
								case 14:
								case 15:
								case 16:
									num50 = 6;
									break;
								case 20:
									num50 = 59;
									break;
								default:
									num50 = -1;
									break;
								}
								if (num50 != -1)
								{
									int num51 = Dust.NewDust(new Vector2(j * 16 + 4, i * 16 + 2), 4, 4, num50, 0f, 0f, 100);
									if (rand.Next(3) != 0)
									{
										dust[num51].noGravity = true;
									}
									dust[num51].velocity *= 0.3f;
									dust[num51].velocity.Y -= 1.5f;
								}
							}
						}
						if (type == 100 && rand.Next(40) == 0 && num11 < 36)
						{
							int num52 = frameY / 36;
							if (frameY / 18 % 2 == 0)
							{
								int num53;
								switch (num52)
								{
								case 0:
								case 2:
								case 5:
								case 7:
								case 8:
								case 10:
								case 12:
								case 14:
								case 15:
								case 16:
									num53 = 6;
									break;
								case 20:
									num53 = 59;
									break;
								default:
									num53 = -1;
									break;
								}
								if (num53 != -1)
								{
									int num54 = 0;
									Vector2 position2 = (num11 == 0) ? ((rand.Next(3) == 0) ? new Vector2(j * 16 + 4, i * 16 + 2) : new Vector2(j * 16 + 14, i * 16 + 2)) : ((rand.Next(3) == 0) ? new Vector2(j * 16 + 6, i * 16 + 2) : new Vector2(j * 16, i * 16 + 2));
									num54 = Dust.NewDust(position2, 4, 4, num53, 0f, 0f, 100);
									if (rand.Next(3) != 0)
									{
										dust[num54].noGravity = true;
									}
									dust[num54].velocity *= 0.3f;
									dust[num54].velocity.Y -= 1.5f;
								}
							}
						}
						if (type == 98 && rand.Next(40) == 0 && frameY == 0 && num11 == 0)
						{
							int num55 = Dust.NewDust(new Vector2(j * 16 + 12, i * 16 + 2), 4, 4, 6, 0f, 0f, 100);
							if (rand.Next(3) != 0)
							{
								dust[num55].noGravity = true;
							}
							dust[num55].velocity *= 0.3f;
							dust[num55].velocity.Y -= 1.5f;
						}
						if (type == 49 && rand.Next(2) == 0)
						{
							int num56 = Dust.NewDust(new Vector2(j * 16 + 4, i * 16 - 4), 4, 4, 172, 0f, 0f, 100);
							if (rand.Next(3) == 0)
							{
								dust[num56].scale = 0.5f;
							}
							else
							{
								dust[num56].scale = 0.9f;
								dust[num56].noGravity = true;
							}
							dust[num56].velocity *= 0.3f;
							dust[num56].velocity.Y -= 1.5f;
						}
						if (type == 372 && rand.Next(2) == 0)
						{
							int num57 = Dust.NewDust(new Vector2(j * 16 + 4, i * 16 - 4), 4, 4, 242, 0f, 0f, 100);
							if (rand.Next(3) == 0)
							{
								dust[num57].scale = 0.5f;
							}
							else
							{
								dust[num57].scale = 0.9f;
								dust[num57].noGravity = true;
							}
							dust[num57].velocity *= 0.3f;
							dust[num57].velocity.Y -= 1.5f;
						}
						if (type == 34 && rand.Next(40) == 0 && num11 < 54)
						{
							int num58 = frameY / 54;
							int num59 = num11 / 18 % 3;
							int num60 = frameY / 18 % 3;
							if (num60 == 1 && num59 != 1)
							{
								int num61;
								switch (num58)
								{
								case 0:
								case 1:
								case 2:
								case 3:
								case 4:
								case 5:
								case 12:
								case 13:
								case 16:
								case 19:
								case 21:
									num61 = 6;
									break;
								case 25:
									num61 = 59;
									break;
								default:
									num61 = -1;
									break;
								}
								if (num61 != -1)
								{
									int num62 = Dust.NewDust(new Vector2(j * 16, i * 16 + 2), 14, 6, num61, 0f, 0f, 100);
									if (rand.Next(3) != 0)
									{
										dust[num62].noGravity = true;
									}
									dust[num62].velocity *= 0.3f;
									dust[num62].velocity.Y -= 1.5f;
								}
							}
						}
						if (type == 22 && rand.Next(400) == 0)
						{
							Dust.NewDust(new Vector2(j * 16, i * 16), 16, 16, 14);
						}
						else if ((type == 23 || type == 24 || type == 32) && rand.Next(500) == 0)
						{
							Dust.NewDust(new Vector2(j * 16, i * 16), 16, 16, 14);
						}
						else if (type == 25 && rand.Next(700) == 0)
						{
							Dust.NewDust(new Vector2(j * 16, i * 16), 16, 16, 14);
						}
						else if (type == 112 && rand.Next(700) == 0)
						{
							Dust.NewDust(new Vector2(j * 16, i * 16), 16, 16, 14);
						}
						else if (type == 31 && rand.Next(20) == 0)
						{
							if (num11 >= 36)
							{
								int num63 = Dust.NewDust(new Vector2(j * 16, i * 16), 16, 16, 5, 0f, 0f, 100);
								dust[num63].velocity.Y = 0f;
								dust[num63].velocity.X *= 0.3f;
							}
							else
							{
								Dust.NewDust(new Vector2(j * 16, i * 16), 16, 16, 14, 0f, 0f, 100);
							}
						}
						else if (type == 26 && rand.Next(20) == 0)
						{
							if (num11 >= 54)
							{
								int num64 = Dust.NewDust(new Vector2(j * 16, i * 16), 16, 16, 5, 0f, 0f, 100);
								dust[num64].scale = 1.5f;
								dust[num64].noGravity = true;
								dust[num64].velocity *= 0.75f;
							}
							else
							{
								Dust.NewDust(new Vector2(j * 16, i * 16), 16, 16, 14, 0f, 0f, 100);
							}
						}
						else if ((type == 71 || type == 72) && rand.Next(500) == 0)
						{
							Dust.NewDust(new Vector2(j * 16, i * 16), 16, 16, 41, 0f, 0f, 250, default(Microsoft.Xna.Framework.Color), 0.8f);
						}
						else if ((type == 17 || type == 77 || type == 133) && rand.Next(40) == 0)
						{
							if (num11 == 18 && frameY == 18)
							{
								int num65 = Dust.NewDust(new Vector2(j * 16 - 4, i * 16 - 6), 8, 6, 6, 0f, 0f, 100);
								if (rand.Next(3) != 0)
								{
									dust[num65].noGravity = true;
								}
							}
						}
						else if (type == 405 && rand.Next(20) == 0)
						{
							if (num11 == 18 && frameY == 18)
							{
								int num66 = Dust.NewDust(new Vector2(j * 16 - 4, i * 16 - 6), 24, 10, 6, 0f, 0f, 100);
								if (rand.Next(5) != 0)
								{
									dust[num66].noGravity = true;
								}
							}
						}
						else if (type == 406 && frameY == 54 && num11 == 0 && rand.Next(3) == 0)
						{
							Vector2 position3 = new Vector2(j * 16 + 16, i * 16 + 8);
							Vector2 velocity = new Vector2(0f, 0f);
							if (windSpeed < 0f)
							{
								velocity.X = 0f - windSpeed;
							}
							int type3 = rand.Next(825, 828);
							if (rand.Next(4) == 0)
							{
								Gore.NewGore(position3, velocity, type3, rand.NextFloat() * 0.2f + 0.2f);
							}
							else if (rand.Next(2) == 0)
							{
								Gore.NewGore(position3, velocity, type3, rand.NextFloat() * 0.3f + 0.3f);
							}
							else
							{
								Gore.NewGore(position3, velocity, type3, rand.NextFloat() * 0.4f + 0.4f);
							}
						}
						else if (type == 37 && rand.Next(250) == 0)
						{
							int num67 = Dust.NewDust(new Vector2(j * 16, i * 16), 16, 16, 6, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), rand.Next(3));
							if (dust[num67].scale > 1f)
							{
								dust[num67].noGravity = true;
							}
						}
						else if ((type == 58 || type == 76) && rand.Next(250) == 0)
						{
							int num68 = Dust.NewDust(new Vector2(j * 16, i * 16), 16, 16, 6, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), rand.Next(3));
							if (dust[num68].scale > 1f)
							{
								dust[num68].noGravity = true;
							}
							dust[num68].noLight = true;
						}
						else if (type == 61)
						{
							if (num11 == 144)
							{
								if (rand.Next(60) == 0)
								{
									int num69 = Dust.NewDust(new Vector2(j * 16, i * 16), 16, 16, 44, 0f, 0f, 250, default(Microsoft.Xna.Framework.Color), 0.4f);
									dust[num69].fadeIn = 0.7f;
								}
								color.A = (byte)(245f - (float)(int)mouseTextColor * 1.5f);
								color.R = (byte)(245f - (float)(int)mouseTextColor * 1.5f);
								color.B = (byte)(245f - (float)(int)mouseTextColor * 1.5f);
								color.G = (byte)(245f - (float)(int)mouseTextColor * 1.5f);
							}
						}
						else if (tileShine[type] > 0)
						{
							tileShine[211] = 500;
							if (color.R > 20 || color.B > 20 || color.G > 20)
							{
								int num70 = color.R;
								if (color.G > num70)
								{
									num70 = color.G;
								}
								if (color.B > num70)
								{
									num70 = color.B;
								}
								num70 /= 30;
								if (rand.Next(tileShine[type]) < num70 && (type != 21 || (num11 >= 36 && num11 < 180) || (num11 >= 396 && num11 <= 409)))
								{
									Microsoft.Xna.Framework.Color newColor = Microsoft.Xna.Framework.Color.White;
									if (type == 178)
									{
										switch (num11 / 18)
										{
										case 0:
											newColor = new Microsoft.Xna.Framework.Color(255, 0, 255, 255);
											break;
										case 1:
											newColor = new Microsoft.Xna.Framework.Color(255, 255, 0, 255);
											break;
										case 2:
											newColor = new Microsoft.Xna.Framework.Color(0, 0, 255, 255);
											break;
										case 3:
											newColor = new Microsoft.Xna.Framework.Color(0, 255, 0, 255);
											break;
										case 4:
											newColor = new Microsoft.Xna.Framework.Color(255, 0, 0, 255);
											break;
										case 5:
											newColor = new Microsoft.Xna.Framework.Color(255, 255, 255, 255);
											break;
										case 6:
											newColor = new Microsoft.Xna.Framework.Color(255, 255, 0, 255);
											break;
										}
										int num71 = Dust.NewDust(new Vector2(j * 16, i * 16), 16, 16, 43, 0f, 0f, 254, newColor, 0.5f);
										dust[num71].velocity *= 0f;
									}
									else
									{
										if (type == 63)
										{
											newColor = new Microsoft.Xna.Framework.Color(0, 0, 255, 255);
										}
										if (type == 64)
										{
											newColor = new Microsoft.Xna.Framework.Color(255, 0, 0, 255);
										}
										if (type == 65)
										{
											newColor = new Microsoft.Xna.Framework.Color(0, 255, 0, 255);
										}
										if (type == 66)
										{
											newColor = new Microsoft.Xna.Framework.Color(255, 255, 0, 255);
										}
										if (type == 67)
										{
											newColor = new Microsoft.Xna.Framework.Color(255, 0, 255, 255);
										}
										if (type == 68)
										{
											newColor = new Microsoft.Xna.Framework.Color(255, 255, 255, 255);
										}
										if (type == 12)
										{
											newColor = new Microsoft.Xna.Framework.Color(255, 0, 0, 255);
										}
										if (type == 204)
										{
											newColor = new Microsoft.Xna.Framework.Color(255, 0, 0, 255);
										}
										if (type == 211)
										{
											newColor = new Microsoft.Xna.Framework.Color(50, 255, 100, 255);
										}
										int num72 = Dust.NewDust(new Vector2(j * 16, i * 16), 16, 16, 43, 0f, 0f, 254, newColor, 0.5f);
										dust[num72].velocity *= 0f;
									}
								}
							}
						}
					}
					if (type == 21)
					{
						Microsoft.Xna.Framework.Point key = new Microsoft.Xna.Framework.Point(j, i);
						if (num11 % 36 != 0)
						{
							key.X--;
						}
						if (frameY % 36 != 0)
						{
							key.Y--;
						}
						if (!dictionary.ContainsKey(key))
						{
							dictionary[key] = Chest.FindChest(key.X, key.Y);
						}
						int num73 = num11 / 18;
						int num74 = frameY / 18;
						int num75 = num11 / 36;
						int num76 = num73 * 18;
						num16 = num76 - num11;
						int num77 = num74 * 18;
						if (dictionary[key] != -1)
						{
							int frame = chest[dictionary[key]].frame;
							if (frame == 1)
							{
								num77 += 38;
							}
							if (frame == 2)
							{
								num77 += 76;
							}
						}
						num15 = num77 - frameY;
						if (num74 != 0)
						{
							num9 = 18;
						}
						if (num75 == 48 || num75 == 49)
						{
							value3 = new Microsoft.Xna.Framework.Rectangle(16 * (num73 % 2), frameY + num15, num10, num9);
						}
					}
					if (type == 378)
					{
						Microsoft.Xna.Framework.Point key2 = new Microsoft.Xna.Framework.Point(j, i);
						if (num11 % 36 != 0)
						{
							key2.X--;
						}
						if (frameY % 54 != 0)
						{
							key2.Y -= frameY / 18;
						}
						if (!dictionary2.ContainsKey(key2))
						{
							dictionary2[key2] = TETrainingDummy.Find(key2.X, key2.Y);
						}
						if (dictionary2[key2] != -1)
						{
							int num78 = ((TETrainingDummy)TileEntity.ByID[dictionary2[key2]]).npc;
							if (num78 != -1)
							{
								int num79 = npc[num78].frame.Y / 55;
								num79 *= 54;
								num79 += frameY;
								num15 = num79 - frameY;
							}
						}
					}
					if (type == 395)
					{
						Microsoft.Xna.Framework.Point key3 = new Microsoft.Xna.Framework.Point(j, i);
						if (num11 % 36 != 0)
						{
							key3.X--;
						}
						if (frameY % 36 != 0)
						{
							key3.Y--;
						}
						if (!dictionary3.ContainsKey(key3))
						{
							dictionary3[key3] = TEItemFrame.Find(key3.X, key3.Y);
							if (dictionary3[key3] != -1)
							{
								array[num3] = key3.X;
								array2[num3] = key3.Y;
								num3++;
							}
						}
					}
					if (type == 269 || type == 128)
					{
						int num80 = frameY / 18;
						if (num80 == 2)
						{
							if (num11 >= 100)
							{
								bool flag5 = false;
								int num81 = Main.tile[j, i - 1].frameX;
								if (num81 >= 100)
								{
									int num82 = 0;
									while (num81 >= 100)
									{
										num82++;
										num81 -= 100;
									}
									switch (num82)
									{
									case 15:
									case 36:
									case 41:
									case 42:
									case 58:
									case 59:
									case 60:
									case 61:
									case 62:
									case 63:
										flag5 = true;
										break;
									}
								}
								if (!flag5)
								{
									array[num3] = j;
									array2[num3] = i;
									num3++;
								}
							}
							if (Main.tile[j, i - 1].frameX >= 100)
							{
								array[num3] = j;
								array2[num3] = i - 1;
								num3++;
							}
							if (Main.tile[j, i - 2].frameX >= 100)
							{
								array[num3] = j;
								array2[num3] = i - 2;
								num3++;
							}
						}
					}
					if (type == 5 && frameY >= 198 && num11 >= 22)
					{
						array[num3] = j;
						array2[num3] = i;
						num3++;
					}
					if (type == 323 && num11 <= 132 && num11 >= 88)
					{
						array[num3] = j;
						array2[num3] = i;
						num3++;
					}
					if (type == 412 && num11 == 0 && frameY == 0)
					{
						array[num3] = j;
						array2[num3] = i;
						num3++;
					}
					if (type == 237 && num11 == 18 && frameY == 0)
					{
						array[num3] = j;
						array2[num3] = i;
						num3++;
					}
					if (type == 334)
					{
						int num83 = frameY / 18;
						if (num83 == 1 && num11 >= 5000)
						{
							int num84 = Main.tile[j, i].frameX;
							int num85 = 0;
							while (num84 >= 5000)
							{
								num85++;
								num84 -= 5000;
							}
							if (num85 == 1 || num85 == 4)
							{
								array[num3] = j;
								array2[num3] = i;
								num3++;
							}
						}
					}
					if (type == 5 && frameY >= 198 && num11 >= 22)
					{
						array[num3] = j;
						array2[num3] = i;
						num3++;
					}
					if (type == 323 && num11 <= 132 && num11 >= 88)
					{
						array[num3] = j;
						array2[num3] = i;
						num3++;
					}
					if (type == 412 && num11 == 0 && frameY == 0)
					{
						array[num3] = j;
						array2[num3] = i;
						num3++;
					}
					if (type == 237 && num11 == 18 && frameY == 0)
					{
						array[num3] = j;
						array2[num3] = i;
						num3++;
					}
					if (type == 72 && num11 >= 36)
					{
						int num86 = 0;
						switch (frameY)
						{
						case 18:
							num86 = 1;
							break;
						case 36:
							num86 = 2;
							break;
						}
						spriteBatch.Draw(shroomCapTexture, new Vector2(j * 16 - (int)screenPosition.X - 22, i * 16 - (int)screenPosition.Y - 26) + value, new Microsoft.Xna.Framework.Rectangle(num86 * 62, 0, 60, 42), Lighting.GetColor(j, i), 0f, default(Vector2), 1f, effects, 0f);
					}
					if (color.R >= 1 || color.G >= 1 || color.B >= 1)
					{
						Tile tile2 = Main.tile[j + 1, i];
						Tile tile3 = Main.tile[j - 1, i];
						Tile tile4 = Main.tile[j, i - 1];
						Tile tile5 = Main.tile[j, i + 1];
						if (tile2 == null)
						{
							tile2 = new Tile();
							Main.tile[j + 1, i] = tile2;
						}
						if (tile3 == null)
						{
							tile3 = new Tile();
							Main.tile[j - 1, i] = tile3;
						}
						if (tile4 == null)
						{
							tile4 = new Tile();
							Main.tile[j, i - 1] = tile4;
						}
						if (tile5 == null)
						{
							tile5 = new Tile();
							Main.tile[j, i + 1] = tile5;
						}
						if (solidOnly && flag && !tile.inActive() && !tileSolidTop[type])
						{
							bool flag6 = false;
							if (tile.halfBrick())
							{
								int num87 = 160;
								if ((tile3.liquid > num87 || tile2.liquid > num87) && waterfallManager.CheckForWaterfall(j, i))
								{
									flag6 = true;
								}
							}
							if (!flag6)
							{
								int num88 = 0;
								bool flag7 = false;
								bool flag8 = false;
								bool flag9 = false;
								bool flag10 = false;
								int num89 = 0;
								bool flag11 = false;
								int num90 = tile.slope();
								if (tile3.liquid > 0 && num90 != 1 && num90 != 3)
								{
									flag7 = true;
									switch (tile3.liquidType())
									{
									case 0:
										flag11 = true;
										break;
									case 1:
										num89 = 1;
										break;
									case 2:
										num89 = 11;
										break;
									}
									if (tile3.liquid > num88)
									{
										num88 = tile3.liquid;
									}
								}
								if (tile2.liquid > 0 && num90 != 2 && num90 != 4)
								{
									flag8 = true;
									switch (tile2.liquidType())
									{
									case 0:
										flag11 = true;
										break;
									case 1:
										num89 = 1;
										break;
									case 2:
										num89 = 11;
										break;
									}
									if (tile2.liquid > num88)
									{
										num88 = tile2.liquid;
									}
								}
								if (tile4.liquid > 0 && num90 != 3 && num90 != 4)
								{
									flag9 = true;
									switch (tile4.liquidType())
									{
									case 0:
										flag11 = true;
										break;
									case 1:
										num89 = 1;
										break;
									case 2:
										num89 = 11;
										break;
									}
								}
								if (tile5.liquid > 0 && num90 != 1 && num90 != 2)
								{
									if (tile5.liquid > 240)
									{
										flag10 = true;
									}
									switch (tile5.liquidType())
									{
									case 0:
										flag11 = true;
										break;
									case 1:
										num89 = 1;
										break;
									case 2:
										num89 = 11;
										break;
									}
								}
								if (waterStyleOverride != -1)
								{
									waterStyle = waterStyleOverride;
								}
								if (num89 == 0)
								{
									num89 = waterStyle;
								}
								if ((flag9 || flag10 || flag7 || flag8) && (!flag11 || num89 != 1))
								{
									Microsoft.Xna.Framework.Color color6 = Lighting.GetColor(j, i);
									float num91 = 0f;
									Vector2 value4 = new Vector2(j * 16, i * 16);
									Microsoft.Xna.Framework.Rectangle value5 = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 16);
									if (flag10 && (flag7 || flag8))
									{
										flag7 = true;
										flag8 = true;
									}
									if ((!flag9 || (!flag7 && !flag8)) && (!flag10 || !flag9))
									{
										if (flag9)
										{
											value5 = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 4);
											if (tile.halfBrick() || tile.slope() != 0)
											{
												value5 = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 12);
											}
										}
										else if (flag10 && !flag7 && !flag8)
										{
											value4 = new Vector2(j * 16, i * 16 + 12);
											value5 = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 4);
										}
										else
										{
											num91 = 256 - num88;
											num91 /= 32f;
											int y = 4;
											if (tile4.liquid == 0 && !WorldGen.SolidTile(j, i - 1))
											{
												y = 0;
											}
											if ((flag7 && flag8) || tile.halfBrick() || tile.slope() != 0)
											{
												value4 = new Vector2(j * 16, i * 16 + (int)num91 * 2);
												value5 = new Microsoft.Xna.Framework.Rectangle(0, y, 16, 16 - (int)num91 * 2);
											}
											else if (!flag7)
											{
												value4 = new Vector2(j * 16 + 12, i * 16 + (int)num91 * 2);
												value5 = new Microsoft.Xna.Framework.Rectangle(0, y, 4, 16 - (int)num91 * 2);
											}
											else
											{
												value4 = new Vector2(j * 16, i * 16 + (int)num91 * 2);
												value5 = new Microsoft.Xna.Framework.Rectangle(0, y, 4, 16 - (int)num91 * 2);
											}
										}
									}
									float num92 = 0.5f;
									switch (num89)
									{
									case 1:
										num92 = 1f;
										break;
									case 11:
										num92 *= 1.7f;
										if (num92 > 1f)
										{
											num92 = 1f;
										}
										break;
									}
									if ((double)i < worldSurface || num92 > 1f)
									{
										num92 = 1f;
										if (tile4.wall > 0 || tile3.wall > 0 || tile2.wall > 0 || tile5.wall > 0)
										{
											num92 = 0.65f;
										}
										if (tile.wall > 0)
										{
											num92 = 0.5f;
										}
									}
									if (tile.halfBrick() && tile4.liquid > 0 && tile.wall > 0)
									{
										num92 = 0f;
									}
									float num93 = (float)(int)color6.R * num92;
									float num94 = (float)(int)color6.G * num92;
									float num95 = (float)(int)color6.B * num92;
									float num96 = (float)(int)color6.A * num92;
									color6 = new Microsoft.Xna.Framework.Color((byte)num93, (byte)num94, (byte)num95, (byte)num96);
									spriteBatch.Draw(liquidTexture[num89], value4 - screenPosition + value, value5, color6, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
								}
							}
						}
						if (type == 314)
						{
							if (tile.inActive())
							{
								color = tile.actColor(color);
							}
							else if (tileShine2[type])
							{
								color = shine(color, type);
							}
							int frontColor;
							int num97;
							Minecart.TrackColors(j, i, tile, out frontColor, out num97);
							Texture2D texture = (!canDrawColorTile(type, frontColor)) ? tileTexture[type] : tileAltTexture[type, frontColor];
							Texture2D texture2 = (!canDrawColorTile(type, num97)) ? tileTexture[type] : tileAltTexture[type, num97];
							tile.frameNumber();
							if (frameY != -1)
							{
								spriteBatch.Draw(texture2, new Vector2(j * 16 - (int)screenPosition.X, i * 16 - (int)screenPosition.Y) + value, Minecart.GetSourceRect(frameY, tileFrame[314]), color, 0f, default(Vector2), 1f, effects, 0f);
							}
							spriteBatch.Draw(texture, new Vector2(j * 16 - (int)screenPosition.X, i * 16 - (int)screenPosition.Y) + value, Minecart.GetSourceRect(num11, tileFrame[314]), color, 0f, default(Vector2), 1f, effects, 0f);
							if (Minecart.DrawLeftDecoration(frameY))
							{
								spriteBatch.Draw(texture2, new Vector2(j * 16 - (int)screenPosition.X, (i + 1) * 16 - (int)screenPosition.Y) + value, Minecart.GetSourceRect(36), color, 0f, default(Vector2), 1f, effects, 0f);
							}
							if (Minecart.DrawLeftDecoration(num11))
							{
								spriteBatch.Draw(texture, new Vector2(j * 16 - (int)screenPosition.X, (i + 1) * 16 - (int)screenPosition.Y) + value, Minecart.GetSourceRect(36), color, 0f, default(Vector2), 1f, effects, 0f);
							}
							if (Minecart.DrawRightDecoration(frameY))
							{
								spriteBatch.Draw(texture2, new Vector2(j * 16 - (int)screenPosition.X, (i + 1) * 16 - (int)screenPosition.Y) + value, Minecart.GetSourceRect(37, tileFrame[314]), color, 0f, default(Vector2), 1f, effects, 0f);
							}
							if (Minecart.DrawRightDecoration(num11))
							{
								spriteBatch.Draw(texture, new Vector2(j * 16 - (int)screenPosition.X, (i + 1) * 16 - (int)screenPosition.Y) + value, Minecart.GetSourceRect(37), color, 0f, default(Vector2), 1f, effects, 0f);
							}
							if (Minecart.DrawBumper(num11))
							{
								spriteBatch.Draw(texture, new Vector2(j * 16 - (int)screenPosition.X, (i - 1) * 16 - (int)screenPosition.Y) + value, Minecart.GetSourceRect(39), color, 0f, default(Vector2), 1f, effects, 0f);
							}
							else if (Minecart.DrawBouncyBumper(num11))
							{
								spriteBatch.Draw(texture, new Vector2(j * 16 - (int)screenPosition.X, (i - 1) * 16 - (int)screenPosition.Y) + value, Minecart.GetSourceRect(38), color, 0f, default(Vector2), 1f, effects, 0f);
							}
						}
						else if (type == 51)
						{
							Microsoft.Xna.Framework.Color color7 = Lighting.GetColor(j, i);
							float num98 = 0.5f;
							float num99 = (float)(int)color7.R * num98;
							float num100 = (float)(int)color7.G * num98;
							float num101 = (float)(int)color7.B * num98;
							float num102 = (float)(int)color7.A * num98;
							color7 = new Microsoft.Xna.Framework.Color((byte)num99, (byte)num100, (byte)num101, (byte)num102);
							if (canDrawColorTile(j, i))
							{
								spriteBatch.Draw(tileAltTexture[type, tile.color()], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), color7, 0f, default(Vector2), 1f, effects, 0f);
							}
							else
							{
								spriteBatch.Draw(tileTexture[type], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), color7, 0f, default(Vector2), 1f, effects, 0f);
							}
						}
						else if (type == 171)
						{
							if (num7 > i - frameY && frameY == 7)
							{
								num12 -= 16 * frameY;
								num11 = Main.tile[j, i - frameY].frameX;
								frameY = Main.tile[j, i - frameY].frameY;
							}
							if (num11 >= 10)
							{
								int num103 = 0;
								if ((frameY & 1) == 1)
								{
									num103++;
								}
								if ((frameY & 2) == 2)
								{
									num103 += 2;
								}
								if ((frameY & 4) == 4)
								{
									num103 += 4;
								}
								int num104 = 0;
								if ((frameY & 8) == 8)
								{
									num104++;
								}
								if ((frameY & 0x10) == 16)
								{
									num104 += 2;
								}
								if ((frameY & 0x20) == 32)
								{
									num104 += 4;
								}
								int num105 = 0;
								if ((frameY & 0x40) == 64)
								{
									num105++;
								}
								if ((frameY & 0x80) == 128)
								{
									num105 += 2;
								}
								if ((frameY & 0x100) == 256)
								{
									num105 += 4;
								}
								if ((frameY & 0x200) == 512)
								{
									num105 += 8;
								}
								int num106 = 0;
								if ((frameY & 0x400) == 1024)
								{
									num106++;
								}
								if ((frameY & 0x800) == 2048)
								{
									num106 += 2;
								}
								if ((frameY & 0x1000) == 4096)
								{
									num106 += 4;
								}
								if ((frameY & 0x2000) == 8192)
								{
									num106 += 8;
								}
								Microsoft.Xna.Framework.Color color8 = Lighting.GetColor(j + 1, i + 4);
								spriteBatch.Draw(xmasTree[0], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(0, 0, 64, 128), color8, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
								if (num103 > 0)
								{
									num103--;
									Microsoft.Xna.Framework.Color color9 = color8;
									if (num103 != 3)
									{
										color9 = new Microsoft.Xna.Framework.Color(255, 255, 255, 255);
									}
									spriteBatch.Draw(xmasTree[3], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(66 * num103, 0, 64, 128), color9, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
								}
								if (num104 > 0)
								{
									num104--;
									spriteBatch.Draw(xmasTree[1], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(66 * num104, 0, 64, 128), color8, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
								}
								if (num105 > 0)
								{
									num105--;
									spriteBatch.Draw(xmasTree[2], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(66 * num105, 0, 64, 128), color8, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
								}
								if (num106 > 0)
								{
									num106--;
									spriteBatch.Draw(xmasTree[4], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(66 * num106, 130 * tileFrame[171], 64, 128), new Microsoft.Xna.Framework.Color(255, 255, 255, 255), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
								}
							}
						}
						else if (type == 160 && !tile.halfBrick())
						{
							Microsoft.Xna.Framework.Color color10 = default(Microsoft.Xna.Framework.Color);
							color10 = new Microsoft.Xna.Framework.Color(DiscoR, DiscoG, DiscoB, 255);
							if (tile.inActive())
							{
								color10 = tile.actColor(color10);
							}
							if (tile.slope() == 0)
							{
								spriteBatch.Draw(tileTexture[type], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), color10, 0f, default(Vector2), 1f, effects, 0f);
							}
							else if (tile.slope() > 2)
							{
								if (tile.slope() == 3)
								{
									for (int l = 0; l < 8; l++)
									{
										int num107 = 2;
										int num108 = l * 2;
										int num109 = l * -2;
										int num110 = 16 - l * 2;
										if (canDrawColorTile(j, i))
										{
											spriteBatch.Draw(tileAltTexture[type, tile.color()], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + (float)num108, i * 16 - (int)screenPosition.Y + num12 + l * num107 + num109) + value, new Microsoft.Xna.Framework.Rectangle(num11 + num108, frameY + 16 - num110, num107, num110), color10, 0f, default(Vector2), 1f, effects, 0f);
										}
										else
										{
											spriteBatch.Draw(tileTexture[type], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + (float)num108, i * 16 - (int)screenPosition.Y + num12 + l * num107 + num109) + value, new Microsoft.Xna.Framework.Rectangle(num11 + num108, frameY + 16 - num110, num107, num110), color10, 0f, default(Vector2), 1f, effects, 0f);
										}
									}
								}
								else
								{
									for (int m = 0; m < 8; m++)
									{
										int num111 = 2;
										int num112 = 16 - m * num111 - num111;
										int num113 = 16 - m * num111;
										int num114 = m * -2;
										if (canDrawColorTile(j, i))
										{
											spriteBatch.Draw(tileAltTexture[type, tile.color()], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + (float)num112, i * 16 - (int)screenPosition.Y + num12 + m * num111 + num114) + value, new Microsoft.Xna.Framework.Rectangle(num11 + num112, frameY + 16 - num113, num111, num113), color10, 0f, default(Vector2), 1f, effects, 0f);
										}
										else
										{
											spriteBatch.Draw(tileTexture[type], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + (float)num112, i * 16 - (int)screenPosition.Y + num12 + m * num111 + num114) + value, new Microsoft.Xna.Framework.Rectangle(num11 + num112, frameY + 16 - num113, num111, num113), color10, 0f, default(Vector2), 1f, effects, 0f);
										}
									}
								}
								if (canDrawColorTile(j, i))
								{
									spriteBatch.Draw(tileAltTexture[type, tile.color()], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, 16, 2), color10, 0f, default(Vector2), 1f, effects, 0f);
								}
								else
								{
									spriteBatch.Draw(tileTexture[type], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, 16, 2), color10, 0f, default(Vector2), 1f, effects, 0f);
								}
							}
							else
							{
								if (tile.slope() == 1)
								{
									for (int n = 0; n < 8; n++)
									{
										int num115 = 2;
										int num116 = n * 2;
										int height2 = 14 - n * num115;
										spriteBatch.Draw(tileTexture[type], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + (float)num116, i * 16 - (int)screenPosition.Y + num12 + n * num115) + value, new Microsoft.Xna.Framework.Rectangle(num11 + num116, frameY, num115, height2), color10, 0f, default(Vector2), 1f, effects, 0f);
									}
								}
								if (tile.slope() == 2)
								{
									for (int num117 = 0; num117 < 8; num117++)
									{
										int num118 = 2;
										int num119 = 16 - num117 * num118 - num118;
										int height3 = 14 - num117 * num118;
										spriteBatch.Draw(tileTexture[type], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + (float)num119, i * 16 - (int)screenPosition.Y + num12 + num117 * num118) + value, new Microsoft.Xna.Framework.Rectangle(num11 + num119, frameY, num118, height3), color10, 0f, default(Vector2), 1f, effects, 0f);
									}
								}
								spriteBatch.Draw(tileTexture[type], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12 + 14) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY + 14, 16, 2), color10, 0f, default(Vector2), 1f, effects, 0f);
							}
						}
						else if (tile.slope() > 0)
						{
							if (tile.inActive())
							{
								color = tile.actColor(color);
							}
							else if (tileShine2[type])
							{
								color = shine(color, type);
							}
							if (tile.type == 19)
							{
								if (canDrawColorTile(j, i))
								{
									spriteBatch.Draw(tileAltTexture[type, tile.color()], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, 16, 16), color, 0f, default(Vector2), 1f, effects, 0f);
								}
								else
								{
									spriteBatch.Draw(tileTexture[type], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, 16, 16), color, 0f, default(Vector2), 1f, effects, 0f);
								}
								if (tile.slope() == 1 && Main.tile[j + 1, i + 1].active() && Main.tile[j + 1, i + 1].slope() != 2 && !Main.tile[j + 1, i + 1].halfBrick() && !TileID.Sets.BlocksStairs[Main.tile[j + 1, i + 1].type] && !TileID.Sets.BlocksStairsAbove[Main.tile[j, i + 1].type])
								{
									if (Main.tile[j + 1, i + 1].type == 19 && Main.tile[j + 1, i + 1].slope() == 0)
									{
										if (canDrawColorTile(j, i))
										{
											spriteBatch.Draw(tileAltTexture[type, tile.color()], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12 + 16) + value, new Microsoft.Xna.Framework.Rectangle(324, frameY, 16, 16), color, 0f, default(Vector2), 1f, effects, 0f);
										}
										else
										{
											spriteBatch.Draw(tileTexture[type], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12 + 16) + value, new Microsoft.Xna.Framework.Rectangle(324, frameY, 16, 16), color, 0f, default(Vector2), 1f, effects, 0f);
										}
									}
									else if (canDrawColorTile(j, i))
									{
										spriteBatch.Draw(tileAltTexture[type, tile.color()], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12 + 16) + value, new Microsoft.Xna.Framework.Rectangle(198, frameY, 16, 16), color, 0f, default(Vector2), 1f, effects, 0f);
									}
									else
									{
										spriteBatch.Draw(tileTexture[type], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12 + 16) + value, new Microsoft.Xna.Framework.Rectangle(198, frameY, 16, 16), color, 0f, default(Vector2), 1f, effects, 0f);
									}
								}
								else if (tile.slope() == 2 && Main.tile[j - 1, i + 1].active() && Main.tile[j - 1, i + 1].slope() != 1 && !Main.tile[j - 1, i + 1].halfBrick() && !TileID.Sets.BlocksStairs[Main.tile[j - 1, i + 1].type] && !TileID.Sets.BlocksStairsAbove[Main.tile[j, i + 1].type])
								{
									if (Main.tile[j - 1, i + 1].type == 19 && Main.tile[j - 1, i + 1].slope() == 0)
									{
										if (canDrawColorTile(j, i))
										{
											spriteBatch.Draw(tileAltTexture[type, tile.color()], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12 + 16) + value, new Microsoft.Xna.Framework.Rectangle(306, frameY, 16, 16), color, 0f, default(Vector2), 1f, effects, 0f);
										}
										else
										{
											spriteBatch.Draw(tileTexture[type], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12 + 16) + value, new Microsoft.Xna.Framework.Rectangle(306, frameY, 16, 16), color, 0f, default(Vector2), 1f, effects, 0f);
										}
									}
									else if (canDrawColorTile(j, i))
									{
										spriteBatch.Draw(tileAltTexture[type, tile.color()], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12 + 16) + value, new Microsoft.Xna.Framework.Rectangle(162, frameY, 16, 16), color, 0f, default(Vector2), 1f, effects, 0f);
									}
									else
									{
										spriteBatch.Draw(tileTexture[type], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12 + 16) + value, new Microsoft.Xna.Framework.Rectangle(162, frameY, 16, 16), color, 0f, default(Vector2), 1f, effects, 0f);
									}
								}
							}
							else if (tile.slope() > 2)
							{
								if (tile.slope() == 3)
								{
									for (int num120 = 0; num120 < 8; num120++)
									{
										int num121 = 2;
										int num122 = num120 * 2;
										int num123 = num120 * -2;
										int num124 = 16 - num120 * 2;
										if (canDrawColorTile(j, i))
										{
											spriteBatch.Draw(tileAltTexture[type, tile.color()], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + (float)num122, i * 16 - (int)screenPosition.Y + num12 + num120 * num121 + num123) + value, new Microsoft.Xna.Framework.Rectangle(num11 + num122 + num16, frameY + 16 - num124 + num15, num121, num124), color, 0f, default(Vector2), 1f, effects, 0f);
										}
										else
										{
											spriteBatch.Draw(tileTexture[type], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + (float)num122, i * 16 - (int)screenPosition.Y + num12 + num120 * num121 + num123) + value, new Microsoft.Xna.Framework.Rectangle(num11 + num122 + num16, frameY + 16 - num124 + num15, num121, num124), color, 0f, default(Vector2), 1f, effects, 0f);
										}
									}
								}
								else
								{
									for (int num125 = 0; num125 < 8; num125++)
									{
										int num126 = 2;
										int num127 = 16 - num125 * num126 - num126;
										int num128 = 16 - num125 * num126;
										int num129 = num125 * -2;
										if (canDrawColorTile(j, i))
										{
											spriteBatch.Draw(tileAltTexture[type, tile.color()], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + (float)num127, i * 16 - (int)screenPosition.Y + num12 + num125 * num126 + num129) + value, new Microsoft.Xna.Framework.Rectangle(num11 + num127 + num16, frameY + 16 - num128 + num15, num126, num128), color, 0f, default(Vector2), 1f, effects, 0f);
										}
										else
										{
											spriteBatch.Draw(tileTexture[type], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + (float)num127, i * 16 - (int)screenPosition.Y + num12 + num125 * num126 + num129) + value, new Microsoft.Xna.Framework.Rectangle(num11 + num127 + num16, frameY + 16 - num128 + num15, num126, num128), color, 0f, default(Vector2), 1f, effects, 0f);
										}
									}
								}
								if (canDrawColorTile(j, i))
								{
									spriteBatch.Draw(tileAltTexture[type, tile.color()], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11 + num16, frameY + num15, 16, 2), color, 0f, default(Vector2), 1f, effects, 0f);
								}
								else
								{
									spriteBatch.Draw(tileTexture[type], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11 + num16, frameY + num15, 16, 2), color, 0f, default(Vector2), 1f, effects, 0f);
								}
							}
							else
							{
								if (tile.slope() == 1)
								{
									for (int num130 = 0; num130 < 8; num130++)
									{
										int num131 = 2;
										int num132 = num130 * 2;
										int height4 = 14 - num130 * num131;
										if (canDrawColorTile(j, i))
										{
											spriteBatch.Draw(tileAltTexture[type, tile.color()], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + (float)num132, i * 16 - (int)screenPosition.Y + num12 + num130 * num131) + value, new Microsoft.Xna.Framework.Rectangle(num11 + num132 + num16, frameY + num15, num131, height4), color, 0f, default(Vector2), 1f, effects, 0f);
										}
										else
										{
											spriteBatch.Draw(tileTexture[type], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + (float)num132, i * 16 - (int)screenPosition.Y + num12 + num130 * num131) + value, new Microsoft.Xna.Framework.Rectangle(num11 + num132 + num16, frameY + num15, num131, height4), color, 0f, default(Vector2), 1f, effects, 0f);
										}
									}
								}
								if (tile.slope() == 2)
								{
									for (int num133 = 0; num133 < 8; num133++)
									{
										int num134 = 2;
										int num135 = 16 - num133 * num134 - num134;
										int height5 = 14 - num133 * num134;
										if (canDrawColorTile(j, i))
										{
											spriteBatch.Draw(tileAltTexture[type, tile.color()], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + (float)num135, i * 16 - (int)screenPosition.Y + num12 + num133 * num134) + value, new Microsoft.Xna.Framework.Rectangle(num11 + num135 + num16, frameY + num15, num134, height5), color, 0f, default(Vector2), 1f, effects, 0f);
										}
										else
										{
											spriteBatch.Draw(tileTexture[type], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + (float)num135, i * 16 - (int)screenPosition.Y + num12 + num133 * num134) + value, new Microsoft.Xna.Framework.Rectangle(num11 + num135 + num16, frameY + num15, num134, height5), color, 0f, default(Vector2), 1f, effects, 0f);
										}
									}
								}
								if (canDrawColorTile(j, i))
								{
									spriteBatch.Draw(tileAltTexture[type, tile.color()], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12 + 14) + value, new Microsoft.Xna.Framework.Rectangle(num11 + num16, frameY + 14 + num15, 16, 2), color, 0f, default(Vector2), 1f, effects, 0f);
								}
								else
								{
									spriteBatch.Draw(tileTexture[type], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12 + 14) + value, new Microsoft.Xna.Framework.Rectangle(num11 + num16, frameY + 14 + num15, 16, 2), color, 0f, default(Vector2), 1f, effects, 0f);
								}
							}
						}
						else if (type == 129)
						{
							Vector2 value6 = new Vector2(0f, 0f);
							if (frameY < 36)
							{
								value6.Y += 2 * (frameY == 0).ToDirectionInt();
							}
							else
							{
								value6.X += 2 * (frameY == 36).ToDirectionInt();
							}
							spriteBatch.Draw(tileTexture[type], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value + value6, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), new Microsoft.Xna.Framework.Color(255, 255, 255, 100), 0f, default(Vector2), 1f, effects, 0f);
						}
						else if (tileAlch[type])
						{
							num9 = 20;
							num12 = 0;
							int num136 = type;
							int num137 = num11 / 18;
							if (num136 > 82)
							{
								if (num137 == 0 && dayTime)
								{
									num136 = 84;
								}
								if (num137 == 1 && !dayTime)
								{
									num136 = 84;
								}
								if (num137 == 3 && !dayTime && (bloodMoon || moonPhase == 0))
								{
									num136 = 84;
								}
								if (num137 == 4 && (raining || cloudAlpha > 0f))
								{
									num136 = 84;
								}
								if (num137 == 5 && !raining && time > 40500.0)
								{
									num136 = 84;
								}
							}
							if (num136 == 84)
							{
								if (num137 == 0 && rand.Next(100) == 0)
								{
									int num138 = Dust.NewDust(new Vector2(j * 16, i * 16 - 4), 16, 16, 19, 0f, 0f, 160, default(Microsoft.Xna.Framework.Color), 0.1f);
									dust[num138].velocity.X /= 2f;
									dust[num138].velocity.Y /= 2f;
									dust[num138].noGravity = true;
									dust[num138].fadeIn = 1f;
								}
								if (num137 == 1 && rand.Next(100) == 0)
								{
									Dust.NewDust(new Vector2(j * 16, i * 16), 16, 16, 41, 0f, 0f, 250, default(Microsoft.Xna.Framework.Color), 0.8f);
								}
								if (num137 == 3)
								{
									if (rand.Next(200) == 0)
									{
										int num139 = Dust.NewDust(new Vector2(j * 16, i * 16), 16, 16, 14, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 0.2f);
										dust[num139].fadeIn = 1.2f;
									}
									if (rand.Next(75) == 0)
									{
										int num140 = Dust.NewDust(new Vector2(j * 16, i * 16), 16, 16, 27, 0f, 0f, 100);
										dust[num140].velocity.X /= 2f;
										dust[num140].velocity.Y /= 2f;
									}
								}
								if (num137 == 4 && rand.Next(150) == 0)
								{
									int num141 = Dust.NewDust(new Vector2(j * 16, i * 16), 16, 8, 16);
									dust[num141].velocity.X /= 3f;
									dust[num141].velocity.Y /= 3f;
									dust[num141].velocity.Y -= 0.7f;
									dust[num141].alpha = 50;
									dust[num141].scale *= 0.1f;
									dust[num141].fadeIn = 0.9f;
									dust[num141].noGravity = true;
								}
								if (num137 == 5)
								{
									if (rand.Next(40) == 0)
									{
										int num142 = Dust.NewDust(new Vector2(j * 16, i * 16 - 6), 16, 16, 6, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1.5f);
										dust[num142].velocity.Y -= 2f;
										dust[num142].noGravity = true;
									}
									color.A = (byte)((int)mouseTextColor / 2);
									color.G = mouseTextColor;
									color.B = mouseTextColor;
								}
								if (num137 == 6)
								{
									if (rand.Next(30) == 0)
									{
										int num143 = Dust.NewDust(newColor: new Microsoft.Xna.Framework.Color(50, 255, 255, 255), Position: new Vector2(j * 16, i * 16), Width: 16, Height: 16, Type: 43, SpeedX: 0f, SpeedY: 0f, Alpha: 254, Scale: 0.5f);
										dust[num143].velocity *= 0f;
									}
									byte b4 = (byte)((mouseTextColor + color.G * 2) / 3);
									byte b5 = (byte)((mouseTextColor + color.B * 2) / 3);
									if (b4 > color.G)
									{
										color.G = b4;
									}
									if (b5 > color.B)
									{
										color.B = b5;
									}
								}
							}
							if (canDrawColorTile(j, i))
							{
								spriteBatch.Draw(tileAltTexture[type, tile.color()], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), color, 0f, default(Vector2), 1f, effects, 0f);
							}
							else
							{
								LoadTiles(num136);
								spriteBatch.Draw(tileTexture[num136], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), color, 0f, default(Vector2), 1f, effects, 0f);
							}
						}
						else if (type == 80)
						{
							bool flag12 = false;
							bool flag13 = false;
							bool flag14 = false;
							if (!canDrawColorTile(j, i))
							{
								int num144 = j;
								if (num11 == 36)
								{
									num144--;
								}
								if (num11 == 54)
								{
									num144++;
								}
								if (num11 == 108)
								{
									num144 = ((frameY != 18) ? (num144 + 1) : (num144 - 1));
								}
								int num145 = i;
								bool flag15 = false;
								if (Main.tile[num144, num145].type == 80 && Main.tile[num144, num145].active())
								{
									flag15 = true;
								}
								while (!Main.tile[num144, num145].active() || !tileSolid[Main.tile[num144, num145].type] || !flag15)
								{
									if (Main.tile[num144, num145].type == 80 && Main.tile[num144, num145].active())
									{
										flag15 = true;
									}
									num145++;
									if (num145 > i + 20)
									{
										break;
									}
								}
								if (Main.tile[num144, num145].type == 112)
								{
									flag12 = true;
								}
								if (Main.tile[num144, num145].type == 116)
								{
									flag13 = true;
								}
								if (Main.tile[num144, num145].type == 234)
								{
									flag14 = true;
								}
							}
							if (flag12)
							{
								spriteBatch.Draw(evilCactusTexture, new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), color, 0f, default(Vector2), 1f, effects, 0f);
							}
							else if (flag14)
							{
								spriteBatch.Draw(crimsonCactusTexture, new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), color, 0f, default(Vector2), 1f, effects, 0f);
							}
							else if (flag13)
							{
								spriteBatch.Draw(goodCactusTexture, new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), color, 0f, default(Vector2), 1f, effects, 0f);
							}
							else if (canDrawColorTile(j, i))
							{
								spriteBatch.Draw(tileAltTexture[type, tile.color()], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), color, 0f, default(Vector2), 1f, effects, 0f);
							}
							else
							{
								spriteBatch.Draw(tileTexture[type], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), color, 0f, default(Vector2), 1f, effects, 0f);
							}
						}
						else if (type == 272 && !tile.halfBrick() && !Main.tile[j - 1, i].halfBrick() && !Main.tile[j + 1, i].halfBrick())
						{
							int num146 = tileFrame[type];
							num146 += j % 2;
							num146 += i % 2;
							num146 += j % 3;
							for (num146 += i % 3; num146 > 1; num146 -= 2)
							{
							}
							num146 *= 90;
							if (tile.inActive())
							{
								color = tile.actColor(color);
							}
							else if (tileShine2[type])
							{
								color = shine(color, type);
							}
							if (canDrawColorTile(j, i))
							{
								spriteBatch.Draw(tileAltTexture[type, tile.color()], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY + num146, num10, num9), color, 0f, default(Vector2), 1f, effects, 0f);
							}
							else
							{
								spriteBatch.Draw(tileTexture[type], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY + num146, num10, num9), color, 0f, default(Vector2), 1f, effects, 0f);
							}
						}
						else
						{
							if (type == 160)
							{
								color = new Microsoft.Xna.Framework.Color(DiscoR, DiscoG, DiscoB, 255);
							}
							if (type != 19 && type != 380 && tileSolid[type] && !TileID.Sets.NotReallySolid[type] && !tile.halfBrick() && (Main.tile[j - 1, i].halfBrick() || Main.tile[j + 1, i].halfBrick()))
							{
								if (tile.inActive())
								{
									color = tile.actColor(color);
								}
								else if (tileShine2[type])
								{
									color = shine(color, type);
								}
								if (Main.tile[j - 1, i].halfBrick() && Main.tile[j + 1, i].halfBrick())
								{
									if (canDrawColorTile(j, i))
									{
										spriteBatch.Draw(tileAltTexture[type, tile.color()], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12 + 8) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY + 8, num10, 8), color, 0f, default(Vector2), 1f, effects, 0f);
										spriteBatch.Draw(tileAltTexture[type, tile.color()], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(126, 0, 16, 8), color, 0f, default(Vector2), 1f, effects, 0f);
									}
									else
									{
										spriteBatch.Draw(tileTexture[type], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12 + 8) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY + 8, num10, 8), color, 0f, default(Vector2), 1f, effects, 0f);
										if (!Main.tile[j, i - 1].bottomSlope() && Main.tile[j, i - 1].type == type)
										{
											spriteBatch.Draw(tileTexture[type], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(90, 0, 16, 8), color, 0f, default(Vector2), 1f, effects, 0f);
										}
										else
										{
											spriteBatch.Draw(tileTexture[type], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(126, 0, 16, 8), color, 0f, default(Vector2), 1f, effects, 0f);
										}
									}
								}
								else if (Main.tile[j - 1, i].halfBrick())
								{
									if (canDrawColorTile(j, i))
									{
										spriteBatch.Draw(tileAltTexture[type, tile.color()], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12 + 8) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY + 8, num10, 8), color, 0f, default(Vector2), 1f, effects, 0f);
										spriteBatch.Draw(tileAltTexture[type, tile.color()], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + 4f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11 + 4, frameY, num10 - 4, num9), color, 0f, default(Vector2), 1f, effects, 0f);
										spriteBatch.Draw(tileAltTexture[type, tile.color()], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(126, 0, 4, 8), color, 0f, default(Vector2), 1f, effects, 0f);
									}
									else
									{
										spriteBatch.Draw(tileTexture[type], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12 + 8) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY + 8, num10, 8), color, 0f, default(Vector2), 1f, effects, 0f);
										spriteBatch.Draw(tileTexture[type], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + 4f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11 + 4, frameY, num10 - 4, num9), color, 0f, default(Vector2), 1f, effects, 0f);
										spriteBatch.Draw(tileTexture[type], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(126, 0, 4, 8), color, 0f, default(Vector2), 1f, effects, 0f);
									}
								}
								else if (Main.tile[j + 1, i].halfBrick())
								{
									if (canDrawColorTile(j, i))
									{
										spriteBatch.Draw(tileAltTexture[type, tile.color()], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12 + 8) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY + 8, num10, 8), color, 0f, default(Vector2), 1f, effects, 0f);
										spriteBatch.Draw(tileAltTexture[type, tile.color()], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10 - 4, num9), color, 0f, default(Vector2), 1f, effects, 0f);
										spriteBatch.Draw(tileAltTexture[type, tile.color()], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + 12f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(138, 0, 4, 8), color, 0f, default(Vector2), 1f, effects, 0f);
									}
									else
									{
										spriteBatch.Draw(tileTexture[type], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12 + 8) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY + 8, num10, 8), color, 0f, default(Vector2), 1f, effects, 0f);
										spriteBatch.Draw(tileTexture[type], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10 - 4, num9), color, 0f, default(Vector2), 1f, effects, 0f);
										spriteBatch.Draw(tileTexture[type], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + 12f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(138, 0, 4, 8), color, 0f, default(Vector2), 1f, effects, 0f);
									}
								}
								else if (canDrawColorTile(j, i))
								{
									spriteBatch.Draw(tileAltTexture[type, tile.color()], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), color, 0f, default(Vector2), 1f, effects, 0f);
								}
								else
								{
									spriteBatch.Draw(tileTexture[type], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), color, 0f, default(Vector2), 1f, effects, 0f);
								}
							}
							else if (Lighting.lightMode < 2 && tileSolid[type] && type != 137 && type != 235 && type != 388 && !tile.halfBrick() && !tile.inActive())
							{
								if (color.R > num || (double)(int)color.G > (double)num * 1.1 || (double)(int)color.B > (double)num * 1.2)
								{
									Lighting.GetColor9Slice(j, i, ref slices);
									bool flag16 = tile.inActive();
									bool flag17 = tileShine2[type];
									Texture2D texture = (!canDrawColorTile(j, i)) ? tileTexture[type] : tileAltTexture[type, tile.color()];
									for (int num147 = 0; num147 < 9; num147++)
									{
										int num148 = 0;
										int num149 = 0;
										int width = 4;
										int height6 = 4;
										switch (num147)
										{
										case 1:
											width = 8;
											num148 = 4;
											break;
										case 2:
											num148 = 12;
											break;
										case 3:
											height6 = 8;
											num149 = 4;
											break;
										case 4:
											width = 8;
											height6 = 8;
											num148 = 4;
											num149 = 4;
											break;
										case 5:
											num148 = 12;
											num149 = 4;
											height6 = 8;
											break;
										case 6:
											num149 = 12;
											break;
										case 7:
											width = 8;
											height6 = 4;
											num148 = 4;
											num149 = 12;
											break;
										case 8:
											num148 = 12;
											num149 = 12;
											break;
										}
										Microsoft.Xna.Framework.Color color11 = color;
										Microsoft.Xna.Framework.Color color12 = slices[num147];
										color11.R = (byte)((color.R + color12.R) / 2);
										color11.G = (byte)((color.G + color12.G) / 2);
										color11.B = (byte)((color.B + color12.B) / 2);
										if (flag16)
										{
											color11 = tile.actColor(color11);
										}
										else if (flag17)
										{
											color11 = shine(color11, type);
										}
										spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + (float)num148, i * 16 - (int)screenPosition.Y + num12 + num149) + value, new Microsoft.Xna.Framework.Rectangle(num11 + num148 + num16, frameY + num149 + num15, width, height6), color11, 0f, default(Vector2), 1f, effects, 0f);
									}
								}
								else if (color.R > num2 || (double)(int)color.G > (double)num2 * 1.1 || (double)(int)color.B > (double)num2 * 1.2)
								{
									Lighting.GetColor4Slice(j, i, ref slices);
									bool flag18 = tile.inActive();
									bool flag19 = tileShine2[type];
									Texture2D texture = (!canDrawColorTile(j, i)) ? tileTexture[type] : tileAltTexture[type, tile.color()];
									for (int num150 = 0; num150 < 4; num150++)
									{
										int num151 = 0;
										int num152 = 0;
										switch (num150)
										{
										case 1:
											num151 = 8;
											break;
										case 2:
											num152 = 8;
											break;
										case 3:
											num151 = 8;
											num152 = 8;
											break;
										}
										Microsoft.Xna.Framework.Color color13 = color;
										Microsoft.Xna.Framework.Color color14 = slices[num150];
										color13.R = (byte)((color.R + color14.R) / 2);
										color13.G = (byte)((color.G + color14.G) / 2);
										color13.B = (byte)((color.B + color14.B) / 2);
										if (flag18)
										{
											color13 = tile.actColor(color13);
										}
										else if (flag19)
										{
											color13 = shine(color13, type);
										}
										spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + (float)num151, i * 16 - (int)screenPosition.Y + num12 + num152) + value, new Microsoft.Xna.Framework.Rectangle(num11 + num151 + num16, frameY + num152 + num15, 8, 8), color13, 0f, default(Vector2), 1f, effects, 0f);
									}
								}
								else
								{
									if (tile.inActive())
									{
										color = tile.actColor(color);
									}
									else if (tileShine2[type])
									{
										color = shine(color, type);
									}
									Texture2D texture = (!canDrawColorTile(j, i)) ? tileTexture[type] : tileAltTexture[type, tile.color()];
									spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11 + num16, frameY + num15, num10, num9), color, 0f, default(Vector2), 1f, effects, 0f);
								}
							}
							else
							{
								if (Lighting.lightMode < 2 && tileShine2[type])
								{
									if (type == 21)
									{
										if (num11 >= 36 && num11 < 178)
										{
											color = shine(color, type);
										}
									}
									else if (!tile.inActive())
									{
										color = shine(color, type);
									}
								}
								if (tile.inActive())
								{
									color = tile.actColor(color);
								}
								switch (type)
								{
								case 128:
								case 269:
								{
									int num264;
									for (num264 = num11; num264 >= 100; num264 -= 100)
									{
									}
									spriteBatch.Draw(tileTexture[type], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num264, frameY, num10, num9), color, 0f, default(Vector2), 1f, effects, 0f);
									break;
								}
								case 334:
								{
									int num265 = num11;
									int num266 = 0;
									while (num265 >= 5000)
									{
										num265 -= 5000;
										num266++;
									}
									if (num266 != 0)
									{
										num265 = (num266 - 1) * 18;
									}
									spriteBatch.Draw(tileTexture[type], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num265, frameY, num10, num9), color, 0f, default(Vector2), 1f, effects, 0f);
									break;
								}
								case 5:
								{
									int num257 = -1;
									int num258 = j;
									int num259 = i;
									if (num11 == 66 && frameY <= 45)
									{
										num258++;
									}
									if (num11 == 88 && frameY >= 66 && frameY <= 110)
									{
										num258--;
									}
									if (num11 == 22 && frameY >= 132)
									{
										num258--;
									}
									if (num11 == 44 && frameY >= 132)
									{
										num258++;
									}
									for (; Main.tile[num258, num259].active() && Main.tile[num258, num259].type == 5; num259++)
									{
									}
									num257 = GetTreeVariant(num258, num259);
									if (num257 == -1)
									{
										if (canDrawColorTile(j, i))
										{
											spriteBatch.Draw(tileAltTexture[type, tile.color()], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), color, 0f, default(Vector2), 1f, effects, 0f);
										}
										else
										{
											spriteBatch.Draw(tileTexture[type], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), color, 0f, default(Vector2), 1f, effects, 0f);
										}
									}
									else if (canDrawColorTree(j, i, num257))
									{
										spriteBatch.Draw(woodAltTexture[num257, tile.color()], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), color, 0f, default(Vector2), 1f, effects, 0f);
									}
									else
									{
										spriteBatch.Draw(woodTexture[num257], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), color, 0f, default(Vector2), 1f, effects, 0f);
									}
									break;
								}
								case 323:
								{
									int num260 = -1;
									int num261 = j;
									int num262;
									for (num262 = i; Main.tile[num261, num262].active() && Main.tile[num261, num262].type == 323; num262++)
									{
									}
									if (Main.tile[num261, num262].active() && Main.tile[num261, num262].type == 53)
									{
										num260 = 0;
									}
									if (Main.tile[num261, num262].active() && Main.tile[num261, num262].type == 234)
									{
										num260 = 1;
									}
									if (Main.tile[num261, num262].active() && Main.tile[num261, num262].type == 116)
									{
										num260 = 2;
									}
									if (Main.tile[num261, num262].active() && Main.tile[num261, num262].type == 112)
									{
										num260 = 3;
									}
									int y2 = 22 * num260;
									int num263 = frameY;
									if (canDrawColorTile(j, i))
									{
										spriteBatch.Draw(tileAltTexture[type, tile.color()], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + (float)num263, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11, y2, num10, num9), color, 0f, default(Vector2), 1f, effects, 0f);
									}
									else
									{
										spriteBatch.Draw(tileTexture[type], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + (float)num263, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11, y2, num10, num9), color, 0f, default(Vector2), 1f, effects, 0f);
									}
									break;
								}
								default:
									if (num14 == 8 && (!Main.tile[j, i + 1].active() || !tileSolid[Main.tile[j, i + 1].type] || Main.tile[j, i + 1].halfBrick()))
									{
										Texture2D texture = (!canDrawColorTile(j, i)) ? tileTexture[type] : tileAltTexture[type, tile.color()];
										if (type == 19)
										{
											spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12 + num14) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), color, 0f, default(Vector2), 1f, effects, 0f);
										}
										else
										{
											spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12 + num14) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9 - num14 - 4), color, 0f, default(Vector2), 1f, effects, 0f);
											spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12 + 12) + value, new Microsoft.Xna.Framework.Rectangle(144, 66, num10, 4), color, 0f, default(Vector2), 1f, effects, 0f);
										}
									}
									else
									{
										Texture2D texture = (!canDrawColorTile(j, i)) ? tileTexture[type] : tileAltTexture[type, tile.color()];
										spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12 + num14) + value, new Microsoft.Xna.Framework.Rectangle(num11 + num16, frameY + num15, num10, num9 - num14), color, 0f, default(Vector2), 1f, effects, 0f);
									}
									if (type == 27)
									{
										int num153 = 14;
										spriteBatch.Draw(FlameTexture[num153], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY + num15, num10, num9), new Microsoft.Xna.Framework.Color(255, 255, 255, 255), 0f, default(Vector2), 1f, effects, 0f);
									}
									if (type == 215 && frameY < 36)
									{
										int num154 = 15;
										Microsoft.Xna.Framework.Color color15 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0);
										if (num11 / 54 == 5)
										{
											color15 = new Microsoft.Xna.Framework.Color((float)DiscoR / 255f, (float)DiscoG / 255f, (float)DiscoB / 255f, 0f);
										}
										spriteBatch.Draw(FlameTexture[num154], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY + num15, num10, num9), color15, 0f, default(Vector2), 1f, effects, 0f);
									}
									if (type == 286)
									{
										spriteBatch.Draw(glowSnailTexture, new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11 + num16, frameY + num15, num10, num9), new Microsoft.Xna.Framework.Color(75, 100, 255, 0), 0f, default(Vector2), 1f, effects, 0f);
									}
									if (type == 270)
									{
										spriteBatch.Draw(fireflyJarTexture, new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11 + num16, frameY, num10, num9), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), 0f, default(Vector2), 1f, effects, 0f);
									}
									if (type == 271)
									{
										spriteBatch.Draw(lightningbugJarTexture, new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11 + num16, frameY, num10, num9), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), 0f, default(Vector2), 1f, effects, 0f);
									}
									if (type == 316 || type == 317 || type == 318)
									{
										int num155 = j - num11 / 18;
										int num156 = i - frameY / 18;
										int num157 = num155 / 2 * (num156 / 3);
										num157 %= cageFrames;
										spriteBatch.Draw(jellyfishBowlTexture[type - 316], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11 + num16, frameY + jellyfishCageFrame[type - 316, num157] * 36, num10, num9), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), 0f, default(Vector2), 1f, effects, 0f);
									}
									if (type == 149 && num11 < 54)
									{
										spriteBatch.Draw(xmasLightTexture, new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), 0f, default(Vector2), 1f, effects, 0f);
									}
									if (type == 300 || type == 302 || type == 303 || type == 306)
									{
										int num158 = 9;
										if (type == 302)
										{
											num158 = 10;
										}
										if (type == 303)
										{
											num158 = 11;
										}
										if (type == 306)
										{
											num158 = 12;
										}
										spriteBatch.Draw(FlameTexture[num158], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY + num15, num10, num9), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), 0f, default(Vector2), 1f, effects, 0f);
									}
									else if (tileFlame[type])
									{
										ulong seed = (ulong)((long)_tileFrameSeed ^ (((long)j << 32) | (uint)i));
										int num159 = type;
										int num160 = 0;
										switch (num159)
										{
										case 4:
											num160 = 0;
											break;
										case 33:
										case 174:
											num160 = 1;
											break;
										case 100:
										case 173:
											num160 = 2;
											break;
										case 34:
											num160 = 3;
											break;
										case 93:
											num160 = 4;
											break;
										case 49:
											num160 = 5;
											break;
										case 372:
											num160 = 16;
											break;
										case 98:
											num160 = 6;
											break;
										case 35:
											num160 = 7;
											break;
										case 42:
											num160 = 13;
											break;
										}
										switch (num160)
										{
										case 7:
										{
											for (int num164 = 0; num164 < 4; num164++)
											{
												float num165 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.15f;
												float num166 = (float)Utils.RandomInt(ref seed, -10, 10) * 0.15f;
												num165 = 0f;
												num166 = 0f;
												spriteBatch.Draw(FlameTexture[num160], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + num165, (float)(i * 16 - (int)screenPosition.Y + num12) + num166) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
											}
											break;
										}
										case 1:
											switch (Main.tile[j, i].frameY / 22)
											{
											case 5:
											case 6:
											case 7:
											case 10:
											{
												for (int num248 = 0; num248 < 7; num248++)
												{
													float num249 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.075f;
													float num250 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.075f;
													spriteBatch.Draw(FlameTexture[num160], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + num249, (float)(i * 16 - (int)screenPosition.Y + num12) + num250) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
												}
												break;
											}
											case 8:
											{
												for (int num254 = 0; num254 < 7; num254++)
												{
													float num255 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.3f;
													float num256 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.3f;
													spriteBatch.Draw(FlameTexture[num160], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + num255, (float)(i * 16 - (int)screenPosition.Y + num12) + num256) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
												}
												break;
											}
											case 12:
											{
												for (int num242 = 0; num242 < 7; num242++)
												{
													float num243 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.1f;
													float num244 = (float)Utils.RandomInt(ref seed, -10, 1) * 0.15f;
													spriteBatch.Draw(FlameTexture[num160], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + num243, (float)(i * 16 - (int)screenPosition.Y + num12) + num244) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
												}
												break;
											}
											case 14:
											{
												for (int num251 = 0; num251 < 8; num251++)
												{
													float num252 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.1f;
													float num253 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.1f;
													spriteBatch.Draw(FlameTexture[num160], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + num252, (float)(i * 16 - (int)screenPosition.Y + num12) + num253) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), new Microsoft.Xna.Framework.Color(75, 75, 75, 0), 0f, default(Vector2), 1f, effects, 0f);
												}
												break;
											}
											case 16:
											{
												for (int num245 = 0; num245 < 4; num245++)
												{
													float num246 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.15f;
													float num247 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.15f;
													spriteBatch.Draw(FlameTexture[num160], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + num246, (float)(i * 16 - (int)screenPosition.Y + num12) + num247) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), new Microsoft.Xna.Framework.Color(75, 75, 75, 0), 0f, default(Vector2), 1f, effects, 0f);
												}
												break;
											}
											case 27:
											case 28:
												spriteBatch.Draw(FlameTexture[num160], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), new Microsoft.Xna.Framework.Color(75, 75, 75, 0), 0f, default(Vector2), 1f, effects, 0f);
												break;
											default:
											{
												for (int num239 = 0; num239 < 7; num239++)
												{
													float num240 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.15f;
													float num241 = (float)Utils.RandomInt(ref seed, -10, 1) * 0.35f;
													spriteBatch.Draw(FlameTexture[num160], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + num240, (float)(i * 16 - (int)screenPosition.Y + num12) + num241) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), new Microsoft.Xna.Framework.Color(100, 100, 100, 0), 0f, default(Vector2), 1f, effects, 0f);
												}
												break;
											}
											}
											break;
										case 2:
											switch (Main.tile[j, i].frameY / 36)
											{
											case 3:
											{
												for (int num230 = 0; num230 < 3; num230++)
												{
													float num231 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.05f;
													float num232 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.15f;
													spriteBatch.Draw(FlameTexture[num160], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + num231, (float)(i * 16 - (int)screenPosition.Y + num12) + num232) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
												}
												break;
											}
											case 6:
											{
												for (int num236 = 0; num236 < 5; num236++)
												{
													float num237 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.15f;
													float num238 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.15f;
													spriteBatch.Draw(FlameTexture[num160], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + num237, (float)(i * 16 - (int)screenPosition.Y + num12) + num238) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), new Microsoft.Xna.Framework.Color(75, 75, 75, 0), 0f, default(Vector2), 1f, effects, 0f);
												}
												break;
											}
											case 9:
											{
												for (int num224 = 0; num224 < 7; num224++)
												{
													float num225 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.3f;
													float num226 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.3f;
													spriteBatch.Draw(FlameTexture[num160], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + num225, (float)(i * 16 - (int)screenPosition.Y + num12) + num226) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), new Microsoft.Xna.Framework.Color(100, 100, 100, 0), 0f, default(Vector2), 1f, effects, 0f);
												}
												break;
											}
											case 11:
											{
												for (int num233 = 0; num233 < 7; num233++)
												{
													float num234 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.1f;
													float num235 = (float)Utils.RandomInt(ref seed, -10, 1) * 0.15f;
													spriteBatch.Draw(FlameTexture[num160], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + num234, (float)(i * 16 - (int)screenPosition.Y + num12) + num235) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
												}
												break;
											}
											case 13:
											{
												for (int num227 = 0; num227 < 8; num227++)
												{
													float num228 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.1f;
													float num229 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.1f;
													spriteBatch.Draw(FlameTexture[num160], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + num228, (float)(i * 16 - (int)screenPosition.Y + num12) + num229) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), new Microsoft.Xna.Framework.Color(75, 75, 75, 0), 0f, default(Vector2), 1f, effects, 0f);
												}
												break;
											}
											case 28:
											case 29:
												spriteBatch.Draw(FlameTexture[num160], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), new Microsoft.Xna.Framework.Color(75, 75, 75, 0), 0f, default(Vector2), 1f, effects, 0f);
												break;
											default:
											{
												for (int num221 = 0; num221 < 7; num221++)
												{
													float num222 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.15f;
													float num223 = (float)Utils.RandomInt(ref seed, -10, 1) * 0.35f;
													spriteBatch.Draw(FlameTexture[num160], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + num222, (float)(i * 16 - (int)screenPosition.Y + num12) + num223) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), new Microsoft.Xna.Framework.Color(100, 100, 100, 0), 0f, default(Vector2), 1f, effects, 0f);
												}
												break;
											}
											}
											break;
										case 3:
											switch (Main.tile[j, i].frameY / 54)
											{
											case 8:
											{
												for (int num215 = 0; num215 < 7; num215++)
												{
													float num216 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.075f;
													float num217 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.075f;
													spriteBatch.Draw(FlameTexture[num160], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + num216, (float)(i * 16 - (int)screenPosition.Y + num12) + num217) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
												}
												break;
											}
											case 9:
											{
												for (int num203 = 0; num203 < 3; num203++)
												{
													float num204 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.05f;
													float num205 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.15f;
													spriteBatch.Draw(FlameTexture[num160], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + num204, (float)(i * 16 - (int)screenPosition.Y + num12) + num205) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
												}
												break;
											}
											case 11:
											{
												for (int num209 = 0; num209 < 7; num209++)
												{
													float num210 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.3f;
													float num211 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.3f;
													spriteBatch.Draw(FlameTexture[num160], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + num210, (float)(i * 16 - (int)screenPosition.Y + num12) + num211) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
												}
												break;
											}
											case 15:
											{
												for (int num218 = 0; num218 < 7; num218++)
												{
													float num219 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.1f;
													float num220 = (float)Utils.RandomInt(ref seed, -10, 1) * 0.15f;
													spriteBatch.Draw(FlameTexture[num160], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + num219, (float)(i * 16 - (int)screenPosition.Y + num12) + num220) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
												}
												break;
											}
											case 17:
											case 20:
											{
												for (int num212 = 0; num212 < 7; num212++)
												{
													float num213 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.075f;
													float num214 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.075f;
													spriteBatch.Draw(FlameTexture[num160], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + num213, (float)(i * 16 - (int)screenPosition.Y + num12) + num214) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
												}
												break;
											}
											case 18:
											{
												for (int num206 = 0; num206 < 8; num206++)
												{
													float num207 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.1f;
													float num208 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.1f;
													spriteBatch.Draw(FlameTexture[num160], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + num207, (float)(i * 16 - (int)screenPosition.Y + num12) + num208) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), new Microsoft.Xna.Framework.Color(75, 75, 75, 0), 0f, default(Vector2), 1f, effects, 0f);
												}
												break;
											}
											case 34:
											case 35:
												spriteBatch.Draw(FlameTexture[num160], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), new Microsoft.Xna.Framework.Color(75, 75, 75, 0), 0f, default(Vector2), 1f, effects, 0f);
												break;
											default:
											{
												for (int num200 = 0; num200 < 7; num200++)
												{
													float num201 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.15f;
													float num202 = (float)Utils.RandomInt(ref seed, -10, 1) * 0.35f;
													spriteBatch.Draw(FlameTexture[num160], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + num201, (float)(i * 16 - (int)screenPosition.Y + num12) + num202) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), new Microsoft.Xna.Framework.Color(100, 100, 100, 0), 0f, default(Vector2), 1f, effects, 0f);
												}
												break;
											}
											}
											break;
										case 4:
											switch (Main.tile[j, i].frameY / 54)
											{
											case 1:
											{
												for (int num194 = 0; num194 < 3; num194++)
												{
													float num195 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.15f;
													float num196 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.15f;
													spriteBatch.Draw(FlameTexture[num160], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + num195, (float)(i * 16 - (int)screenPosition.Y + num12) + num196) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
												}
												break;
											}
											case 2:
											case 4:
											{
												for (int num180 = 0; num180 < 7; num180++)
												{
													float num181 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.075f;
													float num182 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.075f;
													spriteBatch.Draw(FlameTexture[num160], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + num181, (float)(i * 16 - (int)screenPosition.Y + num12) + num182) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
												}
												break;
											}
											case 3:
											{
												for (int num188 = 0; num188 < 7; num188++)
												{
													float num189 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.2f;
													float num190 = (float)Utils.RandomInt(ref seed, -20, 1) * 0.35f;
													spriteBatch.Draw(FlameTexture[num160], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + num189, (float)(i * 16 - (int)screenPosition.Y + num12) + num190) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), new Microsoft.Xna.Framework.Color(100, 100, 100, 0), 0f, default(Vector2), 1f, effects, 0f);
												}
												break;
											}
											case 5:
											{
												for (int num197 = 0; num197 < 7; num197++)
												{
													float num198 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.3f;
													float num199 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.3f;
													spriteBatch.Draw(FlameTexture[num160], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + num198, (float)(i * 16 - (int)screenPosition.Y + num12) + num199) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
												}
												break;
											}
											case 9:
											{
												for (int num191 = 0; num191 < 7; num191++)
												{
													float num192 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.1f;
													float num193 = (float)Utils.RandomInt(ref seed, -10, 1) * 0.15f;
													spriteBatch.Draw(FlameTexture[num160], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + num192, (float)(i * 16 - (int)screenPosition.Y + num12) + num193) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
												}
												break;
											}
											case 13:
											{
												for (int num185 = 0; num185 < 8; num185++)
												{
													float num186 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.1f;
													float num187 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.1f;
													spriteBatch.Draw(FlameTexture[num160], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + num186, (float)(i * 16 - (int)screenPosition.Y + num12) + num187) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), new Microsoft.Xna.Framework.Color(75, 75, 75, 0), 0f, default(Vector2), 1f, effects, 0f);
												}
												break;
											}
											case 12:
											{
												float num183 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.01f;
												float num184 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.01f;
												spriteBatch.Draw(FlameTexture[num160], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + num183, (float)(i * 16 - (int)screenPosition.Y + num12) + num184) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), new Microsoft.Xna.Framework.Color(Utils.RandomInt(ref seed, 90, 111), Utils.RandomInt(ref seed, 90, 111), Utils.RandomInt(ref seed, 90, 111), 0), 0f, default(Vector2), 1f, effects, 0f);
												break;
											}
											case 28:
											case 29:
												spriteBatch.Draw(FlameTexture[num160], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), new Microsoft.Xna.Framework.Color(75, 75, 75, 0), 0f, default(Vector2), 1f, effects, 0f);
												break;
											default:
											{
												for (int num177 = 0; num177 < 7; num177++)
												{
													float num178 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.15f;
													float num179 = (float)Utils.RandomInt(ref seed, -10, 1) * 0.35f;
													spriteBatch.Draw(FlameTexture[num160], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + num178, (float)(i * 16 - (int)screenPosition.Y + num12) + num179) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), new Microsoft.Xna.Framework.Color(100, 100, 100, 0), 0f, default(Vector2), 1f, effects, 0f);
												}
												break;
											}
											}
											break;
										case 13:
										{
											int num167 = frameY / 36;
											switch (num167)
											{
											case 1:
											case 3:
											case 6:
											case 8:
											case 19:
											case 27:
											case 29:
											case 30:
											case 31:
											case 32:
											case 36:
											{
												for (int num174 = 0; num174 < 7; num174++)
												{
													float num175 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.15f;
													float num176 = (float)Utils.RandomInt(ref seed, -10, 1) * 0.35f;
													spriteBatch.Draw(FlameTexture[num160], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + num175, (float)(i * 16 - (int)screenPosition.Y + num12) + num176) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), new Microsoft.Xna.Framework.Color(100, 100, 100, 0), 0f, default(Vector2), 1f, effects, 0f);
												}
												break;
											}
											case 2:
											case 16:
											case 25:
											{
												for (int num171 = 0; num171 < 7; num171++)
												{
													float num172 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.15f;
													float num173 = (float)Utils.RandomInt(ref seed, -10, 1) * 0.1f;
													spriteBatch.Draw(FlameTexture[num160], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + num172, (float)(i * 16 - (int)screenPosition.Y + num12) + num173) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
												}
												break;
											}
											default:
												switch (num167)
												{
												case 29:
												{
													for (int num168 = 0; num168 < 7; num168++)
													{
														float num169 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.15f;
														float num170 = (float)Utils.RandomInt(ref seed, -10, 1) * 0.15f;
														spriteBatch.Draw(FlameTexture[num160], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + num169, (float)(i * 16 - (int)screenPosition.Y + num12) + num170) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), new Microsoft.Xna.Framework.Color(25, 25, 25, 0), 0f, default(Vector2), 1f, effects, 0f);
													}
													break;
												}
												case 34:
												case 35:
													spriteBatch.Draw(FlameTexture[num160], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), new Microsoft.Xna.Framework.Color(75, 75, 75, 0), 0f, default(Vector2), 1f, effects, 0f);
													break;
												}
												break;
											}
											break;
										}
										default:
										{
											for (int num161 = 0; num161 < 7; num161++)
											{
												Microsoft.Xna.Framework.Color color16 = new Microsoft.Xna.Framework.Color(100, 100, 100, 0);
												if (frameY / 22 == 14)
												{
													color16 = new Microsoft.Xna.Framework.Color((float)DiscoR / 255f, (float)DiscoG / 255f, (float)DiscoB / 255f, 0f);
												}
												float num162 = (float)Utils.RandomInt(ref seed, -10, 11) * 0.15f;
												float num163 = (float)Utils.RandomInt(ref seed, -10, 1) * 0.35f;
												spriteBatch.Draw(FlameTexture[num160], new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + num162, (float)(i * 16 - (int)screenPosition.Y + num12) + num163) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), color16, 0f, default(Vector2), 1f, effects, 0f);
											}
											break;
										}
										}
									}
									if (type == 144)
									{
										spriteBatch.Draw(timerTexture, new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), 0f, default(Vector2), 1f, effects, 0f);
									}
									if (type == 237)
									{
										spriteBatch.Draw(sunAltarTexture, new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num12) + value, new Microsoft.Xna.Framework.Rectangle(num11, frameY, num10, num9), new Microsoft.Xna.Framework.Color((int)mouseTextColor / 2, (int)mouseTextColor / 2, (int)mouseTextColor / 2, 0), 0f, default(Vector2), 1f, effects, 0f);
									}
									break;
								}
							}
						}
					}
					if (tileGlowMask[tile.type] != 0)
					{
						Texture2D texture = glowMaskTexture[tileGlowMask[tile.type]];
						double num267 = time * 0.08;
						Microsoft.Xna.Framework.Color color17 = Microsoft.Xna.Framework.Color.White;
						if (tile.type == 350)
						{
							color17 = new Microsoft.Xna.Framework.Color(new Vector4((float)((0.0 - Math.Cos(((int)(num267 / 6.283) % 3 == 1) ? num267 : 0.0)) * 0.2 + 0.2)));
						}
						if (tile.type == 381)
						{
							color17 = color5;
						}
						if (tile.type == 370)
						{
							color17 = color4;
						}
						if (tile.type == 390)
						{
							color17 = color4;
						}
						if (tile.type == 391)
						{
							color17 = new Microsoft.Xna.Framework.Color(250, 250, 250, 200);
						}
						if (tile.slope() == 0 && !tile.halfBrick())
						{
							spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y) + value, new Microsoft.Xna.Framework.Rectangle(num11 + num16, frameY + num15, num10, num9), color17, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
						}
						else if (tile.halfBrick())
						{
							spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f, i * 16 - (int)screenPosition.Y + 10) + value, new Microsoft.Xna.Framework.Rectangle(num11 + num16, frameY + num15 + 10, num10, 6), color17, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
						}
						else
						{
							byte b6 = tile.slope();
							for (int num268 = 0; num268 < 8; num268++)
							{
								int num269 = num268 << 1;
								Microsoft.Xna.Framework.Rectangle value7 = new Microsoft.Xna.Framework.Rectangle(num11 + num16, frameY + num15 + num268 * 2, num269, 2);
								int num270 = 0;
								switch (b6)
								{
								case 2:
									value7.X = 16 - num269;
									num270 = 16 - num269;
									break;
								case 3:
									value7.Width = 16 - num269;
									break;
								case 4:
									value7.Width = 14 - num269;
									value7.X = num269 + 2;
									num270 = num269 + 2;
									break;
								}
								spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + (float)num270, i * 16 - (int)screenPosition.Y + num268 * 2) + value, value7, color17, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
							}
						}
					}
					if (texture2D != null)
					{
						int num271 = 0;
						int num272 = 0;
						spriteBatch.Draw(texture2D, new Vector2((float)(j * 16 - (int)screenPosition.X) - ((float)num10 - 16f) / 2f + (float)num271, i * 16 - (int)screenPosition.Y + num12 + num272) + value, value3, color2, 0f, default(Vector2), 1f, effects, 0f);
					}
				}
			}
			if (solidOnly)
			{
				DrawTileCracks(1);
			}
			for (int num273 = array.Length - 1; num273 > num4; num273--)
			{
				int num274 = array[num273];
				int num275 = array2[num273];
				Tile tile6 = Main.tile[num274, num275];
				ushort type4 = tile6.type;
				short frameX = tile6.frameX;
				short frameY2 = tile6.frameY;
				if ((type4 == 128 || type4 == 269) && frameX >= 100)
				{
					int num276 = frameY2 / 18;
					int num277 = frameX;
					int num278 = 0;
					while (num277 >= 100)
					{
						num278++;
						num277 -= 100;
					}
					int num279 = -4;
					SpriteEffects effects2 = SpriteEffects.FlipHorizontally;
					if (num277 >= 36)
					{
						effects2 = SpriteEffects.None;
						num279 = -4;
					}
					switch (num276)
					{
					case 0:
						LoadArmorHead(num278);
						spriteBatch.Draw(armorHeadTexture[num278], new Vector2(num274 * 16 - (int)screenPosition.X + num279, num275 * 16 - (int)screenPosition.Y - 12) + value, new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 36), Lighting.GetColor(num274, num275), 0f, default(Vector2), 1f, effects2, 0f);
						break;
					case 1:
					{
						bool somethingSpecial = false;
						int num281 = Player.SetMatch(1, num278, type4 != 128, ref somethingSpecial);
						if (num281 != -1)
						{
							LoadArmorLegs(num281);
							spriteBatch.Draw(armorLegTexture[num281], new Vector2(num274 * 16 - (int)screenPosition.X + num279, num275 * 16 - (int)screenPosition.Y - 28) + value, new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 54), Lighting.GetColor(num274, num275), 0f, default(Vector2), 1f, effects2, 0f);
						}
						LoadArmorBody(num278);
						if (type4 == 269)
						{
							spriteBatch.Draw(femaleBodyTexture[num278], new Vector2(num274 * 16 - (int)screenPosition.X + num279, num275 * 16 - (int)screenPosition.Y - 28) + value, new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 54), Lighting.GetColor(num274, num275), 0f, default(Vector2), 1f, effects2, 0f);
						}
						else
						{
							spriteBatch.Draw(armorBodyTexture[num278], new Vector2(num274 * 16 - (int)screenPosition.X + num279, num275 * 16 - (int)screenPosition.Y - 28) + value, new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 54), Lighting.GetColor(num274, num275), 0f, default(Vector2), 1f, effects2, 0f);
						}
						break;
					}
					case 2:
					{
						int num280 = num278;
						switch (num280)
						{
						case 83:
							if (type4 == 128)
							{
								num280 = 117;
							}
							break;
						case 84:
							if (type4 == 128)
							{
								num280 = 120;
							}
							break;
						}
						LoadArmorLegs(num280);
						spriteBatch.Draw(armorLegTexture[num280], new Vector2(num274 * 16 - (int)screenPosition.X + num279, num275 * 16 - (int)screenPosition.Y - 44) + value, new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 54), Lighting.GetColor(num274, num275), 0f, default(Vector2), 1f, effects2, 0f);
						break;
					}
					}
				}
			}
			for (int num282 = 0; num282 < num3; num282++)
			{
				int num283 = array[num282];
				int num284 = array2[num282];
				Tile tile7 = Main.tile[num283, num284];
				ushort type5 = tile7.type;
				short frameX2 = tile7.frameX;
				short frameY3 = tile7.frameY;
				if (type5 == 237)
				{
					spriteBatch.Draw(sunOrbTexture, new Vector2((float)(num283 * 16 - (int)screenPosition.X) + (float)num10 / 2f, num284 * 16 - (int)screenPosition.Y - 36) + value, new Microsoft.Xna.Framework.Rectangle(0, 0, sunOrbTexture.Width, sunOrbTexture.Height), new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, 0), sunCircle, new Vector2(sunOrbTexture.Width / 2, sunOrbTexture.Height / 2), 1f, SpriteEffects.None, 0f);
				}
				if ((type5 == 128 || type5 == 269) && frameX2 >= 100)
				{
					int num285 = frameY3 / 18;
					int num286 = frameX2;
					int num287 = 0;
					while (num286 >= 100)
					{
						num287++;
						num286 -= 100;
					}
					int num288 = -4;
					SpriteEffects effects3 = SpriteEffects.FlipHorizontally;
					if (num286 >= 36)
					{
						effects3 = SpriteEffects.None;
						num288 = -4;
					}
					switch (num285)
					{
					case 0:
						LoadArmorHead(num287);
						spriteBatch.Draw(armorHeadTexture[num287], new Vector2(num283 * 16 - (int)screenPosition.X + num288, num284 * 16 - (int)screenPosition.Y - 12) + value, new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 36), Lighting.GetColor(num283, num284), 0f, default(Vector2), 1f, effects3, 0f);
						break;
					case 1:
					{
						bool somethingSpecial2 = false;
						int num290 = Player.SetMatch(1, num287, type5 == 128, ref somethingSpecial2);
						if (num290 != -1)
						{
							LoadArmorLegs(num290);
							spriteBatch.Draw(armorLegTexture[num290], new Vector2(num283 * 16 - (int)screenPosition.X + num288, num284 * 16 - (int)screenPosition.Y - 28) + value, new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 54), Lighting.GetColor(num283, num284), 0f, default(Vector2), 1f, effects3, 0f);
						}
						LoadArmorBody(num287);
						if (type5 == 269)
						{
							spriteBatch.Draw(femaleBodyTexture[num287], new Vector2(num283 * 16 - (int)screenPosition.X + num288, num284 * 16 - (int)screenPosition.Y - 28) + value, new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 54), Lighting.GetColor(num283, num284), 0f, default(Vector2), 1f, effects3, 0f);
						}
						else
						{
							spriteBatch.Draw(armorBodyTexture[num287], new Vector2(num283 * 16 - (int)screenPosition.X + num288, num284 * 16 - (int)screenPosition.Y - 28) + value, new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 54), Lighting.GetColor(num283, num284), 0f, default(Vector2), 1f, effects3, 0f);
						}
						break;
					}
					case 2:
					{
						int num289 = num287;
						switch (num289)
						{
						case 83:
							if (type5 == 128)
							{
								num289 = 117;
							}
							break;
						case 84:
							if (type5 == 128)
							{
								num289 = 120;
							}
							break;
						}
						LoadArmorLegs(num289);
						spriteBatch.Draw(armorLegTexture[num289], new Vector2(num283 * 16 - (int)screenPosition.X + num288, num284 * 16 - (int)screenPosition.Y - 44) + value, new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 54), Lighting.GetColor(num283, num284), 0f, default(Vector2), 1f, effects3, 0f);
						break;
					}
					}
				}
				if (type5 == 334 && frameX2 >= 5000)
				{
					int num321 = frameY3 / 18;
					int num291 = frameX2;
					int num292 = 0;
					int num293 = num291 % 5000;
					num293 -= 100;
					while (num291 >= 5000)
					{
						num292++;
						num291 -= 5000;
					}
					int frameX3 = Main.tile[num283 + 1, num284].frameX;
					frameX3 = ((frameX3 < 25000) ? (frameX3 - 10000) : (frameX3 - 25000));
					Item ıtem = new Item();
					ıtem.netDefaults(num293);
					ıtem.Prefix(frameX3);
					Texture2D texture2D2 = itemTexture[ıtem.type];
					Microsoft.Xna.Framework.Rectangle value8 = (itemAnimations[ıtem.type] == null) ? texture2D2.Frame() : itemAnimations[ıtem.type].GetFrame(texture2D2);
					int width2 = value8.Width;
					int height7 = value8.Height;
					float num294 = 1f;
					if (width2 > 40 || height7 > 40)
					{
						num294 = ((width2 <= height7) ? (40f / (float)height7) : (40f / (float)width2));
					}
					num294 *= ıtem.scale;
					SpriteEffects effects4 = SpriteEffects.None;
					if (num292 >= 3)
					{
						effects4 = SpriteEffects.FlipHorizontally;
					}
					Microsoft.Xna.Framework.Color color18 = Lighting.GetColor(num283, num284);
					spriteBatch.Draw(texture2D2, new Vector2(num283 * 16 - (int)screenPosition.X + 24, num284 * 16 - (int)screenPosition.Y + 8) + value, value8, Lighting.GetColor(num283, num284), 0f, new Vector2(width2 / 2, height7 / 2), num294, effects4, 0f);
					if (ıtem.color != default(Microsoft.Xna.Framework.Color))
					{
						spriteBatch.Draw(texture2D2, new Vector2(num283 * 16 - (int)screenPosition.X + 24, num284 * 16 - (int)screenPosition.Y + 8) + value, value8, ıtem.GetColor(color18), 0f, new Vector2(width2 / 2, height7 / 2), num294, effects4, 0f);
					}
				}
				if (type5 == 395)
				{
					TEItemFrame tEItemFrame = (TEItemFrame)TileEntity.ByPosition[new Point16(num283, num284)];
					Item ıtem2 = tEItemFrame.item;
					Texture2D texture2D3 = itemTexture[ıtem2.type];
					Microsoft.Xna.Framework.Rectangle value9 = (itemAnimations[ıtem2.type] == null) ? texture2D3.Frame() : itemAnimations[ıtem2.type].GetFrame(texture2D3);
					int width3 = value9.Width;
					int height8 = value9.Height;
					float num295 = 1f;
					if (width3 > 20 || height8 > 20)
					{
						num295 = ((width3 <= height8) ? (20f / (float)height8) : (20f / (float)width3));
					}
					num295 *= ıtem2.scale;
					SpriteEffects effects5 = SpriteEffects.None;
					Microsoft.Xna.Framework.Color color19 = Lighting.GetColor(num283, num284);
					Microsoft.Xna.Framework.Color currentColor = color19;
					float scale = 1f;
					ItemSlot.GetItemLight(ref currentColor, ref scale, ıtem2);
					num295 *= scale;
					spriteBatch.Draw(texture2D3, new Vector2(num283 * 16 - (int)screenPosition.X + 16, num284 * 16 - (int)screenPosition.Y + 16) + value, value9, currentColor, 0f, new Vector2(width3 / 2, height8 / 2), num295, effects5, 0f);
					if (ıtem2.color != default(Microsoft.Xna.Framework.Color))
					{
						spriteBatch.Draw(texture2D3, new Vector2(num283 * 16 - (int)screenPosition.X + 16, num284 * 16 - (int)screenPosition.Y + 16) + value, value9, ıtem2.GetColor(color19), 0f, new Vector2(width3 / 2, height8 / 2), num295, effects5, 0f);
					}
				}
				if (type5 == 412)
				{
					Texture2D texture2D4 = glowMaskTexture[202];
					int num296 = tileFrame[type5] / 60;
					int frameY4 = (num296 + 1) % 4;
					float num297 = (float)(tileFrame[type5] % 60) / 60f;
					Microsoft.Xna.Framework.Color value10 = new Microsoft.Xna.Framework.Color(255, 255, 255, 255);
					spriteBatch.Draw(texture2D4, new Vector2(num283 * 16 - (int)screenPosition.X, num284 * 16 - (int)screenPosition.Y + 2) + value, texture2D4.Frame(1, 4, 0, num296), value10 * (1f - num297), 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
					spriteBatch.Draw(texture2D4, new Vector2(num283 * 16 - (int)screenPosition.X, num284 * 16 - (int)screenPosition.Y + 2) + value, texture2D4.Frame(1, 4, 0, frameY4), value10 * num297, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
				}
				try
				{
					if (type5 == 5 && frameY3 >= 198 && frameX2 >= 22)
					{
						int num298 = 0;
						switch (frameX2)
						{
						case 22:
						{
							switch (frameY3)
							{
							case 220:
								num298 = 1;
								break;
							case 242:
								num298 = 2;
								break;
							}
							int num302 = 0;
							int num303 = 80;
							int num304 = 80;
							int num305 = 32;
							int num306 = 0;
							for (int num307 = num284; num307 < num284 + 100; num307++)
							{
								if (Main.tile[num283, num307].type == 2)
								{
									num302 = GetTreeStyle(num283);
									break;
								}
								if (Main.tile[num283, num307].type == 23)
								{
									num302 = 1;
									break;
								}
								if (Main.tile[num283, num307].type == 70)
								{
									num302 = 14;
									break;
								}
								if (Main.tile[num283, num307].type == 60)
								{
									num302 = 2;
									if (WorldGen.jungleBG == 1)
									{
										num302 = 11;
									}
									if ((double)num307 > worldSurface)
									{
										num302 = 13;
									}
									num303 = 114;
									num304 = 96;
									num305 = 48;
									break;
								}
								if (Main.tile[num283, num307].type == 147)
								{
									num302 = 4;
									if (WorldGen.snowBG == 0)
									{
										num302 = 12;
										if (num283 % 10 == 0)
										{
											num302 = 18;
										}
									}
									if (WorldGen.snowBG == 2 || WorldGen.snowBG == 3 || WorldGen.snowBG == 32 || WorldGen.snowBG == 4 || WorldGen.snowBG == 42)
									{
										num302 = ((WorldGen.snowBG % 2 != 0) ? ((num283 <= maxTilesX / 2) ? 17 : 16) : ((num283 >= maxTilesX / 2) ? 17 : 16));
									}
									break;
								}
								if (Main.tile[num283, num307].type == 199)
								{
									num302 = 5;
									break;
								}
								if (Main.tile[num283, num307].type == 109)
								{
									num302 = 3;
									num304 = 140;
									if (num283 % 3 == 1)
									{
										num298 += 3;
									}
									else if (num283 % 3 == 2)
									{
										num298 += 6;
									}
									break;
								}
							}
							if (num302 == 14)
							{
								float num308 = (float)rand.Next(28, 42) * 0.005f;
								num308 += (float)(270 - mouseTextColor) / 1000f;
								Lighting.AddLight(num283, num284, 0.1f, 0.2f + num308 / 2f, 0.7f + num308);
							}
							if (tile7.color() > 0)
							{
								checkTreeAlt[num302, tile7.color()] = true;
							}
							if (tile7.color() > 0 && treeAltTextureDrawn[num302, tile7.color()])
							{
								spriteBatch.Draw(treeTopAltTexture[num302, tile7.color()], new Vector2(num283 * 16 - (int)screenPosition.X - num305, num284 * 16 - (int)screenPosition.Y - num304 + 16 + num306) + value, new Microsoft.Xna.Framework.Rectangle(num298 * (num303 + 2), 0, num303, num304), Lighting.GetColor(num283, num284), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							}
							else
							{
								spriteBatch.Draw(treeTopTexture[num302], new Vector2(num283 * 16 - (int)screenPosition.X - num305, num284 * 16 - (int)screenPosition.Y - num304 + 16 + num306) + value, new Microsoft.Xna.Framework.Rectangle(num298 * (num303 + 2), 0, num303, num304), Lighting.GetColor(num283, num284), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							}
							break;
						}
						case 44:
						{
							switch (frameY3)
							{
							case 220:
								num298 = 1;
								break;
							case 242:
								num298 = 2;
								break;
							}
							int num309 = 0;
							for (int num310 = num284; num310 < num284 + 100; num310++)
							{
								if (Main.tile[num283 + 1, num310].type == 2)
								{
									num309 = GetTreeStyle(num283 + 1);
									break;
								}
								if (Main.tile[num283 + 1, num310].type == 23)
								{
									num309 = 1;
									break;
								}
								if (Main.tile[num283 + 1, num310].type == 70)
								{
									num309 = 14;
									break;
								}
								if (Main.tile[num283 + 1, num310].type == 60)
								{
									num309 = 2;
									if ((double)num310 > worldSurface)
									{
										num309 = 13;
									}
									break;
								}
								if (Main.tile[num283 + 1, num310].type == 147)
								{
									num309 = 4;
									if (WorldGen.snowBG == 0)
									{
										num309 = 12;
									}
									break;
								}
								if (Main.tile[num283 + 1, num310].type == 199)
								{
									num309 = 5;
									break;
								}
								if (Main.tile[num283 + 1, num310].type == 109)
								{
									num309 = 3;
									if (num283 % 3 == 1)
									{
										num298 += 3;
									}
									else if (num283 % 3 == 2)
									{
										num298 += 6;
									}
									break;
								}
							}
							if (num309 == 14)
							{
								float num311 = (float)rand.Next(28, 42) * 0.005f;
								num311 += (float)(270 - mouseTextColor) / 1000f;
								Lighting.AddLight(num283, num284, 0.1f, 0.2f + num311 / 2f, 0.7f + num311);
							}
							if (tile7.color() > 0)
							{
								checkTreeAlt[num309, tile7.color()] = true;
							}
							if (tile7.color() > 0 && treeAltTextureDrawn[num309, tile7.color()])
							{
								spriteBatch.Draw(treeBranchAltTexture[num309, tile7.color()], new Vector2(num283 * 16 - (int)screenPosition.X - 24, num284 * 16 - (int)screenPosition.Y - 12) + value, new Microsoft.Xna.Framework.Rectangle(0, num298 * 42, 40, 40), Lighting.GetColor(num283, num284), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							}
							else
							{
								spriteBatch.Draw(treeBranchTexture[num309], new Vector2(num283 * 16 - (int)screenPosition.X - 24, num284 * 16 - (int)screenPosition.Y - 12) + value, new Microsoft.Xna.Framework.Rectangle(0, num298 * 42, 40, 40), Lighting.GetColor(num283, num284), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							}
							break;
						}
						case 66:
						{
							switch (frameY3)
							{
							case 220:
								num298 = 1;
								break;
							case 242:
								num298 = 2;
								break;
							}
							int num299 = 0;
							for (int num300 = num284; num300 < num284 + 100; num300++)
							{
								if (Main.tile[num283 - 1, num300].type == 2)
								{
									num299 = GetTreeStyle(num283 - 1);
									break;
								}
								if (Main.tile[num283 - 1, num300].type == 23)
								{
									num299 = 1;
									break;
								}
								if (Main.tile[num283 - 1, num300].type == 70)
								{
									num299 = 14;
									break;
								}
								if (Main.tile[num283 - 1, num300].type == 60)
								{
									num299 = 2;
									if ((double)num300 > worldSurface)
									{
										num299 = 13;
									}
									break;
								}
								if (Main.tile[num283 - 1, num300].type == 147)
								{
									num299 = 4;
									if (WorldGen.snowBG == 0)
									{
										num299 = 12;
									}
									break;
								}
								if (Main.tile[num283 - 1, num300].type == 199)
								{
									num299 = 5;
									break;
								}
								if (Main.tile[num283 - 1, num300].type == 109)
								{
									num299 = 3;
									if (num283 % 3 == 1)
									{
										num298 += 3;
									}
									else if (num283 % 3 == 2)
									{
										num298 += 6;
									}
									break;
								}
							}
							if (num299 == 14)
							{
								float num301 = (float)rand.Next(28, 42) * 0.005f;
								num301 += (float)(270 - mouseTextColor) / 1000f;
								Lighting.AddLight(num283, num284, 0.1f, 0.2f + num301 / 2f, 0.7f + num301);
							}
							if (tile7.color() > 0)
							{
								checkTreeAlt[num299, tile7.color()] = true;
							}
							if (tile7.color() > 0 && treeAltTextureDrawn[num299, tile7.color()])
							{
								spriteBatch.Draw(treeBranchAltTexture[num299, tile7.color()], new Vector2(num283 * 16 - (int)screenPosition.X, num284 * 16 - (int)screenPosition.Y - 12) + value, new Microsoft.Xna.Framework.Rectangle(42, num298 * 42, 40, 40), Lighting.GetColor(num283, num284), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							}
							else
							{
								spriteBatch.Draw(treeBranchTexture[num299], new Vector2(num283 * 16 - (int)screenPosition.X, num284 * 16 - (int)screenPosition.Y - 12) + value, new Microsoft.Xna.Framework.Rectangle(42, num298 * 42, 40, 40), Lighting.GetColor(num283, num284), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							}
							break;
						}
						}
					}
					if (type5 == 323 && frameX2 >= 88 && frameX2 <= 132)
					{
						int num312 = 0;
						switch (frameX2)
						{
						case 110:
							num312 = 1;
							break;
						case 132:
							num312 = 2;
							break;
						}
						int num313 = 15;
						int num314 = 0;
						int num315 = 80;
						int num316 = 80;
						int num317 = 32;
						int num318 = 0;
						for (int num319 = num284; num319 < num284 + 100; num319++)
						{
							if (Main.tile[num283, num319].type == 53)
							{
								num314 = 0;
								break;
							}
							if (Main.tile[num283, num319].type == 234)
							{
								num314 = 1;
								break;
							}
							if (Main.tile[num283, num319].type == 116)
							{
								num314 = 2;
								break;
							}
							if (Main.tile[num283, num319].type == 112)
							{
								num314 = 3;
								break;
							}
						}
						int frameY5 = Main.tile[num283, num284].frameY;
						int y3 = num314 * 82;
						if (tile7.color() > 0)
						{
							checkTreeAlt[num313, tile7.color()] = true;
						}
						if (tile7.color() > 0 && treeAltTextureDrawn[num313, tile7.color()])
						{
							spriteBatch.Draw(treeTopAltTexture[num313, tile7.color()], new Vector2(num283 * 16 - (int)screenPosition.X - num317 + frameY5, num284 * 16 - (int)screenPosition.Y - num316 + 16 + num318) + value, new Microsoft.Xna.Framework.Rectangle(num312 * (num315 + 2), y3, num315, num316), Lighting.GetColor(num283, num284), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						}
						else
						{
							spriteBatch.Draw(treeTopTexture[num313], new Vector2(num283 * 16 - (int)screenPosition.X - num317 + frameY5, num284 * 16 - (int)screenPosition.Y - num316 + 16 + num318) + value, new Microsoft.Xna.Framework.Rectangle(num312 * (num315 + 2), y3, num315, num316), Lighting.GetColor(num283, num284), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						}
					}
				}
				catch
				{
				}
			}
			if (TileObject.objectPreview.Active && player[myPlayer].showItemIcon && placementPreview && !CaptureManager.Instance.Active)
			{
				LoadTiles(TileObject.objectPreview.Type);
				TileObject.DrawPreview(spriteBatch, TileObject.objectPreview, screenPosition - value);
			}
			if (solidOnly)
			{
				TimeLogger.DrawTime(0, stopwatch.Elapsed.TotalMilliseconds);
			}
			else
			{
				TimeLogger.DrawTime(1, stopwatch.Elapsed.TotalMilliseconds);
			}
		}

		protected void DrawGoreBehind()
		{
			for (int i = 0; i < 500; i++)
			{
				if (gore[i].active && gore[i].type > 0 && gore[i].type >= 706 && gore[i].type <= 717 && (gore[i].frame < 7 || gore[i].frame > 9))
				{
					LoadGore(gore[i].type);
					if (gore[i].numFrames > 1)
					{
						int num = goreTexture[gore[i].type].Height / (int)gore[i].numFrames;
						Microsoft.Xna.Framework.Color alpha = gore[i].GetAlpha(Lighting.GetColor((int)((double)gore[i].position.X + (double)goreTexture[gore[i].type].Width * 0.5) / 16, (int)(((double)gore[i].position.Y + (double)num * 0.5) / 16.0)));
						spriteBatch.Draw(goreTexture[gore[i].type], new Vector2(gore[i].position.X - screenPosition.X + (float)(goreTexture[gore[i].type].Width / 2), gore[i].position.Y - screenPosition.Y + (float)(num / 2) - 2f), new Microsoft.Xna.Framework.Rectangle(0, num * gore[i].frame, goreTexture[gore[i].type].Width, num), alpha, gore[i].rotation, new Vector2(goreTexture[gore[i].type].Width / 2, num / 2), gore[i].scale, SpriteEffects.None, 0f);
					}
					else
					{
						Microsoft.Xna.Framework.Color alpha2 = gore[i].GetAlpha(Lighting.GetColor((int)((double)gore[i].position.X + (double)goreTexture[gore[i].type].Width * 0.5) / 16, (int)(((double)gore[i].position.Y + (double)goreTexture[gore[i].type].Height * 0.5) / 16.0)));
						spriteBatch.Draw(goreTexture[gore[i].type], new Vector2(gore[i].position.X - screenPosition.X + (float)(goreTexture[gore[i].type].Width / 2), gore[i].position.Y - screenPosition.Y + (float)(goreTexture[gore[i].type].Height / 2)), new Microsoft.Xna.Framework.Rectangle(0, 0, goreTexture[gore[i].type].Width, goreTexture[gore[i].type].Height), alpha2, gore[i].rotation, new Vector2(goreTexture[gore[i].type].Width / 2, goreTexture[gore[i].type].Height / 2), gore[i].scale, SpriteEffects.None, 0f);
					}
				}
			}
		}

		protected void DrawGore()
		{
			drawBackGore = false;
			for (int i = 0; i < 500; i++)
			{
				if (!gore[i].active || gore[i].type <= 0)
				{
					continue;
				}
				if (gore[i].type >= 706 && gore[i].type <= 717 && (gore[i].frame < 7 || gore[i].frame > 9))
				{
					drawBackGore = true;
					continue;
				}
				LoadGore(gore[i].type);
				if (gore[i].numFrames > 1)
				{
					int num = goreTexture[gore[i].type].Height / (int)gore[i].numFrames;
					Microsoft.Xna.Framework.Color alpha = gore[i].GetAlpha(Lighting.GetColor((int)((double)gore[i].position.X + (double)goreTexture[gore[i].type].Width * 0.5) / 16, (int)(((double)gore[i].position.Y + (double)num * 0.5) / 16.0)));
					spriteBatch.Draw(goreTexture[gore[i].type], new Vector2(gore[i].position.X - screenPosition.X + (float)(goreTexture[gore[i].type].Width / 2), gore[i].position.Y - screenPosition.Y + (float)(num / 2) - 2f), new Microsoft.Xna.Framework.Rectangle(0, num * gore[i].frame, goreTexture[gore[i].type].Width, num), alpha, gore[i].rotation, new Vector2(goreTexture[gore[i].type].Width / 2, num / 2), gore[i].scale, SpriteEffects.None, 0f);
				}
				else
				{
					Microsoft.Xna.Framework.Color alpha2 = gore[i].GetAlpha(Lighting.GetColor((int)((double)gore[i].position.X + (double)goreTexture[gore[i].type].Width * 0.5) / 16, (int)(((double)gore[i].position.Y + (double)goreTexture[gore[i].type].Height * 0.5) / 16.0)));
					spriteBatch.Draw(goreTexture[gore[i].type], new Vector2(gore[i].position.X - screenPosition.X + (float)(goreTexture[gore[i].type].Width / 2), gore[i].position.Y - screenPosition.Y + (float)(goreTexture[gore[i].type].Height / 2)), new Microsoft.Xna.Framework.Rectangle(0, 0, goreTexture[gore[i].type].Width, goreTexture[gore[i].type].Height), alpha2, gore[i].rotation, new Vector2(goreTexture[gore[i].type].Width / 2, goreTexture[gore[i].type].Height / 2), gore[i].scale, SpriteEffects.None, 0f);
				}
			}
			TimeLogger.DetailedDrawTime(24);
		}

		protected void DrawHealthBar(float X, float Y, int Health, int MaxHealth, float alpha, float scale = 1f)
		{
			if (Health <= 0)
			{
				return;
			}
			float num = (float)Health / (float)MaxHealth;
			if (num > 1f)
			{
				num = 1f;
			}
			int num2 = (int)(36f * num);
			float num3 = X - 18f * scale;
			float num4 = Y;
			if (player[myPlayer].gravDir == -1f)
			{
				num4 -= screenPosition.Y;
				num4 = screenPosition.Y + (float)screenHeight - num4;
			}
			float num5 = 0f;
			float num6 = 0f;
			float num7 = 0f;
			float num8 = 255f;
			num -= 0.1f;
			if ((double)num > 0.5)
			{
				num6 = 255f;
				num5 = 255f * (1f - num) * 2f;
			}
			else
			{
				num6 = 255f * num * 2f;
				num5 = 255f;
			}
			float num9 = 0.95f;
			num5 = num5 * alpha * num9;
			num6 = num6 * alpha * num9;
			num8 = num8 * alpha * num9;
			if (num5 < 0f)
			{
				num5 = 0f;
			}
			if (num5 > 255f)
			{
				num5 = 255f;
			}
			if (num6 < 0f)
			{
				num6 = 0f;
			}
			if (num6 > 255f)
			{
				num6 = 255f;
			}
			if (num8 < 0f)
			{
				num8 = 0f;
			}
			if (num8 > 255f)
			{
				num8 = 255f;
			}
			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color((byte)num5, (byte)num6, (byte)num7, (byte)num8);
			if (num2 < 3)
			{
				num2 = 3;
			}
			if (num2 < 34)
			{
				if (num2 < 36)
				{
					spriteBatch.Draw(hbTexture2, new Vector2(num3 - screenPosition.X + (float)num2 * scale, num4 - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(2, 0, 2, hbTexture2.Height), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
				}
				if (num2 < 34)
				{
					spriteBatch.Draw(hbTexture2, new Vector2(num3 - screenPosition.X + (float)(num2 + 2) * scale, num4 - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(num2 + 2, 0, 36 - num2 - 2, hbTexture2.Height), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
				}
				if (num2 > 2)
				{
					spriteBatch.Draw(hbTexture1, new Vector2(num3 - screenPosition.X, num4 - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, num2 - 2, hbTexture1.Height), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
				}
				spriteBatch.Draw(hbTexture1, new Vector2(num3 - screenPosition.X + (float)(num2 - 2) * scale, num4 - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(32, 0, 2, hbTexture1.Height), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
			}
			else
			{
				if (num2 < 36)
				{
					spriteBatch.Draw(hbTexture2, new Vector2(num3 - screenPosition.X + (float)num2 * scale, num4 - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(num2, 0, 36 - num2, hbTexture2.Height), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
				}
				spriteBatch.Draw(hbTexture1, new Vector2(num3 - screenPosition.X, num4 - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, num2, hbTexture1.Height), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
			}
		}

		public static float NPCAddHeight(int i)
		{
			float num = 0f;
			if (npc[i].type == 125)
			{
				num = 30f;
			}
			else if (npc[i].type == 54)
			{
				num = 2f;
			}
			else if (npc[i].type == 205)
			{
				num = 8f;
			}
			else if (npc[i].type == 182)
			{
				num = 24f;
			}
			else if (npc[i].type == 178)
			{
				num = 2f;
			}
			else if (npc[i].type == 126)
			{
				num = 30f;
			}
			else if (npc[i].type == 6 || npc[i].type == 173)
			{
				num = 26f;
			}
			else if (npc[i].type == 94)
			{
				num = 14f;
			}
			else if (npc[i].type == 7 || npc[i].type == 8 || npc[i].type == 9)
			{
				num = 13f;
			}
			else if (npc[i].type == 98 || npc[i].type == 99 || npc[i].type == 100)
			{
				num = 13f;
			}
			else if (npc[i].type == 95 || npc[i].type == 96 || npc[i].type == 97)
			{
				num = 13f;
			}
			else if (npc[i].type == 10 || npc[i].type == 11 || npc[i].type == 12)
			{
				num = 8f;
			}
			else if (npc[i].type == 13 || npc[i].type == 14 || npc[i].type == 15)
			{
				num = 26f;
			}
			else if (npc[i].type == 175)
			{
				num = 4f;
			}
			else if (npc[i].type == 520)
			{
				num = 2f;
			}
			else if (npc[i].type >= 412 && npc[i].type <= 414)
			{
				num = 18f;
			}
			else if (npc[i].type == 48)
			{
				num = 32f;
			}
			else if (npc[i].type == 49 || npc[i].type == 51)
			{
				num = 4f;
			}
			else if (npc[i].type == 60)
			{
				num = 10f;
			}
			else if (npc[i].type == 62 || npc[i].type == 66 || npc[i].type == 156)
			{
				num = 14f;
			}
			else if (npc[i].type == 63 || npc[i].type == 64 || npc[i].type == 103)
			{
				num = 4f;
			}
			else if (npc[i].type == 65)
			{
				num = 14f;
			}
			else if (npc[i].type == 69)
			{
				num = 4f;
			}
			else if (npc[i].type == 70)
			{
				num = -4f;
			}
			else if (npc[i].type == 72)
			{
				num = -2f;
			}
			else if (npc[i].type == 83 || npc[i].type == 84)
			{
				num = 20f;
			}
			else if (npc[i].type == 150 || npc[i].type == 151 || npc[i].type == 158)
			{
				num = 10f;
			}
			else if (npc[i].type == 152)
			{
				num = 6f;
			}
			else if (npc[i].type == 153 || npc[i].type == 154)
			{
				num = 4f;
			}
			else if (npc[i].type == 165 || npc[i].type == 237 || npc[i].type == 238 || npc[i].type == 240 || npc[i].type == 531)
			{
				num = 10f;
			}
			else if (npc[i].type == 39 || npc[i].type == 40 || npc[i].type == 41)
			{
				num = 26f;
			}
			else if (npc[i].type >= 87 && npc[i].type <= 92)
			{
				num = 56f;
			}
			else if (npc[i].type >= 134 && npc[i].type <= 136)
			{
				num = 30f;
			}
			else if (npc[i].type == 169)
			{
				num = 8f;
			}
			else if (npc[i].type == 174)
			{
				num = 6f;
			}
			else if (npc[i].type == 369)
			{
				num = 2f;
			}
			else if (npc[i].type == 376)
			{
				num = 6f;
			}
			if (npc[i].townNPC && npc[i].ai[0] == 5f)
			{
				num -= 4f;
			}
			return num * npc[i].scale;
		}

		protected void DrawProjectiles()
		{
			spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, Rasterizer, null, Transform);
			int num = 0;
			int num2 = 0;
			if (ignoreErrors)
			{
				for (int i = 0; i < 1000; i++)
				{
					if (projectile[i].active && projectile[i].type > 0 && !projectile[i].hide)
					{
						num++;
						try
						{
							int num3 = 0;
							if (projHook[projectile[i].type] && projectile[i].owner != 16)
							{
								num3 = player[projectile[i].owner].cGrapple;
							}
							if (projPet[projectile[i].type] && !projectile[i].minion && projectile[i].owner != 16 && projectile[i].damage == 0 && !ProjectileID.Sets.LightPet[projectile[i].type])
							{
								num3 = player[projectile[i].owner].cPet;
							}
							if (!projectile[i].minion && projectile[i].owner != 16 && projectile[i].damage == 0 && ProjectileID.Sets.LightPet[projectile[i].type])
							{
								num3 = player[projectile[i].owner].cLight;
							}
							if (projectile[i].type == 623 && projectile[i].owner != 16)
							{
								num3 = player[projectile[i].owner].cPet;
							}
							if (num3 != 0)
							{
								if (num2 == 0)
								{
									spriteBatch.End();
									spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, Rasterizer, null, Transform);
								}
								GameShaders.Armor.ApplySecondary(num3, player[projectile[i].owner]);
							}
							else if (num2 != 0)
							{
								spriteBatch.End();
								spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, Rasterizer, null, Transform);
							}
							num2 = num3;
							DrawProj(i);
						}
						catch (Exception e)
						{
							TimeLogger.DrawException(e);
							projectile[i].active = false;
						}
					}
				}
			}
			else
			{
				for (int j = 0; j < 1000; j++)
				{
					if (!projectile[j].active || projectile[j].type <= 0 || projectile[j].hide)
					{
						continue;
					}
					int num4 = 0;
					if (projHook[projectile[j].type] && projectile[j].owner != 16)
					{
						num4 = player[projectile[j].owner].cGrapple;
					}
					if (projPet[projectile[j].type] && !projectile[j].minion && projectile[j].owner != 16 && projectile[j].damage == 0 && !ProjectileID.Sets.LightPet[projectile[j].type])
					{
						num4 = player[projectile[j].owner].cPet;
					}
					if (!projectile[j].minion && projectile[j].owner != 16 && projectile[j].damage == 0 && ProjectileID.Sets.LightPet[projectile[j].type])
					{
						num4 = player[projectile[j].owner].cLight;
					}
					if (projectile[j].type == 623 && projectile[j].owner != 16)
					{
						num4 = player[projectile[j].owner].cPet;
					}
					if (num4 != 0)
					{
						if (num2 == 0)
						{
							spriteBatch.End();
							spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, Rasterizer, null, Transform);
						}
						GameShaders.Armor.ApplySecondary(num4, player[projectile[j].owner]);
					}
					else if (num2 != 0)
					{
						spriteBatch.End();
						spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, Rasterizer, null, Transform);
					}
					num2 = num4;
					DrawProj(j);
				}
			}
			spriteBatch.End();
			TimeLogger.DetailedDrawTime(20);
		}

		protected void DrawPlayers()
		{
			spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, Rasterizer, null, Transform);
			Vector2 position = default(Vector2);
			for (int i = 0; i < 16; i++)
			{
				Player player = Main.player[i];
				if (!player.active || player.outOfRange)
				{
					continue;
				}
				if (gamePaused)
				{
					player.PlayerFrame();
				}
				if (player.ghost)
				{
					for (int j = 0; j < 3; j++)
					{
						DrawGhost(player, player.shadowPos[j], 0.5f + 0.2f * (float)j);
					}
					DrawGhost(player, player.position);
					continue;
				}
				if (player.inventory[player.selectedItem].flame || player.head == 137 || player.wings == 22)
				{
					player.itemFlameCount--;
					if (player.itemFlameCount <= 0)
					{
						player.itemFlameCount = 5;
						for (int k = 0; k < 7; k++)
						{
							player.itemFlamePos[k].X = (float)rand.Next(-10, 11) * 0.15f;
							player.itemFlamePos[k].Y = (float)rand.Next(-10, 1) * 0.35f;
						}
					}
				}
				bool flag = false;
				bool flag2 = false;
				bool flag3 = false;
				bool flag4 = false;
				if (player.head == 111 && player.body == 73 && player.legs == 62)
				{
					flag2 = true;
					flag3 = true;
				}
				if (player.head == 134 && player.body == 95 && player.legs == 79)
				{
					flag2 = true;
					flag3 = true;
				}
				if (player.head == 107 && player.body == 69 && player.legs == 58)
				{
					flag2 = true;
					flag = true;
				}
				if (player.head == 108 && player.body == 70 && player.legs == 59)
				{
					flag2 = true;
					flag = true;
				}
				if (player.head == 109 && player.body == 71 && player.legs == 60)
				{
					flag2 = true;
					flag = true;
				}
				if (player.head == 110 && player.body == 72 && player.legs == 61)
				{
					flag2 = true;
					flag = true;
				}
				if (player.head == 193 && player.body == 194 && player.legs == 134)
				{
					flag2 = true;
					flag4 = true;
					flag3 = true;
				}
				if (player.mount.Active && player.mount.Type == 3 && player.velocity.Y != 0f && !player.SlimeDontHyperJump)
				{
					flag = true;
				}
				if (player.mount.Active && player.mount.Type == 10 && Math.Abs(player.velocity.X) > player.mount.DashSpeed - player.mount.RunSpeed / 2f)
				{
					flag = true;
				}
				if (player.body == 67 && player.legs == 56 && player.head >= 103 && player.head <= 105)
				{
					flag = true;
				}
				if ((player.head == 78 || player.head == 79 || player.head == 80) && player.body == 51 && player.legs == 47)
				{
					flag2 = true;
				}
				if (player.head == 171 && player.body == 177 && player.legs == 112)
				{
					flag = true;
					flag3 = true;
				}
				if (player.head == 169 && player.body == 175 && player.legs == 110)
				{
					flag = true;
				}
				if (player.head == 170 && player.body == 176 && player.legs == 111)
				{
					flag4 = true;
					flag3 = true;
				}
				if (player.eocDash > 0)
				{
					int num = player.eocDash / 4;
					if (num > 3)
					{
						num = 3;
					}
					for (int l = 0; l < num; l++)
					{
						DrawPlayer(player, player.shadowPos[l], player.shadowRotation[l], player.shadowOrigin[l], 0.5f + 0.2f * (float)l);
					}
				}
				else if (player.dashDelay < 0)
				{
					flag = true;
				}
				if (player.head == 5 && player.body == 5 && player.legs == 5)
				{
					flag = true;
				}
				if (player.head == 74 && player.body == 48 && player.legs == 44)
				{
					flag = true;
				}
				if (player.head == 76 && player.body == 49 && player.legs == 45)
				{
					flag = true;
				}
				if (player.head == 7 && player.body == 7 && player.legs == 7)
				{
					flag = true;
				}
				if (player.head == 22 && player.body == 14 && player.legs == 14)
				{
					flag = true;
				}
				if (player.dye[0].dye == 30 && player.dye[1].dye == 30 && player.dye[2].dye == 30 && player.head == 4 && player.body == 27 && player.legs == 26)
				{
					flag = true;
					flag3 = true;
				}
				if (player.head == 189 && player.body == 190 && player.legs == 130)
				{
					flag3 = true;
				}
				if (player.body == 17 && player.legs == 16 && (player.head == 29 || player.head == 30 || player.head == 31))
				{
					flag = true;
				}
				if (player.body == 19 && player.legs == 18 && (player.head == 35 || player.head == 36 || player.head == 37))
				{
					flag3 = true;
				}
				if (player.body == 24 && player.legs == 23 && (player.head == 41 || player.head == 42 || player.head == 43))
				{
					flag3 = true;
					flag = true;
				}
				if (player.head == 157 && player.legs == 98 && player.body != 105)
				{
					int body = player.body;
					int num7 = 106;
				}
				if (player.body == 36 && player.head == 56)
				{
					flag3 = true;
				}
				if (player.stoned || player.stealth != 1f)
				{
					flag3 = false;
					flag = false;
					flag2 = false;
				}
				if (player.invis)
				{
					flag3 = false;
					flag = false;
					flag2 = false;
					position = player.position;
					if (player.aggro <= -750)
					{
						DrawPlayer(player, position, player.fullRotation, player.fullRotationOrigin, 1f);
					}
					else
					{
						player.invis = false;
						DrawPlayer(player, position, player.fullRotation, player.fullRotationOrigin);
						player.invis = true;
					}
				}
				if (flag3)
				{
					Vector2 position2 = player.position;
					if (!gamePaused)
					{
						player.ghostFade += player.ghostDir * 0.075f;
					}
					if ((double)player.ghostFade < 0.1)
					{
						player.ghostDir = 1f;
						player.ghostFade = 0.1f;
					}
					else if ((double)player.ghostFade > 0.9)
					{
						player.ghostDir = -1f;
						player.ghostFade = 0.9f;
					}
					float num2 = player.ghostFade * 5f;
					for (int m = 0; m < 4; m++)
					{
						float num3;
						float num4;
						switch (m)
						{
						default:
							num3 = num2;
							num4 = 0f;
							break;
						case 1:
							num3 = 0f - num2;
							num4 = 0f;
							break;
						case 2:
							num3 = 0f;
							num4 = num2;
							break;
						case 3:
							num3 = 0f;
							num4 = 0f - num2;
							break;
						}
						position = new Vector2(player.position.X + num3, player.position.Y + player.gfxOffY + num4);
						DrawPlayer(player, position, player.fullRotation, player.fullRotationOrigin, player.ghostFade);
					}
				}
				if (flag)
				{
					for (int n = 0; n < 3; n++)
					{
						DrawPlayer(player, player.shadowPos[n], player.shadowRotation[n], player.shadowOrigin[n], 0.5f + 0.2f * (float)n);
					}
				}
				if (flag4)
				{
					for (int num5 = 0; num5 < 3; num5++)
					{
						DrawPlayer(player, Vector2.Lerp(player.shadowPos[num5], player.position + new Vector2(0f, player.gfxOffY), 0.5f), player.shadowRotation[num5], player.shadowOrigin[num5], MathHelper.Lerp(1f, 0.5f + 0.2f * (float)num5, 0.5f));
					}
				}
				if (flag2)
				{
					for (int num6 = 0; num6 < 4; num6++)
					{
						position.X = player.position.X + (float)rand.Next(-20, 21) * 0.1f;
						position.Y = player.position.Y + (float)rand.Next(-20, 21) * 0.1f + player.gfxOffY;
						DrawPlayer(player, position, player.fullRotation, player.fullRotationOrigin, 0.9f);
					}
				}
				if (player.shadowDodge)
				{
					player.shadowDodgeCount += 1f;
					if (player.shadowDodgeCount > 30f)
					{
						player.shadowDodgeCount = 30f;
					}
				}
				else
				{
					player.shadowDodgeCount -= 1f;
					if (player.shadowDodgeCount < 0f)
					{
						player.shadowDodgeCount = 0f;
					}
				}
				if (player.shadowDodgeCount > 0f)
				{
					Vector2 position3 = player.position;
					position.X = player.position.X + player.shadowDodgeCount;
					position.Y = player.position.Y + player.gfxOffY;
					DrawPlayer(player, position, player.fullRotation, player.fullRotationOrigin, 0.5f + (float)rand.Next(-10, 11) * 0.005f);
					position.X = player.position.X - player.shadowDodgeCount;
					DrawPlayer(player, position, player.fullRotation, player.fullRotationOrigin, 0.5f + (float)rand.Next(-10, 11) * 0.005f);
				}
				position = player.position;
				position.Y += player.gfxOffY;
				if (player.stoned)
				{
					DrawPlayerStoned(player, position);
				}
				else if (!player.invis)
				{
					DrawPlayer(player, position, player.fullRotation, player.fullRotationOrigin);
				}
			}
			spriteBatch.End();
			TimeLogger.DetailedDrawTime(21);
		}

		protected void DrawNPCs(bool behindTiles = false)
		{
			bool flag = false;
			Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)screenPosition.X - 800, (int)screenPosition.Y - 800, screenWidth + 1600, screenHeight + 1600);
			for (int num = 199; num >= 0; num--)
			{
				try
				{
					if (npc[num].active && npc[num].type > 0 && npc[num].type < 540 && !npc[num].hide && npc[num].behindTiles == behindTiles)
					{
						if (npc[num].type == 125 || npc[num].type == 126)
						{
							if (!flag)
							{
								flag = true;
								for (int i = 0; i < 200; i++)
								{
									if (npc[i].active && num != i && (npc[i].type == 125 || npc[i].type == 126))
									{
										float num2 = npc[i].position.X + (float)npc[i].width * 0.5f;
										float num3 = npc[i].position.Y + (float)npc[i].height * 0.5f;
										Vector2 vector = new Vector2(npc[num].position.X + (float)npc[num].width * 0.5f, npc[num].position.Y + (float)npc[num].height * 0.5f);
										float num4 = num2 - vector.X;
										float num5 = num3 - vector.Y;
										float rotation = (float)Math.Atan2(num5, num4) - 1.57f;
										bool flag2 = true;
										float num6 = (float)Math.Sqrt(num4 * num4 + num5 * num5);
										if (num6 > 2000f)
										{
											flag2 = false;
										}
										while (flag2)
										{
											num6 = (float)Math.Sqrt(num4 * num4 + num5 * num5);
											if (num6 < 40f)
											{
												flag2 = false;
											}
											else
											{
												num6 = (float)chain12Texture.Height / num6;
												num4 *= num6;
												num5 *= num6;
												vector.X += num4;
												vector.Y += num5;
												num4 = num2 - vector.X;
												num5 = num3 - vector.Y;
												Microsoft.Xna.Framework.Color color = Lighting.GetColor((int)vector.X / 16, (int)(vector.Y / 16f));
												spriteBatch.Draw(chain12Texture, new Vector2(vector.X - screenPosition.X, vector.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, chain12Texture.Width, chain12Texture.Height), color, rotation, new Vector2((float)chain12Texture.Width * 0.5f, (float)chain12Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
											}
										}
									}
								}
							}
						}
						else if (npc[num].type == 263 && npc[num].aiStyle == 52 && NPC.plantBoss >= 0)
						{
							Vector2 vector2 = new Vector2(npc[num].position.X + (float)(npc[num].width / 2), npc[num].position.Y + (float)(npc[num].height / 2));
							float num7 = npc[NPC.plantBoss].Center.X - vector2.X;
							float num8 = npc[NPC.plantBoss].Center.Y - vector2.Y;
							float rotation2 = (float)Math.Atan2(num8, num7) - 1.57f;
							bool flag3 = true;
							while (flag3)
							{
								int num9 = 16;
								int num10 = 32;
								float num11 = (float)Math.Sqrt(num7 * num7 + num8 * num8);
								if (num11 < (float)num10)
								{
									num9 = (int)num11 - num10 + num9;
									flag3 = false;
								}
								num11 = (float)num9 / num11;
								num7 *= num11;
								num8 *= num11;
								vector2.X += num7;
								vector2.Y += num8;
								num7 = npc[NPC.plantBoss].Center.X - vector2.X;
								num8 = npc[NPC.plantBoss].Center.Y - vector2.Y;
								Microsoft.Xna.Framework.Color color2 = Lighting.GetColor((int)vector2.X / 16, (int)(vector2.Y / 16f));
								spriteBatch.Draw(chain26Texture, new Vector2(vector2.X - screenPosition.X, vector2.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, chain26Texture.Width, num9), color2, rotation2, new Vector2((float)chain26Texture.Width * 0.5f, (float)chain26Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
							}
						}
						else if (npc[num].type == 264 && npc[num].aiStyle == 53 && NPC.plantBoss >= 0)
						{
							int num12 = NPC.plantBoss;
							if (npc[num].ai[3] > 0f)
							{
								num12 = (int)npc[num].ai[3] - 1;
							}
							Vector2 vector3 = new Vector2(npc[num].position.X + (float)(npc[num].width / 2), npc[num].position.Y + (float)(npc[num].height / 2));
							float num13 = npc[num12].Center.X - vector3.X;
							float num14 = npc[num12].Center.Y - vector3.Y;
							float rotation3 = (float)Math.Atan2(num14, num13) - 1.57f;
							bool flag4 = true;
							while (flag4)
							{
								int num15 = 16;
								int num16 = 32;
								float num17 = (float)Math.Sqrt(num13 * num13 + num14 * num14);
								if (num17 < (float)num16)
								{
									num15 = (int)num17 - num16 + num15;
									flag4 = false;
								}
								num17 = (float)num15 / num17;
								num13 *= num17;
								num14 *= num17;
								vector3.X += num13;
								vector3.Y += num14;
								num13 = npc[num12].Center.X - vector3.X;
								num14 = npc[num12].Center.Y - vector3.Y;
								Microsoft.Xna.Framework.Color color3 = Lighting.GetColor((int)vector3.X / 16, (int)(vector3.Y / 16f));
								spriteBatch.Draw(chain27Texture, new Vector2(vector3.X - screenPosition.X, vector3.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, chain27Texture.Width, num15), color3, rotation3, new Vector2((float)chain27Texture.Width * 0.5f, (float)chain27Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
							}
						}
						if (NPCID.Sets.MustAlwaysDraw[npc[num].type] || rectangle.Intersects(new Microsoft.Xna.Framework.Rectangle((int)npc[num].position.X, (int)npc[num].position.Y, npc[num].width, npc[num].height)))
						{
							DrawNPC(num, behindTiles);
						}
					}
				}
				catch
				{
					npc[num].active = false;
				}
			}
		}

		protected void DrawNPC(int i, bool behindTiles)
		{
			int type = npc[i].type;
			LoadNPC(type);
			if (npc[i].setFrameSize)
			{
				npc[i].frame = new Microsoft.Xna.Framework.Rectangle(0, 0, npcTexture[type].Width, npcTexture[type].Height / npcFrameCount[type]);
				npc[i].setFrameSize = false;
			}
			if (type == 101)
			{
				bool flag = true;
				Vector2 vector = new Vector2(npc[i].position.X + (float)(npc[i].width / 2), npc[i].position.Y + (float)(npc[i].height / 2));
				float num = npc[i].ai[0] * 16f + 8f - vector.X;
				float num2 = npc[i].ai[1] * 16f + 8f - vector.Y;
				float rotation = (float)Math.Atan2(num2, num) - 1.57f;
				bool flag2 = true;
				while (flag2)
				{
					float num3 = 0.75f;
					int height = 28;
					float num4 = (float)Math.Sqrt(num * num + num2 * num2);
					if (num4 < 28f * num3)
					{
						height = (int)num4 - 40 + 28;
						flag2 = false;
					}
					num4 = 20f * num3 / num4;
					num *= num4;
					num2 *= num4;
					vector.X += num;
					vector.Y += num2;
					num = npc[i].ai[0] * 16f + 8f - vector.X;
					num2 = npc[i].ai[1] * 16f + 8f - vector.Y;
					Microsoft.Xna.Framework.Color color = Lighting.GetColor((int)vector.X / 16, (int)(vector.Y / 16f));
					if (!flag)
					{
						flag = true;
						spriteBatch.Draw(chain10Texture, new Vector2(vector.X - screenPosition.X, vector.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, chain10Texture.Width, height), color, rotation, new Vector2((float)chain10Texture.Width * 0.5f, (float)chain10Texture.Height * 0.5f), num3, SpriteEffects.None, 0f);
					}
					else
					{
						flag = false;
						spriteBatch.Draw(chain11Texture, new Vector2(vector.X - screenPosition.X, vector.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, chain10Texture.Width, height), color, rotation, new Vector2((float)chain10Texture.Width * 0.5f, (float)chain10Texture.Height * 0.5f), num3, SpriteEffects.None, 0f);
					}
				}
			}
			else if (npc[i].aiStyle == 13)
			{
				Vector2 vector2 = new Vector2(npc[i].position.X + (float)(npc[i].width / 2), npc[i].position.Y + (float)(npc[i].height / 2));
				float num5 = npc[i].ai[0] * 16f + 8f - vector2.X;
				float num6 = npc[i].ai[1] * 16f + 8f - vector2.Y;
				float rotation2 = (float)Math.Atan2(num6, num5) - 1.57f;
				bool flag3 = true;
				while (flag3)
				{
					int num7 = 28;
					int num8 = 40;
					if (type == 259 || type == 260)
					{
						num8 = 20;
						num7 = 12;
					}
					float num9 = (float)Math.Sqrt(num5 * num5 + num6 * num6);
					if (num9 < (float)num8)
					{
						num7 = (int)num9 - num8 + num7;
						flag3 = false;
					}
					num9 = (float)num7 / num9;
					num5 *= num9;
					num6 *= num9;
					vector2.X += num5;
					vector2.Y += num6;
					num5 = npc[i].ai[0] * 16f + 8f - vector2.X;
					num6 = npc[i].ai[1] * 16f + 8f - vector2.Y;
					Microsoft.Xna.Framework.Color color2 = Lighting.GetColor((int)vector2.X / 16, (int)(vector2.Y / 16f));
					if (type == 259 || type == 260)
					{
						color2.B = byte.MaxValue;
						if (color2.R < 100)
						{
							color2.R = 100;
						}
						if (color2.G < 150)
						{
							color2.G = 150;
						}
					}
					switch (type)
					{
					case 56:
						spriteBatch.Draw(chain5Texture, new Vector2(vector2.X - screenPosition.X, vector2.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, chain4Texture.Width, num7), color2, rotation2, new Vector2((float)chain4Texture.Width * 0.5f, (float)chain4Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
						break;
					case 175:
						spriteBatch.Draw(chain14Texture, new Vector2(vector2.X - screenPosition.X, vector2.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, chain14Texture.Width, num7), color2, rotation2, new Vector2((float)chain14Texture.Width * 0.5f, (float)chain14Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
						break;
					case 259:
						spriteBatch.Draw(chain24Texture, new Vector2(vector2.X - screenPosition.X, vector2.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, chain24Texture.Width, num7), color2, rotation2, new Vector2((float)chain24Texture.Width * 0.5f, (float)chain24Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
						break;
					case 260:
						spriteBatch.Draw(chain25Texture, new Vector2(vector2.X - screenPosition.X, vector2.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, chain25Texture.Width, num7), color2, rotation2, new Vector2((float)chain25Texture.Width * 0.5f, (float)chain25Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
						break;
					default:
						spriteBatch.Draw(chain4Texture, new Vector2(vector2.X - screenPosition.X, vector2.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, chain4Texture.Width, num7), color2, rotation2, new Vector2((float)chain4Texture.Width * 0.5f, (float)chain4Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
						break;
					}
				}
			}
			if (type == 327)
			{
				float rotation3 = 0f;
				Vector2 vector3 = new Vector2(npc[i].Center.X, npc[i].Center.Y + 80f);
				int num10 = (int)npc[i].localAI[1];
				Microsoft.Xna.Framework.Color color3 = Lighting.GetColor((int)vector3.X / 16, (int)(vector3.Y / 16f));
				spriteBatch.Draw(pumpkingCloakTexture, new Vector2(vector3.X - screenPosition.X, vector3.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, pumpkingCloakTexture.Height / 5 * num10, pumpkingCloakTexture.Width, pumpkingCloakTexture.Height / 5), color3, rotation3, new Vector2((float)pumpkingCloakTexture.Width * 0.5f, (float)pumpkingCloakTexture.Height * 0.5f / 5f), 1f, SpriteEffects.None, 0f);
			}
			if (type == 328)
			{
				Vector2 vector4 = new Vector2(npc[i].position.X + (float)npc[i].width * 0.5f - 5f * npc[i].ai[0], npc[i].position.Y + 20f);
				for (int j = 0; j < 2; j++)
				{
					float num11 = npc[(int)npc[i].ai[1]].position.X + (float)(npc[(int)npc[i].ai[1]].width / 2) - vector4.X;
					float num12 = npc[(int)npc[i].ai[1]].position.Y + (float)(npc[(int)npc[i].ai[1]].height / 2) - 30f - vector4.Y;
					float num13 = 0f;
					if (j == 0)
					{
						num11 -= 200f * npc[i].ai[0];
						num12 += 130f;
						num13 = (float)Math.Sqrt(num11 * num11 + num12 * num12);
						num13 = 92f / num13;
						vector4.X += num11 * num13;
						vector4.Y += num12 * num13;
					}
					else
					{
						num11 -= 50f * npc[i].ai[0];
						num12 += 80f;
						num13 = (float)Math.Sqrt(num11 * num11 + num12 * num12);
						num13 = 60f / num13;
						vector4.X += num11 * num13;
						vector4.Y += num12 * num13;
					}
					float rotation4 = (float)Math.Atan2(num12, num11) - 1.57f;
					Microsoft.Xna.Framework.Color color4 = Lighting.GetColor((int)vector4.X / 16, (int)(vector4.Y / 16f));
					spriteBatch.Draw(pumpkingArmTexture, new Vector2(vector4.X - screenPosition.X, vector4.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, pumpkingArmTexture.Width, pumpkingArmTexture.Height), color4, rotation4, new Vector2((float)pumpkingArmTexture.Width * 0.5f, (float)pumpkingArmTexture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
					if (j == 0)
					{
						vector4.X += num11 * num13 / 2f;
						vector4.Y += num12 * num13 / 2f;
					}
				}
			}
			if (type == 36)
			{
				Vector2 vector5 = new Vector2(npc[i].position.X + (float)npc[i].width * 0.5f - 5f * npc[i].ai[0], npc[i].position.Y + 20f);
				for (int k = 0; k < 2; k++)
				{
					float num14 = npc[(int)npc[i].ai[1]].position.X + (float)(npc[(int)npc[i].ai[1]].width / 2) - vector5.X;
					float num15 = npc[(int)npc[i].ai[1]].position.Y + (float)(npc[(int)npc[i].ai[1]].height / 2) - vector5.Y;
					float num16 = 0f;
					if (k == 0)
					{
						num14 -= 200f * npc[i].ai[0];
						num15 += 130f;
						num16 = (float)Math.Sqrt(num14 * num14 + num15 * num15);
						num16 = 92f / num16;
						vector5.X += num14 * num16;
						vector5.Y += num15 * num16;
					}
					else
					{
						num14 -= 50f * npc[i].ai[0];
						num15 += 80f;
						num16 = (float)Math.Sqrt(num14 * num14 + num15 * num15);
						num16 = 60f / num16;
						vector5.X += num14 * num16;
						vector5.Y += num15 * num16;
					}
					float rotation5 = (float)Math.Atan2(num15, num14) - 1.57f;
					Microsoft.Xna.Framework.Color color5 = Lighting.GetColor((int)vector5.X / 16, (int)(vector5.Y / 16f));
					spriteBatch.Draw(boneArmTexture, new Vector2(vector5.X - screenPosition.X, vector5.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, boneArmTexture.Width, boneArmTexture.Height), color5, rotation5, new Vector2((float)boneArmTexture.Width * 0.5f, (float)boneArmTexture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
					if (k == 0)
					{
						vector5.X += num14 * num16 / 2f;
						vector5.Y += num15 * num16 / 2f;
					}
					else if (base.IsActive)
					{
						vector5.X += num14 * num16 - 16f;
						vector5.Y += num15 * num16 - 6f;
						int num17 = Dust.NewDust(new Vector2(vector5.X, vector5.Y), 30, 10, 5, num14 * 0.02f, num15 * 0.02f, 0, default(Microsoft.Xna.Framework.Color), 2f);
						dust[num17].noGravity = true;
					}
				}
			}
			if (npc[i].aiStyle == 47)
			{
				Vector2 vector6 = new Vector2(npc[i].Center.X, npc[i].Center.Y);
				float num18 = npc[NPC.golemBoss].Center.X - vector6.X;
				float num19 = npc[NPC.golemBoss].Center.Y - vector6.Y;
				num19 -= 7f;
				num18 = ((type != 247) ? (num18 + 66f) : (num18 - 70f));
				float rotation6 = (float)Math.Atan2(num19, num18) - 1.57f;
				bool flag4 = true;
				while (flag4)
				{
					float num20 = (float)Math.Sqrt(num18 * num18 + num19 * num19);
					if (num20 < 16f)
					{
						flag4 = false;
						continue;
					}
					num20 = 16f / num20;
					num18 *= num20;
					num19 *= num20;
					vector6.X += num18;
					vector6.Y += num19;
					num18 = npc[NPC.golemBoss].Center.X - vector6.X;
					num19 = npc[NPC.golemBoss].Center.Y - vector6.Y;
					num19 -= 7f;
					num18 = ((type != 247) ? (num18 + 66f) : (num18 - 70f));
					Microsoft.Xna.Framework.Color color6 = Lighting.GetColor((int)vector6.X / 16, (int)(vector6.Y / 16f));
					spriteBatch.Draw(chain21Texture, new Vector2(vector6.X - screenPosition.X, vector6.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, chain21Texture.Width, chain21Texture.Height), color6, rotation6, new Vector2((float)chain21Texture.Width * 0.5f, (float)chain21Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
				}
			}
			if (npc[i].aiStyle >= 33 && npc[i].aiStyle <= 36)
			{
				Vector2 vector7 = new Vector2(npc[i].position.X + (float)npc[i].width * 0.5f - 5f * npc[i].ai[0], npc[i].position.Y + 20f);
				for (int l = 0; l < 2; l++)
				{
					float num21 = npc[(int)npc[i].ai[1]].position.X + (float)(npc[(int)npc[i].ai[1]].width / 2) - vector7.X;
					float num22 = npc[(int)npc[i].ai[1]].position.Y + (float)(npc[(int)npc[i].ai[1]].height / 2) - vector7.Y;
					float num23 = 0f;
					if (l == 0)
					{
						num21 -= 200f * npc[i].ai[0];
						num22 += 130f;
						num23 = (float)Math.Sqrt(num21 * num21 + num22 * num22);
						num23 = 92f / num23;
						vector7.X += num21 * num23;
						vector7.Y += num22 * num23;
					}
					else
					{
						num21 -= 50f * npc[i].ai[0];
						num22 += 80f;
						num23 = (float)Math.Sqrt(num21 * num21 + num22 * num22);
						num23 = 60f / num23;
						vector7.X += num21 * num23;
						vector7.Y += num22 * num23;
					}
					float rotation7 = (float)Math.Atan2(num22, num21) - 1.57f;
					Microsoft.Xna.Framework.Color color7 = Lighting.GetColor((int)vector7.X / 16, (int)(vector7.Y / 16f));
					spriteBatch.Draw(boneArm2Texture, new Vector2(vector7.X - screenPosition.X, vector7.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, boneArmTexture.Width, boneArmTexture.Height), color7, rotation7, new Vector2((float)boneArmTexture.Width * 0.5f, (float)boneArmTexture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
					if (l == 0)
					{
						vector7.X += num21 * num23 / 2f;
						vector7.Y += num22 * num23 / 2f;
					}
					else if (base.IsActive)
					{
						vector7.X += num21 * num23 - 16f;
						vector7.Y += num22 * num23 - 6f;
						int num24 = Dust.NewDust(new Vector2(vector7.X, vector7.Y), 30, 10, 6, num21 * 0.02f, num22 * 0.02f, 0, default(Microsoft.Xna.Framework.Color), 2.5f);
						dust[num24].noGravity = true;
					}
				}
			}
			if (npc[i].aiStyle == 20)
			{
				Vector2 vector8 = new Vector2(npc[i].position.X + (float)(npc[i].width / 2), npc[i].position.Y + (float)(npc[i].height / 2));
				float num25 = npc[i].ai[1] - vector8.X;
				float num26 = npc[i].ai[2] - vector8.Y;
				float num27 = (float)Math.Atan2(num26, num25) - 1.57f;
				npc[i].rotation = num27;
				bool flag5 = true;
				while (flag5)
				{
					int height2 = 12;
					float num28 = (float)Math.Sqrt(num25 * num25 + num26 * num26);
					if (num28 < 20f)
					{
						height2 = (int)num28 - 20 + 12;
						flag5 = false;
					}
					num28 = 12f / num28;
					num25 *= num28;
					num26 *= num28;
					vector8.X += num25;
					vector8.Y += num26;
					num25 = npc[i].ai[1] - vector8.X;
					num26 = npc[i].ai[2] - vector8.Y;
					Microsoft.Xna.Framework.Color color8 = Lighting.GetColor((int)vector8.X / 16, (int)(vector8.Y / 16f));
					spriteBatch.Draw(chainTexture, new Vector2(vector8.X - screenPosition.X, vector8.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, chainTexture.Width, height2), color8, num27, new Vector2((float)chainTexture.Width * 0.5f, (float)chainTexture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
				}
				spriteBatch.Draw(spikeBaseTexture, new Vector2(npc[i].ai[1] - screenPosition.X, npc[i].ai[2] - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, spikeBaseTexture.Width, spikeBaseTexture.Height), Lighting.GetColor((int)npc[i].ai[1] / 16, (int)(npc[i].ai[2] / 16f)), num27 - 0.75f, new Vector2((float)spikeBaseTexture.Width * 0.5f, (float)spikeBaseTexture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
			}
			Microsoft.Xna.Framework.Color color9 = Lighting.GetColor((int)((double)npc[i].position.X + (double)npc[i].width * 0.5) / 16, (int)(((double)npc[i].position.Y + (double)npc[i].height * 0.5) / 16.0));
			if (type >= 277 && type <= 280)
			{
				if (color9.R < byte.MaxValue)
				{
					color9.R = byte.MaxValue;
				}
				if (color9.G < 175)
				{
					color9.G = 175;
				}
			}
			if (type == -4)
			{
				int r = color9.R;
				int g = color9.G;
				int b = color9.B;
				r *= 2;
				if (r > 255)
				{
					r = 255;
				}
				g *= 2;
				if (g > 255)
				{
					g = 255;
				}
				b *= 2;
				if (b > 255)
				{
					b = 255;
				}
				color9 = new Microsoft.Xna.Framework.Color(r, g, b);
			}
			if (behindTiles && type != 113 && type != 114)
			{
				int num29 = (int)((npc[i].position.X - 8f) / 16f);
				int num30 = (int)((npc[i].position.X + (float)npc[i].width + 8f) / 16f);
				int num31 = (int)((npc[i].position.Y - 8f) / 16f);
				int num32 = (int)((npc[i].position.Y + (float)npc[i].height + 8f) / 16f);
				for (int m = num29; m <= num30; m++)
				{
					for (int n = num31; n <= num32; n++)
					{
						if (Lighting.Brightness(m, n) == 0f)
						{
							color9 = Microsoft.Xna.Framework.Color.Black;
						}
					}
				}
			}
			float num33 = 1f;
			float num34 = 1f;
			float num35 = 1f;
			float a = 1f;
			if (npc[i].poisoned)
			{
				if (rand.Next(30) == 0)
				{
					int num36 = Dust.NewDust(npc[i].position, npc[i].width, npc[i].height, 46, 0f, 0f, 120, default(Microsoft.Xna.Framework.Color), 0.2f);
					dust[num36].noGravity = true;
					dust[num36].fadeIn = 1.9f;
				}
				num33 *= 0.65f;
				num35 *= 0.75f;
				color9 = buffColor(color9, num33, num34, num35, a);
			}
			if (npc[i].venom)
			{
				if (rand.Next(10) == 0)
				{
					int num37 = Dust.NewDust(npc[i].position, npc[i].width, npc[i].height, 171, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 0.5f);
					dust[num37].noGravity = true;
					dust[num37].fadeIn = 1.5f;
				}
				num34 *= 0.45f;
				num33 *= 0.75f;
				color9 = buffColor(color9, num33, num34, num35, a);
			}
			if (npc[i].midas)
			{
				num35 *= 0.3f;
				num33 *= 0.85f;
				color9 = buffColor(color9, num33, num34, num35, a);
			}
			if (npc[i].shadowFlame && rand.Next(5) < 4)
			{
				int num38 = Dust.NewDust(new Vector2(npc[i].position.X - 2f, npc[i].position.Y - 2f), npc[i].width + 4, npc[i].height + 4, 27, npc[i].velocity.X * 0.4f, npc[i].velocity.Y * 0.4f, 180, default(Microsoft.Xna.Framework.Color), 1.95f);
				dust[num38].noGravity = true;
				dust[num38].velocity *= 0.75f;
				dust[num38].velocity.X *= 0.75f;
				dust[num38].velocity.Y -= 1f;
				if (rand.Next(4) == 0)
				{
					dust[num38].noGravity = false;
					dust[num38].scale *= 0.5f;
				}
			}
			if (npc[i].onFire)
			{
				if (rand.Next(4) < 3)
				{
					int num39 = Dust.NewDust(new Vector2(npc[i].position.X - 2f, npc[i].position.Y - 2f), npc[i].width + 4, npc[i].height + 4, 6, npc[i].velocity.X * 0.4f, npc[i].velocity.Y * 0.4f, 100, default(Microsoft.Xna.Framework.Color), 3.5f);
					dust[num39].noGravity = true;
					dust[num39].velocity *= 1.8f;
					dust[num39].velocity.Y -= 0.5f;
					if (rand.Next(4) == 0)
					{
						dust[num39].noGravity = false;
						dust[num39].scale *= 0.5f;
					}
				}
				Lighting.AddLight((int)(npc[i].position.X / 16f), (int)(npc[i].position.Y / 16f + 1f), 1f, 0.3f, 0.1f);
			}
			if (npc[i].daybreak)
			{
				if (rand.Next(4) < 3)
				{
					int num40 = Dust.NewDust(new Vector2(npc[i].position.X - 2f, npc[i].position.Y - 2f), npc[i].width + 4, npc[i].height + 4, 158, npc[i].velocity.X * 0.4f, npc[i].velocity.Y * 0.4f, 100, default(Microsoft.Xna.Framework.Color), 3.5f);
					dust[num40].noGravity = true;
					dust[num40].velocity *= 2.8f;
					dust[num40].velocity.Y -= 0.5f;
					if (rand.Next(4) == 0)
					{
						dust[num40].noGravity = false;
						dust[num40].scale *= 0.5f;
					}
				}
				Lighting.AddLight((int)(npc[i].position.X / 16f), (int)(npc[i].position.Y / 16f + 1f), 1f, 0.3f, 0.1f);
			}
			if (npc[i].dryadWard && npc[i].velocity.X != 0f && rand.Next(4) == 0)
			{
				int num41 = Dust.NewDust(new Vector2(npc[i].position.X - 2f, npc[i].position.Y + (float)npc[i].height - 2f), npc[i].width + 4, 4, 163, npc[i].velocity.X * 0.4f, npc[i].velocity.Y * 0.4f, 100, default(Microsoft.Xna.Framework.Color), 1.5f);
				dust[num41].noGravity = true;
				dust[num41].noLight = true;
				dust[num41].velocity *= 0f;
			}
			if (npc[i].dryadBane && rand.Next(4) == 0)
			{
				int num42 = Dust.NewDust(new Vector2(npc[i].position.X - 2f, npc[i].position.Y), npc[i].width + 4, npc[i].height, 163, npc[i].velocity.X * 0.4f, npc[i].velocity.Y * 0.4f, 100, default(Microsoft.Xna.Framework.Color), 1.5f);
				dust[num42].noGravity = true;
				dust[num42].velocity *= new Vector2(rand.NextFloat() * 4f - 2f, 0f);
				dust[num42].noLight = true;
			}
			if (npc[i].loveStruck && rand.Next(5) == 0)
			{
				Vector2 value = new Vector2(rand.Next(-10, 11), rand.Next(-10, 11));
				value.Normalize();
				value.X *= 0.66f;
				int num43 = Gore.NewGore(npc[i].position + new Vector2(rand.Next(npc[i].width + 1), rand.Next(npc[i].height + 1)), value * rand.Next(3, 6) * 0.33f, 331, (float)rand.Next(40, 121) * 0.01f);
				gore[num43].sticky = false;
				gore[num43].velocity *= 0.4f;
				gore[num43].velocity.Y -= 0.6f;
			}
			if (npc[i].stinky)
			{
				num33 *= 0.7f;
				num35 *= 0.55f;
				color9 = buffColor(color9, num33, num34, num35, a);
				if (rand.Next(5) == 0)
				{
					Vector2 value2 = new Vector2(rand.Next(-10, 11), rand.Next(-10, 11));
					value2.Normalize();
					value2.X *= 0.66f;
					value2.Y = Math.Abs(value2.Y);
					Vector2 vector9 = value2 * rand.Next(3, 5) * 0.25f;
					int num44 = Dust.NewDust(npc[i].position, npc[i].width, npc[i].height, 188, vector9.X, vector9.Y * 0.5f, 100, default(Microsoft.Xna.Framework.Color), 1.5f);
					dust[num44].velocity *= 0.1f;
					dust[num44].velocity.Y -= 0.5f;
				}
			}
			if (npc[i].dripping && rand.Next(4) != 0)
			{
				Vector2 position = npc[i].position;
				position.X -= 2f;
				position.Y -= 2f;
				if (rand.Next(2) == 0)
				{
					int num45 = Dust.NewDust(position, npc[i].width + 4, npc[i].height + 2, 211, 0f, 0f, 50, default(Microsoft.Xna.Framework.Color), 0.8f);
					if (rand.Next(2) == 0)
					{
						dust[num45].alpha += 25;
					}
					if (rand.Next(2) == 0)
					{
						dust[num45].alpha += 25;
					}
					dust[num45].noLight = true;
					dust[num45].velocity *= 0.2f;
					dust[num45].velocity.Y += 0.2f;
					dust[num45].velocity += npc[i].velocity;
				}
				else
				{
					int num46 = Dust.NewDust(position, npc[i].width + 8, npc[i].height + 8, 211, 0f, 0f, 50, default(Microsoft.Xna.Framework.Color), 1.1f);
					if (rand.Next(2) == 0)
					{
						dust[num46].alpha += 25;
					}
					if (rand.Next(2) == 0)
					{
						dust[num46].alpha += 25;
					}
					dust[num46].noLight = true;
					dust[num46].noGravity = true;
					dust[num46].velocity *= 0.2f;
					dust[num46].velocity.Y += 1f;
					dust[num46].velocity += npc[i].velocity;
				}
			}
			if (npc[i].drippingSlime)
			{
				if (rand.Next(4) != 0)
				{
					int alpha = 175;
					Microsoft.Xna.Framework.Color newColor = new Microsoft.Xna.Framework.Color(0, 80, 255, 100);
					Vector2 position2 = npc[i].position;
					position2.X -= 2f;
					position2.Y -= 2f;
					if (rand.Next(2) == 0)
					{
						int num47 = Dust.NewDust(position2, npc[i].width + 4, npc[i].height + 2, 4, 0f, 0f, alpha, newColor, 1.4f);
						if (rand.Next(2) == 0)
						{
							dust[num47].alpha += 25;
						}
						if (rand.Next(2) == 0)
						{
							dust[num47].alpha += 25;
						}
						dust[num47].noLight = true;
						dust[num47].velocity *= 0.2f;
						dust[num47].velocity.Y += 0.2f;
						dust[num47].velocity += npc[i].velocity;
					}
				}
				num33 *= 0.8f;
				num34 *= 0.8f;
				color9 = buffColor(color9, num33, num34, num35, a);
			}
			if (npc[i].ichor)
			{
				color9 = new Microsoft.Xna.Framework.Color(255, 255, 0, 255);
			}
			if (npc[i].onFrostBurn)
			{
				if (rand.Next(4) < 3)
				{
					int num48 = Dust.NewDust(new Vector2(npc[i].position.X - 2f, npc[i].position.Y - 2f), npc[i].width + 4, npc[i].height + 4, 135, npc[i].velocity.X * 0.4f, npc[i].velocity.Y * 0.4f, 100, default(Microsoft.Xna.Framework.Color), 3.5f);
					dust[num48].noGravity = true;
					dust[num48].velocity *= 1.8f;
					dust[num48].velocity.Y -= 0.5f;
					if (rand.Next(4) == 0)
					{
						dust[num48].noGravity = false;
						dust[num48].scale *= 0.5f;
					}
				}
				Lighting.AddLight((int)(npc[i].position.X / 16f), (int)(npc[i].position.Y / 16f + 1f), 0.1f, 0.6f, 1f);
			}
			if (npc[i].onFire2)
			{
				if (rand.Next(4) < 3)
				{
					int num49 = Dust.NewDust(new Vector2(npc[i].position.X - 2f, npc[i].position.Y - 2f), npc[i].width + 4, npc[i].height + 4, 75, npc[i].velocity.X * 0.4f, npc[i].velocity.Y * 0.4f, 100, default(Microsoft.Xna.Framework.Color), 3.5f);
					dust[num49].noGravity = true;
					dust[num49].velocity *= 1.8f;
					dust[num49].velocity.Y -= 0.5f;
					if (rand.Next(4) == 0)
					{
						dust[num49].noGravity = false;
						dust[num49].scale *= 0.5f;
					}
				}
				Lighting.AddLight((int)(npc[i].position.X / 16f), (int)(npc[i].position.Y / 16f + 1f), 1f, 0.3f, 0.1f);
			}
			if (Main.player[myPlayer].detectCreature && npc[i].lifeMax > 1)
			{
				byte b2;
				byte b3;
				byte b4;
				if (npc[i].friendly || npc[i].catchItem > 0 || (npc[i].damage == 0 && npc[i].lifeMax == 5))
				{
					b2 = 50;
					b3 = byte.MaxValue;
					b4 = 50;
				}
				else
				{
					b2 = byte.MaxValue;
					b3 = 50;
					b4 = 50;
				}
				if (color9.R < b2)
				{
					color9.R = b2;
				}
				if (color9.G < b3)
				{
					color9.G = b3;
				}
				if (color9.B < b4)
				{
					color9.B = b4;
				}
			}
			if (type == 50)
			{
				Vector2 zero = Vector2.Zero;
				float num50 = 0f;
				zero.Y -= npc[i].velocity.Y;
				zero.X -= npc[i].velocity.X * 2f;
				num50 += npc[i].velocity.X * 0.05f;
				if (npc[i].frame.Y == 120)
				{
					zero.Y += 2f;
				}
				if (npc[i].frame.Y == 360)
				{
					zero.Y -= 2f;
				}
				if (npc[i].frame.Y == 480)
				{
					zero.Y -= 6f;
				}
				spriteBatch.Draw(ninjaTexture, new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) + zero.X, npc[i].position.Y - screenPosition.Y + (float)(npc[i].height / 2) + zero.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, ninjaTexture.Width, ninjaTexture.Height), color9, num50, new Vector2(ninjaTexture.Width / 2, ninjaTexture.Height / 2), 1f, SpriteEffects.None, 0f);
			}
			if (type == 71)
			{
				Vector2 zero2 = Vector2.Zero;
				float num51 = 0f;
				zero2.Y -= npc[i].velocity.Y * 0.3f;
				zero2.X -= npc[i].velocity.X * 0.6f;
				num51 += npc[i].velocity.X * 0.09f;
				if (npc[i].frame.Y == 120)
				{
					zero2.Y += 2f;
				}
				if (npc[i].frame.Y == 360)
				{
					zero2.Y -= 2f;
				}
				if (npc[i].frame.Y == 480)
				{
					zero2.Y -= 6f;
				}
				spriteBatch.Draw(itemTexture[327], new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) + zero2.X, npc[i].position.Y - screenPosition.Y + (float)(npc[i].height / 2) + zero2.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, itemTexture[327].Width, itemTexture[327].Height), color9, num51, new Vector2(itemTexture[327].Width / 2, itemTexture[327].Height / 2), 1f, SpriteEffects.None, 0f);
			}
			if (type == 69)
			{
				spriteBatch.Draw(antLionTexture, new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2), npc[i].position.Y - screenPosition.Y + (float)npc[i].height + 14f), new Microsoft.Xna.Framework.Rectangle(0, 0, antLionTexture.Width, antLionTexture.Height), color9, (0f - npc[i].rotation) * 0.3f, new Vector2(antLionTexture.Width / 2, antLionTexture.Height / 2), 1f, SpriteEffects.None, 0f);
			}
			if (type == 1 && npc[i].ai[1] > 0f)
			{
				int num52 = (int)npc[i].ai[1];
				float num53 = 1f;
				float num54 = 22f * npc[i].scale;
				float num55 = 18f * npc[i].scale;
				float num56 = itemTexture[num52].Width;
				float num57 = itemTexture[num52].Height;
				if (num56 > num54)
				{
					num53 *= num54 / num56;
					num56 *= num53;
					num57 *= num53;
				}
				if (num57 > num55)
				{
					num53 *= num55 / num57;
					num56 *= num53;
					num57 *= num53;
				}
				float num58 = -1f;
				float num59 = 1f;
				int num60 = npc[i].frame.Y / (npcTexture[type].Height / npcFrameCount[type]);
				num59 -= (float)num60;
				num58 += (float)(num60 * 2);
				float num61 = 0.2f;
				num61 -= 0.3f * (float)num60;
				spriteBatch.Draw(itemTexture[num52], new Vector2(npc[i].Center.X - screenPosition.X + num58, npc[i].Center.Y - screenPosition.Y + npc[i].gfxOffY + num59), null, color9, num61, new Vector2(itemTexture[num52].Width / 2, itemTexture[num52].Height / 2), num53, SpriteEffects.None, 0f);
			}
			float num62 = 0f;
			float num63 = NPCAddHeight(i);
			Vector2 vector10 = new Vector2(npcTexture[type].Width / 2, npcTexture[type].Height / npcFrameCount[type] / 2);
			if (type == 108 || type == 124)
			{
				num62 = 2f;
			}
			else if (type == 357)
			{
				num62 = npc[i].localAI[0];
			}
			else if (type == 467)
			{
				num62 = 7f;
			}
			else if (type == 537)
			{
				num62 = 2f;
			}
			else if (type == 509)
			{
				num62 = -6f;
			}
			else if (type == 490)
			{
				num62 = 4f;
			}
			else if (type == 484)
			{
				num62 = 2f;
			}
			else if (type == 483)
			{
				num62 = 14f;
			}
			else if (type == 477)
			{
				num63 = 22f;
			}
			else if (type == 478)
			{
				num62 -= 2f;
			}
			else if (type == 469 && npc[i].ai[2] == 1f)
			{
				num62 = 14f;
			}
			else
			{
				switch (type)
				{
				case 4:
					vector10 = new Vector2(55f, 107f);
					break;
				case 125:
					vector10 = new Vector2(55f, 107f);
					break;
				case 126:
					vector10 = new Vector2(55f, 107f);
					break;
				case 63:
				case 64:
				case 103:
					vector10.Y += 4f;
					break;
				case 69:
					vector10.Y += 8f;
					break;
				case 262:
					vector10.Y = 77f;
					num63 += 26f;
					break;
				case 264:
					vector10.Y = 21f;
					num63 += 2f;
					break;
				case 266:
					num63 += 50f;
					break;
				case 268:
					num63 += 16f;
					break;
				case 288:
					num63 += 6f;
					break;
				}
			}
			if (npc[i].aiStyle == 10 || type == 72)
			{
				color9 = Microsoft.Xna.Framework.Color.White;
			}
			SpriteEffects spriteEffects = SpriteEffects.None;
			if (npc[i].spriteDirection == 1)
			{
				spriteEffects = SpriteEffects.FlipHorizontally;
			}
			if (type == 124 && npc[i].localAI[0] == 0f)
			{
				int num64 = 0;
				if (npc[i].frame.Y > 56)
				{
					num64 += 4;
				}
				num64 += npc[i].frame.Y / 56;
				if (num64 >= OffsetsPlayerHeadgear.Length)
				{
					num64 = 0;
				}
				float y = OffsetsPlayerHeadgear[num64].Y;
				LoadProjectile(582);
				Texture2D texture2D = projectileTexture[582];
				Vector2 position3 = npc[i].Center - screenPosition;
				position3 -= new Vector2(texture2D.Width, texture2D.Height / npcFrameCount[type]) * npc[i].scale / 2f;
				position3 += new Vector2(0f, num62 + num63 + npc[i].gfxOffY + y);
				position3 += new Vector2(-npc[i].spriteDirection * 2, -2f);
				spriteBatch.Draw(texture2D, position3, null, npc[i].GetAlpha(color9), npc[i].rotation, texture2D.Size() * new Vector2(0f, 0.5f), npc[i].scale, spriteEffects, 0f);
			}
			switch (type)
			{
			case 426:
			case 427:
			case 428:
			case 509:
			case 521:
			case 523:
			{
				Texture2D texture2D3 = npcTexture[type];
				Microsoft.Xna.Framework.Color value3 = Microsoft.Xna.Framework.Color.White;
				float amount = 0f;
				float amount2 = 0f;
				int num65 = 0;
				int num66 = 0;
				int num67 = 1;
				int num68 = 15;
				int num69 = 0;
				float scale = npc[i].scale;
				float value4 = npc[i].scale;
				int num70 = 0;
				float num71 = 0f;
				float scaleFactor = 0f;
				float num72 = 0f;
				Microsoft.Xna.Framework.Color color10 = color9;
				switch (type)
				{
				case 426:
					num70 = 4;
					scaleFactor = 4f;
					num71 = (float)Math.Cos(GlobalTime % 1.2f / 1.2f * ((float)Math.PI * 2f)) / 2f + 0.5f;
					value3 = Microsoft.Xna.Framework.Color.Turquoise;
					amount = 0.5f;
					num65 = 6;
					num66 = 2;
					num68 = num65;
					break;
				case 427:
					num65 = 8;
					num66 = 2;
					num68 = num65 * 3;
					break;
				case 509:
					num65 = 6;
					num66 = 2;
					num68 = num65 * 3;
					break;
				case 521:
					num65 = 10;
					num66 = 2;
					num68 = num65;
					num69 = 1;
					value4 = 0.3f;
					break;
				case 523:
					num70 = 3;
					scaleFactor = 10f * npc[i].scale;
					amount = 0.5f;
					amount2 = 0.8f;
					value3 = Microsoft.Xna.Framework.Color.HotPink;
					value3.A = 128;
					num72 = npc[i].localAI[0];
					num71 = npc[i].localAI[1];
					break;
				}
				for (int num73 = num67; num73 < num65; num73 += num66)
				{
					Vector2 vector23 = npc[i].oldPos[num73];
					Microsoft.Xna.Framework.Color value5 = color10;
					value5 = Microsoft.Xna.Framework.Color.Lerp(value5, value3, amount);
					value5 = npc[i].GetAlpha(value5);
					value5 *= (float)(num65 - num73) / (float)num68;
					float rotation8 = npc[i].rotation;
					if (num69 == 1)
					{
						float num195 = npc[i].oldRot[num73];
					}
					float scale2 = MathHelper.Lerp(scale, value4, 1f - (float)(num65 - num73) / (float)num68);
					Vector2 position5 = npc[i].oldPos[num73] + new Vector2(npc[i].width, npc[i].height) / 2f - screenPosition;
					position5 -= new Vector2(texture2D3.Width, texture2D3.Height / npcFrameCount[type]) * npc[i].scale / 2f;
					position5 += vector10 * npc[i].scale + new Vector2(0f, num62 + num63 + npc[i].gfxOffY);
					spriteBatch.Draw(texture2D3, position5, npc[i].frame, value5, npc[i].rotation, vector10, scale2, spriteEffects, 0f);
				}
				for (int num74 = 0; num74 < num70; num74++)
				{
					Microsoft.Xna.Framework.Color value6 = color9;
					value6 = Microsoft.Xna.Framework.Color.Lerp(value6, value3, amount);
					value6 = npc[i].GetAlpha(value6);
					value6 = Microsoft.Xna.Framework.Color.Lerp(value6, value3, amount2);
					value6 *= 1f - num71;
					Vector2 position6 = npc[i].Center + ((float)num74 / (float)num70 * ((float)Math.PI * 2f) + npc[i].rotation + num72).ToRotationVector2() * scaleFactor * num71 - screenPosition;
					position6 -= new Vector2(texture2D3.Width, texture2D3.Height / npcFrameCount[type]) * npc[i].scale / 2f;
					position6 += vector10 * npc[i].scale + new Vector2(0f, num62 + num63 + npc[i].gfxOffY);
					spriteBatch.Draw(texture2D3, position6, npc[i].frame, value6, npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				}
				Vector2 position7 = npc[i].Center - screenPosition;
				position7 -= new Vector2(texture2D3.Width, texture2D3.Height / npcFrameCount[type]) * npc[i].scale / 2f;
				position7 += vector10 * npc[i].scale + new Vector2(0f, num62 + num63 + npc[i].gfxOffY);
				spriteBatch.Draw(texture2D3, position7, npc[i].frame, npc[i].GetAlpha(color9), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				switch (type)
				{
				case 427:
					spriteBatch.Draw(glowMaskTexture[152], npc[i].Bottom - screenPosition + new Vector2((float)(-npcTexture[type].Width) * npc[i].scale / 2f + vector10.X * npc[i].scale, (float)(-npcTexture[type].Height) * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + npc[i].gfxOffY), npc[i].frame, new Microsoft.Xna.Framework.Color(255 - npc[i].alpha, 255 - npc[i].alpha, 255 - npc[i].alpha, 0), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
					break;
				case 426:
					spriteBatch.Draw(glowMaskTexture[153], npc[i].Bottom - screenPosition + new Vector2((float)(-npcTexture[type].Width) * npc[i].scale / 2f + vector10.X * npc[i].scale, (float)(-npcTexture[type].Height) * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + npc[i].gfxOffY), npc[i].frame, new Microsoft.Xna.Framework.Color(128 - npc[i].alpha / 2, 128 - npc[i].alpha / 2, 128 - npc[i].alpha / 2, 0), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
					break;
				}
				return;
			}
			case 371:
			case 454:
			case 455:
			case 456:
			case 457:
			case 458:
			case 459:
			{
				Texture2D texture2D2 = npcTexture[type];
				Vector2 position4 = npc[i].Center - screenPosition;
				position4 -= new Vector2(texture2D2.Width, texture2D2.Height / npcFrameCount[type]) * npc[i].scale / 2f;
				position4 += vector10 * npc[i].scale + new Vector2(0f, num62 + num63 + npc[i].gfxOffY);
				spriteBatch.Draw(texture2D2, position4, npc[i].frame, npc[i].GetAlpha(color9), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				return;
			}
			}
			switch (type)
			{
			case 488:
				return;
			case 422:
			case 493:
			case 507:
			case 517:
			{
				Texture2D texture2D8 = npcTexture[type];
				Vector2 vector13 = npc[i].Center - screenPosition;
				Vector2 value9 = vector13 - new Vector2(300f, 310f);
				vector13 -= new Vector2(texture2D8.Width, texture2D8.Height / npcFrameCount[type]) * npc[i].scale / 2f;
				vector13 += vector10 * npc[i].scale + new Vector2(0f, num62 + num63 + npc[i].gfxOffY);
				spriteBatch.Draw(texture2D8, vector13, npc[i].frame, npc[i].GetAlpha(color9), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				switch (type)
				{
				case 493:
				{
					texture2D8 = glowMaskTexture[132];
					float scaleFactor7 = 4f + (npc[i].GetAlpha(color9).ToVector3() - new Vector3(0.5f)).Length() * 4f;
					for (int num93 = 0; num93 < 4; num93++)
					{
						spriteBatch.Draw(texture2D8, vector13 + npc[i].velocity.RotatedBy((float)num93 * ((float)Math.PI / 2f)) * scaleFactor7, npc[i].frame, new Microsoft.Xna.Framework.Color(64, 64, 64, 0) * npc[i].Opacity, npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
					}
					break;
				}
				case 507:
				{
					texture2D8 = glowMaskTexture[143];
					float scaleFactor5 = 4f + (npc[i].GetAlpha(color9).ToVector3() - new Vector3(0.5f)).Length() * 4f;
					for (int num91 = 0; num91 < 4; num91++)
					{
						spriteBatch.Draw(texture2D8, vector13 + npc[i].velocity.RotatedBy((float)num91 * ((float)Math.PI / 2f)) * scaleFactor5, npc[i].frame, new Microsoft.Xna.Framework.Color(64, 64, 64, 0) * npc[i].Opacity, npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
					}
					break;
				}
				case 422:
				{
					texture2D8 = glowMaskTexture[149];
					float scaleFactor6 = 4f + (npc[i].GetAlpha(color9).ToVector3() - new Vector3(0.5f)).Length() * 4f;
					for (int num92 = 0; num92 < 4; num92++)
					{
						spriteBatch.Draw(texture2D8, vector13 + npc[i].velocity.RotatedBy((float)num92 * ((float)Math.PI / 2f)) * scaleFactor6, npc[i].frame, new Microsoft.Xna.Framework.Color(64, 64, 64, 0) * npc[i].Opacity, npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
					}
					break;
				}
				case 517:
				{
					texture2D8 = glowMaskTexture[162];
					float scaleFactor4 = 2f + (npc[i].GetAlpha(color9).ToVector3() - new Vector3(0.5f)).Length() * 9f;
					for (int num90 = 0; num90 < 4; num90++)
					{
						spriteBatch.Draw(texture2D8, vector13 + npc[i].velocity.RotatedBy((float)num90 * ((float)Math.PI / 2f)) * scaleFactor4 + Vector2.UnitX * 2f, npc[i].frame, new Microsoft.Xna.Framework.Color(64, 64, 64, 0) * npc[i].Opacity, npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
					}
					break;
				}
				}
				int num94 = 0;
				string key = "";
				switch (type)
				{
				case 422:
					num94 = NPC.ShieldStrengthTowerVortex;
					key = "Vortex";
					break;
				case 507:
					num94 = NPC.ShieldStrengthTowerNebula;
					key = "Nebula";
					break;
				case 517:
					num94 = NPC.ShieldStrengthTowerSolar;
					key = "Solar";
					break;
				case 493:
					num94 = NPC.ShieldStrengthTowerStardust;
					key = "Stardust";
					break;
				}
				float num95 = (float)num94 / (float)NPC.ShieldStrengthTowerMax;
				if (num94 > 0)
				{
					spriteBatch.End();
					spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.PointWrap, DepthStencilState.Default, RasterizerState.CullNone);
					float num96 = 0f;
					if (npc[i].ai[3] > 0f && npc[i].ai[3] <= 30f)
					{
						num96 = 1f - npc[i].ai[3] / 30f;
					}
					Filters.Scene[key].GetShader().UseIntensity(1f + num96).UseProgress(0f);
					DrawData value10 = new DrawData(TextureManager.Load("Images/Misc/Perlin"), value9 + new Vector2(300f, 300f), new Microsoft.Xna.Framework.Rectangle(0, 0, 600, 600), Microsoft.Xna.Framework.Color.White * (num95 * 0.8f + 0.2f), npc[i].rotation, new Vector2(300f, 300f), npc[i].scale * (1f + num96 * 0.05f), spriteEffects, 0);
					GameShaders.Misc["ForceField"].UseColor(new Vector3(1f + num96 * 0.5f));
					GameShaders.Misc["ForceField"].Apply(value10);
					value10.Draw(spriteBatch);
					spriteBatch.End();
					spriteBatch.Begin();
				}
				else if (npc[i].ai[3] > 0f)
				{
					spriteBatch.End();
					spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.PointWrap, DepthStencilState.Default, RasterizerState.CullNone);
					float num97 = npc[i].ai[3] / 120f;
					float num98 = Math.Min(npc[i].ai[3] / 30f, 1f);
					Filters.Scene[key].GetShader().UseIntensity(Math.Min(5f, 15f * num97) + 1f).UseProgress(num97);
					DrawData value11 = new DrawData(TextureManager.Load("Images/Misc/Perlin"), value9 + new Vector2(300f, 300f), new Microsoft.Xna.Framework.Rectangle(0, 0, 600, 600), new Microsoft.Xna.Framework.Color(new Vector4(1f - (float)Math.Sqrt(num98))), npc[i].rotation, new Vector2(300f, 300f), npc[i].scale * (1f + num98), spriteEffects, 0);
					GameShaders.Misc["ForceField"].UseColor(new Vector3(2f));
					GameShaders.Misc["ForceField"].Apply(value11);
					value11.Draw(spriteBatch);
					spriteBatch.End();
					spriteBatch.Begin();
				}
				else
				{
					Filters.Scene[key].GetShader().UseIntensity(0f).UseProgress(0f);
				}
				return;
			}
			case 402:
			{
				LoadNPC(403);
				LoadNPC(404);
				NPC nPC2 = npc[i];
				Texture2D texture2D7 = npcTexture[nPC2.type];
				Vector2 vector12 = nPC2.Center - screenPosition;
				vector12 -= new Vector2(texture2D7.Width, texture2D7.Height / npcFrameCount[nPC2.type]) * nPC2.scale / 2f;
				vector12 += vector10 * nPC2.scale + new Vector2(0f, num62 + num63 + nPC2.gfxOffY);
				int num87 = 0;
				float num88 = 2f / (float)nPC2.oldPos.Length * 0.7f;
				int num89 = nPC2.oldPos.Length - 1;
				while ((float)num89 >= 1f)
				{
					texture2D7 = ((num87 != 0) ? npcTexture[403] : npcTexture[404]);
					spriteBatch.Draw(texture2D7, vector12 + nPC2.oldPos[num89] - nPC2.position, null, nPC2.GetAlpha(color9) * (0.8f - num88 * (float)num89 / 2f), nPC2.oldRot[num89], vector10, nPC2.scale, spriteEffects, 0f);
					texture2D7 = ((num87 != 0) ? glowMaskTexture[133] : glowMaskTexture[134]);
					spriteBatch.Draw(texture2D7, vector12 + nPC2.oldPos[num89] - nPC2.position, null, new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * (1f - num88 * (float)num89 / 2f), nPC2.oldRot[num89], vector10, nPC2.scale, spriteEffects, 0f);
					num87++;
					num89 -= 2;
				}
				texture2D7 = npcTexture[nPC2.type];
				spriteBatch.Draw(texture2D7, vector12, npc[i].frame, npc[i].GetAlpha(color9), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				texture2D7 = glowMaskTexture[135];
				spriteBatch.Draw(texture2D7, vector12, npc[i].frame, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				return;
			}
			case 519:
			{
				NPC nPC = npc[i];
				Texture2D texture2D6 = npcTexture[nPC.type];
				Vector2 vector11 = nPC.Center - screenPosition;
				vector11 -= new Vector2(texture2D6.Width, texture2D6.Height / npcFrameCount[nPC.type]) * nPC.scale / 2f;
				vector11 += vector10 * nPC.scale + new Vector2(0f, num62 + num63 + nPC.gfxOffY);
				texture2D6 = npcTexture[nPC.type];
				spriteBatch.Draw(texture2D6, vector11, npc[i].frame, npc[i].GetAlpha(color9), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				int num83 = 0;
				float num84 = 1f / (float)nPC.oldPos.Length * 0.7f;
				int num85 = nPC.oldPos.Length - 1;
				while ((float)num85 >= 0f)
				{
					float num86 = (float)(nPC.oldPos.Length - num85) / (float)nPC.oldPos.Length;
					Microsoft.Xna.Framework.Color pink = Microsoft.Xna.Framework.Color.Pink;
					pink *= 1f - num84 * (float)num85 / 1f;
					pink.A = (byte)((float)(int)pink.A * (1f - num86));
					spriteBatch.Draw(texture2D6, vector11 + nPC.oldPos[num85] - nPC.position, null, pink, nPC.oldRot[num85], vector10, nPC.scale * MathHelper.Lerp(0.3f, 1.1f, num86), spriteEffects, 0f);
					num83++;
					num85--;
				}
				return;
			}
			case 522:
			{
				NPC nPC3 = npc[i];
				Texture2D texture2D9 = npcTexture[nPC3.type];
				Vector2 vector14 = nPC3.Center - screenPosition;
				vector14 -= new Vector2(texture2D9.Width, texture2D9.Height / npcFrameCount[nPC3.type]) * nPC3.scale / 2f;
				vector14 += vector10 * nPC3.scale + new Vector2(0f, num62 + num63 + nPC3.gfxOffY);
				int num99 = 0;
				float num100 = 1f / (float)nPC3.oldPos.Length * 1.1f;
				int num101 = nPC3.oldPos.Length - 1;
				while ((float)num101 >= 0f)
				{
					float num102 = (float)(nPC3.oldPos.Length - num101) / (float)nPC3.oldPos.Length;
					Microsoft.Xna.Framework.Color white2 = Microsoft.Xna.Framework.Color.White;
					white2 *= 1f - num100 * (float)num101 / 1f;
					white2.A = (byte)((float)(int)white2.A * (1f - num102));
					spriteBatch.Draw(texture2D9, vector14 + nPC3.oldPos[num101] - nPC3.position, null, white2, nPC3.oldRot[num101], vector10, nPC3.scale * MathHelper.Lerp(0.8f, 0.3f, num102), spriteEffects, 0f);
					num99++;
					num101--;
				}
				texture2D9 = extraTexture[57];
				spriteBatch.Draw(texture2D9, vector14, null, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), 0f, texture2D9.Size() / 2f, npc[i].scale, spriteEffects, 0f);
				return;
			}
			case 370:
			case 372:
			case 373:
			{
				Texture2D texture2D10 = npcTexture[type];
				Microsoft.Xna.Framework.Color value12 = Microsoft.Xna.Framework.Color.White;
				float amount4 = 0f;
				bool flag6 = type == 370 && npc[i].ai[0] > 4f;
				bool flag7 = type == 370 && npc[i].ai[0] > 9f;
				int num103 = 120;
				int num104 = 60;
				Microsoft.Xna.Framework.Color color12 = color9;
				if (flag7)
				{
					color9 = buffColor(color9, 0.4f, 0.8f, 0.4f, 1f);
				}
				else if (flag6)
				{
					color9 = buffColor(color9, 0.5f, 0.7f, 0.5f, 1f);
				}
				else if (type == 370 && npc[i].ai[0] == 4f && npc[i].ai[2] > (float)num103)
				{
					float num105 = npc[i].ai[2] - (float)num103;
					num105 /= (float)num104;
					color9 = buffColor(color9, 1f - 0.5f * num105, 1f - 0.3f * num105, 1f - 0.5f * num105, 1f);
				}
				int num106 = 10;
				int num107 = 2;
				switch (type)
				{
				case 370:
					if (npc[i].ai[0] == -1f)
					{
						num106 = 0;
					}
					if (npc[i].ai[0] == 0f || npc[i].ai[0] == 5f || npc[i].ai[0] == 10f)
					{
						num106 = 7;
					}
					if (npc[i].ai[0] == 1f)
					{
						value12 = Microsoft.Xna.Framework.Color.Blue;
						amount4 = 0.5f;
					}
					else
					{
						color12 = color9;
					}
					break;
				case 372:
				case 373:
					if (npc[i].ai[0] == 1f)
					{
						value12 = Microsoft.Xna.Framework.Color.Blue;
						amount4 = 0.5f;
					}
					break;
				}
				for (int num108 = 1; num108 < num106; num108 += num107)
				{
					Vector2 vector24 = npc[i].oldPos[num108];
					Microsoft.Xna.Framework.Color value13 = color12;
					value13 = Microsoft.Xna.Framework.Color.Lerp(value13, value12, amount4);
					value13 = npc[i].GetAlpha(value13);
					value13 *= (float)(num106 - num108) / 15f;
					Vector2 position11 = npc[i].oldPos[num108] + new Vector2(npc[i].width, npc[i].height) / 2f - screenPosition;
					position11 -= new Vector2(texture2D10.Width, texture2D10.Height / npcFrameCount[type]) * npc[i].scale / 2f;
					position11 += vector10 * npc[i].scale + new Vector2(0f, num62 + num63 + npc[i].gfxOffY);
					spriteBatch.Draw(texture2D10, position11, npc[i].frame, value13, npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				}
				int num109 = 0;
				float num110 = 0f;
				float scaleFactor8 = 0f;
				if (type == 370)
				{
					if (npc[i].ai[0] == -1f)
					{
						num109 = 0;
					}
					if (npc[i].ai[0] == 3f || npc[i].ai[0] == 8f)
					{
						int num111 = 60;
						int num112 = 30;
						if (npc[i].ai[2] > (float)num111)
						{
							num109 = 6;
							num110 = 1f - (float)Math.Cos((npc[i].ai[2] - (float)num111) / (float)num112 * ((float)Math.PI * 2f));
							num110 /= 3f;
							scaleFactor8 = 40f;
						}
					}
					if (npc[i].ai[0] == 4f && npc[i].ai[2] > (float)num103)
					{
						num109 = 6;
						num110 = 1f - (float)Math.Cos((npc[i].ai[2] - (float)num103) / (float)num104 * ((float)Math.PI * 2f));
						num110 /= 3f;
						scaleFactor8 = 60f;
					}
					if (npc[i].ai[0] == 9f && npc[i].ai[2] > (float)num103)
					{
						num109 = 6;
						num110 = 1f - (float)Math.Cos((npc[i].ai[2] - (float)num103) / (float)num104 * ((float)Math.PI * 2f));
						num110 /= 3f;
						scaleFactor8 = 60f;
					}
					if (npc[i].ai[0] == 12f)
					{
						num109 = 6;
						num110 = 1f - (float)Math.Cos(npc[i].ai[2] / 30f * ((float)Math.PI * 2f));
						num110 /= 3f;
						scaleFactor8 = 20f;
					}
				}
				for (int num113 = 0; num113 < num109; num113++)
				{
					Microsoft.Xna.Framework.Color value14 = color9;
					value14 = Microsoft.Xna.Framework.Color.Lerp(value14, value12, amount4);
					value14 = npc[i].GetAlpha(value14);
					value14 *= 1f - num110;
					Vector2 position12 = npc[i].Center + ((float)num113 / (float)num109 * ((float)Math.PI * 2f) + npc[i].rotation).ToRotationVector2() * scaleFactor8 * num110 - screenPosition;
					position12 -= new Vector2(texture2D10.Width, texture2D10.Height / npcFrameCount[type]) * npc[i].scale / 2f;
					position12 += vector10 * npc[i].scale + new Vector2(0f, num62 + num63 + npc[i].gfxOffY);
					spriteBatch.Draw(texture2D10, position12, npc[i].frame, value14, npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				}
				Vector2 position13 = npc[i].Center - screenPosition;
				position13 -= new Vector2(texture2D10.Width, texture2D10.Height / npcFrameCount[type]) * npc[i].scale / 2f;
				position13 += vector10 * npc[i].scale + new Vector2(0f, num62 + num63 + npc[i].gfxOffY);
				spriteBatch.Draw(texture2D10, position13, npc[i].frame, npc[i].GetAlpha(color9), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				if (type != 370 || !(npc[i].ai[0] >= 4f))
				{
					return;
				}
				texture2D10 = dukeFishronTexture;
				Microsoft.Xna.Framework.Color color13 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.White, Microsoft.Xna.Framework.Color.Yellow, 0.5f);
				value12 = Microsoft.Xna.Framework.Color.Yellow;
				amount4 = 1f;
				num110 = 0.5f;
				scaleFactor8 = 10f;
				num107 = 1;
				if (npc[i].ai[0] == 4f)
				{
					float num114 = npc[i].ai[2] - (float)num103;
					num114 /= (float)num104;
					value12 *= num114;
					color13 *= num114;
				}
				if (npc[i].ai[0] == 12f)
				{
					float num115 = npc[i].ai[2];
					num115 /= 30f;
					if (num115 > 0.5f)
					{
						num115 = 1f - num115;
					}
					num115 *= 2f;
					num115 = 1f - num115;
					value12 *= num115;
					color13 *= num115;
				}
				for (int num116 = 1; num116 < num106; num116 += num107)
				{
					Vector2 vector25 = npc[i].oldPos[num116];
					Microsoft.Xna.Framework.Color value15 = color13;
					value15 = Microsoft.Xna.Framework.Color.Lerp(value15, value12, amount4);
					value15 *= (float)(num106 - num116) / 15f;
					Vector2 position14 = npc[i].oldPos[num116] + new Vector2(npc[i].width, npc[i].height) / 2f - screenPosition;
					position14 -= new Vector2(texture2D10.Width, texture2D10.Height / npcFrameCount[type]) * npc[i].scale / 2f;
					position14 += vector10 * npc[i].scale + new Vector2(0f, num62 + num63 + npc[i].gfxOffY);
					spriteBatch.Draw(texture2D10, position14, npc[i].frame, value15, npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				}
				for (int num117 = 1; num117 < num109; num117++)
				{
					Microsoft.Xna.Framework.Color value16 = color13;
					value16 = Microsoft.Xna.Framework.Color.Lerp(value16, value12, amount4);
					value16 = npc[i].GetAlpha(value16);
					value16 *= 1f - num110;
					Vector2 position15 = npc[i].Center + ((float)num117 / (float)num109 * ((float)Math.PI * 2f) + npc[i].rotation).ToRotationVector2() * scaleFactor8 * num110 - screenPosition;
					position15 -= new Vector2(texture2D10.Width, texture2D10.Height / npcFrameCount[type]) * npc[i].scale / 2f;
					position15 += vector10 * npc[i].scale + new Vector2(0f, num62 + num63 + npc[i].gfxOffY);
					spriteBatch.Draw(texture2D10, position15, npc[i].frame, value16, npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				}
				spriteBatch.Draw(texture2D10, position13, npc[i].frame, color13, npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				return;
			}
			case 439:
			case 440:
			{
				int num75 = npc[i].frame.Y / (npcTexture[type].Height / npcFrameCount[type]);
				Texture2D texture2D4 = npcTexture[type];
				Texture2D texture2D5 = extraTexture[30];
				Microsoft.Xna.Framework.Rectangle rectangle = texture2D5.Frame();
				rectangle.Height /= 2;
				if (num75 >= 4)
				{
					rectangle.Y += rectangle.Height;
				}
				Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
				float amount3 = 0f;
				Microsoft.Xna.Framework.Color color11 = color9;
				int num76 = 0;
				int num77 = 0;
				int num78 = 0;
				if (npc[i].ai[0] == -1f)
				{
					if (npc[i].ai[1] >= 320f && npc[i].ai[1] < 960f)
					{
						white = Microsoft.Xna.Framework.Color.White;
						amount3 = 0.5f;
						num76 = 6;
						num77 = 2;
						num78 = 1;
					}
				}
				else if (npc[i].ai[0] == 1f)
				{
					white = Microsoft.Xna.Framework.Color.White;
					amount3 = 0.5f;
					num76 = 4;
					num77 = 2;
					num78 = 1;
				}
				else
				{
					color11 = color9;
				}
				for (int num79 = num78; num79 < num76; num79 += num77)
				{
					Vector2 vector26 = npc[i].oldPos[num79];
					Microsoft.Xna.Framework.Color value7 = color11;
					value7 = Microsoft.Xna.Framework.Color.Lerp(value7, white, amount3);
					value7 = npc[i].GetAlpha(value7);
					value7 *= (float)(num76 - num79) / (float)num76;
					value7.A = 100;
					Vector2 position8 = npc[i].oldPos[num79] + new Vector2(npc[i].width, npc[i].height) / 2f - screenPosition;
					position8 -= rectangle.Size() * npc[i].scale / 2f;
					position8 += vector10 * npc[i].scale + new Vector2(0f, num62 + num63 + npc[i].gfxOffY);
					spriteBatch.Draw(texture2D5, position8, rectangle, value7, npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				}
				int num80 = 0;
				float num81 = 0f;
				float scaleFactor2 = 0f;
				if (npc[i].ai[0] == 5f && npc[i].ai[1] >= 0f && npc[i].ai[1] < 30f)
				{
					num80 = 4;
					num81 = 1f - (float)Math.Cos((npc[i].ai[1] - 0f) / 30f * (float)Math.PI);
					num81 /= 2f;
					scaleFactor2 = 70f;
				}
				for (int num82 = 0; num82 < num80; num82++)
				{
					Microsoft.Xna.Framework.Color value8 = color9;
					value8 = Microsoft.Xna.Framework.Color.Lerp(value8, white, amount3);
					value8 = npc[i].GetAlpha(value8);
					value8 *= 1f - num81;
					Vector2 position9 = npc[i].Center + ((float)num82 / (float)num80 * ((float)Math.PI * 2f) + npc[i].rotation).ToRotationVector2() * scaleFactor2 * num81 - screenPosition;
					position9 -= new Vector2(texture2D4.Width, texture2D4.Height / npcFrameCount[type]) * npc[i].scale / 2f;
					position9 += vector10 * npc[i].scale + new Vector2(0f, num62 + num63 + npc[i].gfxOffY);
					spriteBatch.Draw(texture2D5, position9, rectangle, value8, npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				}
				Vector2 position10 = npc[i].Center - screenPosition;
				position10 -= new Vector2(texture2D4.Width, texture2D4.Height / npcFrameCount[type]) * npc[i].scale / 2f;
				position10 += vector10 * npc[i].scale + new Vector2(0f, num62 + num63 + npc[i].gfxOffY);
				spriteBatch.Draw(texture2D4, position10, npc[i].frame, npc[i].GetAlpha(color9), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				return;
			}
			case 392:
			case 393:
			case 394:
			case 395:
			{
				Texture2D texture = npcTexture[type];
				Vector2 vec = npc[i].Center - screenPosition + Vector2.UnitY * npc[i].gfxOffY;
				vec = vec.Floor();
				float scaleFactor3 = 0f;
				if (type == 393)
				{
					scaleFactor3 = -8f;
				}
				spriteBatch.Draw(texture, vec, npc[i].frame, npc[i].GetAlpha(color9), npc[i].rotation, vector10 + Vector2.UnitY * scaleFactor3, npc[i].scale, spriteEffects, 0f);
				if (type == 392)
				{
					spriteBatch.Draw(glowMaskTexture[48], vec, npc[i].frame, new Microsoft.Xna.Framework.Color(200, 200, 200, 0), npc[i].rotation, vector10 + Vector2.UnitY * scaleFactor3, npc[i].scale, spriteEffects, 0f);
				}
				if (type == 395)
				{
					spriteBatch.Draw(glowMaskTexture[49], vec, npc[i].frame, new Microsoft.Xna.Framework.Color(200, 200, 200, 0), npc[i].rotation, vector10 + Vector2.UnitY * scaleFactor3, npc[i].scale, spriteEffects, 0f);
				}
				if (type == 394)
				{
					spriteBatch.Draw(glowMaskTexture[50], vec, npc[i].frame, new Microsoft.Xna.Framework.Color(200, 200, 200, 0), npc[i].rotation, vector10 + Vector2.UnitY * scaleFactor3, npc[i].scale, spriteEffects, 0f);
				}
				return;
			}
			case 83:
			case 84:
			case 179:
				spriteBatch.Draw(npcTexture[type], new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + num62), npc[i].frame, Microsoft.Xna.Framework.Color.White, npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				return;
			case 87:
			case 88:
			case 89:
			case 90:
			case 91:
			case 92:
			{
				Microsoft.Xna.Framework.Color alpha2 = npc[i].GetAlpha(color9);
				byte b5 = (byte)((tileColor.R + tileColor.G + tileColor.B) / 3);
				if (alpha2.R < b5)
				{
					alpha2.R = b5;
				}
				if (alpha2.G < b5)
				{
					alpha2.G = b5;
				}
				if (alpha2.B < b5)
				{
					alpha2.B = b5;
				}
				spriteBatch.Draw(npcTexture[type], new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + num62), npc[i].frame, alpha2, npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				return;
			}
			}
			switch (type)
			{
			case 384:
				return;
			case 491:
			{
				NPC nPC4 = npc[i];
				Texture2D texture8 = npcTexture[nPC4.type];
				Microsoft.Xna.Framework.Rectangle rectangle4 = nPC4.frame;
				Vector2 origin6 = rectangle4.OriginFlip(new Vector2(208f, 460f), spriteEffects);
				Vector2 vector19 = nPC4.Center - screenPosition;
				Vector2 value30 = new Vector2((!spriteEffects.HasFlag(SpriteEffects.FlipHorizontally)) ? 1 : (-1), 1f);
				Microsoft.Xna.Framework.Color alpha7 = nPC4.GetAlpha(color9);
				spriteBatch.Draw(texture8, vector19, rectangle4, alpha7, nPC4.rotation, origin6, nPC4.scale, spriteEffects, 0f);
				int num132 = (int)nPC4.localAI[3] / 8;
				texture8 = extraTexture[40];
				rectangle4 = texture8.Frame(1, 4, 0, num132 % 4);
				origin6 = rectangle4.Size() * new Vector2(0.5f, 1f);
				spriteBatch.Draw(texture8, vector19 + (new Vector2(102f, -384f) * value30).RotatedBy(nPC4.rotation), rectangle4, alpha7, nPC4.rotation, origin6, nPC4.scale, spriteEffects, 0f);
				texture8 = extraTexture[41];
				rectangle4 = texture8.Frame(1, 8, 0, num132 % 8);
				origin6 = rectangle4.Size() * new Vector2(0.5f, 0f) + new Vector2(0f, 10f);
				for (int num133 = 0; num133 < 5; num133++)
				{
					spriteBatch.Draw(texture8, vector19 + (new Vector2(-96 + 34 * num133, 40f) * value30).RotatedBy(nPC4.rotation), rectangle4, alpha7, nPC4.rotation, origin6, nPC4.scale, spriteEffects, 0f);
				}
				texture8 = extraTexture[42];
				rectangle4 = texture8.Frame(1, 4, 0, num132 % 4);
				origin6 = rectangle4.Size() * new Vector2(0.5f, 0f);
				for (int num134 = 0; num134 < 2; num134++)
				{
					spriteBatch.Draw(texture8, vector19 + (new Vector2(158 - 106 * num134, -302f) * value30).RotatedBy(nPC4.rotation), rectangle4, alpha7, nPC4.rotation, origin6, nPC4.scale, spriteEffects, 0f);
				}
				texture8 = extraTexture[43];
				rectangle4 = texture8.Frame(1, 4, 0, num132 % 4);
				origin6 = rectangle4.Size() * new Vector2(0.5f, 0f);
				for (int num135 = 0; num135 < 2; num135++)
				{
					spriteBatch.Draw(texture8, vector19 + (new Vector2(42 - 178 * num135, -444f) * value30).RotatedBy(nPC4.rotation), rectangle4, alpha7, nPC4.rotation, origin6, nPC4.scale, spriteEffects, 0f);
				}
				texture8 = extraTexture[44];
				rectangle4 = texture8.Frame(1, 4, 0, num132 % 4);
				origin6 = rectangle4.Size() * new Vector2(0.5f, 0f);
				spriteBatch.Draw(texture8, vector19 + (new Vector2(-134f, -302f) * value30).RotatedBy(nPC4.rotation), rectangle4, alpha7, nPC4.rotation, origin6, nPC4.scale, spriteEffects, 0f);
				texture8 = extraTexture[45];
				rectangle4 = texture8.Frame(1, 4, 0, (2 + num132) % 4);
				origin6 = rectangle4.Size() * new Vector2(0.5f, 0f);
				spriteBatch.Draw(texture8, vector19 + (new Vector2(-60f, -330f) * value30).RotatedBy(nPC4.rotation), rectangle4, alpha7, nPC4.rotation, origin6, nPC4.scale, spriteEffects, 0f);
				LoadNPC(492);
				if (!NPCLoaded[492])
				{
					return;
				}
				texture8 = npcTexture[492];
				rectangle4 = texture8.Frame(1, 9);
				origin6 = rectangle4.Size() * new Vector2(0.5f, 0f) + new Vector2(0f, 10f);
				for (int num136 = 0; num136 < 4; num136++)
				{
					int num137 = (int)nPC4.ai[num136];
					if (num137 >= 0)
					{
						rectangle4.Y = npc[num137].frame.Y;
						spriteBatch.Draw(texture8, vector19 + (new Vector2(-122 + 68 * num136, -20f) * value30).RotatedBy(nPC4.rotation), rectangle4, alpha7, nPC4.rotation, origin6, nPC4.scale, spriteEffects, 0f);
					}
				}
				return;
			}
			case 398:
			{
				bool flag8 = false;
				Texture2D texture2 = npcTexture[type];
				Texture2D texture3 = extraTexture[16];
				Texture2D texture2D11 = extraTexture[14];
				float num119 = 340f;
				float scaleFactor9 = 0.5f;
				Vector2 value17 = new Vector2(220f, -60f);
				Vector2 vector15 = new Vector2(76f, 66f);
				Texture2D texture2D12 = extraTexture[13];
				Vector2 origin = new Vector2(texture2D12.Width, 278f);
				Vector2 origin2 = new Vector2(0f, 278f);
				Vector2 value18 = new Vector2(0f, 76f);
				Vector2 center = npc[i].Center;
				Microsoft.Xna.Framework.Point point = (npc[i].Center + new Vector2(0f, -150f)).ToTileCoordinates();
				Microsoft.Xna.Framework.Color alpha4 = npc[i].GetAlpha(Microsoft.Xna.Framework.Color.Lerp(Lighting.GetColor(point.X, point.Y), Microsoft.Xna.Framework.Color.White, 0.3f));
				for (int num120 = 0; num120 < 2; num120++)
				{
					bool flag9 = num120 == 0;
					Vector2 value19 = new Vector2((!flag9) ? 1 : (-1), 1f);
					int num121 = -1;
					for (int num122 = 0; num122 < 200; num122++)
					{
						if (npc[num122].active && npc[num122].type == 397 && npc[num122].ai[2] == (float)num120 && npc[num122].ai[3] == (float)i)
						{
							num121 = num122;
							break;
						}
					}
					if (num121 != -1)
					{
						Vector2 vector16 = center + value17 * value19;
						Vector2 value20 = npc[num121].Center + value18;
						Vector2 vector17 = (value20 - vector16) * scaleFactor9;
						if (flag8)
						{
							dust[Dust.NewDust(vector16 + vector17, 0, 0, 6)].noGravity = true;
						}
						float num123 = (float)Math.Acos(vector17.Length() / num119) * (0f - value19.X);
						SpriteEffects effects = (!flag9) ? SpriteEffects.FlipHorizontally : SpriteEffects.None;
						Vector2 origin3 = vector15;
						if (!flag9)
						{
							origin3.X = (float)texture2D11.Width - origin3.X;
						}
						spriteBatch.Draw(texture2D11, vector16 - screenPosition, null, alpha4, vector17.ToRotation() - num123 - (float)Math.PI / 2f, origin3, 1f, effects, 0f);
						if (flag8)
						{
							dust[Dust.NewDust(vector16, 0, 0, 6)].noGravity = true;
						}
						if (flag8)
						{
							dust[Dust.NewDust(center, 0, 0, 6)].noGravity = true;
						}
						if (flag8)
						{
							dust[Dust.NewDust(vector16 + new Vector2(0f, num119).RotatedBy(vector17.ToRotation() - num123 - (float)Math.PI / 2f), 0, 0, 6)].noGravity = true;
						}
					}
				}
				spriteBatch.Draw(texture2D12, center - screenPosition, null, alpha4, 0f, origin, 1f, SpriteEffects.None, 0f);
				spriteBatch.Draw(texture2D12, center - screenPosition, null, alpha4, 0f, origin2, 1f, SpriteEffects.FlipHorizontally, 0f);
				spriteBatch.Draw(texture3, center - screenPosition, null, alpha4, 0f, new Vector2(112f, 101f), 1f, SpriteEffects.None, 0f);
				spriteBatch.Draw(texture2, center - screenPosition, npc[i].frame, alpha4, 0f, npc[i].frame.Size() / 2f, 1f, SpriteEffects.None, 0f);
				return;
			}
			case 397:
			{
				Texture2D texture2D18 = npcTexture[type];
				float num138 = 0.5f;
				Vector2 value31 = new Vector2(220f, -60f);
				Vector2 value32 = new Vector2(0f, 76f);
				Texture2D texture2D19 = extraTexture[15];
				Vector2 vector20 = new Vector2(60f, 30f);
				float num139 = 340f;
				Vector2 center2 = npc[(int)npc[i].ai[3]].Center;
				Microsoft.Xna.Framework.Point point4 = npc[i].Center.ToTileCoordinates();
				Microsoft.Xna.Framework.Color alpha8 = npc[i].GetAlpha(Microsoft.Xna.Framework.Color.Lerp(Lighting.GetColor(point4.X, point4.Y), Microsoft.Xna.Framework.Color.White, 0.3f));
				bool flag10 = npc[i].ai[2] == 0f;
				Vector2 value33 = new Vector2((!flag10) ? 1 : (-1), 1f);
				Vector2 origin7 = new Vector2(120f, 180f);
				if (!flag10)
				{
					origin7.X = (float)texture2D18.Width - origin7.X;
				}
				Texture2D texture2D20 = extraTexture[17];
				Texture2D texture2D21 = extraTexture[19];
				Vector2 vector21 = new Vector2(26f, 42f);
				if (!flag10)
				{
					vector21.X = (float)texture2D20.Width - vector21.X;
				}
				Vector2 value34 = new Vector2(30f, 66f);
				Vector2 value35 = new Vector2(1f * (0f - value33.X), 3f);
				Texture2D texture2D22 = extraTexture[26];
				Microsoft.Xna.Framework.Rectangle value36 = texture2D22.Frame();
				value36.Height /= 4;
				Vector2 value37 = center2 + value31 * value33;
				Vector2 vector22 = npc[i].Center + value32;
				Vector2 v = value37 - vector22;
				v *= 1f - num138;
				Vector2 origin8 = vector20;
				if (!flag10)
				{
					origin8.X = (float)texture2D19.Width - origin8.X;
				}
				float num140 = (float)Math.Acos(v.Length() / num139) * (0f - value33.X);
				spriteBatch.Draw(texture2D19, vector22 - screenPosition, null, alpha8, v.ToRotation() + num140 - (float)Math.PI / 2f, origin8, 1f, spriteEffects, 0f);
				if (npc[i].ai[0] == -2f)
				{
					int num141 = (int)npc[i].ai[1];
					num141 /= 8;
					value36.Y += value36.Height * num141;
					spriteBatch.Draw(texture2D22, npc[i].Center - screenPosition, value36, alpha8, 0f, vector21 - new Vector2(4f, 4f), 1f, spriteEffects, 0f);
				}
				else
				{
					spriteBatch.Draw(texture2D20, npc[i].Center - screenPosition, null, alpha8, 0f, vector21, 1f, spriteEffects, 0f);
					Vector2 value38 = Utils.Vector2FromElipse(npc[i].localAI[0].ToRotationVector2(), value34 * npc[i].localAI[1]);
					spriteBatch.Draw(texture2D21, npc[i].Center - screenPosition + value38 + value35, null, alpha8, 0f, new Vector2(texture2D21.Width, texture2D21.Height) / 2f, 1f, SpriteEffects.None, 0f);
				}
				spriteBatch.Draw(texture2D18, npc[i].Center - screenPosition, npc[i].frame, alpha8, 0f, origin7, 1f, spriteEffects, 0f);
				return;
			}
			case 396:
			{
				Texture2D texture5 = npcTexture[type];
				Vector2 origin4 = new Vector2(191f, 130f);
				Texture2D texture6 = extraTexture[18];
				Texture2D texture2D13 = extraTexture[19];
				Vector2 vector18 = new Vector2(19f, 34f);
				Vector2 value22 = new Vector2(27f, 59f);
				Vector2 value23 = new Vector2(0f, 0f);
				Texture2D texture2D14 = extraTexture[25];
				Vector2 value24 = new Vector2(0f, 214f).RotatedBy(npc[i].rotation);
				Microsoft.Xna.Framework.Rectangle rectangle2 = texture2D14.Frame();
				rectangle2.Height /= 3;
				rectangle2.Y += rectangle2.Height * (int)(npc[i].localAI[2] / 7f);
				Texture2D texture2D15 = extraTexture[29];
				Vector2 value25 = new Vector2(0f, 4f).RotatedBy(npc[i].rotation);
				Microsoft.Xna.Framework.Rectangle rectangle3 = texture2D15.Frame();
				rectangle3.Height /= 4;
				rectangle3.Y += rectangle3.Height * (int)(npc[i].localAI[3] / 5f);
				Texture2D texture2D16 = extraTexture[26];
				Microsoft.Xna.Framework.Rectangle value26 = texture2D16.Frame();
				value26.Height /= 4;
				Vector2 center4 = npc[(int)npc[i].ai[3]].Center;
				Microsoft.Xna.Framework.Point point2 = npc[i].Center.ToTileCoordinates();
				Microsoft.Xna.Framework.Color alpha5 = npc[i].GetAlpha(Microsoft.Xna.Framework.Color.Lerp(Lighting.GetColor(point2.X, point2.Y), Microsoft.Xna.Framework.Color.White, 0.3f));
				if (npc[i].ai[0] < 0f)
				{
					int num128 = (int)npc[i].ai[1];
					num128 /= 8;
					value26.Y += value26.Height * num128;
					spriteBatch.Draw(texture2D16, npc[i].Center - screenPosition, value26, alpha5, npc[i].rotation, vector18 + new Vector2(4f, 4f), 1f, spriteEffects, 0f);
				}
				else
				{
					spriteBatch.Draw(texture6, npc[i].Center - screenPosition, null, alpha5, npc[i].rotation, vector18, 1f, spriteEffects, 0f);
					Vector2 value27 = Utils.Vector2FromElipse(npc[i].localAI[0].ToRotationVector2(), value22 * npc[i].localAI[1]);
					spriteBatch.Draw(texture2D13, npc[i].Center - screenPosition + value27 + value23, null, alpha5, npc[i].rotation, new Vector2(texture2D13.Width, texture2D13.Height) / 2f, 1f, SpriteEffects.None, 0f);
				}
				spriteBatch.Draw(texture5, npc[i].Center - screenPosition, npc[i].frame, alpha5, npc[i].rotation, origin4, 1f, spriteEffects, 0f);
				spriteBatch.Draw(texture2D15, (npc[i].Center - screenPosition + value25).Floor(), rectangle3, alpha5, npc[i].rotation, rectangle3.Size() / 2f, 1f, spriteEffects, 0f);
				spriteBatch.Draw(texture2D14, (npc[i].Center - screenPosition + value24).Floor(), rectangle2, alpha5, npc[i].rotation, rectangle2.Size() / 2f, 1f, spriteEffects, 0f);
				return;
			}
			case 400:
			{
				Texture2D texture7 = npcTexture[type];
				Texture2D texture2D17 = extraTexture[19];
				Vector2 origin5 = new Vector2(40f, 40f);
				Vector2 value28 = new Vector2(30f, 30f);
				Vector2 center5 = npc[i].Center;
				Microsoft.Xna.Framework.Point point3 = npc[i].Center.ToTileCoordinates();
				Microsoft.Xna.Framework.Color alpha6 = npc[i].GetAlpha(Microsoft.Xna.Framework.Color.Lerp(Lighting.GetColor(point3.X, point3.Y), Microsoft.Xna.Framework.Color.White, 0.3f));
				spriteBatch.Draw(texture7, npc[i].Center - screenPosition, npc[i].frame, alpha6, npc[i].rotation, origin5, 1f, spriteEffects, 0f);
				Vector2 value29 = Utils.Vector2FromElipse(npc[i].localAI[0].ToRotationVector2(), value28 * npc[i].localAI[1]);
				spriteBatch.Draw(texture2D17, npc[i].Center - screenPosition + value29, null, alpha6, npc[i].rotation, texture2D17.Size() / 2f, npc[i].localAI[2], SpriteEffects.None, 0f);
				return;
			}
			case 416:
			{
				int num129 = -1;
				int num130 = (int)npc[i].ai[0];
				Vector2 position17 = npc[i].position;
				Vector2 spinningpoint = Vector2.Zero;
				if (npc[num130].active && npc[num130].type == 415)
				{
					num129 = num130;
				}
				if (num129 != -1)
				{
					Vector2 position18 = npc[i].position;
					npc[i].Bottom = npc[num129].Bottom;
					position17 = npc[i].position;
					npc[i].position = position18;
					npc[i].gfxOffY = npc[num129].gfxOffY;
					spinningpoint = npc[num129].velocity;
				}
				Microsoft.Xna.Framework.Rectangle frame = npc[i].frame;
				spriteBatch.Draw(npcTexture[type], new Vector2(position17.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, position17.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + num62 + npc[i].gfxOffY), frame, npc[i].GetAlpha(color9), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				if (npc[i].color != default(Microsoft.Xna.Framework.Color))
				{
					spriteBatch.Draw(npcTexture[type], new Vector2(position17.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, position17.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + num62 + npc[i].gfxOffY), frame, npc[i].GetColor(color9), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				}
				spriteBatch.Draw(glowMaskTexture[156], position17 + npc[i].Size * new Vector2(0.5f, 1f) - screenPosition + new Vector2((float)(-npcTexture[type].Width) * npc[i].scale / 2f + vector10.X * npc[i].scale, (float)(-npcTexture[type].Height) * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + npc[i].gfxOffY), npc[i].frame, new Microsoft.Xna.Framework.Color(255 - npc[i].alpha, 255 - npc[i].alpha, 255 - npc[i].alpha, 255 - npc[i].alpha), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				float scaleFactor10 = 0.5f + (npc[i].GetAlpha(color9).ToVector3() - new Vector3(0.5f)).Length() * 0.5f;
				for (int num131 = 0; num131 < 4; num131++)
				{
					spriteBatch.Draw(glowMaskTexture[156], position17 + npc[i].Size * new Vector2(0.5f, 1f) - screenPosition + new Vector2((float)(-npcTexture[type].Width) * npc[i].scale / 2f + vector10.X * npc[i].scale, (float)(-npcTexture[type].Height) * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + npc[i].gfxOffY) + spinningpoint.RotatedBy((float)num131 * ((float)Math.PI / 2f)) * scaleFactor10, npc[i].frame, new Microsoft.Xna.Framework.Color(64, 64, 64, 0), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				}
				return;
			}
			case 399:
			{
				Texture2D texture4 = npcTexture[type];
				Vector2 vec2 = npc[i].position - screenPosition + Vector2.UnitY * npc[i].gfxOffY;
				vec2 = vec2.Floor();
				float num124 = 5f;
				for (int num125 = 0; (float)num125 < num124; num125++)
				{
					float num126 = 1f - (GlobalTime + (float)num125) % num124 / num124;
					Microsoft.Xna.Framework.Color color14 = Microsoft.Xna.Framework.Color.LimeGreen;
					if (npc[i].ai[0] == 1f)
					{
						color14 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.LimeGreen, Microsoft.Xna.Framework.Color.Red, MathHelper.Clamp(npc[i].ai[1] / 20f, 0f, 1f));
					}
					if (npc[i].ai[0] == 2f)
					{
						color14 = Microsoft.Xna.Framework.Color.Red;
					}
					color14 *= 1f - num126;
					color14.A = 0;
					for (int num127 = 0; num127 < 2; num127++)
					{
						spriteBatch.Draw(extraTexture[27], npc[i].Center - screenPosition + Vector2.UnitY * (npc[i].gfxOffY - 4f + 6f), null, color14, (float)Math.PI / 2f, new Vector2(10f, 48f), num126 * 4f, SpriteEffects.None, 0f);
					}
				}
				spriteBatch.Draw(texture4, new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + num62 + npc[i].gfxOffY), npc[i].frame, npc[i].GetAlpha(color9), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				texture4 = glowMaskTexture[100];
				spriteBatch.Draw(texture4, new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + num62 + npc[i].gfxOffY), npc[i].frame, new Microsoft.Xna.Framework.Color(127 - npc[i].alpha / 2, 127 - npc[i].alpha / 2, 127 - npc[i].alpha / 2, 0), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				texture4 = extraTexture[20];
				Microsoft.Xna.Framework.Rectangle value21 = texture4.Frame(1, 4, 0, (int)npc[i].ai[0] + 1);
				Vector2 position16 = new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)texture4.Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + num62 + npc[i].gfxOffY + 18f + 6f);
				spriteBatch.Draw(texture4, position16, value21, npc[i].GetAlpha(color9), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				texture4 = glowMaskTexture[101];
				spriteBatch.Draw(texture4, position16, value21, new Microsoft.Xna.Framework.Color(127 - npc[i].alpha / 2, 127 - npc[i].alpha / 2, 127 - npc[i].alpha / 2, 0), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				return;
			}
			case 94:
			{
				for (int num118 = 1; num118 < 6; num118 += 2)
				{
					Vector2 vector27 = npc[i].oldPos[num118];
					Microsoft.Xna.Framework.Color alpha3 = npc[i].GetAlpha(color9);
					alpha3.R = (byte)(alpha3.R * (10 - num118) / 15);
					alpha3.G = (byte)(alpha3.G * (10 - num118) / 15);
					alpha3.B = (byte)(alpha3.B * (10 - num118) / 15);
					alpha3.A = (byte)(alpha3.A * (10 - num118) / 15);
					spriteBatch.Draw(npcTexture[type], new Vector2(npc[i].oldPos[num118].X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].oldPos[num118].Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63), npc[i].frame, alpha3, npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				}
				break;
			}
			}
			if (type == 125 || type == 126 || type == 127 || type == 128 || type == 129 || type == 130 || type == 131 || type == 139 || type == 140)
			{
				for (int num142 = 9; num142 >= 0; num142 -= 2)
				{
					Vector2 vector28 = npc[i].oldPos[num142];
					Microsoft.Xna.Framework.Color alpha9 = npc[i].GetAlpha(color9);
					alpha9.R = (byte)(alpha9.R * (10 - num142) / 20);
					alpha9.G = (byte)(alpha9.G * (10 - num142) / 20);
					alpha9.B = (byte)(alpha9.B * (10 - num142) / 20);
					alpha9.A = (byte)(alpha9.A * (10 - num142) / 20);
					spriteBatch.Draw(npcTexture[type], new Vector2(npc[i].oldPos[num142].X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].oldPos[num142].Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63), npc[i].frame, alpha9, npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				}
			}
			if (type == 417 && npc[i].ai[0] >= 6f && npc[i].ai[0] <= 6f)
			{
				for (int num143 = 5; num143 >= 0; num143--)
				{
					Vector2 vector29 = npc[i].oldPos[num143];
					Microsoft.Xna.Framework.Color alpha10 = npc[i].GetAlpha(color9);
					alpha10.R = (byte)(alpha10.R * (10 - num143) / 20);
					alpha10.G = (byte)(alpha10.G * (10 - num143) / 20);
					alpha10.B = (byte)(alpha10.B * (10 - num143) / 20);
					alpha10.A = (byte)(alpha10.A * (10 - num143) / 20);
					spriteBatch.Draw(npcTexture[type], new Vector2(npc[i].oldPos[num143].X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].oldPos[num143].Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63), npc[i].frame, alpha10, npc[i].oldRot[num143], vector10, MathHelper.Lerp(0.5f, 1f, (5f - (float)num143) / 6f), spriteEffects, 0f);
				}
			}
			if (type == 419 && npc[i].ai[2] <= -9f)
			{
				int num144 = glowMaskTexture[154].Height / npcFrameCount[type];
				int num145 = npc[i].frame.Y / num144;
				for (int num146 = 6; num146 >= 0; num146--)
				{
					Vector2 vector30 = npc[i].oldPos[num146];
					Microsoft.Xna.Framework.Color white3 = Microsoft.Xna.Framework.Color.White;
					white3.R = (byte)(255 * (10 - num146) / 20);
					white3.G = (byte)(255 * (10 - num146) / 20);
					white3.B = (byte)(255 * (10 - num146) / 20);
					white3.A = 0;
					Microsoft.Xna.Framework.Rectangle frame2 = npc[i].frame;
					int num147 = (num145 - 3 - num146) % 3;
					if (num147 < 0)
					{
						num147 += 3;
					}
					num147 += 5;
					frame2.Y = num144 * num147;
					spriteBatch.Draw(glowMaskTexture[154], new Vector2(npc[i].oldPos[num146].X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].oldPos[num146].Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63), frame2, white3, npc[i].oldRot[num146], vector10, MathHelper.Lerp(0.75f, 1.2f, (10f - (float)num146) / 10f), spriteEffects, 0f);
				}
			}
			if (type == 418 && (npc[i].ai[0] == 2f || npc[i].ai[0] == 4f))
			{
				Texture2D texture2D23 = extraTexture[55];
				Vector2 origin9 = new Vector2(texture2D23.Width / 2, texture2D23.Height / 8 + 14);
				int num148 = (int)npc[i].ai[1] / 2;
				float num149 = -(float)Math.PI / 2f * (float)npc[i].spriteDirection;
				float num150 = npc[i].ai[1] / 45f;
				if (num150 > 1f)
				{
					num150 = 1f;
				}
				num148 %= 4;
				for (int num151 = 6; num151 >= 0; num151--)
				{
					Vector2 vector31 = npc[i].oldPos[num151];
					Microsoft.Xna.Framework.Color value39 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.Gold, Microsoft.Xna.Framework.Color.OrangeRed, num150);
					value39 = Microsoft.Xna.Framework.Color.Lerp(value39, Microsoft.Xna.Framework.Color.Blue, (float)num151 / 12f);
					value39.A = (byte)(64f * num150);
					value39.R = (byte)(value39.R * (10 - num151) / 20);
					value39.G = (byte)(value39.G * (10 - num151) / 20);
					value39.B = (byte)(value39.B * (10 - num151) / 20);
					value39.A = (byte)(value39.A * (10 - num151) / 20);
					value39 *= num150;
					int num152 = (num148 - num151) % 4;
					if (num152 < 0)
					{
						num152 += 4;
					}
					Microsoft.Xna.Framework.Rectangle value40 = texture2D23.Frame(1, 4, 0, num152);
					spriteBatch.Draw(texture2D23, new Vector2(npc[i].oldPos[num151].X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].oldPos[num151].Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63), value40, value39, npc[i].oldRot[num151] + num149, origin9, MathHelper.Lerp(0.1f, 1.2f, (10f - (float)num151) / 10f), spriteEffects, 0f);
				}
			}
			if (type == 516)
			{
				int num153 = npcTexture[type].Height / npcFrameCount[type];
				int num154 = npc[i].frame.Y / num153;
				for (int num155 = 6; num155 >= 0; num155--)
				{
					Vector2 vector32 = npc[i].oldPos[num155];
					Microsoft.Xna.Framework.Color white4 = Microsoft.Xna.Framework.Color.White;
					white4.R = (byte)(255 * (10 - num155) / 20);
					white4.G = (byte)(255 * (10 - num155) / 20);
					white4.B = (byte)(255 * (10 - num155) / 20);
					white4.A = (byte)(255 * (10 - num155) / 20);
					white4 = Microsoft.Xna.Framework.Color.Lerp(white4, Microsoft.Xna.Framework.Color.Transparent, (float)num155 / 6f);
					Microsoft.Xna.Framework.Rectangle frame3 = npc[i].frame;
					int num156 = (num154 - 4 - num155) % 4;
					if (num156 < 0)
					{
						num156 += 4;
					}
					frame3.Y = num153 * num156;
					spriteBatch.Draw(npcTexture[type], new Vector2(npc[i].oldPos[num155].X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].oldPos[num155].Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63), frame3, white4, npc[i].rotation, vector10, MathHelper.Lerp(0.35f, 1.2f, (10f - (float)num155) / 10f), spriteEffects, 0f);
				}
			}
			Microsoft.Xna.Framework.Rectangle frame4 = npc[i].frame;
			if (type == 182 || type == 289)
			{
				frame4.Height -= 2;
			}
			if (npc[i].aiStyle == 7)
			{
				NPC n2 = npc[i];
				DrawNPCExtras(n2, true, num63, num62, color9, vector10, spriteEffects);
			}
			if (type == 346 && (double)npc[i].life < (double)npc[i].lifeMax * 0.5)
			{
				spriteBatch.Draw(santaTankTexture, new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + num62 + npc[i].gfxOffY), frame4, npc[i].GetAlpha(color9), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
			}
			else if (type == 356)
			{
				frame4.Height--;
				spriteBatch.Draw(npcTexture[type], new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + num62 + npc[i].gfxOffY), frame4, npc[i].GetAlpha(color9), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
			}
			else if (type == 360)
			{
				float num157 = 0f;
				if (npc[i].ai[2] == 0f)
				{
					if (npc[i].rotation == 3.14f || npc[i].rotation == -3.14f)
					{
						num63 = 2f;
					}
					if (npc[i].direction < 0 && (npc[i].rotation == 1.57f || npc[i].rotation == 4.71f))
					{
						num157 = 1f;
					}
					if (npc[i].direction > 0 && (npc[i].rotation == 1.57f || npc[i].rotation == 4.71f))
					{
						num157 = -1f;
					}
				}
				spriteBatch.Draw(npcTexture[type], new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale + num157, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + num62 + npc[i].gfxOffY), frame4, npc[i].GetAlpha(color9), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
			}
			else if (type == 266 && npc[i].life < npc[i].lifeMax && expertMode)
			{
				Microsoft.Xna.Framework.Color alpha11 = npc[i].GetAlpha(color9);
				float num158 = 1f - (float)npc[i].life / (float)npc[i].lifeMax;
				num158 *= num158;
				alpha11.R = (byte)((float)(int)alpha11.R * num158);
				alpha11.G = (byte)((float)(int)alpha11.G * num158);
				alpha11.B = (byte)((float)(int)alpha11.B * num158);
				alpha11.A = (byte)((float)(int)alpha11.A * num158);
				for (int num159 = 0; num159 < 4; num159++)
				{
					Vector2 position19 = npc[i].position;
					float num160 = Math.Abs(npc[i].Center.X - Main.player[myPlayer].Center.X);
					float num161 = Math.Abs(npc[i].Center.Y - Main.player[myPlayer].Center.Y);
					if (num159 == 0 || num159 == 2)
					{
						position19.X = Main.player[myPlayer].Center.X + num160;
					}
					else
					{
						position19.X = Main.player[myPlayer].Center.X - num160;
					}
					position19.X -= npc[i].width / 2;
					if (num159 == 0 || num159 == 1)
					{
						position19.Y = Main.player[myPlayer].Center.Y + num161;
					}
					else
					{
						position19.Y = Main.player[myPlayer].Center.Y - num161;
					}
					position19.Y -= npc[i].height / 2;
					spriteBatch.Draw(npcTexture[type], new Vector2(position19.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, position19.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + num62 + npc[i].gfxOffY), frame4, alpha11, npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				}
				spriteBatch.Draw(npcTexture[type], new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + num62 + npc[i].gfxOffY), frame4, npc[i].GetAlpha(color9), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
			}
			else if (type == 421 && npc[i].ai[0] == 5f)
			{
				Player player = Main.player[npc[i].target];
				if (player.gravDir == -1f)
				{
					spriteEffects |= SpriteEffects.FlipVertically;
				}
				spriteBatch.Draw(npcTexture[type], new Vector2(player.direction * 4, player.gfxOffY) + ((player.gravDir == 1f) ? player.Top : player.Bottom) - screenPosition, frame4, npc[i].GetAlpha(color9), npc[i].rotation, frame4.Size() / 2f, npc[i].scale, spriteEffects, 0f);
				spriteBatch.Draw(glowMaskTexture[146], new Vector2(player.direction * 4, player.gfxOffY) + ((player.gravDir == 1f) ? player.Top : player.Bottom) - screenPosition, frame4, npc[i].GetAlpha(color9), npc[i].rotation, frame4.Size() / 2f, npc[i].scale, spriteEffects, 0f);
			}
			else if (type == 518)
			{
				Vector2 value41 = new Vector2(-10f, 0f);
				spriteBatch.Draw(npcTexture[type], new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + num62 + npc[i].gfxOffY), frame4, npc[i].GetAlpha(color9), npc[i].rotation, vector10 + value41, npc[i].scale, spriteEffects, 0f);
				if (npc[i].color != default(Microsoft.Xna.Framework.Color))
				{
					spriteBatch.Draw(npcTexture[type], new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + num62 + npc[i].gfxOffY), frame4, npc[i].GetColor(color9), npc[i].rotation, vector10 + value41, npc[i].scale, spriteEffects, 0f);
				}
			}
			else
			{
				spriteBatch.Draw(npcTexture[type], new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + num62 + npc[i].gfxOffY), frame4, npc[i].GetAlpha(color9), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				if (npc[i].color != default(Microsoft.Xna.Framework.Color))
				{
					spriteBatch.Draw(npcTexture[type], new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + num62 + npc[i].gfxOffY), frame4, npc[i].GetColor(color9), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				}
			}
			if (npc[i].confused)
			{
				spriteBatch.Draw(confuseTexture, new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + num62 - (float)confuseTexture.Height - 20f), new Microsoft.Xna.Framework.Rectangle(0, 0, confuseTexture.Width, confuseTexture.Height), new Microsoft.Xna.Framework.Color(250, 250, 250, 70), npc[i].velocity.X * -0.05f, new Vector2(confuseTexture.Width / 2, confuseTexture.Height / 2), essScale + 0.2f, SpriteEffects.None, 0f);
			}
			if (type >= 134 && type <= 136 && color9 != Microsoft.Xna.Framework.Color.Black)
			{
				spriteBatch.Draw(destTexture[type - 134], new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + num62), npc[i].frame, new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * (1f - (float)npc[i].alpha / 255f), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
			}
			else if (type == 125)
			{
				spriteBatch.Draw(EyeLaserTexture, new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + num62), npc[i].frame, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
			}
			else if (type == 139)
			{
				spriteBatch.Draw(probeTexture, new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + num62), npc[i].frame, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
			}
			else if (type == 127)
			{
				spriteBatch.Draw(BoneEyesTexture, new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + num62), npc[i].frame, new Microsoft.Xna.Framework.Color(200, 200, 200, 0), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
			}
			else if (type == 131)
			{
				spriteBatch.Draw(BoneLaserTexture, new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + num62), npc[i].frame, new Microsoft.Xna.Framework.Color(200, 200, 200, 0), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
			}
			else if (type == 120)
			{
				for (int num162 = 1; num162 < npc[i].oldPos.Length; num162++)
				{
					Vector2 vector33 = npc[i].oldPos[num162];
					Microsoft.Xna.Framework.Color color15 = default(Microsoft.Xna.Framework.Color);
					color15.R = (byte)(150 * (10 - num162) / 15);
					color15.G = (byte)(100 * (10 - num162) / 15);
					color15.B = (byte)(150 * (10 - num162) / 15);
					color15.A = (byte)(50 * (10 - num162) / 15);
					spriteBatch.Draw(chaosTexture, new Vector2(npc[i].oldPos[num162].X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].oldPos[num162].Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63), npc[i].frame, color15, npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				}
			}
			else if (type == 137 || type == 138)
			{
				for (int num163 = 1; num163 < npc[i].oldPos.Length; num163++)
				{
					Vector2 vector34 = npc[i].oldPos[num163];
					Microsoft.Xna.Framework.Color color16 = default(Microsoft.Xna.Framework.Color);
					color16.R = (byte)(150 * (10 - num163) / 15);
					color16.G = (byte)(100 * (10 - num163) / 15);
					color16.B = (byte)(150 * (10 - num163) / 15);
					color16.A = (byte)(50 * (10 - num163) / 15);
					spriteBatch.Draw(npcTexture[type], new Vector2(npc[i].oldPos[num163].X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].oldPos[num163].Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63), npc[i].frame, color16, npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				}
			}
			else if (type == 327)
			{
				spriteBatch.Draw(pumpkingFaceTexture, new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63), npc[i].frame, Microsoft.Xna.Framework.Color.White, npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				for (int num164 = 1; num164 < 10; num164++)
				{
					Microsoft.Xna.Framework.Color color17 = new Microsoft.Xna.Framework.Color(110 - num164 * 10, 110 - num164 * 10, 110 - num164 * 10, 110 - num164 * 10);
					Vector2 value42 = new Vector2((float)rand.Next(-10, 11) * 0.2f, (float)rand.Next(-10, 11) * 0.2f);
					spriteBatch.Draw(pumpkingFaceTexture, new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63) + value42, npc[i].frame, color17, npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				}
			}
			else if (type == 325)
			{
				spriteBatch.Draw(treeFaceTexture, new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63), npc[i].frame, Microsoft.Xna.Framework.Color.White, npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				for (int num165 = 1; num165 < 10; num165++)
				{
					Microsoft.Xna.Framework.Color color18 = new Microsoft.Xna.Framework.Color(110 - num165 * 10, 110 - num165 * 10, 110 - num165 * 10, 110 - num165 * 10);
					Vector2 value43 = new Vector2((float)rand.Next(-10, 11) * 0.2f, (float)rand.Next(-10, 11) * 0.2f);
					spriteBatch.Draw(treeFaceTexture, new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63) + value43, npc[i].frame, color18, npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				}
			}
			else if (type == 345)
			{
				spriteBatch.Draw(iceQueenTexture, new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63), npc[i].frame, Microsoft.Xna.Framework.Color.White, npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				for (int num166 = 1; num166 < 5; num166++)
				{
					Microsoft.Xna.Framework.Color color19 = new Microsoft.Xna.Framework.Color(100 - num166 * 10, 100 - num166 * 10, 100 - num166 * 10, 100 - num166 * 10);
					spriteBatch.Draw(iceQueenTexture, new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63) - npc[i].velocity * num166 * 0.2f, npc[i].frame, color19, npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				}
			}
			else if (type == 355)
			{
				spriteBatch.Draw(fireflyTexture, new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63), npc[i].frame, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
			}
			else if (type == 358)
			{
				spriteBatch.Draw(lightningbugTexture, new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63), npc[i].frame, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
			}
			else if (type == 82)
			{
				spriteBatch.Draw(wraithEyeTexture, new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63), npc[i].frame, Microsoft.Xna.Framework.Color.White, npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				for (int num167 = 1; num167 < 10; num167++)
				{
					Microsoft.Xna.Framework.Color color20 = new Microsoft.Xna.Framework.Color(110 - num167 * 10, 110 - num167 * 10, 110 - num167 * 10, 110 - num167 * 10);
					spriteBatch.Draw(wraithEyeTexture, new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63) - npc[i].velocity * num167 * 0.5f, npc[i].frame, color20, npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				}
			}
			else if (type == 253)
			{
				spriteBatch.Draw(reaperEyeTexture, new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 3f + vector10.Y * npc[i].scale + num63), npc[i].frame, Microsoft.Xna.Framework.Color.White, npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				for (int num168 = 1; num168 < 20; num168++)
				{
					Microsoft.Xna.Framework.Color color21 = new Microsoft.Xna.Framework.Color(210 - num168 * 20, 210 - num168 * 20, 210 - num168 * 20, 210 - num168 * 20);
					spriteBatch.Draw(reaperEyeTexture, new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 3f + vector10.Y * npc[i].scale + num63) - npc[i].velocity * num168 * 0.5f, npc[i].frame, color21, npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				}
			}
			else if (type == 245 && npc[i].alpha == 0)
			{
				Microsoft.Xna.Framework.Color color22 = new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, 0);
				spriteBatch.Draw(golemTexture[3], new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + num62 + npc[i].gfxOffY), frame4, color22, npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
			}
			else if (type == 246)
			{
				Microsoft.Xna.Framework.Color color23 = new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, 0);
				if (npc[i].frame.Y < 222)
				{
					spriteBatch.Draw(golemTexture[1], new Vector2(npc[i].Center.X - screenPosition.X - 20f, npc[i].Center.Y - screenPosition.Y - 27f), new Microsoft.Xna.Framework.Rectangle(0, 0, golemTexture[1].Width, golemTexture[1].Height / 2), color23, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				else if (npc[i].frame.Y < 444)
				{
					spriteBatch.Draw(golemTexture[2], new Vector2(npc[i].Center.X - screenPosition.X + 26f, npc[i].Center.Y - screenPosition.Y - 28f), new Microsoft.Xna.Framework.Rectangle(0, 0, golemTexture[2].Width, golemTexture[2].Height / 4), color23, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				else
				{
					spriteBatch.Draw(golemTexture[2], new Vector2(npc[i].Center.X - screenPosition.X - 38f, npc[i].Center.Y - screenPosition.Y - 28f), new Microsoft.Xna.Framework.Rectangle(0, golemTexture[2].Height / 2, golemTexture[2].Width, golemTexture[2].Height / 4), color23, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
			}
			else if (type == 249)
			{
				Microsoft.Xna.Framework.Color color24 = new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, 0);
				spriteBatch.Draw(golemTexture[1], new Vector2(npc[i].Center.X - screenPosition.X - 20f, npc[i].Center.Y - screenPosition.Y - 47f), new Microsoft.Xna.Framework.Rectangle(0, 0, golemTexture[1].Width, golemTexture[1].Height / 2), color24, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			}
			else if (type == 383)
			{
				spriteBatch.Draw(glowMaskTexture[11], new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + num62 + npc[i].gfxOffY), frame4, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				if (npc[i].ai[2] != 0f && npc[(int)npc[i].ai[2] - 1].active && npc[(int)npc[i].ai[2] - 1].type == 384)
				{
					float num196 = npc[i].ai[2];
					spriteBatch.Draw(npcTexture[384], new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + num62 + npc[i].gfxOffY), null, new Microsoft.Xna.Framework.Color(100, 100, 100, 0), npc[i].rotation, new Vector2(npcTexture[384].Width, npcTexture[384].Height) / 2f, npc[i].scale, spriteEffects, 0f);
				}
			}
			else if (type == 381)
			{
				Vector2 zero3 = Vector2.Zero;
				Vector2 origin10 = Vector2.Zero;
				int num169 = npcTexture[type].Height / npcFrameCount[type];
				int num170 = npc[i].frame.Y / num169;
				Microsoft.Xna.Framework.Rectangle value44 = new Microsoft.Xna.Framework.Rectangle(0, 0, 32, 42);
				switch (num170)
				{
				case 0:
					zero3 += new Vector2(8f, 32f);
					break;
				case 1:
					zero3 += new Vector2(6f, 72f);
					break;
				case 2:
					zero3 += new Vector2(8f, 126f);
					break;
				case 3:
					zero3 += new Vector2(6f, 174f);
					break;
				case 4:
					zero3 += new Vector2(6f, 224f);
					break;
				case 5:
					zero3 += new Vector2(8f, 272f);
					break;
				case 6:
					zero3 += new Vector2(10f, 318f);
					break;
				case 7:
					zero3 += new Vector2(14f, 366f);
					break;
				case 8:
					zero3 += new Vector2(10f, 414f);
					break;
				}
				zero3.Y -= num169 * num170;
				zero3 -= vector10;
				int num171 = 2;
				if (npc[i].ai[2] > 0f)
				{
					num171 = (int)npc[i].ai[2] - 1;
				}
				if (npc[i].velocity.Y != 0f)
				{
					num171 = 3;
				}
				value44.Y += 44 * num171;
				switch (num171)
				{
				case 0:
					origin10 = new Vector2(10f, 18f);
					break;
				case 1:
					origin10 = new Vector2(8f, 20f);
					break;
				case 2:
					origin10 = new Vector2(8f, 20f);
					break;
				case 3:
					origin10 = new Vector2(8f, 20f);
					break;
				case 4:
					origin10 = new Vector2(6f, 18f);
					break;
				}
				if (spriteEffects.HasFlag(SpriteEffects.FlipHorizontally))
				{
					zero3.X *= -1f;
					origin10.X = (float)value44.Width - origin10.X;
				}
				zero3 += npc[i].Center;
				zero3 -= screenPosition;
				zero3.Y += npc[i].gfxOffY;
				spriteBatch.Draw(extraTexture[0], zero3, value44, color9, npc[i].rotation, origin10, npc[i].scale, spriteEffects, 0f);
				spriteBatch.Draw(glowMaskTexture[24], zero3, value44, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), npc[i].rotation, origin10, npc[i].scale, spriteEffects, 0f);
			}
			else if (type == 382)
			{
				Vector2 zero4 = Vector2.Zero;
				Vector2 origin11 = Vector2.Zero;
				int num172 = npcTexture[type].Height / npcFrameCount[type];
				int num173 = npc[i].frame.Y / num172;
				Microsoft.Xna.Framework.Rectangle value45 = new Microsoft.Xna.Framework.Rectangle(0, 0, 30, 42);
				switch (num173)
				{
				case 0:
					zero4 += new Vector2(8f, 30f);
					break;
				case 1:
					zero4 += new Vector2(6f, 68f);
					break;
				case 2:
					zero4 += new Vector2(8f, 120f);
					break;
				case 3:
					zero4 += new Vector2(6f, 166f);
					break;
				case 4:
					zero4 += new Vector2(6f, 214f);
					break;
				case 5:
					zero4 += new Vector2(8f, 260f);
					break;
				case 6:
					zero4 += new Vector2(14f, 304f);
					break;
				case 7:
					zero4 += new Vector2(14f, 350f);
					break;
				case 8:
					zero4 += new Vector2(10f, 396f);
					break;
				}
				zero4.Y -= num172 * num173;
				zero4 -= vector10;
				int num174 = 2;
				if (npc[i].ai[2] > 0f)
				{
					num174 = (int)npc[i].ai[2] - 1;
				}
				if (npc[i].velocity.Y != 0f)
				{
					num174 = 3;
				}
				value45.Y += 44 * num174;
				switch (num174)
				{
				case 0:
					origin11 = new Vector2(10f, 18f);
					break;
				case 1:
					origin11 = new Vector2(8f, 20f);
					break;
				case 2:
					origin11 = new Vector2(8f, 20f);
					break;
				case 3:
					origin11 = new Vector2(8f, 20f);
					break;
				case 4:
					origin11 = new Vector2(6f, 18f);
					break;
				}
				if (spriteEffects.HasFlag(SpriteEffects.FlipHorizontally))
				{
					zero4.X *= -1f;
					origin11.X = (float)value45.Width - origin11.X;
				}
				zero4 += npc[i].Center;
				zero4 -= screenPosition;
				zero4.Y += npc[i].gfxOffY;
				spriteBatch.Draw(extraTexture[1], zero4, value45, color9, npc[i].rotation, origin11, npc[i].scale, spriteEffects, 0f);
			}
			else if (type == 520)
			{
				spriteBatch.Draw(glowMaskTexture[164], new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + num62 + npc[i].gfxOffY), frame4, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				Vector2 zero5 = Vector2.Zero;
				Vector2 origin12 = new Vector2(4f, 4f);
				int num175 = npcTexture[type].Height / npcFrameCount[type];
				int num197 = npc[i].frame.Y / num175;
				if (spriteEffects.HasFlag(SpriteEffects.FlipHorizontally))
				{
					zero5.X *= -1f;
					origin12.X = (float)extraTexture[56].Width - origin12.X;
				}
				zero5 += npc[i].Top + new Vector2(0f, 20f);
				zero5 -= screenPosition;
				zero5.Y += npc[i].gfxOffY;
				float num176 = npc[i].localAI[3];
				if (spriteEffects.HasFlag(SpriteEffects.FlipHorizontally))
				{
					num176 += (float)Math.PI;
				}
				spriteBatch.Draw(extraTexture[56], zero5, null, color9, num176, origin12, npc[i].scale, spriteEffects, 0f);
				spriteBatch.Draw(glowMaskTexture[165], zero5, null, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), num176, origin12, npc[i].scale, spriteEffects, 0f);
			}
			else if (type == 386)
			{
				spriteBatch.Draw(glowMaskTexture[31], new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + num62 + npc[i].gfxOffY), frame4, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
			}
			else if (type == 387)
			{
				Microsoft.Xna.Framework.Color color25 = new Microsoft.Xna.Framework.Color(1f, 1f, 1f, 1f) * 0.75f;
				if (npc[i].ai[0] > 0f)
				{
					float amount5 = (npc[i].ai[0] + 1f) / 60f;
					color25 = Microsoft.Xna.Framework.Color.Lerp(color25, Microsoft.Xna.Framework.Color.White, amount5);
					color25.A = (byte)MathHelper.Lerp((int)color25.A, 0f, amount5);
				}
				color25 *= (255f - (float)npc[i].alpha) / 255f;
				spriteBatch.Draw(glowMaskTexture[32], new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + num62 + npc[i].gfxOffY), frame4, color25, npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
			}
			else if (type == 388)
			{
				spriteBatch.Draw(glowMaskTexture[33], new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + num62 + npc[i].gfxOffY), frame4, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
			}
			else if (type == 389)
			{
				spriteBatch.Draw(glowMaskTexture[34], new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + num62 + npc[i].gfxOffY), frame4, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
			}
			else if (type == 4 && npc[i].ai[1] >= 4f && npc[i].ai[0] == 3f)
			{
				for (int num177 = 1; num177 < npc[i].oldPos.Length; num177++)
				{
					Vector2 vector35 = npc[i].oldPos[num177];
					Microsoft.Xna.Framework.Color color26 = color9;
					color26.R = (byte)(0.5 * (double)(int)color26.R * (double)(10 - num177) / 20.0);
					color26.G = (byte)(0.5 * (double)(int)color26.G * (double)(10 - num177) / 20.0);
					color26.B = (byte)(0.5 * (double)(int)color26.B * (double)(10 - num177) / 20.0);
					color26.A = (byte)(0.5 * (double)(int)color26.A * (double)(10 - num177) / 20.0);
					spriteBatch.Draw(npcTexture[type], new Vector2(npc[i].oldPos[num177].X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].oldPos[num177].Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63), npc[i].frame, color26, npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				}
			}
			else if (type == 437)
			{
				Microsoft.Xna.Framework.Color white5 = Microsoft.Xna.Framework.Color.White;
				white5.A = 200;
				spriteBatch.Draw(glowMaskTexture[109], new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + num62 + npc[i].gfxOffY), frame4, white5, npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				spriteBatch.Draw(glowMaskTexture[108], new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + num62 + npc[i].gfxOffY), null, white5, npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
			}
			else if (type == 471 && npc[i].ai[3] < 0f)
			{
				for (int num178 = 1; num178 < npc[i].oldPos.Length; num178++)
				{
					Vector2 vector36 = npc[i].oldPos[num178];
					Microsoft.Xna.Framework.Color color27 = color9;
					color27.R = (byte)(0.5 * (double)(int)color27.R * (double)(10 - num178) / 20.0);
					color27.G = (byte)(0.5 * (double)(int)color27.G * (double)(10 - num178) / 20.0);
					color27.B = (byte)(0.5 * (double)(int)color27.B * (double)(10 - num178) / 20.0);
					color27.A = (byte)(0.5 * (double)(int)color27.A * (double)(10 - num178) / 20.0);
					spriteBatch.Draw(npcTexture[type], new Vector2(npc[i].oldPos[num178].X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].oldPos[num178].Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63), npc[i].frame, color27, npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				}
			}
			else if (type == 477 && npc[i].velocity.Length() > 9f)
			{
				for (int num179 = 1; num179 < npc[i].oldPos.Length; num179++)
				{
					Vector2 vector37 = npc[i].oldPos[num179];
					Microsoft.Xna.Framework.Color color28 = color9;
					color28.R = (byte)(0.5 * (double)(int)color28.R * (double)(10 - num179) / 20.0);
					color28.G = (byte)(0.5 * (double)(int)color28.G * (double)(10 - num179) / 20.0);
					color28.B = (byte)(0.5 * (double)(int)color28.B * (double)(10 - num179) / 20.0);
					color28.A = (byte)(0.5 * (double)(int)color28.A * (double)(10 - num179) / 20.0);
					Microsoft.Xna.Framework.Rectangle frame5 = npc[i].frame;
					int num180 = npcTexture[type].Height / npcFrameCount[type];
					frame5.Y -= num180 * num179;
					while (frame5.Y < 0)
					{
						frame5.Y += num180 * npcFrameCount[type];
					}
					spriteBatch.Draw(npcTexture[type], new Vector2(npc[i].oldPos[num179].X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].oldPos[num179].Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63), frame5, color28, npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				}
			}
			if (type == 479 && (double)npc[i].velocity.Length() > 6.5)
			{
				for (int num181 = 1; num181 < npc[i].oldPos.Length; num181++)
				{
					Vector2 vector38 = npc[i].oldPos[num181];
					Microsoft.Xna.Framework.Color color29 = color9;
					color29.R = (byte)(0.5 * (double)(int)color29.R * (double)(10 - num181) / 20.0);
					color29.G = (byte)(0.5 * (double)(int)color29.G * (double)(10 - num181) / 20.0);
					color29.B = (byte)(0.5 * (double)(int)color29.B * (double)(10 - num181) / 20.0);
					color29.A = (byte)(0.5 * (double)(int)color29.A * (double)(10 - num181) / 20.0);
					Microsoft.Xna.Framework.Rectangle frame6 = npc[i].frame;
					int num182 = npcTexture[type].Height / npcFrameCount[type];
					frame6.Y -= num182 * num181;
					while (frame6.Y < 0)
					{
						frame6.Y += num182 * npcFrameCount[type];
					}
					spriteBatch.Draw(npcTexture[type], new Vector2(npc[i].oldPos[num181].X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].oldPos[num181].Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63), frame6, color29, npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
				}
			}
			else if (type == 472)
			{
				spriteBatch.Draw(glowMaskTexture[110], new Vector2(npc[i].position.X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].position.Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63), npc[i].frame, new Microsoft.Xna.Framework.Color(255 - npc[i].alpha, 255 - npc[i].alpha, 255 - npc[i].alpha, 0), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
			}
			else if (npc[i].aiStyle == 87)
			{
				if ((int)npc[i].ai[0] == 4 || npc[i].ai[0] == 5f || npc[i].ai[0] == 6f)
				{
					for (int num183 = 1; num183 < npc[i].oldPos.Length; num183++)
					{
						Vector2 vector39 = npc[i].oldPos[num183];
						Microsoft.Xna.Framework.Color color30 = color9;
						color30.R = (byte)(0.5 * (double)(int)color30.R * (double)(10 - num183) / 20.0);
						color30.G = (byte)(0.5 * (double)(int)color30.G * (double)(10 - num183) / 20.0);
						color30.B = (byte)(0.5 * (double)(int)color30.B * (double)(10 - num183) / 20.0);
						color30.A = (byte)(0.5 * (double)(int)color30.A * (double)(10 - num183) / 20.0);
						spriteBatch.Draw(npcTexture[type], new Vector2(npc[i].oldPos[num183].X - screenPosition.X + (float)(npc[i].width / 2) - (float)npcTexture[type].Width * npc[i].scale / 2f + vector10.X * npc[i].scale, npc[i].oldPos[num183].Y - screenPosition.Y + (float)npc[i].height - (float)npcTexture[type].Height * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63), npc[i].frame, color30, npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
					}
				}
			}
			else
			{
				switch (type)
				{
				case 50:
				{
					Texture2D texture2D24 = extraTexture[39];
					Vector2 center3 = npc[i].Center;
					float num194 = 0f;
					switch (npc[i].frame.Y / (npcTexture[type].Height / npcFrameCount[type]))
					{
					case 0:
						num194 = 2f;
						break;
					case 1:
						num194 = -6f;
						break;
					case 2:
						num194 = 2f;
						break;
					case 3:
						num194 = 10f;
						break;
					case 4:
						num194 = 2f;
						break;
					case 5:
						num194 = 0f;
						break;
					}
					center3.Y += npc[i].gfxOffY - (70f - num194) * npc[i].scale;
					spriteBatch.Draw(texture2D24, center3 - screenPosition, null, color9, 0f, texture2D24.Size() / 2f, 1f, spriteEffects, 0f);
					break;
				}
				case 411:
					spriteBatch.Draw(glowMaskTexture[136], npc[i].Bottom - screenPosition + new Vector2((float)(-npcTexture[type].Width) * npc[i].scale / 2f + vector10.X * npc[i].scale, (float)(-npcTexture[type].Height) * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + npc[i].gfxOffY), npc[i].frame, new Microsoft.Xna.Framework.Color(128 - npc[i].alpha / 2, 128 - npc[i].alpha / 2, 128 - npc[i].alpha / 2, 0), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
					break;
				case 409:
					spriteBatch.Draw(glowMaskTexture[138], npc[i].Bottom - screenPosition + new Vector2((float)(-npcTexture[type].Width) * npc[i].scale / 2f + vector10.X * npc[i].scale, (float)(-npcTexture[type].Height) * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + npc[i].gfxOffY), npc[i].frame, new Microsoft.Xna.Framework.Color(255 - npc[i].alpha, 255 - npc[i].alpha, 255 - npc[i].alpha, 255 - npc[i].alpha), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
					break;
				case 410:
					spriteBatch.Draw(glowMaskTexture[137], npc[i].Bottom - screenPosition + new Vector2((float)(-npcTexture[type].Width) * npc[i].scale / 2f + vector10.X * npc[i].scale, (float)(-npcTexture[type].Height) * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + npc[i].gfxOffY), npc[i].frame, new Microsoft.Xna.Framework.Color(255 - npc[i].alpha, 255 - npc[i].alpha, 255 - npc[i].alpha, 255 - npc[i].alpha), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
					break;
				case 407:
					spriteBatch.Draw(glowMaskTexture[139], npc[i].Bottom - screenPosition + new Vector2((float)(-npcTexture[type].Width) * npc[i].scale / 2f + vector10.X * npc[i].scale, (float)(-npcTexture[type].Height) * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + npc[i].gfxOffY), npc[i].frame, new Microsoft.Xna.Framework.Color(255 - npc[i].alpha, 255 - npc[i].alpha, 255 - npc[i].alpha, 255 - npc[i].alpha), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
					break;
				case 405:
					spriteBatch.Draw(glowMaskTexture[141], npc[i].Bottom - screenPosition + new Vector2((float)(-npcTexture[type].Width) * npc[i].scale / 2f + vector10.X * npc[i].scale, (float)(-npcTexture[type].Height) * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + npc[i].gfxOffY), npc[i].frame, new Microsoft.Xna.Framework.Color(128 - npc[i].alpha / 2, 128 - npc[i].alpha / 2, 128 - npc[i].alpha / 2, 0), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
					break;
				case 406:
					spriteBatch.Draw(glowMaskTexture[142], npc[i].Bottom - screenPosition + new Vector2((float)(-npcTexture[type].Width) * npc[i].scale / 2f + vector10.X * npc[i].scale, (float)(-npcTexture[type].Height) * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + npc[i].gfxOffY), npc[i].frame, new Microsoft.Xna.Framework.Color(128 - npc[i].alpha / 2, 128 - npc[i].alpha / 2, 128 - npc[i].alpha / 2, 0), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
					break;
				case 424:
					spriteBatch.Draw(glowMaskTexture[144], npc[i].Bottom - screenPosition + new Vector2((float)(-npcTexture[type].Width) * npc[i].scale / 2f + vector10.X * npc[i].scale, (float)(-npcTexture[type].Height) * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + npc[i].gfxOffY), npc[i].frame, new Microsoft.Xna.Framework.Color(128 - npc[i].alpha / 2, 128 - npc[i].alpha / 2, 128 - npc[i].alpha / 2, 0), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
					break;
				case 423:
					spriteBatch.Draw(glowMaskTexture[145], npc[i].Bottom - screenPosition + new Vector2((float)(-npcTexture[type].Width) * npc[i].scale / 2f + vector10.X * npc[i].scale, (float)(-npcTexture[type].Height) * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + npc[i].gfxOffY), npc[i].frame, new Microsoft.Xna.Framework.Color(128 - npc[i].alpha / 2, 128 - npc[i].alpha / 2, 128 - npc[i].alpha / 2, 0), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
					break;
				case 421:
					spriteBatch.Draw(glowMaskTexture[146], npc[i].Bottom - screenPosition + new Vector2((float)(-npcTexture[type].Width) * npc[i].scale / 2f + vector10.X * npc[i].scale, (float)(-npcTexture[type].Height) * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + npc[i].gfxOffY), npc[i].frame, new Microsoft.Xna.Framework.Color(128 - npc[i].alpha / 2, 128 - npc[i].alpha / 2, 128 - npc[i].alpha / 2, 0), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
					break;
				case 420:
					spriteBatch.Draw(glowMaskTexture[147], npc[i].Bottom - screenPosition + new Vector2((float)(-npcTexture[type].Width) * npc[i].scale / 2f + vector10.X * npc[i].scale, (float)(-npcTexture[type].Height) * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + npc[i].gfxOffY), npc[i].frame, new Microsoft.Xna.Framework.Color(128 - npc[i].alpha / 2, 128 - npc[i].alpha / 2, 128 - npc[i].alpha / 2, 0), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
					break;
				case 425:
					spriteBatch.Draw(glowMaskTexture[150], npc[i].Bottom - screenPosition + new Vector2((float)(-npcTexture[type].Width) * npc[i].scale / 2f + vector10.X * npc[i].scale, (float)(-npcTexture[type].Height) * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + npc[i].gfxOffY), npc[i].frame, new Microsoft.Xna.Framework.Color(128 - npc[i].alpha / 2, 128 - npc[i].alpha / 2, 128 - npc[i].alpha / 2, 0), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
					break;
				case 429:
					spriteBatch.Draw(glowMaskTexture[151], npc[i].Bottom - screenPosition + new Vector2((float)(-npcTexture[type].Width) * npc[i].scale / 2f + vector10.X * npc[i].scale, (float)(-npcTexture[type].Height) * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + npc[i].gfxOffY), npc[i].frame, new Microsoft.Xna.Framework.Color(128 - npc[i].alpha / 2, 128 - npc[i].alpha / 2, 128 - npc[i].alpha / 2, 0), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
					break;
				case 418:
				{
					spriteBatch.Draw(glowMaskTexture[161], npc[i].Bottom - screenPosition + new Vector2((float)(-npcTexture[type].Width) * npc[i].scale / 2f + vector10.X * npc[i].scale, (float)(-npcTexture[type].Height) * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + npc[i].gfxOffY), npc[i].frame, new Microsoft.Xna.Framework.Color(255 - npc[i].alpha, 255 - npc[i].alpha, 255 - npc[i].alpha, 255 - npc[i].alpha), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
					float scaleFactor17 = 0.25f + (npc[i].GetAlpha(color9).ToVector3() - new Vector3(0.5f)).Length() * 0.25f;
					for (int num193 = 0; num193 < 4; num193++)
					{
						spriteBatch.Draw(glowMaskTexture[161], npc[i].Bottom - screenPosition + new Vector2((float)(-npcTexture[type].Width) * npc[i].scale / 2f + vector10.X * npc[i].scale, (float)(-npcTexture[type].Height) * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + npc[i].gfxOffY) + npc[i].velocity.RotatedBy((float)num193 * ((float)Math.PI / 2f)) * scaleFactor17, npc[i].frame, new Microsoft.Xna.Framework.Color(64, 64, 64, 0), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
					}
					break;
				}
				case 412:
				case 413:
				case 414:
				{
					Microsoft.Xna.Framework.Color color31 = new Microsoft.Xna.Framework.Color(255 - npc[i].alpha, 255 - npc[i].alpha, 255 - npc[i].alpha, 0);
					int num190 = 157 + type - 412;
					if (type == 414 && npc[i].localAI[2] != 0f)
					{
						int num191 = (int)npc[i].localAI[2];
						if (npc[i].localAI[2] < 0f)
						{
							num191 = 128 + (int)npc[i].localAI[2];
						}
						int num192 = 255 - num191;
						color31 = new Microsoft.Xna.Framework.Color(num192, num191, num191, num192);
					}
					spriteBatch.Draw(glowMaskTexture[num190], npc[i].Bottom - screenPosition + new Vector2((float)(-npcTexture[type].Width) * npc[i].scale / 2f + vector10.X * npc[i].scale, (float)(-npcTexture[type].Height) * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + npc[i].gfxOffY), npc[i].frame, color31, npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
					break;
				}
				default:
					switch (type)
					{
					case 415:
					{
						spriteBatch.Draw(glowMaskTexture[155], npc[i].Bottom - screenPosition + new Vector2((float)(-npcTexture[type].Width) * npc[i].scale / 2f + vector10.X * npc[i].scale, (float)(-npcTexture[type].Height) * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + npc[i].gfxOffY), npc[i].frame, new Microsoft.Xna.Framework.Color(255 - npc[i].alpha, 255 - npc[i].alpha, 255 - npc[i].alpha, 255 - npc[i].alpha), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
						float scaleFactor12 = 0.5f + (npc[i].GetAlpha(color9).ToVector3() - new Vector3(0.5f)).Length() * 0.5f;
						for (int num185 = 0; num185 < 4; num185++)
						{
							spriteBatch.Draw(glowMaskTexture[155], npc[i].Bottom - screenPosition + new Vector2((float)(-npcTexture[type].Width) * npc[i].scale / 2f + vector10.X * npc[i].scale, (float)(-npcTexture[type].Height) * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + npc[i].gfxOffY) + npc[i].velocity.RotatedBy((float)num185 * ((float)Math.PI / 2f)) * scaleFactor12, npc[i].frame, new Microsoft.Xna.Framework.Color(64, 64, 64, 0), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
						}
						break;
					}
					case 419:
						spriteBatch.Draw(glowMaskTexture[154], npc[i].Bottom - screenPosition + new Vector2((float)(-npcTexture[type].Width) * npc[i].scale / 2f + vector10.X * npc[i].scale, (float)(-npcTexture[type].Height) * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + npc[i].gfxOffY), npc[i].frame, new Microsoft.Xna.Framework.Color(255 - npc[i].alpha, 255 - npc[i].alpha, 255 - npc[i].alpha, 255 - npc[i].alpha), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
						if (npc[i].ai[2] >= -6f)
						{
							float scaleFactor14 = 0.5f + (npc[i].GetAlpha(color9).ToVector3() - new Vector3(0.5f)).Length() * 0.5f;
							for (int num187 = 0; num187 < 4; num187++)
							{
								spriteBatch.Draw(glowMaskTexture[154], npc[i].Bottom - screenPosition + new Vector2((float)(-npcTexture[type].Width) * npc[i].scale / 2f + vector10.X * npc[i].scale, (float)(-npcTexture[type].Height) * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + npc[i].gfxOffY) + npc[i].velocity.RotatedBy((float)num187 * ((float)Math.PI / 2f)) * scaleFactor14, npc[i].frame, new Microsoft.Xna.Framework.Color(64, 64, 64, 0), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
							}
						}
						else
						{
							float scaleFactor15 = 4f;
							for (int num188 = 0; num188 < 4; num188++)
							{
								spriteBatch.Draw(glowMaskTexture[154], npc[i].Bottom - screenPosition + new Vector2((float)(-npcTexture[type].Width) * npc[i].scale / 2f + vector10.X * npc[i].scale, (float)(-npcTexture[type].Height) * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + npc[i].gfxOffY) + Vector2.UnitX.RotatedBy((float)num188 * ((float)Math.PI / 2f)) * scaleFactor15, npc[i].frame, new Microsoft.Xna.Framework.Color(64, 64, 64, 0), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
							}
						}
						break;
					case 417:
					{
						spriteBatch.Draw(glowMaskTexture[160], npc[i].Bottom - screenPosition + new Vector2((float)(-npcTexture[type].Width) * npc[i].scale / 2f + vector10.X * npc[i].scale, (float)(-npcTexture[type].Height) * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + npc[i].gfxOffY), npc[i].frame, new Microsoft.Xna.Framework.Color(255 - npc[i].alpha, 255 - npc[i].alpha, 255 - npc[i].alpha, 255 - npc[i].alpha), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
						float scaleFactor16 = 0.25f + (npc[i].GetAlpha(color9).ToVector3() - new Vector3(0.5f)).Length() * 0.25f;
						for (int num189 = 0; num189 < 4; num189++)
						{
							spriteBatch.Draw(glowMaskTexture[160], npc[i].Bottom - screenPosition + new Vector2((float)(-npcTexture[type].Width) * npc[i].scale / 2f + vector10.X * npc[i].scale, (float)(-npcTexture[type].Height) * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + npc[i].gfxOffY) + npc[i].velocity.RotatedBy((float)num189 * ((float)Math.PI / 2f)) * scaleFactor16, npc[i].frame, new Microsoft.Xna.Framework.Color(64, 64, 64, 0), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
						}
						break;
					}
					case 516:
					{
						spriteBatch.Draw(npcTexture[type], npc[i].Bottom - screenPosition + new Vector2((float)(-npcTexture[type].Width) * npc[i].scale / 2f + vector10.X * npc[i].scale, (float)(-npcTexture[type].Height) * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + npc[i].gfxOffY), npc[i].frame, new Microsoft.Xna.Framework.Color(255 - npc[i].alpha, 255 - npc[i].alpha, 255 - npc[i].alpha, 255 - npc[i].alpha), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
						float scaleFactor13 = 0.5f + (npc[i].GetAlpha(color9).ToVector3() - new Vector3(0.5f)).Length() * 0.5f;
						for (int num186 = 0; num186 < 4; num186++)
						{
							spriteBatch.Draw(npcTexture[type], npc[i].Bottom - screenPosition + new Vector2((float)(-npcTexture[type].Width) * npc[i].scale / 2f + vector10.X * npc[i].scale, (float)(-npcTexture[type].Height) * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + npc[i].gfxOffY) + npc[i].velocity.RotatedBy((float)num186 * ((float)Math.PI / 2f)) * scaleFactor13, npc[i].frame, new Microsoft.Xna.Framework.Color(64, 64, 64, 0), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
						}
						break;
					}
					case 518:
					{
						Vector2 value46 = new Vector2(-10f, 0f);
						spriteBatch.Draw(glowMaskTexture[163], npc[i].Bottom - screenPosition + new Vector2((float)(-npcTexture[type].Width) * npc[i].scale / 2f + vector10.X * npc[i].scale, (float)(-npcTexture[type].Height) * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + npc[i].gfxOffY), npc[i].frame, new Microsoft.Xna.Framework.Color(255 - npc[i].alpha, 255 - npc[i].alpha, 255 - npc[i].alpha, 255 - npc[i].alpha), npc[i].rotation, vector10 + value46, npc[i].scale, spriteEffects, 0f);
						float scaleFactor11 = 0.5f + (npc[i].GetAlpha(color9).ToVector3() - new Vector3(0.5f)).Length() * 0.5f;
						for (int num184 = 0; num184 < 4; num184++)
						{
							spriteBatch.Draw(glowMaskTexture[163], npc[i].Bottom - screenPosition + new Vector2((float)(-npcTexture[type].Width) * npc[i].scale / 2f + vector10.X * npc[i].scale, (float)(-npcTexture[type].Height) * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + npc[i].gfxOffY) + npc[i].velocity.RotatedBy((float)num184 * ((float)Math.PI / 2f)) * scaleFactor11, npc[i].frame, new Microsoft.Xna.Framework.Color(64, 64, 64, 0), npc[i].rotation, vector10 + value46, npc[i].scale, spriteEffects, 0f);
						}
						break;
					}
					case 525:
						spriteBatch.Draw(glowMaskTexture[169], npc[i].Bottom - screenPosition + new Vector2((float)(-npcTexture[type].Width) * npc[i].scale / 2f + vector10.X * npc[i].scale, (float)(-npcTexture[type].Height) * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + npc[i].gfxOffY), npc[i].frame, new Microsoft.Xna.Framework.Color(200, 200, 200, 100), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
						break;
					case 526:
						spriteBatch.Draw(glowMaskTexture[170], npc[i].Bottom - screenPosition + new Vector2((float)(-npcTexture[type].Width) * npc[i].scale / 2f + vector10.X * npc[i].scale, (float)(-npcTexture[type].Height) * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + npc[i].gfxOffY), npc[i].frame, new Microsoft.Xna.Framework.Color(200, 200, 200, 100), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
						break;
					case 527:
						spriteBatch.Draw(glowMaskTexture[171], npc[i].Bottom - screenPosition + new Vector2((float)(-npcTexture[type].Width) * npc[i].scale / 2f + vector10.X * npc[i].scale, (float)(-npcTexture[type].Height) * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + npc[i].gfxOffY), npc[i].frame, new Microsoft.Xna.Framework.Color(200, 200, 200, 100), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
						break;
					case 533:
						spriteBatch.Draw(glowMaskTexture[172], npc[i].Bottom - screenPosition + new Vector2((float)(-npcTexture[type].Width) * npc[i].scale / 2f + vector10.X * npc[i].scale, (float)(-npcTexture[type].Height) * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + npc[i].gfxOffY), npc[i].frame, new Microsoft.Xna.Framework.Color(255, 255, 255, 100), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
						break;
					case 160:
						spriteBatch.Draw(glowMaskTexture[166], npc[i].Bottom - screenPosition + new Vector2((float)(-npcTexture[type].Width) * npc[i].scale / 2f + vector10.X * npc[i].scale, (float)(-npcTexture[type].Height) * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + npc[i].gfxOffY), npc[i].frame, new Microsoft.Xna.Framework.Color(128 - npc[i].alpha / 2, 128 - npc[i].alpha / 2, 128 - npc[i].alpha / 2, 0), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
						break;
					case 209:
						spriteBatch.Draw(glowMaskTexture[167], npc[i].Bottom - screenPosition + new Vector2((float)(-npcTexture[type].Width) * npc[i].scale / 2f + vector10.X * npc[i].scale, (float)(-npcTexture[type].Height) * npc[i].scale / (float)npcFrameCount[type] + 4f + vector10.Y * npc[i].scale + num63 + npc[i].gfxOffY), npc[i].frame, new Microsoft.Xna.Framework.Color(128 - npc[i].alpha / 2, 128 - npc[i].alpha / 2, 128 - npc[i].alpha / 2, 0), npc[i].rotation, vector10, npc[i].scale, spriteEffects, 0f);
						break;
					}
					break;
				}
			}
			if (npc[i].aiStyle == 7)
			{
				NPC n3 = npc[i];
				DrawNPCExtras(n3, false, num63, num62, color9, vector10, spriteEffects);
			}
		}

		protected void DrawNPCExtras(NPC n, bool beforeDraw, float addHeight, float addY, Microsoft.Xna.Framework.Color npcColor, Vector2 halfSize, SpriteEffects npcSpriteEffect)
		{
			if (NPCID.Sets.AttackType[n.type] == 1 && n.ai[0] == 12f && !beforeDraw)
			{
				if (n.type == 228 || n.type == 229 || n.type == 209)
				{
					return;
				}
				float num = n.ai[2];
				Vector2 value = OffsetsNPCOffhand[2];
				if (n.spriteDirection == 1)
				{
					value.X *= -1f;
				}
				Vector2 vector = n.Bottom - value;
				if (n.type == 22 && n.ai[2] > -0.1f)
				{
					vector.Y += 4f;
				}
				if (n.type == 368 && hardMode && n.ai[2] > -0.1f)
				{
					vector.Y += 4f;
				}
				if (n.type == 368 && !hardMode && n.ai[2] < -0.1f)
				{
					vector.Y -= 8f;
				}
				float rotation = num * ((float)Math.PI / 2f) * (float)n.spriteDirection;
				float num2 = 1f;
				int num3 = 0;
				int num4 = 4;
				if (n.type == 19)
				{
					num3 = (hardMode ? 98 : 95);
					if (hardMode)
					{
						vector.X -= 10 * n.direction;
						vector.Y += 4f;
					}
				}
				else if (n.type == 22)
				{
					num3 = 39;
					num4 = 18;
				}
				else if (n.type == 178)
				{
					num3 = 434;
				}
				else if (n.type == 227)
				{
					num3 = 3350;
					num4 = 16;
					num2 = 0.85f;
				}
				else if (n.type == 368)
				{
					num3 = (hardMode ? 2223 : 2269);
					if (hardMode)
					{
						num4 = 18;
					}
					else
					{
						if (n.ai[2] < -0.1f)
						{
							num4 = 28;
						}
						num2 = 0.75f;
					}
				}
				Texture2D texture2D = itemTexture[num3];
				Vector2 vector2 = DrawPlayerItemPos(1f, num3);
				int num5 = (int)vector2.X - num4;
				Vector2 origin = new Vector2(-num5, texture2D.Height / 2);
				if (n.spriteDirection == -1)
				{
					origin = new Vector2(texture2D.Width + num5, texture2D.Height / 2);
				}
				spriteBatch.Draw(texture2D, new Vector2((int)(vector.X - screenPosition.X), (int)(vector.Y - screenPosition.Y)), null, npcColor, rotation, origin, n.scale * num2, npcSpriteEffect ^ SpriteEffects.FlipHorizontally, 0f);
				if (n.type == 22 && n.frame.Y / (npcTexture[n.type].Height / npcFrameCount[n.type]) >= 21)
				{
					Texture2D texture2D2 = extraTexture[52];
					Microsoft.Xna.Framework.Rectangle value2 = texture2D2.Frame(1, 5, 0, n.frame.Y / (npcTexture[n.type].Height / npcFrameCount[n.type]) - 21);
					spriteBatch.Draw(texture2D2, new Vector2(n.position.X - screenPosition.X + (float)(n.width / 2) - (float)npcTexture[n.type].Width * n.scale / 2f + halfSize.X * n.scale, n.position.Y - screenPosition.Y + (float)n.height - (float)npcTexture[n.type].Height * n.scale / (float)npcFrameCount[n.type] + 4f + halfSize.Y * n.scale + addHeight + addY + n.gfxOffY), value2, n.GetAlpha(npcColor), n.rotation, halfSize, n.scale, npcSpriteEffect, 0f);
				}
				else if (n.type == 368 && n.frame.Y / (npcTexture[n.type].Height / npcFrameCount[n.type]) >= 21)
				{
					Texture2D texture2D3 = extraTexture[53];
					Microsoft.Xna.Framework.Rectangle value3 = texture2D3.Frame(1, 5, 0, n.frame.Y / (npcTexture[n.type].Height / npcFrameCount[n.type]) - 21);
					spriteBatch.Draw(texture2D3, new Vector2(n.position.X - screenPosition.X + (float)(n.width / 2) - (float)npcTexture[n.type].Width * n.scale / 2f + halfSize.X * n.scale, n.position.Y - screenPosition.Y + (float)n.height - (float)npcTexture[n.type].Height * n.scale / (float)npcFrameCount[n.type] + 4f + halfSize.Y * n.scale + addHeight + addY + n.gfxOffY), value3, n.GetAlpha(npcColor), n.rotation, halfSize, n.scale, npcSpriteEffect, 0f);
				}
			}
			if (NPCID.Sets.AttackType[n.type] == 2 && n.ai[0] == 14f && !beforeDraw)
			{
				Texture2D texture2D4 = extraTexture[51];
				Vector2 vector3 = n.Bottom + new Vector2(0f, n.gfxOffY + 4f);
				Microsoft.Xna.Framework.Rectangle rectangle = texture2D4.Frame(1, 4, 0, (int)n.frameCounter % 48 / 12);
				Vector2 origin2 = rectangle.Size() * new Vector2(0.5f, 1f);
				spriteBatch.Draw(texture2D4, new Vector2((int)(vector3.X - screenPosition.X), (int)(vector3.Y - screenPosition.Y)), rectangle, NPCID.Sets.MagicAuraColor[n.type], 0f, origin2, n.scale, npcSpriteEffect ^ SpriteEffects.FlipHorizontally, 0f);
			}
			if (NPCID.Sets.AttackType[n.type] != 3 || n.ai[0] != 15f)
			{
				return;
			}
			Texture2D texture2D5 = itemTexture[4];
			int num6 = 32;
			float scaleFactor = 0f;
			Vector2 zero = Vector2.Zero;
			if (n.type == 207)
			{
				texture2D5 = itemTexture[3349];
				scaleFactor = 0.15f;
				if (beforeDraw)
				{
					return;
				}
				if (n.ai[1] > (float)NPCID.Sets.AttackTime[n.type] * 0.66f)
				{
					zero.Y = 12f;
				}
			}
			else if (n.type == 353)
			{
				texture2D5 = itemTexture[3352];
				scaleFactor = 0.15f;
				if (!beforeDraw)
				{
					return;
				}
				if (n.ai[1] > (float)NPCID.Sets.AttackTime[n.type] * 0.66f)
				{
					zero.Y = 12f;
				}
			}
			else if (n.type == 441)
			{
				texture2D5 = itemTexture[3351];
				num6 = 28;
				scaleFactor = 0.1f;
				if (!beforeDraw)
				{
					return;
				}
				if (n.ai[1] > (float)NPCID.Sets.AttackTime[n.type] * 0.66f)
				{
					zero.Y = 12f;
				}
			}
			Tuple<Vector2, float> swingStats = n.GetSwingStats(NPCID.Sets.AttackTime[n.type] * 2, (int)n.ai[1], n.spriteDirection, num6, num6);
			Vector2 vector4 = swingStats.Item1 + (swingStats.Item1 - n.Center) * scaleFactor + zero;
			Vector2 origin3 = texture2D5.Size() * new Vector2((n.spriteDirection != 1) ? 1 : 0, 1f);
			spriteBatch.Draw(texture2D5, new Vector2((int)(vector4.X - screenPosition.X), (int)(vector4.Y - screenPosition.Y)), null, NPCID.Sets.MagicAuraColor[n.type], swingStats.Item2, origin3, n.scale, npcSpriteEffect ^ SpriteEffects.FlipHorizontally, 0f);
		}

		public void DrawProj(int i)
		{
			float num = 0f;
			float num2 = 0f;
			Projectile projectile = Main.projectile[i];
			LoadProjectile(projectile.type);
			Vector2 mountedCenter = player[projectile.owner].MountedCenter;
			if (projectile.aiStyle == 99)
			{
				Vector2 vector = mountedCenter;
				vector.Y += player[projectile.owner].gfxOffY;
				float num3 = projectile.Center.X - vector.X;
				float num4 = projectile.Center.Y - vector.Y;
				Math.Sqrt(num3 * num3 + num4 * num4);
				float num5 = (float)Math.Atan2(num4, num3) - 1.57f;
				if (!projectile.counterweight)
				{
					int num6 = -1;
					if (projectile.position.X + (float)(projectile.width / 2) < player[projectile.owner].position.X + (float)(player[projectile.owner].width / 2))
					{
						num6 = 1;
					}
					num6 *= -1;
					player[projectile.owner].itemRotation = (float)Math.Atan2(num4 * (float)num6, num3 * (float)num6);
				}
				bool flag = true;
				if (num3 == 0f && num4 == 0f)
				{
					flag = false;
				}
				else
				{
					float num7 = (float)Math.Sqrt(num3 * num3 + num4 * num4);
					num7 = 12f / num7;
					num3 *= num7;
					num4 *= num7;
					vector.X -= num3 * 0.1f;
					vector.Y -= num4 * 0.1f;
					num3 = projectile.position.X + (float)projectile.width * 0.5f - vector.X;
					num4 = projectile.position.Y + (float)projectile.height * 0.5f - vector.Y;
				}
				while (flag)
				{
					float num8 = 12f;
					float num9 = (float)Math.Sqrt(num3 * num3 + num4 * num4);
					float num10 = num9;
					if (float.IsNaN(num9) || float.IsNaN(num10))
					{
						flag = false;
						continue;
					}
					if (num9 < 20f)
					{
						num8 = num9 - 8f;
						flag = false;
					}
					num9 = 12f / num9;
					num3 *= num9;
					num4 *= num9;
					vector.X += num3;
					vector.Y += num4;
					num3 = projectile.position.X + (float)projectile.width * 0.5f - vector.X;
					num4 = projectile.position.Y + (float)projectile.height * 0.1f - vector.Y;
					if (num10 > 12f)
					{
						float num11 = 0.3f;
						float num12 = Math.Abs(projectile.velocity.X) + Math.Abs(projectile.velocity.Y);
						if (num12 > 16f)
						{
							num12 = 16f;
						}
						num12 = 1f - num12 / 16f;
						num11 *= num12;
						num12 = num10 / 80f;
						if (num12 > 1f)
						{
							num12 = 1f;
						}
						num11 *= num12;
						if (num11 < 0f)
						{
							num11 = 0f;
						}
						num11 *= num12;
						num11 *= 0.5f;
						if (num4 > 0f)
						{
							num4 *= 1f + num11;
							num3 *= 1f - num11;
						}
						else
						{
							num12 = Math.Abs(projectile.velocity.X) / 3f;
							if (num12 > 1f)
							{
								num12 = 1f;
							}
							num12 -= 0.5f;
							num11 *= num12;
							if (num11 > 0f)
							{
								num11 *= 2f;
							}
							num4 *= 1f + num11;
							num3 *= 1f - num11;
						}
					}
					num5 = (float)Math.Atan2(num4, num3) - 1.57f;
					int stringColor = player[projectile.owner].stringColor;
					Microsoft.Xna.Framework.Color oldColor = WorldGen.paintColor(stringColor);
					if (oldColor.R < 75)
					{
						oldColor.R = 75;
					}
					if (oldColor.G < 75)
					{
						oldColor.G = 75;
					}
					if (oldColor.B < 75)
					{
						oldColor.B = 75;
					}
					switch (stringColor)
					{
					case 13:
						oldColor = new Microsoft.Xna.Framework.Color(20, 20, 20);
						break;
					case 0:
					case 14:
						oldColor = new Microsoft.Xna.Framework.Color(200, 200, 200);
						break;
					case 28:
						oldColor = new Microsoft.Xna.Framework.Color(163, 116, 91);
						break;
					case 27:
						oldColor = new Microsoft.Xna.Framework.Color(DiscoR, DiscoG, DiscoB);
						break;
					}
					oldColor.A = (byte)((float)(int)oldColor.A * 0.4f);
					float num13 = 0.5f;
					oldColor = Lighting.GetColor((int)vector.X / 16, (int)(vector.Y / 16f), oldColor);
					oldColor = new Microsoft.Xna.Framework.Color((byte)((float)(int)oldColor.R * num13), (byte)((float)(int)oldColor.G * num13), (byte)((float)(int)oldColor.B * num13), (byte)((float)(int)oldColor.A * num13));
					spriteBatch.Draw(fishingLineTexture, new Vector2(vector.X - screenPosition.X + (float)fishingLineTexture.Width * 0.5f, vector.Y - screenPosition.Y + (float)fishingLineTexture.Height * 0.5f) - new Vector2(6f, 0f), new Microsoft.Xna.Framework.Rectangle(0, 0, fishingLineTexture.Width, (int)num8), oldColor, num5, new Vector2((float)fishingLineTexture.Width * 0.5f, 0f), 1f, SpriteEffects.None, 0f);
				}
			}
			if (projectile.bobber && player[projectile.owner].inventory[player[projectile.owner].selectedItem].holdStyle > 0)
			{
				num = mountedCenter.X;
				num2 = mountedCenter.Y;
				num2 += player[projectile.owner].gfxOffY;
				int type = player[projectile.owner].inventory[player[projectile.owner].selectedItem].type;
				float gravDir = player[projectile.owner].gravDir;
				switch (type)
				{
				case 2289:
					num += (float)(43 * player[projectile.owner].direction);
					if (player[projectile.owner].direction < 0)
					{
						num -= 13f;
					}
					num2 -= 36f * gravDir;
					break;
				case 2291:
					num += (float)(43 * player[projectile.owner].direction);
					if (player[projectile.owner].direction < 0)
					{
						num -= 13f;
					}
					num2 -= 34f * gravDir;
					break;
				case 2292:
					num += (float)(46 * player[projectile.owner].direction);
					if (player[projectile.owner].direction < 0)
					{
						num -= 13f;
					}
					num2 -= 34f * gravDir;
					break;
				case 2293:
					num += (float)(43 * player[projectile.owner].direction);
					if (player[projectile.owner].direction < 0)
					{
						num -= 13f;
					}
					num2 -= 34f * gravDir;
					break;
				case 2294:
					num += (float)(43 * player[projectile.owner].direction);
					if (player[projectile.owner].direction < 0)
					{
						num -= 13f;
					}
					num2 -= 30f * gravDir;
					break;
				case 2295:
					num += (float)(43 * player[projectile.owner].direction);
					if (player[projectile.owner].direction < 0)
					{
						num -= 13f;
					}
					num2 -= 30f * gravDir;
					break;
				case 2296:
					num += (float)(43 * player[projectile.owner].direction);
					if (player[projectile.owner].direction < 0)
					{
						num -= 13f;
					}
					num2 -= 30f * gravDir;
					break;
				case 2421:
					num += (float)(47 * player[projectile.owner].direction);
					if (player[projectile.owner].direction < 0)
					{
						num -= 13f;
					}
					num2 -= 36f * gravDir;
					break;
				case 2422:
					num += (float)(47 * player[projectile.owner].direction);
					if (player[projectile.owner].direction < 0)
					{
						num -= 13f;
					}
					num2 -= 32f * gravDir;
					break;
				}
				if (gravDir == -1f)
				{
					num2 -= 12f;
				}
				Vector2 value = new Vector2(num, num2);
				value = player[projectile.owner].RotatedRelativePoint(value + new Vector2(8f)) - new Vector2(8f);
				float num14 = projectile.position.X + (float)projectile.width * 0.5f - value.X;
				float num15 = projectile.position.Y + (float)projectile.height * 0.5f - value.Y;
				Math.Sqrt(num14 * num14 + num15 * num15);
				float num16 = (float)Math.Atan2(num15, num14) - 1.57f;
				bool flag2 = true;
				if (num14 == 0f && num15 == 0f)
				{
					flag2 = false;
				}
				else
				{
					float num17 = (float)Math.Sqrt(num14 * num14 + num15 * num15);
					num17 = 12f / num17;
					num14 *= num17;
					num15 *= num17;
					value.X -= num14;
					value.Y -= num15;
					num14 = projectile.position.X + (float)projectile.width * 0.5f - value.X;
					num15 = projectile.position.Y + (float)projectile.height * 0.5f - value.Y;
				}
				while (flag2)
				{
					float num18 = 12f;
					float num19 = (float)Math.Sqrt(num14 * num14 + num15 * num15);
					float num20 = num19;
					if (float.IsNaN(num19) || float.IsNaN(num20))
					{
						flag2 = false;
						continue;
					}
					if (num19 < 20f)
					{
						num18 = num19 - 8f;
						flag2 = false;
					}
					num19 = 12f / num19;
					num14 *= num19;
					num15 *= num19;
					value.X += num14;
					value.Y += num15;
					num14 = projectile.position.X + (float)projectile.width * 0.5f - value.X;
					num15 = projectile.position.Y + (float)projectile.height * 0.1f - value.Y;
					if (num20 > 12f)
					{
						float num21 = 0.3f;
						float num22 = Math.Abs(projectile.velocity.X) + Math.Abs(projectile.velocity.Y);
						if (num22 > 16f)
						{
							num22 = 16f;
						}
						num22 = 1f - num22 / 16f;
						num21 *= num22;
						num22 = num20 / 80f;
						if (num22 > 1f)
						{
							num22 = 1f;
						}
						num21 *= num22;
						if (num21 < 0f)
						{
							num21 = 0f;
						}
						num22 = 1f - projectile.localAI[0] / 100f;
						num21 *= num22;
						if (num15 > 0f)
						{
							num15 *= 1f + num21;
							num14 *= 1f - num21;
						}
						else
						{
							num22 = Math.Abs(projectile.velocity.X) / 3f;
							if (num22 > 1f)
							{
								num22 = 1f;
							}
							num22 -= 0.5f;
							num21 *= num22;
							if (num21 > 0f)
							{
								num21 *= 2f;
							}
							num15 *= 1f + num21;
							num14 *= 1f - num21;
						}
					}
					num16 = (float)Math.Atan2(num15, num14) - 1.57f;
					Microsoft.Xna.Framework.Color color = Lighting.GetColor((int)value.X / 16, (int)(value.Y / 16f), new Microsoft.Xna.Framework.Color(200, 200, 200, 100));
					if (type == 2294)
					{
						color = Lighting.GetColor((int)value.X / 16, (int)(value.Y / 16f), new Microsoft.Xna.Framework.Color(100, 180, 230, 100));
					}
					if (type == 2295)
					{
						color = Lighting.GetColor((int)value.X / 16, (int)(value.Y / 16f), new Microsoft.Xna.Framework.Color(250, 90, 70, 100));
					}
					if (type == 2293)
					{
						color = Lighting.GetColor((int)value.X / 16, (int)(value.Y / 16f), new Microsoft.Xna.Framework.Color(203, 190, 210, 100));
					}
					if (type == 2421)
					{
						color = Lighting.GetColor((int)value.X / 16, (int)(value.Y / 16f), new Microsoft.Xna.Framework.Color(183, 77, 112, 100));
					}
					if (type == 2422)
					{
						color = Lighting.GetColor((int)value.X / 16, (int)(value.Y / 16f), new Microsoft.Xna.Framework.Color(255, 226, 116, 100));
					}
					spriteBatch.Draw(fishingLineTexture, new Vector2(value.X - screenPosition.X + (float)fishingLineTexture.Width * 0.5f, value.Y - screenPosition.Y + (float)fishingLineTexture.Height * 0.5f), new Microsoft.Xna.Framework.Rectangle(0, 0, fishingLineTexture.Width, (int)num18), color, num16, new Vector2((float)fishingLineTexture.Width * 0.5f, 0f), 1f, SpriteEffects.None, 0f);
				}
			}
			else if (projectile.type == 32)
			{
				Vector2 vector2 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num23 = mountedCenter.X - vector2.X;
				float num24 = mountedCenter.Y - vector2.Y;
				float rotation = (float)Math.Atan2(num24, num23) - 1.57f;
				bool flag3 = true;
				if (num23 == 0f && num24 == 0f)
				{
					flag3 = false;
				}
				else
				{
					float num25 = (float)Math.Sqrt(num23 * num23 + num24 * num24);
					num25 = 8f / num25;
					num23 *= num25;
					num24 *= num25;
					vector2.X -= num23;
					vector2.Y -= num24;
					num23 = mountedCenter.X - vector2.X;
					num24 = mountedCenter.Y - vector2.Y;
				}
				while (flag3)
				{
					float num26 = (float)Math.Sqrt(num23 * num23 + num24 * num24);
					if (num26 < 28f)
					{
						flag3 = false;
						continue;
					}
					if (float.IsNaN(num26))
					{
						flag3 = false;
						continue;
					}
					num26 = 28f / num26;
					num23 *= num26;
					num24 *= num26;
					vector2.X += num23;
					vector2.Y += num24;
					num23 = mountedCenter.X - vector2.X;
					num24 = mountedCenter.Y - vector2.Y;
					Microsoft.Xna.Framework.Color color2 = Lighting.GetColor((int)vector2.X / 16, (int)(vector2.Y / 16f));
					spriteBatch.Draw(chain5Texture, new Vector2(vector2.X - screenPosition.X, vector2.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, chain5Texture.Width, chain5Texture.Height), color2, rotation, new Vector2((float)chain5Texture.Width * 0.5f, (float)chain5Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
				}
			}
			else if (projectile.type == 73)
			{
				Vector2 vector3 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num27 = mountedCenter.X - vector3.X;
				float num28 = mountedCenter.Y - vector3.Y;
				float rotation2 = (float)Math.Atan2(num28, num27) - 1.57f;
				bool flag4 = true;
				while (flag4)
				{
					float num29 = (float)Math.Sqrt(num27 * num27 + num28 * num28);
					if (num29 < 25f)
					{
						flag4 = false;
						continue;
					}
					if (float.IsNaN(num29))
					{
						flag4 = false;
						continue;
					}
					num29 = 12f / num29;
					num27 *= num29;
					num28 *= num29;
					vector3.X += num27;
					vector3.Y += num28;
					num27 = mountedCenter.X - vector3.X;
					num28 = mountedCenter.Y - vector3.Y;
					Microsoft.Xna.Framework.Color color3 = Lighting.GetColor((int)vector3.X / 16, (int)(vector3.Y / 16f));
					spriteBatch.Draw(chain8Texture, new Vector2(vector3.X - screenPosition.X, vector3.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, chain8Texture.Width, chain8Texture.Height), color3, rotation2, new Vector2((float)chain8Texture.Width * 0.5f, (float)chain8Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
				}
			}
			else if (projectile.type == 186)
			{
				float num30 = projectile.ai[1];
				float num31 = projectile.position.Y - num30;
				float num32 = (float)chain17Texture.Height - num31;
				if (num31 > 0f && projectile.ai[1] > 0f)
				{
					Microsoft.Xna.Framework.Color color4 = Lighting.GetColor((int)projectile.position.X / 16, (int)projectile.position.Y / 16);
					spriteBatch.Draw(chain17Texture, new Vector2(projectile.position.X - screenPosition.X, num30 - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, (int)num32, chain17Texture.Width, (int)num31), color4, 0f, new Vector2(0f, 0f), 1f, SpriteEffects.None, 0f);
				}
			}
			else if (projectile.type == 74)
			{
				Vector2 vector4 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num33 = mountedCenter.X - vector4.X;
				float num34 = mountedCenter.Y - vector4.Y;
				float rotation3 = (float)Math.Atan2(num34, num33) - 1.57f;
				bool flag5 = true;
				while (flag5)
				{
					float num35 = (float)Math.Sqrt(num33 * num33 + num34 * num34);
					if (num35 < 25f)
					{
						flag5 = false;
						continue;
					}
					if (float.IsNaN(num35))
					{
						flag5 = false;
						continue;
					}
					num35 = 12f / num35;
					num33 *= num35;
					num34 *= num35;
					vector4.X += num33;
					vector4.Y += num34;
					num33 = mountedCenter.X - vector4.X;
					num34 = mountedCenter.Y - vector4.Y;
					Microsoft.Xna.Framework.Color color5 = Lighting.GetColor((int)vector4.X / 16, (int)(vector4.Y / 16f));
					spriteBatch.Draw(chain9Texture, new Vector2(vector4.X - screenPosition.X, vector4.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, chain8Texture.Width, chain8Texture.Height), color5, rotation3, new Vector2((float)chain8Texture.Width * 0.5f, (float)chain8Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
				}
			}
			else if (projectile.type == 171)
			{
				Vector2 vector5 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num36 = 0f - projectile.velocity.X;
				float num37 = 0f - projectile.velocity.Y;
				float num38 = 1f;
				if (projectile.ai[0] <= 17f)
				{
					num38 = projectile.ai[0] / 17f;
				}
				int num39 = (int)(30f * num38);
				float num40 = 1f;
				if (projectile.ai[0] <= 30f)
				{
					num40 = projectile.ai[0] / 30f;
				}
				float num41 = 0.4f * num40;
				float num42 = num41;
				num37 += num42;
				Vector2[] array = new Vector2[num39];
				float[] array2 = new float[num39];
				for (int j = 0; j < num39; j++)
				{
					float num43 = (float)Math.Sqrt(num36 * num36 + num37 * num37);
					float num44 = 5.6f;
					if (Math.Abs(num36) + Math.Abs(num37) < 1f)
					{
						num44 *= Math.Abs(num36) + Math.Abs(num37) / 1f;
					}
					num43 = num44 / num43;
					num36 *= num43;
					num37 *= num43;
					float num45 = (float)Math.Atan2(num37, num36) - 1.57f;
					array[j].X = vector5.X;
					array[j].Y = vector5.Y;
					array2[j] = num45;
					vector5.X += num36;
					vector5.Y += num37;
					num36 = 0f - projectile.velocity.X;
					num37 = 0f - projectile.velocity.Y;
					num42 += num41;
					num37 += num42;
				}
				for (int num46 = --num39; num46 >= 0; num46--)
				{
					vector5.X = array[num46].X;
					vector5.Y = array[num46].Y;
					float rotation4 = array2[num46];
					Microsoft.Xna.Framework.Color color6 = Lighting.GetColor((int)vector5.X / 16, (int)(vector5.Y / 16f));
					spriteBatch.Draw(chain16Texture, new Vector2(vector5.X - screenPosition.X, vector5.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, chain16Texture.Width, chain16Texture.Height), color6, rotation4, new Vector2((float)chain16Texture.Width * 0.5f, (float)chain16Texture.Height * 0.5f), 0.8f, SpriteEffects.None, 0f);
				}
			}
			else if (projectile.type == 475)
			{
				Vector2 vector6 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num47 = 0f - projectile.velocity.X;
				float num48 = 0f - projectile.velocity.Y;
				float num49 = 1f;
				if (projectile.ai[0] <= 17f)
				{
					num49 = projectile.ai[0] / 17f;
				}
				int num50 = (int)(30f * num49);
				float num51 = 1f;
				if (projectile.ai[0] <= 30f)
				{
					num51 = projectile.ai[0] / 30f;
				}
				float num52 = 0.4f * num51;
				float num53 = num52;
				num48 += num53;
				Vector2[] array3 = new Vector2[num50];
				float[] array4 = new float[num50];
				for (int k = 0; k < num50; k++)
				{
					float num54 = (float)Math.Sqrt(num47 * num47 + num48 * num48);
					float num55 = 5.6f;
					if (Math.Abs(num47) + Math.Abs(num48) < 1f)
					{
						num55 *= Math.Abs(num47) + Math.Abs(num48) / 1f;
					}
					num54 = num55 / num54;
					num47 *= num54;
					num48 *= num54;
					float num56 = (float)Math.Atan2(num48, num47) - 1.57f;
					array3[k].X = vector6.X;
					array3[k].Y = vector6.Y;
					array4[k] = num56;
					vector6.X += num47;
					vector6.Y += num48;
					num47 = 0f - projectile.velocity.X;
					num48 = 0f - projectile.velocity.Y;
					num53 += num52;
					num48 += num53;
				}
				int num57 = 0;
				for (int num58 = --num50; num58 >= 0; num58--)
				{
					vector6.X = array3[num58].X;
					vector6.Y = array3[num58].Y;
					float rotation5 = array4[num58];
					Microsoft.Xna.Framework.Color color7 = Lighting.GetColor((int)vector6.X / 16, (int)(vector6.Y / 16f));
					if (num57 % 2 == 0)
					{
						spriteBatch.Draw(chain38Texture, new Vector2(vector6.X - screenPosition.X, vector6.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, chain38Texture.Width, chain38Texture.Height), color7, rotation5, new Vector2((float)chain38Texture.Width * 0.5f, (float)chain38Texture.Height * 0.5f), 0.8f, SpriteEffects.None, 0f);
					}
					else
					{
						spriteBatch.Draw(chain39Texture, new Vector2(vector6.X - screenPosition.X, vector6.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, chain39Texture.Width, chain39Texture.Height), color7, rotation5, new Vector2((float)chain39Texture.Width * 0.5f, (float)chain39Texture.Height * 0.5f), 0.8f, SpriteEffects.None, 0f);
					}
					num57++;
				}
			}
			else if (projectile.type == 505 || projectile.type == 506)
			{
				Vector2 vector7 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num59 = 0f - projectile.velocity.X;
				float num60 = 0f - projectile.velocity.Y;
				float num61 = 1f;
				if (projectile.ai[0] <= 17f)
				{
					num61 = projectile.ai[0] / 17f;
				}
				int num62 = (int)(30f * num61);
				float num63 = 1f;
				if (projectile.ai[0] <= 30f)
				{
					num63 = projectile.ai[0] / 30f;
				}
				float num64 = 0.4f * num63;
				float num65 = num64;
				num60 += num65;
				Vector2[] array5 = new Vector2[num62];
				float[] array6 = new float[num62];
				for (int l = 0; l < num62; l++)
				{
					float num66 = (float)Math.Sqrt(num59 * num59 + num60 * num60);
					float num67 = 5.6f;
					if (Math.Abs(num59) + Math.Abs(num60) < 1f)
					{
						num67 *= Math.Abs(num59) + Math.Abs(num60) / 1f;
					}
					num66 = num67 / num66;
					num59 *= num66;
					num60 *= num66;
					float num68 = (float)Math.Atan2(num60, num59) - 1.57f;
					array5[l].X = vector7.X;
					array5[l].Y = vector7.Y;
					array6[l] = num68;
					vector7.X += num59;
					vector7.Y += num60;
					num59 = 0f - projectile.velocity.X;
					num60 = 0f - projectile.velocity.Y;
					num65 += num64;
					num60 += num65;
				}
				int num69 = 0;
				for (int num70 = --num62; num70 >= 0; num70--)
				{
					vector7.X = array5[num70].X;
					vector7.Y = array5[num70].Y;
					float rotation6 = array6[num70];
					Microsoft.Xna.Framework.Color color8 = Lighting.GetColor((int)vector7.X / 16, (int)(vector7.Y / 16f));
					int num71 = 4;
					if (projectile.type == 506)
					{
						num71 = 6;
					}
					num71 += num69 % 2;
					spriteBatch.Draw(chainsTexture[num71], new Vector2(vector7.X - screenPosition.X, vector7.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, chainsTexture[num71].Width, chainsTexture[num71].Height), color8, rotation6, new Vector2((float)chainsTexture[num71].Width * 0.5f, (float)chainsTexture[num71].Height * 0.5f), 0.8f, SpriteEffects.None, 0f);
					num69++;
				}
			}
			else if (projectile.type == 165)
			{
				Vector2 vector8 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num72 = mountedCenter.X - vector8.X;
				float num73 = mountedCenter.Y - vector8.Y;
				float rotation7 = (float)Math.Atan2(num73, num72) - 1.57f;
				bool flag6 = true;
				while (flag6)
				{
					float num74 = (float)Math.Sqrt(num72 * num72 + num73 * num73);
					if (num74 < 25f)
					{
						flag6 = false;
						continue;
					}
					if (float.IsNaN(num74))
					{
						flag6 = false;
						continue;
					}
					num74 = 24f / num74;
					num72 *= num74;
					num73 *= num74;
					vector8.X += num72;
					vector8.Y += num73;
					num72 = mountedCenter.X - vector8.X;
					num73 = mountedCenter.Y - vector8.Y;
					Microsoft.Xna.Framework.Color color9 = Lighting.GetColor((int)vector8.X / 16, (int)(vector8.Y / 16f));
					spriteBatch.Draw(chain15Texture, new Vector2(vector8.X - screenPosition.X, vector8.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, chain15Texture.Width, chain15Texture.Height), color9, rotation7, new Vector2((float)chain15Texture.Width * 0.5f, (float)chain15Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
				}
			}
			else if (projectile.type >= 230 && projectile.type <= 235)
			{
				int num75 = projectile.type - 229;
				Vector2 vector9 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num76 = mountedCenter.X - vector9.X;
				float num77 = mountedCenter.Y - vector9.Y;
				float rotation8 = (float)Math.Atan2(num77, num76) - 1.57f;
				bool flag7 = true;
				while (flag7)
				{
					float num78 = (float)Math.Sqrt(num76 * num76 + num77 * num77);
					if (num78 < 25f)
					{
						flag7 = false;
						continue;
					}
					if (float.IsNaN(num78))
					{
						flag7 = false;
						continue;
					}
					num78 = (float)gemChainTexture[num75].Height / num78;
					num76 *= num78;
					num77 *= num78;
					vector9.X += num76;
					vector9.Y += num77;
					num76 = mountedCenter.X - vector9.X;
					num77 = mountedCenter.Y - vector9.Y;
					Microsoft.Xna.Framework.Color color10 = Lighting.GetColor((int)vector9.X / 16, (int)(vector9.Y / 16f));
					spriteBatch.Draw(gemChainTexture[num75], new Vector2(vector9.X - screenPosition.X, vector9.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, gemChainTexture[num75].Width, gemChainTexture[num75].Height), color10, rotation8, new Vector2((float)gemChainTexture[num75].Width * 0.5f, (float)gemChainTexture[num75].Height * 0.5f), 1f, SpriteEffects.None, 0f);
				}
			}
			else if (projectile.type == 256)
			{
				Vector2 vector10 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num79 = mountedCenter.X - vector10.X;
				float num80 = mountedCenter.Y - vector10.Y;
				float num81 = (float)Math.Atan2(num80, num79) - 1.57f;
				bool flag8 = true;
				while (flag8)
				{
					float num82 = (float)Math.Sqrt(num79 * num79 + num80 * num80);
					if (num82 < 26f)
					{
						flag8 = false;
						continue;
					}
					if (float.IsNaN(num82))
					{
						flag8 = false;
						continue;
					}
					num82 = 26f / num82;
					num79 *= num82;
					num80 *= num82;
					vector10.X += num79;
					vector10.Y += num80;
					num79 = player[projectile.owner].position.X + (float)(player[projectile.owner].width / 2) - vector10.X;
					num80 = player[projectile.owner].position.Y + (float)(player[projectile.owner].height / 2) - vector10.Y;
					Microsoft.Xna.Framework.Color color11 = Lighting.GetColor((int)vector10.X / 16, (int)(vector10.Y / 16f));
					spriteBatch.Draw(chain20Texture, new Vector2(vector10.X - screenPosition.X, vector10.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, chain20Texture.Width, chain20Texture.Height), color11, num81 - 0.785f, new Vector2((float)chain20Texture.Width * 0.5f, (float)chain20Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
				}
			}
			else if (projectile.type == 322)
			{
				Vector2 vector11 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num83 = mountedCenter.X - vector11.X;
				float num84 = mountedCenter.Y - vector11.Y;
				float rotation9 = (float)Math.Atan2(num84, num83) - 1.57f;
				bool flag9 = true;
				while (flag9)
				{
					float num85 = (float)Math.Sqrt(num83 * num83 + num84 * num84);
					if (num85 < 22f)
					{
						flag9 = false;
						continue;
					}
					if (float.IsNaN(num85))
					{
						flag9 = false;
						continue;
					}
					num85 = 22f / num85;
					num83 *= num85;
					num84 *= num85;
					vector11.X += num83;
					vector11.Y += num84;
					num83 = mountedCenter.X - vector11.X;
					num84 = mountedCenter.Y - vector11.Y;
					Microsoft.Xna.Framework.Color color12 = Lighting.GetColor((int)vector11.X / 16, (int)(vector11.Y / 16f));
					spriteBatch.Draw(chain29Texture, new Vector2(vector11.X - screenPosition.X, vector11.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, chain29Texture.Width, chain29Texture.Height), color12, rotation9, new Vector2((float)chain29Texture.Width * 0.5f, (float)chain29Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
				}
			}
			else if (projectile.type == 315)
			{
				Vector2 vector12 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num86 = mountedCenter.X - vector12.X;
				float num87 = mountedCenter.Y - vector12.Y;
				float rotation10 = (float)Math.Atan2(num87, num86) - 1.57f;
				bool flag10 = true;
				while (flag10)
				{
					float num88 = (float)Math.Sqrt(num86 * num86 + num87 * num87);
					if (num88 < 50f)
					{
						flag10 = false;
						continue;
					}
					if (float.IsNaN(num88))
					{
						flag10 = false;
						continue;
					}
					num88 = 40f / num88;
					num86 *= num88;
					num87 *= num88;
					vector12.X += num86;
					vector12.Y += num87;
					num86 = mountedCenter.X - vector12.X;
					num87 = mountedCenter.Y - vector12.Y;
					Microsoft.Xna.Framework.Color color13 = Lighting.GetColor((int)vector12.X / 16, (int)(vector12.Y / 16f));
					spriteBatch.Draw(chain28Texture, new Vector2(vector12.X - screenPosition.X, vector12.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, chain28Texture.Width, chain28Texture.Height), color13, rotation10, new Vector2((float)chain28Texture.Width * 0.5f, (float)chain28Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
				}
			}
			else if (projectile.type == 331)
			{
				Vector2 vector13 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num89 = mountedCenter.X - vector13.X;
				float num90 = mountedCenter.Y - vector13.Y;
				float rotation11 = (float)Math.Atan2(num90, num89) - 1.57f;
				bool flag11 = true;
				while (flag11)
				{
					float num91 = (float)Math.Sqrt(num89 * num89 + num90 * num90);
					if (num91 < 30f)
					{
						flag11 = false;
						continue;
					}
					if (float.IsNaN(num91))
					{
						flag11 = false;
						continue;
					}
					num91 = 24f / num91;
					num89 *= num91;
					num90 *= num91;
					vector13.X += num89;
					vector13.Y += num90;
					num89 = mountedCenter.X - vector13.X;
					num90 = mountedCenter.Y - vector13.Y;
					Microsoft.Xna.Framework.Color color14 = Lighting.GetColor((int)vector13.X / 16, (int)(vector13.Y / 16f));
					spriteBatch.Draw(chain30Texture, new Vector2(vector13.X - screenPosition.X, vector13.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, chain30Texture.Width, chain30Texture.Height), color14, rotation11, new Vector2((float)chain30Texture.Width * 0.5f, (float)chain30Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
				}
			}
			else if (projectile.type == 332)
			{
				int num92 = 0;
				Vector2 vector14 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num93 = mountedCenter.X - vector14.X;
				float num94 = mountedCenter.Y - vector14.Y;
				float rotation12 = (float)Math.Atan2(num94, num93) - 1.57f;
				bool flag12 = true;
				while (flag12)
				{
					float num95 = (float)Math.Sqrt(num93 * num93 + num94 * num94);
					if (num95 < 30f)
					{
						flag12 = false;
						continue;
					}
					if (float.IsNaN(num95))
					{
						flag12 = false;
						continue;
					}
					int i2 = (int)vector14.X / 16;
					int j2 = (int)vector14.Y / 16;
					if (num92 == 0)
					{
						Lighting.AddLight(i2, j2, 0f, 0.2f, 0.2f);
					}
					if (num92 == 1)
					{
						Lighting.AddLight(i2, j2, 0.1f, 0.2f, 0f);
					}
					if (num92 == 2)
					{
						Lighting.AddLight(i2, j2, 0.2f, 0.1f, 0f);
					}
					if (num92 == 3)
					{
						Lighting.AddLight(i2, j2, 0.2f, 0f, 0.2f);
					}
					num95 = 16f / num95;
					num93 *= num95;
					num94 *= num95;
					vector14.X += num93;
					vector14.Y += num94;
					num93 = mountedCenter.X - vector14.X;
					num94 = mountedCenter.Y - vector14.Y;
					Microsoft.Xna.Framework.Color color15 = Lighting.GetColor((int)vector14.X / 16, (int)(vector14.Y / 16f));
					spriteBatch.Draw(chain31Texture, new Vector2(vector14.X - screenPosition.X, vector14.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, chain31Texture.Height / 4 * num92, chain31Texture.Width, chain31Texture.Height / 4), color15, rotation12, new Vector2((float)chain30Texture.Width * 0.5f, chain30Texture.Height / 8), 1f, SpriteEffects.None, 0f);
					spriteBatch.Draw(chain32Texture, new Vector2(vector14.X - screenPosition.X, vector14.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, chain31Texture.Height / 4 * num92, chain31Texture.Width, chain31Texture.Height / 4), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), rotation12, new Vector2((float)chain30Texture.Width * 0.5f, chain30Texture.Height / 8), 1f, SpriteEffects.None, 0f);
					num92++;
					if (num92 > 3)
					{
						num92 = 0;
					}
				}
			}
			else if (projectile.type == 372 || projectile.type == 383 || projectile.type == 396 || projectile.type == 403 || projectile.type == 404 || projectile.type == 446 || (projectile.type >= 486 && projectile.type <= 489) || (projectile.type >= 646 && projectile.type <= 649))
			{
				Texture2D texture2D = null;
				Microsoft.Xna.Framework.Color color16 = Microsoft.Xna.Framework.Color.Transparent;
				Texture2D texture2D2 = chain33Texture;
				if (projectile.type == 383)
				{
					texture2D2 = chain34Texture;
				}
				if (projectile.type == 396)
				{
					texture2D2 = chain35Texture;
				}
				if (projectile.type == 403)
				{
					texture2D2 = chain36Texture;
				}
				if (projectile.type == 404)
				{
					texture2D2 = chain37Texture;
				}
				if (projectile.type == 446)
				{
					texture2D2 = extraTexture[3];
				}
				if (projectile.type >= 486 && projectile.type <= 489)
				{
					texture2D2 = chainsTexture[projectile.type - 486];
				}
				if (projectile.type >= 646 && projectile.type <= 649)
				{
					texture2D2 = chainsTexture[projectile.type - 646 + 8];
					texture2D = chainsTexture[projectile.type - 646 + 12];
					color16 = new Microsoft.Xna.Framework.Color(255, 255, 255, 127);
				}
				Vector2 center = projectile.Center;
				Microsoft.Xna.Framework.Rectangle? sourceRectangle = null;
				Vector2 origin = new Vector2((float)texture2D2.Width * 0.5f, (float)texture2D2.Height * 0.5f);
				float num96 = texture2D2.Height;
				float num97 = 0f;
				if (projectile.type == 446)
				{
					int num98 = 7;
					int num99 = (int)projectile.localAI[0] / num98;
					sourceRectangle = new Microsoft.Xna.Framework.Rectangle(0, texture2D2.Height / 4 * num99, texture2D2.Width, texture2D2.Height / 4);
					origin.Y /= 4f;
					num96 /= 4f;
				}
				switch (projectile.type)
				{
				case 383:
					num97 = 14f;
					break;
				case 446:
					num97 = 20f;
					break;
				case 489:
					num97 = 10f;
					break;
				case 487:
					num97 = 8f;
					break;
				}
				if (num97 != 0f)
				{
					float num100 = -1.57f;
					Vector2 value2 = new Vector2((float)Math.Cos(projectile.rotation + num100), (float)Math.Sin(projectile.rotation + num100));
					center -= value2 * num97;
					value2 = mountedCenter - center;
					value2.Normalize();
					center -= value2 * num96 / 2f;
				}
				Vector2 vector15 = mountedCenter - center;
				float rotation13 = (float)Math.Atan2(vector15.Y, vector15.X) - 1.57f;
				bool flag13 = true;
				if (float.IsNaN(center.X) && float.IsNaN(center.Y))
				{
					flag13 = false;
				}
				if (float.IsNaN(vector15.X) && float.IsNaN(vector15.Y))
				{
					flag13 = false;
				}
				while (flag13)
				{
					float num101 = vector15.Length();
					if (num101 < num96 + 1f)
					{
						flag13 = false;
						continue;
					}
					Vector2 value3 = vector15;
					value3.Normalize();
					center += value3 * num96;
					vector15 = mountedCenter - center;
					Microsoft.Xna.Framework.Color color17 = Lighting.GetColor((int)center.X / 16, (int)(center.Y / 16f));
					if (projectile.type == 396)
					{
						color17 *= (float)(255 - projectile.alpha) / 255f;
					}
					if (projectile.type == 446)
					{
						color17 = projectile.GetAlpha(color17);
					}
					if (projectile.type == 488)
					{
						Lighting.AddLight(center, 0.2f, 0f, 0.175f);
						color17 = new Microsoft.Xna.Framework.Color(255, 255, 255, 255);
					}
					if (projectile.type >= 646 && projectile.type <= 649)
					{
						color17 = projectile.GetAlpha(color17);
					}
					spriteBatch.Draw(texture2D2, center - screenPosition, sourceRectangle, color17, rotation13, origin, 1f, SpriteEffects.None, 0f);
					if (texture2D != null)
					{
						spriteBatch.Draw(texture2D, center - screenPosition, sourceRectangle, color16, rotation13, origin, 1f, SpriteEffects.None, 0f);
					}
				}
			}
			else if (projectile.aiStyle == 7)
			{
				Vector2 vector16 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num102 = mountedCenter.X - vector16.X;
				float num103 = mountedCenter.Y - vector16.Y;
				float rotation14 = (float)Math.Atan2(num103, num102) - 1.57f;
				bool flag14 = true;
				while (flag14)
				{
					float num104 = (float)Math.Sqrt(num102 * num102 + num103 * num103);
					if (num104 < 25f)
					{
						flag14 = false;
						continue;
					}
					if (float.IsNaN(num104))
					{
						flag14 = false;
						continue;
					}
					num104 = 12f / num104;
					num102 *= num104;
					num103 *= num104;
					vector16.X += num102;
					vector16.Y += num103;
					num102 = mountedCenter.X - vector16.X;
					num103 = mountedCenter.Y - vector16.Y;
					Microsoft.Xna.Framework.Color color18 = Lighting.GetColor((int)vector16.X / 16, (int)(vector16.Y / 16f));
					spriteBatch.Draw(chainTexture, new Vector2(vector16.X - screenPosition.X, vector16.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, chainTexture.Width, chainTexture.Height), color18, rotation14, new Vector2((float)chainTexture.Width * 0.5f, (float)chainTexture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
				}
			}
			else if (projectile.type == 262)
			{
				float x = projectile.Center.X;
				float y = projectile.Center.Y;
				float x2 = projectile.velocity.X;
				float y2 = projectile.velocity.Y;
				float num105 = (float)Math.Sqrt(x2 * x2 + y2 * y2);
				num105 = 4f / num105;
				if (projectile.ai[0] == 0f)
				{
					x -= projectile.velocity.X * num105;
					y -= projectile.velocity.Y * num105;
				}
				else
				{
					x += projectile.velocity.X * num105;
					y += projectile.velocity.Y * num105;
				}
				Vector2 vector17 = new Vector2(x, y);
				x2 = mountedCenter.X - vector17.X;
				y2 = mountedCenter.Y - vector17.Y;
				float rotation15 = (float)Math.Atan2(y2, x2) - 1.57f;
				if (projectile.alpha == 0)
				{
					int num106 = -1;
					if (projectile.position.X + (float)(projectile.width / 2) < mountedCenter.X)
					{
						num106 = 1;
					}
					if (player[projectile.owner].direction == 1)
					{
						player[projectile.owner].itemRotation = (float)Math.Atan2(y2 * (float)num106, x2 * (float)num106);
					}
					else
					{
						player[projectile.owner].itemRotation = (float)Math.Atan2(y2 * (float)num106, x2 * (float)num106);
					}
				}
				bool flag15 = true;
				while (flag15)
				{
					float num107 = (float)Math.Sqrt(x2 * x2 + y2 * y2);
					if (num107 < 25f)
					{
						flag15 = false;
						continue;
					}
					if (float.IsNaN(num107))
					{
						flag15 = false;
						continue;
					}
					num107 = 12f / num107;
					x2 *= num107;
					y2 *= num107;
					vector17.X += x2;
					vector17.Y += y2;
					x2 = mountedCenter.X - vector17.X;
					y2 = mountedCenter.Y - vector17.Y;
					Microsoft.Xna.Framework.Color color19 = Lighting.GetColor((int)vector17.X / 16, (int)(vector17.Y / 16f));
					spriteBatch.Draw(chain22Texture, new Vector2(vector17.X - screenPosition.X, vector17.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, chain22Texture.Width, chain22Texture.Height), color19, rotation15, new Vector2((float)chain22Texture.Width * 0.5f, (float)chain22Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
				}
			}
			else if (projectile.type == 273)
			{
				float x3 = projectile.Center.X;
				float y3 = projectile.Center.Y;
				float x4 = projectile.velocity.X;
				float y4 = projectile.velocity.Y;
				float num108 = (float)Math.Sqrt(x4 * x4 + y4 * y4);
				num108 = 4f / num108;
				if (projectile.ai[0] == 0f)
				{
					x3 -= projectile.velocity.X * num108;
					y3 -= projectile.velocity.Y * num108;
				}
				else
				{
					x3 += projectile.velocity.X * num108;
					y3 += projectile.velocity.Y * num108;
				}
				Vector2 vector18 = new Vector2(x3, y3);
				x4 = mountedCenter.X - vector18.X;
				y4 = mountedCenter.Y - vector18.Y;
				float rotation16 = (float)Math.Atan2(y4, x4) - 1.57f;
				if (projectile.alpha == 0)
				{
					int num109 = -1;
					if (projectile.position.X + (float)(projectile.width / 2) < mountedCenter.X)
					{
						num109 = 1;
					}
					if (player[projectile.owner].direction == 1)
					{
						player[projectile.owner].itemRotation = (float)Math.Atan2(y4 * (float)num109, x4 * (float)num109);
					}
					else
					{
						player[projectile.owner].itemRotation = (float)Math.Atan2(y4 * (float)num109, x4 * (float)num109);
					}
				}
				bool flag16 = true;
				while (flag16)
				{
					float num110 = (float)Math.Sqrt(x4 * x4 + y4 * y4);
					if (num110 < 25f)
					{
						flag16 = false;
						continue;
					}
					if (float.IsNaN(num110))
					{
						flag16 = false;
						continue;
					}
					num110 = 12f / num110;
					x4 *= num110;
					y4 *= num110;
					vector18.X += x4;
					vector18.Y += y4;
					x4 = mountedCenter.X - vector18.X;
					y4 = mountedCenter.Y - vector18.Y;
					Microsoft.Xna.Framework.Color color20 = Lighting.GetColor((int)vector18.X / 16, (int)(vector18.Y / 16f));
					spriteBatch.Draw(chain23Texture, new Vector2(vector18.X - screenPosition.X, vector18.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, chain23Texture.Width, chain23Texture.Height), color20, rotation16, new Vector2((float)chain23Texture.Width * 0.5f, (float)chain23Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
				}
			}
			else if (projectile.type == 481)
			{
				float x5 = projectile.Center.X;
				float y5 = projectile.Center.Y;
				float x6 = projectile.velocity.X;
				float y6 = projectile.velocity.Y;
				float num111 = (float)Math.Sqrt(x6 * x6 + y6 * y6);
				num111 = 4f / num111;
				if (projectile.ai[0] == 0f)
				{
					x5 -= projectile.velocity.X * num111;
					y5 -= projectile.velocity.Y * num111;
				}
				else
				{
					x5 += projectile.velocity.X * num111;
					y5 += projectile.velocity.Y * num111;
				}
				Vector2 vector19 = new Vector2(x5, y5);
				x6 = mountedCenter.X - vector19.X;
				y6 = mountedCenter.Y - vector19.Y;
				float rotation17 = (float)Math.Atan2(y6, x6) - 1.57f;
				if (projectile.alpha == 0)
				{
					int num112 = -1;
					if (projectile.position.X + (float)(projectile.width / 2) < mountedCenter.X)
					{
						num112 = 1;
					}
					if (player[projectile.owner].direction == 1)
					{
						player[projectile.owner].itemRotation = (float)Math.Atan2(y6 * (float)num112, x6 * (float)num112);
					}
					else
					{
						player[projectile.owner].itemRotation = (float)Math.Atan2(y6 * (float)num112, x6 * (float)num112);
					}
				}
				bool flag17 = true;
				while (flag17)
				{
					float num113 = 0.85f;
					float num114 = (float)Math.Sqrt(x6 * x6 + y6 * y6);
					float num115 = num114;
					if ((double)num114 < (double)chain40Texture.Height * 1.5)
					{
						flag17 = false;
						continue;
					}
					if (float.IsNaN(num114))
					{
						flag17 = false;
						continue;
					}
					num114 = (float)chain40Texture.Height * num113 / num114;
					x6 *= num114;
					y6 *= num114;
					vector19.X += x6;
					vector19.Y += y6;
					x6 = mountedCenter.X - vector19.X;
					y6 = mountedCenter.Y - vector19.Y;
					if (num115 > (float)(chain40Texture.Height * 2))
					{
						for (int m = 0; m < 2; m++)
						{
							float num116 = 0.75f;
							float num117 = 1f;
							num117 = ((m != 0) ? Math.Abs(player[projectile.owner].velocity.Y) : Math.Abs(player[projectile.owner].velocity.X));
							if (num117 > 10f)
							{
								num117 = 10f;
							}
							num117 /= 10f;
							num116 *= num117;
							num117 = num115 / 80f;
							if (num117 > 1f)
							{
								num117 = 1f;
							}
							num116 *= num117;
							if (num116 < 0f)
							{
								num116 = 0f;
							}
							if (float.IsNaN(num116))
							{
								continue;
							}
							if (m == 0)
							{
								if (player[projectile.owner].velocity.X < 0f && projectile.Center.X < mountedCenter.X)
								{
									y6 *= 1f - num116;
								}
								if (player[projectile.owner].velocity.X > 0f && projectile.Center.X > mountedCenter.X)
								{
									y6 *= 1f - num116;
								}
							}
							else
							{
								if (player[projectile.owner].velocity.Y < 0f && projectile.Center.Y < mountedCenter.Y)
								{
									x6 *= 1f - num116;
								}
								if (player[projectile.owner].velocity.Y > 0f && projectile.Center.Y > mountedCenter.Y)
								{
									x6 *= 1f - num116;
								}
							}
						}
					}
					Microsoft.Xna.Framework.Color color21 = Lighting.GetColor((int)vector19.X / 16, (int)(vector19.Y / 16f));
					spriteBatch.Draw(chain40Texture, new Vector2(vector19.X - screenPosition.X, vector19.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, chain40Texture.Width, chain40Texture.Height), color21, rotation17, new Vector2((float)chain40Texture.Width * 0.5f, (float)chain40Texture.Height * 0.5f), num113, SpriteEffects.None, 0f);
				}
			}
			else if (projectile.type == 271)
			{
				float x7 = projectile.Center.X;
				float y7 = projectile.Center.Y;
				float x8 = projectile.velocity.X;
				float y8 = projectile.velocity.Y;
				float num118 = (float)Math.Sqrt(x8 * x8 + y8 * y8);
				num118 = 4f / num118;
				if (projectile.ai[0] == 0f)
				{
					x7 -= projectile.velocity.X * num118;
					y7 -= projectile.velocity.Y * num118;
				}
				else
				{
					x7 += projectile.velocity.X * num118;
					y7 += projectile.velocity.Y * num118;
				}
				Vector2 vector20 = new Vector2(x7, y7);
				x8 = mountedCenter.X - vector20.X;
				y8 = mountedCenter.Y - vector20.Y;
				float rotation18 = (float)Math.Atan2(y8, x8) - 1.57f;
				if (projectile.alpha == 0)
				{
					int num119 = -1;
					if (projectile.position.X + (float)(projectile.width / 2) < mountedCenter.X)
					{
						num119 = 1;
					}
					if (player[projectile.owner].direction == 1)
					{
						player[projectile.owner].itemRotation = (float)Math.Atan2(y8 * (float)num119, x8 * (float)num119);
					}
					else
					{
						player[projectile.owner].itemRotation = (float)Math.Atan2(y8 * (float)num119, x8 * (float)num119);
					}
				}
				bool flag18 = true;
				while (flag18)
				{
					float num120 = (float)Math.Sqrt(x8 * x8 + y8 * y8);
					if (num120 < 25f)
					{
						flag18 = false;
						continue;
					}
					if (float.IsNaN(num120))
					{
						flag18 = false;
						continue;
					}
					num120 = 12f / num120;
					x8 *= num120;
					y8 *= num120;
					vector20.X += x8;
					vector20.Y += y8;
					x8 = mountedCenter.X - vector20.X;
					y8 = mountedCenter.Y - vector20.Y;
					Microsoft.Xna.Framework.Color color22 = Lighting.GetColor((int)vector20.X / 16, (int)(vector20.Y / 16f));
					spriteBatch.Draw(chain18Texture, new Vector2(vector20.X - screenPosition.X, vector20.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, chain18Texture.Width, chain18Texture.Height), color22, rotation18, new Vector2((float)chain18Texture.Width * 0.5f, (float)chain18Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
				}
			}
			else if (projectile.aiStyle == 13)
			{
				float num121 = projectile.position.X + 8f;
				float num122 = projectile.position.Y + 2f;
				float x9 = projectile.velocity.X;
				float num123 = projectile.velocity.Y;
				if (x9 == 0f && num123 == 0f)
				{
					num123 = 0.0001f;
					num123 = 0.0001f;
				}
				float num124 = (float)Math.Sqrt(x9 * x9 + num123 * num123);
				num124 = 20f / num124;
				if (projectile.ai[0] == 0f)
				{
					num121 -= projectile.velocity.X * num124;
					num122 -= projectile.velocity.Y * num124;
				}
				else
				{
					num121 += projectile.velocity.X * num124;
					num122 += projectile.velocity.Y * num124;
				}
				Vector2 vector21 = new Vector2(num121, num122);
				x9 = mountedCenter.X - vector21.X;
				num123 = mountedCenter.Y - vector21.Y;
				float rotation19 = (float)Math.Atan2(num123, x9) - 1.57f;
				if (projectile.alpha == 0)
				{
					int num125 = -1;
					if (projectile.position.X + (float)(projectile.width / 2) < mountedCenter.X)
					{
						num125 = 1;
					}
					if (player[projectile.owner].direction == 1)
					{
						player[projectile.owner].itemRotation = (float)Math.Atan2(num123 * (float)num125, x9 * (float)num125);
					}
					else
					{
						player[projectile.owner].itemRotation = (float)Math.Atan2(num123 * (float)num125, x9 * (float)num125);
					}
				}
				bool flag19 = true;
				while (flag19)
				{
					float num126 = (float)Math.Sqrt(x9 * x9 + num123 * num123);
					if (num126 < 25f)
					{
						flag19 = false;
						continue;
					}
					if (float.IsNaN(num126))
					{
						flag19 = false;
						continue;
					}
					num126 = 12f / num126;
					x9 *= num126;
					num123 *= num126;
					vector21.X += x9;
					vector21.Y += num123;
					x9 = mountedCenter.X - vector21.X;
					num123 = mountedCenter.Y - vector21.Y;
					Microsoft.Xna.Framework.Color color23 = Lighting.GetColor((int)vector21.X / 16, (int)(vector21.Y / 16f));
					spriteBatch.Draw(chainTexture, new Vector2(vector21.X - screenPosition.X, vector21.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, chainTexture.Width, chainTexture.Height), color23, rotation19, new Vector2((float)chainTexture.Width * 0.5f, (float)chainTexture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
				}
			}
			else if (projectile.type == 190)
			{
				float x10 = projectile.position.X + (float)(projectile.width / 2);
				float y9 = projectile.position.Y + (float)(projectile.height / 2);
				float x11 = projectile.velocity.X;
				float y10 = projectile.velocity.Y;
				Math.Sqrt(x11 * x11 + y10 * y10);
				Vector2 vector22 = new Vector2(x10, y9);
				x11 = mountedCenter.X - vector22.X;
				y10 = mountedCenter.Y + player[projectile.owner].gfxOffY - vector22.Y;
				Math.Atan2(y10, x11);
				if (projectile.alpha == 0)
				{
					int num127 = -1;
					if (projectile.position.X + (float)(projectile.width / 2) < mountedCenter.X)
					{
						num127 = 1;
					}
					if (player[projectile.owner].direction == 1)
					{
						player[projectile.owner].itemRotation = (float)Math.Atan2(y10 * (float)num127, x11 * (float)num127);
					}
					else
					{
						player[projectile.owner].itemRotation = (float)Math.Atan2(y10 * (float)num127, x11 * (float)num127);
					}
				}
			}
			else if (projectile.aiStyle == 15)
			{
				Vector2 vector23 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num128 = mountedCenter.X - vector23.X;
				float num129 = mountedCenter.Y - vector23.Y;
				float rotation20 = (float)Math.Atan2(num129, num128) - 1.57f;
				if (projectile.alpha == 0)
				{
					int num130 = -1;
					if (projectile.position.X + (float)(projectile.width / 2) < mountedCenter.X)
					{
						num130 = 1;
					}
					if (player[projectile.owner].direction == 1)
					{
						player[projectile.owner].itemRotation = (float)Math.Atan2(num129 * (float)num130, num128 * (float)num130);
					}
					else
					{
						player[projectile.owner].itemRotation = (float)Math.Atan2(num129 * (float)num130, num128 * (float)num130);
					}
				}
				bool flag20 = true;
				while (flag20)
				{
					float num131 = (float)Math.Sqrt(num128 * num128 + num129 * num129);
					if (num131 < 25f)
					{
						flag20 = false;
						continue;
					}
					if (float.IsNaN(num131))
					{
						flag20 = false;
						continue;
					}
					num131 = ((projectile.type != 154 && projectile.type != 247) ? (12f / num131) : (18f / num131));
					num128 *= num131;
					num129 *= num131;
					vector23.X += num128;
					vector23.Y += num129;
					num128 = mountedCenter.X - vector23.X;
					num129 = mountedCenter.Y - vector23.Y;
					Microsoft.Xna.Framework.Color color24 = Lighting.GetColor((int)vector23.X / 16, (int)(vector23.Y / 16f));
					if (projectile.type == 25)
					{
						spriteBatch.Draw(chain2Texture, new Vector2(vector23.X - screenPosition.X, vector23.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, chain2Texture.Width, chain2Texture.Height), color24, rotation20, new Vector2((float)chain2Texture.Width * 0.5f, (float)chain2Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
					}
					else if (projectile.type == 35)
					{
						spriteBatch.Draw(chain6Texture, new Vector2(vector23.X - screenPosition.X, vector23.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, chain6Texture.Width, chain6Texture.Height), color24, rotation20, new Vector2((float)chain6Texture.Width * 0.5f, (float)chain6Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
					}
					else if (projectile.type == 247)
					{
						spriteBatch.Draw(chain19Texture, new Vector2(vector23.X - screenPosition.X, vector23.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, chain19Texture.Width, chain19Texture.Height), color24, rotation20, new Vector2((float)chain19Texture.Width * 0.5f, (float)chain19Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
					}
					else if (projectile.type == 63)
					{
						spriteBatch.Draw(chain7Texture, new Vector2(vector23.X - screenPosition.X, vector23.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, chain7Texture.Width, chain7Texture.Height), color24, rotation20, new Vector2((float)chain7Texture.Width * 0.5f, (float)chain7Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
					}
					else if (projectile.type == 154)
					{
						spriteBatch.Draw(chain13Texture, new Vector2(vector23.X - screenPosition.X, vector23.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, chain13Texture.Width, chain13Texture.Height), color24, rotation20, new Vector2((float)chain13Texture.Width * 0.5f, (float)chain13Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
					}
					else
					{
						spriteBatch.Draw(chain3Texture, new Vector2(vector23.X - screenPosition.X, vector23.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, chain3Texture.Width, chain3Texture.Height), color24, rotation20, new Vector2((float)chain3Texture.Width * 0.5f, (float)chain3Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
					}
				}
			}
			Microsoft.Xna.Framework.Color color25 = Lighting.GetColor((int)((double)projectile.position.X + (double)projectile.width * 0.5) / 16, (int)(((double)projectile.position.Y + (double)projectile.height * 0.5) / 16.0));
			if (projectile.hide && !ProjectileID.Sets.DontAttachHideToAlpha[projectile.type])
			{
				color25 = Lighting.GetColor((int)mountedCenter.X / 16, (int)(mountedCenter.Y / 16f));
			}
			if (projectile.type == 14)
			{
				color25 = Microsoft.Xna.Framework.Color.White;
			}
			int num132 = 0;
			int num133 = 0;
			if (projectile.type == 175)
			{
				num132 = 10;
			}
			if (projectile.type == 392)
			{
				num132 = -2;
			}
			if (projectile.type == 499)
			{
				num132 = 12;
			}
			if (projectile.bobber)
			{
				num132 = 8;
			}
			if (projectile.type == 519)
			{
				num132 = 6;
				num133 -= 6;
			}
			if (projectile.type == 520)
			{
				num132 = 12;
			}
			if (projectile.type == 492)
			{
				num133 -= 4;
				num132 += 5;
			}
			if (projectile.type == 498)
			{
				num132 = 6;
			}
			if (projectile.type == 489)
			{
				num132 = -2;
			}
			if (projectile.type == 486)
			{
				num132 = -6;
			}
			if (projectile.type == 525)
			{
				num132 = 5;
			}
			if (projectile.type == 488)
			{
				num133 -= 8;
			}
			if (projectile.type == 373)
			{
				num133 = -10;
				num132 = 6;
			}
			if (projectile.type == 375)
			{
				num133 = -11;
				num132 = 12;
			}
			if (projectile.type == 423)
			{
				num133 = -5;
			}
			if (projectile.type == 346)
			{
				num132 = 4;
			}
			if (projectile.type == 331)
			{
				num133 = -4;
			}
			if (projectile.type == 254)
			{
				num132 = 3;
			}
			if (projectile.type == 273)
			{
				num133 = 2;
			}
			if (projectile.type == 335)
			{
				num132 = 6;
			}
			if (projectile.type == 162)
			{
				num132 = 1;
				num133 = 1;
			}
			if (projectile.type == 377)
			{
				num132 = -6;
			}
			if (projectile.type == 353)
			{
				num132 = 36;
				num133 = -12;
			}
			if (projectile.type == 324)
			{
				num132 = 22;
				num133 = -6;
			}
			if (projectile.type == 266)
			{
				num132 = 10;
				num133 = -10;
			}
			if (projectile.type == 319)
			{
				num132 = 10;
				num133 = -12;
			}
			if (projectile.type == 315)
			{
				num132 = -13;
				num133 = -6;
			}
			if (projectile.type == 313 && projectile.height != 54)
			{
				num133 = -12;
				num132 = 20;
			}
			if (projectile.type == 314)
			{
				num133 = -8;
				num132 = 0;
			}
			if (projectile.type == 269)
			{
				num132 = 18;
				num133 = -14;
			}
			if (projectile.type == 268)
			{
				num132 = 22;
				num133 = -2;
			}
			if (projectile.type == 18)
			{
				num132 = 3;
				num133 = 3;
			}
			if (projectile.type == 16)
			{
				num132 = 6;
			}
			if (projectile.type == 17 || projectile.type == 31)
			{
				num132 = 2;
			}
			if (projectile.type == 25 || projectile.type == 26 || projectile.type == 35 || projectile.type == 63 || projectile.type == 154)
			{
				num132 = 6;
				num133 -= 6;
			}
			if (projectile.type == 28 || projectile.type == 37 || projectile.type == 75)
			{
				num132 = 8;
			}
			if (projectile.type == 29 || projectile.type == 470 || projectile.type == 637)
			{
				num132 = 11;
			}
			if (projectile.type == 43)
			{
				num132 = 4;
			}
			if (projectile.type == 208)
			{
				num132 = 2;
				num133 -= 12;
			}
			if (projectile.type == 209)
			{
				num132 = 4;
				num133 -= 8;
			}
			if (projectile.type == 210)
			{
				num132 = 2;
				num133 -= 22;
			}
			if (projectile.type == 251)
			{
				num132 = 18;
				num133 -= 10;
			}
			if (projectile.type == 163 || projectile.type == 310)
			{
				num132 = 10;
			}
			if (projectile.type == 69 || projectile.type == 70)
			{
				num132 = 4;
				num133 = 4;
			}
			float num134 = (float)(projectileTexture[projectile.type].Width - projectile.width) * 0.5f + (float)projectile.width * 0.5f;
			if (projectile.type == 50 || projectile.type == 53 || projectile.type == 515)
			{
				num133 = -8;
			}
			if (projectile.type == 473)
			{
				num133 = -6;
				num132 = 2;
			}
			if (projectile.type == 72 || projectile.type == 86 || projectile.type == 87)
			{
				num133 = -16;
				num132 = 8;
			}
			if (projectile.type == 74)
			{
				num133 = -6;
			}
			if (projectile.type == 99)
			{
				num132 = 1;
			}
			if (projectile.type == 111)
			{
				num132 = 18;
				num133 = -16;
			}
			if (projectile.type == 334)
			{
				num133 = -18;
				num132 = 8;
			}
			if (projectile.type == 200)
			{
				num132 = 12;
				num133 = -12;
			}
			if (projectile.type == 211)
			{
				num132 = 14;
				num133 = 0;
			}
			if (projectile.type == 236)
			{
				num132 = 30;
				num133 = -14;
			}
			if (projectile.type >= 191 && projectile.type <= 194)
			{
				num132 = 26;
				num133 = ((projectile.direction != 1) ? (-22) : (-10));
			}
			if (projectile.type >= 390 && projectile.type <= 392)
			{
				num133 = 4 * projectile.direction;
			}
			if (projectile.type == 112)
			{
				num132 = 12;
			}
			int type2 = projectile.type;
			int num266 = 118;
			if (projectile.type == 517)
			{
				num132 = 6;
			}
			if (projectile.type == 516)
			{
				num132 = 6;
			}
			if (projectile.type == 127)
			{
				num132 = 8;
			}
			if (projectile.type == 155)
			{
				num132 = 3;
				num133 = 3;
			}
			if (projectile.type == 397)
			{
				num134 -= 1f;
				num132 = -2;
				num133 = -2;
			}
			if (projectile.type == 398)
			{
				num132 = 8;
			}
			SpriteEffects spriteEffects = SpriteEffects.None;
			if (projectile.spriteDirection == -1)
			{
				spriteEffects = SpriteEffects.FlipHorizontally;
			}
			if (projectile.type == 221)
			{
				for (int n = 1; n < 10; n++)
				{
					float num135 = projectile.velocity.X * (float)n * 0.5f;
					float num136 = projectile.velocity.Y * (float)n * 0.5f;
					Microsoft.Xna.Framework.Color alpha = projectile.GetAlpha(color25);
					float num137 = 0f;
					if (n == 1)
					{
						num137 = 0.9f;
					}
					if (n == 2)
					{
						num137 = 0.8f;
					}
					if (n == 3)
					{
						num137 = 0.7f;
					}
					if (n == 4)
					{
						num137 = 0.6f;
					}
					if (n == 5)
					{
						num137 = 0.5f;
					}
					if (n == 6)
					{
						num137 = 0.4f;
					}
					if (n == 7)
					{
						num137 = 0.3f;
					}
					if (n == 8)
					{
						num137 = 0.2f;
					}
					if (n == 9)
					{
						num137 = 0.1f;
					}
					alpha.R = (byte)((float)(int)alpha.R * num137);
					alpha.G = (byte)((float)(int)alpha.G * num137);
					alpha.B = (byte)((float)(int)alpha.B * num137);
					alpha.A = (byte)((float)(int)alpha.A * num137);
					int num138 = projectileTexture[projectile.type].Height / projFrames[projectile.type];
					int y11 = num138 * projectile.frame;
					spriteBatch.Draw(projectileTexture[projectile.type], new Vector2(projectile.position.X - screenPosition.X + num134 + (float)num133 - num135, projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY - num136), new Microsoft.Xna.Framework.Rectangle(0, y11, projectileTexture[projectile.type].Width, num138), alpha, projectile.rotation, new Vector2(num134, projectile.height / 2 + num132), projectile.scale, spriteEffects, 0f);
				}
			}
			if (projectile.type == 408 || projectile.type == 435 || projectile.type == 436 || projectile.type == 438 || projectile.type == 452 || projectile.type == 454 || projectile.type == 459 || projectile.type == 462 || projectile.type == 503 || projectile.type == 532 || projectile.type == 533 || projectile.type == 573 || projectile.type == 582 || projectile.type == 585 || projectile.type == 592 || projectile.type == 601 || projectile.type == 636 || projectile.type == 638 || projectile.type == 640 || projectile.type == 639 || projectile.type == 424 || projectile.type == 425 || projectile.type == 426)
			{
				Texture2D texture2D3 = projectileTexture[projectile.type];
				int num139 = projectileTexture[projectile.type].Height / projFrames[projectile.type];
				int y12 = num139 * projectile.frame;
				Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(0, y12, texture2D3.Width, num139);
				Vector2 origin2 = rectangle.Size() / 2f;
				if (projectile.type == 503)
				{
					origin2.Y = 70f;
				}
				if (projectile.type == 438)
				{
					y12 = 0;
				}
				if (projectile.type == 452)
				{
					y12 = 0;
				}
				if (projectile.type == 408)
				{
					y12 = num139;
				}
				if (projectile.type == 636)
				{
					origin2.Y = 10f;
				}
				if (projectile.type == 638)
				{
					origin2.Y = 2f;
				}
				if (projectile.type == 640 || projectile.type == 639)
				{
					origin2.Y = 5f;
				}
				int num140 = 8;
				int num141 = 2;
				float value4 = 1f;
				float num142 = 0f;
				if (projectile.type == 503)
				{
					num140 = 9;
					num141 = 3;
					value4 = 0.5f;
				}
				else if (projectile.type == 582)
				{
					num140 = 10;
					num141 = 2;
					value4 = 0.7f;
					num142 = 0.2f;
				}
				else if (projectile.type == 638)
				{
					num140 = 5;
					num141 = 1;
					value4 = 1f;
				}
				else if (projectile.type == 639)
				{
					num140 = 10;
					num141 = 1;
					value4 = 1f;
				}
				else if (projectile.type == 640)
				{
					num140 = 20;
					num141 = 1;
					value4 = 1f;
				}
				else if (projectile.type == 436)
				{
					num141 = 2;
					value4 = 0.5f;
				}
				else if (projectile.type == 424 || projectile.type == 425 || projectile.type == 426)
				{
					num140 = 10;
					num141 = 2;
					value4 = 0.6f;
				}
				else if (projectile.type == 438)
				{
					num140 = 10;
					num141 = 2;
					value4 = 1f;
				}
				else if (projectile.type == 452)
				{
					num140 = 10;
					num141 = 3;
					value4 = 0.5f;
				}
				else if (projectile.type == 454)
				{
					num140 = 5;
					num141 = 1;
					value4 = 0.2f;
				}
				else if (projectile.type == 462)
				{
					num140 = 7;
					num141 = 1;
					value4 = 0.2f;
				}
				else if (projectile.type == 585)
				{
					num140 = 7;
					num141 = 1;
					value4 = 0.2f;
				}
				else if (projectile.type == 459)
				{
					num140 = (int)(projectile.scale * 8f);
					num141 = num140 / 4;
					if (num141 < 1)
					{
						num141 = 1;
					}
					value4 = 0.3f;
				}
				else if (projectile.type == 532)
				{
					num140 = 10;
					num141 = 1;
					value4 = 0.7f;
					num142 = 0.2f;
				}
				else if (projectile.type == 592)
				{
					num140 = 10;
					num141 = 2;
					value4 = 1f;
				}
				else if (projectile.type == 601)
				{
					num140 = 8;
					num141 = 1;
					value4 = 0.3f;
				}
				else if (projectile.type == 636)
				{
					num140 = 20;
					num141 = 3;
					value4 = 0.5f;
				}
				else if (projectile.type == 533)
				{
					if (projectile.ai[0] >= 6f && projectile.ai[0] <= 8f)
					{
						num140 = ((projectile.ai[0] == 6f) ? 8 : 4);
						num141 = 1;
						if (projectile.ai[0] != 7f)
						{
							num142 = 0.2f;
						}
					}
					else
					{
						num140 = (num141 = 0);
					}
				}
				for (int num143 = 1; num143 < num140; num143 += num141)
				{
					Microsoft.Xna.Framework.Color color26 = color25;
					if (projectile.type == 408 || projectile.type == 435)
					{
						color26 = Microsoft.Xna.Framework.Color.Lerp(color26, Microsoft.Xna.Framework.Color.Blue, 0.5f);
					}
					else if (projectile.type == 436)
					{
						color26 = Microsoft.Xna.Framework.Color.Lerp(color26, Microsoft.Xna.Framework.Color.LimeGreen, 0.5f);
					}
					else if (projectile.type >= 424 && projectile.type <= 426)
					{
						color26 = Microsoft.Xna.Framework.Color.Lerp(color26, Microsoft.Xna.Framework.Color.Red, 0.5f);
					}
					else if (projectile.type == 640 || projectile.type == 639)
					{
						color26.A = 127;
					}
					color26 = projectile.GetAlpha(color26);
					if (projectile.type == 438)
					{
						color26.G /= (byte)num143;
						color26.B /= (byte)num143;
					}
					else if (projectile.type == 592)
					{
						color26.R /= (byte)num143;
						color26.G /= (byte)num143;
					}
					else if (projectile.type == 640)
					{
						color26.R /= (byte)num143;
						color26.A /= (byte)num143;
					}
					else if (projectile.type >= 424 && projectile.type <= 426)
					{
						color26.B /= (byte)num143;
						color26.G /= (byte)num143;
						color26.A /= (byte)num143;
					}
					color26 *= (float)(num140 - num143) / ((float)ProjectileID.Sets.TrailCacheLength[projectile.type] * 1.5f);
					Vector2 value5 = projectile.oldPos[num143];
					float num144 = projectile.rotation;
					SpriteEffects effects = spriteEffects;
					if (ProjectileID.Sets.TrailingMode[projectile.type] == 2)
					{
						num144 = projectile.oldRot[num143];
						effects = ((projectile.oldSpriteDirection[num143] == -1) ? SpriteEffects.FlipHorizontally : SpriteEffects.None);
					}
					spriteBatch.Draw(texture2D3, value5 + projectile.Size / 2f - screenPosition + new Vector2(0f, projectile.gfxOffY), rectangle, color26, num144 + projectile.rotation * num142 * (float)(num143 - 1) * (float)(-spriteEffects.HasFlag(SpriteEffects.FlipHorizontally).ToDirectionInt()), origin2, MathHelper.Lerp(projectile.scale, value4, (float)num143 / 15f), effects, 0f);
				}
				Microsoft.Xna.Framework.Color color27 = projectile.GetAlpha(color25);
				if (projectile.type == 640)
				{
					color27 = Microsoft.Xna.Framework.Color.Transparent;
				}
				spriteBatch.Draw(texture2D3, projectile.Center - screenPosition + new Vector2(0f, projectile.gfxOffY), rectangle, color27, projectile.rotation, origin2, projectile.scale, spriteEffects, 0f);
				if (projectile.type == 503)
				{
					spriteBatch.Draw(extraTexture[36], projectile.Center - screenPosition + new Vector2(0f, projectile.gfxOffY), rectangle, Microsoft.Xna.Framework.Color.White, projectile.localAI[0], origin2, projectile.scale, spriteEffects, 0f);
				}
				else if (projectile.type == 533)
				{
					spriteBatch.Draw(glowMaskTexture[128], projectile.Center - screenPosition + new Vector2(0f, projectile.gfxOffY), rectangle, Microsoft.Xna.Framework.Color.White * 0.3f, projectile.rotation, origin2, projectile.scale, spriteEffects, 0f);
				}
				else if (projectile.type == 601)
				{
					Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
					white.A = 0;
					spriteBatch.Draw(texture2D3, projectile.Center - screenPosition + new Vector2(0f, projectile.gfxOffY), rectangle, white, projectile.rotation, origin2, projectile.scale * 0.7f, spriteEffects, 0f);
				}
			}
			else if (projectile.type == 440 || projectile.type == 449 || projectile.type == 606)
			{
				Microsoft.Xna.Framework.Rectangle value6 = new Microsoft.Xna.Framework.Rectangle((int)screenPosition.X - 500, (int)screenPosition.Y - 500, screenWidth + 1000, screenHeight + 1000);
				if (projectile.getRect().Intersects(value6))
				{
					Vector2 value7 = new Vector2(projectile.position.X - screenPosition.X + num134 + (float)num133, projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY);
					float num145 = 100f;
					float scaleFactor = 3f;
					if (projectile.type == 606)
					{
						num145 = 150f;
						scaleFactor = 3f;
					}
					if (projectile.ai[1] == 1f)
					{
						num145 = (int)projectile.localAI[0];
					}
					for (int num146 = 1; num146 <= (int)projectile.localAI[0]; num146++)
					{
						Vector2 value8 = Vector2.Normalize(projectile.velocity) * num146 * scaleFactor;
						Microsoft.Xna.Framework.Color alpha2 = projectile.GetAlpha(color25);
						alpha2 *= (num145 - (float)num146) / num145;
						alpha2.A = 0;
						spriteBatch.Draw(projectileTexture[projectile.type], value7 - value8, null, alpha2, projectile.rotation, new Vector2(num134, projectile.height / 2 + num132), projectile.scale, spriteEffects, 0f);
					}
				}
			}
			else if (projectile.type == 586)
			{
				float num147 = 300f;
				if (projectile.ai[0] >= 100f)
				{
					num147 = MathHelper.Lerp(300f, 600f, (projectile.ai[0] - 100f) / 200f);
				}
				if (num147 > 600f)
				{
					num147 = 600f;
				}
				if (projectile.ai[0] >= 500f)
				{
					num147 = MathHelper.Lerp(600f, 1200f, (projectile.ai[0] - 500f) / 100f);
				}
				float rotation21 = projectile.rotation;
				Texture2D texture2D4 = projectileTexture[projectile.type];
				Microsoft.Xna.Framework.Color alpha3 = projectile.GetAlpha(color25);
				alpha3.A /= 2;
				int num148 = (int)(projectile.ai[0] / 6f);
				Vector2 spinningpoint = new Vector2(0f, 0f - num147);
				for (int num149 = 0; (float)num149 < 10f; num149++)
				{
					Microsoft.Xna.Framework.Rectangle rectangle2 = texture2D4.Frame(1, 5, 0, (num148 + num149) % 5);
					float num150 = rotation21 + (float)Math.PI / 5f * (float)num149;
					Vector2 position = spinningpoint.RotatedBy(num150) / 3f + projectile.Center - screenPosition;
					spriteBatch.Draw(texture2D4, position, rectangle2, alpha3, num150, rectangle2.Size() / 2f, projectile.scale, SpriteEffects.None, 0f);
				}
				for (int num151 = 0; (float)num151 < 20f; num151++)
				{
					Microsoft.Xna.Framework.Rectangle rectangle3 = texture2D4.Frame(1, 5, 0, (num148 + num151) % 5);
					float num152 = 0f - rotation21 + (float)Math.PI / 10f * (float)num151;
					num152 *= 2f;
					Vector2 position2 = spinningpoint.RotatedBy(num152) + projectile.Center - screenPosition;
					spriteBatch.Draw(texture2D4, position2, rectangle3, alpha3, num152, rectangle3.Size() / 2f, projectile.scale, SpriteEffects.None, 0f);
				}
			}
			else if (projectile.type == 536 || projectile.type == 591 || projectile.type == 607)
			{
				Texture2D texture2D5 = projectileTexture[projectile.type];
				Vector2 position3 = projectile.position + new Vector2(projectile.width, projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - screenPosition;
				Vector2 scale = new Vector2(1f, projectile.velocity.Length() / (float)texture2D5.Height);
				spriteBatch.Draw(texture2D5, position3, null, projectile.GetAlpha(color25), projectile.rotation, texture2D5.Frame().Bottom(), scale, spriteEffects, 0f);
			}
			else if (projectile.type == 409)
			{
				Texture2D texture2D6 = projectileTexture[projectile.type];
				int num153 = projectileTexture[projectile.type].Height / projFrames[projectile.type];
				int y13 = num153 * projectile.frame;
				int num154 = 10;
				int num155 = 2;
				float value9 = 0.5f;
				for (int num156 = 1; num156 < num154; num156 += num155)
				{
					Vector2 vector44 = npc[i].oldPos[num156];
					Microsoft.Xna.Framework.Color newColor = color25;
					newColor = projectile.GetAlpha(newColor);
					newColor *= (float)(num154 - num156) / 15f;
					Vector2 vector45 = projectile.oldPos[num156] - screenPosition + new Vector2(num134 + (float)num133, (float)(projectile.height / 2) + projectile.gfxOffY);
					spriteBatch.Draw(texture2D6, projectile.oldPos[num156] + new Vector2(projectile.width, projectile.height) / 2f - screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, y13, texture2D6.Width, num153), newColor, projectile.rotation, new Vector2((float)texture2D6.Width / 2f, (float)num153 / 2f), MathHelper.Lerp(projectile.scale, value9, (float)num156 / 15f), spriteEffects, 0f);
				}
				spriteBatch.Draw(texture2D6, projectile.Center - screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, y13, texture2D6.Width, num153), projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)texture2D6.Width / 2f, (float)num153 / 2f), projectile.scale, spriteEffects, 0f);
			}
			else if (projectile.type == 437)
			{
				Texture2D texture2D7 = projectileTexture[projectile.type];
				int num157 = projectileTexture[projectile.type].Height / projFrames[projectile.type];
				int y14 = num157 * projectile.frame;
				int num158 = 10;
				int num159 = 2;
				float value10 = 0.2f;
				for (int num160 = 1; num160 < num158; num160 += num159)
				{
					Vector2 vector46 = npc[i].oldPos[num160];
					Microsoft.Xna.Framework.Color newColor2 = color25;
					newColor2 = projectile.GetAlpha(newColor2);
					newColor2 *= (float)(num158 - num160) / 15f;
					Vector2 vector47 = projectile.oldPos[num160] - screenPosition + new Vector2(num134 + (float)num133, (float)(projectile.height / 2) + projectile.gfxOffY);
					spriteBatch.Draw(texture2D7, projectile.oldPos[num160] + new Vector2(projectile.width, projectile.height) / 2f - screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, y14, texture2D7.Width, num157), newColor2, projectile.rotation, new Vector2((float)texture2D7.Width / 2f, (float)num157 / 2f), MathHelper.Lerp(projectile.scale, value10, (float)num160 / 15f), spriteEffects, 0f);
				}
				spriteBatch.Draw(texture2D7, projectile.Center - screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, y14, texture2D7.Width, num157), Microsoft.Xna.Framework.Color.White, projectile.rotation, new Vector2((float)texture2D7.Width / 2f, (float)num157 / 2f), projectile.scale + 0.2f, spriteEffects, 0f);
				spriteBatch.Draw(texture2D7, projectile.Center - screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, y14, texture2D7.Width, num157), projectile.GetAlpha(Microsoft.Xna.Framework.Color.White), projectile.rotation, new Vector2((float)texture2D7.Width / 2f, (float)num157 / 2f), projectile.scale + 0.2f, spriteEffects, 0f);
			}
			else if (projectile.type == 384 || projectile.type == 386)
			{
				Texture2D texture2D8 = projectileTexture[projectile.type];
				int num161 = projectileTexture[projectile.type].Height / projFrames[projectile.type];
				int y15 = num161 * projectile.frame;
				spriteBatch.Draw(texture2D8, projectile.Center - screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, y15, texture2D8.Width, num161), projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)texture2D8.Width / 2f, (float)num161 / 2f), projectile.scale, spriteEffects, 0f);
			}
			else if (projectile.type == 439 || projectile.type == 460 || projectile.type == 600 || projectile.type == 615 || projectile.type == 630 || projectile.type == 633)
			{
				Texture2D texture2D9 = projectileTexture[projectile.type];
				int num162 = projectileTexture[projectile.type].Height / projFrames[projectile.type];
				int y16 = num162 * projectile.frame;
				Vector2 vector24 = (projectile.position + new Vector2(projectile.width, projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - screenPosition).Floor();
				float scale2 = 1f;
				if (player[projectile.owner].shroomiteStealth && player[projectile.owner].inventory[player[projectile.owner].selectedItem].ranged)
				{
					float num163 = player[projectile.owner].stealth;
					if ((double)num163 < 0.03)
					{
						num163 = 0.03f;
					}
					float num267 = (1f + num163 * 10f) / 11f;
					color25 *= num163;
					scale2 = num163;
				}
				if (player[projectile.owner].setVortex && player[projectile.owner].inventory[player[projectile.owner].selectedItem].ranged)
				{
					float num164 = player[projectile.owner].stealth;
					if ((double)num164 < 0.03)
					{
						num164 = 0.03f;
					}
					float num268 = (1f + num164 * 10f) / 11f;
					color25 = color25.MultiplyRGBA(new Microsoft.Xna.Framework.Color(Vector4.Lerp(Vector4.One, new Vector4(0f, 0.12f, 0.16f, 0f), 1f - num164)));
					scale2 = num164;
				}
				spriteBatch.Draw(texture2D9, vector24, new Microsoft.Xna.Framework.Rectangle(0, y16, texture2D9.Width, num162), projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)texture2D9.Width / 2f, (float)num162 / 2f), projectile.scale, spriteEffects, 0f);
				if (projectile.type == 439)
				{
					spriteBatch.Draw(glowMaskTexture[35], vector24, new Microsoft.Xna.Framework.Rectangle(0, y16, texture2D9.Width, num162), new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * scale2, projectile.rotation, new Vector2((float)texture2D9.Width / 2f, (float)num162 / 2f), projectile.scale, spriteEffects, 0f);
				}
				else if (projectile.type == 615)
				{
					spriteBatch.Draw(glowMaskTexture[192], vector24, new Microsoft.Xna.Framework.Rectangle(0, y16, texture2D9.Width, num162), new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * scale2, projectile.rotation, new Vector2((float)texture2D9.Width / 2f, (float)num162 / 2f), projectile.scale, spriteEffects, 0f);
				}
				else if (projectile.type == 630)
				{
					spriteBatch.Draw(glowMaskTexture[200], vector24, new Microsoft.Xna.Framework.Rectangle(0, y16, texture2D9.Width, num162), new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * scale2, projectile.rotation, new Vector2((float)texture2D9.Width / 2f, (float)num162 / 2f), projectile.scale, spriteEffects, 0f);
					if (projectile.localAI[0] > 0f)
					{
						int frameY = 6 - (int)(projectile.localAI[0] / 1f);
						texture2D9 = extraTexture[65];
						spriteBatch.Draw(texture2D9, vector24 + Vector2.Normalize(projectile.velocity) * 2f, texture2D9.Frame(1, 6, 0, frameY), new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * scale2, projectile.rotation, new Vector2(spriteEffects.HasFlag(SpriteEffects.FlipHorizontally) ? texture2D9.Width : 0, (float)num162 / 2f - 2f), projectile.scale, spriteEffects, 0f);
					}
				}
				else if (projectile.type == 600)
				{
					Microsoft.Xna.Framework.Color portalColor = PortalHelper.GetPortalColor(projectile.owner, (int)projectile.ai[1]);
					portalColor.A = 70;
					spriteBatch.Draw(glowMaskTexture[173], vector24, new Microsoft.Xna.Framework.Rectangle(0, y16, texture2D9.Width, num162), portalColor, projectile.rotation, new Vector2((float)texture2D9.Width / 2f, (float)num162 / 2f), projectile.scale, spriteEffects, 0f);
				}
				else if (projectile.type == 460)
				{
					if (Math.Abs(projectile.rotation - (float)Math.PI / 2f) > (float)Math.PI / 2f)
					{
						spriteEffects |= SpriteEffects.FlipVertically;
					}
					spriteBatch.Draw(glowMaskTexture[102], vector24, new Microsoft.Xna.Framework.Rectangle(0, y16, texture2D9.Width, num162), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), projectile.rotation - (float)Math.PI / 2f, new Vector2((float)texture2D9.Width / 2f, (float)num162 / 2f), projectile.scale, spriteEffects, 0f);
					if (projectile.ai[0] > 180f && Main.projectile[(int)projectile.ai[1]].type == 461)
					{
						DrawProj((int)projectile.ai[1]);
					}
				}
				else if (projectile.type == 633)
				{
					float scaleFactor2 = (float)Math.Cos((float)Math.PI * 2f * (projectile.ai[0] / 30f)) * 2f + 2f;
					if (projectile.ai[0] > 120f)
					{
						scaleFactor2 = 4f;
					}
					for (float num165 = 0f; num165 < 4f; num165 += 1f)
					{
						spriteBatch.Draw(texture2D9, vector24 + Vector2.UnitY.RotatedBy(num165 * ((float)Math.PI * 2f) / 4f) * scaleFactor2, new Microsoft.Xna.Framework.Rectangle(0, y16, texture2D9.Width, num162), projectile.GetAlpha(color25).MultiplyRGBA(new Microsoft.Xna.Framework.Color(255, 255, 255, 0)) * 0.03f, projectile.rotation, new Vector2((float)texture2D9.Width / 2f, (float)num162 / 2f), projectile.scale, spriteEffects, 0f);
					}
				}
			}
			else if (projectile.type == 442)
			{
				Texture2D texture2D10 = projectileTexture[projectile.type];
				int num166 = projectileTexture[projectile.type].Height / projFrames[projectile.type];
				int y17 = num166 * projectile.frame;
				Vector2 position4 = projectile.position + new Vector2(projectile.width, projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - screenPosition;
				spriteBatch.Draw(texture2D10, position4, new Microsoft.Xna.Framework.Rectangle(0, y17, texture2D10.Width, num166), projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)texture2D10.Width / 2f, (float)num166 / 2f), projectile.scale, spriteEffects, 0f);
				spriteBatch.Draw(glowMaskTexture[37], position4, new Microsoft.Xna.Framework.Rectangle(0, y17, texture2D10.Width, num166), new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * (1f - (float)projectile.alpha / 255f), projectile.rotation, new Vector2((float)texture2D10.Width / 2f, (float)num166 / 2f), projectile.scale, spriteEffects, 0f);
			}
			else if (projectile.type == 447)
			{
				Texture2D texture2D11 = projectileTexture[projectile.type];
				Texture2D texture2D12 = extraTexture[4];
				int num167 = texture2D11.Height / projFrames[projectile.type];
				int y18 = num167 * projectile.frame;
				int num168 = texture2D12.Height / projFrames[projectile.type];
				int num169 = num168 * projectile.frame;
				Microsoft.Xna.Framework.Rectangle value11 = new Microsoft.Xna.Framework.Rectangle(0, num169, texture2D12.Width, num168);
				Vector2 vector25 = projectile.position + new Vector2(projectile.width, 0f) / 2f + Vector2.UnitY * projectile.gfxOffY - screenPosition;
				spriteBatch.Draw(extraTexture[4], vector25, value11, projectile.GetAlpha(color25), projectile.rotation, new Vector2(texture2D12.Width / 2, 0f), projectile.scale, spriteEffects, 0f);
				int num170 = projectile.height - num167 - 14;
				if (num170 < 0)
				{
					num170 = 0;
				}
				if (num170 > 0)
				{
					if (num169 == num168 * 3)
					{
						num169 = num168 * 2;
					}
					spriteBatch.Draw(extraTexture[4], vector25 + Vector2.UnitY * (num168 - 1), new Microsoft.Xna.Framework.Rectangle(0, num169 + num168 - 1, texture2D12.Width, 1), projectile.GetAlpha(color25), projectile.rotation, new Vector2(texture2D12.Width / 2, 0f), new Vector2(1f, num170), spriteEffects, 0f);
				}
				value11.Width = texture2D11.Width;
				value11.Y = y18;
				spriteBatch.Draw(texture2D11, vector25 + Vector2.UnitY * (num168 - 1 + num170), value11, projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)texture2D11.Width / 2f, 0f), projectile.scale, spriteEffects, 0f);
			}
			else if (projectile.type == 455)
			{
				if (projectile.velocity == Vector2.Zero)
				{
					return;
				}
				Texture2D texture2D13 = projectileTexture[projectile.type];
				Texture2D texture2D14 = extraTexture[21];
				Texture2D texture2D15 = extraTexture[22];
				float num171 = projectile.localAI[1];
				Microsoft.Xna.Framework.Color color28 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * 0.9f;
				spriteBatch.Draw(texture2D13, projectile.Center - screenPosition, null, color28, projectile.rotation, texture2D13.Size() / 2f, projectile.scale, SpriteEffects.None, 0f);
				num171 -= (float)(texture2D13.Height / 2 + texture2D15.Height) * projectile.scale;
				Vector2 center2 = projectile.Center;
				center2 += projectile.velocity * projectile.scale * texture2D13.Height / 2f;
				if (num171 > 0f)
				{
					float num172 = 0f;
					Microsoft.Xna.Framework.Rectangle value12 = new Microsoft.Xna.Framework.Rectangle(0, 16 * (projectile.timeLeft / 3 % 5), texture2D14.Width, 16);
					while (num172 + 1f < num171)
					{
						if (num171 - num172 < (float)value12.Height)
						{
							value12.Height = (int)(num171 - num172);
						}
						spriteBatch.Draw(texture2D14, center2 - screenPosition, value12, color28, projectile.rotation, new Vector2(value12.Width / 2, 0f), projectile.scale, SpriteEffects.None, 0f);
						num172 += (float)value12.Height * projectile.scale;
						center2 += projectile.velocity * value12.Height * projectile.scale;
						value12.Y += 16;
						if (value12.Y + value12.Height > texture2D14.Height)
						{
							value12.Y = 0;
						}
					}
				}
				spriteBatch.Draw(texture2D15, center2 - screenPosition, null, color28, projectile.rotation, texture2D15.Frame().Top(), projectile.scale, SpriteEffects.None, 0f);
			}
			else if (projectile.type == 461)
			{
				if (projectile.velocity == Vector2.Zero)
				{
					return;
				}
				Texture2D texture2D16 = projectileTexture[projectile.type];
				float num173 = projectile.localAI[1];
				Microsoft.Xna.Framework.Color color29 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * 0.9f;
				Microsoft.Xna.Framework.Rectangle rectangle4 = new Microsoft.Xna.Framework.Rectangle(0, 0, texture2D16.Width, 22);
				Vector2 value13 = new Vector2(0f, player[projectile.owner].gfxOffY);
				spriteBatch.Draw(texture2D16, projectile.Center.Floor() - screenPosition + value13, rectangle4, color29, projectile.rotation, rectangle4.Size() / 2f, projectile.scale, SpriteEffects.None, 0f);
				num173 -= 33f * projectile.scale;
				Vector2 value14 = projectile.Center.Floor();
				value14 += projectile.velocity * projectile.scale * 10.5f;
				rectangle4 = new Microsoft.Xna.Framework.Rectangle(0, 25, texture2D16.Width, 28);
				if (num173 > 0f)
				{
					float num174 = 0f;
					while (num174 + 1f < num173)
					{
						if (num173 - num174 < (float)rectangle4.Height)
						{
							rectangle4.Height = (int)(num173 - num174);
						}
						spriteBatch.Draw(texture2D16, value14 - screenPosition + value13, rectangle4, color29, projectile.rotation, new Vector2(rectangle4.Width / 2, 0f), projectile.scale, SpriteEffects.None, 0f);
						num174 += (float)rectangle4.Height * projectile.scale;
						value14 += projectile.velocity * rectangle4.Height * projectile.scale;
					}
				}
				rectangle4 = new Microsoft.Xna.Framework.Rectangle(0, 56, texture2D16.Width, 22);
				spriteBatch.Draw(texture2D16, value14 - screenPosition + value13, rectangle4, color29, projectile.rotation, texture2D16.Frame().Top(), projectile.scale, SpriteEffects.None, 0f);
			}
			else if (projectile.type == 632)
			{
				if (projectile.velocity == Vector2.Zero)
				{
					return;
				}
				Texture2D tex = projectileTexture[projectile.type];
				float num175 = projectile.localAI[1];
				float prismHue = projectile.GetPrismHue(projectile.ai[0]);
				Microsoft.Xna.Framework.Color value15 = hslToRgb(prismHue, 1f, 0.5f);
				value15.A = 0;
				Vector2 value16 = projectile.Center.Floor();
				value16 += projectile.velocity * projectile.scale * 10.5f;
				num175 -= projectile.scale * 14.5f * projectile.scale;
				Vector2 vector26 = new Vector2(projectile.scale);
				DelegateMethods.f_1 = 1f;
				DelegateMethods.c_1 = value15 * 0.75f * projectile.Opacity;
				Vector2 vector48 = projectile.oldPos[0] + new Vector2(projectile.width, projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - screenPosition;
				Utils.DrawLaser(spriteBatch, tex, value16 - screenPosition, value16 + projectile.velocity * num175 - screenPosition, vector26, DelegateMethods.RainbowLaserDraw);
				DelegateMethods.c_1 = new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * 0.75f * projectile.Opacity;
				Utils.DrawLaser(spriteBatch, tex, value16 - screenPosition, value16 + projectile.velocity * num175 - screenPosition, vector26 / 2f, DelegateMethods.RainbowLaserDraw);
			}
			else if (projectile.type == 642)
			{
				if (projectile.velocity == Vector2.Zero)
				{
					return;
				}
				Texture2D tex2 = projectileTexture[projectile.type];
				float num176 = projectile.localAI[1];
				Microsoft.Xna.Framework.Color c_ = new Microsoft.Xna.Framework.Color(255, 255, 255, 127);
				Vector2 value17 = projectile.Center.Floor();
				num176 -= projectile.scale * 10.5f;
				Vector2 vector27 = new Vector2(projectile.scale);
				DelegateMethods.f_1 = 1f;
				DelegateMethods.c_1 = c_;
				DelegateMethods.i_1 = 54000 - (int)time / 2;
				Vector2 vector49 = projectile.oldPos[0] + new Vector2(projectile.width, projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - screenPosition;
				Utils.DrawLaser(spriteBatch, tex2, value17 - screenPosition, value17 + projectile.velocity * num176 - screenPosition, vector27, DelegateMethods.TurretLaserDraw);
				DelegateMethods.c_1 = new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * 0.75f * projectile.Opacity;
				Utils.DrawLaser(spriteBatch, tex2, value17 - screenPosition, value17 + projectile.velocity * num176 - screenPosition, vector27 / 2f, DelegateMethods.TurretLaserDraw);
			}
			else if (projectile.type == 611)
			{
				Vector2 vector50 = projectile.position + new Vector2(projectile.width, projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - screenPosition;
				Texture2D texture2D17 = projectileTexture[projectile.type];
				Microsoft.Xna.Framework.Color alpha4 = projectile.GetAlpha(color25);
				if (projectile.velocity == Vector2.Zero)
				{
					return;
				}
				float num177 = projectile.velocity.Length() + 16f;
				bool flag21 = num177 < 100f;
				Vector2 value18 = Vector2.Normalize(projectile.velocity);
				Microsoft.Xna.Framework.Rectangle rectangle5 = new Microsoft.Xna.Framework.Rectangle(0, 2, texture2D17.Width, 40);
				Vector2 value19 = new Vector2(0f, player[projectile.owner].gfxOffY);
				float rotation22 = projectile.rotation + (float)Math.PI;
				spriteBatch.Draw(texture2D17, projectile.Center.Floor() - screenPosition + value19, rectangle5, alpha4, rotation22, rectangle5.Size() / 2f - Vector2.UnitY * 4f, projectile.scale, SpriteEffects.None, 0f);
				num177 -= 40f * projectile.scale;
				Vector2 vector28 = projectile.Center.Floor();
				vector28 += value18 * projectile.scale * 24f;
				rectangle5 = new Microsoft.Xna.Framework.Rectangle(0, 68, texture2D17.Width, 18);
				if (num177 > 0f)
				{
					float num178 = 0f;
					while (num178 + 1f < num177)
					{
						if (num177 - num178 < (float)rectangle5.Height)
						{
							rectangle5.Height = (int)(num177 - num178);
						}
						spriteBatch.Draw(texture2D17, vector28 - screenPosition + value19, rectangle5, alpha4, rotation22, new Vector2(rectangle5.Width / 2, 0f), projectile.scale, SpriteEffects.None, 0f);
						num178 += (float)rectangle5.Height * projectile.scale;
						vector28 += value18 * rectangle5.Height * projectile.scale;
					}
				}
				Vector2 value20 = vector28;
				vector28 = projectile.Center.Floor();
				vector28 += value18 * projectile.scale * 24f;
				rectangle5 = new Microsoft.Xna.Framework.Rectangle(0, 46, texture2D17.Width, 18);
				int num179 = 18;
				if (flag21)
				{
					num179 = 9;
				}
				float num180 = num177;
				if (num177 > 0f)
				{
					float num181 = 0f;
					float num182 = num180 / (float)num179;
					num181 += num182 * 0.25f;
					vector28 += value18 * num182 * 0.25f;
					for (int num183 = 0; num183 < num179; num183++)
					{
						float num184 = num182;
						if (num183 == 0)
						{
							num184 *= 0.75f;
						}
						spriteBatch.Draw(texture2D17, vector28 - screenPosition + value19, rectangle5, alpha4, rotation22, new Vector2(rectangle5.Width / 2, 0f), projectile.scale, SpriteEffects.None, 0f);
						num181 += num184;
						vector28 += value18 * num184;
					}
				}
				rectangle5 = new Microsoft.Xna.Framework.Rectangle(0, 90, texture2D17.Width, 48);
				spriteBatch.Draw(texture2D17, value20 - screenPosition + value19, rectangle5, alpha4, rotation22, texture2D17.Frame().Top(), projectile.scale, SpriteEffects.None, 0f);
			}
			else if (projectile.type == 537)
			{
				if (projectile.velocity == Vector2.Zero)
				{
					return;
				}
				Texture2D texture2D18 = projectileTexture[projectile.type];
				float num185 = projectile.localAI[1];
				Microsoft.Xna.Framework.Color color30 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * 0.9f;
				Microsoft.Xna.Framework.Rectangle rectangle6 = new Microsoft.Xna.Framework.Rectangle(0, 0, texture2D18.Width, 22);
				Vector2 value21 = new Vector2(0f, npc[(int)projectile.ai[1]].gfxOffY);
				spriteBatch.Draw(texture2D18, projectile.Center.Floor() - screenPosition + value21, rectangle6, color30, projectile.rotation, rectangle6.Size() / 2f, projectile.scale, SpriteEffects.None, 0f);
				num185 -= 33f * projectile.scale;
				Vector2 value22 = projectile.Center.Floor();
				value22 += projectile.velocity * projectile.scale * 10.5f;
				rectangle6 = new Microsoft.Xna.Framework.Rectangle(0, 25, texture2D18.Width, 28);
				if (num185 > 0f)
				{
					float num186 = 0f;
					while (num186 + 1f < num185)
					{
						if (num185 - num186 < (float)rectangle6.Height)
						{
							rectangle6.Height = (int)(num185 - num186);
						}
						spriteBatch.Draw(texture2D18, value22 - screenPosition + value21, rectangle6, color30, projectile.rotation, new Vector2(rectangle6.Width / 2, 0f), projectile.scale, SpriteEffects.None, 0f);
						num186 += (float)rectangle6.Height * projectile.scale;
						value22 += projectile.velocity * rectangle6.Height * projectile.scale;
					}
				}
				rectangle6 = new Microsoft.Xna.Framework.Rectangle(0, 56, texture2D18.Width, 22);
				spriteBatch.Draw(texture2D18, value22 - screenPosition + value21, rectangle6, color30, projectile.rotation, texture2D18.Frame().Top(), projectile.scale, SpriteEffects.None, 0f);
			}
			else if (projectile.type == 456)
			{
				Texture2D texture2D19 = projectileTexture[projectile.type];
				Texture2D texture2D20 = extraTexture[23];
				Texture2D texture2D21 = extraTexture[24];
				Vector2 value23 = new Vector2(0f, 216f);
				Vector2 value24 = npc[(int)Math.Abs(projectile.ai[0]) - 1].Center - projectile.Center + value23;
				float num187 = value24.Length();
				Vector2 value25 = Vector2.Normalize(value24);
				Microsoft.Xna.Framework.Rectangle rectangle7 = texture2D19.Frame();
				rectangle7.Height /= 4;
				rectangle7.Y += projectile.frame * rectangle7.Height;
				color25 = Microsoft.Xna.Framework.Color.Lerp(color25, Microsoft.Xna.Framework.Color.White, 0.3f);
				spriteBatch.Draw(texture2D19, projectile.Center - screenPosition, rectangle7, projectile.GetAlpha(color25), projectile.rotation, rectangle7.Size() / 2f, projectile.scale, SpriteEffects.None, 0f);
				num187 -= (float)(rectangle7.Height / 2 + texture2D21.Height) * projectile.scale;
				Vector2 center3 = projectile.Center;
				center3 += value25 * projectile.scale * rectangle7.Height / 2f;
				if (num187 > 0f)
				{
					float num188 = 0f;
					Microsoft.Xna.Framework.Rectangle rectangle8 = new Microsoft.Xna.Framework.Rectangle(0, 0, texture2D20.Width, texture2D20.Height);
					while (num188 + 1f < num187)
					{
						if (num187 - num188 < (float)rectangle8.Height)
						{
							rectangle8.Height = (int)(num187 - num188);
						}
						Microsoft.Xna.Framework.Point point = center3.ToTileCoordinates();
						Microsoft.Xna.Framework.Color color31 = Lighting.GetColor(point.X, point.Y);
						color31 = Microsoft.Xna.Framework.Color.Lerp(color31, Microsoft.Xna.Framework.Color.White, 0.3f);
						spriteBatch.Draw(texture2D20, center3 - screenPosition, rectangle8, projectile.GetAlpha(color31), projectile.rotation, rectangle8.Bottom(), projectile.scale, SpriteEffects.None, 0f);
						num188 += (float)rectangle8.Height * projectile.scale;
						center3 += value25 * rectangle8.Height * projectile.scale;
					}
				}
				Microsoft.Xna.Framework.Point point2 = center3.ToTileCoordinates();
				Microsoft.Xna.Framework.Color color32 = Lighting.GetColor(point2.X, point2.Y);
				color32 = Microsoft.Xna.Framework.Color.Lerp(color32, Microsoft.Xna.Framework.Color.White, 0.3f);
				Microsoft.Xna.Framework.Rectangle value26 = texture2D21.Frame();
				if (num187 < 0f)
				{
					value26.Height += (int)num187;
				}
				spriteBatch.Draw(texture2D21, center3 - screenPosition, value26, color32, projectile.rotation, new Vector2((float)value26.Width / 2f, value26.Height), projectile.scale, SpriteEffects.None, 0f);
			}
			else if (projectile.type == 443)
			{
				Texture2D texture2D22 = projectileTexture[projectile.type];
				float num189 = 30f;
				float num190 = num189 * 4f;
				float num191 = (float)Math.PI * 2f * projectile.ai[0] / num189;
				float num192 = (float)Math.PI * 2f * projectile.ai[0] / num190;
				Vector2 vector29 = -Vector2.UnitY.RotatedBy(num191);
				float scale3 = 0.75f + vector29.Y * 0.25f;
				float scale4 = 0.8f - vector29.Y * 0.2f;
				int num193 = projectileTexture[projectile.type].Height / projFrames[projectile.type];
				int y19 = num193 * projectile.frame;
				Vector2 position5 = projectile.position + new Vector2(projectile.width, projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - screenPosition;
				spriteBatch.Draw(texture2D22, position5, new Microsoft.Xna.Framework.Rectangle(0, y19, texture2D22.Width, num193), projectile.GetAlpha(color25), projectile.rotation + num192, new Vector2((float)texture2D22.Width / 2f, (float)num193 / 2f), scale3, spriteEffects, 0f);
				spriteBatch.Draw(texture2D22, position5, new Microsoft.Xna.Framework.Rectangle(0, y19, texture2D22.Width, num193), projectile.GetAlpha(color25), projectile.rotation + ((float)Math.PI * 2f - num192), new Vector2((float)texture2D22.Width / 2f, (float)num193 / 2f), scale4, spriteEffects, 0f);
			}
			else if (projectile.type == 444 || projectile.type == 446 || projectile.type == 490 || projectile.type == 464 || projectile.type == 502 || projectile.type == 538 || projectile.type == 540 || projectile.type == 579 || projectile.type == 578 || projectile.type == 583 || projectile.type == 584 || projectile.type == 616 || projectile.type == 617 || projectile.type == 618 || projectile.type == 641 || (projectile.type >= 646 && projectile.type <= 649))
			{
				Vector2 position6 = projectile.position + new Vector2(projectile.width, projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - screenPosition;
				Texture2D texture2D23 = projectileTexture[projectile.type];
				Microsoft.Xna.Framework.Color alpha5 = projectile.GetAlpha(color25);
				Vector2 origin3 = new Vector2(texture2D23.Width, texture2D23.Height) / 2f;
				if (projectile.type == 446)
				{
					origin3.Y = 4f;
				}
				if (projectile.type == 502)
				{
					LoadProjectile(250);
					Texture2D texture2D24 = projectileTexture[250];
					Vector2 origin4 = new Vector2(texture2D24.Width / 2, 0f);
					Vector2 value27 = new Vector2(projectile.width, projectile.height) / 2f;
					Microsoft.Xna.Framework.Color white2 = Microsoft.Xna.Framework.Color.White;
					white2.A = 127;
					for (int num194 = projectile.oldPos.Length - 1; num194 > 0; num194--)
					{
						Vector2 vector30 = projectile.oldPos[num194] + value27;
						if (!(vector30 == value27))
						{
							Vector2 vector31 = projectile.oldPos[num194 - 1] + value27;
							float rotation23 = (vector31 - vector30).ToRotation() - (float)Math.PI / 2f;
							Vector2 scale5 = new Vector2(1f, Vector2.Distance(vector30, vector31) / (float)texture2D24.Height);
							Microsoft.Xna.Framework.Color color33 = white2 * (1f - (float)num194 / (float)projectile.oldPos.Length);
							spriteBatch.Draw(texture2D24, vector30 - screenPosition, null, color33, rotation23, origin4, scale5, spriteEffects, 0f);
						}
					}
				}
				else if (projectile.type == 540 && projectile.velocity != Vector2.Zero)
				{
					float num195 = 0f;
					if (projectile.ai[0] >= 10f)
					{
						num195 = (projectile.ai[0] - 10f) / 10f;
					}
					if (projectile.ai[0] >= 20f)
					{
						num195 = (20f - projectile.ai[0]) / 10f;
					}
					if (num195 > 1f)
					{
						num195 = 1f;
					}
					if (num195 < 0f)
					{
						num195 = 0f;
					}
					if (num195 != 0f)
					{
						Texture2D texture2D25 = extraTexture[47];
						Vector2 origin5 = new Vector2(texture2D25.Width / 2, 0f);
						Microsoft.Xna.Framework.Color color34 = alpha5 * num195 * 0.7f;
						Vector2 position7 = projectile.Center - screenPosition;
						Vector2 vector32 = projectile.velocity.ToRotation().ToRotationVector2() * texture2D23.Width / 3f;
						vector32 = Vector2.Zero;
						position7 += vector32;
						float rotation24 = projectile.velocity.ToRotation() - (float)Math.PI / 2f;
						Vector2 scale6 = new Vector2(1f, (projectile.velocity.Length() - vector32.Length() * 2f) / (float)texture2D25.Height);
						spriteBatch.Draw(texture2D25, position7, null, color34, rotation24, origin5, scale6, SpriteEffects.None, 0f);
					}
				}
				if (projectile.type == 578 || projectile.type == 579 || projectile.type == 641)
				{
					Microsoft.Xna.Framework.Color color35 = alpha5 * 0.8f;
					color35.A /= 2;
					Microsoft.Xna.Framework.Color color36 = Microsoft.Xna.Framework.Color.Lerp(alpha5, Microsoft.Xna.Framework.Color.Black, 0.5f);
					color36.A = alpha5.A;
					float num196 = 0.95f + (projectile.rotation * 0.75f).ToRotationVector2().Y * 0.1f;
					color36 *= num196;
					float scale7 = 0.6f + projectile.scale * 0.6f * num196;
					spriteBatch.Draw(extraTexture[50], position6, null, color36, 0f - projectile.rotation + 0.35f, origin3, scale7, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
					spriteBatch.Draw(extraTexture[50], position6, null, alpha5, 0f - projectile.rotation, origin3, projectile.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
					spriteBatch.Draw(texture2D23, position6, null, color35, (0f - projectile.rotation) * 0.7f, origin3, projectile.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
					spriteBatch.Draw(extraTexture[50], position6, null, alpha5 * 0.8f, projectile.rotation * 0.5f, origin3, projectile.scale * 0.9f, spriteEffects, 0f);
					alpha5.A = 0;
				}
				if (projectile.type == 617)
				{
					Microsoft.Xna.Framework.Color color37 = alpha5 * 0.8f;
					color37.A /= 2;
					Microsoft.Xna.Framework.Color color38 = Microsoft.Xna.Framework.Color.Lerp(alpha5, Microsoft.Xna.Framework.Color.Black, 0.5f);
					color38.A = alpha5.A;
					float num197 = 0.95f + (projectile.rotation * 0.75f).ToRotationVector2().Y * 0.1f;
					color38 *= num197;
					float scale8 = 0.6f + projectile.scale * 0.6f * num197;
					spriteBatch.Draw(extraTexture[50], position6, null, color38, 0f - projectile.rotation + 0.35f, origin3, scale8, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
					spriteBatch.Draw(extraTexture[50], position6, null, alpha5, 0f - projectile.rotation, origin3, projectile.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
					spriteBatch.Draw(texture2D23, position6, null, color37, (0f - projectile.rotation) * 0.7f, origin3, projectile.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
					spriteBatch.Draw(extraTexture[50], position6, null, alpha5 * 0.8f, projectile.rotation * 0.5f, origin3, projectile.scale * 0.9f, spriteEffects, 0f);
					alpha5.A = 0;
				}
				bool flag22 = false;
				if (!(flag22 | (projectile.type == 464 && projectile.ai[1] != 1f)))
				{
					spriteBatch.Draw(texture2D23, position6, null, alpha5, projectile.rotation, origin3, projectile.scale, spriteEffects, 0f);
				}
				if (projectile.type == 464 && projectile.ai[1] != 1f)
				{
					texture2D23 = extraTexture[35];
					Microsoft.Xna.Framework.Rectangle rectangle9 = texture2D23.Frame(1, 3);
					origin3 = rectangle9.Size() / 2f;
					Vector2 value28 = new Vector2(0f, -720f).RotatedBy(projectile.velocity.ToRotation());
					float scaleFactor3 = projectile.ai[0] % 45f / 45f;
					Vector2 spinningpoint2 = value28 * scaleFactor3;
					for (int num198 = 0; num198 < 6; num198++)
					{
						float num199 = (float)num198 * ((float)Math.PI * 2f) / 6f;
						Vector2 value29 = projectile.Center + spinningpoint2.RotatedBy(num199);
						spriteBatch.Draw(texture2D23, value29 - screenPosition, rectangle9, alpha5, num199 + projectile.velocity.ToRotation() + (float)Math.PI, origin3, projectile.scale, spriteEffects, 0f);
						rectangle9.Y += rectangle9.Height;
						if (rectangle9.Y >= texture2D23.Height)
						{
							rectangle9.Y = 0;
						}
					}
				}
				else if (projectile.type == 490)
				{
					spriteBatch.Draw(extraTexture[34], position6, null, alpha5, 0f - projectile.rotation, extraTexture[34].Size() / 2f, projectile.scale, spriteEffects, 0f);
					spriteBatch.Draw(texture2D23, position6, null, alpha5, projectile.rotation, origin3, projectile.scale * 0.42f, spriteEffects, 0f);
					spriteBatch.Draw(extraTexture[34], position6, null, alpha5, 0f - projectile.rotation, extraTexture[34].Size() / 2f, projectile.scale * 0.42f, spriteEffects, 0f);
				}
				else if (projectile.type == 616)
				{
					texture2D23 = glowMaskTexture[193];
					spriteBatch.Draw(texture2D23, position6, null, new Microsoft.Xna.Framework.Color(127, 127, 127, 0), projectile.rotation, origin3, projectile.scale, spriteEffects, 0f);
				}
				else if (projectile.type >= 646 && projectile.type <= 649)
				{
					texture2D23 = glowMaskTexture[203 + projectile.type - 646];
					spriteBatch.Draw(texture2D23, position6, null, new Microsoft.Xna.Framework.Color(255, 255, 255, 127), projectile.rotation, origin3, projectile.scale, spriteEffects, 0f);
				}
			}
			else if (projectile.type == 465 || projectile.type == 467 || projectile.type == 468 || projectile.type == 500 || projectile.type == 518 || projectile.type == 535 || projectile.type == 539 || projectile.type == 575 || projectile.type == 574 || projectile.type == 589 || projectile.type == 590 || projectile.type == 593 || projectile.type == 602 || projectile.type == 596 || projectile.type == 612 || projectile.type == 613 || projectile.type == 614 || projectile.type == 623 || projectile.type == 625 || projectile.type == 626 || projectile.type == 627 || projectile.type == 628 || projectile.type == 634 || projectile.type == 635 || projectile.type == 643 || projectile.type == 644 || projectile.type == 645 || projectile.type == 650)
			{
				Vector2 vector33 = projectile.position + new Vector2(projectile.width, projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - screenPosition;
				Texture2D texture2D26 = projectileTexture[projectile.type];
				Microsoft.Xna.Framework.Rectangle rectangle10 = texture2D26.Frame(1, projFrames[projectile.type], 0, projectile.frame);
				Microsoft.Xna.Framework.Color alpha6 = projectile.GetAlpha(color25);
				Vector2 origin6 = rectangle10.Size() / 2f;
				if (projectile.type == 539)
				{
					if (projectile.ai[0] >= 210f)
					{
						float num200 = projectile.ai[0] - 210f;
						num200 /= 20f;
						if (num200 > 1f)
						{
							num200 = 1f;
						}
						spriteBatch.Draw(extraTexture[46], vector33, null, new Microsoft.Xna.Framework.Color(255, 255, 255, 128) * num200, projectile.rotation, new Vector2(17f, 22f), projectile.scale, spriteEffects, 0f);
					}
				}
				else if (projectile.type == 602)
				{
					origin6.X = rectangle10.Width - 6;
					origin6.Y -= 1f;
					rectangle10.Height -= 2;
				}
				else if (projectile.type == 589)
				{
					rectangle10 = texture2D26.Frame(5, 1, (int)projectile.ai[1]);
					origin6 = rectangle10.Size() / 2f;
				}
				else if (projectile.type == 590)
				{
					rectangle10 = texture2D26.Frame(3, 1, projectile.frame);
					origin6 = rectangle10.Size() / 2f;
				}
				else if (projectile.type == 650)
				{
					origin6.Y -= 4f;
				}
				else if (projectile.type == 623)
				{
					alpha6.A /= 2;
				}
				else if (projectile.type >= 625 && projectile.type <= 628)
				{
					alpha6.A /= 2;
				}
				else if (projectile.type == 644)
				{
					Microsoft.Xna.Framework.Color color39 = hslToRgb(projectile.ai[0], 1f, 0.5f).MultiplyRGBA(new Microsoft.Xna.Framework.Color(255, 255, 255, 0));
					spriteBatch.Draw(texture2D26, vector33, rectangle10, color39, projectile.rotation, origin6, projectile.scale * 2f, spriteEffects, 0f);
					spriteBatch.Draw(texture2D26, vector33, rectangle10, color39, 0f, origin6, projectile.scale * 2f, spriteEffects, 0f);
					if (projectile.ai[1] != -1f && projectile.Opacity > 0.3f)
					{
						Vector2 vector34 = Main.projectile[(int)projectile.ai[1]].Center - projectile.Center;
						Vector2 vector35 = new Vector2(1f, vector34.Length() / (float)texture2D26.Height);
						float rotation25 = vector34.ToRotation() + (float)Math.PI / 2f;
						float value30 = MathHelper.Distance(30f, projectile.localAI[1]) / 20f;
						value30 = MathHelper.Clamp(value30, 0f, 1f);
						if (value30 > 0f)
						{
							spriteBatch.Draw(texture2D26, vector33 + vector34 / 2f, rectangle10, color39 * value30, rotation25, origin6, vector35, spriteEffects, 0f);
							spriteBatch.Draw(texture2D26, vector33 + vector34 / 2f, rectangle10, alpha6 * value30, rotation25, origin6, vector35 / 2f, spriteEffects, 0f);
						}
					}
				}
				spriteBatch.Draw(texture2D26, vector33, rectangle10, alpha6, projectile.rotation, origin6, projectile.scale, spriteEffects, 0f);
				if (projectile.type == 535)
				{
					for (int num201 = 0; num201 < 1000; num201++)
					{
						if (Main.projectile[num201].active && Main.projectile[num201].owner == projectile.owner && Main.projectile[num201].type == 536)
						{
							DrawProj(num201);
						}
					}
				}
				else if (projectile.type == 644)
				{
					spriteBatch.Draw(texture2D26, vector33, rectangle10, alpha6, 0f, origin6, projectile.scale, spriteEffects, 0f);
				}
				else if (projectile.type == 602)
				{
					texture2D26 = extraTexture[60];
					Microsoft.Xna.Framework.Color color40 = alpha6;
					color40.A = 0;
					color40 *= 0.3f;
					origin6 = texture2D26.Size() / 2f;
					spriteBatch.Draw(texture2D26, vector33, null, color40, projectile.rotation - (float)Math.PI / 2f, origin6, projectile.scale, spriteEffects, 0f);
					texture2D26 = extraTexture[59];
					color40 = alpha6;
					color40.A = 0;
					color40 *= 0.13f;
					origin6 = texture2D26.Size() / 2f;
					spriteBatch.Draw(texture2D26, vector33, null, color40, projectile.rotation - (float)Math.PI / 2f, origin6, projectile.scale * 0.9f, spriteEffects, 0f);
				}
				else if (projectile.type == 539)
				{
					spriteBatch.Draw(glowMaskTexture[140], vector33, rectangle10, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), projectile.rotation, origin6, projectile.scale, spriteEffects, 0f);
				}
				else if (projectile.type == 613)
				{
					spriteBatch.Draw(glowMaskTexture[189], vector33, rectangle10, new Microsoft.Xna.Framework.Color(128 - projectile.alpha / 2, 128 - projectile.alpha / 2, 128 - projectile.alpha / 2, 0), projectile.rotation, origin6, projectile.scale, spriteEffects, 0f);
				}
				else if (projectile.type == 614)
				{
					spriteBatch.Draw(glowMaskTexture[190], vector33, rectangle10, new Microsoft.Xna.Framework.Color(128 - projectile.alpha / 2, 128 - projectile.alpha / 2, 128 - projectile.alpha / 2, 0), projectile.rotation, origin6, projectile.scale, spriteEffects, 0f);
				}
				else if (projectile.type == 574)
				{
					spriteBatch.Draw(glowMaskTexture[148], vector33, rectangle10, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), projectile.rotation, origin6, projectile.scale, spriteEffects, 0f);
				}
				else if (projectile.type == 590)
				{
					spriteBatch.Draw(glowMaskTexture[168], vector33, rectangle10, new Microsoft.Xna.Framework.Color(127 - projectile.alpha / 2, 127 - projectile.alpha / 2, 127 - projectile.alpha / 2, 0), projectile.rotation, origin6, projectile.scale, spriteEffects, 0f);
				}
				else if (projectile.type == 623 || (projectile.type >= 625 && projectile.type <= 628))
				{
					if (player[projectile.owner].ghostFade != 0f)
					{
						float scaleFactor4 = player[projectile.owner].ghostFade * 5f;
						for (float num202 = 0f; num202 < 4f; num202 += 1f)
						{
							spriteBatch.Draw(texture2D26, vector33 + Vector2.UnitY.RotatedBy(num202 * ((float)Math.PI * 2f) / 4f) * scaleFactor4, rectangle10, alpha6 * 0.1f, projectile.rotation, origin6, projectile.scale, spriteEffects, 0f);
						}
					}
				}
				else if (projectile.type == 643)
				{
					float scaleFactor5 = (float)Math.Cos((float)Math.PI * 2f * (projectile.localAI[0] / 60f)) + 3f + 3f;
					for (float num203 = 0f; num203 < 4f; num203 += 1f)
					{
						spriteBatch.Draw(texture2D26, vector33 + Vector2.UnitY.RotatedBy(num203 * ((float)Math.PI / 2f)) * scaleFactor5, rectangle10, alpha6 * 0.2f, projectile.rotation, origin6, projectile.scale, spriteEffects, 0f);
					}
				}
				else if (projectile.type == 650)
				{
					int num204 = (int)(projectile.localAI[0] / ((float)Math.PI * 2f));
					float f = projectile.localAI[0] % ((float)Math.PI * 2f) - (float)Math.PI;
					float num205 = (float)Math.IEEERemainder(projectile.localAI[1], 1.0);
					if (num205 < 0f)
					{
						num205 += 1f;
					}
					int num206 = (int)Math.Floor(projectile.localAI[1]);
					float num207 = 1f;
					float scaleFactor6 = 5f;
					num207 = 1f + (float)num206 * 0.02f;
					if ((float)num204 == 1f)
					{
						scaleFactor6 = 7f;
					}
					Vector2 value31 = f.ToRotationVector2() * num205 * scaleFactor6 * projectile.scale;
					texture2D26 = extraTexture[66];
					spriteBatch.Draw(texture2D26, vector33 + value31, null, alpha6, projectile.rotation, texture2D26.Size() / 2f, num207, SpriteEffects.None, 0f);
				}
			}
			else if (projectile.type == 466)
			{
				Vector2 end = projectile.position + new Vector2(projectile.width, projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - screenPosition;
				Texture2D tex3 = extraTexture[33];
				projectile.GetAlpha(color25);
				Vector2 vector36 = new Vector2(projectile.scale) / 2f;
				for (int num208 = 0; num208 < 3; num208++)
				{
					switch (num208)
					{
					case 0:
						vector36 = new Vector2(projectile.scale) * 0.6f;
						DelegateMethods.c_1 = new Microsoft.Xna.Framework.Color(115, 204, 219, 0) * 0.5f;
						break;
					case 1:
						vector36 = new Vector2(projectile.scale) * 0.4f;
						DelegateMethods.c_1 = new Microsoft.Xna.Framework.Color(113, 251, 255, 0) * 0.5f;
						break;
					default:
						vector36 = new Vector2(projectile.scale) * 0.2f;
						DelegateMethods.c_1 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * 0.5f;
						break;
					}
					DelegateMethods.f_1 = 1f;
					for (int num209 = projectile.oldPos.Length - 1; num209 > 0; num209--)
					{
						if (!(projectile.oldPos[num209] == Vector2.Zero))
						{
							Vector2 start = projectile.oldPos[num209] + new Vector2(projectile.width, projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - screenPosition;
							Vector2 end2 = projectile.oldPos[num209 - 1] + new Vector2(projectile.width, projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - screenPosition;
							Utils.DrawLaser(spriteBatch, tex3, start, end2, vector36, DelegateMethods.LightningLaserDraw);
						}
					}
					if (projectile.oldPos[0] != Vector2.Zero)
					{
						DelegateMethods.f_1 = 1f;
						Vector2 start2 = projectile.oldPos[0] + new Vector2(projectile.width, projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - screenPosition;
						Utils.DrawLaser(spriteBatch, tex3, start2, end, vector36, DelegateMethods.LightningLaserDraw);
					}
				}
			}
			else if (projectile.type == 580)
			{
				Vector2 end3 = projectile.position + new Vector2(projectile.width, projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - screenPosition;
				Texture2D tex4 = extraTexture[33];
				projectile.GetAlpha(color25);
				Vector2 vector37 = new Vector2(projectile.scale) / 2f;
				for (int num210 = 0; num210 < 2; num210++)
				{
					float num211 = (projectile.localAI[1] == -1f || projectile.localAI[1] == 1f) ? (-0.2f) : 0f;
					if (num210 == 0)
					{
						vector37 = new Vector2(projectile.scale) * (0.5f + num211);
						DelegateMethods.c_1 = new Microsoft.Xna.Framework.Color(115, 244, 219, 0) * 0.5f;
					}
					else
					{
						vector37 = new Vector2(projectile.scale) * (0.3f + num211);
						DelegateMethods.c_1 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * 0.5f;
					}
					DelegateMethods.f_1 = 1f;
					for (int num212 = projectile.oldPos.Length - 1; num212 > 0; num212--)
					{
						if (!(projectile.oldPos[num212] == Vector2.Zero))
						{
							Vector2 start3 = projectile.oldPos[num212] + new Vector2(projectile.width, projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - screenPosition;
							Vector2 end4 = projectile.oldPos[num212 - 1] + new Vector2(projectile.width, projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - screenPosition;
							Utils.DrawLaser(spriteBatch, tex4, start3, end4, vector37, DelegateMethods.LightningLaserDraw);
						}
					}
					if (projectile.oldPos[0] != Vector2.Zero)
					{
						DelegateMethods.f_1 = 1f;
						Vector2 start4 = projectile.oldPos[0] + new Vector2(projectile.width, projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - screenPosition;
						Utils.DrawLaser(spriteBatch, tex4, start4, end3, vector37, DelegateMethods.LightningLaserDraw);
					}
				}
			}
			else if (projectile.type == 445)
			{
				Vector2 vector38 = projectile.position + new Vector2(projectile.width, projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - screenPosition;
				Texture2D texture2D27 = projectileTexture[projectile.type];
				Microsoft.Xna.Framework.Color alpha7 = projectile.GetAlpha(color25);
				Vector2 vector39 = player[projectile.owner].RotatedRelativePoint(mountedCenter) + Vector2.UnitY * player[projectile.owner].gfxOffY;
				Vector2 vector40 = vector38 + screenPosition - vector39;
				Vector2 value32 = Vector2.Normalize(vector40);
				float num213 = vector40.Length();
				float num214 = vector40.ToRotation() + (float)Math.PI / 2f;
				float num215 = -5f;
				float num216 = num215 + 30f;
				new Vector2(2f, num213 - num216);
				Vector2 value33 = Vector2.Lerp(vector38 + screenPosition, vector39 + value32 * num216, 0.5f);
				Vector2 vector41 = -Vector2.UnitY.RotatedBy(projectile.localAI[0] / 60f * (float)Math.PI);
				Vector2[] array7 = new Vector2[4]
				{
					vector41,
					vector41.RotatedBy(1.5707963705062866),
					vector41.RotatedBy(3.1415927410125732),
					vector41.RotatedBy(4.71238911151886)
				};
				if (num213 > num216)
				{
					for (int num217 = 0; num217 < 2; num217++)
					{
						Microsoft.Xna.Framework.Color white3 = Microsoft.Xna.Framework.Color.White;
						if (num217 % 2 == 0)
						{
							white3 = Microsoft.Xna.Framework.Color.LimeGreen;
							white3.A = 128;
							white3 *= 0.5f;
						}
						else
						{
							white3 = Microsoft.Xna.Framework.Color.CornflowerBlue;
							white3.A = 128;
							white3 *= 0.5f;
						}
						Vector2 value34 = new Vector2(array7[num217].X, 0f).RotatedBy(num214) * 4f;
						spriteBatch.Draw(magicPixel, value33 - screenPosition + value34, new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1), white3, num214, Vector2.One / 2f, new Vector2(2f, num213 - num216), spriteEffects, 0f);
					}
				}
				Texture2D texture2D28 = itemTexture[player[projectile.owner].inventory[player[projectile.owner].selectedItem].type];
				Microsoft.Xna.Framework.Color color41 = Lighting.GetColor((int)vector39.X / 16, (int)vector39.Y / 16);
				spriteBatch.Draw(texture2D28, vector39 - screenPosition + value32 * num215, null, color41, projectile.rotation + (float)Math.PI / 2f + ((spriteEffects == SpriteEffects.None) ? ((float)Math.PI) : 0f), new Vector2((spriteEffects != 0) ? texture2D28.Width : 0, (float)texture2D28.Height / 2f) + Vector2.UnitY * 1f, player[projectile.owner].inventory[player[projectile.owner].selectedItem].scale, spriteEffects, 0f);
				spriteBatch.Draw(glowMaskTexture[39], vector39 - screenPosition + value32 * num215, null, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), projectile.rotation + (float)Math.PI / 2f + ((spriteEffects == SpriteEffects.None) ? ((float)Math.PI) : 0f), new Vector2((spriteEffects != 0) ? texture2D28.Width : 0, (float)texture2D28.Height / 2f) + Vector2.UnitY * 1f, player[projectile.owner].inventory[player[projectile.owner].selectedItem].scale, spriteEffects, 0f);
				if (num213 > num216)
				{
					for (int num218 = 2; num218 < 4; num218++)
					{
						Microsoft.Xna.Framework.Color white4 = Microsoft.Xna.Framework.Color.White;
						if (num218 % 2 == 0)
						{
							white4 = Microsoft.Xna.Framework.Color.LimeGreen;
							white4.A = 128;
							white4 *= 0.5f;
						}
						else
						{
							white4 = Microsoft.Xna.Framework.Color.CornflowerBlue;
							white4.A = 128;
							white4 *= 0.5f;
						}
						Vector2 value35 = new Vector2(array7[num218].X, 0f).RotatedBy(num214) * 4f;
						spriteBatch.Draw(magicPixel, value33 - screenPosition + value35, new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1), white4, num214, Vector2.One / 2f, new Vector2(2f, num213 - num216), spriteEffects, 0f);
					}
				}
				float num219 = projectile.localAI[0] / 60f;
				if (num219 > 0.5f)
				{
					num219 = 1f - num219;
				}
				spriteBatch.Draw(texture2D27, vector38, null, alpha7 * num219 * 2f, projectile.rotation, new Vector2(texture2D27.Width, texture2D27.Height) / 2f, projectile.scale, spriteEffects, 0f);
				spriteBatch.Draw(glowMaskTexture[40], vector38, null, alpha7 * (0.5f - num219) * 2f, projectile.rotation, new Vector2(texture2D27.Width, texture2D27.Height) / 2f, projectile.scale, spriteEffects, 0f);
			}
			else if ((projectile.type >= 393 && projectile.type <= 395) || projectile.type == 398 || projectile.type == 423 || projectile.type == 450)
			{
				Texture2D texture2D29 = projectileTexture[projectile.type];
				int num220 = projectileTexture[projectile.type].Height / projFrames[projectile.type];
				int y20 = num220 * projectile.frame;
				spriteBatch.Draw(texture2D29, projectile.Center - screenPosition + new Vector2(0f, projectile.gfxOffY - 2f), new Microsoft.Xna.Framework.Rectangle(0, y20, texture2D29.Width, num220), projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)texture2D29.Width / 2f, (float)num220 / 2f), projectile.scale, spriteEffects, 0f);
				if (projectile.type == 398)
				{
					texture2D29 = miniMinotaurTexture;
					spriteBatch.Draw(texture2D29, projectile.Center - screenPosition + new Vector2(0f, projectile.gfxOffY - 2f), new Microsoft.Xna.Framework.Rectangle(0, y20, texture2D29.Width, num220), new Microsoft.Xna.Framework.Color(250, 250, 250, projectile.alpha), projectile.rotation, new Vector2((float)texture2D29.Width / 2f, (float)num220 / 2f), projectile.scale, spriteEffects, 0f);
				}
				if (projectile.type == 423)
				{
					texture2D29 = glowMaskTexture[0];
					spriteBatch.Draw(texture2D29, projectile.Center - screenPosition + new Vector2(0f, projectile.gfxOffY - 2f), new Microsoft.Xna.Framework.Rectangle(0, y20, texture2D29.Width, num220), new Microsoft.Xna.Framework.Color(250, 250, 250, projectile.alpha), projectile.rotation, new Vector2((float)texture2D29.Width / 2f, (float)num220 / 2f), projectile.scale, spriteEffects, 0f);
				}
			}
			else if (projectile.type == 385)
			{
				Texture2D texture2D30 = projectileTexture[projectile.type];
				int num221 = texture2D30.Height / projFrames[projectile.type];
				int y21 = num221 * projectile.frame;
				int num222 = 8;
				int num223 = 2;
				float value36 = 0.4f;
				for (int num224 = 1; num224 < num222; num224 += num223)
				{
					Vector2 vector51 = projectile.oldPos[num224];
					Microsoft.Xna.Framework.Color newColor3 = color25;
					newColor3 = projectile.GetAlpha(newColor3);
					newColor3 *= (float)(num222 - num224) / 15f;
					Microsoft.Xna.Framework.Color alpha8 = projectile.GetAlpha(color25);
					Vector2 vector52 = projectile.oldPos[num224] - screenPosition + new Vector2(num134 + (float)num133, (float)(projectile.height / 2) + projectile.gfxOffY);
					spriteBatch.Draw(texture2D30, projectile.oldPos[num224] + new Vector2(projectile.width, projectile.height) / 2f - screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, y21, texture2D30.Width, num221), Microsoft.Xna.Framework.Color.Lerp(alpha8, newColor3, 0.3f), projectile.rotation, new Vector2((float)texture2D30.Width / 2f, (float)num221 / 2f), MathHelper.Lerp(projectile.scale, value36, (float)num224 / 15f), spriteEffects, 0f);
				}
				spriteBatch.Draw(texture2D30, projectile.Center - screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, y21, texture2D30.Width, num221), projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)texture2D30.Width / 2f, (float)num221 / 2f), projectile.scale, spriteEffects, 0f);
			}
			else if (projectile.type == 388)
			{
				Texture2D texture2D31 = projectileTexture[projectile.type];
				int num225 = texture2D31.Height / projFrames[projectile.type];
				int y22 = num225 * projectile.frame;
				int num226 = 0;
				int num227 = 0;
				if (projectile.ai[0] == 2f)
				{
					num226 = 10;
					num227 = 1;
				}
				else
				{
					num227 = 2;
					num226 = 5;
				}
				for (int num228 = 1; num228 < num226; num228 += num227)
				{
					Vector2 vector53 = npc[i].oldPos[num228];
					Microsoft.Xna.Framework.Color newColor4 = color25;
					newColor4 = projectile.GetAlpha(newColor4);
					newColor4 *= (float)(num226 - num228) / 15f;
					Vector2 position8 = projectile.oldPos[num228] - screenPosition + new Vector2(num134 + (float)num133, (float)(projectile.height / 2) + projectile.gfxOffY);
					spriteBatch.Draw(texture2D31, position8, new Microsoft.Xna.Framework.Rectangle(0, y22, texture2D31.Width, num225), newColor4, projectile.rotation, new Vector2(num134, projectile.height / 2 + num132), projectile.scale, spriteEffects, 0f);
				}
				spriteBatch.Draw(texture2D31, projectile.position - screenPosition + new Vector2(num134 + (float)num133, (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, y22, texture2D31.Width, num225), projectile.GetAlpha(color25), projectile.rotation, new Vector2(num134, projectile.height / 2 + num132), projectile.scale, spriteEffects, 0f);
			}
			else if (projFrames[projectile.type] > 1)
			{
				int num229 = projectileTexture[projectile.type].Height / projFrames[projectile.type];
				int y23 = num229 * projectile.frame;
				if (projectile.type == 111)
				{
					int r = player[projectile.owner].shirtColor.R;
					int g = player[projectile.owner].shirtColor.G;
					int b = player[projectile.owner].shirtColor.B;
					color25 = Lighting.GetColor(oldColor: new Microsoft.Xna.Framework.Color((byte)r, (byte)g, (byte)b), x: (int)((double)projectile.position.X + (double)projectile.width * 0.5) / 16, y: (int)(((double)projectile.position.Y + (double)projectile.height * 0.5) / 16.0));
					spriteBatch.Draw(projectileTexture[projectile.type], new Vector2(projectile.position.X - screenPosition.X + num134 + (float)num133, projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, y23, projectileTexture[projectile.type].Width, num229), projectile.GetAlpha(color25), projectile.rotation, new Vector2(num134, projectile.height / 2 + num132), projectile.scale, spriteEffects, 0f);
				}
				else
				{
					spriteBatch.Draw(projectileTexture[projectile.type], new Vector2(projectile.position.X - screenPosition.X + num134 + (float)num133, projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, y23, projectileTexture[projectile.type].Width, num229 - 1), projectile.GetAlpha(color25), projectile.rotation, new Vector2(num134, projectile.height / 2 + num132), projectile.scale, spriteEffects, 0f);
					if (projectile.type == 387)
					{
						spriteBatch.Draw(eyeLaserSmallTexture, new Vector2(projectile.position.X - screenPosition.X + num134 + (float)num133, projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, y23, projectileTexture[projectile.type].Width, num229), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), projectile.rotation, new Vector2(num134, projectile.height / 2 + num132), projectile.scale, spriteEffects, 0f);
					}
				}
			}
			else if (projectile.type == 383 || projectile.type == 399)
			{
				Texture2D texture2D32 = projectileTexture[projectile.type];
				spriteBatch.Draw(texture2D32, projectile.Center - screenPosition, null, projectile.GetAlpha(color25), projectile.rotation, new Vector2(texture2D32.Width, texture2D32.Height) / 2f, projectile.scale, spriteEffects, 0f);
			}
			else if (projectile.type == 157 || projectile.type == 378)
			{
				spriteBatch.Draw(projectileTexture[projectile.type], new Vector2(projectile.position.X - screenPosition.X + (float)(projectile.width / 2), projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2)), new Microsoft.Xna.Framework.Rectangle(0, 0, projectileTexture[projectile.type].Width, projectileTexture[projectile.type].Height), projectile.GetAlpha(color25), projectile.rotation, new Vector2(projectileTexture[projectile.type].Width / 2, projectileTexture[projectile.type].Height / 2), projectile.scale, spriteEffects, 0f);
			}
			else if (projectile.type == 306)
			{
				spriteBatch.Draw(projectileTexture[projectile.type], new Vector2(projectile.position.X - screenPosition.X + (float)(projectile.width / 2), projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2)), new Microsoft.Xna.Framework.Rectangle(0, 0, projectileTexture[projectile.type].Width, projectileTexture[projectile.type].Height), projectile.GetAlpha(color25), projectile.rotation, new Vector2(projectileTexture[projectile.type].Width / 2, projectileTexture[projectile.type].Height / 2), projectile.scale, spriteEffects, 0f);
			}
			else if (projectile.type == 256)
			{
				spriteBatch.Draw(projectileTexture[projectile.type], new Vector2(projectile.position.X - screenPosition.X + (float)(projectile.width / 2), projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2)), new Microsoft.Xna.Framework.Rectangle(0, 0, projectileTexture[projectile.type].Width, projectileTexture[projectile.type].Height), projectile.GetAlpha(color25), projectile.rotation, new Vector2(projectileTexture[projectile.type].Width / 2, projectileTexture[projectile.type].Height / 2), projectile.scale, spriteEffects, 0f);
			}
			else if (projectile.aiStyle == 27)
			{
				spriteBatch.Draw(projectileTexture[projectile.type], new Vector2(projectile.position.X - screenPosition.X + (float)(projectile.width / 2), projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2)), new Microsoft.Xna.Framework.Rectangle(0, 0, projectileTexture[projectile.type].Width, projectileTexture[projectile.type].Height), projectile.GetAlpha(color25), projectile.rotation, new Vector2(projectileTexture[projectile.type].Width, 0f), projectile.scale, spriteEffects, 0f);
			}
			else if (projectile.aiStyle == 19)
			{
				Vector2 zero = Vector2.Zero;
				if (projectile.spriteDirection == -1)
				{
					zero.X = projectileTexture[projectile.type].Width;
				}
				spriteBatch.Draw(projectileTexture[projectile.type], new Vector2(projectile.position.X - screenPosition.X + (float)(projectile.width / 2), projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, 0, projectileTexture[projectile.type].Width, projectileTexture[projectile.type].Height), projectile.GetAlpha(color25), projectile.rotation, zero, projectile.scale, spriteEffects, 0f);
			}
			else if (projectile.type == 451)
			{
				spriteBatch.Draw(projectileTexture[projectile.type], projectile.Center - screenPosition, null, projectile.GetAlpha(color25), projectile.rotation, new Vector2(projectileTexture[projectile.type].Width, 0f), projectile.scale, spriteEffects, 0f);
			}
			else if (projectile.type == 434)
			{
				Vector2 value37 = new Vector2(projectile.ai[0], projectile.ai[1]);
				Vector2 v = projectile.position - value37;
				float num230 = (float)Math.Sqrt(v.X * v.X + v.Y * v.Y);
				new Vector2(4f, num230);
				float rotation26 = v.ToRotation() + (float)Math.PI / 2f;
				Vector2 value38 = Vector2.Lerp(projectile.position, value37, 0.5f);
				Microsoft.Xna.Framework.Color red = Microsoft.Xna.Framework.Color.Red;
				red.A = 0;
				Microsoft.Xna.Framework.Color white5 = Microsoft.Xna.Framework.Color.White;
				red *= projectile.localAI[0];
				white5 *= projectile.localAI[0];
				float num231 = (float)Math.Sqrt(projectile.damage / 50);
				spriteBatch.Draw(magicPixel, value38 - screenPosition, new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1), red, rotation26, Vector2.One / 2f, new Vector2(2f * num231, num230 + 8f), spriteEffects, 0f);
				spriteBatch.Draw(magicPixel, value38 - screenPosition, new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1), red, rotation26, Vector2.One / 2f, new Vector2(4f * num231, num230), spriteEffects, 0f);
				spriteBatch.Draw(magicPixel, value38 - screenPosition, new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1), white5, rotation26, Vector2.One / 2f, new Vector2(2f * num231, num230), spriteEffects, 0f);
			}
			else
			{
				if (projectile.type == 94 && projectile.ai[1] > 6f)
				{
					for (int num232 = 0; num232 < 10; num232++)
					{
						Microsoft.Xna.Framework.Color alpha9 = projectile.GetAlpha(color25);
						float num233 = (float)(9 - num232) / 9f;
						alpha9.R = (byte)((float)(int)alpha9.R * num233);
						alpha9.G = (byte)((float)(int)alpha9.G * num233);
						alpha9.B = (byte)((float)(int)alpha9.B * num233);
						alpha9.A = (byte)((float)(int)alpha9.A * num233);
						float num234 = (float)(9 - num232) / 9f;
						spriteBatch.Draw(projectileTexture[projectile.type], new Vector2(projectile.oldPos[num232].X - screenPosition.X + num134 + (float)num133, projectile.oldPos[num232].Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, 0, projectileTexture[projectile.type].Width, projectileTexture[projectile.type].Height), alpha9, projectile.rotation, new Vector2(num134, projectile.height / 2 + num132), num234 * projectile.scale, spriteEffects, 0f);
					}
				}
				if (projectile.type == 301)
				{
					for (int num235 = 0; num235 < 10; num235++)
					{
						Microsoft.Xna.Framework.Color alpha10 = projectile.GetAlpha(color25);
						float num236 = (float)(9 - num235) / 9f;
						alpha10.R = (byte)((float)(int)alpha10.R * num236);
						alpha10.G = (byte)((float)(int)alpha10.G * num236);
						alpha10.B = (byte)((float)(int)alpha10.B * num236);
						alpha10.A = (byte)((float)(int)alpha10.A * num236);
						float num237 = (float)(9 - num235) / 9f;
						spriteBatch.Draw(projectileTexture[projectile.type], new Vector2(projectile.oldPos[num235].X - screenPosition.X + num134 + (float)num133, projectile.oldPos[num235].Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, 0, projectileTexture[projectile.type].Width, projectileTexture[projectile.type].Height), alpha10, projectile.rotation, new Vector2(num134, projectile.height / 2 + num132), num237 * projectile.scale, spriteEffects, 0f);
					}
				}
				if (projectile.type == 323 && projectile.alpha == 0)
				{
					for (int num238 = 1; num238 < 8; num238++)
					{
						float num239 = projectile.velocity.X * (float)num238;
						float num240 = projectile.velocity.Y * (float)num238;
						Microsoft.Xna.Framework.Color alpha11 = projectile.GetAlpha(color25);
						float num241 = 0f;
						if (num238 == 1)
						{
							num241 = 0.7f;
						}
						if (num238 == 2)
						{
							num241 = 0.6f;
						}
						if (num238 == 3)
						{
							num241 = 0.5f;
						}
						if (num238 == 4)
						{
							num241 = 0.4f;
						}
						if (num238 == 5)
						{
							num241 = 0.3f;
						}
						if (num238 == 6)
						{
							num241 = 0.2f;
						}
						if (num238 == 7)
						{
							num241 = 0.1f;
						}
						alpha11.R = (byte)((float)(int)alpha11.R * num241);
						alpha11.G = (byte)((float)(int)alpha11.G * num241);
						alpha11.B = (byte)((float)(int)alpha11.B * num241);
						alpha11.A = (byte)((float)(int)alpha11.A * num241);
						spriteBatch.Draw(projectileTexture[projectile.type], new Vector2(projectile.position.X - screenPosition.X + num134 + (float)num133 - num239, projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY - num240), new Microsoft.Xna.Framework.Rectangle(0, 0, projectileTexture[projectile.type].Width, projectileTexture[projectile.type].Height), alpha11, projectile.rotation, new Vector2(num134, projectile.height / 2 + num132), num241 + 0.2f, spriteEffects, 0f);
					}
				}
				if (projectile.type == 117 && projectile.ai[0] > 3f)
				{
					for (int num242 = 1; num242 < 5; num242++)
					{
						float num243 = projectile.velocity.X * (float)num242;
						float num244 = projectile.velocity.Y * (float)num242;
						Microsoft.Xna.Framework.Color alpha12 = projectile.GetAlpha(color25);
						float num245 = 0f;
						if (num242 == 1)
						{
							num245 = 0.4f;
						}
						if (num242 == 2)
						{
							num245 = 0.3f;
						}
						if (num242 == 3)
						{
							num245 = 0.2f;
						}
						if (num242 == 4)
						{
							num245 = 0.1f;
						}
						alpha12.R = (byte)((float)(int)alpha12.R * num245);
						alpha12.G = (byte)((float)(int)alpha12.G * num245);
						alpha12.B = (byte)((float)(int)alpha12.B * num245);
						alpha12.A = (byte)((float)(int)alpha12.A * num245);
						spriteBatch.Draw(projectileTexture[projectile.type], new Vector2(projectile.position.X - screenPosition.X + num134 + (float)num133 - num243, projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY - num244), new Microsoft.Xna.Framework.Rectangle(0, 0, projectileTexture[projectile.type].Width, projectileTexture[projectile.type].Height), alpha12, projectile.rotation, new Vector2(num134, projectile.height / 2 + num132), projectile.scale, spriteEffects, 0f);
					}
				}
				if (projectile.bobber)
				{
					if (projectile.ai[1] > 0f && projectile.ai[1] < 3602f && projectile.ai[0] == 1f)
					{
						int num246 = (int)projectile.ai[1];
						Vector2 center4 = projectile.Center;
						float rotation27 = projectile.rotation;
						Vector2 vector42 = center4;
						float num247 = num - vector42.X;
						float num248 = num2 - vector42.Y;
						rotation27 = (float)Math.Atan2(num248, num247);
						if (projectile.velocity.X > 0f)
						{
							spriteEffects = SpriteEffects.None;
							rotation27 = (float)Math.Atan2(num248, num247);
							rotation27 += 0.785f;
							if (projectile.ai[1] == 2342f)
							{
								rotation27 -= 0.785f;
							}
						}
						else
						{
							spriteEffects = SpriteEffects.FlipHorizontally;
							rotation27 = (float)Math.Atan2(0f - num248, 0f - num247);
							rotation27 -= 0.785f;
							if (projectile.ai[1] == 2342f)
							{
								rotation27 += 0.785f;
							}
						}
						spriteBatch.Draw(itemTexture[num246], new Vector2(center4.X - screenPosition.X, center4.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, itemTexture[num246].Width, itemTexture[num246].Height), color25, rotation27, new Vector2(itemTexture[num246].Width / 2, itemTexture[num246].Height / 2), projectile.scale, spriteEffects, 0f);
					}
					else if (projectile.ai[0] <= 1f)
					{
						spriteBatch.Draw(projectileTexture[projectile.type], new Vector2(projectile.position.X - screenPosition.X + num134 + (float)num133, projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, 0, projectileTexture[projectile.type].Width, projectileTexture[projectile.type].Height), projectile.GetAlpha(color25), projectile.rotation, new Vector2(num134, projectile.height / 2 + num132), projectile.scale, spriteEffects, 0f);
					}
				}
				else
				{
					spriteBatch.Draw(projectileTexture[projectile.type], new Vector2(projectile.position.X - screenPosition.X + num134 + (float)num133, projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, 0, projectileTexture[projectile.type].Width, projectileTexture[projectile.type].Height), projectile.GetAlpha(color25), projectile.rotation, new Vector2(num134, projectile.height / 2 + num132), projectile.scale, spriteEffects, 0f);
					if (projectile.glowMask != -1)
					{
						spriteBatch.Draw(glowMaskTexture[projectile.glowMask], new Vector2(projectile.position.X - screenPosition.X + num134 + (float)num133, projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, 0, projectileTexture[projectile.type].Width, projectileTexture[projectile.type].Height), new Microsoft.Xna.Framework.Color(250, 250, 250, projectile.alpha), projectile.rotation, new Vector2(num134, projectile.height / 2 + num132), projectile.scale, spriteEffects, 0f);
					}
					if (projectile.type == 473)
					{
						spriteBatch.Draw(projectileTexture[projectile.type], new Vector2(projectile.position.X - screenPosition.X + num134 + (float)num133, projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, 0, projectileTexture[projectile.type].Width, projectileTexture[projectile.type].Height), new Microsoft.Xna.Framework.Color(255, 255, 0, 0), projectile.rotation, new Vector2(num134, projectile.height / 2 + num132), projectile.scale, spriteEffects, 0f);
					}
				}
				if (projectile.type == 106)
				{
					spriteBatch.Draw(lightDiscTexture, new Vector2(projectile.position.X - screenPosition.X + num134 + (float)num133, projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2)), new Microsoft.Xna.Framework.Rectangle(0, 0, projectileTexture[projectile.type].Width, projectileTexture[projectile.type].Height), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), projectile.rotation, new Vector2(num134, projectile.height / 2 + num132), projectile.scale, spriteEffects, 0f);
				}
				if (projectile.type == 554 || projectile.type == 603)
				{
					for (int num249 = 1; num249 < 5; num249++)
					{
						float num250 = projectile.velocity.X * (float)num249 * 0.5f;
						float num251 = projectile.velocity.Y * (float)num249 * 0.5f;
						Microsoft.Xna.Framework.Color alpha13 = projectile.GetAlpha(color25);
						float num252 = 0f;
						if (num249 == 1)
						{
							num252 = 0.4f;
						}
						if (num249 == 2)
						{
							num252 = 0.3f;
						}
						if (num249 == 3)
						{
							num252 = 0.2f;
						}
						if (num249 == 4)
						{
							num252 = 0.1f;
						}
						alpha13.R = (byte)((float)(int)alpha13.R * num252);
						alpha13.G = (byte)((float)(int)alpha13.G * num252);
						alpha13.B = (byte)((float)(int)alpha13.B * num252);
						alpha13.A = (byte)((float)(int)alpha13.A * num252);
						spriteBatch.Draw(projectileTexture[projectile.type], new Vector2(projectile.position.X - screenPosition.X + num134 + (float)num133 - num250, projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY - num251), new Microsoft.Xna.Framework.Rectangle(0, 0, projectileTexture[projectile.type].Width, projectileTexture[projectile.type].Height), alpha13, projectile.rotation, new Vector2(num134, projectile.height / 2 + num132), projectile.scale, spriteEffects, 0f);
					}
				}
				else if (projectile.type == 604)
				{
					int num253 = (int)projectile.ai[1] + 1;
					if (num253 > 7)
					{
						num253 = 7;
					}
					for (int num254 = 1; num254 < num253; num254++)
					{
						float num255 = projectile.velocity.X * (float)num254 * 1.5f;
						float num256 = projectile.velocity.Y * (float)num254 * 1.5f;
						Microsoft.Xna.Framework.Color alpha14 = projectile.GetAlpha(color25);
						float num257 = 0f;
						if (num254 == 1)
						{
							num257 = 0.4f;
						}
						if (num254 == 2)
						{
							num257 = 0.3f;
						}
						if (num254 == 3)
						{
							num257 = 0.2f;
						}
						if (num254 == 4)
						{
							num257 = 0.1f;
						}
						num257 = 0.4f - (float)num254 * 0.06f;
						num257 *= 1f - (float)projectile.alpha / 255f;
						alpha14.R = (byte)((float)(int)alpha14.R * num257);
						alpha14.G = (byte)((float)(int)alpha14.G * num257);
						alpha14.B = (byte)((float)(int)alpha14.B * num257);
						alpha14.A = (byte)((float)(int)alpha14.A * num257 / 2f);
						float scale9 = projectile.scale;
						scale9 -= (float)num254 * 0.1f;
						spriteBatch.Draw(projectileTexture[projectile.type], new Vector2(projectile.position.X - screenPosition.X + num134 + (float)num133 - num255, projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY - num256), new Microsoft.Xna.Framework.Rectangle(0, 0, projectileTexture[projectile.type].Width, projectileTexture[projectile.type].Height), alpha14, projectile.rotation, new Vector2(num134, projectile.height / 2 + num132), scale9, spriteEffects, 0f);
					}
				}
				else if (projectile.type == 553)
				{
					for (int num258 = 1; num258 < 5; num258++)
					{
						float num259 = projectile.velocity.X * (float)num258 * 0.4f;
						float num260 = projectile.velocity.Y * (float)num258 * 0.4f;
						Microsoft.Xna.Framework.Color alpha15 = projectile.GetAlpha(color25);
						float num261 = 0f;
						if (num258 == 1)
						{
							num261 = 0.4f;
						}
						if (num258 == 2)
						{
							num261 = 0.3f;
						}
						if (num258 == 3)
						{
							num261 = 0.2f;
						}
						if (num258 == 4)
						{
							num261 = 0.1f;
						}
						alpha15.R = (byte)((float)(int)alpha15.R * num261);
						alpha15.G = (byte)((float)(int)alpha15.G * num261);
						alpha15.B = (byte)((float)(int)alpha15.B * num261);
						alpha15.A = (byte)((float)(int)alpha15.A * num261);
						spriteBatch.Draw(projectileTexture[projectile.type], new Vector2(projectile.position.X - screenPosition.X + num134 + (float)num133 - num259, projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY - num260), new Microsoft.Xna.Framework.Rectangle(0, 0, projectileTexture[projectile.type].Width, projectileTexture[projectile.type].Height), alpha15, projectile.rotation, new Vector2(num134, projectile.height / 2 + num132), projectile.scale, spriteEffects, 0f);
					}
				}
			}
			if (projectile.type != 525 || (gamePaused && !gameMenu))
			{
				return;
			}
			Vector2 vector43 = projectile.position - screenPosition;
			if (!((float)mouseX > vector43.X) || !((float)mouseX < vector43.X + (float)projectile.width) || !((float)mouseY > vector43.Y) || !((float)mouseY < vector43.Y + (float)projectile.height))
			{
				return;
			}
			int num262 = (int)(player[myPlayer].Center.X / 16f);
			int num263 = (int)(player[myPlayer].Center.Y / 16f);
			int num264 = (int)projectile.Center.X / 16;
			int num265 = (int)projectile.Center.Y / 16;
			int lastTileRangeX = player[myPlayer].lastTileRangeX;
			int lastTileRangeY = player[myPlayer].lastTileRangeY;
			if (num262 < num264 - lastTileRangeX || num262 > num264 + lastTileRangeX + 1 || num263 < num265 - lastTileRangeY || num263 > num265 + lastTileRangeY + 1)
			{
				return;
			}
			player[myPlayer].noThrow = 2;
			player[myPlayer].showItemIcon = true;
			player[myPlayer].showItemIcon2 = 3213;
			if (mouseRight && mouseRightRelease)
			{
				mouseRightRelease = false;
				if (player[myPlayer].chest == -2)
				{
					PlaySound(2, -1, -1, 59);
					player[myPlayer].chest = -1;
					Recipe.FindRecipes();
					return;
				}
				player[myPlayer].flyingPigChest = i;
				player[myPlayer].chest = -2;
				player[myPlayer].chestX = (int)(projectile.Center.X / 16f);
				player[myPlayer].chestY = (int)(projectile.Center.Y / 16f);
				player[myPlayer].talkNPC = -1;
				npcShop = 0;
				playerInventory = true;
				PlaySound(2, -1, -1, 59);
				Recipe.FindRecipes();
			}
		}

		private static Microsoft.Xna.Framework.Color buffColor(Microsoft.Xna.Framework.Color newColor, float R, float G, float B, float A)
		{
			newColor.R = (byte)((float)(int)newColor.R * R);
			newColor.G = (byte)((float)(int)newColor.G * G);
			newColor.B = (byte)((float)(int)newColor.B * B);
			newColor.A = (byte)((float)(int)newColor.A * A);
			return newColor;
		}

		protected void CacheNPCDraws()
		{
			DrawCacheNPCsMoonMoon.Clear();
			DrawCacheNPCsOverPlayers.Clear();
			DrawCacheNPCProjectiles.Clear();
			for (int i = 0; i < 200; i++)
			{
				if (!npc[i].active)
				{
					continue;
				}
				if (npc[i].type == 398 && npc[i].ai[0] >= 0f)
				{
					int num = i;
					int num2 = -1;
					int num3 = -1;
					int num4 = -1;
					for (int j = 0; j < 200; j++)
					{
						if (npc[j].active && npc[j].ai[3] == (float)num)
						{
							if (num2 == -1 && npc[j].type == 397 && npc[j].ai[2] == 0f)
							{
								num2 = j;
							}
							if (num3 == -1 && npc[j].type == 397 && npc[j].ai[2] == 1f)
							{
								num3 = j;
							}
							if (num4 == -1 && npc[j].type == 396)
							{
								num4 = j;
							}
							if (num2 != -1 && num3 != -1 && num4 != -1)
							{
								break;
							}
						}
					}
					if (num2 != -1 && num3 != -1 && num4 != -1)
					{
						DrawCacheNPCsMoonMoon.Add(num);
						if (num2 != -1)
						{
							DrawCacheNPCsMoonMoon.Add(num2);
						}
						if (num3 != -1)
						{
							DrawCacheNPCsMoonMoon.Add(num3);
						}
						if (num4 != -1)
						{
							DrawCacheNPCsMoonMoon.Add(num4);
						}
					}
				}
				else if (npc[i].type == 421 && npc[i].ai[0] == 5f)
				{
					DrawCacheNPCsOverPlayers.Add(i);
				}
				else if (npc[i].type == 516 || npc[i].type == 519)
				{
					DrawCacheNPCProjectiles.Add(i);
				}
			}
		}

		protected void CacheProjDraws()
		{
			DrawCacheProjsBehindNPCsAndTiles.Clear();
			DrawCacheProjsBehindNPCs.Clear();
			DrawCacheProjsBehindProjectiles.Clear();
			for (int i = 0; i < 1000; i++)
			{
				if (!projectile[i].active)
				{
					continue;
				}
				if (projectile[i].type == 578 || projectile[i].type == 579 || projectile[i].type == 641 || projectile[i].type == 617)
				{
					DrawCacheProjsBehindNPCsAndTiles.Add(i);
				}
				if (projectile[i].type == 625 || projectile[i].type == 626 || projectile[i].type == 627 || projectile[i].type == 628)
				{
					DrawCacheProjsBehindProjectiles.Add(i);
				}
				if (projectile[i].type != 636 && projectile[i].type != 598)
				{
					continue;
				}
				bool flag = true;
				if (projectile[i].ai[0] == 1f)
				{
					int num = (int)projectile[i].ai[1];
					if (num >= 0 && num < 200 && npc[num].active)
					{
						if (npc[num].behindTiles)
						{
							DrawCacheProjsBehindNPCsAndTiles.Add(i);
						}
						else
						{
							DrawCacheProjsBehindNPCs.Add(i);
						}
						flag = false;
					}
				}
				if (flag)
				{
					DrawCacheProjsBehindProjectiles.Add(i);
				}
			}
		}

		protected void DrawCachedNPCs(List<int> npcCache, bool behindTiles)
		{
			for (int i = 0; i < npcCache.Count; i++)
			{
				try
				{
					DrawNPC(npcCache[i], behindTiles);
				}
				catch
				{
					npc[npcCache[i]].active = false;
				}
			}
		}

		protected void DrawCachedProjs(List<int> projCache)
		{
			spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, Rasterizer, null, Transform);
			for (int i = 0; i < projCache.Count; i++)
			{
				try
				{
					DrawProj(projCache[i]);
				}
				catch (Exception e)
				{
					TimeLogger.DrawException(e);
					projectile[projCache[i]].active = false;
				}
			}
			spriteBatch.End();
		}

		protected void SortDrawCacheWorms()
		{
			List<int> drawCacheProjsBehindProjectiles = DrawCacheProjsBehindProjectiles;
			if (drawCacheProjsBehindProjectiles.Count == 0)
			{
				return;
			}
			List<List<int>> list = new List<List<int>>();
			for (int i = 0; i < drawCacheProjsBehindProjectiles.Count; i++)
			{
				int num = drawCacheProjsBehindProjectiles[i];
				if (Main.projectile[num].type == 628)
				{
					drawCacheProjsBehindProjectiles.Remove(num);
					List<int> list2 = new List<int>();
					list2.Insert(0, num);
					int byUUID = Projectile.GetByUUID(Main.projectile[num].owner, Main.projectile[num].ai[0]);
					while (byUUID >= 0 && !list2.Contains(byUUID) && Main.projectile[byUUID].active && Main.projectile[byUUID].type >= 625 && Main.projectile[byUUID].type <= 627)
					{
						list2.Insert(0, byUUID);
						drawCacheProjsBehindProjectiles.Remove(byUUID);
						byUUID = Projectile.GetByUUID(Main.projectile[byUUID].owner, Main.projectile[byUUID].ai[0]);
					}
					list.Add(list2);
					i = -1;
				}
			}
			List<int> list3 = new List<int>(DrawCacheProjsBehindProjectiles);
			list.Add(list3);
			DrawCacheProjsBehindProjectiles.Clear();
			for (int j = 0; j < list.Count; j++)
			{
				for (int k = 0; k < list[j].Count; k++)
				{
					DrawCacheProjsBehindProjectiles.Add(list[j][k]);
				}
			}
			for (int l = 0; l < DrawCacheProjsBehindProjectiles.Count; l++)
			{
				Projectile projectile = Main.projectile[DrawCacheProjsBehindProjectiles[l]];
				int byUUID2 = Projectile.GetByUUID(projectile.owner, projectile.ai[0]);
				if (projectile.type < 626 || projectile.type > 628 || byUUID2 < 0 || !ProjectileID.Sets.StardustDragon[Main.projectile[byUUID2].type])
				{
					continue;
				}
				Vector2 vector = Main.projectile[byUUID2].Center - projectile.Center;
				if (vector != Vector2.Zero)
				{
					float num2 = Main.projectile[byUUID2].scale * 16f;
					float num3 = vector.Length();
					float num4 = num2 - num3;
					if (num4 != 0f)
					{
						projectile.Center += Vector2.Normalize(vector) * (0f - num4);
					}
				}
			}
		}

		protected void DrawWoF()
		{
			if (wof < 0 || !player[myPlayer].gross)
			{
				return;
			}
			for (int i = 0; i < 16; i++)
			{
				if (!player[i].active || !player[i].tongued || player[i].dead)
				{
					continue;
				}
				float num = npc[wof].position.X + (float)(npc[wof].width / 2);
				float num2 = npc[wof].position.Y + (float)(npc[wof].height / 2);
				Vector2 vector = new Vector2(player[i].position.X + (float)player[i].width * 0.5f, player[i].position.Y + (float)player[i].height * 0.5f);
				float num3 = num - vector.X;
				float num4 = num2 - vector.Y;
				float rotation = (float)Math.Atan2(num4, num3) - 1.57f;
				bool flag = true;
				while (flag)
				{
					float num5 = (float)Math.Sqrt(num3 * num3 + num4 * num4);
					if (num5 < 40f)
					{
						flag = false;
						continue;
					}
					num5 = (float)chain12Texture.Height / num5;
					num3 *= num5;
					num4 *= num5;
					vector.X += num3;
					vector.Y += num4;
					num3 = num - vector.X;
					num4 = num2 - vector.Y;
					Microsoft.Xna.Framework.Color color = Lighting.GetColor((int)vector.X / 16, (int)(vector.Y / 16f));
					spriteBatch.Draw(chain12Texture, new Vector2(vector.X - screenPosition.X, vector.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, chain12Texture.Width, chain12Texture.Height), color, rotation, new Vector2((float)chain12Texture.Width * 0.5f, (float)chain12Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
				}
			}
			for (int j = 0; j < 200; j++)
			{
				if (!npc[j].active || npc[j].aiStyle != 29)
				{
					continue;
				}
				float num6 = npc[wof].position.X + (float)(npc[wof].width / 2);
				float y = npc[wof].position.Y;
				float num7 = wofB - wofT;
				bool flag2 = false;
				if (npc[j].frameCounter > 7.0)
				{
					flag2 = true;
				}
				y = (float)wofT + num7 * npc[j].ai[0];
				Vector2 vector2 = new Vector2(npc[j].position.X + (float)(npc[j].width / 2), npc[j].position.Y + (float)(npc[j].height / 2));
				float num8 = num6 - vector2.X;
				float num9 = y - vector2.Y;
				float rotation2 = (float)Math.Atan2(num9, num8) - 1.57f;
				bool flag3 = true;
				while (flag3)
				{
					SpriteEffects effects = SpriteEffects.None;
					if (flag2)
					{
						effects = SpriteEffects.FlipHorizontally;
						flag2 = false;
					}
					else
					{
						flag2 = true;
					}
					int height = 28;
					float num10 = (float)Math.Sqrt(num8 * num8 + num9 * num9);
					if (num10 < 40f)
					{
						height = (int)num10 - 40 + 28;
						flag3 = false;
					}
					num10 = 28f / num10;
					num8 *= num10;
					num9 *= num10;
					vector2.X += num8;
					vector2.Y += num9;
					num8 = num6 - vector2.X;
					num9 = y - vector2.Y;
					Microsoft.Xna.Framework.Color color2 = Lighting.GetColor((int)vector2.X / 16, (int)(vector2.Y / 16f));
					spriteBatch.Draw(chain12Texture, new Vector2(vector2.X - screenPosition.X, vector2.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, chain4Texture.Width, height), color2, rotation2, new Vector2((float)chain4Texture.Width * 0.5f, (float)chain4Texture.Height * 0.5f), 1f, effects, 0f);
				}
			}
			int num11 = 140;
			float num12 = wofT;
			float num13 = wofB;
			num13 = screenPosition.Y + (float)screenHeight;
			float num14 = (int)((num12 - screenPosition.Y) / (float)num11) + 1;
			num14 *= (float)num11;
			if (num14 > 0f)
			{
				num12 -= num14;
			}
			float num15 = num12;
			float num16 = npc[wof].position.X;
			float num17 = num13 - num12;
			bool flag4 = true;
			SpriteEffects effects2 = SpriteEffects.None;
			if (npc[wof].spriteDirection == 1)
			{
				effects2 = SpriteEffects.FlipHorizontally;
			}
			if (npc[wof].direction > 0)
			{
				num16 -= 80f;
			}
			int num18 = 0;
			if (!gamePaused)
			{
				wofF++;
			}
			if (wofF > 12)
			{
				num18 = 280;
				if (wofF > 17)
				{
					wofF = 0;
				}
			}
			else if (wofF > 6)
			{
				num18 = 140;
			}
			while (flag4)
			{
				num17 = num13 - num15;
				if (num17 > (float)num11)
				{
					num17 = num11;
				}
				bool flag5 = true;
				int num19 = 0;
				while (flag5)
				{
					int x = (int)(num16 + (float)(wofTexture.Width / 2)) / 16;
					int y2 = (int)(num15 + (float)num19) / 16;
					spriteBatch.Draw(wofTexture, new Vector2(num16 - screenPosition.X, num15 + (float)num19 - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, num18 + num19, wofTexture.Width, 16), Lighting.GetColor(x, y2), 0f, default(Vector2), 1f, effects2, 0f);
					num19 += 16;
					if ((float)num19 >= num17)
					{
						flag5 = false;
					}
				}
				num15 += (float)num11;
				if (num15 >= num13)
				{
					flag4 = false;
				}
			}
		}

		protected void DrawGhost(Player drawPlayer, Vector2 Position, float shadow = 0f)
		{
			SpriteEffects spriteEffects = SpriteEffects.None;
			spriteEffects = ((drawPlayer.direction != 1) ? SpriteEffects.FlipHorizontally : SpriteEffects.None);
			Microsoft.Xna.Framework.Color ımmuneAlpha = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)drawPlayer.position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)drawPlayer.position.Y + (double)drawPlayer.height * 0.5) / 16, new Microsoft.Xna.Framework.Color((int)mouseTextColor / 2 + 100, (int)mouseTextColor / 2 + 100, (int)mouseTextColor / 2 + 100, (int)mouseTextColor / 2 + 100)), shadow);
			Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle(0, ghostTexture.Height / 4 * drawPlayer.ghostFrame, ghostTexture.Width, ghostTexture.Height / 4);
			Vector2 origin = new Vector2((float)value.Width * 0.5f, (float)value.Height * 0.5f);
			spriteBatch.Draw(ghostTexture, new Vector2((int)(drawPlayer.position.X - screenPosition.X + (float)(value.Width / 2)), (int)(drawPlayer.position.Y - screenPosition.Y + (float)(value.Height / 2))), value, ımmuneAlpha, 0f, origin, 1f, spriteEffects, 0f);
		}

		protected Vector2 DrawPlayerItemPos(float gravdir, int itemtype)
		{
			float num = 10f;
			Vector2 result = new Vector2(itemTexture[itemtype].Width / 2, itemTexture[itemtype].Height / 2);
			switch (itemtype)
			{
			case 95:
				num = 6f;
				result.Y += 2f * gravdir;
				break;
			case 1295:
				num = 4f;
				break;
			case 3350:
				num = 2f;
				break;
			case 2624:
				num = 4f;
				break;
			case 3018:
				num = 2f;
				break;
			case 3007:
				num = 4f;
				result.Y += 4f * gravdir;
				break;
			case 3107:
				num = 4f;
				result.Y += 2f * gravdir;
				break;
			case 3008:
				num = -12f;
				result.Y += 2f * gravdir;
				break;
			case 1255:
				num = 6f;
				result.Y += 0f * gravdir;
				break;
			case 2269:
				num = 2f;
				result.Y += 2f * gravdir;
				break;
			case 1265:
				num = -8f;
				result.Y += 4f * gravdir;
				break;
			case 2272:
				num = 0f;
				result.Y += 4f * gravdir;
				break;
			case 3029:
				num = 4f;
				break;
			case 2796:
				num = -28f;
				result.Y += 2f * gravdir;
				break;
			case 2797:
				num = 0f;
				break;
			case 2610:
				num = 0f;
				break;
			case 2623:
				num = -30f;
				result.Y -= 4f * gravdir;
				break;
			case 3546:
				num = -14f;
				result.Y -= 6f * gravdir;
				break;
			case 1835:
				num = -2f;
				result.Y += 2f * gravdir;
				break;
			default:
				switch (itemtype)
				{
				case 2624:
					num = -4f;
					break;
				case 2888:
					num = 6f;
					break;
				case 2223:
					num = 2f;
					result.Y -= 2f * gravdir;
					break;
				case 1782:
					num = 0f;
					result.Y += 4f * gravdir;
					break;
				case 1929:
					num = 0f;
					result.Y += 2f * gravdir;
					break;
				case 2270:
					num = -4f;
					break;
				case 1784:
					num = 0f;
					result.Y += 4f * gravdir;
					break;
				case 1000:
					num = 6f;
					result.Y += 0f * gravdir;
					break;
				case 1178:
					num = 4f;
					result.Y += 0f * gravdir;
					break;
				case 1319:
					num = 0f;
					result.Y += 0f * gravdir;
					break;
				case 1297:
					num = -8f;
					result.Y += 0f * gravdir;
					break;
				case 1121:
					num = 6f;
					result.Y -= 2f * gravdir;
					break;
				case 1314:
					num = 2f;
					break;
				case 1258:
					num = 2f;
					result.Y -= 2f * gravdir;
					break;
				case 1155:
					num = -10f;
					result.Y -= 2f * gravdir;
					break;
				case 1156:
					num = -2f;
					break;
				case 96:
					num = -8f;
					result.Y += 2f * gravdir;
					break;
				case 1870:
					num = -8f;
					result.Y += 2f * gravdir;
					break;
				case 1260:
					num = -8f;
					result.Y += 2f * gravdir;
					break;
				case 1254:
					num = -6f;
					result.Y += 2f * gravdir;
					break;
				case 98:
					num = -5f;
					result.Y -= 2f * gravdir;
					break;
				case 534:
					num = -2f;
					result.Y += 1f * gravdir;
					break;
				case 679:
					num = 0f;
					result.Y += 2f * gravdir;
					break;
				case 964:
					num = 0f;
					result.Y += 0f * gravdir;
					break;
				case 533:
					num = -7f;
					result.Y -= 2f * gravdir;
					break;
				case 1553:
					num = -10f;
					result.Y -= 2f * gravdir;
					break;
				case 506:
					num = 0f;
					result.Y -= 2f * gravdir;
					break;
				case 1910:
					num = 0f;
					result.Y -= 2f * gravdir;
					break;
				case 494:
				case 508:
					num = -2f;
					break;
				case 434:
					num = 0f;
					result.Y -= 2f * gravdir;
					break;
				case 514:
					num = 0f;
					result.Y += 3f * gravdir;
					break;
				case 435:
				case 436:
				case 481:
				case 578:
				case 1187:
				case 1194:
				case 1201:
				case 1229:
					num = -2f;
					result.Y -= 2f * gravdir;
					break;
				case 197:
					num = -5f;
					result.Y += 4f * gravdir;
					break;
				case 126:
					num = 4f;
					result.Y += 4f * gravdir;
					break;
				case 800:
					num = 4f;
					result.Y += 2f * gravdir;
					break;
				case 127:
					num = 4f;
					result.Y += 2f * gravdir;
					break;
				case 157:
					num = 6f;
					result.Y += 2f * gravdir;
					break;
				case 160:
					num = -8f;
					break;
				case 164:
				case 219:
					num = 0f;
					result.Y += 2f * gravdir;
					break;
				case 165:
				case 272:
					num = 4f;
					result.Y += 4f * gravdir;
					break;
				case 266:
					num = 0f;
					result.Y += 2f * gravdir;
					break;
				case 281:
					num = 6f;
					result.Y -= 6f * gravdir;
					break;
				case 986:
					num = 6f;
					result.Y -= 10f * gravdir;
					break;
				case 682:
					num = 4f;
					break;
				case 758:
					num -= 20f;
					result.Y += 0f * gravdir;
					break;
				case 759:
					num -= 18f;
					result.Y += 2f * gravdir;
					break;
				case 760:
					num -= 12f;
					result.Y += 2f * gravdir;
					break;
				case 1946:
					num -= 12f;
					result.Y += 2f * gravdir;
					break;
				case 779:
					num = 0f;
					result.Y += 2f * gravdir;
					break;
				case 905:
					num = -5f;
					result.Y += 0f * gravdir;
					break;
				case 930:
					num = 4f;
					result.Y += 2f * gravdir;
					break;
				}
				break;
			}
			result.X = num;
			return result;
		}

		protected Microsoft.Xna.Framework.Color quickAlpha(Microsoft.Xna.Framework.Color oldColor, float Alpha)
		{
			Microsoft.Xna.Framework.Color result = oldColor;
			result.R = (byte)((float)(int)result.R * Alpha);
			result.G = (byte)((float)(int)result.G * Alpha);
			result.B = (byte)((float)(int)result.B * Alpha);
			result.A = (byte)((float)(int)result.A * Alpha);
			return result;
		}

		protected void DrawPlayerHead(Player drawPlayer, float X, float Y, float Alpha = 1f, float Scale = 1f)
		{
			int shaderId = 0;
			int skinVariant = drawPlayer.skinVariant;
			short num = drawPlayer.hairDye;
			if (drawPlayer.head == 0 && num == 0)
			{
				num = 1;
			}
			for (int i = 0; i < 16 + drawPlayer.extraAccessorySlots * 2; i++)
			{
				int num2 = i % 10;
				if (drawPlayer.dye[num2] != null && drawPlayer.armor[i].type > 0 && drawPlayer.armor[i].stack > 0 && drawPlayer.armor[i].faceSlot > 0 && drawPlayer.armor[i].faceSlot < 9)
				{
					byte dye = drawPlayer.dye[num2].dye;
				}
			}
			if (drawPlayer.face > 0 && drawPlayer.face < 9)
			{
				LoadAccFace(drawPlayer.face);
			}
			if (drawPlayer.dye[0] != null)
			{
				shaderId = drawPlayer.dye[0].dye;
			}
			LoadHair(drawPlayer.hair);
			Microsoft.Xna.Framework.Color color = quickAlpha(Microsoft.Xna.Framework.Color.White, Alpha);
			Microsoft.Xna.Framework.Color color2 = quickAlpha(drawPlayer.eyeColor, Alpha);
			Microsoft.Xna.Framework.Color color3 = quickAlpha(drawPlayer.GetHairColor(false), Alpha);
			Microsoft.Xna.Framework.Color color4 = quickAlpha(drawPlayer.skinColor, Alpha);
			Microsoft.Xna.Framework.Color color5 = quickAlpha(Microsoft.Xna.Framework.Color.White, Alpha);
			SpriteEffects spriteEffects = SpriteEffects.None;
			if (drawPlayer.direction < 0)
			{
				spriteEffects = SpriteEffects.FlipHorizontally;
			}
			Vector2 vector = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.4f);
			Vector2 position = drawPlayer.position;
			Microsoft.Xna.Framework.Rectangle bodyFrame = drawPlayer.bodyFrame;
			drawPlayer.bodyFrame.Y = 0;
			drawPlayer.position = screenPosition;
			drawPlayer.position.X += X;
			drawPlayer.position.Y += Y;
			drawPlayer.position.X -= 6f;
			drawPlayer.position.Y -= 4f;
			float num3 = drawPlayer.mount.PlayerHeadOffset;
			drawPlayer.position.Y -= num3;
			if (drawPlayer.head > 0 && drawPlayer.head < 194)
			{
				LoadArmorHead(drawPlayer.head);
			}
			if (drawPlayer.face > 0 && drawPlayer.face < 9)
			{
				LoadAccFace(drawPlayer.face);
			}
			bool flag = false;
			if (drawPlayer.head == 10 || drawPlayer.head == 12 || drawPlayer.head == 28 || drawPlayer.head == 62 || drawPlayer.head == 97 || drawPlayer.head == 106 || drawPlayer.head == 113 || drawPlayer.head == 116 || drawPlayer.head == 119 || drawPlayer.head == 133 || drawPlayer.head == 138 || drawPlayer.head == 139 || drawPlayer.head == 163 || drawPlayer.head == 178 || drawPlayer.head == 181 || drawPlayer.head == 191)
			{
				flag = true;
			}
			bool flag2 = false;
			if (drawPlayer.head == 161 || drawPlayer.head == 14 || drawPlayer.head == 15 || drawPlayer.head == 16 || drawPlayer.head == 18 || drawPlayer.head == 21 || drawPlayer.head == 24 || drawPlayer.head == 25 || drawPlayer.head == 26 || drawPlayer.head == 40 || drawPlayer.head == 44 || drawPlayer.head == 51 || drawPlayer.head == 56 || drawPlayer.head == 59 || drawPlayer.head == 60 || drawPlayer.head == 67 || drawPlayer.head == 68 || drawPlayer.head == 69 || drawPlayer.head == 114 || drawPlayer.head == 121 || drawPlayer.head == 126 || drawPlayer.head == 130 || drawPlayer.head == 136 || drawPlayer.head == 140 || drawPlayer.head == 145 || drawPlayer.head == 158 || drawPlayer.head == 159 || drawPlayer.head == 184 || drawPlayer.head == 190 || drawPlayer.head == 92)
			{
				flag2 = true;
			}
			if (drawPlayer.head != 38 && drawPlayer.head != 135)
			{
				spriteBatch.Draw(playerTextures[skinVariant, 0], new Vector2(drawPlayer.position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, drawPlayer.bodyFrame, color4, drawPlayer.headRotation, vector, Scale, spriteEffects, 0f);
				spriteBatch.Draw(playerTextures[skinVariant, 1], new Vector2(drawPlayer.position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, drawPlayer.bodyFrame, color, drawPlayer.headRotation, vector, Scale, spriteEffects, 0f);
				spriteBatch.Draw(playerTextures[skinVariant, 2], new Vector2(drawPlayer.position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, drawPlayer.bodyFrame, color2, drawPlayer.headRotation, vector, Scale, spriteEffects, 0f);
			}
			if (flag)
			{
				DrawData value = new DrawData(armorHeadTexture[drawPlayer.head], new Vector2(drawPlayer.position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, drawPlayer.bodyFrame, color5, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
				GameShaders.Armor.Apply(shaderId, drawPlayer, value);
				value.Draw(spriteBatch);
				pixelShader.CurrentTechnique.Passes[0].Apply();
				if (!drawPlayer.invis)
				{
					Microsoft.Xna.Framework.Rectangle bodyFrame2 = drawPlayer.bodyFrame;
					bodyFrame2.Y -= 336;
					if (bodyFrame2.Y < 0)
					{
						bodyFrame2.Y = 0;
					}
					value = new DrawData(playerHairTexture[drawPlayer.hair], new Vector2(drawPlayer.position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, bodyFrame2, color3, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
					GameShaders.Hair.Apply(num, drawPlayer, value);
					value.Draw(spriteBatch);
					pixelShader.CurrentTechnique.Passes[0].Apply();
				}
			}
			if (flag2)
			{
				Microsoft.Xna.Framework.Rectangle bodyFrame3 = drawPlayer.bodyFrame;
				bodyFrame3.Y -= 336;
				if (bodyFrame3.Y < 0)
				{
					bodyFrame3.Y = 0;
				}
				if (!drawPlayer.invis)
				{
					DrawData value2 = new DrawData(playerHairAltTexture[drawPlayer.hair], new Vector2(drawPlayer.position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, bodyFrame3, color3, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
					GameShaders.Hair.Apply(num, drawPlayer, value2);
					value2.Draw(spriteBatch);
					pixelShader.CurrentTechnique.Passes[0].Apply();
				}
			}
			if (drawPlayer.head == 23)
			{
				Microsoft.Xna.Framework.Rectangle bodyFrame4 = drawPlayer.bodyFrame;
				bodyFrame4.Y -= 336;
				if (bodyFrame4.Y < 0)
				{
					bodyFrame4.Y = 0;
				}
				DrawData value3;
				if (!drawPlayer.invis)
				{
					value3 = new DrawData(playerHairTexture[drawPlayer.hair], new Vector2(drawPlayer.position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, bodyFrame4, color3, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
					GameShaders.Hair.Apply(num, drawPlayer, value3);
					value3.Draw(spriteBatch);
					pixelShader.CurrentTechnique.Passes[0].Apply();
				}
				value3 = new DrawData(armorHeadTexture[drawPlayer.head], new Vector2(drawPlayer.position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, drawPlayer.bodyFrame, color5, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
				GameShaders.Armor.Apply(shaderId, drawPlayer, value3);
				value3.Draw(spriteBatch);
				pixelShader.CurrentTechnique.Passes[0].Apply();
			}
			else if (drawPlayer.head == 14 || drawPlayer.head == 56 || drawPlayer.head == 158)
			{
				Microsoft.Xna.Framework.Rectangle bodyFrame5 = drawPlayer.bodyFrame;
				if (drawPlayer.head == 158)
				{
					bodyFrame5.Height -= 2;
				}
				int num4 = 0;
				if (bodyFrame5.Y == bodyFrame5.Height * 6)
				{
					bodyFrame5.Height -= 2;
				}
				else if (bodyFrame5.Y == bodyFrame5.Height * 7)
				{
					num4 = -2;
				}
				else if (bodyFrame5.Y == bodyFrame5.Height * 8)
				{
					num4 = -2;
				}
				else if (bodyFrame5.Y == bodyFrame5.Height * 9)
				{
					num4 = -2;
				}
				else if (bodyFrame5.Y == bodyFrame5.Height * 10)
				{
					num4 = -2;
				}
				else if (bodyFrame5.Y == bodyFrame5.Height * 13)
				{
					bodyFrame5.Height -= 2;
				}
				else if (bodyFrame5.Y == bodyFrame5.Height * 14)
				{
					num4 = -2;
				}
				else if (bodyFrame5.Y == bodyFrame5.Height * 15)
				{
					num4 = -2;
				}
				else if (bodyFrame5.Y == bodyFrame5.Height * 16)
				{
					num4 = -2;
				}
				bodyFrame5.Y += num4;
				DrawData value4 = new DrawData(armorHeadTexture[drawPlayer.head], new Vector2(drawPlayer.position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f + (float)num4) + drawPlayer.headPosition + vector, bodyFrame5, color5, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
				GameShaders.Armor.Apply(shaderId, drawPlayer, value4);
				value4.Draw(spriteBatch);
				pixelShader.CurrentTechnique.Passes[0].Apply();
			}
			else if (drawPlayer.head > 0 && drawPlayer.head < 194 && drawPlayer.head != 28)
			{
				DrawData value5 = new DrawData(armorHeadTexture[drawPlayer.head], new Vector2(drawPlayer.position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, drawPlayer.bodyFrame, color5, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
				GameShaders.Armor.Apply(shaderId, drawPlayer, value5);
				value5.Draw(spriteBatch);
				pixelShader.CurrentTechnique.Passes[0].Apply();
			}
			else
			{
				Microsoft.Xna.Framework.Rectangle bodyFrame6 = drawPlayer.bodyFrame;
				bodyFrame6.Y -= 336;
				if (bodyFrame6.Y < 0)
				{
					bodyFrame6.Y = 0;
				}
				DrawData value6 = new DrawData(playerHairTexture[drawPlayer.hair], new Vector2(drawPlayer.position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, bodyFrame6, color3, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
				GameShaders.Hair.Apply(num, drawPlayer, value6);
				value6.Draw(spriteBatch);
				pixelShader.CurrentTechnique.Passes[0].Apply();
			}
			if (drawPlayer.face > 0 && drawPlayer.face < 9)
			{
				DrawData value7 = (drawPlayer.face == 7) ? new DrawData(accFaceTexture[drawPlayer.face], new Vector2((int)(drawPlayer.position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(drawPlayer.position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.headPosition + vector, drawPlayer.bodyFrame, new Microsoft.Xna.Framework.Color(200, 200, 200, 150), drawPlayer.headRotation, vector, Scale, spriteEffects, 0) : new DrawData(accFaceTexture[drawPlayer.face], new Vector2((int)(drawPlayer.position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(drawPlayer.position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.headPosition + vector, drawPlayer.bodyFrame, color5, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
				GameShaders.Armor.Apply(shaderId, drawPlayer, value7);
				value7.Draw(spriteBatch);
				pixelShader.CurrentTechnique.Passes[0].Apply();
			}
			drawPlayer.position = position;
			drawPlayer.bodyFrame.Y = bodyFrame.Y;
		}

		protected void DrawPlayerStoned(Player drawPlayer, Vector2 Position)
		{
			if (!drawPlayer.dead)
			{
				SpriteEffects spriteEffects = SpriteEffects.None;
				spriteEffects = ((drawPlayer.direction != 1) ? SpriteEffects.FlipHorizontally : SpriteEffects.None);
				spriteBatch.Draw(extraTexture[37], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 8f)) + drawPlayer.bodyPosition + new Vector2(drawPlayer.bodyFrame.Width / 2, drawPlayer.bodyFrame.Height / 2), null, Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)Position.Y + (double)drawPlayer.height * 0.5) / 16, Microsoft.Xna.Framework.Color.White), 0f, new Vector2(extraTexture[37].Width / 2, extraTexture[37].Height / 2), 1f, spriteEffects, 0f);
			}
		}

		public void DrawPlayer(Player drawPlayer, Vector2 Position, float rotation, Vector2 rotationOrigin, float shadow = 0f)
		{
			DrawData value = default(DrawData);
			int num = -1;
			playerDrawData.Clear();
			playerDrawDust.Clear();
			playerDrawGore.Clear();
			Vector2 value2 = Position + (drawPlayer.itemLocation - drawPlayer.position);
			int num2 = 0;
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			int skinVariant = drawPlayer.skinVariant;
			if (drawPlayer.body == 77 || drawPlayer.body == 103 || drawPlayer.body == 41 || drawPlayer.body == 100 || drawPlayer.body == 10 || drawPlayer.body == 11 || drawPlayer.body == 12 || drawPlayer.body == 13 || drawPlayer.body == 14 || drawPlayer.body == 43 || drawPlayer.body == 15 || drawPlayer.body == 16 || drawPlayer.body == 20 || drawPlayer.body == 39 || drawPlayer.body == 50 || drawPlayer.body == 38 || drawPlayer.body == 40 || drawPlayer.body == 57 || drawPlayer.body == 44 || drawPlayer.body == 52 || drawPlayer.body == 53 || drawPlayer.body == 68 || drawPlayer.body == 81 || drawPlayer.body == 85 || drawPlayer.body == 88 || drawPlayer.body == 98 || drawPlayer.body == 86 || drawPlayer.body == 87 || drawPlayer.body == 99 || drawPlayer.body == 165 || drawPlayer.body == 166 || drawPlayer.body == 167 || drawPlayer.body == 171 || drawPlayer.body == 45 || drawPlayer.body == 168 || drawPlayer.body == 169 || drawPlayer.body == 42 || drawPlayer.body == 180 || drawPlayer.body == 181 || drawPlayer.body == 183 || drawPlayer.body == 186 || drawPlayer.body == 187 || drawPlayer.body == 188 || drawPlayer.body == 64 || drawPlayer.body == 189 || drawPlayer.body == 191 || drawPlayer.body == 192)
			{
				flag = true;
			}
			if (drawPlayer.body == 99 || drawPlayer.body == 98 || drawPlayer.body == 100 || drawPlayer.body == 167 || drawPlayer.body == 171 || drawPlayer.body == 183 || drawPlayer.body == 191 || drawPlayer.body == 192)
			{
				flag2 = true;
			}
			if (drawPlayer.heldProj >= 0 && shadow == 0f)
			{
				int type = projectile[drawPlayer.heldProj].type;
				if (type == 460 || type == 535 || type == 600)
				{
					flag3 = true;
				}
			}
			bool flag4 = false;
			if (drawPlayer.head == 10 || drawPlayer.head == 12 || drawPlayer.head == 28 || drawPlayer.head == 62 || drawPlayer.head == 97 || drawPlayer.head == 106 || drawPlayer.head == 113 || drawPlayer.head == 116 || drawPlayer.head == 119 || drawPlayer.head == 133 || drawPlayer.head == 138 || drawPlayer.head == 139 || drawPlayer.head == 163 || drawPlayer.head == 178 || drawPlayer.head == 181 || drawPlayer.head == 191)
			{
				flag4 = true;
			}
			bool flag5 = false;
			if (drawPlayer.head == 161 || drawPlayer.head == 14 || drawPlayer.head == 15 || drawPlayer.head == 16 || drawPlayer.head == 18 || drawPlayer.head == 21 || drawPlayer.head == 24 || drawPlayer.head == 25 || drawPlayer.head == 26 || drawPlayer.head == 40 || drawPlayer.head == 44 || drawPlayer.head == 51 || drawPlayer.head == 56 || drawPlayer.head == 59 || drawPlayer.head == 60 || drawPlayer.head == 67 || drawPlayer.head == 68 || drawPlayer.head == 69 || drawPlayer.head == 114 || drawPlayer.head == 121 || drawPlayer.head == 126 || drawPlayer.head == 130 || drawPlayer.head == 136 || drawPlayer.head == 140 || drawPlayer.head == 145 || drawPlayer.head == 158 || drawPlayer.head == 159 || drawPlayer.head == 184 || drawPlayer.head == 190 || drawPlayer.head == 92)
			{
				flag5 = true;
			}
			bool flag6 = false;
			if (drawPlayer.face == 4 || drawPlayer.face == 3 || drawPlayer.face == 2)
			{
				flag6 = true;
			}
			int num3 = drawPlayer.hairDye;
			if (drawPlayer.head == 0 && num3 == 0)
			{
				num3 = 1;
			}
			float num4 = drawPlayer.mount.PlayerOffset;
			Position.Y -= num4;
			int num5 = 0;
			if (drawPlayer.dye[0] != null)
			{
				num5 = drawPlayer.dye[0].dye;
			}
			int num6 = 0;
			if (drawPlayer.dye[1] != null)
			{
				num6 = drawPlayer.dye[1].dye;
			}
			int shader = 0;
			if (drawPlayer.dye[2] != null)
			{
				shader = drawPlayer.dye[2].dye;
			}
			if (drawPlayer.wearsRobe)
			{
				shader = num6;
			}
			int shader2 = 0;
			int shader3 = 0;
			int shader4 = 0;
			int shader5 = 0;
			int shader6 = 0;
			int shader7 = 0;
			int shader8 = 0;
			int shader9 = 0;
			int shader10 = 0;
			int shader11 = 0;
			int shader12 = 0;
			int shader13 = 0;
			for (int i = 0; i < 20; i++)
			{
				int num7 = i % 10;
				if (drawPlayer.dye[num7] != null && drawPlayer.armor[i].type > 0 && drawPlayer.armor[i].stack > 0 && (i / 10 >= 1 || !drawPlayer.hideVisual[num7] || drawPlayer.armor[i].wingSlot > 0 || drawPlayer.armor[i].type == 934))
				{
					if (drawPlayer.armor[i].handOnSlot > 0 && drawPlayer.armor[i].handOnSlot < 19)
					{
						shader2 = drawPlayer.dye[num7].dye;
					}
					if (drawPlayer.armor[i].handOffSlot > 0 && drawPlayer.armor[i].handOffSlot < 12)
					{
						shader3 = drawPlayer.dye[num7].dye;
					}
					if (drawPlayer.armor[i].backSlot > 0 && drawPlayer.armor[i].backSlot < 10)
					{
						shader4 = drawPlayer.dye[num7].dye;
					}
					if (drawPlayer.armor[i].frontSlot > 0 && drawPlayer.armor[i].frontSlot < 5)
					{
						shader5 = drawPlayer.dye[num7].dye;
					}
					if (drawPlayer.armor[i].shoeSlot > 0 && drawPlayer.armor[i].shoeSlot < 18)
					{
						shader6 = drawPlayer.dye[num7].dye;
					}
					if (drawPlayer.armor[i].waistSlot > 0 && drawPlayer.armor[i].waistSlot < 12)
					{
						shader7 = drawPlayer.dye[num7].dye;
					}
					if (drawPlayer.armor[i].shieldSlot > 0 && drawPlayer.armor[i].shieldSlot < 6)
					{
						shader8 = drawPlayer.dye[num7].dye;
					}
					if (drawPlayer.armor[i].neckSlot > 0 && drawPlayer.armor[i].neckSlot < 9)
					{
						shader9 = drawPlayer.dye[num7].dye;
					}
					if (drawPlayer.armor[i].faceSlot > 0 && drawPlayer.armor[i].faceSlot < 9)
					{
						shader10 = drawPlayer.dye[num7].dye;
					}
					if (drawPlayer.armor[i].balloonSlot > 0 && drawPlayer.armor[i].balloonSlot < 16)
					{
						shader11 = drawPlayer.dye[num7].dye;
					}
					if (drawPlayer.armor[i].wingSlot > 0 && drawPlayer.armor[i].wingSlot < 37)
					{
						shader12 = drawPlayer.dye[num7].dye;
					}
					if (drawPlayer.armor[i].type == 934)
					{
						shader13 = drawPlayer.dye[num7].dye;
					}
				}
			}
			if (drawPlayer.mount.Active)
			{
				Mount.currentShader = (drawPlayer.mount.Cart ? drawPlayer.cMinecart : drawPlayer.cMount);
			}
			else
			{
				Mount.currentShader = 0;
			}
			SpriteEffects spriteEffects = SpriteEffects.None;
			SpriteEffects spriteEffects2 = SpriteEffects.FlipHorizontally;
			Microsoft.Xna.Framework.Color color = drawPlayer.GetImmuneAlpha(drawPlayer.GetHairColor(), shadow);
			Microsoft.Xna.Framework.Color color2 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.25) / 16.0), Microsoft.Xna.Framework.Color.White), shadow);
			Microsoft.Xna.Framework.Color color3 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.25) / 16.0), drawPlayer.eyeColor), shadow);
			Microsoft.Xna.Framework.Color color4 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.25) / 16.0), drawPlayer.skinColor), shadow);
			Microsoft.Xna.Framework.Color color5 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0), drawPlayer.skinColor), shadow);
			Microsoft.Xna.Framework.Color color6 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.75) / 16.0), drawPlayer.skinColor), shadow);
			Microsoft.Xna.Framework.Color color7 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0), drawPlayer.shirtColor), shadow);
			Microsoft.Xna.Framework.Color color8 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0), drawPlayer.underShirtColor), shadow);
			Microsoft.Xna.Framework.Color color9 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.75) / 16.0), drawPlayer.pantsColor), shadow);
			Microsoft.Xna.Framework.Color color10 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.75) / 16.0), drawPlayer.shoeColor), shadow);
			Microsoft.Xna.Framework.Color color11 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)Position.Y + (double)drawPlayer.height * 0.25) / 16, Microsoft.Xna.Framework.Color.White), shadow);
			Microsoft.Xna.Framework.Color color12 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)Position.Y + (double)drawPlayer.height * 0.5) / 16, Microsoft.Xna.Framework.Color.White), shadow);
			Microsoft.Xna.Framework.Color color13 = color12;
			Microsoft.Xna.Framework.Color color14 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)Position.Y + (double)drawPlayer.height * 0.75) / 16, Microsoft.Xna.Framework.Color.White), shadow);
			Microsoft.Xna.Framework.Color color15 = new Microsoft.Xna.Framework.Color(255, 255, 255, 100);
			int num8 = 0;
			int num9 = 0;
			int num10 = 0;
			int num11 = 0;
			int num12 = -1;
			int num13 = -1;
			int num14 = -1;
			int num15 = -1;
			Microsoft.Xna.Framework.Color newColor = Microsoft.Xna.Framework.Color.Transparent;
			Microsoft.Xna.Framework.Color newColor2 = Microsoft.Xna.Framework.Color.Transparent;
			Microsoft.Xna.Framework.Color newColor3 = Microsoft.Xna.Framework.Color.Transparent;
			Microsoft.Xna.Framework.Color newColor4 = Microsoft.Xna.Framework.Color.Transparent;
			switch (drawPlayer.head)
			{
			case 169:
				num8++;
				break;
			case 170:
				num9++;
				break;
			case 171:
				num10++;
				break;
			case 189:
				num11++;
				break;
			}
			switch (drawPlayer.body)
			{
			case 175:
				num8++;
				break;
			case 176:
				num9++;
				break;
			case 177:
				num10++;
				break;
			case 190:
				num11++;
				break;
			}
			switch (drawPlayer.legs)
			{
			case 110:
				num8++;
				break;
			case 111:
				num9++;
				break;
			case 112:
				num10++;
				break;
			case 130:
				num11++;
				break;
			}
			if (drawPlayer.head == 169)
			{
				num12 = 15;
				byte b = (byte)(62.5f * (float)(1 + num8));
				newColor = new Microsoft.Xna.Framework.Color(b, b, b, 0);
			}
			else if (drawPlayer.head == 170)
			{
				num12 = 16;
				byte b2 = (byte)(62.5f * (float)(1 + num9));
				newColor = new Microsoft.Xna.Framework.Color(b2, b2, b2, 0);
			}
			else if (drawPlayer.head == 189)
			{
				num12 = 184;
				byte b3 = (byte)(62.5f * (float)(1 + num11));
				newColor = new Microsoft.Xna.Framework.Color(b3, b3, b3, 0);
				color11 = drawPlayer.GetImmuneAlphaPure(new Microsoft.Xna.Framework.Color(b3, b3, b3, 255), shadow);
			}
			else if (drawPlayer.head == 171)
			{
				byte b4 = (byte)(62.5f * (float)(1 + num10));
				color11 = drawPlayer.GetImmuneAlphaPure(new Microsoft.Xna.Framework.Color(b4, b4, b4, 255), shadow);
			}
			else if (drawPlayer.head == 175)
			{
				num12 = 41;
				newColor = new Microsoft.Xna.Framework.Color(255, 255, 255, 0);
			}
			else if (drawPlayer.head == 193)
			{
				num12 = 209;
				newColor = new Microsoft.Xna.Framework.Color(255, 255, 255, 127);
			}
			else if (drawPlayer.head == 109)
			{
				num12 = 208;
				newColor = new Microsoft.Xna.Framework.Color(255, 255, 255, 0);
			}
			else if (drawPlayer.head == 178)
			{
				num12 = 96;
				newColor = new Microsoft.Xna.Framework.Color(255, 255, 255, 0);
			}
			if (drawPlayer.body == 175)
			{
				num13 = ((!drawPlayer.Male) ? 18 : 13);
				byte b5 = (byte)(62.5f * (float)(1 + num8));
				newColor2 = new Microsoft.Xna.Framework.Color(b5, b5, b5, 0);
			}
			else if (drawPlayer.body == 190)
			{
				num13 = ((!drawPlayer.Male) ? 186 : 185);
				num14 = 188;
				byte b6 = (byte)(62.5f * (float)(1 + num11));
				newColor2 = new Microsoft.Xna.Framework.Color(b6, b6, b6, 0);
				newColor3 = new Microsoft.Xna.Framework.Color(b6, b6, b6, 0);
				color12 = drawPlayer.GetImmuneAlphaPure(new Microsoft.Xna.Framework.Color(b6, b6, b6, 255), shadow);
			}
			else if (drawPlayer.body == 176)
			{
				num13 = ((!drawPlayer.Male) ? 19 : 14);
				num14 = 12;
				byte b7 = (byte)(62.5f * (float)(1 + num9));
				newColor2 = new Microsoft.Xna.Framework.Color(b7, b7, b7, 0);
				newColor3 = new Microsoft.Xna.Framework.Color(b7, b7, b7, 0);
			}
			else if (drawPlayer.body == 194)
			{
				num13 = 210;
				num14 = 211;
				newColor2 = new Microsoft.Xna.Framework.Color(255, 255, 255, 127);
				newColor3 = new Microsoft.Xna.Framework.Color(255, 255, 255, 127);
			}
			else if (drawPlayer.body == 177)
			{
				byte b8 = (byte)(62.5f * (float)(1 + num10));
				color12 = drawPlayer.GetImmuneAlphaPure(new Microsoft.Xna.Framework.Color(b8, b8, b8, 255), shadow);
			}
			else if (drawPlayer.body == 179)
			{
				num13 = ((!drawPlayer.Male) ? 43 : 42);
				num14 = 44;
				newColor2 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0);
				newColor3 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0);
			}
			if (drawPlayer.legs == 111)
			{
				num15 = 17;
				byte b9 = (byte)(62.5f * (float)(1 + num9));
				newColor4 = new Microsoft.Xna.Framework.Color(b9, b9, b9, 0);
			}
			else if (drawPlayer.legs == 110)
			{
				num15 = 199;
				byte b10 = (byte)(62.5f * (float)(1 + num8));
				newColor4 = new Microsoft.Xna.Framework.Color(b10, b10, b10, 0);
			}
			else if (drawPlayer.legs == 112)
			{
				byte b11 = (byte)(62.5f * (float)(1 + num10));
				color14 = drawPlayer.GetImmuneAlphaPure(new Microsoft.Xna.Framework.Color(b11, b11, b11, 255), shadow);
			}
			else if (drawPlayer.legs == 134)
			{
				num15 = 212;
				newColor4 = new Microsoft.Xna.Framework.Color(255, 255, 255, 127);
			}
			else if (drawPlayer.legs == 130)
			{
				byte b12 = (byte)(127 * (1 + num11));
				num15 = 187;
				newColor4 = new Microsoft.Xna.Framework.Color(b12, b12, b12, 0);
				color14 = drawPlayer.GetImmuneAlphaPure(new Microsoft.Xna.Framework.Color(b12, b12, b12, 255), shadow);
			}
			newColor = drawPlayer.GetImmuneAlphaPure(newColor, shadow);
			newColor2 = drawPlayer.GetImmuneAlphaPure(newColor2, shadow);
			newColor3 = drawPlayer.GetImmuneAlphaPure(newColor3, shadow);
			newColor4 = drawPlayer.GetImmuneAlphaPure(newColor4, shadow);
			if (drawPlayer.head > 0 && drawPlayer.head < 194)
			{
				LoadArmorHead(drawPlayer.head);
			}
			if (drawPlayer.body > 0 && drawPlayer.body < 195)
			{
				LoadArmorBody(drawPlayer.body);
			}
			if (drawPlayer.legs > 0 && drawPlayer.legs < 135)
			{
				LoadArmorLegs(drawPlayer.legs);
			}
			if (drawPlayer.handon > 0 && drawPlayer.handon < 19)
			{
				LoadAccHandsOn(drawPlayer.handon);
			}
			if (drawPlayer.handoff > 0 && drawPlayer.handoff < 12)
			{
				LoadAccHandsOff(drawPlayer.handoff);
			}
			if (drawPlayer.back > 0 && drawPlayer.back < 10)
			{
				LoadAccBack(drawPlayer.back);
			}
			if (drawPlayer.front > 0 && drawPlayer.front < 5)
			{
				LoadAccFront(drawPlayer.front);
			}
			if (drawPlayer.shoe > 0 && drawPlayer.shoe < 18)
			{
				LoadAccShoes(drawPlayer.shoe);
			}
			if (drawPlayer.waist > 0 && drawPlayer.waist < 12)
			{
				LoadAccWaist(drawPlayer.waist);
			}
			if (drawPlayer.shield > 0 && drawPlayer.shield < 6)
			{
				LoadAccShield(drawPlayer.shield);
			}
			if (drawPlayer.neck > 0 && drawPlayer.neck < 9)
			{
				LoadAccNeck(drawPlayer.neck);
			}
			if (drawPlayer.face > 0 && drawPlayer.face < 9)
			{
				LoadAccFace(drawPlayer.face);
			}
			if (drawPlayer.balloon > 0 && drawPlayer.balloon < 16)
			{
				LoadAccBalloon(drawPlayer.balloon);
			}
			LoadHair(drawPlayer.hair);
			if ((drawPlayer.head == 78 || drawPlayer.head == 79 || drawPlayer.head == 80) && drawPlayer.body == 51 && drawPlayer.legs == 47)
			{
				float num16 = (float)(int)mouseTextColor / 200f - 0.3f;
				if (shadow != 0f)
				{
					num16 = 0f;
				}
				color11.R = (byte)((float)(int)color11.R * num16);
				color11.G = (byte)((float)(int)color11.G * num16);
				color11.B = (byte)((float)(int)color11.B * num16);
				color12.R = (byte)((float)(int)color12.R * num16);
				color12.G = (byte)((float)(int)color12.G * num16);
				color12.B = (byte)((float)(int)color12.B * num16);
				color14.R = (byte)((float)(int)color14.R * num16);
				color14.G = (byte)((float)(int)color14.G * num16);
				color14.B = (byte)((float)(int)color14.B * num16);
			}
			if (drawPlayer.head == 193 && drawPlayer.body == 194 && drawPlayer.legs == 134)
			{
				float num17 = 0.6f - drawPlayer.ghostFade * 0.3f;
				if (shadow != 0f)
				{
					num17 = 0f;
				}
				color11.R = (byte)((float)(int)color11.R * num17);
				color11.G = (byte)((float)(int)color11.G * num17);
				color11.B = (byte)((float)(int)color11.B * num17);
				color12.R = (byte)((float)(int)color12.R * num17);
				color12.G = (byte)((float)(int)color12.G * num17);
				color12.B = (byte)((float)(int)color12.B * num17);
				color14.R = (byte)((float)(int)color14.R * num17);
				color14.G = (byte)((float)(int)color14.G * num17);
				color14.B = (byte)((float)(int)color14.B * num17);
			}
			if (shadow > 0f)
			{
				color6 = Microsoft.Xna.Framework.Color.Transparent;
				color5 = Microsoft.Xna.Framework.Color.Transparent;
				color4 = Microsoft.Xna.Framework.Color.Transparent;
				color = Microsoft.Xna.Framework.Color.Transparent;
				color3 = Microsoft.Xna.Framework.Color.Transparent;
				color2 = Microsoft.Xna.Framework.Color.Transparent;
			}
			float num18 = 1f;
			float num19 = 1f;
			float num20 = 1f;
			float num21 = 1f;
			if (drawPlayer.honey && rand.Next(30) == 0 && shadow == 0f)
			{
				int num22 = Dust.NewDust(Position, drawPlayer.width, drawPlayer.height, 152, 0f, 0f, 150);
				dust[num22].velocity.Y = 0.3f;
				dust[num22].velocity.X *= 0.1f;
				dust[num22].scale += (float)rand.Next(3, 4) * 0.1f;
				dust[num22].alpha = 100;
				dust[num22].noGravity = true;
				dust[num22].velocity += drawPlayer.velocity * 0.1f;
				playerDrawDust.Add(num22);
			}
			if (drawPlayer.dryadWard && drawPlayer.velocity.X != 0f && rand.Next(4) == 0)
			{
				int num23 = Dust.NewDust(new Vector2(drawPlayer.position.X - 2f, drawPlayer.position.Y + (float)drawPlayer.height - 2f), drawPlayer.width + 4, 4, 163, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1.5f);
				dust[num23].noGravity = true;
				dust[num23].noLight = true;
				dust[num23].velocity *= 0f;
			}
			if (drawPlayer.poisoned)
			{
				if (rand.Next(50) == 0 && shadow == 0f)
				{
					int num24 = Dust.NewDust(Position, drawPlayer.width, drawPlayer.height, 46, 0f, 0f, 150, default(Microsoft.Xna.Framework.Color), 0.2f);
					dust[num24].noGravity = true;
					dust[num24].fadeIn = 1.9f;
					playerDrawDust.Add(num24);
				}
				num18 *= 0.65f;
				num20 *= 0.75f;
			}
			if (drawPlayer.venom)
			{
				if (rand.Next(10) == 0 && shadow == 0f)
				{
					int num25 = Dust.NewDust(Position, drawPlayer.width, drawPlayer.height, 171, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 0.5f);
					dust[num25].noGravity = true;
					dust[num25].fadeIn = 1.5f;
					playerDrawDust.Add(num25);
				}
				num19 *= 0.45f;
				num18 *= 0.75f;
			}
			if (drawPlayer.onFire)
			{
				if (rand.Next(4) == 0 && shadow == 0f)
				{
					int num26 = Dust.NewDust(new Vector2(Position.X - 2f, Position.Y - 2f), drawPlayer.width + 4, drawPlayer.height + 4, 6, drawPlayer.velocity.X * 0.4f, drawPlayer.velocity.Y * 0.4f, 100, default(Microsoft.Xna.Framework.Color), 3f);
					dust[num26].noGravity = true;
					dust[num26].velocity *= 1.8f;
					dust[num26].velocity.Y -= 0.5f;
					playerDrawDust.Add(num26);
				}
				num20 *= 0.6f;
				num19 *= 0.7f;
			}
			if (drawPlayer.dripping && shadow == 0f && rand.Next(4) != 0)
			{
				Vector2 position = Position;
				position.X -= 2f;
				position.Y -= 2f;
				if (rand.Next(2) == 0)
				{
					int num27 = Dust.NewDust(position, drawPlayer.width + 4, drawPlayer.height + 2, 211, 0f, 0f, 50, default(Microsoft.Xna.Framework.Color), 0.8f);
					if (rand.Next(2) == 0)
					{
						dust[num27].alpha += 25;
					}
					if (rand.Next(2) == 0)
					{
						dust[num27].alpha += 25;
					}
					dust[num27].noLight = true;
					dust[num27].velocity *= 0.2f;
					dust[num27].velocity.Y += 0.2f;
					dust[num27].velocity += drawPlayer.velocity;
					playerDrawDust.Add(num27);
				}
				else
				{
					int num28 = Dust.NewDust(position, drawPlayer.width + 8, drawPlayer.height + 8, 211, 0f, 0f, 50, default(Microsoft.Xna.Framework.Color), 1.1f);
					if (rand.Next(2) == 0)
					{
						dust[num28].alpha += 25;
					}
					if (rand.Next(2) == 0)
					{
						dust[num28].alpha += 25;
					}
					dust[num28].noLight = true;
					dust[num28].noGravity = true;
					dust[num28].velocity *= 0.2f;
					dust[num28].velocity.Y += 1f;
					dust[num28].velocity += drawPlayer.velocity;
					playerDrawDust.Add(num28);
				}
			}
			if (drawPlayer.drippingSlime)
			{
				int alpha = 175;
				Microsoft.Xna.Framework.Color newColor5 = new Microsoft.Xna.Framework.Color(0, 80, 255, 100);
				if (rand.Next(4) != 0 && shadow == 0f)
				{
					Vector2 position2 = Position;
					position2.X -= 2f;
					position2.Y -= 2f;
					if (rand.Next(2) == 0)
					{
						int num29 = Dust.NewDust(position2, drawPlayer.width + 4, drawPlayer.height + 2, 4, 0f, 0f, alpha, newColor5, 1.4f);
						if (rand.Next(2) == 0)
						{
							dust[num29].alpha += 25;
						}
						if (rand.Next(2) == 0)
						{
							dust[num29].alpha += 25;
						}
						dust[num29].noLight = true;
						dust[num29].velocity *= 0.2f;
						dust[num29].velocity.Y += 0.2f;
						dust[num29].velocity += drawPlayer.velocity;
						playerDrawDust.Add(num29);
					}
				}
				num18 *= 0.8f;
				num19 *= 0.8f;
			}
			if (drawPlayer.ichor)
			{
				num20 = 0f;
			}
			if (drawPlayer.electrified && shadow == 0f && rand.Next(3) == 0)
			{
				int num30 = Dust.NewDust(new Vector2(Position.X - 2f, Position.Y - 2f), drawPlayer.width + 4, drawPlayer.height + 4, 226, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 0.5f);
				dust[num30].velocity *= 1.6f;
				dust[num30].velocity.Y -= 1f;
				dust[num30].position = Vector2.Lerp(dust[num30].position, drawPlayer.Center, 0.5f);
				playerDrawDust.Add(num30);
			}
			if (drawPlayer.burned)
			{
				if (shadow == 0f)
				{
					int num31 = Dust.NewDust(new Vector2(Position.X - 2f, Position.Y - 2f), drawPlayer.width + 4, drawPlayer.height + 4, 6, drawPlayer.velocity.X * 0.4f, drawPlayer.velocity.Y * 0.4f, 100, default(Microsoft.Xna.Framework.Color), 2f);
					dust[num31].noGravity = true;
					dust[num31].velocity *= 1.8f;
					dust[num31].velocity.Y -= 0.75f;
					playerDrawDust.Add(num31);
				}
				num18 = 1f;
				num20 *= 0.6f;
				num19 *= 0.7f;
			}
			if (drawPlayer.onFrostBurn)
			{
				if (rand.Next(4) == 0 && shadow == 0f)
				{
					int num32 = Dust.NewDust(new Vector2(Position.X - 2f, Position.Y - 2f), drawPlayer.width + 4, drawPlayer.height + 4, 135, drawPlayer.velocity.X * 0.4f, drawPlayer.velocity.Y * 0.4f, 100, default(Microsoft.Xna.Framework.Color), 3f);
					dust[num32].noGravity = true;
					dust[num32].velocity *= 1.8f;
					dust[num32].velocity.Y -= 0.5f;
					playerDrawDust.Add(num32);
				}
				num18 *= 0.5f;
				num19 *= 0.7f;
			}
			if (drawPlayer.onFire2)
			{
				if (rand.Next(4) == 0 && shadow == 0f)
				{
					int num33 = Dust.NewDust(new Vector2(Position.X - 2f, Position.Y - 2f), drawPlayer.width + 4, drawPlayer.height + 4, 75, drawPlayer.velocity.X * 0.4f, drawPlayer.velocity.Y * 0.4f, 100, default(Microsoft.Xna.Framework.Color), 3f);
					dust[num33].noGravity = true;
					dust[num33].velocity *= 1.8f;
					dust[num33].velocity.Y -= 0.5f;
					playerDrawDust.Add(num33);
				}
				num20 *= 0.6f;
				num19 *= 0.7f;
			}
			if (drawPlayer.noItems)
			{
				num19 *= 0.8f;
				num18 *= 0.65f;
			}
			if (drawPlayer.blind)
			{
				num19 *= 0.65f;
				num18 *= 0.7f;
			}
			if (drawPlayer.bleed)
			{
				num19 *= 0.9f;
				num20 *= 0.9f;
				if (!drawPlayer.dead && rand.Next(30) == 0 && shadow == 0f)
				{
					int num34 = Dust.NewDust(Position, drawPlayer.width, drawPlayer.height, 5);
					dust[num34].velocity.Y += 0.5f;
					dust[num34].velocity *= 0.25f;
					playerDrawDust.Add(num34);
				}
			}
			if (shadow == 0f && drawPlayer.palladiumRegen && drawPlayer.statLife < drawPlayer.statLifeMax2 && base.IsActive && !gamePaused && drawPlayer.miscCounter % 10 == 0 && shadow == 0f)
			{
				Vector2 position3 = default(Vector2);
				position3.X = Position.X + (float)rand.Next(drawPlayer.width);
				position3.Y = Position.Y + (float)rand.Next(drawPlayer.height);
				position3.X = Position.X + (float)(drawPlayer.width / 2) - 6f;
				position3.Y = Position.Y + (float)(drawPlayer.height / 2) - 6f;
				position3.X -= rand.Next(-10, 11);
				position3.Y -= rand.Next(-20, 21);
				int num35 = Gore.NewGore(position3, new Vector2((float)rand.Next(-10, 11) * 0.1f, (float)rand.Next(-20, -10) * 0.1f), 331, (float)rand.Next(80, 120) * 0.01f);
				playerDrawGore.Add(num35);
			}
			if (shadow == 0f && drawPlayer.loveStruck && base.IsActive && !gamePaused && rand.Next(5) == 0)
			{
				Vector2 value3 = new Vector2(rand.Next(-10, 11), rand.Next(-10, 11));
				value3.Normalize();
				value3.X *= 0.66f;
				int num36 = Gore.NewGore(Position + new Vector2(rand.Next(drawPlayer.width + 1), rand.Next(drawPlayer.height + 1)), value3 * rand.Next(3, 6) * 0.33f, 331, (float)rand.Next(40, 121) * 0.01f);
				gore[num36].sticky = false;
				gore[num36].velocity *= 0.4f;
				gore[num36].velocity.Y -= 0.6f;
				playerDrawGore.Add(num36);
			}
			if (drawPlayer.stinky && base.IsActive && !gamePaused)
			{
				num18 *= 0.7f;
				num20 *= 0.55f;
				if (rand.Next(5) == 0 && shadow == 0f)
				{
					Vector2 value4 = new Vector2(rand.Next(-10, 11), rand.Next(-10, 11));
					value4.Normalize();
					value4.X *= 0.66f;
					value4.Y = Math.Abs(value4.Y);
					Vector2 vector = value4 * rand.Next(3, 5) * 0.25f;
					int num37 = Dust.NewDust(Position, drawPlayer.width, drawPlayer.height, 188, vector.X, vector.Y * 0.5f, 100, default(Microsoft.Xna.Framework.Color), 1.5f);
					dust[num37].velocity *= 0.1f;
					dust[num37].velocity.Y -= 0.5f;
					playerDrawDust.Add(num37);
				}
			}
			if (base.IsActive && !gamePaused && shadow == 0f)
			{
				float num38 = (float)drawPlayer.miscCounter / 180f;
				float num39 = 0f;
				float scaleFactor = 10f;
				int type2 = 90;
				int num40 = 0;
				for (int j = 0; j < 3; j++)
				{
					switch (j)
					{
					case 0:
						if (drawPlayer.nebulaLevelLife < 1)
						{
							continue;
						}
						num39 = (float)Math.PI * 2f / (float)drawPlayer.nebulaLevelLife;
						num40 = drawPlayer.nebulaLevelLife;
						break;
					case 1:
						if (drawPlayer.nebulaLevelMana < 1)
						{
							continue;
						}
						num39 = (float)Math.PI * -2f / (float)drawPlayer.nebulaLevelMana;
						num40 = drawPlayer.nebulaLevelMana;
						num38 = (float)(-drawPlayer.miscCounter) / 180f;
						scaleFactor = 20f;
						type2 = 88;
						break;
					case 2:
						if (drawPlayer.nebulaLevelDamage < 1)
						{
							continue;
						}
						num39 = (float)Math.PI * 2f / (float)drawPlayer.nebulaLevelDamage;
						num40 = drawPlayer.nebulaLevelDamage;
						num38 = (float)drawPlayer.miscCounter / 180f;
						scaleFactor = 30f;
						type2 = 86;
						break;
					}
					for (int k = 0; k < num40; k++)
					{
						int num41 = Dust.NewDust(Position, drawPlayer.width, drawPlayer.height, type2, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1.5f);
						dust[num41].noGravity = true;
						dust[num41].velocity = Vector2.Zero;
						dust[num41].position = drawPlayer.Center + Vector2.UnitY * drawPlayer.gfxOffY + (num38 * ((float)Math.PI * 2f) + num39 * (float)k).ToRotationVector2() * scaleFactor;
						dust[num41].customData = drawPlayer;
						playerDrawDust.Add(num41);
					}
				}
			}
			if (num18 != 1f || num19 != 1f || num20 != 1f || num21 != 1f)
			{
				if (drawPlayer.onFire || drawPlayer.onFire2 || drawPlayer.onFrostBurn)
				{
					color2 = drawPlayer.GetImmuneAlpha(Microsoft.Xna.Framework.Color.White, shadow);
					color3 = drawPlayer.GetImmuneAlpha(drawPlayer.eyeColor, shadow);
					color = drawPlayer.GetImmuneAlpha(drawPlayer.GetHairColor(), shadow);
					color4 = drawPlayer.GetImmuneAlpha(drawPlayer.skinColor, shadow);
					color5 = drawPlayer.GetImmuneAlpha(drawPlayer.skinColor, shadow);
					color7 = drawPlayer.GetImmuneAlpha(drawPlayer.shirtColor, shadow);
					color8 = drawPlayer.GetImmuneAlpha(drawPlayer.underShirtColor, shadow);
					color9 = drawPlayer.GetImmuneAlpha(drawPlayer.pantsColor, shadow);
					color10 = drawPlayer.GetImmuneAlpha(drawPlayer.shoeColor, shadow);
					color11 = drawPlayer.GetImmuneAlpha(Microsoft.Xna.Framework.Color.White, shadow);
					color12 = drawPlayer.GetImmuneAlpha(Microsoft.Xna.Framework.Color.White, shadow);
					color14 = drawPlayer.GetImmuneAlpha(Microsoft.Xna.Framework.Color.White, shadow);
				}
				else
				{
					color2 = buffColor(color2, num18, num19, num20, num21);
					color3 = buffColor(color3, num18, num19, num20, num21);
					color = buffColor(color, num18, num19, num20, num21);
					color4 = buffColor(color4, num18, num19, num20, num21);
					color5 = buffColor(color5, num18, num19, num20, num21);
					color7 = buffColor(color7, num18, num19, num20, num21);
					color8 = buffColor(color8, num18, num19, num20, num21);
					color9 = buffColor(color9, num18, num19, num20, num21);
					color10 = buffColor(color10, num18, num19, num20, num21);
					color11 = buffColor(color11, num18, num19, num20, num21);
					color12 = buffColor(color12, num18, num19, num20, num21);
					color14 = buffColor(color14, num18, num19, num20, num21);
				}
			}
			if (drawPlayer.socialGhost)
			{
				color2 = Microsoft.Xna.Framework.Color.Transparent;
				color3 = Microsoft.Xna.Framework.Color.Transparent;
				color = Microsoft.Xna.Framework.Color.Transparent;
				color4 = Microsoft.Xna.Framework.Color.Transparent;
				color5 = Microsoft.Xna.Framework.Color.Transparent;
				color7 = Microsoft.Xna.Framework.Color.Transparent;
				color8 = Microsoft.Xna.Framework.Color.Transparent;
				color9 = Microsoft.Xna.Framework.Color.Transparent;
				color10 = Microsoft.Xna.Framework.Color.Transparent;
				color6 = Microsoft.Xna.Framework.Color.Transparent;
				if (color11.A > gFade)
				{
					color11.A = gFade;
				}
				if (color12.A > gFade)
				{
					color12.A = gFade;
				}
				if (color14.A > gFade)
				{
					color14.A = gFade;
				}
			}
			float num42 = 1f;
			if (drawPlayer.inventory[drawPlayer.selectedItem].type == 3106)
			{
				float num43 = drawPlayer.stealth;
				if ((double)num43 < 0.03)
				{
					num43 = 0.03f;
				}
				float num44 = (1f + num43 * 10f) / 11f;
				if (num43 < 0f)
				{
					num43 = 0f;
				}
				if (!(num43 < 1f - shadow) && shadow > 0f)
				{
					num43 = shadow * 0.5f;
				}
				num42 = num44;
				color11 = new Microsoft.Xna.Framework.Color((byte)((float)(int)color11.R * num43), (byte)((float)(int)color11.G * num43), (byte)((float)(int)color11.B * num44), (byte)((float)(int)color11.A * num43));
				color12 = new Microsoft.Xna.Framework.Color((byte)((float)(int)color12.R * num43), (byte)((float)(int)color12.G * num43), (byte)((float)(int)color12.B * num44), (byte)((float)(int)color12.A * num43));
				color14 = new Microsoft.Xna.Framework.Color((byte)((float)(int)color14.R * num43), (byte)((float)(int)color14.G * num43), (byte)((float)(int)color14.B * num44), (byte)((float)(int)color14.A * num43));
				num43 *= num43;
				color2 = Microsoft.Xna.Framework.Color.Multiply(color2, num43);
				color3 = Microsoft.Xna.Framework.Color.Multiply(color3, num43);
				color = Microsoft.Xna.Framework.Color.Multiply(color, num43);
				color4 = Microsoft.Xna.Framework.Color.Multiply(color4, num43);
				color5 = Microsoft.Xna.Framework.Color.Multiply(color5, num43);
				color7 = Microsoft.Xna.Framework.Color.Multiply(color7, num43);
				color8 = Microsoft.Xna.Framework.Color.Multiply(color8, num43);
				color9 = Microsoft.Xna.Framework.Color.Multiply(color9, num43);
				color10 = Microsoft.Xna.Framework.Color.Multiply(color10, num43);
				color6 = Microsoft.Xna.Framework.Color.Multiply(color6, num43);
				color13 = Microsoft.Xna.Framework.Color.Multiply(color13, num43);
				newColor = Microsoft.Xna.Framework.Color.Multiply(newColor, num43);
				newColor2 = Microsoft.Xna.Framework.Color.Multiply(newColor2, num43);
				newColor3 = Microsoft.Xna.Framework.Color.Multiply(newColor3, num43);
				newColor4 = Microsoft.Xna.Framework.Color.Multiply(newColor4, num43);
			}
			else if (drawPlayer.shroomiteStealth)
			{
				float num45 = drawPlayer.stealth;
				if ((double)num45 < 0.03)
				{
					num45 = 0.03f;
				}
				float num46 = (1f + num45 * 10f) / 11f;
				if (num45 < 0f)
				{
					num45 = 0f;
				}
				if (!(num45 < 1f - shadow) && shadow > 0f)
				{
					num45 = shadow * 0.5f;
				}
				num42 = num46;
				color11 = new Microsoft.Xna.Framework.Color((byte)((float)(int)color11.R * num45), (byte)((float)(int)color11.G * num45), (byte)((float)(int)color11.B * num46), (byte)((float)(int)color11.A * num45));
				color12 = new Microsoft.Xna.Framework.Color((byte)((float)(int)color12.R * num45), (byte)((float)(int)color12.G * num45), (byte)((float)(int)color12.B * num46), (byte)((float)(int)color12.A * num45));
				color14 = new Microsoft.Xna.Framework.Color((byte)((float)(int)color14.R * num45), (byte)((float)(int)color14.G * num45), (byte)((float)(int)color14.B * num46), (byte)((float)(int)color14.A * num45));
				num45 *= num45;
				color2 = Microsoft.Xna.Framework.Color.Multiply(color2, num45);
				color3 = Microsoft.Xna.Framework.Color.Multiply(color3, num45);
				color = Microsoft.Xna.Framework.Color.Multiply(color, num45);
				color4 = Microsoft.Xna.Framework.Color.Multiply(color4, num45);
				color5 = Microsoft.Xna.Framework.Color.Multiply(color5, num45);
				color7 = Microsoft.Xna.Framework.Color.Multiply(color7, num45);
				color8 = Microsoft.Xna.Framework.Color.Multiply(color8, num45);
				color9 = Microsoft.Xna.Framework.Color.Multiply(color9, num45);
				color10 = Microsoft.Xna.Framework.Color.Multiply(color10, num45);
				color6 = Microsoft.Xna.Framework.Color.Multiply(color6, num45);
				color13 = Microsoft.Xna.Framework.Color.Multiply(color13, num45);
				newColor = Microsoft.Xna.Framework.Color.Multiply(newColor, num45);
				newColor2 = Microsoft.Xna.Framework.Color.Multiply(newColor2, num45);
				newColor3 = Microsoft.Xna.Framework.Color.Multiply(newColor3, num45);
				newColor4 = Microsoft.Xna.Framework.Color.Multiply(newColor4, num45);
			}
			else if (drawPlayer.setVortex)
			{
				float num47 = drawPlayer.stealth;
				if ((double)num47 < 0.03)
				{
					num47 = 0.03f;
				}
				if (num47 < 0f)
				{
					num47 = 0f;
				}
				if (!(num47 < 1f - shadow) && shadow > 0f)
				{
					num47 = shadow * 0.5f;
				}
				num42 = num47;
				Microsoft.Xna.Framework.Color secondColor = new Microsoft.Xna.Framework.Color(Vector4.Lerp(Vector4.One, new Vector4(0f, 0.12f, 0.16f, 0f), 1f - num47));
				color11 = color11.MultiplyRGBA(secondColor);
				color12 = color12.MultiplyRGBA(secondColor);
				color14 = color14.MultiplyRGBA(secondColor);
				num47 *= num47;
				color2 = Microsoft.Xna.Framework.Color.Multiply(color2, num47);
				color3 = Microsoft.Xna.Framework.Color.Multiply(color3, num47);
				color = Microsoft.Xna.Framework.Color.Multiply(color, num47);
				color4 = Microsoft.Xna.Framework.Color.Multiply(color4, num47);
				color5 = Microsoft.Xna.Framework.Color.Multiply(color5, num47);
				color7 = Microsoft.Xna.Framework.Color.Multiply(color7, num47);
				color8 = Microsoft.Xna.Framework.Color.Multiply(color8, num47);
				color9 = Microsoft.Xna.Framework.Color.Multiply(color9, num47);
				color10 = Microsoft.Xna.Framework.Color.Multiply(color10, num47);
				color6 = Microsoft.Xna.Framework.Color.Multiply(color6, num47);
				color13 = Microsoft.Xna.Framework.Color.Multiply(color13, num47);
				newColor = Microsoft.Xna.Framework.Color.Multiply(newColor, num47);
				newColor2 = Microsoft.Xna.Framework.Color.Multiply(newColor2, num47);
				newColor3 = Microsoft.Xna.Framework.Color.Multiply(newColor3, num47);
				newColor4 = Microsoft.Xna.Framework.Color.Multiply(newColor4, num47);
			}
			if (drawPlayer.gravDir == 1f)
			{
				if (drawPlayer.direction == 1)
				{
					spriteEffects = SpriteEffects.None;
					spriteEffects2 = SpriteEffects.None;
				}
				else
				{
					spriteEffects = SpriteEffects.FlipHorizontally;
					spriteEffects2 = SpriteEffects.FlipHorizontally;
				}
				if (!drawPlayer.dead)
				{
					drawPlayer.legPosition.Y = 0f;
					drawPlayer.headPosition.Y = 0f;
					drawPlayer.bodyPosition.Y = 0f;
				}
			}
			else
			{
				if (drawPlayer.direction == 1)
				{
					spriteEffects = SpriteEffects.FlipVertically;
					spriteEffects2 = SpriteEffects.FlipVertically;
				}
				else
				{
					spriteEffects = (SpriteEffects.FlipHorizontally | SpriteEffects.FlipVertically);
					spriteEffects2 = (SpriteEffects.FlipHorizontally | SpriteEffects.FlipVertically);
				}
				if (!drawPlayer.dead)
				{
					drawPlayer.legPosition.Y = 6f;
					drawPlayer.headPosition.Y = 6f;
					drawPlayer.bodyPosition.Y = 6f;
				}
			}
			Vector2 vector2 = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.75f);
			Vector2 origin = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.5f);
			Vector2 vector3 = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.4f);
			if ((drawPlayer.merman || drawPlayer.forceMerman) && !drawPlayer.hideMerman)
			{
				drawPlayer.headRotation = drawPlayer.velocity.Y * (float)drawPlayer.direction * 0.1f;
				if ((double)drawPlayer.headRotation < -0.3)
				{
					drawPlayer.headRotation = -0.3f;
				}
				if ((double)drawPlayer.headRotation > 0.3)
				{
					drawPlayer.headRotation = 0.3f;
				}
			}
			else if (!drawPlayer.dead)
			{
				drawPlayer.headRotation = 0f;
			}
			Microsoft.Xna.Framework.Rectangle bodyFrame = drawPlayer.bodyFrame;
			bodyFrame.Y -= 336;
			if (bodyFrame.Y < 0)
			{
				bodyFrame.Y = 0;
			}
			int height = 26;
			int hair = drawPlayer.hair;
			bool flag7 = hair > 50 && (hair < 56 || hair > 63) && (hair < 74 || hair > 77) && (hair < 88 || hair > 89) && hair != 94 && hair != 100 && hair != 104 && hair != 112 && hair < 116;
			if (hair == 133)
			{
				flag7 = true;
			}
			if (flag6)
			{
				bodyFrame.Height = 0;
			}
			else if (flag7)
			{
				if (drawPlayer.head == -1 || flag4 || drawPlayer.head == 23 || drawPlayer.head == 0)
				{
					value = new DrawData(playerHairTexture[drawPlayer.hair], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.headPosition + vector3, bodyFrame, color, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
					value.shader = -num3;
					playerDrawData.Add(value);
				}
				else if (flag5)
				{
					value = new DrawData(playerHairAltTexture[drawPlayer.hair], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.headPosition + vector3, bodyFrame, color, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
					value.shader = -num3;
					playerDrawData.Add(value);
				}
				if (drawPlayer.gravDir == 1f)
				{
					bodyFrame.Height = height;
				}
			}
			if (drawPlayer.mount.Active)
			{
				drawPlayer.mount.Draw(playerDrawData, 0, drawPlayer, Position, color13, spriteEffects, shadow);
				drawPlayer.mount.Draw(playerDrawData, 1, drawPlayer, Position, color13, spriteEffects, shadow);
			}
			if (drawPlayer.carpetFrame >= 0)
			{
				Microsoft.Xna.Framework.Color color16 = color14;
				float num48 = 0f;
				if (drawPlayer.gravDir == -1f)
				{
					num48 = 10f;
				}
				value = new DrawData(flyingCarpetTexture, new Vector2((int)(Position.X - screenPosition.X + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)(drawPlayer.height / 2) + 28f * drawPlayer.gravDir + num48)), new Microsoft.Xna.Framework.Rectangle(0, flyingCarpetTexture.Height / 6 * drawPlayer.carpetFrame, flyingCarpetTexture.Width, flyingCarpetTexture.Height / 6), color16, drawPlayer.bodyRotation, new Vector2(flyingCarpetTexture.Width / 2, flyingCarpetTexture.Height / 8), 1f, spriteEffects, 0);
				value.shader = shader13;
				playerDrawData.Add(value);
			}
			if (drawPlayer.electrified && shadow == 0f)
			{
				Texture2D texture2D = glowMaskTexture[25];
				int num49 = drawPlayer.miscCounter / 5;
				for (int l = 0; l < 2; l++)
				{
					num49 %= 7;
					if (num49 <= 1 || num49 >= 5)
					{
						value = new DrawData(texture2D, new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2(drawPlayer.bodyFrame.Width / 2, drawPlayer.bodyFrame.Height / 2), new Microsoft.Xna.Framework.Rectangle(0, num49 * texture2D.Height / 7, texture2D.Width, texture2D.Height / 7), color15, drawPlayer.bodyRotation, new Vector2(texture2D.Width / 2, texture2D.Height / 14), 1f, spriteEffects, 0);
						playerDrawData.Add(value);
					}
					num49 += 3;
				}
			}
			else if (drawPlayer.webbed && shadow == 0f && drawPlayer.velocity.Y != 0f)
			{
				Microsoft.Xna.Framework.Color color17 = color12 * 0.75f;
				Texture2D texture2D2 = extraTexture[32];
				value = new DrawData(texture2D2, new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2(drawPlayer.bodyFrame.Width / 2, drawPlayer.bodyFrame.Height / 2), null, color17, drawPlayer.bodyRotation, texture2D2.Size() / 2f, 1f, spriteEffects, 0);
				playerDrawData.Add(value);
			}
			bool flag8 = false;
			if ((drawPlayer.wings == 0 || drawPlayer.velocity.Y == 0f) && (drawPlayer.inventory[drawPlayer.selectedItem].type == 1178 || drawPlayer.inventory[drawPlayer.selectedItem].type == 779 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1295 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1910 || drawPlayer.turtleArmor || drawPlayer.body == 106 || drawPlayer.body == 170))
			{
				flag8 = true;
				int type3 = drawPlayer.inventory[drawPlayer.selectedItem].type;
				int num50 = 1;
				float num51 = -4f;
				float num52 = -8f;
				int shader14 = 0;
				if (drawPlayer.turtleArmor)
				{
					num50 = 4;
					shader14 = num6;
				}
				else if (drawPlayer.body == 106)
				{
					num50 = 6;
					shader14 = num6;
				}
				else if (drawPlayer.body == 170)
				{
					num50 = 7;
					shader14 = num6;
				}
				else
				{
					switch (type3)
					{
					case 1178:
						num50 = 1;
						break;
					case 779:
						num50 = 2;
						break;
					case 1295:
						num50 = 3;
						break;
					case 1910:
						num50 = 5;
						break;
					}
				}
				switch (num50)
				{
				case 7:
					value = new DrawData(BackPackTexture[num50], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2(drawPlayer.bodyFrame.Width / 2, drawPlayer.bodyFrame.Height / 2), new Microsoft.Xna.Framework.Rectangle(0, drawPlayer.bodyFrame.Y, BackPackTexture[num50].Width, drawPlayer.bodyFrame.Height), color12, drawPlayer.bodyRotation, new Vector2((float)BackPackTexture[num50].Width * 0.5f, origin.Y), 1f, spriteEffects, 0);
					value.shader = shader14;
					playerDrawData.Add(value);
					break;
				case 4:
				case 6:
					value = new DrawData(BackPackTexture[num50], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2(drawPlayer.bodyFrame.Width / 2, drawPlayer.bodyFrame.Height / 2), drawPlayer.bodyFrame, color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
					value.shader = shader14;
					playerDrawData.Add(value);
					break;
				default:
					value = new DrawData(BackPackTexture[num50], new Vector2((float)(int)(Position.X - screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num51 * (float)drawPlayer.direction, (int)(Position.Y - screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + num52 * drawPlayer.gravDir)), new Microsoft.Xna.Framework.Rectangle(0, 0, BackPackTexture[num50].Width, BackPackTexture[num50].Height), color12, drawPlayer.bodyRotation, new Vector2(BackPackTexture[num50].Width / 2, BackPackTexture[num50].Height / 2), 1f, spriteEffects, 0);
					value.shader = shader14;
					playerDrawData.Add(value);
					break;
				}
			}
			if (!flag8 && drawPlayer.back > 0 && drawPlayer.back < 10 && !drawPlayer.mount.Active)
			{
				if (drawPlayer.front >= 1 && drawPlayer.front <= 4)
				{
					int num53 = drawPlayer.bodyFrame.Y / 56;
					if (num53 < 1 || num53 > 5)
					{
						num2 = 10;
					}
					else
					{
						if (drawPlayer.front == 1)
						{
							num2 = 0;
						}
						if (drawPlayer.front == 2)
						{
							num2 = 8;
						}
						if (drawPlayer.front == 3)
						{
							num2 = 0;
						}
						if (drawPlayer.front == 4)
						{
							num2 = 8;
						}
					}
				}
				value = new DrawData(accBackTexture[drawPlayer.back], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2(drawPlayer.bodyFrame.Width / 2, drawPlayer.bodyFrame.Height / 2), drawPlayer.bodyFrame, color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
				value.shader = shader4;
				playerDrawData.Add(value);
			}
			Position.Y += (int)num4 / 2;
			if (!flag8 && drawPlayer.wings > 0)
			{
				LoadWings(drawPlayer.wings);
				if (drawPlayer.wings == 22)
				{
					if ((drawPlayer.velocity.Y != 0f || drawPlayer.grappling[0] != -1) && !drawPlayer.mount.Active)
					{
						LoadItemFlames(1866);
						Microsoft.Xna.Framework.Color color18 = color12;
						int num54 = 24;
						int num55 = 0;
						if (shadow == 0f && drawPlayer.grappling[0] == -1)
						{
							for (int m = 0; m < 7; m++)
							{
								Microsoft.Xna.Framework.Color color19 = new Microsoft.Xna.Framework.Color(250 - m * 10, 250 - m * 10, 250 - m * 10, 150 - m * 10);
								Vector2 value5 = new Vector2((float)rand.Next(-10, 11) * 0.2f, (float)rand.Next(-10, 11) * 0.2f);
								num42 *= num42;
								num42 *= 1f - shadow;
								color19 = new Microsoft.Xna.Framework.Color((int)((float)(int)color19.R * num42), (int)((float)(int)color19.G * num42), (int)((float)(int)color19.B * num42), (int)((float)(int)color19.A * num42));
								value5.X = drawPlayer.itemFlamePos[m].X;
								value5.Y = 0f - drawPlayer.itemFlamePos[m].Y;
								value5 *= 0.5f;
								value = new DrawData(itemFlameTexture[1866], new Vector2((int)(Position.X - screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num55 * drawPlayer.direction, (int)(Position.Y - screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num54 * drawPlayer.gravDir)) + value5, new Microsoft.Xna.Framework.Rectangle(0, wingsTexture[drawPlayer.wings].Height / 7 * drawPlayer.wingFrame, wingsTexture[drawPlayer.wings].Width, wingsTexture[drawPlayer.wings].Height / 7 - 2), color19, drawPlayer.bodyRotation, new Vector2(wingsTexture[drawPlayer.wings].Width / 2, wingsTexture[drawPlayer.wings].Height / 14), 1f, spriteEffects, 0);
								value.shader = shader12;
								playerDrawData.Add(value);
							}
						}
						value = new DrawData(wingsTexture[drawPlayer.wings], new Vector2((int)(Position.X - screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num55 * drawPlayer.direction, (int)(Position.Y - screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num54 * drawPlayer.gravDir)), new Microsoft.Xna.Framework.Rectangle(0, wingsTexture[drawPlayer.wings].Height / 7 * drawPlayer.wingFrame, wingsTexture[drawPlayer.wings].Width, wingsTexture[drawPlayer.wings].Height / 7), color18, drawPlayer.bodyRotation, new Vector2(wingsTexture[drawPlayer.wings].Width / 2, wingsTexture[drawPlayer.wings].Height / 14), 1f, spriteEffects, 0);
						value.shader = shader12;
						playerDrawData.Add(value);
					}
				}
				else if (drawPlayer.wings == 28)
				{
					if ((drawPlayer.velocity.Y != 0f || drawPlayer.grappling[0] != -1) && !drawPlayer.mount.Active)
					{
						Microsoft.Xna.Framework.Color value6 = color12;
						Vector2 value7 = new Vector2(0f, 0f);
						Texture2D texture2D3 = wingsTexture[drawPlayer.wings];
						Vector2 vec = Position + drawPlayer.Size * new Vector2(0.5f, 1f) - screenPosition + value7 * drawPlayer.Directions;
						Microsoft.Xna.Framework.Rectangle rectangle = texture2D3.Frame(1, 4, 0, drawPlayer.miscCounter / 5 % 4);
						rectangle.Width -= 2;
						rectangle.Height -= 2;
						value = new DrawData(texture2D3, vec.Floor(), rectangle, Microsoft.Xna.Framework.Color.Lerp(value6, Microsoft.Xna.Framework.Color.White, 1f), drawPlayer.bodyRotation, rectangle.Size() / 2f, 1f, spriteEffects, 0);
						value.shader = shader12;
						playerDrawData.Add(value);
						texture2D3 = extraTexture[38];
						value = new DrawData(texture2D3, vec.Floor(), rectangle, Microsoft.Xna.Framework.Color.Lerp(value6, Microsoft.Xna.Framework.Color.White, 0.5f), drawPlayer.bodyRotation, rectangle.Size() / 2f, 1f, spriteEffects, 0);
						value.shader = shader12;
						playerDrawData.Add(value);
					}
				}
				else if (drawPlayer.wings == 34)
				{
					if ((drawPlayer.velocity.Y != 0f || drawPlayer.grappling[0] != -1) && !drawPlayer.mount.Active)
					{
						num42 *= num42;
						num42 *= 1f - shadow;
						Microsoft.Xna.Framework.Color color20 = new Microsoft.Xna.Framework.Color((int)(250f * num42), (int)(250f * num42), (int)(250f * num42), (int)(100f * num42));
						Vector2 value8 = new Vector2(0f, 0f);
						Texture2D texture2D4 = wingsTexture[drawPlayer.wings];
						Vector2 vec2 = Position + drawPlayer.Size / 2f - screenPosition + value8 * drawPlayer.Directions - Vector2.UnitX * drawPlayer.direction * 4f;
						Microsoft.Xna.Framework.Rectangle rectangle2 = texture2D4.Frame(1, 6, 0, drawPlayer.wingFrame);
						rectangle2.Width -= 2;
						rectangle2.Height -= 2;
						value = new DrawData(texture2D4, vec2.Floor(), rectangle2, color20, drawPlayer.bodyRotation, rectangle2.Size() / 2f, 1f, spriteEffects, 0);
						value.shader = shader12;
						playerDrawData.Add(value);
					}
				}
				else
				{
					int num56 = 0;
					int num57 = 0;
					if (drawPlayer.wings == 5)
					{
						num57 = 4;
						num56 -= 4;
					}
					else if (drawPlayer.wings == 27)
					{
						num57 = 4;
					}
					Microsoft.Xna.Framework.Color color21 = color12;
					if (drawPlayer.wings == 9 || drawPlayer.wings == 29)
					{
						num42 *= num42;
						num42 *= 1f - shadow;
						color21 = new Microsoft.Xna.Framework.Color((int)(250f * num42), (int)(250f * num42), (int)(250f * num42), (int)(100f * num42));
					}
					if (drawPlayer.wings == 10)
					{
						num42 *= num42;
						num42 *= 1f - shadow;
						color21 = new Microsoft.Xna.Framework.Color((int)(250f * num42), (int)(250f * num42), (int)(250f * num42), (int)(175f * num42));
					}
					if (drawPlayer.wings == 11 && color21.A > gFade)
					{
						color21.A = gFade;
					}
					if (drawPlayer.wings == 31)
					{
						color21.A = (byte)(220f * num42);
					}
					if (drawPlayer.wings == 32)
					{
						color21.A = (byte)(127f * num42);
					}
					value = new DrawData(wingsTexture[drawPlayer.wings], new Vector2((int)(Position.X - screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num57 * drawPlayer.direction, (int)(Position.Y - screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num56 * drawPlayer.gravDir)), new Microsoft.Xna.Framework.Rectangle(0, wingsTexture[drawPlayer.wings].Height / 4 * drawPlayer.wingFrame, wingsTexture[drawPlayer.wings].Width, wingsTexture[drawPlayer.wings].Height / 4), color21, drawPlayer.bodyRotation, new Vector2(wingsTexture[drawPlayer.wings].Width / 2, wingsTexture[drawPlayer.wings].Height / 8), 1f, spriteEffects, 0);
					value.shader = shader12;
					playerDrawData.Add(value);
					if (drawPlayer.wings == 23)
					{
						num42 *= num42;
						num42 *= 1f - shadow;
						value = new DrawData(color: new Microsoft.Xna.Framework.Color((int)(200f * num42), (int)(200f * num42), (int)(200f * num42), (int)(200f * num42)), texture: FlameTexture[8], position: new Vector2((int)(Position.X - screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num57 * drawPlayer.direction, (int)(Position.Y - screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num56 * drawPlayer.gravDir)), sourceRect: new Microsoft.Xna.Framework.Rectangle(0, wingsTexture[drawPlayer.wings].Height / 4 * drawPlayer.wingFrame, wingsTexture[drawPlayer.wings].Width, wingsTexture[drawPlayer.wings].Height / 4), rotation: drawPlayer.bodyRotation, origin: new Vector2(wingsTexture[drawPlayer.wings].Width / 2, wingsTexture[drawPlayer.wings].Height / 8), scale: 1f, effect: spriteEffects, inactiveLayerDepth: 0);
						value.shader = shader12;
						playerDrawData.Add(value);
					}
					else if (drawPlayer.wings == 27)
					{
						value = new DrawData(glowMaskTexture[92], new Vector2((int)(Position.X - screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num57 * drawPlayer.direction, (int)(Position.Y - screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num56 * drawPlayer.gravDir)), new Microsoft.Xna.Framework.Rectangle(0, wingsTexture[drawPlayer.wings].Height / 4 * drawPlayer.wingFrame, wingsTexture[drawPlayer.wings].Width, wingsTexture[drawPlayer.wings].Height / 4), new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * num42 * (1f - shadow), drawPlayer.bodyRotation, new Vector2(wingsTexture[drawPlayer.wings].Width / 2, wingsTexture[drawPlayer.wings].Height / 8), 1f, spriteEffects, 0);
						value.shader = shader12;
						playerDrawData.Add(value);
					}
					else if (drawPlayer.wings == 30)
					{
						value = new DrawData(glowMaskTexture[181], new Vector2((int)(Position.X - screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num57 * drawPlayer.direction, (int)(Position.Y - screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num56 * drawPlayer.gravDir)), new Microsoft.Xna.Framework.Rectangle(0, wingsTexture[drawPlayer.wings].Height / 4 * drawPlayer.wingFrame, wingsTexture[drawPlayer.wings].Width, wingsTexture[drawPlayer.wings].Height / 4), new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * num42 * (1f - shadow), drawPlayer.bodyRotation, new Vector2(wingsTexture[drawPlayer.wings].Width / 2, wingsTexture[drawPlayer.wings].Height / 8), 1f, spriteEffects, 0);
						value.shader = shader12;
						playerDrawData.Add(value);
					}
					else if (drawPlayer.wings == 29)
					{
						value = new DrawData(wingsTexture[drawPlayer.wings], new Vector2((int)(Position.X - screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num57 * drawPlayer.direction, (int)(Position.Y - screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num56 * drawPlayer.gravDir)), new Microsoft.Xna.Framework.Rectangle(0, wingsTexture[drawPlayer.wings].Height / 4 * drawPlayer.wingFrame, wingsTexture[drawPlayer.wings].Width, wingsTexture[drawPlayer.wings].Height / 4), new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * num42 * (1f - shadow) * 0.5f, drawPlayer.bodyRotation, new Vector2(wingsTexture[drawPlayer.wings].Width / 2, wingsTexture[drawPlayer.wings].Height / 8), 1.06f, spriteEffects, 0);
						value.shader = shader12;
						playerDrawData.Add(value);
					}
					else if (drawPlayer.wings == 36)
					{
						value = new DrawData(glowMaskTexture[213], new Vector2((int)(Position.X - screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num57 * drawPlayer.direction, (int)(Position.Y - screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num56 * drawPlayer.gravDir)), new Microsoft.Xna.Framework.Rectangle(0, wingsTexture[drawPlayer.wings].Height / 4 * drawPlayer.wingFrame, wingsTexture[drawPlayer.wings].Width, wingsTexture[drawPlayer.wings].Height / 4), new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * num42 * (1f - shadow), drawPlayer.bodyRotation, new Vector2(wingsTexture[drawPlayer.wings].Width / 2, wingsTexture[drawPlayer.wings].Height / 8), 1.06f, spriteEffects, 0);
						value.shader = shader12;
						playerDrawData.Add(value);
						Vector2 spinningpoint = new Vector2(0f, 2f - shadow * 2f);
						for (int n = 0; n < 4; n++)
						{
							value = new DrawData(glowMaskTexture[213], spinningpoint.RotatedBy((float)Math.PI / 2f * (float)n) + new Vector2((int)(Position.X - screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num57 * drawPlayer.direction, (int)(Position.Y - screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num56 * drawPlayer.gravDir)), new Microsoft.Xna.Framework.Rectangle(0, wingsTexture[drawPlayer.wings].Height / 4 * drawPlayer.wingFrame, wingsTexture[drawPlayer.wings].Width, wingsTexture[drawPlayer.wings].Height / 4), new Microsoft.Xna.Framework.Color(127, 127, 127, 127) * num42 * (1f - shadow), drawPlayer.bodyRotation, new Vector2(wingsTexture[drawPlayer.wings].Width / 2, wingsTexture[drawPlayer.wings].Height / 8), 1f, spriteEffects, 0);
							value.shader = shader12;
							playerDrawData.Add(value);
						}
					}
					else if (drawPlayer.wings == 31)
					{
						Microsoft.Xna.Framework.Color color23 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0);
						color23 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.HotPink, Microsoft.Xna.Framework.Color.Crimson, (float)Math.Cos((float)Math.PI * 2f * ((float)drawPlayer.miscCounter / 100f)) * 0.4f + 0.5f);
						color23.A = 0;
						for (int num58 = 0; num58 < 4; num58++)
						{
							Vector2 value9 = new Vector2((float)Math.Cos((float)Math.PI * 2f * ((float)drawPlayer.miscCounter / 60f)) * 0.5f + 0.5f, 0f).RotatedBy((float)num58 * ((float)Math.PI / 2f)) * 1f;
							value = new DrawData(wingsTexture[drawPlayer.wings], new Vector2((int)(Position.X - screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num57 * drawPlayer.direction, (int)(Position.Y - screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num56 * drawPlayer.gravDir)) + value9, new Microsoft.Xna.Framework.Rectangle(0, wingsTexture[drawPlayer.wings].Height / 4 * drawPlayer.wingFrame, wingsTexture[drawPlayer.wings].Width, wingsTexture[drawPlayer.wings].Height / 4), color23 * num42 * (1f - shadow) * 0.5f, drawPlayer.bodyRotation, new Vector2(wingsTexture[drawPlayer.wings].Width / 2, wingsTexture[drawPlayer.wings].Height / 8), 1f, spriteEffects, 0);
							value.shader = shader12;
							playerDrawData.Add(value);
						}
						value = new DrawData(wingsTexture[drawPlayer.wings], new Vector2((int)(Position.X - screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num57 * drawPlayer.direction, (int)(Position.Y - screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num56 * drawPlayer.gravDir)), new Microsoft.Xna.Framework.Rectangle(0, wingsTexture[drawPlayer.wings].Height / 4 * drawPlayer.wingFrame, wingsTexture[drawPlayer.wings].Width, wingsTexture[drawPlayer.wings].Height / 4), color23 * num42 * (1f - shadow) * 1f, drawPlayer.bodyRotation, new Vector2(wingsTexture[drawPlayer.wings].Width / 2, wingsTexture[drawPlayer.wings].Height / 8), 1f, spriteEffects, 0);
						value.shader = shader12;
						playerDrawData.Add(value);
					}
					else if (drawPlayer.wings == 32)
					{
						value = new DrawData(glowMaskTexture[183], new Vector2((int)(Position.X - screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num57 * drawPlayer.direction, (int)(Position.Y - screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num56 * drawPlayer.gravDir)), new Microsoft.Xna.Framework.Rectangle(0, wingsTexture[drawPlayer.wings].Height / 4 * drawPlayer.wingFrame, wingsTexture[drawPlayer.wings].Width, wingsTexture[drawPlayer.wings].Height / 4), new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * num42 * (1f - shadow), drawPlayer.bodyRotation, new Vector2(wingsTexture[drawPlayer.wings].Width / 2, wingsTexture[drawPlayer.wings].Height / 8), 1.06f, spriteEffects, 0);
						value.shader = shader12;
						playerDrawData.Add(value);
					}
				}
			}
			if (drawPlayer.balloon > 0)
			{
				int num59 = DateTime.Now.Millisecond % 800 / 200;
				Vector2 vector4 = OffsetsPlayerOffhand[drawPlayer.bodyFrame.Y / 56];
				if (drawPlayer.direction != 1)
				{
					vector4.X = (float)drawPlayer.width - vector4.X;
				}
				if (drawPlayer.gravDir != 1f)
				{
					vector4.Y -= drawPlayer.height;
				}
				value = new DrawData(accBalloonTexture[drawPlayer.balloon], new Vector2((int)(Position.X - screenPosition.X + vector4.X), (int)(Position.Y - screenPosition.Y + vector4.Y * drawPlayer.gravDir)), new Microsoft.Xna.Framework.Rectangle(0, accBalloonTexture[drawPlayer.balloon].Height / 4 * num59, accBalloonTexture[drawPlayer.balloon].Width, accBalloonTexture[drawPlayer.balloon].Height / 4), color12, drawPlayer.bodyRotation, new Vector2(26 + drawPlayer.direction * 4, 28f + drawPlayer.gravDir * 6f), 1f, spriteEffects, 0);
				value.shader = shader11;
				playerDrawData.Add(value);
			}
			Position.Y -= (int)num4 / 2;
			if (drawPlayer.body != 83 && drawPlayer.body != 82 && drawPlayer.body != 93)
			{
				value = new DrawData(playerTextures[skinVariant, 3], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2(drawPlayer.bodyFrame.Width / 2, drawPlayer.bodyFrame.Height / 2), drawPlayer.bodyFrame, color5, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
				playerDrawData.Add(value);
				if (drawPlayer.legs != 67 && drawPlayer.legs != 106 && drawPlayer.shoe != 15)
				{
					value = new DrawData(playerTextures[skinVariant, 10], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2(drawPlayer.bodyFrame.Width / 2, drawPlayer.bodyFrame.Height / 2), drawPlayer.legFrame, color6, drawPlayer.legRotation, origin, 1f, spriteEffects, 0);
					playerDrawData.Add(value);
				}
			}
			if (!drawPlayer.wearsRobe)
			{
				goto IL_5852;
			}
			goto IL_5b88;
			IL_5c63:
			if (skinVariant == 3 && (drawPlayer.body <= 0 || drawPlayer.body >= 195) && !drawPlayer.invis)
			{
				value = new DrawData(playerTextures[skinVariant, 14], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f)) + drawPlayer.legPosition + vector2, drawPlayer.legFrame, color7, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
				playerDrawData.Add(value);
			}
			if (drawPlayer.body > 0 && drawPlayer.body < 195)
			{
				Microsoft.Xna.Framework.Rectangle bodyFrame2 = drawPlayer.bodyFrame;
				int num60 = num2;
				bodyFrame2.X += num60;
				bodyFrame2.Width -= num60;
				if (drawPlayer.direction == -1)
				{
					num60 = 0;
				}
				if (!drawPlayer.invis || (drawPlayer.body != 21 && drawPlayer.body != 22))
				{
					Texture2D texture = drawPlayer.Male ? armorBodyTexture[drawPlayer.body] : femaleBodyTexture[drawPlayer.body];
					value = new DrawData(texture, new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)) + num60, (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2(drawPlayer.bodyFrame.Width / 2, drawPlayer.bodyFrame.Height / 2), bodyFrame2, color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
					value.shader = num6;
					playerDrawData.Add(value);
					if (num13 != -1)
					{
						value = new DrawData(glowMaskTexture[num13], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)) + num60, (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2(drawPlayer.bodyFrame.Width / 2, drawPlayer.bodyFrame.Height / 2), bodyFrame2, newColor2, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
						value.shader = num6;
						playerDrawData.Add(value);
					}
				}
				if (flag && !drawPlayer.invis)
				{
					value = new DrawData(playerTextures[skinVariant, 5], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2(drawPlayer.bodyFrame.Width / 2, drawPlayer.bodyFrame.Height / 2), drawPlayer.bodyFrame, color5, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
					playerDrawData.Add(value);
				}
			}
			else if (!drawPlayer.invis)
			{
				if (!drawPlayer.Male)
				{
					value = new DrawData(playerTextures[skinVariant, 4], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2(drawPlayer.bodyFrame.Width / 2, drawPlayer.bodyFrame.Height / 2), drawPlayer.bodyFrame, color8, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
					playerDrawData.Add(value);
					value = new DrawData(playerTextures[skinVariant, 6], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2(drawPlayer.bodyFrame.Width / 2, drawPlayer.bodyFrame.Height / 2), drawPlayer.bodyFrame, color7, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
					playerDrawData.Add(value);
				}
				else
				{
					value = new DrawData(playerTextures[skinVariant, 4], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2(drawPlayer.bodyFrame.Width / 2, drawPlayer.bodyFrame.Height / 2), drawPlayer.bodyFrame, color8, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
					playerDrawData.Add(value);
					value = new DrawData(playerTextures[skinVariant, 6], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2(drawPlayer.bodyFrame.Width / 2, drawPlayer.bodyFrame.Height / 2), drawPlayer.bodyFrame, color7, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
					playerDrawData.Add(value);
				}
				value = new DrawData(playerTextures[skinVariant, 5], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2(drawPlayer.bodyFrame.Width / 2, drawPlayer.bodyFrame.Height / 2), drawPlayer.bodyFrame, color5, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
				playerDrawData.Add(value);
			}
			if (drawPlayer.handoff > 0 && drawPlayer.handoff < 12)
			{
				value = new DrawData(accHandsOffTexture[drawPlayer.handoff], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2(drawPlayer.bodyFrame.Width / 2, drawPlayer.bodyFrame.Height / 2), drawPlayer.bodyFrame, color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
				value.shader = shader3;
				playerDrawData.Add(value);
			}
			if (drawPlayer.waist > 0 && drawPlayer.waist < 12)
			{
				Microsoft.Xna.Framework.Rectangle legFrame = drawPlayer.legFrame;
				if (legFrame.Y >= 1064)
				{
					legFrame.Y = 0;
				}
				value = new DrawData(accWaistTexture[drawPlayer.waist], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f)) + drawPlayer.legPosition + vector2, legFrame, color14, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
				value.shader = shader7;
				playerDrawData.Add(value);
			}
			if (drawPlayer.neck > 0 && drawPlayer.neck < 9)
			{
				value = new DrawData(accNeckTexture[drawPlayer.neck], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2(drawPlayer.bodyFrame.Width / 2, drawPlayer.bodyFrame.Height / 2), drawPlayer.bodyFrame, color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
				value.shader = shader9;
				playerDrawData.Add(value);
			}
			if (!drawPlayer.invis && drawPlayer.head != 38 && drawPlayer.head != 135)
			{
				value = new DrawData(playerTextures[skinVariant, 0], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.headPosition + vector3, drawPlayer.bodyFrame, color4, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
				playerDrawData.Add(value);
				value = new DrawData(playerTextures[skinVariant, 1], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.headPosition + vector3, drawPlayer.bodyFrame, color2, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
				playerDrawData.Add(value);
				value = new DrawData(playerTextures[skinVariant, 2], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.headPosition + vector3, drawPlayer.bodyFrame, color3, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
				playerDrawData.Add(value);
				if (drawPlayer.yoraiz0rDarkness)
				{
					value = new DrawData(extraTexture[67], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.headPosition + vector3, drawPlayer.bodyFrame, color4, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
					playerDrawData.Add(value);
				}
			}
			if (flag4)
			{
				value = new DrawData(armorHeadTexture[drawPlayer.head], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.headPosition + vector3, drawPlayer.bodyFrame, color11, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
				value.shader = num5;
				playerDrawData.Add(value);
				if (!drawPlayer.invis)
				{
					value = new DrawData(playerHairTexture[drawPlayer.hair], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.headPosition + vector3, bodyFrame, color, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
					value.shader = -num3;
					playerDrawData.Add(value);
				}
			}
			if (flag5 && !drawPlayer.invis)
			{
				value = new DrawData(playerHairAltTexture[drawPlayer.hair], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.headPosition + vector3, bodyFrame, color, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
				value.shader = -num3;
				playerDrawData.Add(value);
			}
			if (drawPlayer.head == 23)
			{
				if (!drawPlayer.invis)
				{
					value = new DrawData(playerHairTexture[drawPlayer.hair], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.headPosition + vector3, bodyFrame, color, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
					value.shader = -num3;
					playerDrawData.Add(value);
				}
				value = new DrawData(armorHeadTexture[drawPlayer.head], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.headPosition + vector3, drawPlayer.bodyFrame, color11, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
				value.shader = num5;
				playerDrawData.Add(value);
			}
			else if (drawPlayer.head == 14 || drawPlayer.head == 56 || drawPlayer.head == 114 || drawPlayer.head == 158 || drawPlayer.head == 69 || drawPlayer.head == 180)
			{
				Microsoft.Xna.Framework.Rectangle bodyFrame3 = drawPlayer.bodyFrame;
				Vector2 origin2 = vector3;
				if (drawPlayer.gravDir == 1f)
				{
					if (bodyFrame3.Y != 0)
					{
						bodyFrame3.Y -= 2;
						bodyFrame3.Height -= 8;
						origin2.Y += 2f;
					}
				}
				else if (bodyFrame3.Y != 0)
				{
					bodyFrame3.Y -= 2;
					origin2.Y -= 10f;
					bodyFrame3.Height -= 8;
				}
				value = new DrawData(armorHeadTexture[drawPlayer.head], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.headPosition + vector3, bodyFrame3, color11, drawPlayer.headRotation, origin2, 1f, spriteEffects, 0);
				value.shader = num5;
				playerDrawData.Add(value);
			}
			else if (drawPlayer.head > 0 && drawPlayer.head < 194 && drawPlayer.head != 28)
			{
				if (!drawPlayer.invis || (drawPlayer.head != 39 && drawPlayer.head != 38))
				{
					if (drawPlayer.head == 13)
					{
						int num61 = 0;
						int num62 = 0;
						if (drawPlayer.armor[num62] != null && drawPlayer.armor[num62].type == 205 && drawPlayer.armor[num62].stack > 0)
						{
							num61 += drawPlayer.armor[num62].stack;
						}
						num62 = 10;
						if (drawPlayer.armor[num62] != null && drawPlayer.armor[num62].type == 205 && drawPlayer.armor[num62].stack > 0)
						{
							num61 += drawPlayer.armor[num62].stack;
						}
						float num63 = (float)Math.PI / 60f;
						float num64 = num63 * drawPlayer.position.X % ((float)Math.PI * 2f);
						for (int num65 = 0; num65 < num61; num65++)
						{
							float num66 = Vector2.UnitY.RotatedBy(num64 + num63 * (float)num65).X * ((float)num65 / 30f) * 2f;
							value = new DrawData(armorHeadTexture[drawPlayer.head], new Vector2((float)(int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)) + num66, (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f - (float)(4 * num65))) + drawPlayer.headPosition + vector3, drawPlayer.bodyFrame, color11, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
							value.shader = num5;
							playerDrawData.Add(value);
						}
					}
					else
					{
						value = new DrawData(armorHeadTexture[drawPlayer.head], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.headPosition + vector3, drawPlayer.bodyFrame, color11, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
						value.shader = num5;
						playerDrawData.Add(value);
						if (num12 != -1)
						{
							value = new DrawData(glowMaskTexture[num12], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.headPosition + vector3, drawPlayer.bodyFrame, newColor, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
							value.shader = num5;
							playerDrawData.Add(value);
						}
					}
				}
			}
			else if (!drawPlayer.invis && drawPlayer.face != 3 && drawPlayer.face != 2 && drawPlayer.face != 4)
			{
				value = new DrawData(playerHairTexture[drawPlayer.hair], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.headPosition + vector3, bodyFrame, color, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
				value.shader = -num3;
				playerDrawData.Add(value);
			}
			if (drawPlayer.head == 137)
			{
				value = new DrawData(jackHatTexture, new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.headPosition + vector3, drawPlayer.bodyFrame, new Microsoft.Xna.Framework.Color(255, 255, 255, 255), drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
				playerDrawData.Add(value);
				for (int num67 = 0; num67 < 7; num67++)
				{
					Microsoft.Xna.Framework.Color color24 = new Microsoft.Xna.Framework.Color(110 - num67 * 10, 110 - num67 * 10, 110 - num67 * 10, 110 - num67 * 10);
					Vector2 value10 = new Vector2((float)rand.Next(-10, 11) * 0.2f, (float)rand.Next(-10, 11) * 0.2f);
					value10.X = drawPlayer.itemFlamePos[num67].X;
					value10.Y = drawPlayer.itemFlamePos[num67].Y;
					value10 *= 0.5f;
					value = new DrawData(jackHatTexture, new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.headPosition + vector3 + value10, drawPlayer.bodyFrame, color24, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
					playerDrawData.Add(value);
				}
			}
			if (drawPlayer.face > 0 && drawPlayer.face < 9)
			{
				if (drawPlayer.face == 7)
				{
					value = new DrawData(accFaceTexture[drawPlayer.face], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.headPosition + vector3, drawPlayer.bodyFrame, new Microsoft.Xna.Framework.Color(200, 200, 200, 150), drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
					value.shader = shader10;
					playerDrawData.Add(value);
				}
				else
				{
					value = new DrawData(accFaceTexture[drawPlayer.face], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.headPosition + vector3, drawPlayer.bodyFrame, color11, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
					value.shader = shader10;
					playerDrawData.Add(value);
				}
			}
			if (drawPlayer.mount.Active)
			{
				drawPlayer.mount.Draw(playerDrawData, 2, drawPlayer, Position, color13, spriteEffects, shadow);
				drawPlayer.mount.Draw(playerDrawData, 3, drawPlayer, Position, color13, spriteEffects, shadow);
			}
			if (drawPlayer.pulley && drawPlayer.itemAnimation == 0)
			{
				if (drawPlayer.pulleyDir == 2)
				{
					int num68 = -26;
					int num69 = 0;
					float rotation2 = 0f;
					value = new DrawData(pulleyTexture, new Vector2((int)(Position.X - screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num69 * drawPlayer.direction, (int)(Position.Y - screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num68 * drawPlayer.gravDir)), new Microsoft.Xna.Framework.Rectangle(0, pulleyTexture.Height / 2 * drawPlayer.pulleyFrame, pulleyTexture.Width, pulleyTexture.Height / 2), color11, rotation2, new Vector2(pulleyTexture.Width / 2, pulleyTexture.Height / 4), 1f, spriteEffects, 0);
					playerDrawData.Add(value);
				}
				else
				{
					int num70 = -26;
					int num71 = 10;
					float rotation3 = 0.35f * (float)(-drawPlayer.direction);
					value = new DrawData(pulleyTexture, new Vector2((int)(Position.X - screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num71 * drawPlayer.direction, (int)(Position.Y - screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num70 * drawPlayer.gravDir)), new Microsoft.Xna.Framework.Rectangle(0, pulleyTexture.Height / 2 * drawPlayer.pulleyFrame, pulleyTexture.Width, pulleyTexture.Height / 2), color11, rotation3, new Vector2(pulleyTexture.Width / 2, pulleyTexture.Height / 4), 1f, spriteEffects, 0);
					playerDrawData.Add(value);
				}
			}
			if (drawPlayer.shield > 0 && drawPlayer.shield < 6)
			{
				value = new DrawData(accShieldTexture[drawPlayer.shield], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2(drawPlayer.bodyFrame.Width / 2, drawPlayer.bodyFrame.Height / 2), drawPlayer.bodyFrame, color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
				value.shader = shader8;
				playerDrawData.Add(value);
				if (drawPlayer.mount.Cart)
				{
					playerDrawData.Reverse(playerDrawData.Count - 2, 2);
				}
			}
			if (drawPlayer.solarShields > 0 && shadow == 0f && !drawPlayer.dead)
			{
				Texture2D texture2D5 = extraTexture[61 + drawPlayer.solarShields - 1];
				Microsoft.Xna.Framework.Color color25 = new Microsoft.Xna.Framework.Color(255, 255, 255, 127);
				float num72 = (drawPlayer.solarShieldPos[0] * new Vector2(1f, 0.5f)).ToRotation();
				if (drawPlayer.direction == -1)
				{
					num72 += (float)Math.PI;
				}
				num72 += (float)Math.PI / 50f * (float)drawPlayer.direction;
				value = new DrawData(texture2D5, new Vector2((int)(Position.X - screenPosition.X + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)(drawPlayer.height / 2))) + drawPlayer.solarShieldPos[0], null, color25, num72, texture2D5.Size() / 2f, 1f, spriteEffects, 0);
				value.shader = num6;
				playerDrawData.Add(value);
			}
			if (drawPlayer.heldProj >= 0 && shadow == 0f && !flag3)
			{
				num = playerDrawData.Count;
			}
			Microsoft.Xna.Framework.Color currentColor = Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0));
			if (drawPlayer.inventory[drawPlayer.selectedItem].type == 678)
			{
				currentColor = Microsoft.Xna.Framework.Color.White;
			}
			if (drawPlayer.shroomiteStealth && drawPlayer.inventory[drawPlayer.selectedItem].ranged)
			{
				float num73 = drawPlayer.stealth;
				if ((double)num73 < 0.03)
				{
					num73 = 0.03f;
				}
				float num74 = (1f + num73 * 10f) / 11f;
				currentColor = new Microsoft.Xna.Framework.Color((byte)((float)(int)currentColor.R * num73), (byte)((float)(int)currentColor.G * num73), (byte)((float)(int)currentColor.B * num74), (byte)((float)(int)currentColor.A * num73));
			}
			if (drawPlayer.setVortex && drawPlayer.inventory[drawPlayer.selectedItem].ranged)
			{
				float num75 = drawPlayer.stealth;
				if ((double)num75 < 0.03)
				{
					num75 = 0.03f;
				}
				float num95 = (1f + num75 * 10f) / 11f;
				currentColor = currentColor.MultiplyRGBA(new Microsoft.Xna.Framework.Color(Vector4.Lerp(Vector4.One, new Vector4(0f, 0.12f, 0.16f, 0f), 1f - num75)));
			}
			if (shadow == 0f && !drawPlayer.frozen && (drawPlayer.itemAnimation > 0 || (drawPlayer.inventory[drawPlayer.selectedItem].holdStyle > 0 && !drawPlayer.pulley)) && drawPlayer.inventory[drawPlayer.selectedItem].type > 0 && !drawPlayer.dead && !drawPlayer.inventory[drawPlayer.selectedItem].noUseGraphic && (!drawPlayer.wet || !drawPlayer.inventory[drawPlayer.selectedItem].noWet))
			{
				string name = drawPlayer.name;
				ItemSlot.GetItemLight(ref currentColor, drawPlayer.inventory[drawPlayer.selectedItem]);
				if (drawPlayer.inventory[drawPlayer.selectedItem].type == 3476)
				{
					Texture2D texture2D6 = extraTexture[64];
					Microsoft.Xna.Framework.Rectangle rectangle3 = texture2D6.Frame(1, 9, 0, drawPlayer.miscCounter % 54 / 6);
					Vector2 value11 = new Vector2(rectangle3.Width / 2 * drawPlayer.direction, 0f);
					Vector2 origin3 = rectangle3.Size() / 2f;
					value = new DrawData(texture2D6, (value2 - screenPosition + value11).Floor(), rectangle3, drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(currentColor).MultiplyRGBA(new Microsoft.Xna.Framework.Color(new Vector4(0.5f, 0.5f, 0.5f, 0.8f))), drawPlayer.itemRotation, origin3, drawPlayer.inventory[drawPlayer.selectedItem].scale, spriteEffects2, 0);
					playerDrawData.Add(value);
					texture2D6 = glowMaskTexture[195];
					value = new DrawData(texture2D6, (value2 - screenPosition + value11).Floor(), rectangle3, new Microsoft.Xna.Framework.Color(250, 250, 250, drawPlayer.inventory[drawPlayer.selectedItem].alpha) * 0.5f, drawPlayer.itemRotation, origin3, drawPlayer.inventory[drawPlayer.selectedItem].scale, spriteEffects2, 0);
					playerDrawData.Add(value);
				}
				else if (drawPlayer.inventory[drawPlayer.selectedItem].useStyle == 5)
				{
					if (Item.staff[drawPlayer.inventory[drawPlayer.selectedItem].type])
					{
						float num76 = drawPlayer.itemRotation + 0.785f * (float)drawPlayer.direction;
						int num77 = 0;
						int num78 = 0;
						Vector2 origin4 = new Vector2(0f, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height);
						if (drawPlayer.inventory[drawPlayer.selectedItem].type == 3210)
						{
							num77 = 8 * -drawPlayer.direction;
							num78 = 2 * (int)drawPlayer.gravDir;
						}
						if (drawPlayer.gravDir == -1f)
						{
							if (drawPlayer.direction == -1)
							{
								num76 += 1.57f;
								origin4 = new Vector2(itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, 0f);
								num77 -= itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width;
							}
							else
							{
								num76 -= 1.57f;
								origin4 = Vector2.Zero;
							}
						}
						else if (drawPlayer.direction == -1)
						{
							origin4 = new Vector2(itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height);
							num77 -= itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width;
						}
						value = new DrawData(itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type], new Vector2((int)(value2.X - screenPosition.X + origin4.X + (float)num77), (int)(value2.Y - screenPosition.Y + (float)num78)), new Microsoft.Xna.Framework.Rectangle(0, 0, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(currentColor), num76, origin4, drawPlayer.inventory[drawPlayer.selectedItem].scale, spriteEffects2, 0);
						playerDrawData.Add(value);
					}
					else
					{
						int num79 = 10;
						Vector2 vector5 = new Vector2(itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width / 2, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height / 2);
						Vector2 vector6 = DrawPlayerItemPos(drawPlayer.gravDir, drawPlayer.inventory[drawPlayer.selectedItem].type);
						num79 = (int)vector6.X;
						vector5.Y = vector6.Y;
						Vector2 origin5 = new Vector2(-num79, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height / 2);
						if (drawPlayer.direction == -1)
						{
							origin5 = new Vector2(itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width + num79, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height / 2);
						}
						value = new DrawData(itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type], new Vector2((int)(value2.X - screenPosition.X + vector5.X), (int)(value2.Y - screenPosition.Y + vector5.Y)), new Microsoft.Xna.Framework.Rectangle(0, 0, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(currentColor), drawPlayer.itemRotation, origin5, drawPlayer.inventory[drawPlayer.selectedItem].scale, spriteEffects2, 0);
						playerDrawData.Add(value);
						if (drawPlayer.inventory[drawPlayer.selectedItem].color != default(Microsoft.Xna.Framework.Color))
						{
							value = new DrawData(itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type], new Vector2((int)(value2.X - screenPosition.X + vector5.X), (int)(value2.Y - screenPosition.Y + vector5.Y)), new Microsoft.Xna.Framework.Rectangle(0, 0, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height), drawPlayer.inventory[drawPlayer.selectedItem].GetColor(currentColor), drawPlayer.itemRotation, origin5, drawPlayer.inventory[drawPlayer.selectedItem].scale, spriteEffects2, 0);
							playerDrawData.Add(value);
						}
						if (drawPlayer.inventory[drawPlayer.selectedItem].glowMask != -1)
						{
							value = new DrawData(glowMaskTexture[drawPlayer.inventory[drawPlayer.selectedItem].glowMask], new Vector2((int)(value2.X - screenPosition.X + vector5.X), (int)(value2.Y - screenPosition.Y + vector5.Y)), new Microsoft.Xna.Framework.Rectangle(0, 0, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height), new Microsoft.Xna.Framework.Color(250, 250, 250, drawPlayer.inventory[drawPlayer.selectedItem].alpha), drawPlayer.itemRotation, origin5, drawPlayer.inventory[drawPlayer.selectedItem].scale, spriteEffects2, 0);
							playerDrawData.Add(value);
						}
					}
				}
				else if (drawPlayer.gravDir == -1f)
				{
					value = new DrawData(itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type], new Vector2((int)(value2.X - screenPosition.X), (int)(value2.Y - screenPosition.Y)), new Microsoft.Xna.Framework.Rectangle(0, 0, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(currentColor), drawPlayer.itemRotation, new Vector2((float)itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width * 0.5f - (float)itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width * 0.5f * (float)drawPlayer.direction, 0f), drawPlayer.inventory[drawPlayer.selectedItem].scale, spriteEffects2, 0);
					playerDrawData.Add(value);
					if (drawPlayer.inventory[drawPlayer.selectedItem].color != default(Microsoft.Xna.Framework.Color))
					{
						value = new DrawData(itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type], new Vector2((int)(value2.X - screenPosition.X), (int)(value2.Y - screenPosition.Y)), new Microsoft.Xna.Framework.Rectangle(0, 0, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height), drawPlayer.inventory[drawPlayer.selectedItem].GetColor(currentColor), drawPlayer.itemRotation, new Vector2((float)itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width * 0.5f - (float)itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width * 0.5f * (float)drawPlayer.direction, 0f), drawPlayer.inventory[drawPlayer.selectedItem].scale, spriteEffects2, 0);
						playerDrawData.Add(value);
					}
					if (drawPlayer.inventory[drawPlayer.selectedItem].glowMask != -1)
					{
						value = new DrawData(glowMaskTexture[drawPlayer.inventory[drawPlayer.selectedItem].glowMask], new Vector2((int)(value2.X - screenPosition.X), (int)(value2.Y - screenPosition.Y)), new Microsoft.Xna.Framework.Rectangle(0, 0, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height), new Microsoft.Xna.Framework.Color(250, 250, 250, drawPlayer.inventory[drawPlayer.selectedItem].alpha), drawPlayer.itemRotation, new Vector2((float)itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width * 0.5f - (float)itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width * 0.5f * (float)drawPlayer.direction, 0f), drawPlayer.inventory[drawPlayer.selectedItem].scale, spriteEffects2, 0);
						playerDrawData.Add(value);
					}
				}
				else
				{
					if (drawPlayer.inventory[drawPlayer.selectedItem].type == 425 || drawPlayer.inventory[drawPlayer.selectedItem].type == 507)
					{
						spriteEffects2 = ((drawPlayer.gravDir == 1f) ? ((drawPlayer.direction != 1) ? (SpriteEffects.FlipHorizontally | SpriteEffects.FlipVertically) : SpriteEffects.FlipVertically) : ((drawPlayer.direction != 1) ? SpriteEffects.FlipHorizontally : SpriteEffects.None));
					}
					int type4 = drawPlayer.inventory[drawPlayer.selectedItem].type;
					value = new DrawData(itemTexture[type4], new Vector2((int)(value2.X - screenPosition.X), (int)(value2.Y - screenPosition.Y)), new Microsoft.Xna.Framework.Rectangle(0, 0, itemTexture[type4].Width, itemTexture[type4].Height), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(currentColor), drawPlayer.itemRotation, new Vector2((float)itemTexture[type4].Width * 0.5f - (float)itemTexture[type4].Width * 0.5f * (float)drawPlayer.direction, itemTexture[type4].Height), drawPlayer.inventory[drawPlayer.selectedItem].scale, spriteEffects2, 0);
					playerDrawData.Add(value);
					if (drawPlayer.inventory[drawPlayer.selectedItem].color != default(Microsoft.Xna.Framework.Color))
					{
						value = new DrawData(itemTexture[type4], new Vector2((int)(value2.X - screenPosition.X), (int)(value2.Y - screenPosition.Y)), new Microsoft.Xna.Framework.Rectangle(0, 0, itemTexture[type4].Width, itemTexture[type4].Height), drawPlayer.inventory[drawPlayer.selectedItem].GetColor(currentColor), drawPlayer.itemRotation, new Vector2((float)itemTexture[type4].Width * 0.5f - (float)itemTexture[type4].Width * 0.5f * (float)drawPlayer.direction, itemTexture[type4].Height), drawPlayer.inventory[drawPlayer.selectedItem].scale, spriteEffects2, 0);
						playerDrawData.Add(value);
					}
					if (drawPlayer.inventory[drawPlayer.selectedItem].glowMask != -1)
					{
						value = new DrawData(glowMaskTexture[drawPlayer.inventory[drawPlayer.selectedItem].glowMask], new Vector2((int)(value2.X - screenPosition.X), (int)(value2.Y - screenPosition.Y)), new Microsoft.Xna.Framework.Rectangle(0, 0, itemTexture[type4].Width, itemTexture[type4].Height), new Microsoft.Xna.Framework.Color(250, 250, 250, drawPlayer.inventory[drawPlayer.selectedItem].alpha), drawPlayer.itemRotation, new Vector2((float)itemTexture[type4].Width * 0.5f - (float)itemTexture[type4].Width * 0.5f * (float)drawPlayer.direction, itemTexture[type4].Height), drawPlayer.inventory[drawPlayer.selectedItem].scale, spriteEffects2, 0);
						playerDrawData.Add(value);
					}
					if (drawPlayer.inventory[drawPlayer.selectedItem].flame && shadow == 0f)
					{
						try
						{
							LoadItemFlames(type4);
							if (itemFlameTexture[type4] != null)
							{
								for (int num80 = 0; num80 < 7; num80++)
								{
									Microsoft.Xna.Framework.Color color26 = new Microsoft.Xna.Framework.Color(100, 100, 100, 0);
									if (type4 == 3045)
									{
										color26 = new Microsoft.Xna.Framework.Color(DiscoR, DiscoG, DiscoB, 0);
									}
									float x = drawPlayer.itemFlamePos[num80].X;
									float y = drawPlayer.itemFlamePos[num80].Y;
									value = new DrawData(itemFlameTexture[type4], new Vector2((float)(int)(value2.X - screenPosition.X) + x, (float)(int)(value2.Y - screenPosition.Y) + y), new Microsoft.Xna.Framework.Rectangle(0, 0, itemTexture[type4].Width, itemTexture[type4].Height), color26, drawPlayer.itemRotation, new Vector2((float)itemTexture[type4].Width * 0.5f - (float)itemTexture[type4].Width * 0.5f * (float)drawPlayer.direction, itemTexture[type4].Height), drawPlayer.inventory[drawPlayer.selectedItem].scale, spriteEffects2, 0);
									playerDrawData.Add(value);
								}
							}
						}
						catch
						{
						}
					}
				}
			}
			if (drawPlayer.body > 0 && drawPlayer.body < 195)
			{
				Microsoft.Xna.Framework.Rectangle bodyFrame4 = drawPlayer.bodyFrame;
				int num81 = num2;
				bodyFrame4.X += num81;
				bodyFrame4.Width -= num81;
				if (drawPlayer.direction == -1)
				{
					num81 = 0;
				}
				if (!drawPlayer.invis || (drawPlayer.body != 21 && drawPlayer.body != 22))
				{
					if (flag && !drawPlayer.invis)
					{
						int body = drawPlayer.body;
						if (flag2)
						{
							value = new DrawData(playerTextures[skinVariant, 7], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2(drawPlayer.bodyFrame.Width / 2, drawPlayer.bodyFrame.Height / 2), drawPlayer.bodyFrame, color5, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
							playerDrawData.Add(value);
						}
						value = new DrawData(playerTextures[skinVariant, 9], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2(drawPlayer.bodyFrame.Width / 2, drawPlayer.bodyFrame.Height / 2), drawPlayer.bodyFrame, color5, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
						playerDrawData.Add(value);
					}
					value = new DrawData(armorArmTexture[drawPlayer.body], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)) + num81, (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2(drawPlayer.bodyFrame.Width / 2, drawPlayer.bodyFrame.Height / 2), bodyFrame4, color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
					value.shader = num6;
					playerDrawData.Add(value);
					if (num14 != -1)
					{
						value = new DrawData(glowMaskTexture[num14], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)) + num81, (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2(drawPlayer.bodyFrame.Width / 2, drawPlayer.bodyFrame.Height / 2), bodyFrame4, newColor3, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
						value.shader = num6;
						playerDrawData.Add(value);
					}
				}
			}
			else if (!drawPlayer.invis)
			{
				value = new DrawData(playerTextures[skinVariant, 7], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2(drawPlayer.bodyFrame.Width / 2, drawPlayer.bodyFrame.Height / 2), drawPlayer.bodyFrame, color5, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
				playerDrawData.Add(value);
				value = new DrawData(playerTextures[skinVariant, 8], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2(drawPlayer.bodyFrame.Width / 2, drawPlayer.bodyFrame.Height / 2), drawPlayer.bodyFrame, color8, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
				playerDrawData.Add(value);
				value = new DrawData(playerTextures[skinVariant, 13], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2(drawPlayer.bodyFrame.Width / 2, drawPlayer.bodyFrame.Height / 2), drawPlayer.bodyFrame, color7, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
				playerDrawData.Add(value);
			}
			if (drawPlayer.handon > 0 && drawPlayer.handon < 19)
			{
				value = new DrawData(accHandsOnTexture[drawPlayer.handon], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2(drawPlayer.bodyFrame.Width / 2, drawPlayer.bodyFrame.Height / 2), drawPlayer.bodyFrame, color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
				value.shader = shader2;
				playerDrawData.Add(value);
			}
			if (drawPlayer.inventory[drawPlayer.selectedItem].type > -1 && Item.claw[drawPlayer.inventory[drawPlayer.selectedItem].type] && shadow == 0f && !drawPlayer.frozen && (drawPlayer.itemAnimation > 0 || (drawPlayer.inventory[drawPlayer.selectedItem].holdStyle > 0 && !drawPlayer.pulley)) && drawPlayer.inventory[drawPlayer.selectedItem].type > 0 && !drawPlayer.dead && !drawPlayer.inventory[drawPlayer.selectedItem].noUseGraphic && (!drawPlayer.wet || !drawPlayer.inventory[drawPlayer.selectedItem].noWet))
			{
				if (drawPlayer.gravDir == -1f)
				{
					value = new DrawData(itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type], new Vector2((int)(value2.X - screenPosition.X), (int)(value2.Y - screenPosition.Y)), new Microsoft.Xna.Framework.Rectangle(0, 0, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(currentColor), drawPlayer.itemRotation, new Vector2((float)itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width * 0.5f - (float)itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width * 0.5f * (float)drawPlayer.direction, 0f), drawPlayer.inventory[drawPlayer.selectedItem].scale, spriteEffects2, 0);
					playerDrawData.Add(value);
				}
				else
				{
					int type5 = drawPlayer.inventory[drawPlayer.selectedItem].type;
					value = new DrawData(itemTexture[type5], new Vector2((int)(value2.X - screenPosition.X), (int)(value2.Y - screenPosition.Y)), new Microsoft.Xna.Framework.Rectangle(0, 0, itemTexture[type5].Width, itemTexture[type5].Height), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(currentColor), drawPlayer.itemRotation, new Vector2((float)itemTexture[type5].Width * 0.5f - (float)itemTexture[type5].Width * 0.5f * (float)drawPlayer.direction, itemTexture[type5].Height), drawPlayer.inventory[drawPlayer.selectedItem].scale, spriteEffects2, 0);
					playerDrawData.Add(value);
				}
			}
			if (drawPlayer.heldProj >= 0 && shadow == 0f && flag3)
			{
				num = playerDrawData.Count;
			}
			if (!flag8 && drawPlayer.front > 0 && drawPlayer.front < 5 && !drawPlayer.mount.Active)
			{
				value = new DrawData(accFrontTexture[drawPlayer.front], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2(drawPlayer.bodyFrame.Width / 2, drawPlayer.bodyFrame.Height / 2), drawPlayer.bodyFrame, color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
				value.shader = shader5;
				playerDrawData.Add(value);
			}
			if (drawPlayer.frozen && shadow == 0f)
			{
				Microsoft.Xna.Framework.Color color27 = color12;
				color27.R = (byte)((double)(int)color27.R * 0.55);
				color27.G = (byte)((double)(int)color27.G * 0.55);
				color27.B = (byte)((double)(int)color27.B * 0.55);
				color27.A = (byte)((double)(int)color27.A * 0.55);
				value = new DrawData(frozenTexture, new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2(drawPlayer.bodyFrame.Width / 2, drawPlayer.bodyFrame.Height / 2), new Microsoft.Xna.Framework.Rectangle(0, 0, frozenTexture.Width, frozenTexture.Height), color27, drawPlayer.bodyRotation, new Vector2(frozenTexture.Width / 2, frozenTexture.Height / 2), 1f, spriteEffects, 0);
				playerDrawData.Add(value);
			}
			else if (drawPlayer.webbed && shadow == 0f && drawPlayer.velocity.Y == 0f)
			{
				Microsoft.Xna.Framework.Color color28 = color12 * 0.75f;
				Texture2D texture2D7 = extraTexture[31];
				int num82 = drawPlayer.height / 2;
				value = new DrawData(texture2D7, new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f + (float)num82)) + drawPlayer.bodyPosition + new Vector2(drawPlayer.bodyFrame.Width / 2, drawPlayer.bodyFrame.Height / 2), null, color28, drawPlayer.bodyRotation, texture2D7.Size() / 2f, 1f, spriteEffects, 0);
				playerDrawData.Add(value);
			}
			if (drawPlayer.electrified && shadow == 0f)
			{
				Texture2D texture2D8 = glowMaskTexture[25];
				int num83 = drawPlayer.miscCounter / 5;
				for (int num84 = 0; num84 < 2; num84++)
				{
					num83 %= 7;
					if (num83 > 1 && num83 < 5)
					{
						value = new DrawData(texture2D8, new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2(drawPlayer.bodyFrame.Width / 2, drawPlayer.bodyFrame.Height / 2), new Microsoft.Xna.Framework.Rectangle(0, num83 * texture2D8.Height / 7, texture2D8.Width, texture2D8.Height / 7), color15, drawPlayer.bodyRotation, new Vector2(texture2D8.Width / 2, texture2D8.Height / 14), 1f, spriteEffects, 0);
						playerDrawData.Add(value);
					}
					num83 += 3;
				}
			}
			if (drawPlayer.iceBarrier && shadow == 0f)
			{
				int num85 = iceBarrierTexture.Height / 12;
				Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
				value = new DrawData(iceBarrierTexture, new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2(drawPlayer.bodyFrame.Width / 2, drawPlayer.bodyFrame.Height / 2), new Microsoft.Xna.Framework.Rectangle(0, num85 * drawPlayer.iceBarrierFrame, iceBarrierTexture.Width, num85), white, 0f, new Vector2(frozenTexture.Width / 2, frozenTexture.Height / 2), 1f, spriteEffects, 0);
				playerDrawData.Add(value);
			}
			if (drawPlayer.gem >= 0 && shadow == 0f)
			{
				value = new DrawData(gemTexture[drawPlayer.gem], new Vector2((int)(Position.X - screenPosition.X + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - 80f)), new Microsoft.Xna.Framework.Rectangle(0, 0, gemTexture[drawPlayer.gem].Width, gemTexture[drawPlayer.gem].Height), new Microsoft.Xna.Framework.Color(250, 250, 250, (int)mouseTextColor / 2), 0f, new Vector2(gemTexture[drawPlayer.gem].Width / 2, gemTexture[drawPlayer.gem].Height / 2), (float)(int)mouseTextColor / 1000f + 0.8f, SpriteEffects.None, 0);
				playerDrawData.Add(value);
			}
			if ((drawPlayer.beetleOffense || drawPlayer.beetleDefense) && shadow == 0f)
			{
				for (int num86 = 0; num86 < drawPlayer.beetleOrbs; num86++)
				{
					for (int num87 = 0; num87 < 5; num87++)
					{
						Microsoft.Xna.Framework.Color color29 = color12;
						float num88 = (float)num87 * 0.1f;
						num88 = 0.5f - num88;
						color29.R = (byte)((float)(int)color29.R * num88);
						color29.G = (byte)((float)(int)color29.G * num88);
						color29.B = (byte)((float)(int)color29.B * num88);
						color29.A = (byte)((float)(int)color29.A * num88);
						Vector2 value12 = -drawPlayer.beetleVel[num86] * num87;
						value = new DrawData(beetleTexture, new Vector2((int)(Position.X - screenPosition.X + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)(drawPlayer.height / 2))) + drawPlayer.beetlePos[num86] + value12, new Microsoft.Xna.Framework.Rectangle(0, beetleTexture.Height / 3 * drawPlayer.beetleFrame + 1, beetleTexture.Width, beetleTexture.Height / 3 - 2), color29, 0f, new Vector2(beetleTexture.Width / 2, beetleTexture.Height / 6), 1f, spriteEffects, 0);
						playerDrawData.Add(value);
					}
					value = new DrawData(beetleTexture, new Vector2((int)(Position.X - screenPosition.X + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)(drawPlayer.height / 2))) + drawPlayer.beetlePos[num86], new Microsoft.Xna.Framework.Rectangle(0, beetleTexture.Height / 3 * drawPlayer.beetleFrame + 1, beetleTexture.Width, beetleTexture.Height / 3 - 2), color12, 0f, new Vector2(beetleTexture.Width / 2, beetleTexture.Height / 6), 1f, spriteEffects, 0);
					playerDrawData.Add(value);
				}
			}
			if (rotation != 0f)
			{
				Vector2 value13 = Position - screenPosition + rotationOrigin;
				Vector2 value14 = drawPlayer.position + rotationOrigin;
				Matrix matrix = Matrix.CreateRotationZ(rotation);
				for (int num89 = 0; num89 < playerDrawDust.Count; num89++)
				{
					Vector2 position4 = dust[playerDrawDust[num89]].position - value14;
					position4 = Vector2.Transform(position4, matrix);
					dust[playerDrawDust[num89]].position = position4 + value14;
				}
				for (int num90 = 0; num90 < playerDrawGore.Count; num90++)
				{
					Vector2 position5 = gore[playerDrawGore[num90]].position - value14;
					position5 = Vector2.Transform(position5, matrix);
					gore[playerDrawGore[num90]].position = position5 + value14;
				}
				for (int num91 = 0; num91 < playerDrawData.Count; num91++)
				{
					value = playerDrawData[num91];
					if (!value.ignorePlayerRotation)
					{
						Vector2 position6 = value.position - value13;
						position6 = Vector2.Transform(position6, matrix);
						value.position = position6 + value13;
						value.rotation += rotation;
						playerDrawData[num91] = value;
					}
				}
			}
			int num92 = -1;
			for (int num93 = 0; num93 <= playerDrawData.Count; num93++)
			{
				if (num == num93)
				{
					if (num92 != 0)
					{
						pixelShader.CurrentTechnique.Passes[0].Apply();
						num92 = 0;
					}
					projectile[drawPlayer.heldProj].gfxOffY = drawPlayer.gfxOffY;
					try
					{
						DrawProj(drawPlayer.heldProj);
					}
					catch
					{
						projectile[drawPlayer.heldProj].active = false;
					}
				}
				if (num93 != playerDrawData.Count)
				{
					value = playerDrawData[num93];
					if (!value.sourceRect.HasValue)
					{
						value.sourceRect = value.texture.Frame();
					}
					if (value.shader >= 0)
					{
						GameShaders.Hair.Apply(0, drawPlayer, value);
						GameShaders.Armor.Apply(value.shader, drawPlayer, value);
					}
					else if (drawPlayer.head == 0)
					{
						GameShaders.Hair.Apply(0, drawPlayer, value);
						GameShaders.Armor.Apply(num5, drawPlayer, value);
					}
					else
					{
						GameShaders.Armor.Apply(0, drawPlayer, value);
						GameShaders.Hair.Apply((short)(-value.shader), drawPlayer, value);
					}
					num92 = value.shader;
					value.Draw(spriteBatch);
				}
			}
			pixelShader.CurrentTechnique.Passes[0].Apply();
			if (!drawPlayer.mount.Active || drawPlayer.mount.Type != 11)
			{
				return;
			}
			for (int num94 = 0; num94 < 1000; num94++)
			{
				if (projectile[num94].active && projectile[num94].owner == drawPlayer.whoAmI && projectile[num94].type == 591)
				{
					instance.DrawProj(num94);
				}
			}
			return;
			IL_5b88:
			if (drawPlayer.shoe > 0 && drawPlayer.shoe < 18)
			{
				value = new DrawData(accShoesTexture[drawPlayer.shoe], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f)) + drawPlayer.legPosition + vector2, drawPlayer.legFrame, color14, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
				value.shader = shader6;
				playerDrawData.Add(value);
			}
			if (drawPlayer.wearsRobe)
			{
				goto IL_5852;
			}
			goto IL_5c63;
			IL_5852:
			if (drawPlayer.legs > 0 && drawPlayer.legs < 135 && (drawPlayer.shoe != 15 || drawPlayer.wearsRobe))
			{
				if (!drawPlayer.invis)
				{
					value = new DrawData(armorLegTexture[drawPlayer.legs], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f)) + drawPlayer.legPosition + vector2, drawPlayer.legFrame, color14, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
					value.shader = shader;
					playerDrawData.Add(value);
					if (num15 != -1)
					{
						value = new DrawData(glowMaskTexture[num15], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f)) + drawPlayer.legPosition + vector2, drawPlayer.legFrame, newColor4, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
						value.shader = shader;
						playerDrawData.Add(value);
					}
				}
			}
			else if (!drawPlayer.invis && drawPlayer.shoe != 15)
			{
				value = new DrawData(playerTextures[skinVariant, 11], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f)) + drawPlayer.legPosition + vector2, drawPlayer.legFrame, color9, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
				playerDrawData.Add(value);
				value = new DrawData(playerTextures[skinVariant, 12], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f)) + drawPlayer.legPosition + vector2, drawPlayer.legFrame, color10, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
				playerDrawData.Add(value);
			}
			if (!drawPlayer.wearsRobe)
			{
				goto IL_5b88;
			}
			goto IL_5c63;
		}

		protected void DrawItem(Item item, int whoami)
		{
			int num8 = (int)((double)item.position.X + (double)item.width * 0.5) / 16;
			int offScreenTile = Lighting.offScreenTiles;
			int num9 = (int)((double)item.position.Y + (double)item.height * 0.5) / 16;
			int offScreenTile2 = Lighting.offScreenTiles;
			Microsoft.Xna.Framework.Color color = Lighting.GetColor((int)((double)item.position.X + (double)item.width * 0.5) / 16, (int)((double)item.position.Y + (double)item.height * 0.5) / 16);
			if (!gamePaused && base.IsActive && item.type >= 71 && item.type <= 74 && (double)(Math.Abs(item.velocity.X) + Math.Abs(item.velocity.Y)) > 0.2)
			{
				float num = (float)rand.Next(500) - (Math.Abs(item.velocity.X) + Math.Abs(item.velocity.Y)) * 20f;
				int num2 = item.type - 72;
				num -= (float)(num2 * 20);
				int type = 244 + item.type - 71;
				if (item.isBeingGrabbed)
				{
					num /= 100f;
				}
				if (num < (float)((int)color.R / 70 + 1))
				{
					int num3 = Dust.NewDust(item.position - new Vector2(1f, 2f), item.width, item.height, type, 0f, 0f, 254, default(Microsoft.Xna.Framework.Color), 0.25f);
					dust[num3].velocity *= 0f;
				}
			}
			float rotation = item.velocity.X * 0.2f;
			float scale = 1f;
			Microsoft.Xna.Framework.Color currentColor = item.GetAlpha(color);
			ItemSlot.GetItemLight(ref currentColor, ref scale, item);
			float num4 = item.height - itemTexture[item.type].Height;
			float num5 = item.width / 2 - itemTexture[item.type].Width / 2;
			if (item.type >= 71 && item.type <= 74)
			{
				int num6 = item.type - 71;
				itemFrameCounter[whoami]++;
				if (itemFrameCounter[whoami] > 5)
				{
					itemFrameCounter[whoami] = 0;
					itemFrame[whoami]++;
				}
				if (itemFrame[whoami] > 7)
				{
					itemFrame[whoami] = 0;
				}
				int width = coinTexture[num6].Width;
				int num7 = coinTexture[num6].Height / 8;
				num5 = item.width / 2 - coinTexture[num6].Width / 2;
				spriteBatch.Draw(coinTexture[num6], new Vector2(item.position.X - screenPosition.X + (float)(width / 2) + num5, item.position.Y - screenPosition.Y + (float)(num7 / 2) + num4), new Microsoft.Xna.Framework.Rectangle(0, itemFrame[whoami] * num7 + 1, itemTexture[item.type].Width, num7), currentColor, rotation, new Vector2(width / 2, num7 / 2), scale, SpriteEffects.None, 0f);
			}
			else if (ItemID.Sets.NebulaPickup[item.type])
			{
				itemFrameCounter[whoami]++;
				if (itemFrameCounter[whoami] > 5)
				{
					itemFrameCounter[whoami] = 0;
					itemFrame[whoami]++;
				}
				if (itemFrame[whoami] >= 4)
				{
					itemFrame[whoami] = 0;
				}
				Microsoft.Xna.Framework.Rectangle rectangle = itemTexture[item.type].Frame(1, 4, 0, itemFrame[whoami]);
				num5 = item.width / 2 - rectangle.Width / 2;
				num4 = item.height - rectangle.Height;
				spriteBatch.Draw(itemTexture[item.type], new Vector2(item.position.X - screenPosition.X + (float)(rectangle.Width / 2) + num5, item.position.Y - screenPosition.Y + (float)(rectangle.Height / 2) + num4), rectangle, currentColor, rotation, rectangle.Size() / 2f, scale, SpriteEffects.None, 0f);
			}
			else if (ItemID.Sets.AnimatesAsSoul[item.type])
			{
				itemFrameCounter[whoami]++;
				if (itemFrameCounter[whoami] > 5)
				{
					itemFrameCounter[whoami] = 0;
					itemFrame[whoami]++;
				}
				if (itemFrame[whoami] >= 4)
				{
					itemFrame[whoami] = 0;
				}
				Microsoft.Xna.Framework.Rectangle rectangle2 = itemTexture[item.type].Frame(1, 4, 0, itemFrame[whoami]);
				num5 = item.width / 2 - rectangle2.Width / 2;
				num4 = item.height - rectangle2.Height;
				spriteBatch.Draw(itemTexture[item.type], new Vector2(item.position.X - screenPosition.X + (float)(rectangle2.Width / 2) + num5, item.position.Y - screenPosition.Y + (float)(rectangle2.Height / 2) + num4), rectangle2, currentColor, rotation, rectangle2.Size() / 2f, scale, SpriteEffects.None, 0f);
			}
			else if (item.type >= 1522 && item.type <= 1527)
			{
				spriteBatch.Draw(itemTexture[item.type], new Vector2(item.position.X - screenPosition.X + (float)(itemTexture[item.type].Width / 2) + num5, item.position.Y - screenPosition.Y + (float)(itemTexture[item.type].Height / 2) + num4 + 2f), new Microsoft.Xna.Framework.Rectangle(0, 0, itemTexture[item.type].Width, itemTexture[item.type].Height), new Microsoft.Xna.Framework.Color(250, 250, 250, (int)mouseTextColor / 2), rotation, new Vector2(itemTexture[item.type].Width / 2, itemTexture[item.type].Height / 2), (float)(int)mouseTextColor / 1000f + 0.8f, SpriteEffects.None, 0f);
			}
			else
			{
				spriteBatch.Draw(itemTexture[item.type], new Vector2(item.position.X - screenPosition.X + (float)(itemTexture[item.type].Width / 2) + num5, item.position.Y - screenPosition.Y + (float)(itemTexture[item.type].Height / 2) + num4 + 2f), new Microsoft.Xna.Framework.Rectangle(0, 0, itemTexture[item.type].Width, itemTexture[item.type].Height), currentColor, rotation, new Vector2(itemTexture[item.type].Width / 2, itemTexture[item.type].Height / 2), scale, SpriteEffects.None, 0f);
				if (item.color != default(Microsoft.Xna.Framework.Color))
				{
					spriteBatch.Draw(itemTexture[item.type], new Vector2(item.position.X - screenPosition.X + (float)(itemTexture[item.type].Width / 2) + num5, item.position.Y - screenPosition.Y + (float)(itemTexture[item.type].Height / 2) + num4 + 2f), new Microsoft.Xna.Framework.Rectangle(0, 0, itemTexture[item.type].Width, itemTexture[item.type].Height), item.GetColor(color), rotation, new Vector2(itemTexture[item.type].Width / 2, itemTexture[item.type].Height / 2), scale, SpriteEffects.None, 0f);
				}
				if (item.glowMask != -1)
				{
					spriteBatch.Draw(glowMaskTexture[item.glowMask], new Vector2(item.position.X - screenPosition.X + (float)(itemTexture[item.type].Width / 2) + num5, item.position.Y - screenPosition.Y + (float)(itemTexture[item.type].Height / 2) + num4 + 2f), new Microsoft.Xna.Framework.Rectangle(0, 0, itemTexture[item.type].Width, itemTexture[item.type].Height), new Microsoft.Xna.Framework.Color(250, 250, 250, item.alpha), rotation, new Vector2(itemTexture[item.type].Width / 2, itemTexture[item.type].Height / 2), scale, SpriteEffects.None, 0f);
				}
			}
		}

		protected void DrawRain()
		{
			bool ısActive = base.IsActive;
			Microsoft.Xna.Framework.Rectangle[] array = new Microsoft.Xna.Framework.Rectangle[6];
			for (int i = 0; i < array.Length; i++)
			{
				array[i] = new Microsoft.Xna.Framework.Rectangle(i * 4, 0, 2, 40);
			}
			for (int j = 0; j < maxRain; j++)
			{
				if (Main.rain[j].active)
				{
					Rain rain = Main.rain[j];
					spriteBatch.Draw(rainTexture, rain.position - screenPosition, array[rain.type], Lighting.GetColor((int)(rain.position.X + 4f) >> 4, (int)(rain.position.Y + 4f) >> 4) * 0.85f, rain.rotation, Vector2.Zero, rain.scale, SpriteEffects.None, 0f);
					if (ısActive)
					{
						rain.Update();
					}
				}
			}
			TimeLogger.DetailedDrawTime(23);
		}

		protected void DrawDust()
		{
			Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)screenPosition.X - 500, (int)screenPosition.Y - 50, screenWidth + 1000, screenHeight + 100);
			rectangle = new Microsoft.Xna.Framework.Rectangle((int)screenPosition.X - 1000, (int)screenPosition.Y - 1050, screenWidth + 2000, screenHeight + 2100);
			Microsoft.Xna.Framework.Rectangle rectangle2 = rectangle = rectangle;
			ArmorShaderData armorShaderData = null;
			spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, RasterizerState.CullNone, null, Transform);
			for (int i = 0; i < numDust; i++)
			{
				Dust dust = Main.dust[i];
				if (!dust.active)
				{
					continue;
				}
				if ((dust.type >= 130 && dust.type <= 134) || (dust.type >= 219 && dust.type <= 223) || dust.type == 226)
				{
					rectangle = rectangle2;
				}
				if (new Microsoft.Xna.Framework.Rectangle((int)dust.position.X, (int)dust.position.Y, 4, 4).Intersects(rectangle))
				{
					float scale = dust.scale;
					if (dust.shader != armorShaderData)
					{
						spriteBatch.End();
						armorShaderData = dust.shader;
						if (armorShaderData == null)
						{
							spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, RasterizerState.CullNone, null, Transform);
						}
						else
						{
							spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, RasterizerState.CullNone, null, Transform);
							dust.shader.Apply(null);
						}
					}
					if (dust.type >= 130 && dust.type <= 134)
					{
						float num = Math.Abs(dust.velocity.X) + Math.Abs(dust.velocity.Y);
						num *= 0.3f;
						num *= 10f;
						if (num > 10f)
						{
							num = 10f;
						}
						for (int j = 0; (float)j < num; j++)
						{
							Vector2 velocity = dust.velocity;
							Vector2 value = dust.position - velocity * j;
							float scale2 = dust.scale * (1f - (float)j / 10f);
							Microsoft.Xna.Framework.Color color = Lighting.GetColor((int)((double)dust.position.X + 4.0) / 16, (int)((double)dust.position.Y + 4.0) / 16);
							color = dust.GetAlpha(color);
							spriteBatch.Draw(dustTexture, value - screenPosition, dust.frame, color, dust.rotation, new Vector2(4f, 4f), scale2, SpriteEffects.None, 0f);
						}
					}
					else if (dust.type >= 219 && dust.type <= 223 && dust.fadeIn == 0f)
					{
						float num2 = Math.Abs(dust.velocity.X) + Math.Abs(dust.velocity.Y);
						num2 *= 0.3f;
						num2 *= 10f;
						if (num2 > 10f)
						{
							num2 = 10f;
						}
						for (int k = 0; (float)k < num2; k++)
						{
							Vector2 velocity2 = dust.velocity;
							Vector2 value2 = dust.position - velocity2 * k;
							float scale3 = dust.scale * (1f - (float)k / 10f);
							Microsoft.Xna.Framework.Color color2 = Lighting.GetColor((int)((double)dust.position.X + 4.0) / 16, (int)((double)dust.position.Y + 4.0) / 16);
							color2 = dust.GetAlpha(color2);
							spriteBatch.Draw(dustTexture, value2 - screenPosition, dust.frame, color2, dust.rotation, new Vector2(4f, 4f), scale3, SpriteEffects.None, 0f);
						}
					}
					else if (dust.type == 264 && dust.fadeIn == 0f)
					{
						float num3 = Math.Abs(dust.velocity.X) + Math.Abs(dust.velocity.Y);
						num3 *= 10f;
						if (num3 > 10f)
						{
							num3 = 10f;
						}
						for (int l = 0; (float)l < num3; l++)
						{
							Vector2 velocity3 = dust.velocity;
							Vector2 value3 = dust.position - velocity3 * l;
							float scale4 = dust.scale * (1f - (float)l / 10f);
							Microsoft.Xna.Framework.Color color3 = Lighting.GetColor((int)((double)dust.position.X + 4.0) / 16, (int)((double)dust.position.Y + 4.0) / 16);
							color3 = dust.GetAlpha(color3) * 0.3f;
							spriteBatch.Draw(dustTexture, value3 - screenPosition, dust.frame, color3, dust.rotation, new Vector2(5f), scale4, SpriteEffects.None, 0f);
							color3 = dust.GetColor(color3);
							spriteBatch.Draw(dustTexture, value3 - screenPosition, dust.frame, color3, dust.rotation, new Vector2(5f), scale4, SpriteEffects.None, 0f);
						}
					}
					else if (dust.type == 226 && dust.fadeIn == 0f)
					{
						float num4 = Math.Abs(dust.velocity.X) + Math.Abs(dust.velocity.Y);
						num4 *= 0.3f;
						num4 *= 10f;
						if (num4 > 10f)
						{
							num4 = 10f;
						}
						for (int m = 0; (float)m < num4; m++)
						{
							Vector2 velocity4 = dust.velocity;
							Vector2 value4 = dust.position - velocity4 * m;
							float scale5 = dust.scale * (1f - (float)m / 10f);
							Microsoft.Xna.Framework.Color color4 = Lighting.GetColor((int)((double)dust.position.X + 4.0) / 16, (int)((double)dust.position.Y + 4.0) / 16);
							color4 = dust.GetAlpha(color4);
							spriteBatch.Draw(dustTexture, value4 - screenPosition, dust.frame, color4, dust.rotation, new Vector2(4f, 4f), scale5, SpriteEffects.None, 0f);
						}
					}
					Microsoft.Xna.Framework.Color newColor = Lighting.GetColor((int)((double)dust.position.X + 4.0) / 16, (int)((double)dust.position.Y + 4.0) / 16);
					if (dust.type == 6 || dust.type == 15 || (dust.noLight && dust.type < 86 && dust.type > 91) || (dust.type >= 59 && dust.type <= 64))
					{
						newColor = Microsoft.Xna.Framework.Color.White;
					}
					newColor = dust.GetAlpha(newColor);
					if (dust.type == 213)
					{
						scale = 1f;
					}
					spriteBatch.Draw(dustTexture, dust.position - screenPosition, dust.frame, newColor, dust.rotation, new Vector2(4f, 4f), scale, SpriteEffects.None, 0f);
					if (dust.color != default(Microsoft.Xna.Framework.Color))
					{
						spriteBatch.Draw(dustTexture, dust.position - screenPosition, dust.frame, dust.GetColor(newColor), dust.rotation, new Vector2(4f, 4f), scale, SpriteEffects.None, 0f);
					}
					if (newColor == Microsoft.Xna.Framework.Color.Black)
					{
						dust.active = false;
					}
				}
				else
				{
					dust.active = false;
				}
			}
			spriteBatch.End();
			pixelShader.CurrentTechnique.Passes[0].Apply();
			TimeLogger.DetailedDrawTime(25);
		}

		private static void HelpText()
		{
			bool flag = false;
			if (player[myPlayer].statLifeMax > 100)
			{
				flag = true;
			}
			bool flag2 = false;
			if (player[myPlayer].statManaMax > 0)
			{
				flag2 = true;
			}
			bool flag3 = true;
			bool flag4 = false;
			bool flag5 = false;
			bool flag6 = false;
			bool flag7 = false;
			bool flag8 = false;
			bool flag9 = false;
			for (int i = 0; i < 58; i++)
			{
				if (player[myPlayer].inventory[i].pick > 0 && player[myPlayer].inventory[i].type != 3509)
				{
					flag3 = false;
				}
				if (player[myPlayer].inventory[i].axe > 0 && player[myPlayer].inventory[i].type != 3506)
				{
					flag3 = false;
				}
				if (player[myPlayer].inventory[i].hammer > 0)
				{
					flag3 = false;
				}
				if (player[myPlayer].inventory[i].type == 11 || player[myPlayer].inventory[i].type == 12 || player[myPlayer].inventory[i].type == 13 || player[myPlayer].inventory[i].type == 14)
				{
					flag4 = true;
				}
				if (player[myPlayer].inventory[i].type == 19 || player[myPlayer].inventory[i].type == 20 || player[myPlayer].inventory[i].type == 21 || player[myPlayer].inventory[i].type == 22)
				{
					flag5 = true;
				}
				if (player[myPlayer].inventory[i].type == 75)
				{
					flag6 = true;
				}
				if (player[myPlayer].inventory[i].type == 38)
				{
					flag7 = true;
				}
				if (player[myPlayer].inventory[i].type == 68 || player[myPlayer].inventory[i].type == 70 || player[myPlayer].inventory[i].type == 1330)
				{
					flag8 = true;
				}
				if (player[myPlayer].inventory[i].type == 84)
				{
					flag9 = true;
				}
			}
			bool flag10 = false;
			bool flag11 = false;
			bool flag12 = false;
			bool flag13 = false;
			bool flag14 = false;
			bool flag15 = false;
			bool flag16 = false;
			bool flag17 = false;
			bool flag18 = false;
			for (int j = 0; j < 200; j++)
			{
				if (npc[j].active)
				{
					if (npc[j].type == 17)
					{
						flag10 = true;
					}
					if (npc[j].type == 18)
					{
						flag11 = true;
					}
					if (npc[j].type == 19)
					{
						flag13 = true;
					}
					if (npc[j].type == 20)
					{
						flag12 = true;
					}
					if (npc[j].type == 54)
					{
						flag18 = true;
					}
					if (npc[j].type == 124)
					{
						flag15 = true;
					}
					if (npc[j].type == 107)
					{
						flag14 = true;
					}
					if (npc[j].type == 108)
					{
						flag16 = true;
					}
					if (npc[j].type == 38)
					{
						flag17 = true;
					}
				}
			}
			while (true)
			{
				helpText++;
				if (flag3)
				{
					if (helpText == 1)
					{
						npcChatText = Lang.dialog(177);
						return;
					}
					if (helpText == 2)
					{
						npcChatText = Lang.dialog(178);
						return;
					}
					if (helpText == 3)
					{
						npcChatText = Lang.dialog(179);
						return;
					}
					if (helpText == 4)
					{
						npcChatText = Lang.dialog(180);
						return;
					}
					if (helpText == 5)
					{
						npcChatText = Lang.dialog(181);
						return;
					}
					if (helpText == 6)
					{
						npcChatText = Lang.dialog(182);
						return;
					}
				}
				if (flag3 && !flag4 && !flag5 && helpText == 11)
				{
					npcChatText = Lang.dialog(183);
					return;
				}
				if (flag3 && flag4 && !flag5)
				{
					if (helpText == 21)
					{
						npcChatText = Lang.dialog(184);
						return;
					}
					if (helpText == 22)
					{
						npcChatText = Lang.dialog(185);
						return;
					}
				}
				if (flag3 && flag5)
				{
					if (helpText == 31)
					{
						npcChatText = Lang.dialog(186);
						return;
					}
					if (helpText == 32)
					{
						npcChatText = Lang.dialog(187);
						return;
					}
				}
				if (!flag && helpText == 41)
				{
					npcChatText = Lang.dialog(188);
					return;
				}
				if (!flag2 && helpText == 42)
				{
					npcChatText = Lang.dialog(189);
					return;
				}
				if (!flag2 && !flag6 && helpText == 43)
				{
					npcChatText = Lang.dialog(190);
					return;
				}
				if (!flag10 && !flag11)
				{
					if (helpText == 51)
					{
						npcChatText = Lang.dialog(191);
						return;
					}
					if (helpText == 52)
					{
						npcChatText = Lang.dialog(192);
						return;
					}
					if (helpText == 53)
					{
						npcChatText = Lang.dialog(193);
						return;
					}
					if (helpText == 54)
					{
						npcChatText = Lang.dialog(194);
						return;
					}
				}
				if (!flag10 && helpText == 61)
				{
					npcChatText = Lang.dialog(195);
					return;
				}
				if (!flag11 && helpText == 62)
				{
					npcChatText = Lang.dialog(196);
					return;
				}
				if (!flag13 && helpText == 63)
				{
					npcChatText = Lang.dialog(197);
					return;
				}
				if (!flag12 && helpText == 64)
				{
					npcChatText = Lang.dialog(198);
					return;
				}
				if (!flag15 && helpText == 65 && NPC.downedBoss3)
				{
					npcChatText = Lang.dialog(199);
					return;
				}
				if (!flag18 && helpText == 66 && NPC.downedBoss3)
				{
					npcChatText = Lang.dialog(200);
					return;
				}
				if (!flag14 && helpText == 67)
				{
					npcChatText = Lang.dialog(201);
					return;
				}
				if (!flag17 && NPC.downedBoss2 && helpText == 68)
				{
					npcChatText = Lang.dialog(202);
					return;
				}
				if (!flag16 && hardMode && helpText == 69)
				{
					npcChatText = Lang.dialog(203);
					return;
				}
				if (flag7 && helpText == 71)
				{
					npcChatText = Lang.dialog(204);
					return;
				}
				if (flag8 && helpText == 72)
				{
					npcChatText = Lang.dialog(WorldGen.crimson ? 403 : 205);
					return;
				}
				if ((flag7 || flag8) && helpText == 80)
				{
					npcChatText = Lang.dialog(WorldGen.crimson ? 402 : 206);
					return;
				}
				if (!flag9 && helpText == 201 && !hardMode && !NPC.downedBoss3 && !NPC.downedBoss2)
				{
					npcChatText = Lang.dialog(207);
					return;
				}
				if (helpText == 1000 && !NPC.downedBoss1 && !NPC.downedBoss2)
				{
					npcChatText = Lang.dialog(208);
					return;
				}
				if (helpText == 1001 && !NPC.downedBoss1 && !NPC.downedBoss2)
				{
					npcChatText = Lang.dialog(209);
					return;
				}
				if (helpText == 1002 && !NPC.downedBoss2)
				{
					if (WorldGen.crimson)
					{
						npcChatText = Lang.dialog(331);
					}
					else
					{
						npcChatText = Lang.dialog(210);
					}
					return;
				}
				if (helpText == 1050 && !NPC.downedBoss1 && player[myPlayer].statLifeMax < 200)
				{
					npcChatText = Lang.dialog(211);
					return;
				}
				if (helpText == 1051 && !NPC.downedBoss1 && player[myPlayer].statDefense <= 10)
				{
					npcChatText = Lang.dialog(212);
					return;
				}
				if (helpText == 1052 && !NPC.downedBoss1 && player[myPlayer].statLifeMax >= 200 && player[myPlayer].statDefense > 10)
				{
					npcChatText = Lang.dialog(213);
					return;
				}
				if (helpText == 1053 && NPC.downedBoss1 && !NPC.downedBoss2 && player[myPlayer].statLifeMax < 300)
				{
					npcChatText = Lang.dialog(214);
					return;
				}
				if (helpText == 1054 && NPC.downedBoss1 && !NPC.downedBoss2 && player[myPlayer].statLifeMax >= 300)
				{
					npcChatText = Lang.dialog(215);
					return;
				}
				if (helpText == 1055 && NPC.downedBoss1 && !NPC.downedBoss2 && player[myPlayer].statLifeMax >= 300)
				{
					npcChatText = Lang.dialog(216);
					return;
				}
				if (helpText == 1056 && NPC.downedBoss1 && NPC.downedBoss2 && !NPC.downedBoss3)
				{
					npcChatText = Lang.dialog(217);
					return;
				}
				if (helpText == 1057 && NPC.downedBoss1 && NPC.downedBoss2 && NPC.downedBoss3 && !hardMode && player[myPlayer].statLifeMax < 400)
				{
					npcChatText = Lang.dialog(218);
					return;
				}
				if (helpText == 1058 && NPC.downedBoss1 && NPC.downedBoss2 && NPC.downedBoss3 && !hardMode && player[myPlayer].statLifeMax >= 400)
				{
					npcChatText = Lang.dialog(219);
					return;
				}
				if (helpText == 1059 && NPC.downedBoss1 && NPC.downedBoss2 && NPC.downedBoss3 && !hardMode && player[myPlayer].statLifeMax >= 400)
				{
					npcChatText = Lang.dialog(220);
					return;
				}
				if (helpText == 1060 && NPC.downedBoss1 && NPC.downedBoss2 && NPC.downedBoss3 && !hardMode && player[myPlayer].statLifeMax >= 400)
				{
					npcChatText = Lang.dialog(221);
					return;
				}
				if (helpText == 1061 && hardMode)
				{
					npcChatText = Lang.dialog(WorldGen.crimson ? 401 : 222);
					return;
				}
				if (helpText == 1062 && hardMode)
				{
					break;
				}
				if (helpText > 1100)
				{
					helpText = 0;
				}
			}
			npcChatText = Lang.dialog(223);
		}

		protected void GUIChatDrawInner()
		{
			if (player[myPlayer].talkNPC < 0 && player[myPlayer].sign == -1)
			{
				npcChatText = "";
				return;
			}
			if (netMode == 0 && autoPause && player[myPlayer].talkNPC >= 0)
			{
				if (npc[player[myPlayer].talkNPC].type == 105)
				{
					npc[player[myPlayer].talkNPC].Transform(107);
				}
				if (npc[player[myPlayer].talkNPC].type == 106)
				{
					npc[player[myPlayer].talkNPC].Transform(108);
				}
				if (npc[player[myPlayer].talkNPC].type == 123)
				{
					npc[player[myPlayer].talkNPC].Transform(124);
				}
				if (npc[player[myPlayer].talkNPC].type == 354)
				{
					npc[player[myPlayer].talkNPC].Transform(353);
				}
				if (npc[player[myPlayer].talkNPC].type == 376)
				{
					npc[player[myPlayer].talkNPC].Transform(369);
				}
			}
			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(200, 200, 200, 200);
			int num = (mouseTextColor * 2 + 255) / 3;
			Microsoft.Xna.Framework.Color textColor = new Microsoft.Xna.Framework.Color(num, num, num, num);
			int lineAmount;
			string[] array = Utils.WordwrapString(npcChatText, fontMouseText, 460, 10, out lineAmount);
			if (editSign)
			{
				textBlinkerCount++;
				if (textBlinkerCount >= 20)
				{
					if (textBlinkerState == 0)
					{
						textBlinkerState = 1;
					}
					else
					{
						textBlinkerState = 0;
					}
					textBlinkerCount = 0;
				}
				if (textBlinkerState == 1)
				{
					string[] array2;
					string[] array3 = array2 = array;
					int num2 = lineAmount;
					IntPtr ıntPtr = (IntPtr)num2;
					array3[num2] = array2[(long)ıntPtr] + "|";
				}
			}
			lineAmount++;
			spriteBatch.Draw(chatBackTexture, new Vector2(screenWidth / 2 - chatBackTexture.Width / 2, 100f), new Microsoft.Xna.Framework.Rectangle(0, 0, chatBackTexture.Width, (lineAmount + 1) * 30), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			spriteBatch.Draw(chatBackTexture, new Vector2(screenWidth / 2 - chatBackTexture.Width / 2, 100 + (lineAmount + 1) * 30), new Microsoft.Xna.Framework.Rectangle(0, chatBackTexture.Height - 30, chatBackTexture.Width, 30), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			for (int i = 0; i < lineAmount; i++)
			{
				Utils.DrawBorderStringFourWay(spriteBatch, fontMouseText, array[i], 170 + (screenWidth - 800) / 2, 120 + i * 30, textColor, Microsoft.Xna.Framework.Color.Black, Vector2.Zero);
			}
			Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(screenWidth / 2 - chatBackTexture.Width / 2, 100, chatBackTexture.Width, (lineAmount + 2) * 30);
			if (npcChatCornerItem != 0)
			{
				Vector2 position = new Vector2(screenWidth / 2 + chatBackTexture.Width / 2, 100 + (lineAmount + 1) * 30 + 30);
				position -= Vector2.One * 8f;
				Item ıtem = new Item();
				ıtem.netDefaults(npcChatCornerItem);
				float num3 = 1f;
				Texture2D texture2D = itemTexture[ıtem.type];
				if (texture2D.Width > 32 || texture2D.Height > 32)
				{
					num3 = ((texture2D.Width <= texture2D.Height) ? (32f / (float)texture2D.Height) : (32f / (float)texture2D.Width));
				}
				spriteBatch.Draw(texture2D, position, null, ıtem.GetAlpha(Microsoft.Xna.Framework.Color.White), 0f, new Vector2(texture2D.Width, texture2D.Height), num3, SpriteEffects.None, 0f);
				if (ıtem.color != default(Microsoft.Xna.Framework.Color))
				{
					spriteBatch.Draw(texture2D, position, null, ıtem.GetColor(ıtem.color), 0f, new Vector2(texture2D.Width, texture2D.Height), num3, SpriteEffects.None, 0f);
				}
				if (new Microsoft.Xna.Framework.Rectangle((int)position.X - (int)((float)texture2D.Width * num3), (int)position.Y - (int)((float)texture2D.Height * num3), (int)((float)texture2D.Width * num3), (int)((float)texture2D.Height * num3)).Contains(new Microsoft.Xna.Framework.Point(mouseX, mouseY)))
				{
					MouseText(ıtem.Name, -11, 0);
				}
			}
			num = mouseTextColor;
			textColor = new Microsoft.Xna.Framework.Color(num, (int)((double)num / 1.1), num / 2, num);
			string text = "";
			string text2 = "";
			int num4 = player[myPlayer].statLifeMax2 - player[myPlayer].statLife;
			for (int j = 0; j < 22; j++)
			{
				int num5 = player[myPlayer].buffType[j];
				if (debuff[num5] && player[myPlayer].buffTime[j] > 5 && num5 != 28 && num5 != 34 && num5 != 87 && num5 != 89 && num5 != 21 && num5 != 86)
				{
					num4 += 1000;
				}
			}
			if (player[myPlayer].sign > -1)
			{
				text = ((!editSign) ? Lang.inter[48].Value : Lang.inter[47].Value);
			}
			else if (npc[player[myPlayer].talkNPC].type == 20)
			{
				text = Lang.inter[28].Value;
				text2 = Lang.inter[49].Value;
			}
			else if (npc[player[myPlayer].talkNPC].type == 207)
			{
				text = Lang.inter[28].Value;
				text2 = Lang.inter[107].Value;
			}
			else if (npc[player[myPlayer].talkNPC].type == 453)
			{
				text = Lang.inter[28].Value;
			}
			else if (npc[player[myPlayer].talkNPC].type == 353)
			{
				text = Lang.inter[28].Value;
				text2 = "Hair Style";
			}
			else if (npc[player[myPlayer].talkNPC].type == 368)
			{
				text = Lang.inter[28].Value;
			}
			else if (npc[player[myPlayer].talkNPC].type == 369)
			{
				text = Lang.inter[64].Value;
			}
			else if (npc[player[myPlayer].talkNPC].type == 17 || npc[player[myPlayer].talkNPC].type == 19 || npc[player[myPlayer].talkNPC].type == 38 || npc[player[myPlayer].talkNPC].type == 54 || npc[player[myPlayer].talkNPC].type == 107 || npc[player[myPlayer].talkNPC].type == 108 || npc[player[myPlayer].talkNPC].type == 124 || npc[player[myPlayer].talkNPC].type == 142 || npc[player[myPlayer].talkNPC].type == 160 || npc[player[myPlayer].talkNPC].type == 178 || npc[player[myPlayer].talkNPC].type == 207 || npc[player[myPlayer].talkNPC].type == 208 || npc[player[myPlayer].talkNPC].type == 209 || npc[player[myPlayer].talkNPC].type == 227 || npc[player[myPlayer].talkNPC].type == 228 || npc[player[myPlayer].talkNPC].type == 229)
			{
				text = Lang.inter[28].Value;
				if (npc[player[myPlayer].talkNPC].type == 107)
				{
					text2 = Lang.inter[19].Value;
				}
			}
			else if (npc[player[myPlayer].talkNPC].type == 37)
			{
				if (!dayTime)
				{
					text = Lang.inter[50].Value;
				}
			}
			else if (npc[player[myPlayer].talkNPC].type == 22)
			{
				text = Lang.inter[51].Value;
				text2 = Lang.inter[25].Value;
			}
			else if (npc[player[myPlayer].talkNPC].type == 441)
			{
				if (player[myPlayer].taxMoney <= 0)
				{
					text = Lang.inter[89].Value;
				}
				else
				{
					string text3 = "";
					int num6 = 0;
					int num7 = 0;
					int num8 = 0;
					int num9 = 0;
					int num10 = player[myPlayer].taxMoney;
					if (num10 < 0)
					{
						num10 = 0;
					}
					num4 = num10;
					if (num10 >= 1000000)
					{
						num6 = num10 / 1000000;
						num10 -= num6 * 1000000;
					}
					if (num10 >= 10000)
					{
						num7 = num10 / 10000;
						num10 -= num7 * 10000;
					}
					if (num10 >= 100)
					{
						num8 = num10 / 100;
						num10 -= num8 * 100;
					}
					if (num10 >= 1)
					{
						num9 = num10;
					}
					if (num6 > 0)
					{
						object obj = text3;
						text3 = string.Concat(obj, num6, " ", Lang.inter[15], " ");
					}
					if (num7 > 0)
					{
						object obj = text3;
						text3 = string.Concat(obj, num7, " ", Lang.inter[16], " ");
					}
					if (num8 > 0)
					{
						object obj = text3;
						text3 = string.Concat(obj, num8, " ", Lang.inter[17], " ");
					}
					if (num9 > 0)
					{
						object obj = text3;
						text3 = string.Concat(obj, num9, " ", Lang.inter[18], " ");
					}
					float num11 = (float)(int)mouseTextColor / 255f;
					if (num6 > 0)
					{
						textColor = new Microsoft.Xna.Framework.Color((byte)(220f * num11), (byte)(220f * num11), (byte)(198f * num11), mouseTextColor);
					}
					else if (num7 > 0)
					{
						textColor = new Microsoft.Xna.Framework.Color((byte)(224f * num11), (byte)(201f * num11), (byte)(92f * num11), mouseTextColor);
					}
					else if (num8 > 0)
					{
						textColor = new Microsoft.Xna.Framework.Color((byte)(181f * num11), (byte)(192f * num11), (byte)(193f * num11), mouseTextColor);
					}
					else if (num9 > 0)
					{
						textColor = new Microsoft.Xna.Framework.Color((byte)(246f * num11), (byte)(138f * num11), (byte)(96f * num11), mouseTextColor);
					}
					if (text3 == "")
					{
						text = Lang.inter[89].Value;
					}
					else
					{
						text3 = text3.Substring(0, text3.Length - 1);
						text = string.Concat(Lang.inter[89], " (", text3, ")");
					}
				}
			}
			else if (npc[player[myPlayer].talkNPC].type == 18)
			{
				string text4 = "";
				int num12 = 0;
				int num13 = 0;
				int num14 = 0;
				int num15 = 0;
				int num16 = num4;
				if (num16 > 0)
				{
					num16 = (int)((double)num16 * 0.75);
					if (num16 < 1)
					{
						num16 = 1;
					}
				}
				if (num16 < 0)
				{
					num16 = 0;
				}
				num4 = num16;
				if (num16 >= 1000000)
				{
					num12 = num16 / 1000000;
					num16 -= num12 * 1000000;
				}
				if (num16 >= 10000)
				{
					num13 = num16 / 10000;
					num16 -= num13 * 10000;
				}
				if (num16 >= 100)
				{
					num14 = num16 / 100;
					num16 -= num14 * 100;
				}
				if (num16 >= 1)
				{
					num15 = num16;
				}
				if (num12 > 0)
				{
					object obj = text4;
					text4 = string.Concat(obj, num12, " ", Lang.inter[15], " ");
				}
				if (num13 > 0)
				{
					object obj = text4;
					text4 = string.Concat(obj, num13, " ", Lang.inter[16], " ");
				}
				if (num14 > 0)
				{
					object obj = text4;
					text4 = string.Concat(obj, num14, " ", Lang.inter[17], " ");
				}
				if (num15 > 0)
				{
					object obj = text4;
					text4 = string.Concat(obj, num15, " ", Lang.inter[18], " ");
				}
				float num17 = (float)(int)mouseTextColor / 255f;
				if (num12 > 0)
				{
					textColor = new Microsoft.Xna.Framework.Color((byte)(220f * num17), (byte)(220f * num17), (byte)(198f * num17), mouseTextColor);
				}
				else if (num13 > 0)
				{
					textColor = new Microsoft.Xna.Framework.Color((byte)(224f * num17), (byte)(201f * num17), (byte)(92f * num17), mouseTextColor);
				}
				else if (num14 > 0)
				{
					textColor = new Microsoft.Xna.Framework.Color((byte)(181f * num17), (byte)(192f * num17), (byte)(193f * num17), mouseTextColor);
				}
				else if (num15 > 0)
				{
					textColor = new Microsoft.Xna.Framework.Color((byte)(246f * num17), (byte)(138f * num17), (byte)(96f * num17), mouseTextColor);
				}
				if (text4 == "")
				{
					text = Lang.inter[54].Value;
				}
				else
				{
					text4 = text4.Substring(0, text4.Length - 1);
					text = Lang.inter[54].Value + " (" + text4 + ")";
				}
			}
			int num18 = 180 + (screenWidth - 800) / 2;
			int num19 = 130 + lineAmount * 30;
			float scale = 0.9f;
			if (mouseX > num18 && (float)mouseX < (float)num18 + fontMouseText.MeasureString(text).X && mouseY > num19 && (float)mouseY < (float)num19 + fontMouseText.MeasureString(text).Y)
			{
				player[myPlayer].mouseInterface = true;
				scale = 1.1f;
				if (!npcChatFocus2)
				{
					PlaySound(12);
				}
				npcChatFocus2 = true;
				player[myPlayer].releaseUseItem = false;
			}
			else
			{
				if (npcChatFocus2)
				{
					PlaySound(12);
				}
				npcChatFocus2 = false;
			}
			Vector2 origin = fontMouseText.MeasureString(text) * 0.5f;
			Utils.DrawBorderStringFourWay(spriteBatch, fontMouseText, text, (float)num18 + origin.X, (float)num19 + origin.Y, textColor, Microsoft.Xna.Framework.Color.Black, origin, scale);
			string value = Lang.inter[52].Value;
			textColor = new Microsoft.Xna.Framework.Color(num, (int)((double)num / 1.1), num / 2, num);
			num18 = num18 + (int)fontMouseText.MeasureString(text).X + 20;
			int num20 = num18 + (int)fontMouseText.MeasureString(value).X;
			num19 = 130 + lineAmount * 30;
			scale = 0.9f;
			if (mouseX > num18 && (float)mouseX < (float)num18 + fontMouseText.MeasureString(value).X && mouseY > num19 && (float)mouseY < (float)num19 + fontMouseText.MeasureString(value).Y)
			{
				scale = 1.1f;
				if (!npcChatFocus1)
				{
					PlaySound(12);
				}
				npcChatFocus1 = true;
				player[myPlayer].releaseUseItem = false;
				player[myPlayer].controlUseItem = false;
			}
			else
			{
				if (npcChatFocus1)
				{
					PlaySound(12);
				}
				npcChatFocus1 = false;
			}
			origin = fontMouseText.MeasureString(value) * 0.5f;
			Utils.DrawBorderStringFourWay(spriteBatch, fontMouseText, value, (float)num18 + origin.X, (float)num19 + origin.Y, textColor, Microsoft.Xna.Framework.Color.Black, origin, scale);
			if (text2 != "")
			{
				Vector2 vector = fontMouseText.MeasureString(text2);
				num18 = num20 + (int)vector.X / 3;
				num19 = 130 + lineAmount * 30;
				scale = 0.9f;
				if (mouseX > num18 && (float)mouseX < (float)num18 + fontMouseText.MeasureString(text2).X && mouseY > num19 && (float)mouseY < (float)num19 + fontMouseText.MeasureString(text2).Y)
				{
					player[myPlayer].mouseInterface = true;
					scale = 1.1f;
					if (!npcChatFocus3)
					{
						PlaySound(12);
					}
					npcChatFocus3 = true;
					player[myPlayer].releaseUseItem = false;
				}
				else
				{
					if (npcChatFocus3)
					{
						PlaySound(12);
					}
					npcChatFocus3 = false;
				}
				origin = fontMouseText.MeasureString(text2) * 0.5f;
				Utils.DrawBorderStringFourWay(spriteBatch, fontMouseText, text2, (float)num18 + origin.X, (float)num19 + origin.Y, textColor, Microsoft.Xna.Framework.Color.Black, origin, scale);
			}
			if (rectangle.Contains(new Microsoft.Xna.Framework.Point(mouseX, mouseY)))
			{
				player[myPlayer].mouseInterface = true;
			}
			if (!mouseLeft || !mouseLeftRelease || !rectangle.Contains(new Microsoft.Xna.Framework.Point(mouseX, mouseY)))
			{
				return;
			}
			mouseLeftRelease = false;
			player[myPlayer].releaseUseItem = false;
			player[myPlayer].mouseInterface = true;
			if (npcChatFocus1)
			{
				player[myPlayer].talkNPC = -1;
				player[myPlayer].sign = -1;
				npcChatCornerItem = 0;
				editSign = false;
				npcChatText = "";
				PlaySound(11);
			}
			else if (npcChatFocus2)
			{
				if (player[myPlayer].sign != -1)
				{
					if (editSign)
					{
						PlaySound(12);
						int num21 = player[myPlayer].sign;
						Sign.TextSign(num21, npcChatText);
						editSign = false;
						if (netMode == 1)
						{
							NetMessage.SendData(47, -1, -1, "", num21);
						}
					}
					else
					{
						PlaySound(12);
						editSign = true;
						clrInput();
					}
				}
				else if (npc[player[myPlayer].talkNPC].type == 369)
				{
					npcChatCornerItem = 0;
					PlaySound(12);
					bool flag = false;
					if (!anglerQuestFinished && !anglerWhoFinishedToday.Contains(player[myPlayer].name))
					{
						int num22 = player[myPlayer].FindItem(anglerQuestItemNetIDs[anglerQuest]);
						if (num22 != -1)
						{
							player[myPlayer].inventory[num22].stack--;
							if (player[myPlayer].inventory[num22].stack <= 0)
							{
								player[myPlayer].inventory[num22] = new Item();
							}
							flag = true;
							PlaySound(24);
							player[myPlayer].anglerQuestsFinished++;
							player[myPlayer].GetAnglerReward();
						}
					}
					npcChatText = Lang.AnglerQuestChat(flag);
					if (flag)
					{
						anglerQuestFinished = true;
						if (netMode == 1)
						{
							NetMessage.SendData(75);
						}
						else
						{
							anglerWhoFinishedToday.Add(player[myPlayer].name);
						}
						AchievementsHelper.HandleAnglerService();
					}
				}
				else if (npc[player[myPlayer].talkNPC].type == 17)
				{
					playerInventory = true;
					npcChatText = "";
					npcShop = 1;
					shop[npcShop].SetupShop(npcShop);
					PlaySound(12);
				}
				else if (npc[player[myPlayer].talkNPC].type == 19)
				{
					playerInventory = true;
					npcChatText = "";
					npcShop = 2;
					shop[npcShop].SetupShop(npcShop);
					PlaySound(12);
				}
				else if (npc[player[myPlayer].talkNPC].type == 124)
				{
					playerInventory = true;
					npcChatText = "";
					npcShop = 8;
					shop[npcShop].SetupShop(npcShop);
					PlaySound(12);
				}
				else if (npc[player[myPlayer].talkNPC].type == 142)
				{
					playerInventory = true;
					npcChatText = "";
					npcShop = 9;
					shop[npcShop].SetupShop(npcShop);
					PlaySound(12);
				}
				else if (npc[player[myPlayer].talkNPC].type == 353)
				{
					playerInventory = true;
					npcChatText = "";
					npcShop = 18;
					shop[npcShop].SetupShop(npcShop);
					PlaySound(12);
				}
				else if (npc[player[myPlayer].talkNPC].type == 368)
				{
					playerInventory = true;
					npcChatText = "";
					npcShop = 19;
					shop[npcShop].SetupShop(npcShop);
					PlaySound(12);
				}
				else if (npc[player[myPlayer].talkNPC].type == 453)
				{
					playerInventory = true;
					npcChatText = "";
					npcShop = 20;
					shop[npcShop].SetupShop(npcShop);
					PlaySound(12);
				}
				else if (npc[player[myPlayer].talkNPC].type == 37)
				{
					if (netMode == 0)
					{
						NPC.SpawnSkeletron();
					}
					else
					{
						NetMessage.SendData(51, -1, -1, "", myPlayer, 1f);
					}
					npcChatText = "";
				}
				else if (npc[player[myPlayer].talkNPC].type == 20)
				{
					playerInventory = true;
					npcChatText = "";
					npcShop = 3;
					shop[npcShop].SetupShop(npcShop);
					PlaySound(12);
				}
				else if (npc[player[myPlayer].talkNPC].type == 38)
				{
					playerInventory = true;
					npcChatText = "";
					npcShop = 4;
					shop[npcShop].SetupShop(npcShop);
					PlaySound(12);
				}
				else if (npc[player[myPlayer].talkNPC].type == 54)
				{
					playerInventory = true;
					npcChatText = "";
					npcShop = 5;
					shop[npcShop].SetupShop(npcShop);
					PlaySound(12);
				}
				else if (npc[player[myPlayer].talkNPC].type == 107)
				{
					playerInventory = true;
					npcChatText = "";
					npcShop = 6;
					shop[npcShop].SetupShop(npcShop);
					PlaySound(12);
				}
				else if (npc[player[myPlayer].talkNPC].type == 108)
				{
					playerInventory = true;
					npcChatText = "";
					npcShop = 7;
					shop[npcShop].SetupShop(npcShop);
					PlaySound(12);
				}
				else if (npc[player[myPlayer].talkNPC].type == 160)
				{
					playerInventory = true;
					npcChatText = "";
					npcShop = 10;
					shop[npcShop].SetupShop(npcShop);
					PlaySound(12);
				}
				else if (npc[player[myPlayer].talkNPC].type == 178)
				{
					playerInventory = true;
					npcChatText = "";
					npcShop = 11;
					shop[npcShop].SetupShop(npcShop);
					PlaySound(12);
				}
				else if (npc[player[myPlayer].talkNPC].type == 207)
				{
					playerInventory = true;
					npcChatText = "";
					npcShop = 12;
					shop[npcShop].SetupShop(npcShop);
					PlaySound(12);
				}
				else if (npc[player[myPlayer].talkNPC].type == 208)
				{
					playerInventory = true;
					npcChatText = "";
					npcShop = 13;
					shop[npcShop].SetupShop(npcShop);
					PlaySound(12);
				}
				else if (npc[player[myPlayer].talkNPC].type == 209)
				{
					playerInventory = true;
					npcChatText = "";
					npcShop = 14;
					shop[npcShop].SetupShop(npcShop);
					PlaySound(12);
				}
				else if (npc[player[myPlayer].talkNPC].type == 227)
				{
					playerInventory = true;
					npcChatText = "";
					npcShop = 15;
					shop[npcShop].SetupShop(npcShop);
					PlaySound(12);
				}
				else if (npc[player[myPlayer].talkNPC].type == 228)
				{
					playerInventory = true;
					npcChatText = "";
					npcShop = 16;
					shop[npcShop].SetupShop(npcShop);
					PlaySound(12);
				}
				else if (npc[player[myPlayer].talkNPC].type == 229)
				{
					playerInventory = true;
					npcChatText = "";
					npcShop = 17;
					shop[npcShop].SetupShop(npcShop);
					PlaySound(12);
				}
				else if (npc[player[myPlayer].talkNPC].type == 22)
				{
					PlaySound(12);
					HelpText();
				}
				else if (npc[player[myPlayer].talkNPC].type == 441)
				{
					if (player[myPlayer].taxMoney > 0)
					{
						int num23 = player[myPlayer].taxMoney;
						while (num23 > 0)
						{
							if (num23 > 1000000)
							{
								int num24 = num23 / 1000000;
								num23 -= 1000000 * num24;
								int number = Item.NewItem((int)player[myPlayer].position.X, (int)player[myPlayer].position.Y, player[myPlayer].width, player[myPlayer].height, 74, num24);
								if (netMode == 1)
								{
									NetMessage.SendData(21, -1, -1, "", number, 1f);
								}
								continue;
							}
							if (num23 > 10000)
							{
								int num25 = num23 / 10000;
								num23 -= 10000 * num25;
								int number2 = Item.NewItem((int)player[myPlayer].position.X, (int)player[myPlayer].position.Y, player[myPlayer].width, player[myPlayer].height, 73, num25);
								if (netMode == 1)
								{
									NetMessage.SendData(21, -1, -1, "", number2, 1f);
								}
								continue;
							}
							if (num23 > 100)
							{
								int num26 = num23 / 100;
								num23 -= 100 * num26;
								int number3 = Item.NewItem((int)player[myPlayer].position.X, (int)player[myPlayer].position.Y, player[myPlayer].width, player[myPlayer].height, 72, num26);
								if (netMode == 1)
								{
									NetMessage.SendData(21, -1, -1, "", number3, 1f);
								}
								continue;
							}
							int num27 = num23;
							if (num27 < 1)
							{
								num27 = 1;
							}
							num23 -= num27;
							int number4 = Item.NewItem((int)player[myPlayer].position.X, (int)player[myPlayer].position.Y, player[myPlayer].width, player[myPlayer].height, 71, num27);
							if (netMode == 1)
							{
								NetMessage.SendData(21, -1, -1, "", number4, 1f);
							}
						}
						npcChatText = Lang.dialog(rand.Next(380, 382));
						player[myPlayer].taxMoney = 0;
					}
					else
					{
						npcChatText = Lang.dialog(rand.Next(390, 401));
					}
				}
				else
				{
					if (npc[player[myPlayer].talkNPC].type != 18)
					{
						return;
					}
					PlaySound(12);
					if (num4 > 0)
					{
						if (player[myPlayer].BuyItem(num4))
						{
							AchievementsHelper.HandleNurseService(num4);
							PlaySound(2, -1, -1, 4);
							player[myPlayer].HealEffect(player[myPlayer].statLifeMax2 - player[myPlayer].statLife);
							if ((double)player[myPlayer].statLife < (double)player[myPlayer].statLifeMax2 * 0.25)
							{
								npcChatText = Lang.dialog(227);
							}
							else if ((double)player[myPlayer].statLife < (double)player[myPlayer].statLifeMax2 * 0.5)
							{
								npcChatText = Lang.dialog(228);
							}
							else if ((double)player[myPlayer].statLife < (double)player[myPlayer].statLifeMax2 * 0.75)
							{
								npcChatText = Lang.dialog(229);
							}
							else
							{
								npcChatText = Lang.dialog(230);
							}
							player[myPlayer].statLife = player[myPlayer].statLifeMax2;
							for (int k = 0; k < 22; k++)
							{
								int num28 = player[myPlayer].buffType[k];
								if (debuff[num28] && player[myPlayer].buffTime[k] > 0 && num28 != 28 && num28 != 34 && num28 != 87 && num28 != 89 && num28 != 21 && num28 != 86)
								{
									player[myPlayer].DelBuff(k);
								}
							}
						}
						else
						{
							int num29 = rand.Next(3);
							if (num29 == 0)
							{
								npcChatText = Lang.dialog(52);
							}
							if (num29 == 1)
							{
								npcChatText = Lang.dialog(53);
							}
							if (num29 == 2)
							{
								npcChatText = Lang.dialog(54);
							}
						}
					}
					else
					{
						int num30 = rand.Next(3);
						if (!ChildSafety.Disabled)
						{
							num30 = rand.Next(1, 3);
						}
						switch (num30)
						{
						case 0:
							npcChatText = Lang.dialog(55);
							break;
						case 1:
							npcChatText = Lang.dialog(56);
							break;
						case 2:
							npcChatText = Lang.dialog(57);
							break;
						}
					}
				}
			}
			else
			{
				if (!npcChatFocus3 || player[myPlayer].talkNPC < 0)
				{
					return;
				}
				if (npc[player[myPlayer].talkNPC].type == 20)
				{
					PlaySound(12);
					npcChatText = Lang.evilGood();
				}
				else if (npc[player[myPlayer].talkNPC].type == 22)
				{
					playerInventory = true;
					npcChatText = "";
					PlaySound(12);
					craftGuide = true;
				}
				else if (npc[player[myPlayer].talkNPC].type == 107)
				{
					playerInventory = true;
					npcChatText = "";
					PlaySound(12);
					reforge = true;
				}
				else if (npc[player[myPlayer].talkNPC].type == 353)
				{
					OpenHairWindow();
				}
				else
				{
					if (npc[player[myPlayer].talkNPC].type != 207)
					{
						return;
					}
					npcChatCornerItem = 0;
					PlaySound(12);
					bool gotDye = false;
					int num31 = player[myPlayer].FindItem(ItemID.Sets.ExoticPlantsForDyeTrade);
					if (num31 != -1)
					{
						player[myPlayer].inventory[num31].stack--;
						if (player[myPlayer].inventory[num31].stack <= 0)
						{
							player[myPlayer].inventory[num31] = new Item();
						}
						gotDye = true;
						PlaySound(24);
						player[myPlayer].GetDyeTraderReward();
					}
					npcChatText = Lang.DyeTraderQuestChat(gotDye);
				}
			}
		}

		public static void MoveCoins(Item[] pInv, Item[] cInv)
		{
			int[] array = new int[4];
			List<int> list = new List<int>();
			List<int> list2 = new List<int>();
			bool flag = false;
			int[] array2 = new int[40];
			for (int i = 0; i < cInv.Length; i++)
			{
				array2[i] = -1;
				if (cInv[i].stack < 1 || cInv[i].type < 1)
				{
					list2.Add(i);
					cInv[i] = new Item();
				}
				if (cInv[i] != null && cInv[i].stack > 0)
				{
					int num = 0;
					if (cInv[i].type == 71)
					{
						num = 1;
					}
					if (cInv[i].type == 72)
					{
						num = 2;
					}
					if (cInv[i].type == 73)
					{
						num = 3;
					}
					if (cInv[i].type == 74)
					{
						num = 4;
					}
					array2[i] = num - 1;
					if (num > 0)
					{
						array[num - 1] += cInv[i].stack;
						list2.Add(i);
						cInv[i] = new Item();
						flag = true;
					}
				}
			}
			if (!flag)
			{
				return;
			}
			PlaySound(7);
			for (int j = 0; j < pInv.Length; j++)
			{
				if (j != 58 && pInv[j] != null && pInv[j].stack > 0)
				{
					int num2 = 0;
					if (pInv[j].type == 71)
					{
						num2 = 1;
					}
					if (pInv[j].type == 72)
					{
						num2 = 2;
					}
					if (pInv[j].type == 73)
					{
						num2 = 3;
					}
					if (pInv[j].type == 74)
					{
						num2 = 4;
					}
					if (num2 > 0)
					{
						array[num2 - 1] += pInv[j].stack;
						list.Add(j);
						pInv[j] = new Item();
					}
				}
			}
			for (int k = 0; k < 3; k++)
			{
				while (array[k] >= 100)
				{
					array[k] -= 100;
					array[k + 1]++;
				}
			}
			for (int l = 0; l < 40; l++)
			{
				if (array2[l] < 0 || cInv[l].type != 0)
				{
					continue;
				}
				int num3 = l;
				int num4 = array2[l];
				if (array[num4] > 0)
				{
					cInv[num3].SetDefaults(71 + num4);
					cInv[num3].stack = array[num4];
					if (cInv[num3].stack > cInv[num3].maxStack)
					{
						cInv[num3].stack = cInv[num3].maxStack;
					}
					array[num4] -= cInv[num3].stack;
					array2[l] = -1;
				}
				if (netMode == 1 && player[myPlayer].chest > -1)
				{
					NetMessage.SendData(32, -1, -1, "", player[myPlayer].chest, num3);
				}
				list2.Remove(num3);
			}
			for (int m = 0; m < 40; m++)
			{
				if (array2[m] < 0 || cInv[m].type != 0)
				{
					continue;
				}
				int num5 = m;
				for (int num6 = 3; num6 >= 0; num6--)
				{
					if (array[num6] > 0)
					{
						cInv[num5].SetDefaults(71 + num6);
						cInv[num5].stack = array[num6];
						if (cInv[num5].stack > cInv[num5].maxStack)
						{
							cInv[num5].stack = cInv[num5].maxStack;
						}
						array[num6] -= cInv[num5].stack;
						array2[m] = -1;
						break;
					}
				}
				if (netMode == 1 && player[myPlayer].chest > -1)
				{
					NetMessage.SendData(32, -1, -1, "", player[myPlayer].chest, num5);
				}
				list2.Remove(num5);
			}
			while (list2.Count > 0)
			{
				int num7 = list2[0];
				for (int num8 = 3; num8 >= 0; num8--)
				{
					if (array[num8] > 0)
					{
						cInv[num7].SetDefaults(71 + num8);
						cInv[num7].stack = array[num8];
						if (cInv[num7].stack > cInv[num7].maxStack)
						{
							cInv[num7].stack = cInv[num7].maxStack;
						}
						array[num8] -= cInv[num7].stack;
						break;
					}
				}
				if (netMode == 1 && player[myPlayer].chest > -1)
				{
					NetMessage.SendData(32, -1, -1, "", player[myPlayer].chest, list2[0]);
				}
				list2.RemoveAt(0);
			}
			while (list.Count > 0)
			{
				int num9 = list[0];
				for (int num10 = 3; num10 >= 0; num10--)
				{
					if (array[num10] > 0)
					{
						pInv[num9].SetDefaults(71 + num10);
						pInv[num9].stack = array[num10];
						if (pInv[num9].stack > pInv[num9].maxStack)
						{
							pInv[num9].stack = pInv[num9].maxStack;
						}
						array[num10] -= pInv[num9].stack;
					}
				}
				list.RemoveAt(0);
			}
		}

		protected void DrawNPCHouse()
		{
			for (int i = 0; i < 200; i++)
			{
				if (!npc[i].active || !npc[i].townNPC || npc[i].homeless || npc[i].homeTileX <= 0 || npc[i].homeTileY <= 0 || npc[i].type == 37)
				{
					continue;
				}
				int num = 1;
				int homeTileX = npc[i].homeTileX;
				int num2 = npc[i].homeTileY - 1;
				if (tile[homeTileX, num2] == null)
				{
					continue;
				}
				bool flag = false;
				while (!tile[homeTileX, num2].active() || !tileSolid[tile[homeTileX, num2].type])
				{
					num2--;
					if (num2 < 10)
					{
						break;
					}
					if (tile[homeTileX, num2] == null)
					{
						flag = true;
						break;
					}
				}
				if (flag)
				{
					continue;
				}
				int num3 = 8;
				int num4 = 18;
				if (tile[homeTileX, num2].type == 19)
				{
					num4 -= 8;
				}
				num2++;
				int num5 = 0;
				float num6 = num2 * 16;
				SpriteEffects effects = SpriteEffects.None;
				if (player[myPlayer].gravDir == -1f)
				{
					num6 -= screenPosition.Y;
					num6 = screenPosition.Y + (float)screenHeight - num6;
					num6 -= (float)bannerTexture[num].Height;
					effects = SpriteEffects.FlipVertically;
					num5 = 4;
				}
				spriteBatch.Draw(bannerTexture[num], new Vector2(homeTileX * 16 - (int)screenPosition.X + num3, num6 - (float)(int)screenPosition.Y + (float)num4 + (float)num5), new Microsoft.Xna.Framework.Rectangle(0, 0, bannerTexture[num].Width, bannerTexture[num].Height), Lighting.GetColor(homeTileX, num2), 0f, new Vector2(bannerTexture[num].Width / 2, bannerTexture[num].Height / 2), 1f, effects, 0f);
				int num7 = NPC.TypeToNum(npc[i].type);
				float scale = 1f;
				float num8 = 0f;
				num8 = ((npcHeadTexture[num7].Width <= npcHeadTexture[num7].Height) ? ((float)npcHeadTexture[num7].Height) : ((float)npcHeadTexture[num7].Width));
				if (num8 > 24f)
				{
					scale = 24f / num8;
				}
				spriteBatch.Draw(npcHeadTexture[num7], new Vector2(homeTileX * 16 - (int)screenPosition.X + num3, num6 - (float)(int)screenPosition.Y + (float)num4 + 2f), new Microsoft.Xna.Framework.Rectangle(0, 0, npcHeadTexture[num7].Width, npcHeadTexture[num7].Height), Lighting.GetColor(homeTileX, num2), 0f, new Vector2(npcHeadTexture[num7].Width / 2, npcHeadTexture[num7].Height / 2), scale, effects, 0f);
				homeTileX = homeTileX * 16 - (int)screenPosition.X + num3 - bannerTexture[num].Width / 2;
				num2 = num2 * 16 - (int)screenPosition.Y + num4 - bannerTexture[num].Height / 2;
				if (mouseX >= homeTileX && mouseX <= homeTileX + bannerTexture[num].Width && mouseY >= num2 && mouseY <= num2 + bannerTexture[num].Height)
				{
					MouseText(npc[i].FullName, 0, 0);
					if (mouseRightRelease && mouseRight)
					{
						mouseRightRelease = false;
						WorldGen.kickOut(i);
						PlaySound(12);
					}
				}
			}
		}

		protected void DrawPlayerChat()
		{
			if (chatMode)
			{
				textBlinkerCount++;
				if (textBlinkerCount >= 20)
				{
					if (textBlinkerState == 0)
					{
						textBlinkerState = 1;
					}
					else
					{
						textBlinkerState = 0;
					}
					textBlinkerCount = 0;
				}
				string text = chatText;
				if (textBlinkerState == 1)
				{
					text += "|";
				}
				if (screenWidth > 800)
				{
					int num = screenWidth - 300;
					int num2 = 78;
					spriteBatch.Draw(textBackTexture, new Vector2(num2, screenHeight - 36), new Microsoft.Xna.Framework.Rectangle(0, 0, textBackTexture.Width - 100, textBackTexture.Height), new Microsoft.Xna.Framework.Color(100, 100, 100, 100), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					num -= 400;
					num2 += 400;
					while (num > 0)
					{
						if (num > 300)
						{
							spriteBatch.Draw(textBackTexture, new Vector2(num2, screenHeight - 36), new Microsoft.Xna.Framework.Rectangle(100, 0, textBackTexture.Width - 200, textBackTexture.Height), new Microsoft.Xna.Framework.Color(100, 100, 100, 100), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							num -= 300;
							num2 += 300;
						}
						else
						{
							spriteBatch.Draw(textBackTexture, new Vector2(num2, screenHeight - 36), new Microsoft.Xna.Framework.Rectangle(textBackTexture.Width - num, 0, textBackTexture.Width - (textBackTexture.Width - num), textBackTexture.Height), new Microsoft.Xna.Framework.Color(100, 100, 100, 100), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							num = 0;
						}
					}
				}
				else
				{
					spriteBatch.Draw(textBackTexture, new Vector2(78f, screenHeight - 36), new Microsoft.Xna.Framework.Rectangle(0, 0, textBackTexture.Width, textBackTexture.Height), new Microsoft.Xna.Framework.Color(100, 100, 100, 100), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				int hoveredSnippet = -1;
				TextSnippet[] array = ChatManager.ParseMessage(text, Microsoft.Xna.Framework.Color.White);
				ChatManager.DrawColorCodedStringWithShadow(spriteBatch, fontMouseText, array, new Vector2(88f, screenHeight - 30), 0f, Vector2.Zero, Vector2.One, out hoveredSnippet);
				if (hoveredSnippet > -1)
				{
					array[hoveredSnippet].OnHover();
					if (mouseLeft && mouseLeftRelease)
					{
						array[hoveredSnippet].OnClick();
					}
				}
			}
			int num3 = startChatLine;
			int num4 = startChatLine + showCount;
			if (num4 >= numChatLines)
			{
				num4 = --numChatLines;
				num3 = num4 - showCount;
			}
			int num5 = 0;
			int num6 = -1;
			int num7 = -1;
			for (int i = num3; i < num4; i++)
			{
				if (chatMode || (chatLine[i].showTime > 0 && chatLine[i].text.Length > 0))
				{
					int hoveredSnippet2 = -1;
					ChatManager.DrawColorCodedStringWithShadow(spriteBatch, fontMouseText, chatLine[i].parsedText, new Vector2(88f, screenHeight - 30 - 28 - num5 * 21), 0f, Vector2.Zero, Vector2.One, out hoveredSnippet2);
					if (hoveredSnippet2 >= 0 && chatLine[i].parsedText[hoveredSnippet2].CheckForHover)
					{
						num6 = i;
						num7 = hoveredSnippet2;
					}
				}
				num5++;
			}
			if (num6 > -1)
			{
				chatLine[num6].parsedText[num7].OnHover();
				if (mouseLeft && mouseLeftRelease)
				{
					chatLine[num6].parsedText[num7].OnClick();
				}
			}
			TimeLogger.DetailedDrawTime(10);
		}

		protected void DrawInventory()
		{
			if (netMode == 1)
			{
				DrawPVPIcons();
			}
			inventoryScale = 0.85f;
			int num = 448;
			int num2 = 258;
			if ((player[myPlayer].chest != -1 && !recBigList) || npcShop > 0)
			{
				num2 += 168;
				inventoryScale = 0.755f;
				num += 5;
			}
			new Microsoft.Xna.Framework.Color(150, 150, 150, 150);
			if (mouseX >= num && (float)mouseX <= (float)num + (float)inventoryBackTexture.Width * inventoryScale && mouseY >= num2 && (float)mouseY <= (float)num2 + (float)inventoryBackTexture.Height * inventoryScale)
			{
				player[myPlayer].mouseInterface = true;
				if (mouseLeftRelease && mouseLeft)
				{
					ItemSlot.LeftClick(ref player[myPlayer].trashItem, 6);
					Recipe.FindRecipes();
				}
				ItemSlot.MouseHover(ref player[myPlayer].trashItem, 6);
			}
			ItemSlot.Draw(spriteBatch, ref player[myPlayer].trashItem, 6, new Vector2(num, num2));
			spriteBatch.DrawString(fontMouseText, Lang.inter[4].Value, new Vector2(40f, 0f), new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			inventoryScale = 0.85f;
			if (mouseX > 20 && mouseX < (int)(20f + 560f * inventoryScale) && mouseY > 20 && mouseY < (int)(20f + 280f * inventoryScale))
			{
				player[myPlayer].mouseInterface = true;
			}
			for (int i = 0; i < 10; i++)
			{
				for (int j = 0; j < 5; j++)
				{
					int num3 = (int)(20f + (float)(i * 56) * inventoryScale);
					int num4 = (int)(20f + (float)(j * 56) * inventoryScale);
					int num5 = i + j * 10;
					new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
					if (mouseX >= num3 && (float)mouseX <= (float)num3 + (float)inventoryBackTexture.Width * inventoryScale && mouseY >= num4 && (float)mouseY <= (float)num4 + (float)inventoryBackTexture.Height * inventoryScale)
					{
						player[myPlayer].mouseInterface = true;
						ItemSlot.OverrideHover(player[myPlayer].inventory, 0, num5);
						if (player[myPlayer].inventoryChestStack[num5] && (player[myPlayer].inventory[num5].type == 0 || player[myPlayer].inventory[num5].stack == 0))
						{
							player[myPlayer].inventoryChestStack[num5] = false;
						}
						if (!player[myPlayer].inventoryChestStack[num5])
						{
							if (mouseLeftRelease && mouseLeft)
							{
								ItemSlot.LeftClick(player[myPlayer].inventory, 0, num5);
								Recipe.FindRecipes();
							}
							else
							{
								ItemSlot.RightClick(player[myPlayer].inventory, 0, num5);
							}
						}
						ItemSlot.MouseHover(player[myPlayer].inventory, 0, num5);
					}
					ItemSlot.Draw(spriteBatch, player[myPlayer].inventory, 0, num5, new Vector2(num3, num4));
				}
			}
			int num6 = 0;
			int num7 = 2;
			int num8 = 32;
			if (!player[myPlayer].hbLocked)
			{
				num6 = 1;
			}
			spriteBatch.Draw(HBLockTexture[num6], new Vector2(num7, num8), new Microsoft.Xna.Framework.Rectangle(0, 0, HBLockTexture[num6].Width, HBLockTexture[num6].Height), inventoryBack, 0f, default(Vector2), 0.9f, SpriteEffects.None, 0f);
			if (mouseX > num7 && (float)mouseX < (float)num7 + (float)HBLockTexture[num6].Width * 0.9f && mouseY > num8 && (float)mouseY < (float)num8 + (float)HBLockTexture[num6].Height * 0.9f)
			{
				player[myPlayer].mouseInterface = true;
				if (!player[myPlayer].hbLocked)
				{
					MouseText(Lang.inter[5].Value, 0, 0);
					mouseText = true;
				}
				else
				{
					MouseText(Lang.inter[6].Value, 0, 0);
					mouseText = true;
				}
				if (mouseLeft && mouseLeftRelease)
				{
					PlaySound(22);
					if (!player[myPlayer].hbLocked)
					{
						player[myPlayer].hbLocked = true;
					}
					else
					{
						player[myPlayer].hbLocked = false;
					}
				}
			}
			if (mapEnabled)
			{
				bool flag = false;
				int num9 = screenWidth - 440;
				int num10 = 40;
				if (screenWidth < 940)
				{
					flag = true;
				}
				if (flag)
				{
					num9 = screenWidth - 40;
					num10 = screenHeight - 200;
				}
				for (int k = 0; k < 4; k++)
				{
					int num11 = 255;
					int num12 = num9 + k * 32;
					int num13 = num10;
					if (flag)
					{
						num12 = num9;
						num13 = num10 + k * 32;
					}
					int num14 = k;
					num11 = 120;
					if (k > 0 && mapStyle == k - 1)
					{
						num11 = 200;
					}
					if (mouseX >= num12 && mouseX <= num12 + 32 && mouseY >= num13 && mouseY <= num13 + 30)
					{
						num11 = 255;
						num14 += 4;
						player[myPlayer].mouseInterface = true;
						if (mouseLeft && mouseLeftRelease)
						{
							if (k == 0)
							{
								playerInventory = false;
								player[myPlayer].talkNPC = -1;
								npcChatCornerItem = 0;
								PlaySound(10);
								float num15 = mapFullscreenScale = 2.5f;
								mapFullscreen = true;
								resetMapFull = true;
							}
							if (k == 1)
							{
								mapStyle = 0;
								PlaySound(12);
							}
							if (k == 2)
							{
								mapStyle = 1;
								PlaySound(12);
							}
							if (k == 3)
							{
								mapStyle = 2;
								PlaySound(12);
							}
						}
					}
					spriteBatch.Draw(mapIconTexture[num14], new Vector2(num12, num13), new Microsoft.Xna.Framework.Rectangle(0, 0, mapIconTexture[num14].Width, mapIconTexture[num14].Height), new Microsoft.Xna.Framework.Color(num11, num11, num11, num11), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
			}
			if (armorHide)
			{
				armorAlpha -= 0.1f;
				if (armorAlpha < 0f)
				{
					armorAlpha = 0f;
				}
			}
			else
			{
				armorAlpha += 0.025f;
				if (armorAlpha > 1f)
				{
					armorAlpha = 1f;
				}
			}
			new Microsoft.Xna.Framework.Color((byte)((float)(int)mouseTextColor * armorAlpha), (byte)((float)(int)mouseTextColor * armorAlpha), (byte)((float)(int)mouseTextColor * armorAlpha), (byte)((float)(int)mouseTextColor * armorAlpha));
			armorHide = false;
			int num16 = DrawPageIcons();
			if (num16 > -1)
			{
				toolTip = new Item();
				switch (num16)
				{
				case 1:
					hoverItemName = Lang.inter[80].Value;
					break;
				case 2:
					hoverItemName = Lang.inter[79].Value;
					break;
				case 3:
					hoverItemName = (CaptureModeDisabled ? Lang.inter[115].Value : Lang.inter[81].Value);
					break;
				}
			}
			if (EquipPage == 2)
			{
				Microsoft.Xna.Framework.Point value = new Microsoft.Xna.Framework.Point(mouseX, mouseY);
				Microsoft.Xna.Framework.Rectangle r = new Microsoft.Xna.Framework.Rectangle(0, 0, (int)((float)inventoryBackTexture.Width * inventoryScale), (int)((float)inventoryBackTexture.Height * inventoryScale));
				Item[] inv = player[myPlayer].miscEquips;
				int num17 = screenWidth - 92;
				int num18 = mH + 174;
				for (int l = 0; l < 2; l++)
				{
					switch (l)
					{
					case 0:
						inv = player[myPlayer].miscEquips;
						break;
					case 1:
						inv = player[myPlayer].miscDyes;
						break;
					}
					r.X = num17 + l * -47;
					for (int m = 0; m < 5; m++)
					{
						int context = 0;
						int num19 = -1;
						switch (m)
						{
						case 0:
							context = 19;
							num19 = 0;
							break;
						case 1:
							context = 20;
							num19 = 1;
							break;
						case 2:
							context = 18;
							break;
						case 3:
							context = 17;
							break;
						case 4:
							context = 16;
							break;
						}
						if (l == 1)
						{
							context = 12;
							num19 = -1;
						}
						r.Y = num18 + m * 47;
						Texture2D texture2D = inventoryTickOnTexture;
						if (player[myPlayer].hideMisc[num19])
						{
							texture2D = inventoryTickOffTexture;
						}
						Microsoft.Xna.Framework.Rectangle r2 = new Microsoft.Xna.Framework.Rectangle(r.Left + 34, r.Top - 2, texture2D.Width, texture2D.Height);
						int num20 = 0;
						bool flag2 = false;
						if (r2.Contains(value))
						{
							player[myPlayer].mouseInterface = true;
							flag2 = true;
							if (mouseLeft && mouseLeftRelease)
							{
								if (num19 == 0)
								{
									player[myPlayer].TogglePet();
								}
								if (num19 == 1)
								{
									player[myPlayer].ToggleLight();
								}
								mouseLeftRelease = false;
								PlaySound(12);
								if (netMode == 1)
								{
									NetMessage.SendData(4, -1, -1, player[myPlayer].name, myPlayer);
								}
							}
							num20 = ((!player[myPlayer].hideMisc[num19]) ? 1 : 2);
						}
						if (r.Contains(value) && !flag2)
						{
							player[myPlayer].mouseInterface = true;
							armorHide = true;
							ItemSlot.Handle(inv, context, m);
						}
						ItemSlot.Draw(spriteBatch, inv, context, m, r.TopLeft());
						if (num19 != -1)
						{
							spriteBatch.Draw(texture2D, r2.TopLeft(), Microsoft.Xna.Framework.Color.White * 0.7f);
							if (num20 > 0)
							{
								toolTip = new Item();
								hoverItemName = Lang.inter[58 + num20].Value;
							}
						}
					}
				}
			}
			else if (EquipPage == 1)
			{
				if (mouseX > screenWidth - 64 - 28 && mouseX < (int)((float)(screenWidth - 64 - 28) + 56f * inventoryScale) && mouseY > 174 + mH && mouseY < (int)((float)(174 + mH) + 448f * inventoryScale))
				{
					player[myPlayer].mouseInterface = true;
				}
				int num21 = 0;
				string text = "";
				int num22 = 0;
				int num23 = 0;
				for (int n = 0; n < npcHeadTexture.Length; n++)
				{
					bool flag3 = false;
					int num24 = 0;
					switch (n)
					{
					case 0:
						flag3 = true;
						break;
					case 21:
						flag3 = false;
						break;
					default:
					{
						for (int num25 = 0; num25 < 200; num25++)
						{
							if (npc[num25].active && NPC.TypeToNum(npc[num25].type) == n)
							{
								flag3 = true;
								num24 = num25;
								break;
							}
						}
						break;
					}
					}
					if (!flag3)
					{
						continue;
					}
					int num26 = screenWidth - 64 - 28 + num23;
					int num27 = (int)((float)(174 + mH) + (float)(num21 * 56) * inventoryScale) + num22;
					Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
					if (num27 > screenHeight - 80)
					{
						num23 -= 48;
						num22 -= num27 - (174 + mH);
						num26 = screenWidth - 64 - 28 + num23;
						num27 = (int)((float)(174 + mH) + (float)(num21 * 56) * inventoryScale) + num22;
					}
					if (mouseX >= num26 && (float)mouseX <= (float)num26 + (float)inventoryBackTexture.Width * inventoryScale && mouseY >= num27 && (float)mouseY <= (float)num27 + (float)inventoryBackTexture.Height * inventoryScale)
					{
						mouseText = true;
						text = ((n != 0) ? npc[num24].FullName : Lang.inter[8].Value);
						player[myPlayer].mouseInterface = true;
						if (mouseLeftRelease && mouseLeft && mouseItem.type == 0)
						{
							PlaySound(12);
							mouseNPC = n;
							mouseLeftRelease = false;
						}
					}
					spriteBatch.Draw(inventoryBack11Texture, new Vector2(num26, num27), new Microsoft.Xna.Framework.Rectangle(0, 0, inventoryBackTexture.Width, inventoryBackTexture.Height), inventoryBack, 0f, default(Vector2), inventoryScale, SpriteEffects.None, 0f);
					color = Microsoft.Xna.Framework.Color.White;
					int num28 = n;
					float scale = 1f;
					float num29 = 0f;
					num29 = ((npcHeadTexture[num28].Width <= npcHeadTexture[num28].Height) ? ((float)npcHeadTexture[num28].Height) : ((float)npcHeadTexture[num28].Width));
					if (num29 > 36f)
					{
						scale = 36f / num29;
					}
					spriteBatch.Draw(npcHeadTexture[num28], new Vector2((float)num26 + 26f * inventoryScale, (float)num27 + 26f * inventoryScale), new Microsoft.Xna.Framework.Rectangle(0, 0, npcHeadTexture[num28].Width, npcHeadTexture[num28].Height), color, 0f, new Vector2(npcHeadTexture[num28].Width / 2, npcHeadTexture[num28].Height / 2), scale, SpriteEffects.None, 0f);
					num21++;
				}
				if (text != "" && mouseItem.type == 0)
				{
					MouseText(text, 0, 0);
				}
			}
			else
			{
				int num30 = 4;
				if (mouseX > screenWidth - 64 - 28 && mouseX < (int)((float)(screenWidth - 64 - 28) + 56f * inventoryScale) && mouseY > 174 + mH && mouseY < (int)((float)(174 + mH) + 448f * inventoryScale))
				{
					player[myPlayer].mouseInterface = true;
				}
				float num31 = inventoryScale;
				int num32 = 8 + player[myPlayer].extraAccessorySlots;
				bool flag4 = false;
				int num33 = num32 - 1;
				if (num32 == 8 && (player[myPlayer].armor[8].type > 0 || player[myPlayer].armor[18].type > 0 || player[myPlayer].dye[8].type > 0))
				{
					num32 = 9;
					flag4 = true;
					num33 = 7;
				}
				Microsoft.Xna.Framework.Color color2 = inventoryBack;
				Microsoft.Xna.Framework.Color color3 = new Microsoft.Xna.Framework.Color(80, 80, 80, 80);
				for (int num34 = 0; num34 < num32; num34++)
				{
					bool flag5 = false;
					if (flag4 && num34 == num32 - 1 && mouseItem.type > 0)
					{
						flag5 = true;
					}
					int num35 = screenWidth - 64 - 28;
					int num36 = (int)((float)(174 + mH) + (float)(num34 * 56) * inventoryScale);
					new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
					if (num34 > 2)
					{
						num36 += num30;
					}
					if (num34 == num33)
					{
						Vector2 vector = new Vector2(num35 - 10 - 47 - 47 - 14, (float)num36 + (float)inventoryBackTexture.Height * 0.5f);
						spriteBatch.Draw(extraTexture[58], vector, null, Microsoft.Xna.Framework.Color.White, 0f, extraTexture[58].Size() / 2f, inventoryScale, SpriteEffects.None, 0f);
						Vector2 value2 = fontMouseText.MeasureString(player[myPlayer].statDefense.ToString());
						ChatManager.DrawColorCodedStringWithShadow(spriteBatch, fontMouseText, player[myPlayer].statDefense.ToString(), vector - value2 * 0.5f * inventoryScale, Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, new Vector2(inventoryScale));
						if (Utils.CenteredRectangle(vector, extraTexture[58].Size()).Contains(new Microsoft.Xna.Framework.Point(mouseX, mouseY)))
						{
							player[myPlayer].mouseInterface = true;
							string value3 = player[myPlayer].statDefense + " " + Lang.inter[10];
							if (!string.IsNullOrEmpty(value3))
							{
								hoverItemName = value3;
							}
						}
					}
					int context2 = 8;
					if (num34 > 2)
					{
						context2 = 10;
					}
					Texture2D texture2D2 = inventoryTickOnTexture;
					if (player[myPlayer].hideVisual[num34])
					{
						texture2D2 = inventoryTickOffTexture;
					}
					int num37 = screenWidth - 58;
					int num38 = (int)((float)(172 + mH) + (float)(num34 * 56) * inventoryScale);
					if (num34 > 2)
					{
						num38 += num30;
					}
					Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(num37, num38, texture2D2.Width, texture2D2.Height);
					int num39 = 0;
					if (num34 >= 3 && num34 < num32 && rectangle.Contains(new Microsoft.Xna.Framework.Point(mouseX, mouseY)))
					{
						player[myPlayer].mouseInterface = true;
						if (mouseLeft && mouseLeftRelease)
						{
							player[myPlayer].hideVisual[num34] = !player[myPlayer].hideVisual[num34];
							PlaySound(12);
							if (netMode == 1)
							{
								NetMessage.SendData(4, -1, -1, player[myPlayer].name, myPlayer);
							}
						}
						num39 = ((!player[myPlayer].hideVisual[num34]) ? 1 : 2);
					}
					else if (mouseX >= num35 && (float)mouseX <= (float)num35 + (float)inventoryBackTexture.Width * inventoryScale && mouseY >= num36 && (float)mouseY <= (float)num36 + (float)inventoryBackTexture.Height * inventoryScale)
					{
						armorHide = true;
						player[myPlayer].mouseInterface = true;
						ItemSlot.OverrideHover(player[myPlayer].armor, context2, num34);
						if (!flag5 && mouseLeftRelease && mouseLeft)
						{
							ItemSlot.LeftClick(player[myPlayer].armor, context2, num34);
						}
						ItemSlot.MouseHover(player[myPlayer].armor, context2, num34);
					}
					if (flag4 && num34 == num32 - 1)
					{
						inventoryBack = color3;
					}
					ItemSlot.Draw(spriteBatch, player[myPlayer].armor, context2, num34, new Vector2(num35, num36));
					if (num34 > 2 && num34 < num32)
					{
						spriteBatch.Draw(texture2D2, new Vector2(num37, num38), Microsoft.Xna.Framework.Color.White * 0.7f);
						if (num39 > 0)
						{
							toolTip = new Item();
							hoverItemName = Lang.inter[58 + num39].Value;
						}
					}
				}
				inventoryBack = color2;
				if (mouseX > screenWidth - 64 - 28 - 47 && mouseX < (int)((float)(screenWidth - 64 - 20 - 47) + 56f * inventoryScale) && mouseY > 174 + mH && mouseY < (int)((float)(174 + mH) + 168f * inventoryScale))
				{
					player[myPlayer].mouseInterface = true;
				}
				for (int num40 = 10; num40 < 10 + num32; num40++)
				{
					bool flag6 = false;
					if (flag4 && num40 == 10 + num32 - 1 && mouseItem.type > 0)
					{
						flag6 = true;
					}
					int num41 = screenWidth - 64 - 28 - 47;
					int num42 = (int)((float)(174 + mH) + (float)((num40 - 10) * 56) * inventoryScale);
					new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
					if (num40 > 12)
					{
						num42 += num30;
					}
					int context3 = 9;
					if (num40 > 12)
					{
						context3 = 11;
					}
					if (mouseX >= num41 && (float)mouseX <= (float)num41 + (float)inventoryBackTexture.Width * inventoryScale && mouseY >= num42 && (float)mouseY <= (float)num42 + (float)inventoryBackTexture.Height * inventoryScale)
					{
						player[myPlayer].mouseInterface = true;
						armorHide = true;
						ItemSlot.OverrideHover(player[myPlayer].armor, context3, num40);
						if (!flag6)
						{
							if (mouseLeftRelease && mouseLeft)
							{
								ItemSlot.LeftClick(player[myPlayer].armor, context3, num40);
							}
							else
							{
								ItemSlot.RightClick(player[myPlayer].armor, context3, num40);
							}
						}
						ItemSlot.MouseHover(player[myPlayer].armor, context3, num40);
					}
					if (flag4 && num40 == num32 + 10 - 1)
					{
						inventoryBack = color3;
					}
					ItemSlot.Draw(spriteBatch, player[myPlayer].armor, context3, num40, new Vector2(num41, num42));
				}
				inventoryBack = color2;
				if (mouseX > screenWidth - 64 - 28 - 47 && mouseX < (int)((float)(screenWidth - 64 - 20 - 47) + 56f * inventoryScale) && mouseY > 174 + mH && mouseY < (int)((float)(174 + mH) + 168f * inventoryScale))
				{
					player[myPlayer].mouseInterface = true;
				}
				for (int num43 = 0; num43 < num32; num43++)
				{
					bool flag7 = false;
					if (flag4 && num43 == num32 - 1 && mouseItem.type > 0)
					{
						flag7 = true;
					}
					int num44 = screenWidth - 64 - 28 - 47 - 47;
					int num45 = (int)((float)(174 + mH) + (float)(num43 * 56) * inventoryScale);
					new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
					if (num43 > 2)
					{
						num45 += num30;
					}
					if (mouseX >= num44 && (float)mouseX <= (float)num44 + (float)inventoryBackTexture.Width * inventoryScale && mouseY >= num45 && (float)mouseY <= (float)num45 + (float)inventoryBackTexture.Height * inventoryScale)
					{
						player[myPlayer].mouseInterface = true;
						armorHide = true;
						ItemSlot.OverrideHover(player[myPlayer].dye, 12, num43);
						if (!flag7)
						{
							if (mouseRightRelease && mouseRight)
							{
								ItemSlot.RightClick(player[myPlayer].dye, 12, num43);
							}
							else if (mouseLeftRelease && mouseLeft)
							{
								ItemSlot.LeftClick(player[myPlayer].dye, 12, num43);
							}
						}
						ItemSlot.MouseHover(player[myPlayer].dye, 12, num43);
					}
					if (flag4 && num43 == num32 - 1)
					{
						inventoryBack = color3;
					}
					ItemSlot.Draw(spriteBatch, player[myPlayer].dye, 12, num43, new Vector2(num44, num45));
				}
				inventoryBack = color2;
				inventoryScale = num31;
			}
			int num46 = (screenHeight - 600) / 2;
			int num47 = (int)((float)screenHeight / 600f * 250f);
			if (screenHeight < 700)
			{
				num46 = (screenHeight - 508) / 2;
				num47 = (int)((float)screenHeight / 600f * 200f);
			}
			else if (screenHeight < 850)
			{
				num47 = (int)((float)screenHeight / 600f * 225f);
			}
			if (craftingHide)
			{
				craftingAlpha -= 0.1f;
				if (craftingAlpha < 0f)
				{
					craftingAlpha = 0f;
				}
			}
			else
			{
				craftingAlpha += 0.025f;
				if (craftingAlpha > 1f)
				{
					craftingAlpha = 1f;
				}
			}
			Microsoft.Xna.Framework.Color color4 = new Microsoft.Xna.Framework.Color((byte)((float)(int)mouseTextColor * craftingAlpha), (byte)((float)(int)mouseTextColor * craftingAlpha), (byte)((float)(int)mouseTextColor * craftingAlpha), (byte)((float)(int)mouseTextColor * craftingAlpha));
			craftingHide = false;
			if (reforge)
			{
				if (mouseReforge)
				{
					if (reforgeScale < 1f)
					{
						reforgeScale += 0.02f;
					}
				}
				else if (reforgeScale > 1f)
				{
					reforgeScale -= 0.02f;
				}
				if (player[myPlayer].chest != -1 || npcShop != 0 || player[myPlayer].talkNPC == -1 || craftGuide)
				{
					reforge = false;
					player[myPlayer].dropItemCheck();
					Recipe.FindRecipes();
				}
				else
				{
					int num48 = 50;
					int num49 = 270;
					string text2 = string.Concat(Lang.inter[46], ": ");
					if (reforgeItem.type > 0)
					{
						int num50 = reforgeItem.value;
						if (player[myPlayer].discount)
						{
							num50 = (int)((double)num50 * 0.8);
						}
						num50 /= 3;
						string text3 = "";
						int num51 = 0;
						int num52 = 0;
						int num53 = 0;
						int num54 = 0;
						int num55 = num50;
						if (num55 < 1)
						{
							num55 = 1;
						}
						if (num55 >= 1000000)
						{
							num51 = num55 / 1000000;
							num55 -= num51 * 1000000;
						}
						if (num55 >= 10000)
						{
							num52 = num55 / 10000;
							num55 -= num52 * 10000;
						}
						if (num55 >= 100)
						{
							num53 = num55 / 100;
							num55 -= num53 * 100;
						}
						if (num55 >= 1)
						{
							num54 = num55;
						}
						if (num51 > 0)
						{
							object obj = text3;
							text3 = string.Concat(obj, "[c/", Colors.AlphaDarken(Colors.CoinPlatinum).Hex3(), ":", num51, " ", Lang.inter[15], "] ");
						}
						if (num52 > 0)
						{
							object obj = text3;
							text3 = string.Concat(obj, "[c/", Colors.AlphaDarken(Colors.CoinGold).Hex3(), ":", num52, " ", Lang.inter[16], "] ");
						}
						if (num53 > 0)
						{
							object obj = text3;
							text3 = string.Concat(obj, "[c/", Colors.AlphaDarken(Colors.CoinSilver).Hex3(), ":", num53, " ", Lang.inter[17], "] ");
						}
						if (num54 > 0)
						{
							object obj = text3;
							text3 = string.Concat(obj, "[c/", Colors.AlphaDarken(Colors.CoinCopper).Hex3(), ":", num54, " ", Lang.inter[18], "] ");
						}
						ItemSlot.DrawSavings(spriteBatch, num48 + 130, invBottom, true);
						ChatManager.DrawColorCodedStringWithShadow(spriteBatch, fontMouseText, text3, new Vector2((float)(num48 + 50) + fontMouseText.MeasureString(text2).X, num49), Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, Vector2.One);
						int num56 = num48 + 70;
						int num57 = num49 + 40;
						bool flag8 = mouseX > num56 - 15 && mouseX < num56 + 15 && mouseY > num57 - 15 && mouseY < num57 + 15;
						Texture2D texture2D3 = reforgeTexture[0];
						if (flag8)
						{
							texture2D3 = reforgeTexture[1];
						}
						spriteBatch.Draw(texture2D3, new Vector2(num56, num57), null, Microsoft.Xna.Framework.Color.White, 0f, texture2D3.Size() / 2f, reforgeScale, SpriteEffects.None, 0f);
						if (flag8)
						{
							hoverItemName = Lang.inter[19].Value;
							if (!mouseReforge)
							{
								PlaySound(12);
							}
							mouseReforge = true;
							player[myPlayer].mouseInterface = true;
							if (mouseLeftRelease && mouseLeft && player[myPlayer].BuyItem(num50))
							{
								bool favorited = reforgeItem.favorited;
								reforgeItem.netDefaults(reforgeItem.netID);
								reforgeItem.Prefix(-2);
								reforgeItem.position.X = player[myPlayer].position.X + (float)(player[myPlayer].width / 2) - (float)(reforgeItem.width / 2);
								reforgeItem.position.Y = player[myPlayer].position.Y + (float)(player[myPlayer].height / 2) - (float)(reforgeItem.height / 2);
								reforgeItem.favorited = favorited;
								ItemText.NewText(reforgeItem, reforgeItem.stack, true);
								PlaySound(2, -1, -1, 37);
							}
						}
						else
						{
							mouseReforge = false;
						}
					}
					else
					{
						text2 = Lang.inter[20].Value;
					}
					ChatManager.DrawColorCodedStringWithShadow(spriteBatch, fontMouseText, text2, new Vector2(num48 + 50, num49), new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, Vector2.Zero, Vector2.One);
					if (mouseX >= num48 && (float)mouseX <= (float)num48 + (float)inventoryBackTexture.Width * inventoryScale && mouseY >= num49 && (float)mouseY <= (float)num49 + (float)inventoryBackTexture.Height * inventoryScale)
					{
						player[myPlayer].mouseInterface = true;
						craftingHide = true;
						if (mouseLeftRelease && mouseLeft)
						{
							ItemSlot.LeftClick(ref reforgeItem, 5);
							Recipe.FindRecipes();
						}
						else
						{
							ItemSlot.RightClick(ref reforgeItem, 5);
						}
						ItemSlot.MouseHover(ref reforgeItem, 5);
					}
					ItemSlot.Draw(spriteBatch, ref reforgeItem, 5, new Vector2(num48, num49));
				}
			}
			else if (craftGuide)
			{
				if (player[myPlayer].chest != -1 || npcShop != 0 || player[myPlayer].talkNPC == -1 || reforge)
				{
					craftGuide = false;
					player[myPlayer].dropItemCheck();
					Recipe.FindRecipes();
				}
				else
				{
					int num58 = 73;
					int num59 = 331;
					num59 += num46;
					string text4;
					if (guideItem.type > 0)
					{
						text4 = string.Concat(Lang.inter[21], " ", guideItem.Name);
						spriteBatch.DrawString(fontMouseText, Lang.inter[22].Value, new Vector2(num58, num59 + 118), color4, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						int num60 = focusRecipe;
						int num61 = 0;
						for (int num62 = 0; num62 < Recipe.maxRequirements; num62++)
						{
							int num63 = (num62 + 1) * 26;
							if (recipe[availableRecipe[num60]].requiredTile[num62] == -1)
							{
								if (num62 == 0 && !recipe[availableRecipe[num60]].needWater && !recipe[availableRecipe[num60]].needHoney && !recipe[availableRecipe[num60]].needLava)
								{
									spriteBatch.DrawString(fontMouseText, Lang.inter[23].Value, new Vector2(num58, num59 + 118 + num63), color4, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
								}
								break;
							}
							num61++;
							spriteBatch.DrawString(fontMouseText, Lang.GetMapObjectName(MapHelper.TileToLookup(recipe[availableRecipe[num60]].requiredTile[num62], 0)), new Vector2(num58, num59 + 118 + num63), color4, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						}
						if (recipe[availableRecipe[num60]].needWater)
						{
							int num64 = (num61 + 1) * 26;
							spriteBatch.DrawString(fontMouseText, Lang.inter[53].Value, new Vector2(num58, num59 + 118 + num64), color4, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						}
						if (recipe[availableRecipe[num60]].needHoney)
						{
							int num65 = (num61 + 1) * 26;
							spriteBatch.DrawString(fontMouseText, Lang.inter[58].Value, new Vector2(num58, num59 + 118 + num65), color4, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						}
						if (recipe[availableRecipe[num60]].needLava)
						{
							int num66 = (num61 + 1) * 26;
							spriteBatch.DrawString(fontMouseText, Lang.inter[56].Value, new Vector2(num58, num59 + 118 + num66), color4, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						}
					}
					else
					{
						text4 = Lang.inter[24].Value;
					}
					spriteBatch.DrawString(fontMouseText, text4, new Vector2(num58 + 50, num59 + 12), new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
					if (mouseX >= num58 && (float)mouseX <= (float)num58 + (float)inventoryBackTexture.Width * inventoryScale && mouseY >= num59 && (float)mouseY <= (float)num59 + (float)inventoryBackTexture.Height * inventoryScale)
					{
						player[myPlayer].mouseInterface = true;
						craftingHide = true;
						if (mouseLeftRelease && mouseLeft)
						{
							ItemSlot.LeftClick(ref guideItem, 7);
							Recipe.FindRecipes();
						}
						else
						{
							ItemSlot.RightClick(ref guideItem, 7);
						}
						ItemSlot.MouseHover(ref guideItem, 7);
					}
					ItemSlot.Draw(spriteBatch, ref guideItem, 7, new Vector2(num58, num59));
				}
			}
			if (!reforge)
			{
				if (numAvailableRecipes > 0)
				{
					spriteBatch.DrawString(fontMouseText, Lang.inter[25].Value, new Vector2(76f, 414 + num46), color4, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				for (int num67 = 0; num67 < Recipe.maxRecipes; num67++)
				{
					inventoryScale = 100f / (Math.Abs(availableRecipeY[num67]) + 100f);
					if ((double)inventoryScale < 0.75)
					{
						inventoryScale = 0.75f;
					}
					if (recFastScroll)
					{
						inventoryScale = 0.75f;
					}
					if (availableRecipeY[num67] < (float)((num67 - focusRecipe) * 65))
					{
						if (availableRecipeY[num67] == 0f && !recFastScroll)
						{
							PlaySound(12);
						}
						availableRecipeY[num67] += 6.5f;
						if (recFastScroll)
						{
							availableRecipeY[num67] += 130000f;
						}
						if (availableRecipeY[num67] > (float)((num67 - focusRecipe) * 65))
						{
							availableRecipeY[num67] = (num67 - focusRecipe) * 65;
						}
					}
					else if (availableRecipeY[num67] > (float)((num67 - focusRecipe) * 65))
					{
						if (availableRecipeY[num67] == 0f && !recFastScroll)
						{
							PlaySound(12);
						}
						availableRecipeY[num67] -= 6.5f;
						if (recFastScroll)
						{
							availableRecipeY[num67] -= 130000f;
						}
						if (availableRecipeY[num67] < (float)((num67 - focusRecipe) * 65))
						{
							availableRecipeY[num67] = (num67 - focusRecipe) * 65;
						}
					}
					else
					{
						recFastScroll = false;
					}
					if (num67 >= numAvailableRecipes || Math.Abs(availableRecipeY[num67]) > (float)num47)
					{
						continue;
					}
					int num68 = (int)(46f - 26f * inventoryScale);
					int num69 = (int)(410f + availableRecipeY[num67] * inventoryScale - 30f * inventoryScale + (float)num46);
					double num70 = inventoryBack.A + 50;
					double num71 = 255.0;
					if (Math.Abs(availableRecipeY[num67]) > (float)(num47 - 100))
					{
						num70 = (double)(150f * (100f - (Math.Abs(availableRecipeY[num67]) - (float)(num47 - 100)))) * 0.01;
						num71 = (double)(255f * (100f - (Math.Abs(availableRecipeY[num67]) - (float)(num47 - 100)))) * 0.01;
					}
					new Microsoft.Xna.Framework.Color((byte)num70, (byte)num70, (byte)num70, (byte)num70);
					new Microsoft.Xna.Framework.Color((byte)num71, (byte)num71, (byte)num71, (byte)num71);
					if (mouseX >= num68 && (float)mouseX <= (float)num68 + (float)inventoryBackTexture.Width * inventoryScale && mouseY >= num69 && (float)mouseY <= (float)num69 + (float)inventoryBackTexture.Height * inventoryScale)
					{
						player[myPlayer].mouseInterface = true;
						if (focusRecipe == num67 && guideItem.type == 0)
						{
							if ((mouseItem.type == 0 || (mouseItem.IsTheSameAs(recipe[availableRecipe[num67]].createItem) && mouseItem.stack + recipe[availableRecipe[num67]].createItem.stack <= mouseItem.maxStack)) && !player[myPlayer].IsStackingItems())
							{
								if (mouseLeftRelease && mouseLeft)
								{
									int stack = mouseItem.stack;
									mouseItem = recipe[availableRecipe[num67]].createItem.Clone();
									mouseItem.Prefix(-1);
									mouseItem.stack += stack;
									mouseItem.position.X = player[myPlayer].position.X + (float)(player[myPlayer].width / 2) - (float)(mouseItem.width / 2);
									mouseItem.position.Y = player[myPlayer].position.Y + (float)(player[myPlayer].height / 2) - (float)(mouseItem.height / 2);
									ItemText.NewText(mouseItem, recipe[availableRecipe[num67]].createItem.stack);
									recipe[availableRecipe[num67]].Create();
									if (mouseItem.type > 0 || recipe[availableRecipe[num67]].createItem.type > 0)
									{
										PlaySound(7);
									}
								}
								else if (stackSplit <= 1 && mouseRight && (mouseItem.stack < mouseItem.maxStack || mouseItem.type == 0))
								{
									if (stackSplit == 0)
									{
										stackSplit = 15;
									}
									else
									{
										stackSplit = stackDelay;
									}
									int stack2 = mouseItem.stack;
									mouseItem = recipe[availableRecipe[num67]].createItem.Clone();
									mouseItem.stack += stack2;
									if (stack2 <= 0)
									{
										mouseItem.Prefix(-1);
									}
									mouseItem.position.X = player[myPlayer].position.X + (float)(player[myPlayer].width / 2) - (float)(mouseItem.width / 2);
									mouseItem.position.Y = player[myPlayer].position.Y + (float)(player[myPlayer].height / 2) - (float)(mouseItem.height / 2);
									ItemText.NewText(mouseItem, recipe[availableRecipe[num67]].createItem.stack);
									recipe[availableRecipe[num67]].Create();
									if (mouseItem.type > 0 || recipe[availableRecipe[num67]].createItem.type > 0)
									{
										PlaySound(7);
									}
								}
							}
						}
						else if (mouseLeftRelease && mouseLeft)
						{
							focusRecipe = num67;
						}
						craftingHide = true;
						hoverItemName = recipe[availableRecipe[num67]].createItem.Name;
						toolTip = recipe[availableRecipe[num67]].createItem.Clone();
						if (recipe[availableRecipe[num67]].createItem.stack > 1)
						{
							object obj = hoverItemName;
							hoverItemName = string.Concat(obj, " (", recipe[availableRecipe[num67]].createItem.stack, ")");
						}
					}
					if (numAvailableRecipes > 0)
					{
						num70 -= 50.0;
						if (num70 < 0.0)
						{
							num70 = 0.0;
						}
						Microsoft.Xna.Framework.Color color5 = inventoryBack;
						inventoryBack = new Microsoft.Xna.Framework.Color((byte)num70, (byte)num70, (byte)num70, (byte)num70);
						ItemSlot.Draw(spriteBatch, ref recipe[availableRecipe[num67]].createItem, 22, new Vector2(num68, num69));
						inventoryBack = color5;
					}
				}
				if (numAvailableRecipes > 0)
				{
					for (int num72 = 0; num72 < Recipe.maxRequirements && recipe[availableRecipe[focusRecipe]].requiredItem[num72].type != 0; num72++)
					{
						int num73 = 80 + num72 * 40;
						int num74 = 380 + num46;
						double num75 = inventoryBack.A + 50;
						double num76 = 255.0;
						Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
						Microsoft.Xna.Framework.Color white2 = Microsoft.Xna.Framework.Color.White;
						num75 = (float)(inventoryBack.A + 50) - Math.Abs(availableRecipeY[focusRecipe]) * 2f;
						num76 = 255f - Math.Abs(availableRecipeY[focusRecipe]) * 2f;
						if (num75 < 0.0)
						{
							num75 = 0.0;
						}
						if (num76 < 0.0)
						{
							num76 = 0.0;
						}
						white.R = (byte)num75;
						white.G = (byte)num75;
						white.B = (byte)num75;
						white.A = (byte)num75;
						white2.R = (byte)num76;
						white2.G = (byte)num76;
						white2.B = (byte)num76;
						white2.A = (byte)num76;
						inventoryScale = 0.6f;
						if (num75 == 0.0)
						{
							break;
						}
						if (mouseX >= num73 && (float)mouseX <= (float)num73 + (float)inventoryBackTexture.Width * inventoryScale && mouseY >= num74 && (float)mouseY <= (float)num74 + (float)inventoryBackTexture.Height * inventoryScale)
						{
							craftingHide = true;
							player[myPlayer].mouseInterface = true;
							hoverItemName = recipe[availableRecipe[focusRecipe]].requiredItem[num72].Name;
							toolTip = recipe[availableRecipe[focusRecipe]].requiredItem[num72].Clone();
							if (recipe[availableRecipe[focusRecipe]].anyIronBar && recipe[availableRecipe[focusRecipe]].requiredItem[num72].type == 22)
							{
								toolTip.SetNameOverride(Lang.misc[37].Value + " " + Lang.GetItemNameValue(22));
							}
							else if (recipe[availableRecipe[focusRecipe]].anyWood && recipe[availableRecipe[focusRecipe]].requiredItem[num72].type == 9)
							{
								toolTip.SetNameOverride(Lang.misc[37].Value + " " + Lang.GetItemNameValue(9));
							}
							else if (recipe[availableRecipe[focusRecipe]].anySand && recipe[availableRecipe[focusRecipe]].requiredItem[num72].type == 169)
							{
								toolTip.SetNameOverride(Lang.misc[37].Value + " " + Lang.GetItemNameValue(169));
							}
							else if (recipe[availableRecipe[focusRecipe]].anyFragment && recipe[availableRecipe[focusRecipe]].requiredItem[num72].type == 3458)
							{
								toolTip.SetNameOverride(string.Concat(Lang.misc[37], " ", Lang.misc[51]));
							}
							else if (recipe[availableRecipe[focusRecipe]].anyPressurePlate && recipe[availableRecipe[focusRecipe]].requiredItem[num72].type == 542)
							{
								toolTip.SetNameOverride(string.Concat(Lang.misc[37], " ", Lang.misc[38]));
							}
							if (recipe[availableRecipe[focusRecipe]].requiredItem[num72].stack > 1)
							{
								object obj = hoverItemName;
								hoverItemName = string.Concat(obj, " (", recipe[availableRecipe[focusRecipe]].requiredItem[num72].stack, ")");
							}
						}
						num75 -= 50.0;
						if (num75 < 0.0)
						{
							num75 = 0.0;
						}
						Microsoft.Xna.Framework.Color color6 = inventoryBack;
						inventoryBack = new Microsoft.Xna.Framework.Color((byte)num75, (byte)num75, (byte)num75, (byte)num75);
						ItemSlot.Draw(spriteBatch, ref recipe[availableRecipe[focusRecipe]].requiredItem[num72], 22, new Vector2(num73, num74));
						inventoryBack = color6;
					}
				}
				if (numAvailableRecipes == 0)
				{
					recBigList = false;
				}
				else
				{
					int num77 = 94;
					int num78 = 450 + num46;
					if (craftGuide)
					{
						num78 -= 150;
					}
					bool flag9 = mouseX > num77 - 15 && mouseX < num77 + 15 && mouseY > num78 - 15 && mouseY < num78 + 15;
					int num79 = recBigList.ToInt() * 2 + flag9.ToInt();
					spriteBatch.Draw(craftToggleTexture[num79], new Vector2(num77, num78), null, Microsoft.Xna.Framework.Color.White, 0f, craftToggleTexture[num79].Size() / 2f, 1f, SpriteEffects.None, 0f);
					if (flag9)
					{
						MouseText("Crafting window", 0, 0);
						player[myPlayer].mouseInterface = true;
						if (mouseLeft && mouseLeftRelease)
						{
							if (!recBigList)
							{
								recBigList = true;
								PlaySound(12);
							}
							else
							{
								recBigList = false;
								PlaySound(12);
							}
						}
					}
				}
			}
			if (recBigList)
			{
				int num80 = 42;
				if ((double)inventoryScale < 0.75)
				{
					inventoryScale = 0.75f;
				}
				int num81 = 340;
				int num82 = 310;
				int num83 = (screenWidth - num82 - 280) / num80;
				int num84 = (screenHeight - num81 - 20) / num80;
				int num85 = 0;
				int num86 = 0;
				int num87 = num82;
				int num88 = num81;
				int num89 = num82 - 20;
				int num90 = num81 + 2;
				if (recStart > numAvailableRecipes - num83 * num84)
				{
					recStart = numAvailableRecipes - num83 * num84;
					if (recStart < 0)
					{
						recStart = 0;
					}
				}
				if (recStart > 0)
				{
					if (mouseX >= num89 && mouseX <= num89 + craftUpButtonTexture.Width && mouseY >= num90 && mouseY <= num90 + craftUpButtonTexture.Height)
					{
						player[myPlayer].mouseInterface = true;
						if (mouseLeftRelease && mouseLeft)
						{
							recStart -= num83;
							if (recStart < 0)
							{
								recStart = 0;
							}
							PlaySound(12);
							mouseLeftRelease = false;
						}
					}
					spriteBatch.Draw(craftUpButtonTexture, new Vector2(num89, num90), new Microsoft.Xna.Framework.Rectangle(0, 0, craftUpButtonTexture.Width, craftUpButtonTexture.Height), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				if (recStart < numAvailableRecipes - num83 * num84)
				{
					num90 += 20;
					if (mouseX >= num89 && mouseX <= num89 + craftUpButtonTexture.Width && mouseY >= num90 && mouseY <= num90 + craftUpButtonTexture.Height)
					{
						player[myPlayer].mouseInterface = true;
						if (mouseLeftRelease && mouseLeft)
						{
							recStart += num83;
							PlaySound(12);
							if (recStart > numAvailableRecipes - num83)
							{
								recStart = numAvailableRecipes - num83;
							}
							mouseLeftRelease = false;
						}
					}
					spriteBatch.Draw(craftDownButtonTexture, new Vector2(num89, num90), new Microsoft.Xna.Framework.Rectangle(0, 0, craftUpButtonTexture.Width, craftUpButtonTexture.Height), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				for (int num91 = recStart; num91 < Recipe.maxRecipes && num91 < numAvailableRecipes; num91++)
				{
					int num92 = num87;
					int num93 = num88;
					double num94 = inventoryBack.A + 50;
					double num95 = 255.0;
					new Microsoft.Xna.Framework.Color((byte)num94, (byte)num94, (byte)num94, (byte)num94);
					new Microsoft.Xna.Framework.Color((byte)num95, (byte)num95, (byte)num95, (byte)num95);
					if (mouseX >= num92 && (float)mouseX <= (float)num92 + (float)inventoryBackTexture.Width * inventoryScale && mouseY >= num93 && (float)mouseY <= (float)num93 + (float)inventoryBackTexture.Height * inventoryScale)
					{
						player[myPlayer].mouseInterface = true;
						if (mouseLeftRelease && mouseLeft)
						{
							focusRecipe = num91;
							recFastScroll = true;
							recBigList = false;
							PlaySound(12);
							mouseLeftRelease = false;
						}
						craftingHide = true;
						hoverItemName = recipe[availableRecipe[num91]].createItem.Name;
						toolTip = recipe[availableRecipe[num91]].createItem.Clone();
						if (recipe[availableRecipe[num91]].createItem.stack > 1)
						{
							object obj = hoverItemName;
							hoverItemName = string.Concat(obj, " (", recipe[availableRecipe[num91]].createItem.stack, ")");
						}
					}
					if (numAvailableRecipes > 0)
					{
						num94 -= 50.0;
						if (num94 < 0.0)
						{
							num94 = 0.0;
						}
						Microsoft.Xna.Framework.Color color7 = inventoryBack;
						inventoryBack = new Microsoft.Xna.Framework.Color((byte)num94, (byte)num94, (byte)num94, (byte)num94);
						ItemSlot.Draw(spriteBatch, ref recipe[availableRecipe[num91]].createItem, 22, new Vector2(num92, num93));
						inventoryBack = color7;
					}
					num87 += num80;
					num85++;
					if (num85 >= num83)
					{
						num87 = num82;
						num88 += num80;
						num85 = 0;
						num86++;
						if (num86 >= num84)
						{
							break;
						}
					}
				}
			}
			Vector2 vector2 = fontMouseText.MeasureString("Coins");
			Vector2 vector3 = fontMouseText.MeasureString(Lang.inter[26].Value);
			float num96 = vector2.X / vector3.X;
			spriteBatch.DrawString(fontMouseText, Lang.inter[26].Value, new Vector2(496f, 84f + (vector2.Y - vector2.Y * num96) / 2f), new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, default(Vector2), 0.75f * num96, SpriteEffects.None, 0f);
			inventoryScale = 0.6f;
			for (int num97 = 0; num97 < 4; num97++)
			{
				int num98 = 497;
				int num99 = (int)(85f + (float)(num97 * 56) * inventoryScale + 20f);
				int slot = num97 + 50;
				new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
				if (mouseX >= num98 && (float)mouseX <= (float)num98 + (float)inventoryBackTexture.Width * inventoryScale && mouseY >= num99 && (float)mouseY <= (float)num99 + (float)inventoryBackTexture.Height * inventoryScale)
				{
					player[myPlayer].mouseInterface = true;
					ItemSlot.OverrideHover(player[myPlayer].inventory, 1, slot);
					if (mouseLeftRelease && mouseLeft)
					{
						ItemSlot.LeftClick(player[myPlayer].inventory, 1, slot);
						Recipe.FindRecipes();
					}
					else
					{
						ItemSlot.RightClick(player[myPlayer].inventory, 1, slot);
					}
					ItemSlot.MouseHover(player[myPlayer].inventory, 1, slot);
				}
				ItemSlot.Draw(spriteBatch, player[myPlayer].inventory, 1, slot, new Vector2(num98, num99));
			}
			Vector2 vector4 = fontMouseText.MeasureString("Ammo");
			Vector2 vector5 = fontMouseText.MeasureString(Lang.inter[27].Value);
			float num100 = vector4.X / vector5.X;
			spriteBatch.DrawString(fontMouseText, Lang.inter[27].Value, new Vector2(532f, 84f + (vector4.Y - vector4.Y * num100) / 2f), new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, default(Vector2), 0.75f * num100, SpriteEffects.None, 0f);
			inventoryScale = 0.6f;
			for (int num101 = 0; num101 < 4; num101++)
			{
				int num102 = 534;
				int num103 = (int)(85f + (float)(num101 * 56) * inventoryScale + 20f);
				int slot2 = 54 + num101;
				new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
				if (mouseX >= num102 && (float)mouseX <= (float)num102 + (float)inventoryBackTexture.Width * inventoryScale && mouseY >= num103 && (float)mouseY <= (float)num103 + (float)inventoryBackTexture.Height * inventoryScale)
				{
					player[myPlayer].mouseInterface = true;
					ItemSlot.OverrideHover(player[myPlayer].inventory, 2, slot2);
					if (mouseLeftRelease && mouseLeft)
					{
						ItemSlot.LeftClick(player[myPlayer].inventory, 2, slot2);
						Recipe.FindRecipes();
					}
					else
					{
						ItemSlot.RightClick(player[myPlayer].inventory, 2, slot2);
					}
					ItemSlot.MouseHover(player[myPlayer].inventory, 2, slot2);
				}
				ItemSlot.Draw(spriteBatch, player[myPlayer].inventory, 2, slot2, new Vector2(num102, num103));
			}
			if (npcShop > 0 && (!playerInventory || player[myPlayer].talkNPC == -1))
			{
				npcShop = 0;
			}
			if (npcShop > 0)
			{
				Utils.DrawBorderStringFourWay(spriteBatch, fontMouseText, Lang.inter[28].Value, 504f, invBottom, Microsoft.Xna.Framework.Color.White * ((float)(int)mouseTextColor / 255f), Microsoft.Xna.Framework.Color.Black, Vector2.Zero);
				ItemSlot.DrawSavings(spriteBatch, 504f, invBottom);
				inventoryScale = 0.755f;
				if (mouseX > 73 && mouseX < (int)(73f + 560f * inventoryScale) && mouseY > invBottom && mouseY < (int)((float)invBottom + 224f * inventoryScale))
				{
					player[myPlayer].mouseInterface = true;
				}
				for (int num104 = 0; num104 < 10; num104++)
				{
					for (int num105 = 0; num105 < 4; num105++)
					{
						int num106 = (int)(73f + (float)(num104 * 56) * inventoryScale);
						int num107 = (int)((float)invBottom + (float)(num105 * 56) * inventoryScale);
						int slot3 = num104 + num105 * 10;
						new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
						if (mouseX >= num106 && (float)mouseX <= (float)num106 + (float)inventoryBackTexture.Width * inventoryScale && mouseY >= num107 && (float)mouseY <= (float)num107 + (float)inventoryBackTexture.Height * inventoryScale)
						{
							player[myPlayer].mouseInterface = true;
							if (mouseLeftRelease && mouseLeft)
							{
								ItemSlot.LeftClick(shop[npcShop].item, 15, slot3);
							}
							else
							{
								ItemSlot.RightClick(shop[npcShop].item, 15, slot3);
							}
							ItemSlot.MouseHover(shop[npcShop].item, 15, slot3);
						}
						ItemSlot.Draw(spriteBatch, shop[npcShop].item, 15, slot3, new Vector2(num106, num107));
					}
				}
			}
			if (player[myPlayer].chest > -1 && !tileContainer[tile[player[myPlayer].chestX, player[myPlayer].chestY].type])
			{
				player[myPlayer].chest = -1;
				Recipe.FindRecipes();
			}
			ChestUI.Draw(spriteBatch);
			if (player[myPlayer].chest != -1 || npcShop != 0)
			{
				return;
			}
			int num108 = 0;
			int num109 = 498;
			int num110 = 244;
			int width = chestStackTexture[num108].Width;
			int height = chestStackTexture[num108].Height;
			if (mouseX >= num109 && mouseX <= num109 + width && mouseY >= num110 && mouseY <= num110 + height)
			{
				num108 = 1;
				if (!allChestStackHover)
				{
					PlaySound(12);
					allChestStackHover = true;
				}
				if (mouseLeft && mouseLeftRelease)
				{
					mouseLeftRelease = false;
					player[myPlayer].QuickStackAllChests();
					Recipe.FindRecipes();
				}
				player[myPlayer].mouseInterface = true;
			}
			else if (allChestStackHover)
			{
				PlaySound(12);
				allChestStackHover = false;
			}
			spriteBatch.Draw(chestStackTexture[num108], new Vector2(num109, num110), new Microsoft.Xna.Framework.Rectangle(0, 0, chestStackTexture[num108].Width, chestStackTexture[num108].Height), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			if (!mouseText && num108 == 1)
			{
				MouseText("Quick stack to nearby chests", 0, 0);
			}
		}

		private static void DrawPVPIcons()
		{
			inventoryScale = 0.6f;
			int num = (int)(52f * inventoryScale);
			int num2 = 707 - num * 4 + screenWidth - 800;
			int num3 = 114 + mH + num * 2 + num / 2 - 12;
			if (EquipPage == 2)
			{
				num2 += num + num / 2;
			}
			int num4 = player[myPlayer].hostile ? 2 : 0;
			if (mouseX > num2 && mouseX < num2 + 34 && mouseY > num3 - 2 && mouseY < num3 + 34)
			{
				player[myPlayer].mouseInterface = true;
				if (teamCooldown == 0)
				{
					num4++;
				}
				if (mouseLeft && mouseLeftRelease && teamCooldown == 0)
				{
					teamCooldown = teamCooldownLen;
					PlaySound(12);
					player[myPlayer].hostile = !player[myPlayer].hostile;
					NetMessage.SendData(30, -1, -1, "", myPlayer);
				}
			}
			Microsoft.Xna.Framework.Rectangle rectangle = PVPTexture[0].Frame(4, 6);
			rectangle.Location = new Microsoft.Xna.Framework.Point(rectangle.Width * num4, rectangle.Height * player[myPlayer].team);
			spriteBatch.Draw(PVPTexture[0], new Vector2(num2 - 10, num3), rectangle, Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, Vector2.One, SpriteEffects.None, 0f);
			num3 += 60;
			num2 -= 10;
			rectangle = PVPTexture[1].Frame(6);
			Microsoft.Xna.Framework.Rectangle rectangle2 = rectangle;
			for (int i = 0; i < 6; i++)
			{
				rectangle2.Location = new Microsoft.Xna.Framework.Point(num2 + i % 2 * 20, num3 + i / 2 * 20);
				rectangle.X = rectangle.Width * i;
				bool flag = false;
				if (rectangle2.Contains(MouseScreen.ToPoint()))
				{
					player[myPlayer].mouseInterface = true;
					if (teamCooldown == 0)
					{
						flag = true;
					}
					if (mouseLeft && mouseLeftRelease && player[myPlayer].team != i && teamCooldown == 0)
					{
						teamCooldown = teamCooldownLen;
						PlaySound(12);
						player[myPlayer].team = i;
						NetMessage.SendData(45, -1, -1, "", myPlayer);
					}
				}
				if (flag)
				{
					spriteBatch.Draw(PVPTexture[2], rectangle2.Location.ToVector2() + new Vector2(-2f), Microsoft.Xna.Framework.Color.White);
				}
				spriteBatch.Draw(PVPTexture[1], rectangle2.Location.ToVector2(), rectangle, Microsoft.Xna.Framework.Color.White);
			}
		}

		private static int DrawPageIcons()
		{
			int num = -1;
			Vector2 vector = new Vector2(screenWidth - 162, 142 + mH);
			vector.X += 82f;
			Texture2D texture2D = EquipPageTexture[(EquipPage == 2) ? 3 : 2];
			if (Collision.CheckAABBvAABBCollision(vector, texture2D.Size(), new Vector2(mouseX, mouseY), Vector2.One) && (mouseItem.stack < 1 || mouseItem.dye > 0))
			{
				num = 2;
			}
			if (num == 2)
			{
				spriteBatch.Draw(EquipPageTexture[6], vector, null, OurFavoriteColor, 0f, new Vector2(2f), 0.9f, SpriteEffects.None, 0f);
			}
			spriteBatch.Draw(texture2D, vector, null, Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, 0.9f, SpriteEffects.None, 0f);
			vector.X -= 48f;
			texture2D = EquipPageTexture[(EquipPage == 1) ? 5 : 4];
			if (Collision.CheckAABBvAABBCollision(vector, texture2D.Size(), new Vector2(mouseX, mouseY), Vector2.One) && mouseItem.stack < 1)
			{
				num = 1;
			}
			if (num == 1)
			{
				spriteBatch.Draw(EquipPageTexture[7], vector, null, OurFavoriteColor, 0f, new Vector2(2f), 0.9f, SpriteEffects.None, 0f);
			}
			spriteBatch.Draw(texture2D, vector, null, Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, 0.9f, SpriteEffects.None, 0f);
			vector.X -= 48f;
			texture2D = EquipPageTexture[(EquipPage == 3) ? 10 : 8];
			if (Collision.CheckAABBvAABBCollision(vector, texture2D.Size(), new Vector2(mouseX, mouseY), Vector2.One) && mouseItem.stack < 1)
			{
				num = 3;
			}
			if (num == 3 && !CaptureModeDisabled)
			{
				spriteBatch.Draw(EquipPageTexture[9], vector, null, OurFavoriteColor, 0f, Vector2.Zero, 0.9f, SpriteEffects.None, 0f);
			}
			spriteBatch.Draw(texture2D, vector, null, CaptureModeDisabled ? Microsoft.Xna.Framework.Color.Red : Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, 0.9f, SpriteEffects.None, 0f);
			if (num != -1)
			{
				player[myPlayer].mouseInterface = true;
				if (mouseLeft && mouseLeftRelease)
				{
					bool flag = true;
					if (num == 3)
					{
						if (CaptureModeDisabled)
						{
							flag = false;
						}
						else
						{
							CaptureManager.Instance.Active = true;
							blockMouse = true;
						}
					}
					else if (EquipPageSelected != num)
					{
						EquipPageSelected = num;
					}
					else
					{
						EquipPageSelected = 0;
					}
					if (flag)
					{
						PlaySound(12);
					}
				}
			}
			ItemSlot.EquipPage(mouseItem);
			if (EquipPage == -1)
			{
				EquipPage = EquipPageSelected;
			}
			return num;
		}

		public void DrawMouseOver()
		{
			Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)((float)mouseX + screenPosition.X), (int)((float)mouseY + screenPosition.Y), 1, 1);
			if (player[myPlayer].gravDir == -1f)
			{
				rectangle.Y = (int)screenPosition.Y + screenHeight - mouseY;
			}
			GUIBarsMouseOverLife();
			GUIBarsMouseOverMana();
			IngameOptions.MouseOver();
			AchievementsUI.MouseOver();
			if (!mouseText)
			{
				for (int i = 0; i < 400; i++)
				{
					if (!item[i].active)
					{
						continue;
					}
					Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle((int)((double)item[i].position.X + (double)item[i].width * 0.5 - (double)itemTexture[item[i].type].Width * 0.5), (int)(item[i].position.Y + (float)item[i].height - (float)itemTexture[item[i].type].Height), itemTexture[item[i].type].Width, itemTexture[item[i].type].Height);
					if (rectangle.Intersects(value))
					{
						player[myPlayer].showItemIcon = false;
						string text = item[i].AffixName();
						if (item[i].stack > 1)
						{
							object obj = text;
							text = string.Concat(obj, " (", item[i].stack, ")");
						}
						if (item[i].owner < 16 && showItemOwner)
						{
							text = text + " <" + player[item[i].owner].name + ">";
						}
						rare = item[i].rare;
						if (item[i].expert)
						{
							rare = -12;
						}
						MouseText(text, rare, 0);
						mouseText = true;
						break;
					}
				}
			}
			for (int j = 0; j < 16; j++)
			{
				if (!player[j].active || myPlayer == j || player[j].dead)
				{
					continue;
				}
				Microsoft.Xna.Framework.Rectangle value2 = new Microsoft.Xna.Framework.Rectangle((int)((double)player[j].position.X + (double)player[j].width * 0.5 - 16.0), (int)(player[j].position.Y + (float)player[j].height - 48f), 32, 48);
				if (!mouseText && rectangle.Intersects(value2))
				{
					player[myPlayer].showItemIcon = false;
					int num = player[j].statLife;
					if (num < 0)
					{
						num = 0;
					}
					string text2 = player[j].name + ": " + num + "/" + player[j].statLifeMax2;
					if (player[j].hostile)
					{
						text2 += " (PvP)";
					}
					MouseText(text2, 0, player[j].difficulty);
					mouseText = true;
				}
			}
			if (!mouseText)
			{
				for (int k = 0; k < 200; k++)
				{
					if (!npc[k].active)
					{
						continue;
					}
					int type = npc[k].type;
					LoadNPC(type);
					Microsoft.Xna.Framework.Rectangle value3 = new Microsoft.Xna.Framework.Rectangle((int)((double)npc[k].position.X + (double)npc[k].width * 0.5 - (double)npcTexture[type].Width * 0.5), (int)(npc[k].position.Y + (float)npc[k].height - (float)(npcTexture[type].Height / npcFrameCount[type])), npcTexture[type].Width, npcTexture[type].Height / npcFrameCount[type]);
					if (npc[k].type >= 87 && npc[k].type <= 92)
					{
						value3 = new Microsoft.Xna.Framework.Rectangle((int)((double)npc[k].position.X + (double)npc[k].width * 0.5 - 32.0), (int)((double)npc[k].position.Y + (double)npc[k].height * 0.5 - 32.0), 64, 64);
					}
					if (!rectangle.Intersects(value3) || ((npc[k].type == 85 || npc[k].type == 341 || npc[k].aiStyle == 87) && npc[k].ai[0] == 0f) || npc[k].type == 488)
					{
						continue;
					}
					bool flag = false;
					if (npc[k].townNPC || npc[k].type == 105 || npc[k].type == 106 || npc[k].type == 123 || npc[k].type == 354 || npc[k].type == 376 || npc[k].type == 453)
					{
						Microsoft.Xna.Framework.Rectangle rectangle2 = new Microsoft.Xna.Framework.Rectangle((int)(player[myPlayer].position.X + (float)(player[myPlayer].width / 2) - (float)(Player.tileRangeX * 16)), (int)(player[myPlayer].position.Y + (float)(player[myPlayer].height / 2) - (float)(Player.tileRangeY * 16)), Player.tileRangeX * 16 * 2, Player.tileRangeY * 16 * 2);
						Microsoft.Xna.Framework.Rectangle value4 = new Microsoft.Xna.Framework.Rectangle((int)npc[k].position.X, (int)npc[k].position.Y, npc[k].width, npc[k].height);
						if (rectangle2.Intersects(value4))
						{
							flag = true;
						}
					}
					if (flag && !player[myPlayer].dead)
					{
						int num2 = -(npc[k].width / 2 + 8);
						float num3 = npc[k].position.Y - (float)chatTexture.Height - (float)(int)screenPosition.Y;
						SpriteEffects spriteEffects = SpriteEffects.None;
						if (npc[k].spriteDirection == -1)
						{
							spriteEffects = SpriteEffects.FlipHorizontally;
							num2 = npc[k].width / 2 + 8;
						}
						if (player[myPlayer].gravDir != 1f)
						{
							spriteEffects |= SpriteEffects.FlipVertically;
							num3 = (float)screenHeight - num3 - (float)chatTexture.Height;
						}
						spriteBatch.Draw(chatTexture, new Vector2(npc[k].position.X + (float)(npc[k].width / 2) - screenPosition.X - (float)(chatTexture.Width / 2) - (float)num2, num3), new Microsoft.Xna.Framework.Rectangle(0, 0, chatTexture.Width, chatTexture.Height), new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, default(Vector2), 1f, spriteEffects, 0f);
						if (mouseRight && npcChatRelease)
						{
							npcChatRelease = false;
							if (player[myPlayer].talkNPC != k)
							{
								CancelHairWindow();
								npcShop = 0;
								craftGuide = false;
								player[myPlayer].dropItemCheck();
								npcChatCornerItem = 0;
								player[myPlayer].sign = -1;
								editSign = false;
								player[myPlayer].talkNPC = k;
								playerInventory = false;
								player[myPlayer].chest = -1;
								Recipe.FindRecipes();
								npcChatText = npc[k].GetChat();
								PlaySound(24);
							}
						}
					}
					player[myPlayer].showItemIcon = false;
					string text3 = npc[k].FullName;
					int num4 = k;
					if (npc[k].realLife >= 0)
					{
						num4 = npc[k].realLife;
					}
					if (npc[num4].lifeMax > 1 && !npc[num4].dontTakeDamage)
					{
						object obj2 = text3;
						text3 = string.Concat(obj2, ": ", npc[num4].life, "/", npc[num4].lifeMax);
					}
					MouseText(text3, 0, 0);
					mouseText = true;
					break;
				}
			}
			if (mouseText)
			{
				return;
			}
			if (signHover != -1 && sign[signHover] != null && !player[myPlayer].mouseInterface)
			{
				int lineAmount;
				string[] array = Utils.WordwrapString(sign[signHover].text, fontMouseText, 460, 10, out lineAmount);
				lineAmount++;
				float num5 = 0f;
				for (int l = 0; l < lineAmount; l++)
				{
					float x = fontMouseText.MeasureString(array[l]).X;
					if (num5 < x)
					{
						num5 = x;
					}
				}
				if (num5 > 460f)
				{
					num5 = 460f;
				}
				Vector2 vector = new Vector2(mouseX, mouseY) + new Vector2(16f);
				if (vector.Y > (float)(screenHeight - 30 * lineAmount))
				{
					vector.Y = screenHeight - 30 * lineAmount;
				}
				if (vector.X > (float)screenWidth - num5)
				{
					vector.X = screenWidth - 460;
				}
				for (int m = 0; m < lineAmount; m++)
				{
					Utils.DrawBorderStringFourWay(spriteBatch, fontMouseText, array[m], vector.X, vector.Y + (float)(m * 30), new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), Microsoft.Xna.Framework.Color.Black, Vector2.Zero);
				}
				mouseText = true;
			}
			signHover = -1;
		}

		private void GUIBarsMouseOverLife()
		{
			if (!mouseText)
			{
				int num = 26 * player[myPlayer].statLifeMax2 / (int)heartLife;
				int num2 = 0;
				if (player[myPlayer].statLifeMax2 > 200)
				{
					num = 260;
					num2 += 26;
				}
				if (mouseX > 500 + sX && mouseX < 500 + num + sX && mouseY > 32 && mouseY < 32 + heartTexture.Height + num2)
				{
					player[myPlayer].showItemIcon = false;
					string cursorText = player[myPlayer].statLife + "/" + player[myPlayer].statLifeMax2;
					MouseText(cursorText, 0, 0);
					mouseText = true;
				}
			}
		}

		private void GUIBarsMouseOverMana()
		{
			if (!mouseText)
			{
				int num = 24;
				int num2 = 28 * player[myPlayer].statManaMax2 / starMana;
				if (mouseX > 762 + sX && mouseX < 762 + num + sX && mouseY > 30 && mouseY < 30 + num2)
				{
					player[myPlayer].showItemIcon = false;
					string cursorText = player[myPlayer].statMana + "/" + player[myPlayer].statManaMax2;
					MouseText(cursorText, 0, 0);
					mouseText = true;
				}
			}
		}

		public void GUIBarsDraw()
		{
			if (ignoreErrors)
			{
				try
				{
					GUIBarsDrawInner();
				}
				catch (Exception e)
				{
					TimeLogger.DrawException(e);
				}
			}
			else
			{
				GUIBarsDrawInner();
			}
		}

		protected void GUIBarsDrawInner()
		{
			sX = screenWidth - 800;
			heartLife = 20f;
			int num = player[myPlayer].statLifeMax / 20;
			int num2 = (player[myPlayer].statLifeMax - 400) / 5;
			if (num2 < 0)
			{
				num2 = 0;
			}
			if (num2 > 0)
			{
				num = player[myPlayer].statLifeMax / (20 + num2 / 4);
				heartLife = (float)player[myPlayer].statLifeMax / 20f;
			}
			int num3 = player[myPlayer].statLifeMax2 - player[myPlayer].statLifeMax;
			heartLife += num3 / num;
			int num4 = (int)((float)player[myPlayer].statLifeMax2 / heartLife);
			if (num4 >= 10)
			{
				num4 = 10;
			}
			string text = string.Concat(Lang.inter[0], " ", player[myPlayer].statLifeMax2, "/", player[myPlayer].statLifeMax2);
			Vector2 vector = fontMouseText.MeasureString(text);
			if (!player[myPlayer].ghost)
			{
				spriteBatch.DrawString(fontMouseText, Lang.inter[0].Value, new Vector2((float)(500 + 13 * num4) - vector.X * 0.5f + (float)sX, 6f), new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				spriteBatch.DrawString(fontMouseText, player[myPlayer].statLife + "/" + player[myPlayer].statLifeMax2, new Vector2((float)(500 + 13 * num4) + vector.X * 0.5f + (float)sX, 6f), new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, new Vector2(fontMouseText.MeasureString(player[myPlayer].statLife + "/" + player[myPlayer].statLifeMax2).X, 0f), 1f, SpriteEffects.None, 0f);
			}
			for (int i = 1; i < (int)((float)player[myPlayer].statLifeMax2 / heartLife) + 1; i++)
			{
				int num5 = 255;
				float num6 = 1f;
				bool flag = false;
				if ((float)player[myPlayer].statLife >= (float)i * heartLife)
				{
					num5 = 255;
					if ((float)player[myPlayer].statLife == (float)i * heartLife)
					{
						flag = true;
					}
				}
				else
				{
					float num7 = ((float)player[myPlayer].statLife - (float)(i - 1) * heartLife) / heartLife;
					num5 = (int)(30f + 225f * num7);
					if (num5 < 30)
					{
						num5 = 30;
					}
					num6 = num7 / 4f + 0.75f;
					if ((double)num6 < 0.75)
					{
						num6 = 0.75f;
					}
					if (num7 > 0f)
					{
						flag = true;
					}
				}
				if (flag)
				{
					num6 += cursorScale - 1f;
				}
				int num8 = 0;
				int num9 = 0;
				if (i > 10)
				{
					num8 -= 260;
					num9 += 26;
				}
				int a = (int)((double)(float)num5 * 0.9);
				if (!player[myPlayer].ghost)
				{
					if (num2 > 0)
					{
						num2--;
						spriteBatch.Draw(heart2Texture, new Vector2(500 + 26 * (i - 1) + num8 + sX + heartTexture.Width / 2, 32f + ((float)heartTexture.Height - (float)heartTexture.Height * num6) / 2f + (float)num9 + (float)(heartTexture.Height / 2)), new Microsoft.Xna.Framework.Rectangle(0, 0, heartTexture.Width, heartTexture.Height), new Microsoft.Xna.Framework.Color(num5, num5, num5, a), 0f, new Vector2(heartTexture.Width / 2, heartTexture.Height / 2), num6, SpriteEffects.None, 0f);
					}
					else
					{
						spriteBatch.Draw(heartTexture, new Vector2(500 + 26 * (i - 1) + num8 + sX + heartTexture.Width / 2, 32f + ((float)heartTexture.Height - (float)heartTexture.Height * num6) / 2f + (float)num9 + (float)(heartTexture.Height / 2)), new Microsoft.Xna.Framework.Rectangle(0, 0, heartTexture.Width, heartTexture.Height), new Microsoft.Xna.Framework.Color(num5, num5, num5, a), 0f, new Vector2(heartTexture.Width / 2, heartTexture.Height / 2), num6, SpriteEffects.None, 0f);
					}
				}
			}
			starMana = 20;
			if (player[myPlayer].statManaMax2 > 0)
			{
				int num20 = player[myPlayer].statManaMax2 / 20;
				spriteBatch.DrawString(fontMouseText, Lang.inter[2].Value, new Vector2(750 + sX, 6f), new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				for (int j = 1; j < player[myPlayer].statManaMax2 / starMana + 1; j++)
				{
					int num10 = 255;
					bool flag2 = false;
					float num11 = 1f;
					if (player[myPlayer].statMana >= j * starMana)
					{
						num10 = 255;
						if (player[myPlayer].statMana == j * starMana)
						{
							flag2 = true;
						}
					}
					else
					{
						float num12 = (float)(player[myPlayer].statMana - (j - 1) * starMana) / (float)starMana;
						num10 = (int)(30f + 225f * num12);
						if (num10 < 30)
						{
							num10 = 30;
						}
						num11 = num12 / 4f + 0.75f;
						if ((double)num11 < 0.75)
						{
							num11 = 0.75f;
						}
						if (num12 > 0f)
						{
							flag2 = true;
						}
					}
					if (flag2)
					{
						num11 += cursorScale - 1f;
					}
					int a2 = (int)((double)(float)num10 * 0.9);
					spriteBatch.Draw(manaTexture, new Vector2(775 + sX, (float)(30 + manaTexture.Height / 2) + ((float)manaTexture.Height - (float)manaTexture.Height * num11) / 2f + (float)(28 * (j - 1))), new Microsoft.Xna.Framework.Rectangle(0, 0, manaTexture.Width, manaTexture.Height), new Microsoft.Xna.Framework.Color(num10, num10, num10, a2), 0f, new Vector2(manaTexture.Width / 2, manaTexture.Height / 2), num11, SpriteEffects.None, 0f);
				}
			}
			DrawBreath(num4);
			buffString = "";
			bannerMouseOver = false;
			if (!recBigList)
			{
				recStart = 0;
			}
			if (ingameOptionsWindow || playerInventory || achievementsWindow)
			{
				return;
			}
			recBigList = false;
			int num13 = -1;
			int num14 = 11;
			for (int k = 0; k < 22; k++)
			{
				if (player[myPlayer].buffType[k] > 0)
				{
					int num15 = player[myPlayer].buffType[k];
					int num16 = 32 + k * 38;
					int num17 = 76;
					if (k >= num14)
					{
						num16 = 32 + (k - num14) * 38;
						num17 += 50;
					}
					Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(buffAlpha[k], buffAlpha[k], buffAlpha[k], buffAlpha[k]);
					spriteBatch.Draw(buffTexture[num15], new Vector2(num16, num17), new Microsoft.Xna.Framework.Rectangle(0, 0, buffTexture[num15].Width, buffTexture[num15].Height), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					if (!vanityPet[num15] && !lightPet[num15] && !buffNoTimeDisplay[num15] && (!player[myPlayer].honeyWet || num15 != 48) && (!player[myPlayer].wet || num15 != 46) && player[myPlayer].buffTime[k] > 2)
					{
						string text2 = "0 s";
						text2 = ((player[myPlayer].buffTime[k] / 60 >= 3600) ? (Math.Round((double)(player[myPlayer].buffTime[k] / 60) / 3600.0) + " h") : ((player[myPlayer].buffTime[k] / 60 < 60) ? (Math.Round((double)player[myPlayer].buffTime[k] / 60.0) + " s") : (Math.Round((double)(player[myPlayer].buffTime[k] / 60) / 60.0) + " m")));
						spriteBatch.DrawString(fontItemStack, text2, new Vector2(num16, num17 + buffTexture[num15].Height), color, 0f, default(Vector2), 0.8f, SpriteEffects.None, 0f);
					}
					if (mouseX < num16 + buffTexture[num15].Width && mouseY < num17 + buffTexture[num15].Height && mouseX > num16 && mouseY > num17)
					{
						num13 = k;
						buffAlpha[k] += 0.1f;
						if (mouseRight && mouseRightRelease)
						{
							bool flag3 = false;
							if (!debuff[num15] && num15 != 60 && num15 != 151)
							{
								if (player[myPlayer].mount.Active && player[myPlayer].mount.CheckBuff(num15))
								{
									player[myPlayer].mount.Dismount(player[myPlayer]);
									flag3 = true;
								}
								if (player[myPlayer].miscEquips[0].buffType == num15 && !player[myPlayer].hideMisc[0])
								{
									player[myPlayer].hideMisc[0] = true;
								}
								if (player[myPlayer].miscEquips[1].buffType == num15 && !player[myPlayer].hideMisc[1])
								{
									player[myPlayer].hideMisc[1] = true;
								}
								PlaySound(12);
								if (!flag3)
								{
									player[myPlayer].DelBuff(k);
								}
							}
						}
					}
					else
					{
						buffAlpha[k] -= 0.05f;
					}
					if (buffAlpha[k] > 1f)
					{
						buffAlpha[k] = 1f;
					}
					else if ((double)buffAlpha[k] < 0.4)
					{
						buffAlpha[k] = 0.4f;
					}
				}
				else
				{
					buffAlpha[k] = 0.4f;
				}
			}
			if (num13 < 0)
			{
				return;
			}
			int num18 = player[myPlayer].buffType[num13];
			if (num18 > 0)
			{
				ChangeBuffString(num18);
				if (num18 == 26 && expertMode)
				{
					buffString += Lang.misc[39];
				}
				if (num18 == 147)
				{
					bannerMouseOver = true;
				}
				if (num18 == 94)
				{
					int num19 = (int)(player[myPlayer].manaSickReduction * 100f) + 1;
					buffString = buffString + num19 + "%";
				}
				if (meleeBuff[num18])
				{
					instance.MouseText(Lang.GetBuffName(num18), -10, 0);
				}
				else
				{
					instance.MouseText(Lang.GetBuffName(num18), 0, 0);
				}
			}
		}

		private static void ChangeBuffString(int buffType)
		{
			buffString = Lang.GetBuffDescription(buffType);
			if (buffType == 26 && expertMode)
			{
				buffString = Language.GetTextValue("BuffDescription.WellFed_Expert");
			}
		}

		private static void DrawBreath(int heartCount)
		{
			bool flag = false;
			if (player[myPlayer].lavaTime < player[myPlayer].lavaMax && player[myPlayer].lavaWet)
			{
				flag = true;
			}
			else if (player[myPlayer].lavaTime < player[myPlayer].lavaMax && player[myPlayer].breath == player[myPlayer].breathMax)
			{
				flag = true;
			}
			Vector2 value = player[myPlayer].Top + new Vector2(0f, player[myPlayer].gfxOffY) - screenPosition;
			Vector2 value2 = new Vector2(-125f, -100f);
			if (playerInventory && screenHeight < 1000)
			{
				value2.Y = player[myPlayer].height - 20;
			}
			if (player[myPlayer].breath < player[myPlayer].breathMax && !player[myPlayer].ghost && !flag)
			{
				int num13 = player[myPlayer].breathMax / 20;
				int num = 20;
				for (int i = 1; i < player[myPlayer].breathMax / num + 1; i++)
				{
					int num2 = 255;
					float num3 = 1f;
					if (player[myPlayer].breath >= i * num)
					{
						num2 = 255;
					}
					else
					{
						float num4 = (float)(player[myPlayer].breath - (i - 1) * num) / (float)num;
						num2 = (int)(30f + 225f * num4);
						if (num2 < 30)
						{
							num2 = 30;
						}
						num3 = num4 / 4f + 0.75f;
						if ((double)num3 < 0.75)
						{
							num3 = 0.75f;
						}
					}
					int num5 = 0;
					int num6 = 0;
					if (i > 10)
					{
						num5 -= 260;
						num6 += 26;
					}
					spriteBatch.Draw(bubbleTexture, value + value2 + new Vector2(26 * (i - 1) + num5, 32f + ((float)bubbleTexture.Height - (float)bubbleTexture.Height * num3) / 2f + (float)num6), new Microsoft.Xna.Framework.Rectangle(0, 0, bubbleTexture.Width, bubbleTexture.Height), new Microsoft.Xna.Framework.Color(num2, num2, num2, num2), 0f, default(Vector2), num3, SpriteEffects.None, 0f);
				}
			}
			if (player[myPlayer].lavaTime >= player[myPlayer].lavaMax || player[myPlayer].ghost || !flag)
			{
				return;
			}
			int num7 = player[myPlayer].lavaMax / 10;
			int num14 = player[myPlayer].breathMax / num7;
			for (int j = 1; j < player[myPlayer].lavaMax / num7 + 1; j++)
			{
				int num8 = 255;
				float num9 = 1f;
				if (player[myPlayer].lavaTime >= j * num7)
				{
					num8 = 255;
				}
				else
				{
					float num10 = (float)(player[myPlayer].lavaTime - (j - 1) * num7) / (float)num7;
					num8 = (int)(30f + 225f * num10);
					if (num8 < 30)
					{
						num8 = 30;
					}
					num9 = num10 / 4f + 0.75f;
					if ((double)num9 < 0.75)
					{
						num9 = 0.75f;
					}
				}
				int num11 = 0;
				int num12 = 0;
				if (j > 10)
				{
					num11 -= 260;
					num12 += 26;
				}
				spriteBatch.Draw(flameTexture, value + value2 + new Vector2(26 * (j - 1) + num11, 32f + ((float)flameTexture.Height - (float)flameTexture.Height * num9) / 2f + (float)num12), new Microsoft.Xna.Framework.Rectangle(0, 0, bubbleTexture.Width, bubbleTexture.Height), new Microsoft.Xna.Framework.Color(num8, num8, num8, num8), 0f, default(Vector2), num9, SpriteEffects.None, 0f);
			}
		}

		protected void GUIHotbarDrawInner()
		{
			if (playerInventory || player[myPlayer].ghost)
			{
				return;
			}
			string text = Lang.inter[37].Value;
			if (player[myPlayer].inventory[player[myPlayer].selectedItem].type != 0)
			{
				text = player[myPlayer].inventory[player[myPlayer].selectedItem].AffixName();
			}
			Vector2 vector = fontMouseText.MeasureString(text) / 2f;
			spriteBatch.DrawString(fontMouseText, text, new Vector2(236f - vector.X, 0f), new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			int num = 20;
			for (int i = 0; i < 10; i++)
			{
				if (i == player[myPlayer].selectedItem)
				{
					if (hotbarScale[i] < 1f)
					{
						hotbarScale[i] += 0.05f;
					}
				}
				else if ((double)hotbarScale[i] > 0.75)
				{
					hotbarScale[i] -= 0.05f;
				}
				float num2 = hotbarScale[i];
				int num3 = (int)(20f + 22f * (1f - num2));
				int a = (int)(75f + 150f * num2);
				Microsoft.Xna.Framework.Color lightColor = new Microsoft.Xna.Framework.Color(255, 255, 255, a);
				if (!player[myPlayer].hbLocked && mouseX >= num && (float)mouseX <= (float)num + (float)inventoryBackTexture.Width * hotbarScale[i] && mouseY >= num3 && (float)mouseY <= (float)num3 + (float)inventoryBackTexture.Height * hotbarScale[i] && !player[myPlayer].channel)
				{
					player[myPlayer].mouseInterface = true;
					player[myPlayer].showItemIcon = false;
					if (mouseLeft && !player[myPlayer].hbLocked && !blockMouse)
					{
						player[myPlayer].changeItem = i;
					}
					hoverItemName = player[myPlayer].inventory[i].AffixName();
					if (player[myPlayer].inventory[i].stack > 1)
					{
						object obj = hoverItemName;
						hoverItemName = string.Concat(obj, " (", player[myPlayer].inventory[i].stack, ")");
					}
					rare = player[myPlayer].inventory[i].rare;
				}
				float num4 = inventoryScale;
				inventoryScale = num2;
				ItemSlot.Draw(spriteBatch, player[myPlayer].inventory, 13, i, new Vector2(num, num3), lightColor);
				inventoryScale = num4;
				num += (int)((float)inventoryBackTexture.Width * hotbarScale[i]) + 4;
			}
		}

		public static void OpenHairWindow()
		{
			hBar = -1f;
			lBar = -1f;
			sBar = -1f;
			playerInventory = false;
			npcChatText = "";
			oldHairStyle = player[myPlayer].hair;
			oldHairColor = player[myPlayer].hairColor;
			hairWindow = true;
			PlaySound(10);
		}

		public static void CancelHairWindow()
		{
			if (hairWindow)
			{
				player[myPlayer].hair = oldHairStyle;
				player[myPlayer].hairColor = oldHairColor;
				hairWindow = false;
				if (player[myPlayer].talkNPC > -1 && npc[player[myPlayer].talkNPC].type == 353)
				{
					player[myPlayer].talkNPC = -1;
				}
				PlaySound(11);
			}
		}

		public static void BuyHairWindow()
		{
			PlaySound(18);
			hairWindow = false;
			player[myPlayer].talkNPC = -1;
			npcChatCornerItem = 0;
			NetMessage.SendData(4, -1, -1, player[myPlayer].name, myPlayer);
		}

		protected void DrawHairWindow()
		{
			if (npcChatText != "" || playerInventory || player[myPlayer].chest != -1 || npcShop != 0 || player[myPlayer].talkNPC == -1 || craftGuide)
			{
				CancelHairWindow();
				return;
			}
			int num = 123;
			if (NPC.downedMartians)
			{
				num += 10;
			}
			if (NPC.downedMartians && NPC.downedMoonlord)
			{
				num++;
			}
			int num2 = screenHeight / 2 + 60;
			int num3 = screenWidth / 2 - hairStyleBackTexture.Width / 2;
			int num4 = num2 + 42;
			int num5 = num3 + 22;
			int num6 = num3 + 234;
			int num7 = num2 + 18;
			selColor = player[myPlayer].hairColor;
			spriteBatch.Draw(hairStyleBackTexture, new Vector2(num3, num2), new Microsoft.Xna.Framework.Rectangle(0, 0, hairStyleBackTexture.Width, hairStyleBackTexture.Height), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			if (new Microsoft.Xna.Framework.Rectangle(num3, num2, hairStyleBackTexture.Width, hairStyleBackTexture.Height).Contains(MouseScreen.ToPoint()))
			{
				int num8 = (mouseState.ScrollWheelValue - oldMouseWheel) / 120;
				num8 = -num8;
				int num9 = Math.Sign(num8);
				while (num8 != 0)
				{
					if (num8 < 0)
					{
						hairStart -= 5;
						PlaySound(12);
					}
					else
					{
						hairStart += 5;
						PlaySound(12);
					}
					num8 -= num9;
				}
			}
			if (mouseX > num3 && mouseX < num3 + hairStyleBackTexture.Width && mouseY > num2 && mouseY < num2 + hairStyleBackTexture.Height)
			{
				player[myPlayer].mouseInterface = true;
			}
			int num10 = num6 - 18;
			int num11 = num7 + 74;
			if (hairStart > 1)
			{
				if (mouseX >= num10 && mouseX <= num10 + craftUpButtonTexture.Width && mouseY >= num11 && mouseY <= num11 + craftUpButtonTexture.Height)
				{
					player[myPlayer].mouseInterface = true;
					if (mouseLeftRelease && mouseLeft)
					{
						hairStart -= 15;
						PlaySound(12);
					}
				}
				spriteBatch.Draw(scrollLeftButtonTexture, new Vector2(num10, num11), new Microsoft.Xna.Framework.Rectangle(0, 0, craftUpButtonTexture.Width, craftUpButtonTexture.Height), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			}
			if (hairStart + 15 < num)
			{
				num10 += 296;
				if (mouseX >= num10 && mouseX <= num10 + craftUpButtonTexture.Width && mouseY >= num11 && mouseY <= num11 + craftUpButtonTexture.Height)
				{
					player[myPlayer].mouseInterface = true;
					if (mouseLeftRelease && mouseLeft)
					{
						hairStart += 15;
						PlaySound(12);
					}
				}
				spriteBatch.Draw(scrollRightButtonTexture, new Vector2(num10, num11), new Microsoft.Xna.Framework.Rectangle(0, 0, craftUpButtonTexture.Width, craftUpButtonTexture.Height), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			}
			if (hairStart + 15 >= num)
			{
				hairStart = num - 15;
			}
			if (hairStart < 0)
			{
				hairStart = 0;
			}
			int num12 = 0;
			if (oldHairStyle != player[myPlayer].hair)
			{
				num12 = ((player[myPlayer].hair <= 51) ? (num12 + 10000) : (num12 + 50000));
			}
			if (oldHairColor != player[myPlayer].hairColor)
			{
				num12 += 10000;
			}
			string text = "";
			string text2 = "";
			int num13 = 0;
			int num14 = 0;
			int num15 = 0;
			int num16 = 0;
			int num17 = num12;
			int num34 = 0;
			if (num17 < 0)
			{
				num17 = 0;
			}
			num12 = num17;
			if (num17 >= 1000000)
			{
				num13 = num17 / 1000000;
				num17 -= num13 * 1000000;
			}
			if (num17 >= 10000)
			{
				num14 = num17 / 10000;
				num17 -= num14 * 10000;
			}
			if (num17 >= 100)
			{
				num15 = num17 / 100;
				num17 -= num15 * 100;
			}
			if (num17 >= 1)
			{
				num16 = num17;
			}
			if (num13 > 0)
			{
				object obj = text2;
				text2 = string.Concat(obj, num13, " ", Lang.inter[15], " ");
			}
			if (num14 > 0)
			{
				object obj = text2;
				text2 = string.Concat(obj, num14, " ", Lang.inter[16], " ");
			}
			if (num15 > 0)
			{
				object obj = text2;
				text2 = string.Concat(obj, num15, " ", Lang.inter[17], " ");
			}
			if (num16 > 0)
			{
				object obj = text2;
				text2 = string.Concat(obj, num16, " ", Lang.inter[18], " ");
			}
			text = "Buy (" + text2 + ")";
			if (num12 == 0)
			{
				text = "Buy";
			}
			int num18 = (mouseTextColor * 2 + 255) / 3;
			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(num18, (int)((double)num18 / 1.1), num18 / 2, num18);
			float scale = 0.9f;
			string text3 = text;
			int num19 = num3 + 18;
			int num20 = num2 + 156;
			if (num12 > 0)
			{
				ItemSlot.DrawSavings(spriteBatch, num19, num20 - 70, true);
			}
			if (num12 > 0 && mouseX > num19 && (float)mouseX < (float)num19 + fontMouseText.MeasureString(text3).X && mouseY > num20 && (float)mouseY < (float)num20 + fontMouseText.MeasureString(text3).Y)
			{
				scale = 1.1f;
				if (!npcChatFocus1)
				{
					PlaySound(12);
				}
				npcChatFocus1 = true;
				player[myPlayer].releaseUseItem = false;
			}
			else
			{
				if (npcChatFocus1)
				{
					PlaySound(12);
				}
				npcChatFocus1 = false;
			}
			for (int i = 0; i < 5; i++)
			{
				int num21 = num19;
				int num22 = num20;
				Microsoft.Xna.Framework.Color color2 = Microsoft.Xna.Framework.Color.Black;
				if (i == 0)
				{
					num21 -= 2;
				}
				if (i == 1)
				{
					num21 += 2;
				}
				if (i == 2)
				{
					num22 -= 2;
				}
				if (i == 3)
				{
					num22 += 2;
				}
				if (i == 4)
				{
					color2 = ((num12 != 0) ? color : new Microsoft.Xna.Framework.Color(100, 100, 100));
				}
				Vector2 origin = fontMouseText.MeasureString(text3);
				origin *= 0.5f;
				spriteBatch.DrawString(fontMouseText, text3, new Vector2((float)num21 + origin.X, (float)num22 + origin.Y), color2, 0f, origin, scale, SpriteEffects.None, 0f);
			}
			scale = 0.9f;
			string text4 = "Cancel";
			num19 += 130;
			if (mouseX > num19 && (float)mouseX < (float)num19 + fontMouseText.MeasureString(text4).X && mouseY > num20 && (float)mouseY < (float)num20 + fontMouseText.MeasureString(text4).Y)
			{
				scale = 1.1f;
				if (!npcChatFocus2)
				{
					PlaySound(12);
				}
				npcChatFocus2 = true;
				player[myPlayer].releaseUseItem = false;
			}
			else
			{
				if (npcChatFocus2)
				{
					PlaySound(12);
				}
				npcChatFocus2 = false;
			}
			for (int j = 0; j < 5; j++)
			{
				int num23 = num19;
				int num24 = num20;
				Microsoft.Xna.Framework.Color color3 = Microsoft.Xna.Framework.Color.Black;
				if (j == 0)
				{
					num23 -= 2;
				}
				if (j == 1)
				{
					num23 += 2;
				}
				if (j == 2)
				{
					num24 -= 2;
				}
				if (j == 3)
				{
					num24 += 2;
				}
				if (j == 4)
				{
					color3 = color;
				}
				Vector2 origin2 = fontMouseText.MeasureString(text4);
				origin2 *= 0.5f;
				spriteBatch.DrawString(fontMouseText, text4, new Vector2((float)num23 + origin2.X, (float)num24 + origin2.Y), color3, 0f, origin2, scale, SpriteEffects.None, 0f);
			}
			if (mouseLeft && mouseLeftRelease)
			{
				if (npcChatFocus1)
				{
					if (player[myPlayer].BuyItem(num12))
					{
						BuyHairWindow();
						return;
					}
				}
				else if (npcChatFocus2)
				{
					CancelHairWindow();
					return;
				}
			}
			if (!mouseLeft)
			{
				grabColorSlider = 0;
				blockMouse = false;
			}
			int num25 = 167;
			Vector3 vector = rgbToHsl(selColor);
			float num26 = vector.X;
			float num27 = vector.Y;
			float z = vector.Z;
			if (hBar == -1f || sBar == -1f || lBar == -1f)
			{
				hBar = num26;
				sBar = num27;
				lBar = z;
			}
			else
			{
				num26 = hBar;
				num27 = sBar;
				z = lBar;
			}
			spriteBatch.Draw(hueTexture, new Vector2(num5, num4), Microsoft.Xna.Framework.Color.White);
			spriteBatch.Draw(colorSliderTexture, new Vector2((float)num5 + (float)(hueTexture.Width - 2) * hBar - (float)(colorSliderTexture.Width / 2), num4 - colorSliderTexture.Height / 2 + hueTexture.Height / 2), Microsoft.Xna.Framework.Color.White);
			if (((mouseX > num5 - 4 && mouseX < num5 + hueTexture.Width + 4 && mouseY > num4 - 4 && mouseY < num4 + hueTexture.Height + 4) || grabColorSlider == 1) && mouseLeft && !blockMouse)
			{
				grabColorSlider = 1;
				num26 = mouseX - num5;
				num26 /= (float)hueTexture.Width;
				if (num26 < 0f)
				{
					num26 = 0f;
				}
				if (num26 > 1f)
				{
					num26 = 1f;
				}
				hBar = num26;
			}
			num4 += 26;
			spriteBatch.Draw(colorBarTexture, new Vector2(num5, num4), Microsoft.Xna.Framework.Color.White);
			for (int k = 0; k <= num25; k++)
			{
				float saturation = (float)k / (float)num25;
				Microsoft.Xna.Framework.Color color4 = hslToRgb(num26, saturation, z);
				spriteBatch.Draw(colorBlipTexture, new Vector2(num5 + k + 5, num4 + 4), color4);
			}
			spriteBatch.Draw(colorSliderTexture, new Vector2((float)num5 + (float)(hueTexture.Width - 2) * sBar - (float)(colorSliderTexture.Width / 2), num4 - colorSliderTexture.Height / 2 + hueTexture.Height / 2), Microsoft.Xna.Framework.Color.White);
			if (((mouseX > num5 - 4 && mouseX < num5 + hueTexture.Width + 4 && mouseY > num4 - 4 && mouseY < num4 + hueTexture.Height + 4) || grabColorSlider == 2) && mouseLeft && !blockMouse)
			{
				grabColorSlider = 2;
				num27 = mouseX - num5;
				num27 /= (float)hueTexture.Width;
				if (num27 < 0f)
				{
					num27 = 0f;
				}
				if (num27 > 1f)
				{
					num27 = 1f;
				}
				sBar = num27;
			}
			num4 += 26;
			spriteBatch.Draw(colorBarTexture, new Vector2(num5, num4), Microsoft.Xna.Framework.Color.White);
			float num28 = 0.15f;
			for (int l = 0; l <= num25; l++)
			{
				float luminosity = (float)l / (float)num25;
				Microsoft.Xna.Framework.Color color5 = hslToRgb(num26, num27, luminosity);
				spriteBatch.Draw(colorBlipTexture, new Vector2(num5 + l + 5, num4 + 4), color5);
			}
			spriteBatch.Draw(colorSliderTexture, new Vector2((float)num5 + (float)(hueTexture.Width - 2) * ((lBar - num28) / (1f - num28)) - (float)(colorSliderTexture.Width / 2), num4 - colorSliderTexture.Height / 2 + hueTexture.Height / 2), Microsoft.Xna.Framework.Color.White);
			if (((mouseX > num5 - 4 && mouseX < num5 + hueTexture.Width + 4 && mouseY > num4 - 4 && mouseY < num4 + hueTexture.Height + 4) || grabColorSlider == 3) && mouseLeft && !blockMouse)
			{
				grabColorSlider = 3;
				z = mouseX - num5;
				z /= (float)hueTexture.Width;
				if (z < 0f)
				{
					z = 0f;
				}
				if (z > 1f)
				{
					z = 1f;
				}
				z = (lBar = z * (1f - num28) + num28);
			}
			selColor = hslToRgb(hBar, sBar, lBar);
			player[myPlayer].hairColor = selColor;
			int num29 = num6;
			int num30 = num7;
			int hairStart2 = hairStart;
			int num31 = 0;
			int num32 = 0;
			for (int m = 0; m < 15; m++)
			{
				int num33 = hairStart + m;
				if (player[myPlayer].hair == num33)
				{
					spriteBatch.Draw(inventoryBack14Texture, new Vector2(num29, num30), new Microsoft.Xna.Framework.Rectangle(0, 0, inventoryBackTexture.Width, inventoryBackTexture.Height), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				else
				{
					spriteBatch.Draw(inventoryBack8Texture, new Vector2(num29, num30), new Microsoft.Xna.Framework.Rectangle(0, 0, inventoryBackTexture.Width, inventoryBackTexture.Height), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				if (mouseX > num29 && mouseX < num29 + inventoryBackTexture.Width && mouseY > num30 && mouseY < num30 + inventoryBackTexture.Height && mouseLeft && mouseLeftRelease)
				{
					mouseLeftRelease = false;
					player[myPlayer].hair = num33;
					PlaySound(12);
				}
				LoadHair(num33);
				float x = num29 + inventoryBackTexture.Width / 2 - playerHairTexture[num33].Width / 2;
				float y = num30 + 4;
				spriteBatch.Draw(playerTextures[num31, 0], new Vector2(x, y), new Microsoft.Xna.Framework.Rectangle(0, 0, playerHairTexture[num33].Width, 56), player[myPlayer].skinColor, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				spriteBatch.Draw(playerTextures[num31, 1], new Vector2(x, y), new Microsoft.Xna.Framework.Rectangle(0, 0, playerHairTexture[num33].Width, 56), new Microsoft.Xna.Framework.Color(255, 255, 255, 255), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				spriteBatch.Draw(playerTextures[num31, 2], new Vector2(x, y), new Microsoft.Xna.Framework.Rectangle(0, 0, playerHairTexture[num33].Width, 56), player[myPlayer].eyeColor, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				spriteBatch.Draw(playerHairTexture[num33], new Vector2(x, y), new Microsoft.Xna.Framework.Rectangle(0, 0, playerHairTexture[num33].Width, 56), selColor, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				num32++;
				num29 += 56;
				if (num32 >= 5)
				{
					num32 = 0;
					num29 = num6;
					num30 += 56;
				}
			}
		}

		public static void OpenClothesWindow()
		{
			hBar = -1f;
			lBar = -1f;
			sBar = -1f;
			playerInventory = false;
			npcChatText = "";
			clothesWindow = true;
			PlaySound(10);
			selClothes = 0;
			oldClothesColor[0] = player[myPlayer].shirtColor;
			oldClothesColor[1] = player[myPlayer].underShirtColor;
			oldClothesColor[2] = player[myPlayer].pantsColor;
			oldClothesColor[3] = player[myPlayer].shoeColor;
		}

		public static void CancelClothesWindow(bool quiet = false)
		{
			if (clothesWindow)
			{
				clothesWindow = false;
				if (!quiet)
				{
					PlaySound(11);
				}
				player[myPlayer].shirtColor = oldClothesColor[0];
				player[myPlayer].underShirtColor = oldClothesColor[1];
				player[myPlayer].pantsColor = oldClothesColor[2];
				player[myPlayer].shoeColor = oldClothesColor[3];
			}
		}

		public static void SaveClothesWindow()
		{
			PlaySound(7);
			clothesWindow = false;
			NetMessage.SendData(4, -1, -1, player[myPlayer].name, myPlayer);
		}

		protected void DrawClothesWindow()
		{
			if (npcChatText != "" || playerInventory || player[myPlayer].chest != -1 || npcShop != 0 || player[myPlayer].talkNPC != -1 || craftGuide)
			{
				CancelClothesWindow();
				return;
			}
			int num = (int)(((double)player[myPlayer].position.X + (double)player[myPlayer].width * 0.5) / 16.0);
			int num2 = (int)(((double)player[myPlayer].position.Y + (double)player[myPlayer].height * 0.5) / 16.0);
			if (num < dresserX - 5 || num > dresserX + 6 || num2 < dresserY - 4 || num2 > dresserY + 5 || !tile[dresserX, dresserY].active())
			{
				CancelClothesWindow();
				return;
			}
			int num3 = screenHeight / 2 + 60;
			int num4 = screenWidth / 2 - clothesStyleBackTexture.Width / 2;
			int num5 = num3 + 32;
			int num6 = num4 + 22;
			int num7 = num4 + 234;
			int num8 = num3 + 18;
			if (selClothes == 0)
			{
				selColor = player[myPlayer].shirtColor;
			}
			if (selClothes == 1)
			{
				selColor = player[myPlayer].underShirtColor;
			}
			if (selClothes == 2)
			{
				selColor = player[myPlayer].pantsColor;
			}
			if (selClothes == 3)
			{
				selColor = player[myPlayer].shoeColor;
			}
			spriteBatch.Draw(clothesStyleBackTexture, new Vector2(num4, num3), new Microsoft.Xna.Framework.Rectangle(0, 0, clothesStyleBackTexture.Width, clothesStyleBackTexture.Height), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			if (mouseX > num4 && mouseX < num4 + clothesStyleBackTexture.Width && mouseY > num3 && mouseY < num3 + clothesStyleBackTexture.Height)
			{
				player[myPlayer].mouseInterface = true;
			}
			int num9 = (mouseTextColor * 2 + 255) / 3;
			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(num9, (int)((double)num9 / 1.1), num9 / 2, num9);
			float scale = 0.9f;
			string text = "Change";
			int num10 = num4 + 256;
			int num11 = num3 + 94;
			bool flag = false;
			if (oldClothesColor[0] != player[myPlayer].shirtColor || oldClothesColor[1] != player[myPlayer].underShirtColor || oldClothesColor[2] != player[myPlayer].pantsColor || oldClothesColor[3] != player[myPlayer].shoeColor)
			{
				flag = true;
			}
			if (flag && mouseX > num10 && (float)mouseX < (float)num10 + fontMouseText.MeasureString(text).X && mouseY > num11 && (float)mouseY < (float)num11 + fontMouseText.MeasureString(text).Y)
			{
				scale = 1.1f;
				if (!npcChatFocus1)
				{
					PlaySound(12);
				}
				npcChatFocus1 = true;
				player[myPlayer].releaseUseItem = false;
			}
			else
			{
				if (npcChatFocus1)
				{
					PlaySound(12);
				}
				npcChatFocus1 = false;
			}
			for (int i = 0; i < 5; i++)
			{
				int num12 = num10;
				int num13 = num11;
				Microsoft.Xna.Framework.Color color2 = Microsoft.Xna.Framework.Color.Black;
				if (i == 0)
				{
					num12 -= 2;
				}
				if (i == 1)
				{
					num12 += 2;
				}
				if (i == 2)
				{
					num13 -= 2;
				}
				if (i == 3)
				{
					num13 += 2;
				}
				if (i == 4)
				{
					color2 = (flag ? color : new Microsoft.Xna.Framework.Color(100, 100, 100));
				}
				Vector2 origin = fontMouseText.MeasureString(text);
				origin *= 0.5f;
				spriteBatch.DrawString(fontMouseText, text, new Vector2((float)num12 + origin.X, (float)num13 + origin.Y), color2, 0f, origin, scale, SpriteEffects.None, 0f);
			}
			scale = 0.9f;
			string text2 = "Cancel";
			num10 += 130;
			if (mouseX > num10 && (float)mouseX < (float)num10 + fontMouseText.MeasureString(text2).X && mouseY > num11 && (float)mouseY < (float)num11 + fontMouseText.MeasureString(text2).Y)
			{
				scale = 1.1f;
				if (!npcChatFocus2)
				{
					PlaySound(12);
				}
				npcChatFocus2 = true;
				player[myPlayer].releaseUseItem = false;
			}
			else
			{
				if (npcChatFocus2)
				{
					PlaySound(12);
				}
				npcChatFocus2 = false;
			}
			for (int j = 0; j < 5; j++)
			{
				int num14 = num10;
				int num15 = num11;
				Microsoft.Xna.Framework.Color color3 = Microsoft.Xna.Framework.Color.Black;
				if (j == 0)
				{
					num14 -= 2;
				}
				if (j == 1)
				{
					num14 += 2;
				}
				if (j == 2)
				{
					num15 -= 2;
				}
				if (j == 3)
				{
					num15 += 2;
				}
				if (j == 4)
				{
					color3 = color;
				}
				Vector2 origin2 = fontMouseText.MeasureString(text2);
				origin2 *= 0.5f;
				spriteBatch.DrawString(fontMouseText, text2, new Vector2((float)num14 + origin2.X, (float)num15 + origin2.Y), color3, 0f, origin2, scale, SpriteEffects.None, 0f);
			}
			if (mouseLeft && mouseLeftRelease)
			{
				if (npcChatFocus1)
				{
					SaveClothesWindow();
					return;
				}
				if (npcChatFocus2)
				{
					CancelClothesWindow();
					return;
				}
			}
			if (!mouseLeft)
			{
				grabColorSlider = 0;
				blockMouse = false;
			}
			int num16 = 167;
			Vector3 vector = rgbToHsl(selColor);
			float num17 = vector.X;
			float num18 = vector.Y;
			float z = vector.Z;
			if (hBar == -1f || sBar == -1f || lBar == -1f)
			{
				hBar = num17;
				sBar = num18;
				lBar = z;
			}
			else
			{
				num17 = hBar;
				num18 = sBar;
				z = lBar;
			}
			spriteBatch.Draw(hueTexture, new Vector2(num6, num5), Microsoft.Xna.Framework.Color.White);
			spriteBatch.Draw(colorSliderTexture, new Vector2((float)num6 + (float)(hueTexture.Width - 2) * hBar - (float)(colorSliderTexture.Width / 2), num5 - colorSliderTexture.Height / 2 + hueTexture.Height / 2), Microsoft.Xna.Framework.Color.White);
			if (((mouseX > num6 - 4 && mouseX < num6 + hueTexture.Width + 4 && mouseY > num5 - 4 && mouseY < num5 + hueTexture.Height + 4) || grabColorSlider == 1) && mouseLeft && !blockMouse)
			{
				grabColorSlider = 1;
				num17 = mouseX - num6;
				num17 /= (float)hueTexture.Width;
				if (num17 < 0f)
				{
					num17 = 0f;
				}
				if (num17 > 1f)
				{
					num17 = 1f;
				}
				hBar = num17;
			}
			num5 += 26;
			spriteBatch.Draw(colorBarTexture, new Vector2(num6, num5), Microsoft.Xna.Framework.Color.White);
			for (int k = 0; k <= num16; k++)
			{
				float saturation = (float)k / (float)num16;
				Microsoft.Xna.Framework.Color color4 = hslToRgb(num17, saturation, z);
				spriteBatch.Draw(colorBlipTexture, new Vector2(num6 + k + 5, num5 + 4), color4);
			}
			spriteBatch.Draw(colorSliderTexture, new Vector2((float)num6 + (float)(hueTexture.Width - 2) * sBar - (float)(colorSliderTexture.Width / 2), num5 - colorSliderTexture.Height / 2 + hueTexture.Height / 2), Microsoft.Xna.Framework.Color.White);
			if (((mouseX > num6 - 4 && mouseX < num6 + hueTexture.Width + 4 && mouseY > num5 - 4 && mouseY < num5 + hueTexture.Height + 4) || grabColorSlider == 2) && mouseLeft && !blockMouse)
			{
				grabColorSlider = 2;
				num18 = mouseX - num6;
				num18 /= (float)hueTexture.Width;
				if (num18 < 0f)
				{
					num18 = 0f;
				}
				if (num18 > 1f)
				{
					num18 = 1f;
				}
				sBar = num18;
			}
			num5 += 26;
			spriteBatch.Draw(colorBarTexture, new Vector2(num6, num5), Microsoft.Xna.Framework.Color.White);
			float num19 = 0.15f;
			for (int l = 0; l <= num16; l++)
			{
				float luminosity = (float)l / (float)num16;
				Microsoft.Xna.Framework.Color color5 = hslToRgb(num17, num18, luminosity);
				spriteBatch.Draw(colorBlipTexture, new Vector2(num6 + l + 5, num5 + 4), color5);
			}
			spriteBatch.Draw(colorSliderTexture, new Vector2((float)num6 + (float)(hueTexture.Width - 2) * ((lBar - num19) / (1f - num19)) - (float)(colorSliderTexture.Width / 2), num5 - colorSliderTexture.Height / 2 + hueTexture.Height / 2), Microsoft.Xna.Framework.Color.White);
			if (((mouseX > num6 - 4 && mouseX < num6 + hueTexture.Width + 4 && mouseY > num5 - 4 && mouseY < num5 + hueTexture.Height + 4) || grabColorSlider == 3) && mouseLeft && !blockMouse)
			{
				grabColorSlider = 3;
				z = mouseX - num6;
				z /= (float)hueTexture.Width;
				if (z < 0f)
				{
					z = 0f;
				}
				if (z > 1f)
				{
					z = 1f;
				}
				z = (lBar = z * (1f - num19) + num19);
			}
			selColor = hslToRgb(hBar, sBar, lBar);
			if (selClothes == 0)
			{
				player[myPlayer].shirtColor = selColor;
			}
			if (selClothes == 1)
			{
				player[myPlayer].underShirtColor = selColor;
			}
			if (selClothes == 2)
			{
				player[myPlayer].pantsColor = selColor;
			}
			if (selClothes == 3)
			{
				player[myPlayer].shoeColor = selColor;
			}
			int num20 = num7;
			int num21 = num8;
			for (int m = 0; m < 4; m++)
			{
				if (selClothes == m)
				{
					spriteBatch.Draw(inventoryBack14Texture, new Vector2(num20, num21), new Microsoft.Xna.Framework.Rectangle(0, 0, inventoryBackTexture.Width, inventoryBackTexture.Height), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				else
				{
					spriteBatch.Draw(inventoryBack8Texture, new Vector2(num20, num21), new Microsoft.Xna.Framework.Rectangle(0, 0, inventoryBackTexture.Width, inventoryBackTexture.Height), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				if (mouseX > num20 && mouseX < num20 + inventoryBackTexture.Width && mouseY > num21 && mouseY < num21 + inventoryBackTexture.Height && mouseLeft && mouseLeftRelease)
				{
					mouseLeftRelease = false;
					selClothes = m;
					PlaySound(12);
					hBar = -1f;
					lBar = -1f;
					sBar = -1f;
				}
				float x = num20 + inventoryBackTexture.Width / 2 - clothesTexture[m].Width / 2;
				float y = num21 + inventoryBackTexture.Height / 2 - clothesTexture[m].Height / 2;
				Microsoft.Xna.Framework.Color color6 = Microsoft.Xna.Framework.Color.White;
				if (m == 0)
				{
					color6 = player[myPlayer].shirtColor;
				}
				if (m == 1)
				{
					color6 = player[myPlayer].underShirtColor;
				}
				if (m == 2)
				{
					color6 = player[myPlayer].pantsColor;
				}
				if (m == 3)
				{
					color6 = player[myPlayer].shoeColor;
				}
				spriteBatch.Draw(clothesTexture[m], new Vector2(x, y), new Microsoft.Xna.Framework.Rectangle(0, 0, clothesTexture[m].Width, clothesTexture[m].Height), color6, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				num20 += 56;
			}
		}

		protected void DrawInterface(GameTime gameTime)
		{
			EmoteBubble.DrawAll(spriteBatch);
			if (smartDigShowing && !player[myPlayer].dead)
			{
				Vector2 vector = new Vector2(smartDigX, smartDigY) * 16f;
				new Vector2(offScreenRange, offScreenRange);
				bool drawToScreen2 = drawToScreen;
				vector -= screenPosition;
				if (player[myPlayer].gravDir == -1f)
				{
					vector.Y = (float)screenHeight - vector.Y - 16f;
				}
				Microsoft.Xna.Framework.Color newColor = Lighting.GetColor(smartDigX, smartDigY) * 1f;
				Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1);
				float r = 1f;
				float g = 0.9f;
				float b = 0.1f;
				float a = 1f;
				float scale = 0.6f;
				spriteBatch.Draw(magicPixel, vector, value, buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, 8f, SpriteEffects.None, 0f);
				spriteBatch.Draw(magicPixel, vector + Vector2.UnitX * 8f, value, buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, 8f, SpriteEffects.None, 0f);
				spriteBatch.Draw(magicPixel, vector + Vector2.UnitY * 8f, value, buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, 8f, SpriteEffects.None, 0f);
				spriteBatch.Draw(magicPixel, vector + Vector2.One * 8f, value, buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, 8f, SpriteEffects.None, 0f);
				b = 0.3f;
				g = 0.95f;
				a = (scale = 1f);
				spriteBatch.Draw(magicPixel, vector + Vector2.UnitX * -2f, value, buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, new Vector2(2f, 16f), SpriteEffects.None, 0f);
				spriteBatch.Draw(magicPixel, vector + Vector2.UnitX * 16f, value, buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, new Vector2(2f, 16f), SpriteEffects.None, 0f);
				spriteBatch.Draw(magicPixel, vector + Vector2.UnitY * -2f, value, buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, new Vector2(16f, 2f), SpriteEffects.None, 0f);
				spriteBatch.Draw(magicPixel, vector + Vector2.UnitY * 16f, value, buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, new Vector2(16f, 2f), SpriteEffects.None, 0f);
			}
			if (player[myPlayer].rulerGrid)
			{
				float num = player[myPlayer].velocity.Length();
				num = Vector2.Distance(player[myPlayer].position, player[myPlayer].shadowPos[2]);
				float num2 = 6f;
				Texture2D texture = extraTexture[68];
				float scale2 = MathHelper.Lerp(0.2f, 0.7f, MathHelper.Clamp(1f - num / num2, 0f, 1f));
				Vector2 vec = screenPosition;
				vec += new Vector2(-50f);
				vec = vec.ToTileCoordinates().ToVector2() * 16f;
				int num3 = (screenWidth + 100) / 16;
				int num4 = (screenHeight + 100) / 16;
				Microsoft.Xna.Framework.Point point = MouseWorld.ToTileCoordinates();
				point.X -= (int)vec.X / 16;
				point.Y -= (int)vec.Y / 16;
				Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(0.24f, 0.8f, 0.9f, 0.5f) * 0.4f * scale2;
				Microsoft.Xna.Framework.Color color2 = new Microsoft.Xna.Framework.Color(1f, 0.8f, 0.9f, 0.5f) * 0.5f * scale2;
				Microsoft.Xna.Framework.Rectangle value2 = new Microsoft.Xna.Framework.Rectangle(0, 18, 18, 18);
				vec -= Vector2.One;
				for (int i = 0; i < num3; i++)
				{
					for (int j = 0; j < num4; j++)
					{
						Microsoft.Xna.Framework.Color color3 = color;
						Vector2 zero = Vector2.Zero;
						if (i != point.X && j != point.Y)
						{
							if (i != point.X + 1)
							{
								value2.X = 0;
								value2.Width = 16;
							}
							else
							{
								value2.X = 2;
								value2.Width = 14;
								zero.X = 2f;
							}
							if (j != point.Y + 1)
							{
								value2.Y = 18;
								value2.Height = 16;
							}
							else
							{
								value2.Y = 2;
								value2.Height = 14;
								zero.Y = 2f;
							}
							spriteBatch.Draw(texture, ReverseGravitySupport(new Vector2(i, j) * 16f - screenPosition + vec + zero, 16f), value2, color3, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
						}
					}
				}
				value2 = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 18);
				for (int k = 0; k < num3; k++)
				{
					if (k == point.X)
					{
						spriteBatch.Draw(texture, ReverseGravitySupport(new Vector2(k, point.Y) * 16f - screenPosition + vec, 16f), new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16), color2, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
					}
					else
					{
						spriteBatch.Draw(texture, ReverseGravitySupport(new Vector2(k, point.Y) * 16f - screenPosition + vec, 16f), value2, color2, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
					}
				}
				value2 = new Microsoft.Xna.Framework.Rectangle(0, 0, 18, 16);
				for (int l = 0; l < num4; l++)
				{
					if (l != point.Y)
					{
						spriteBatch.Draw(texture, ReverseGravitySupport(new Vector2(point.X, l) * 16f - screenPosition + vec, 16f), value2, color2, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
					}
				}
			}
			if (player[myPlayer].rulerLine)
			{
				float num5 = player[myPlayer].velocity.Length();
				float num6 = 6f;
				float num7 = 2f;
				if (num5 <= num6)
				{
					float scale3 = 1f;
					if (num5 >= num7)
					{
						scale3 = 1f - (num5 - num7) / num6;
					}
					int num8 = 1;
					if ((float)mouseX + screenPosition.X < player[myPlayer].Center.X)
					{
						num8 = -1;
					}
					int num9 = (int)(player[myPlayer].position.X + (float)(player[myPlayer].width / 2) + (float)(num8 * 4)) / 16;
					int num10 = (int)(player[myPlayer].position.Y + (float)player[myPlayer].height - 2f) / 16;
					if (player[myPlayer].gravDir == -1f)
					{
						num10--;
					}
					num9 += num8;
					Vector2 mouseWorld = MouseWorld;
					if (player[myPlayer].gravDir == -1f)
					{
						mouseWorld.Y += 16f;
					}
					mouseWorld /= 16f;
					new Vector2(num9, num10);
					int num11 = (int)mouseWorld.X - num9;
					int num12 = (int)mouseWorld.Y - num10;
					int num13 = Math.Abs(num11) + 1;
					int num14 = Math.Abs(num12) + 1;
					if (num11 != 0 || num12 != 0)
					{
						Texture2D texture2 = extraTexture[2];
						Microsoft.Xna.Framework.Rectangle value3 = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16);
						int num15 = num9;
						int num16 = num10;
						if (player[myPlayer].gravDir == -1f)
						{
							num16--;
						}
						float r2 = 0.24f;
						float g2 = 0.8f;
						float b2 = 0.9f;
						float a2 = 1f;
						float scale4 = 0.8f;
						Microsoft.Xna.Framework.Color color4 = new Microsoft.Xna.Framework.Color(r2, g2, b2, a2) * scale4 * scale3;
						spriteBatch.Draw(texture2, ReverseGravitySupport(new Vector2(num15, num16) * 16f - screenPosition, 16f), value3, color4, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
						if (num11 != 0)
						{
							int num17 = Math.Sign(num11);
							value3.Y = ((num17 == 1) ? 16 : 32);
							while (num11 != 0)
							{
								num11 -= num17;
								num15 += num17;
								if (num11 == 0)
								{
									value3.Y = 0;
								}
								color4 = new Microsoft.Xna.Framework.Color(r2, g2, b2, a2) * scale4 * scale3;
								spriteBatch.Draw(texture2, ReverseGravitySupport(new Vector2(num15, num16) * 16f - screenPosition, 16f), value3, color4, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
							}
						}
						if (num12 != 0)
						{
							int num18 = Math.Sign(num12);
							value3.Y = ((num18 == 1) ? 48 : 64);
							while (num12 != 0)
							{
								num12 -= num18;
								num16 += num18;
								if (num12 == 0)
								{
									value3.Y = 0;
								}
								color4 = new Microsoft.Xna.Framework.Color(r2, g2, b2, a2) * scale4 * scale3;
								spriteBatch.Draw(texture2, ReverseGravitySupport(new Vector2(num15, num16) * 16f - screenPosition, 16f), value3, color4, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
							}
						}
						Utils.DrawBorderString(spriteBatch, num13 + "x" + num14, new Vector2(mouseX + 16, mouseY), new Microsoft.Xna.Framework.Color(r2, g2, b2, a2), 1f, 0f, 0.8f);
					}
				}
			}
			if (EquipPage == 1)
			{
				if (ignoreErrors)
				{
					try
					{
						DrawNPCHouse();
					}
					catch (Exception e)
					{
						TimeLogger.DrawException(e);
					}
				}
				else
				{
					DrawNPCHouse();
				}
			}
			if (player[myPlayer].selectedItem == 58 && player[myPlayer].itemAnimation > 0)
			{
				mouseLeftRelease = false;
			}
			mouseHC = false;
			if (hideUI)
			{
				maxQ = true;
				return;
			}
			CaptureManager.Instance.Update();
			if (CaptureManager.Instance.Active)
			{
				CaptureManager.Instance.Draw(spriteBatch);
				return;
			}
			if (ingameOptionsWindow)
			{
				IngameOptions.Draw(this, spriteBatch);
				return;
			}
			InGameUI.Draw(spriteBatch, gameTime);
			if (achievementsWindow)
			{
				AchievementsUI.Draw(spriteBatch, gameTime);
				return;
			}
			AchievementCompleteUI.Draw(spriteBatch);
			if (hbPosition != 0)
			{
				bool flag = false;
				for (int num19 = 199; num19 >= 0; num19--)
				{
					if (npc[num19].active && npc[num19].type > 0 && npc[num19].life != npc[num19].lifeMax && !npc[num19].dontTakeDamage)
					{
						float scale5 = 1f;
						int type = npc[num19].type;
						if (type == 4)
						{
							scale5 = 1.5f;
						}
						if (type == 35)
						{
							scale5 = 1.5f;
						}
						if (type == 36)
						{
							scale5 = 1.5f;
						}
						if (type == 50)
						{
							scale5 = 1.5f;
						}
						if (type == 113)
						{
							scale5 = 1.5f;
						}
						if (type == 114)
						{
							scale5 = 1.5f;
						}
						if (type == 125)
						{
							scale5 = 1.5f;
						}
						if (type == 126)
						{
							scale5 = 1.5f;
						}
						if (type == 127)
						{
							scale5 = 1.5f;
						}
						if (type == 128)
						{
							scale5 = 1.5f;
						}
						if (type == 129)
						{
							scale5 = 1.5f;
						}
						if (type == 130)
						{
							scale5 = 1.5f;
						}
						if (type == 131)
						{
							scale5 = 1.5f;
						}
						if (type == 222)
						{
							scale5 = 1.5f;
						}
						if (type >= 245 && type <= 249)
						{
							scale5 = 1.5f;
						}
						if (type == 262)
						{
							scale5 = 1.5f;
						}
						if (type == 266)
						{
							scale5 = 1.5f;
						}
						if (type == 87)
						{
							scale5 = 1.5f;
						}
						if (type == 510 || type == 454)
						{
							scale5 = 1.5f;
						}
						if (type == 439 || type == 370)
						{
							scale5 = 1.5f;
						}
						if ((!expertMode || type != 266) && ((type != 439 && type != 440) || npc[num19].ai[0] != 5f))
						{
							if (type >= 134 && type <= 136)
							{
								scale5 = 1.5f;
								if (!flag)
								{
									flag = true;
									Vector2 value4 = default(Vector2);
									float num20 = 999999f;
									for (int m = 0; m < 200; m++)
									{
										if (npc[m].active && npc[m].type >= 134 && npc[m].type <= 136)
										{
											Vector2 vector2 = player[myPlayer].Center - npc[m].Center;
											if (vector2.Length() < num20 && Collision.CanHit(player[myPlayer].Center, 1, 1, npc[m].Center, 1, 1))
											{
												num20 = vector2.Length();
												value4 = npc[m].position;
											}
										}
									}
									if (num20 < (float)screenWidth)
									{
										if (destroyerHB.X < 100f && destroyerHB.Y < 100f)
										{
											destroyerHB = value4;
										}
										else
										{
											destroyerHB = (destroyerHB * 49f + value4) / 50f;
										}
										value4 = destroyerHB;
										int num21 = num19;
										if (type != 134 && npc[num19].realLife != -1)
										{
											num21 = npc[num19].realLife;
										}
										float num22 = Lighting.Brightness((int)((npc[num19].position.X + (float)(npc[num19].width / 2)) / 16f), (int)((npc[num19].position.Y + (float)(npc[num19].height / 2) + npc[num19].gfxOffY) / 16f));
										num22 = (num22 + 1f) / 2f;
										DrawHealthBar(value4.X + (float)(npc[num19].width / 2), value4.Y + (float)(npc[num19].height / 2), npc[num21].life, npc[num21].lifeMax, num22, scale5);
									}
									else
									{
										destroyerHB = new Vector2(0f, 0f);
									}
								}
							}
							else
							{
								switch (type)
								{
								case 7:
								{
									Vector2 position9 = npc[num19].position;
									int num39 = -1;
									for (int num40 = 0; num40 < 200; num40++)
									{
										if (npc[num40].active && npc[num40].type == 9)
										{
											num39 = num40;
										}
									}
									if (num39 >= 0)
									{
										position9 += npc[num39].position;
										position9 /= 2f;
										DrawHealthBar(position9.X + (float)(npc[num19].width / 2), position9.Y + (float)(npc[num19].height / 2), npc[num19].life, npc[num19].lifeMax, Lighting.Brightness((int)((npc[num19].position.X + (float)(npc[num19].width / 2)) / 16f), (int)((npc[num19].position.Y + (float)(npc[num19].height / 2) + npc[num19].gfxOffY) / 16f)), scale5);
									}
									break;
								}
								case 95:
								{
									Vector2 position10 = npc[num19].position;
									int num41 = -1;
									for (int num42 = 0; num42 < 200; num42++)
									{
										if (npc[num42].active && npc[num42].type == 97)
										{
											num41 = num42;
										}
									}
									if (num41 >= 0)
									{
										position10 += npc[num41].position;
										position10 /= 2f;
										DrawHealthBar(position10.X + (float)(npc[num19].width / 2), position10.Y + (float)(npc[num19].height / 2), npc[num19].life, npc[num19].lifeMax, Lighting.Brightness((int)((npc[num19].position.X + (float)(npc[num19].width / 2)) / 16f), (int)((npc[num19].position.Y + (float)(npc[num19].height / 2) + npc[num19].gfxOffY) / 16f)), scale5);
									}
									break;
								}
								case 10:
								{
									Vector2 position8 = npc[num19].position;
									int num37 = -1;
									for (int num38 = 0; num38 < 200; num38++)
									{
										if (npc[num38].active && npc[num38].type == 12)
										{
											num37 = num38;
										}
									}
									if (num37 >= 0)
									{
										position8 += npc[num37].position;
										position8 /= 2f;
										DrawHealthBar(position8.X + (float)(npc[num19].width / 2), position8.Y + (float)(npc[num19].height / 2), npc[num19].life, npc[num19].lifeMax, Lighting.Brightness((int)((npc[num19].position.X + (float)(npc[num19].width / 2)) / 16f), (int)((npc[num19].position.Y + (float)(npc[num19].height / 2) + npc[num19].gfxOffY) / 16f)), scale5);
									}
									break;
								}
								case 87:
								{
									Vector2 position11 = npc[num19].position;
									int num43 = -1;
									for (int num44 = 0; num44 < 200; num44++)
									{
										if (npc[num44].active && npc[num44].type == 92)
										{
											num43 = num44;
										}
									}
									if (num43 >= 0)
									{
										position11 += npc[num43].position;
										position11 /= 2f;
										DrawHealthBar(position11.X + (float)(npc[num19].width / 2), position11.Y + (float)(npc[num19].height / 2), npc[num19].life, npc[num19].lifeMax, Lighting.Brightness((int)((npc[num19].position.X + (float)(npc[num19].width / 2)) / 16f), (int)((npc[num19].position.Y + (float)(npc[num19].height / 2) + npc[num19].gfxOffY) / 16f)), scale5);
									}
									break;
								}
								case 412:
								{
									Vector2 position7 = npc[num19].position;
									int num36 = num19;
									while (num36 > 0 && num36 < 200 && npc[num36].ai[0] > 0f)
									{
										num36 = (int)npc[num36].ai[0];
									}
									if (num36 >= 0)
									{
										position7 += npc[num36].position;
										position7 /= 2f;
										DrawHealthBar(position7.X + (float)(npc[num19].width / 2), position7.Y + (float)(npc[num19].height / 2), npc[num19].life, npc[num19].lifeMax, Lighting.Brightness((int)((npc[num19].position.X + (float)(npc[num19].width / 2)) / 16f), (int)((npc[num19].position.Y + (float)(npc[num19].height / 2) + npc[num19].gfxOffY) / 16f)), scale5);
									}
									break;
								}
								default:
									switch (type)
									{
									case 39:
									{
										Vector2 position5 = npc[num19].position;
										int num32 = -1;
										for (int num33 = 0; num33 < 200; num33++)
										{
											if (npc[num33].active && npc[num33].type == 41)
											{
												num32 = num33;
											}
										}
										if (num32 >= 0)
										{
											position5 += npc[num32].position;
											position5 /= 2f;
											DrawHealthBar(position5.X + (float)(npc[num19].width / 2), position5.Y + (float)(npc[num19].height / 2), npc[num19].life, npc[num19].lifeMax, Lighting.Brightness((int)((npc[num19].position.X + (float)(npc[num19].width / 2)) / 16f), (int)((npc[num19].position.Y + (float)(npc[num19].height / 2) + npc[num19].gfxOffY) / 16f)), scale5);
										}
										break;
									}
									case 98:
									{
										Vector2 position6 = npc[num19].position;
										int num34 = -1;
										for (int num35 = 0; num35 < 200; num35++)
										{
											if (npc[num35].active && npc[num35].type == 100)
											{
												num34 = num35;
											}
										}
										if (num34 >= 0)
										{
											position6 += npc[num34].position;
											position6 /= 2f;
											DrawHealthBar(position6.X + (float)(npc[num19].width / 2), position6.Y + (float)(npc[num19].height / 2), npc[num19].life, npc[num19].lifeMax, Lighting.Brightness((int)((npc[num19].position.X + (float)(npc[num19].width / 2)) / 16f), (int)((npc[num19].position.Y + (float)(npc[num19].height / 2) + npc[num19].gfxOffY) / 16f)), scale5);
										}
										break;
									}
									case 454:
									{
										Vector2 position4 = npc[num19].position;
										int num30 = -1;
										for (int num31 = 0; num31 < 200; num31++)
										{
											if (npc[num31].active && npc[num31].type == 459)
											{
												num30 = num31;
											}
										}
										if (num30 >= 0)
										{
											position4 += npc[num30].position;
											position4 /= 2f;
											DrawHealthBar(position4.X + (float)(npc[num19].width / 2), position4.Y + (float)(npc[num19].height / 2), npc[num19].life, npc[num19].lifeMax, Lighting.Brightness((int)((npc[num19].position.X + (float)(npc[num19].width / 2)) / 16f), (int)((npc[num19].position.Y + (float)(npc[num19].height / 2) + npc[num19].gfxOffY) / 16f)), scale5);
										}
										break;
									}
									default:
										switch (type)
										{
										case 510:
										{
											Vector2 position2 = npc[num19].position;
											int num26 = -1;
											for (int num27 = 0; num27 < 200; num27++)
											{
												if (npc[num27].active && npc[num27].type == 512)
												{
													num26 = num27;
												}
											}
											if (num26 >= 0)
											{
												position2 += npc[num26].position;
												position2 /= 2f;
												DrawHealthBar(position2.X + (float)(npc[num19].width / 2), position2.Y + (float)(npc[num19].height / 2), npc[num19].life, npc[num19].lifeMax, Lighting.Brightness((int)((npc[num19].position.X + (float)(npc[num19].width / 2)) / 16f), (int)((npc[num19].position.Y + (float)(npc[num19].height / 2) + npc[num19].gfxOffY) / 16f)), scale5);
											}
											break;
										}
										case 513:
										{
											Vector2 position3 = npc[num19].position;
											int num28 = -1;
											for (int num29 = 0; num29 < 200; num29++)
											{
												if (npc[num29].active && npc[num29].type == 515)
												{
													num28 = num29;
												}
											}
											if (num28 >= 0)
											{
												position3 += npc[num28].position;
												position3 /= 2f;
												DrawHealthBar(position3.X + (float)(npc[num19].width / 2), position3.Y + (float)(npc[num19].height / 2), npc[num19].life, npc[num19].lifeMax, Lighting.Brightness((int)((npc[num19].position.X + (float)(npc[num19].width / 2)) / 16f), (int)((npc[num19].position.Y + (float)(npc[num19].height / 2) + npc[num19].gfxOffY) / 16f)), scale5);
											}
											break;
										}
										case 117:
										{
											Vector2 position = npc[num19].position;
											int num25 = -1;
											for (int n = 0; n < 200; n++)
											{
												if (npc[n].active && npc[n].type == 119)
												{
													num25 = n;
												}
											}
											if (num25 >= 0)
											{
												position += npc[num25].position;
												position /= 2f;
												DrawHealthBar(position.X + (float)(npc[num19].width / 2), position.Y + (float)(npc[num19].height / 2), npc[num19].life, npc[num19].lifeMax, Lighting.Brightness((int)((npc[num19].position.X + (float)(npc[num19].width / 2)) / 16f), (int)((npc[num19].position.Y + (float)(npc[num19].height / 2) + npc[num19].gfxOffY) / 16f)), scale5);
											}
											break;
										}
										default:
											if (hbPosition == 1)
											{
												float num23 = 10f;
												num23 += NPCAddHeight(num19);
												DrawHealthBar(npc[num19].position.X + (float)(npc[num19].width / 2), npc[num19].position.Y + (float)npc[num19].height + num23 + npc[num19].gfxOffY, npc[num19].life, npc[num19].lifeMax, Lighting.Brightness((int)((npc[num19].position.X + (float)(npc[num19].width / 2)) / 16f), (int)((npc[num19].position.Y + (float)(npc[num19].height / 2) + npc[num19].gfxOffY) / 16f)), scale5);
											}
											else if (hbPosition == 2)
											{
												float num24 = -24f;
												num24 -= NPCAddHeight(num19) / 2f;
												DrawHealthBar(npc[num19].position.X + (float)(npc[num19].width / 2), npc[num19].position.Y + num24 + npc[num19].gfxOffY, npc[num19].life, npc[num19].lifeMax, Lighting.Brightness((int)((npc[num19].position.X + (float)(npc[num19].width / 2)) / 16f), (int)((npc[num19].position.Y + (float)(npc[num19].height / 2) + npc[num19].gfxOffY) / 16f)), scale5);
											}
											break;
										case 118:
										case 119:
										case 511:
										case 512:
										case 514:
										case 515:
											break;
										}
										break;
									case 40:
									case 41:
									case 99:
									case 100:
									case 455:
									case 456:
									case 457:
									case 458:
									case 459:
										break;
									}
									break;
								case 8:
								case 9:
								case 11:
								case 12:
								case 88:
								case 89:
								case 90:
								case 91:
								case 92:
								case 96:
								case 97:
								case 413:
								case 414:
									break;
								}
							}
						}
					}
				}
				for (int num45 = 0; num45 < 16; num45++)
				{
					if (num45 != myPlayer && player[num45].active && !player[num45].ghost && !player[num45].dead && player[num45].statLife != player[num45].statLifeMax2)
					{
						if (hbPosition == 1)
						{
							int num46 = 10;
							DrawHealthBar(player[num45].position.X + (float)(player[num45].width / 2), player[num45].position.Y + (float)player[num45].height + (float)num46 + player[num45].gfxOffY, player[num45].statLife, player[num45].statLifeMax2, Lighting.Brightness((int)((player[num45].position.X + (float)(player[num45].width / 2)) / 16f), (int)((player[num45].position.Y + (float)(player[num45].height / 2) + player[num45].gfxOffY) / 16f)));
						}
						else if (hbPosition == 2)
						{
							int num47 = -20;
							DrawHealthBar(player[num45].position.X + (float)(player[num45].width / 2), player[num45].position.Y + (float)num47 + player[num45].gfxOffY, player[num45].statLife, player[num45].statLifeMax2, Lighting.Brightness((int)((player[num45].position.X + (float)(player[num45].width / 2)) / 16f), (int)((player[num45].position.Y + (float)(player[num45].height / 2) + player[num45].gfxOffY) / 16f)));
						}
					}
				}
			}
			DrawInvasionProgress();
			mH = 0;
			if (mapEnabled)
			{
				if (!mapFullscreen && mapStyle == 1)
				{
					mH = 256;
					if (ignoreErrors)
					{
						try
						{
							DrawMap();
						}
						catch (Exception e2)
						{
							TimeLogger.DrawException(e2);
						}
					}
					else
					{
						DrawMap();
					}
				}
				if (mH + 600 > screenHeight)
				{
					mH = screenHeight - 600;
				}
			}
			if (netDiag)
			{
				for (int num48 = 0; num48 < 4; num48++)
				{
					string text = "";
					int num49 = 20;
					int num50 = 220;
					switch (num48)
					{
					case 0:
						text = "RX Msgs: " + $"{rxMsg:0,0}";
						num50 += num48 * 20;
						break;
					case 1:
						text = "RX Bytes: " + $"{rxData:0,0}";
						num50 += num48 * 20;
						break;
					case 2:
						text = "TX Msgs: " + $"{txMsg:0,0}";
						num50 += num48 * 20;
						break;
					case 3:
						text = "TX Bytes: " + $"{txData:0,0}";
						num50 += num48 * 20;
						break;
					}
					spriteBatch.DrawString(fontMouseText, text, new Vector2(num49, num50), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				for (int num51 = 0; num51 < maxMsg; num51++)
				{
					float scale6 = 0.7f;
					string text2 = "";
					int num52 = 200;
					int num53 = 120;
					int num54 = num51 / 50;
					num52 += num54 * 400;
					num53 += (num51 - num54 * 50) * 13;
					text2 = num51 + ": ";
					spriteBatch.DrawString(fontMouseText, text2, new Vector2(num52, num53), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), scale6, SpriteEffects.None, 0f);
					num52 += 30;
					text2 = "rx:" + $"{rxMsgType[num51]:0,0}";
					spriteBatch.DrawString(fontMouseText, text2, new Vector2(num52, num53), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), scale6, SpriteEffects.None, 0f);
					num52 += 70;
					text2 = $"{rxDataType[num51]:0,0}";
					spriteBatch.DrawString(fontMouseText, text2, new Vector2(num52, num53), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), scale6, SpriteEffects.None, 0f);
					num52 += 70;
					text2 = num51 + ": ";
					spriteBatch.DrawString(fontMouseText, text2, new Vector2(num52, num53), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), scale6, SpriteEffects.None, 0f);
					num52 += 30;
					text2 = "tx:" + $"{txMsgType[num51]:0,0}";
					spriteBatch.DrawString(fontMouseText, text2, new Vector2(num52, num53), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), scale6, SpriteEffects.None, 0f);
					num52 += 70;
					text2 = $"{txDataType[num51]:0,0}";
					spriteBatch.DrawString(fontMouseText, text2, new Vector2(num52, num53), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), scale6, SpriteEffects.None, 0f);
				}
			}
			if (drawDiag)
			{
				for (int num55 = 0; num55 < 7; num55++)
				{
					string text3 = "";
					int num56 = 20;
					int num57 = 220;
					num57 += num55 * 16;
					if (num55 == 0)
					{
						text3 = "Solid Tiles:";
					}
					if (num55 == 1)
					{
						text3 = "Misc. Tiles:";
					}
					if (num55 == 2)
					{
						text3 = "Walls Tiles:";
					}
					if (num55 == 3)
					{
						text3 = "Background Tiles:";
					}
					if (num55 == 4)
					{
						text3 = "Water Tiles:";
					}
					if (num55 == 5)
					{
						text3 = "Black Tiles:";
					}
					if (num55 == 6)
					{
						text3 = "Total Render:";
					}
					spriteBatch.DrawString(fontMouseText, text3, new Vector2(num56, num57), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				for (int num58 = 0; num58 < 7; num58++)
				{
					string text4 = "";
					int num59 = 180;
					int num60 = 220;
					num60 += num58 * 16;
					float num61 = (num58 != 6) ? TimeLogger.GetDrawTime(num58) : TimeLogger.GetDrawTotal();
					text4 = $"{num61:F2}ms";
					spriteBatch.DrawString(fontMouseText, text4, new Vector2(num59, num60), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				for (int num62 = 0; num62 < 6; num62++)
				{
					string text5 = "";
					int num63 = 20;
					int num64 = 346;
					num64 += num62 * 16;
					if (num62 == 0)
					{
						text5 = "Lighting Init:";
					}
					if (num62 == 1)
					{
						text5 = "Lighting Phase #1:";
					}
					if (num62 == 2)
					{
						text5 = "Lighting Phase #2:";
					}
					if (num62 == 3)
					{
						text5 = "Lighting Phase #3";
					}
					if (num62 == 4)
					{
						text5 = "Lighting Phase #4";
					}
					if (num62 == 5)
					{
						text5 = "Total Lighting:";
					}
					spriteBatch.DrawString(fontMouseText, text5, new Vector2(num63, num64), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				for (int num65 = 0; num65 < 6; num65++)
				{
					string text6 = "";
					int num66 = 180;
					int num67 = 346;
					num67 += num65 * 16;
					float num68 = (num65 != 5) ? TimeLogger.GetLightingTime(num65) : TimeLogger.GetLightingTotal();
					text6 = $"{num68:F2}ms";
					spriteBatch.DrawString(fontMouseText, text6, new Vector2(num66, num67), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				int num69 = 5;
				for (int num70 = 0; num70 < num69; num70++)
				{
					string text7 = "";
					int num71 = 20;
					int num72 = 456;
					num72 += num70 * 16;
					text7 = "Render #" + num70 + ":";
					spriteBatch.DrawString(fontMouseText, text7, new Vector2(num71, num72), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				for (int num73 = 0; num73 < num69; num73++)
				{
					string text8 = "";
					int num74 = 180;
					int num75 = 456;
					num75 += num73 * 16;
					text8 = $"{TimeLogger.GetRenderTime(num73):F2}ms";
					spriteBatch.DrawString(fontMouseText, text8, new Vector2(num74, num75), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				for (int num76 = 0; num76 < num69; num76++)
				{
					string text9 = "";
					int num77 = 230;
					int num78 = 456;
					num78 += num76 * 16;
					num77 += 10;
					text9 = $"{TimeLogger.GetRenderMax(num76):F2}ms";
					spriteBatch.DrawString(fontMouseText, text9, new Vector2(num77, num78), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				string text10 = "";
				int num79 = 20;
				int num80 = 456 + 16 * num69 + 16;
				text10 = "Update:";
				spriteBatch.DrawString(fontMouseText, text10, new Vector2(num79, num80), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				text10 = "";
				num79 = 180;
				text10 = $"{upTimer:F2}ms";
				spriteBatch.DrawString(fontMouseText, text10, new Vector2(num79, num80), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				text10 = "";
				num79 = 240;
				text10 = $"{upTimerMax:F2}ms";
				spriteBatch.DrawString(fontMouseText, text10, new Vector2(num79, num80), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			}
			if (signBubble)
			{
				int num81 = (int)((float)signX - screenPosition.X);
				int num82 = (int)((float)signY - screenPosition.Y);
				if (player[myPlayer].gravDir == -1f)
				{
					num82 = screenHeight - (int)((float)signY - screenPosition.Y) - 32;
				}
				SpriteEffects effects = SpriteEffects.None;
				if ((float)signX > player[myPlayer].position.X + (float)player[myPlayer].width)
				{
					effects = SpriteEffects.FlipHorizontally;
					num81 += -8 - chat2Texture.Width;
				}
				else
				{
					num81 += 8;
				}
				num82 -= 22;
				spriteBatch.Draw(chat2Texture, new Vector2(num81, num82), new Microsoft.Xna.Framework.Rectangle(0, 0, chat2Texture.Width, chat2Texture.Height), new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, default(Vector2), 1f, effects, 0f);
				signBubble = false;
			}
			for (int num83 = 0; num83 < 16; num83++)
			{
				if (!player[num83].active || myPlayer == num83 || player[num83].dead)
				{
					continue;
				}
				new Microsoft.Xna.Framework.Rectangle((int)((double)player[num83].position.X + (double)player[num83].width * 0.5 - 16.0), (int)(player[num83].position.Y + (float)player[num83].height - 48f), 32, 48);
				if (player[myPlayer].team > 0 && player[myPlayer].team == player[num83].team)
				{
					new Microsoft.Xna.Framework.Rectangle((int)screenPosition.X, (int)screenPosition.Y, screenWidth, screenHeight);
					string text11 = player[num83].name;
					if (player[num83].statLife < player[num83].statLifeMax2)
					{
						object obj = text11;
						text11 = string.Concat(obj, ": ", player[num83].statLife, "/", player[num83].statLifeMax2);
					}
					Vector2 position12 = fontMouseText.MeasureString(text11);
					float num84 = 0f;
					if (player[num83].chatOverhead.timeLeft > 0)
					{
						num84 = 0f - position12.Y;
					}
					float num85 = 0f;
					float num86 = (float)(int)mouseTextColor / 255f;
					Microsoft.Xna.Framework.Color color5 = new Microsoft.Xna.Framework.Color((byte)((float)(int)teamColor[player[num83].team].R * num86), (byte)((float)(int)teamColor[player[num83].team].G * num86), (byte)((float)(int)teamColor[player[num83].team].B * num86), mouseTextColor);
					Vector2 vector3 = new Vector2((float)(screenWidth / 2) + screenPosition.X, (float)(screenHeight / 2) + screenPosition.Y);
					float num87 = player[num83].position.X + (float)(player[num83].width / 2) - vector3.X;
					float num88 = player[num83].position.Y - position12.Y - 2f + num84 - vector3.Y;
					float num89 = (float)Math.Sqrt(num87 * num87 + num88 * num88);
					int num90 = screenHeight;
					if (screenHeight > screenWidth)
					{
						num90 = screenWidth;
					}
					num90 = num90 / 2 - 30;
					if (num90 < 100)
					{
						num90 = 100;
					}
					if (num89 < (float)num90)
					{
						position12.X = player[num83].position.X + (float)(player[num83].width / 2) - position12.X / 2f - screenPosition.X;
						position12.Y = player[num83].position.Y - position12.Y - 2f + num84 - screenPosition.Y;
					}
					else
					{
						num85 = num89;
						num89 = (float)num90 / num89;
						position12.X = (float)(screenWidth / 2) + num87 * num89 - position12.X / 2f;
						position12.Y = (float)(screenHeight / 2) + num88 * num89;
					}
					if (player[myPlayer].gravDir == -1f)
					{
						position12.Y = (float)screenHeight - position12.Y;
					}
					if (num85 > 0f)
					{
						string text12 = "(" + (int)(num85 / 16f * 2f) + " ft)";
						Vector2 position13 = fontMouseText.MeasureString(text12);
						position13.X = position12.X + fontMouseText.MeasureString(text11).X / 2f - position13.X / 2f;
						position13.Y = position12.Y + fontMouseText.MeasureString(text11).Y / 2f - position13.Y / 2f - 20f;
						spriteBatch.DrawString(fontMouseText, text12, new Vector2(position13.X - 2f, position13.Y), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						spriteBatch.DrawString(fontMouseText, text12, new Vector2(position13.X + 2f, position13.Y), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						spriteBatch.DrawString(fontMouseText, text12, new Vector2(position13.X, position13.Y - 2f), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						spriteBatch.DrawString(fontMouseText, text12, new Vector2(position13.X, position13.Y + 2f), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						spriteBatch.DrawString(fontMouseText, text12, position13, color5, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					}
					spriteBatch.DrawString(fontMouseText, text11, new Vector2(position12.X - 2f, position12.Y), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					spriteBatch.DrawString(fontMouseText, text11, new Vector2(position12.X + 2f, position12.Y), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					spriteBatch.DrawString(fontMouseText, text11, new Vector2(position12.X, position12.Y - 2f), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					spriteBatch.DrawString(fontMouseText, text11, new Vector2(position12.X, position12.Y + 2f), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					spriteBatch.DrawString(fontMouseText, text11, position12, color5, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
			}
			if (hairWindow)
			{
				DrawHairWindow();
			}
			if (clothesWindow)
			{
				DrawClothesWindow();
			}
			GUIChatDraw();
			inventoryBack = new Microsoft.Xna.Framework.Color(220, 220, 220, 220);
			invAlpha += invDir * 0.2f;
			if (invAlpha > 240f)
			{
				invAlpha = 240f;
				invDir = -1f;
			}
			if (invAlpha < 180f)
			{
				invAlpha = 180f;
				invDir = 1f;
			}
			inventoryBack = new Microsoft.Xna.Framework.Color((byte)invAlpha, (byte)invAlpha, (byte)invAlpha, (byte)invAlpha);
			mouseText = false;
			rare = 0;
			GUIBarsDraw();
			if (player[myPlayer].dead)
			{
				playerInventory = false;
			}
			if (!playerInventory)
			{
				player[myPlayer].chest = -1;
				if (craftGuide)
				{
					craftGuide = false;
				}
				Recipe.FindRecipes();
				reforge = false;
			}
			hoverItemName = "";
			if (playerInventory)
			{
				if (ignoreErrors)
				{
					try
					{
						DrawInventory();
					}
					catch (Exception e3)
					{
						TimeLogger.DrawException(e3);
					}
				}
				else
				{
					DrawInventory();
				}
			}
			else
			{
				recFastScroll = true;
				mouseNPC = -1;
				EquipPage = 0;
			}
			DrawInfoAccs();
			if (playerInventory || player[myPlayer].ghost)
			{
				string value5 = Lang.inter[62].Value;
				Vector2 vector4 = fontMouseText.MeasureString("Settings");
				Vector2 vector5 = fontMouseText.MeasureString(Lang.inter[62].Value);
				Vector2 vector6 = fontDeathText.MeasureString(value5);
				int num91 = screenWidth - 110;
				int num92 = screenHeight - 20;
				if (screenHeight < 650 || (screenHeight < 900 && mapStyle == 1))
				{
					num91 -= 140;
				}
				float num93 = vector4.X / vector5.X;
				if (mouseExit)
				{
					if ((double)exitScale < 0.96)
					{
						exitScale += 0.02f;
					}
				}
				else if ((double)exitScale > 0.8)
				{
					exitScale -= 0.02f;
				}
				for (int num94 = 0; num94 < 5; num94++)
				{
					int num95 = 0;
					int num96 = 0;
					Microsoft.Xna.Framework.Color color6 = Microsoft.Xna.Framework.Color.Black;
					if (num94 == 0)
					{
						num95 = -2;
					}
					if (num94 == 1)
					{
						num95 = 2;
					}
					if (num94 == 2)
					{
						num96 = -2;
					}
					if (num94 == 3)
					{
						num96 = 2;
					}
					if (num94 == 4)
					{
						color6 = Microsoft.Xna.Framework.Color.White;
					}
					spriteBatch.DrawString(fontDeathText, value5, new Vector2(num91 + num95, num92 + num96), color6, 0f, new Vector2(vector6.X / 2f, vector6.Y / 2f), (exitScale - 0.2f) * num93, SpriteEffects.None, 0f);
				}
				if ((float)mouseX > (float)num91 - vector6.X / 2f && (float)mouseX < (float)num91 + vector6.X / 2f && (float)mouseY > (float)num92 - vector6.Y / 2f && (float)mouseY < (float)num92 + vector6.Y / 2f - 10f)
				{
					if (!mouseExit)
					{
						PlaySound(12);
					}
					mouseExit = true;
					player[myPlayer].mouseInterface = true;
					if (mouseLeftRelease && mouseLeft)
					{
						mouseExit = false;
						exitScale = 0.8f;
						IngameOptions.Open();
					}
				}
				else
				{
					mouseExit = false;
				}
			}
			GUIHotbarDraw();
			if (mouseItem.stack <= 0)
			{
				mouseItem.type = 0;
			}
			if (hoverItemName != null && hoverItemName != "" && mouseItem.type == 0)
			{
				player[myPlayer].showItemIcon = false;
				MouseText(hoverItemName, rare, 0);
				mouseText = true;
			}
			if (ignoreErrors)
			{
				try
				{
					DrawPlayerChat();
				}
				catch (Exception e4)
				{
					TimeLogger.DrawException(e4);
				}
			}
			else
			{
				DrawPlayerChat();
			}
			if (player[myPlayer].dead)
			{
				string value6 = Lang.inter[38].Value;
				spriteBatch.DrawString(fontDeathText, value6, new Vector2((float)(screenWidth / 2) - fontDeathText.MeasureString(value6).X / 2f, screenHeight / 2 - 20), player[myPlayer].GetDeathAlpha(Microsoft.Xna.Framework.Color.Transparent), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				if (player[myPlayer].lostCoins > 0)
				{
					string textValue = Language.GetTextValue("Game.DroppedCoins", player[myPlayer].lostCoinString);
					spriteBatch.DrawString(fontMouseText, textValue, new Vector2((float)(screenWidth / 2) - fontMouseText.MeasureString(textValue).X / 2f, screenHeight / 2 + 30), player[myPlayer].GetDeathAlpha(Microsoft.Xna.Framework.Color.Transparent), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
			}
			if (cursorOverride != -1)
			{
				Microsoft.Xna.Framework.Color color7 = new Microsoft.Xna.Framework.Color((int)((float)(int)cursorColor.R * 0.2f), (int)((float)(int)cursorColor.G * 0.2f), (int)((float)(int)cursorColor.B * 0.2f), (int)((float)(int)cursorColor.A * 0.5f));
				Microsoft.Xna.Framework.Color white = cursorColor;
				bool flag2 = true;
				bool flag3 = true;
				float rotation = 0f;
				Vector2 value7 = default(Vector2);
				float num97 = 1f;
				if (cursorOverride == 2)
				{
					flag2 = false;
					white = Microsoft.Xna.Framework.Color.White;
					num97 = 0.7f;
					value7 = new Vector2(0.1f);
				}
				switch (cursorOverride)
				{
				case 2:
					flag2 = false;
					white = Microsoft.Xna.Framework.Color.White;
					num97 = 0.7f;
					value7 = new Vector2(0.1f);
					break;
				case 3:
				case 6:
				case 7:
				case 8:
				case 9:
				case 10:
					flag2 = false;
					white = Microsoft.Xna.Framework.Color.White;
					break;
				}
				if (flag2)
				{
					spriteBatch.Draw(cursorTextures[cursorOverride], new Vector2(mouseX + 1, mouseY + 1), null, color7, rotation, value7 * cursorTextures[cursorOverride].Size(), cursorScale * 1.1f * num97, SpriteEffects.None, 0f);
				}
				if (flag3)
				{
					spriteBatch.Draw(cursorTextures[cursorOverride], new Vector2(mouseX, mouseY), null, white, rotation, value7 * cursorTextures[cursorOverride].Size(), cursorScale * num97, SpriteEffects.None, 0f);
				}
			}
			else if (smartDigEnabled)
			{
				Vector2 value8 = DrawThickCursor(true);
				spriteBatch.Draw(cursorTextures[1], new Vector2(mouseX, mouseY) + value8 + Vector2.One, null, new Microsoft.Xna.Framework.Color((int)((float)(int)cursorColor.R * 0.2f), (int)((float)(int)cursorColor.G * 0.2f), (int)((float)(int)cursorColor.B * 0.2f), (int)((float)(int)cursorColor.A * 0.5f)), 0f, default(Vector2), cursorScale * 1.1f, SpriteEffects.None, 0f);
				spriteBatch.Draw(cursorTextures[1], new Vector2(mouseX, mouseY) + value8, null, cursorColor, 0f, default(Vector2), cursorScale, SpriteEffects.None, 0f);
			}
			else
			{
				Vector2 value9 = DrawThickCursor();
				spriteBatch.Draw(cursorTextures[0], new Vector2(mouseX, mouseY) + value9 + Vector2.One, null, new Microsoft.Xna.Framework.Color((int)((float)(int)cursorColor.R * 0.2f), (int)((float)(int)cursorColor.G * 0.2f), (int)((float)(int)cursorColor.B * 0.2f), (int)((float)(int)cursorColor.A * 0.5f)), 0f, default(Vector2), cursorScale * 1.1f, SpriteEffects.None, 0f);
				spriteBatch.Draw(cursorTextures[0], new Vector2(mouseX, mouseY) + value9, null, cursorColor, 0f, default(Vector2), cursorScale, SpriteEffects.None, 0f);
			}
			if (mouseItem.type > 0 && mouseItem.stack > 0)
			{
				mouseNPC = -1;
				player[myPlayer].showItemIcon = false;
				player[myPlayer].showItemIcon2 = 0;
				mouseText = true;
				float num98 = inventoryScale;
				inventoryScale = cursorScale;
				ItemSlot.Draw(spriteBatch, ref mouseItem, 21, new Vector2(mouseX, mouseY));
				inventoryScale = num98;
			}
			else if (mouseNPC > -1)
			{
				player[myPlayer].mouseInterface = true;
				mouseText = false;
				float num99 = 1f;
				num99 *= cursorScale;
				spriteBatch.Draw(npcHeadTexture[mouseNPC], new Vector2((float)mouseX + 26f * num99 - (float)npcHeadTexture[mouseNPC].Width * 0.5f * num99, (float)mouseY + 26f * num99 - (float)npcHeadTexture[mouseNPC].Height * 0.5f * num99), new Microsoft.Xna.Framework.Rectangle(0, 0, npcHeadTexture[mouseNPC].Width, npcHeadTexture[mouseNPC].Height), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), num99, SpriteEffects.None, 0f);
				if (mouseRight && mouseRightRelease)
				{
					PlaySound(12);
					mouseNPC = -1;
				}
				if (mouseLeft && mouseLeftRelease)
				{
					if (mouseNPC == 0)
					{
						int x = (int)(((float)mouseX + screenPosition.X) / 16f);
						int y = (int)(((float)mouseY + screenPosition.Y) / 16f);
						if (player[myPlayer].gravDir == -1f)
						{
							y = (int)((screenPosition.Y + (float)screenHeight - (float)mouseY) / 16f);
						}
						int n2 = -1;
						if (WorldGen.MoveNPC(x, y, n2))
						{
							NewText(Lang.inter[39].Value, byte.MaxValue, 240, 20);
						}
					}
					else
					{
						int num100 = 0;
						for (int num101 = 0; num101 < 200; num101++)
						{
							if (npc[num101].active && npc[num101].type == NPC.NumToType(mouseNPC))
							{
								num100 = num101;
								break;
							}
						}
						if (num100 >= 0)
						{
							int x2 = (int)(((float)mouseX + screenPosition.X) / 16f);
							int y2 = (int)(((float)mouseY + screenPosition.Y) / 16f);
							if (WorldGen.MoveNPC(x2, y2, num100))
							{
								mouseNPC = -1;
								WorldGen.moveRoom(x2, y2, num100);
								PlaySound(12);
							}
						}
						else
						{
							mouseNPC = 0;
						}
					}
				}
			}
			if (ignoreErrors)
			{
				try
				{
					DrawMouseOver();
				}
				catch (Exception e5)
				{
					TimeLogger.DrawException(e5);
				}
			}
			else
			{
				DrawMouseOver();
			}
			if (mouseRight)
			{
				npcChatRelease = false;
			}
			else
			{
				npcChatRelease = true;
			}
			if (player[myPlayer].showItemIcon && (player[myPlayer].inventory[player[myPlayer].selectedItem].type > 0 || player[myPlayer].showItemIcon2 != 0))
			{
				int num102 = player[myPlayer].inventory[player[myPlayer].selectedItem].type;
				Microsoft.Xna.Framework.Color currentColor = player[myPlayer].inventory[player[myPlayer].selectedItem].GetAlpha(Microsoft.Xna.Framework.Color.White);
				Microsoft.Xna.Framework.Color color8 = player[myPlayer].inventory[player[myPlayer].selectedItem].GetColor(Microsoft.Xna.Framework.Color.White);
				if (player[myPlayer].showItemIcon2 != 0)
				{
					num102 = player[myPlayer].showItemIcon2;
					currentColor = Microsoft.Xna.Framework.Color.White;
					color8 = default(Microsoft.Xna.Framework.Color);
				}
				if (player[myPlayer].showItemIcon2 == 269)
				{
					currentColor = player[myPlayer].shirtColor;
				}
				float num103 = 1f;
				num103 = cursorScale;
				ItemSlot.GetItemLight(ref currentColor, num102);
				SpriteEffects effects2 = SpriteEffects.None;
				if ((player[myPlayer].showItemIcon2 == 928 || player[myPlayer].showItemIcon2 == 1337 || player[myPlayer].showItemIcon2 == 3369) && player[myPlayer].showItemIconR)
				{
					effects2 = SpriteEffects.FlipHorizontally;
				}
				if (num102 > 0)
				{
					spriteBatch.Draw(itemTexture[num102], new Vector2(mouseX + 10, mouseY + 10), new Microsoft.Xna.Framework.Rectangle(0, 0, itemTexture[num102].Width, itemTexture[num102].Height), currentColor, 0f, default(Vector2), num103, effects2, 0f);
				}
				if (player[myPlayer].showItemIconText != "")
				{
					MouseText(player[myPlayer].showItemIconText, 0, 0);
				}
				if (player[myPlayer].showItemIcon2 == 0 && player[myPlayer].inventory[player[myPlayer].selectedItem].color != default(Microsoft.Xna.Framework.Color))
				{
					spriteBatch.Draw(itemTexture[player[myPlayer].inventory[player[myPlayer].selectedItem].type], new Vector2(mouseX + 10, mouseY + 10), new Microsoft.Xna.Framework.Rectangle(0, 0, itemTexture[player[myPlayer].inventory[player[myPlayer].selectedItem].type].Width, itemTexture[player[myPlayer].inventory[player[myPlayer].selectedItem].type].Height), color8, 0f, default(Vector2), num103, SpriteEffects.None, 0f);
				}
			}
			player[myPlayer].showItemIcon = false;
			player[myPlayer].showItemIcon2 = 0;
			player[myPlayer].showItemIconText = string.Empty;
			cursorOverride = -1;
		}

		private void GUIHotbarDraw()
		{
			if (ignoreErrors)
			{
				try
				{
					GUIHotbarDrawInner();
				}
				catch (Exception e)
				{
					TimeLogger.DrawException(e);
				}
			}
			else
			{
				GUIHotbarDrawInner();
			}
		}

		private void GUIChatDraw()
		{
			if (ignoreErrors)
			{
				try
				{
					if ((npcChatText != "" || player[myPlayer].sign != -1) && !editChest)
					{
						GUIChatDrawInner();
					}
				}
				catch (Exception e)
				{
					TimeLogger.DrawException(e);
				}
			}
			else if ((npcChatText != "" || player[myPlayer].sign != -1) && !editChest)
			{
				GUIChatDrawInner();
			}
		}

		private void DrawInfoAccs()
		{
			if ((npcChatText != null && !(npcChatText == "")) || player[myPlayer].sign >= 0)
			{
				return;
			}
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			bool flag4 = false;
			bool flag5 = false;
			bool flag6 = false;
			bool flag7 = false;
			bool flag8 = false;
			bool flag9 = false;
			bool flag10 = false;
			bool flag11 = false;
			bool flag12 = false;
			int num = -1;
			int num2 = -10;
			int num3 = 0;
			string text = "";
			for (int i = 0; i < 12; i++)
			{
				string text2 = "";
				string text3 = "";
				if (player[myPlayer].accWatch > 0 && !flag && (!player[myPlayer].hideInfo[0] || playerInventory))
				{
					num = 0;
					text3 = Lang.inter[95].Value;
					string text4 = "AM";
					double num4 = time;
					if (!dayTime)
					{
						num4 += 54000.0;
					}
					num4 = num4 / 86400.0 * 24.0;
					double num5 = 7.5;
					num4 = num4 - num5 - 12.0;
					if (num4 < 0.0)
					{
						num4 += 24.0;
					}
					if (num4 >= 12.0)
					{
						text4 = "PM";
					}
					int num6 = (int)num4;
					double num7 = num4 - (double)num6;
					num7 = (int)(num7 * 60.0);
					string text5 = string.Concat(num7);
					if (num7 < 10.0)
					{
						text5 = "0" + text5;
					}
					if (num6 > 12)
					{
						num6 -= 12;
					}
					if (num6 == 0)
					{
						num6 = 12;
					}
					if (player[myPlayer].accWatch == 1)
					{
						text5 = "00";
					}
					else if (player[myPlayer].accWatch == 2)
					{
						text5 = ((!(num7 < 30.0)) ? "30" : "00");
					}
					text2 = num6 + ":" + text5 + " " + text4;
					flag = true;
				}
				else if (player[myPlayer].accWeatherRadio && !flag5 && (!player[myPlayer].hideInfo[1] || playerInventory))
				{
					num = 1;
					text3 = Lang.inter[96].Value;
					string text6 = "";
					text6 = (((double)maxRaining > 0.6) ? "Heavy Rain" : (((double)maxRaining >= 0.2) ? "Rain" : ((maxRaining > 0f) ? "Light Rain" : ((cloudBGActive > 0f) ? "Overcast" : ((numClouds > 120) ? "Mostly Cloudy" : ((numClouds > 80) ? "Cloudy" : ((numClouds <= 20) ? "Clear" : "Partly Cloudy")))))));
					text2 = text6;
					int num8 = (int)(windSpeed * 100f);
					if (num8 < 0)
					{
						object obj = text2;
						text2 = string.Concat(obj, " (", Math.Abs(num8), " mph W)");
					}
					else if (num8 > 0)
					{
						object obj = text2;
						text2 = string.Concat(obj, " (", num8, " mph E)");
					}
					flag5 = true;
				}
				else if (player[myPlayer].accCalendar && !flag8 && (!player[myPlayer].hideInfo[7] || playerInventory))
				{
					num = ((bloodMoon && !dayTime) ? 8 : ((!eclipse || !dayTime) ? 7 : 8));
					text3 = Lang.inter[102].Value;
					if (moonPhase == 0)
					{
						text2 = "Full Moon";
					}
					else if (moonPhase == 1)
					{
						text2 = "Waning Gibbous";
					}
					else if (moonPhase == 2)
					{
						text2 = "Third Quarter";
					}
					else if (moonPhase == 3)
					{
						text2 = "Waning Crescent";
					}
					else if (moonPhase == 4)
					{
						text2 = "New Moon";
					}
					else if (moonPhase == 5)
					{
						text2 = "Waxing Crescent";
					}
					else if (moonPhase == 6)
					{
						text2 = "First Quarter";
					}
					else if (moonPhase == 7)
					{
						text2 = "Waxing Gibbous";
					}
					flag8 = true;
				}
				else if (player[myPlayer].accFishFinder && !flag4 && (!player[myPlayer].hideInfo[2] || playerInventory))
				{
					bool flag13 = false;
					num = 2;
					text3 = Lang.inter[97].Value;
					for (int j = 0; j < 1000; j++)
					{
						if (projectile[j].active && projectile[j].owner == myPlayer && projectile[j].bobber)
						{
							flag13 = true;
							break;
						}
					}
					if (flag13)
					{
						text2 = player[myPlayer].displayedFishingInfo;
					}
					else
					{
						int num9 = player[myPlayer].FishingLevel();
						text2 = ((num9 != -1) ? (player[myPlayer].displayedFishingInfo = num9 + " Fishing Power") : "Warning!");
					}
					flag4 = true;
				}
				else if (player[myPlayer].accOreFinder && !flag10 && (!player[myPlayer].hideInfo[10] || playerInventory))
				{
					num = 10;
					text3 = Lang.inter[104].Value;
					text2 = ((player[myPlayer].bestOre > 0) ? (Lang.GetMapObjectName(MapHelper.TileToLookup(player[myPlayer].bestOre, 0)) + " detected nearby!") : "No treasure nearby");
					flag10 = true;
				}
				else if (player[myPlayer].accCritterGuide && !flag11 && (!player[myPlayer].hideInfo[11] || playerInventory))
				{
					flag11 = true;
					num = 11;
					text3 = Lang.inter[105].Value;
					int num10 = 1300;
					int num11 = 0;
					int num12 = -1;
					if (player[myPlayer].accCritterGuideCounter <= 0)
					{
						player[myPlayer].accCritterGuideCounter = 15;
						for (int k = 0; k < 200; k++)
						{
							if (npc[k].active && npc[k].rarity > num11)
							{
								num11 = npc[k].rarity;
								if ((npc[k].Center - player[myPlayer].Center).Length() < (float)num10)
								{
									num12 = k;
								}
							}
						}
						player[myPlayer].accCritterGuideNumber = (byte)num12;
					}
					else
					{
						player[myPlayer].accCritterGuideCounter--;
						num12 = player[myPlayer].accCritterGuideNumber;
					}
					text2 = ((num12 < 0 || num12 >= 200 || !npc[num12].active || npc[num12].rarity <= 0) ? "No rare creatures nearby" : npc[num12].TypeName);
				}
				else if (player[myPlayer].accThirdEye && !flag6 && (!player[myPlayer].hideInfo[5] || playerInventory))
				{
					flag6 = true;
					num = 5;
					text3 = Lang.inter[100].Value;
					int num13 = 2000;
					if (player[myPlayer].accThirdEyeCounter == 0)
					{
						player[myPlayer].accThirdEyeNumber = 0;
						player[myPlayer].accThirdEyeCounter = 15;
						for (int l = 0; l < 200; l++)
						{
							if (npc[l].active && !npc[l].friendly && npc[l].damage > 0 && npc[l].lifeMax > 5 && !npc[l].dontCountMe)
							{
								int type = npc[l].type;
								if ((npc[l].Center - player[myPlayer].Center).Length() < (float)num13)
								{
									player[myPlayer].accThirdEyeNumber++;
								}
							}
						}
					}
					else
					{
						player[myPlayer].accThirdEyeCounter--;
					}
					text2 = ((player[myPlayer].accThirdEyeNumber == 0) ? "No enemies nearby" : ((player[myPlayer].accThirdEyeNumber != 1) ? (player[myPlayer].accThirdEyeNumber + " enemies nearby!") : "1 enemy nearby!"));
				}
				else if (player[myPlayer].accJarOfSouls && !flag7 && (!player[myPlayer].hideInfo[6] || playerInventory))
				{
					flag7 = true;
					num = 6;
					text3 = Lang.inter[101].Value;
					int lastCreatureHit = player[myPlayer].lastCreatureHit;
					text2 = ((lastCreatureHit > 0) ? (Lang.GetNPCNameValue(Item.BannerToNPC(lastCreatureHit)) + ": " + NPC.killCount[lastCreatureHit]) : "Kill count unavailable");
				}
				else if (player[myPlayer].accDreamCatcher && !flag12 && (!player[myPlayer].hideInfo[12] || playerInventory))
				{
					num = 12;
					text3 = Lang.inter[106].Value;
					player[myPlayer].checkDPSTime();
					int dPS = player[myPlayer].getDPS();
					flag12 = true;
					text2 = ((dPS != 0) ? (player[myPlayer].getDPS() + " damage per second") : "N/A");
				}
				else if (player[myPlayer].accStopwatch && !flag9 && (!player[myPlayer].hideInfo[9] || playerInventory))
				{
					num = 9;
					text3 = Lang.inter[103].Value;
					int num14 = (int)(1f + player[myPlayer].velocity.Length() * 6f);
					if (num14 > player[myPlayer].speedSlice.Length)
					{
						num14 = player[myPlayer].speedSlice.Length;
					}
					float num15 = 0f;
					for (int num16 = num14 - 1; num16 > 0; num16--)
					{
						player[myPlayer].speedSlice[num16] = player[myPlayer].speedSlice[num16 - 1];
					}
					player[myPlayer].speedSlice[0] = player[myPlayer].velocity.Length();
					for (int m = 0; m < player[myPlayer].speedSlice.Length; m++)
					{
						if (m < num14)
						{
							num15 += player[myPlayer].speedSlice[m];
						}
						else
						{
							player[myPlayer].speedSlice[m] = num15 / (float)num14;
						}
					}
					num15 /= (float)num14;
					int num17 = 42240;
					int num18 = 216000;
					float num19 = num15 * (float)num18 / (float)num17;
					text2 = Math.Round(num19) + " mph";
					flag9 = true;
				}
				else if (player[myPlayer].accCompass > 0 && !flag3 && (!player[myPlayer].hideInfo[3] || playerInventory))
				{
					num = 3;
					text3 = Lang.inter[98].Value;
					int num20 = (int)((player[myPlayer].position.X + (float)(player[myPlayer].width / 2)) * 2f / 16f - (float)maxTilesX);
					text2 = ((num20 > 0) ? (num20 + "' East") : ((num20 >= 0) ? "Center" : (-num20 + "' West")));
					flag3 = true;
				}
				else if (player[myPlayer].accDepthMeter > 0 && !flag2 && (!player[myPlayer].hideInfo[4] || playerInventory))
				{
					num = 4;
					text3 = Lang.inter[99].Value;
					int num21 = (int)((double)((player[myPlayer].position.Y + (float)player[myPlayer].height) * 2f / 16f) - worldSurface * 2.0);
					string text7 = "";
					float num22 = maxTilesX / 4200;
					num22 *= num22;
					int num23 = 1080;
					float num24 = (float)((double)((screenPosition.Y + (float)(screenHeight / 2)) / 16f - (65f + 10f * num22)) / (worldSurface / 5.0));
					text7 = ((player[myPlayer].position.Y > (float)((maxTilesY - 204) * 16)) ? "Underworld" : (((double)player[myPlayer].position.Y > rockLayer * 16.0 + (double)(num23 / 2) + 16.0) ? "Caverns" : ((num21 > 0) ? "Underground" : ((!(num24 >= 1f)) ? "Space" : "Surface"))));
					string text8 = "";
					if (num21 < 0)
					{
						num21 *= -1;
					}
					text8 = ((num21 != 0) ? (num21 + "'") : "Level");
					text2 = text8 + " " + text7;
					flag2 = true;
				}
				if (!(text2 != ""))
				{
					continue;
				}
				int num25;
				int num26;
				if (!playerInventory)
				{
					num25 = screenWidth - 280;
					num26 = -32;
					if (mapStyle == 1 && mapEnabled)
					{
						num26 += 254;
					}
				}
				else
				{
					bool flag14 = true;
					if (mapStyle == 1 && mapEnabled && screenHeight < 820)
					{
						flag14 = false;
					}
					if (mapStyle != 1 && screenWidth < 855)
					{
						flag14 = false;
					}
					if (flag14)
					{
						num25 = screenWidth - 280 + 20 * num3 - 10;
						num26 = 94;
						if (mapStyle == 1 && mapEnabled)
						{
							num26 += 254;
						}
					}
					else
					{
						int num27 = (int)(52f * inventoryScale);
						num25 = 697 - num27 * 4 + screenWidth - 800 + 20 * (num3 % 2);
						num26 = 114 + mH + num27 * 7 + num27 / 2 + 20 * (num3 / 2) + 8 * (num3 / 4) - 20;
						if (EquipPage == 2)
						{
							num25 += num27 + num27 / 2;
							num26 -= num27;
						}
					}
				}
				if (num >= 0)
				{
					num3++;
					int num28 = 22;
					if (screenHeight < 650)
					{
						num28 = 20;
					}
					Vector2 position = new Vector2(num25, num26 + 74 + num28 * i + 52);
					int num29 = num;
					if (num29 == 8)
					{
						num29 = 7;
					}
					Microsoft.Xna.Framework.Color color = Microsoft.Xna.Framework.Color.White;
					if (playerInventory)
					{
						position = new Vector2(num25, num26);
						if ((float)mouseX >= position.X && (float)mouseY >= position.Y && (float)mouseX <= position.X + (float)infoIconTexture[num].Width && (float)mouseY <= position.Y + (float)infoIconTexture[num].Height)
						{
							player[myPlayer].mouseInterface = true;
							if (mouseLeft && mouseLeftRelease)
							{
								PlaySound(12);
								mouseLeftRelease = false;
								player[myPlayer].hideInfo[num29] = !player[myPlayer].hideInfo[num29];
							}
							if (!mouseText)
							{
								text = text3;
								mouseText = true;
							}
						}
						if (player[myPlayer].hideInfo[num29])
						{
							color = new Microsoft.Xna.Framework.Color(80, 80, 80, 70);
						}
					}
					else if ((float)mouseX >= position.X && (float)mouseY >= position.Y && (float)mouseX <= position.X + (float)infoIconTexture[num].Width && (float)mouseY <= position.Y + (float)infoIconTexture[num].Height && !mouseText && Lang.lang <= 1)
					{
						num2 = i;
						text = text3;
						mouseText = true;
					}
					spriteBatch.Draw(infoIconTexture[num], position, new Microsoft.Xna.Framework.Rectangle(0, 0, infoIconTexture[num].Width, infoIconTexture[num].Height), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					num25 += 20;
				}
				if (playerInventory)
				{
					continue;
				}
				for (int n = 0; n < 5; n++)
				{
					int num30 = 0;
					int num31 = 0;
					Microsoft.Xna.Framework.Color color2 = Microsoft.Xna.Framework.Color.Black;
					if (n == 0)
					{
						num30 = -2;
					}
					if (n == 1)
					{
						num30 = 2;
					}
					if (n == 2)
					{
						num31 = -2;
					}
					if (n == 3)
					{
						num31 = 2;
					}
					if (n == 4)
					{
						color2 = new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor);
					}
					if (i > num2 && i < num2 + 2)
					{
						color2 = new Microsoft.Xna.Framework.Color((int)color2.R / 3, (int)color2.G / 3, (int)color2.B / 3, (int)color2.A / 3);
					}
					int num32 = 22;
					if (screenHeight < 650)
					{
						num32 = 20;
					}
					spriteBatch.DrawString(fontMouseText, text2, new Vector2(num25 + num30, num26 + 74 + num32 * i + num31 + 48), color2, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
			}
			if (!string.IsNullOrEmpty(text))
			{
				if (playerInventory)
				{
					player[myPlayer].mouseInterface = true;
				}
				MouseText(text, 0, 0);
			}
		}

		public static void CheckInvasionProgressDisplay()
		{
			if (invasionProgressMode != 2)
			{
				invasionProgressNearInvasion = false;
				return;
			}
			bool flag = false;
			Player player = Main.player[myPlayer];
			Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)screenPosition.X, (int)screenPosition.Y, screenWidth, screenHeight);
			int num = 5000;
			int num2 = 0;
			for (int i = 0; i < 200; i++)
			{
				if (!npc[i].active)
				{
					continue;
				}
				num2 = 0;
				switch (npc[i].type)
				{
				case 338:
				case 339:
				case 340:
				case 341:
				case 342:
				case 343:
				case 344:
				case 345:
				case 346:
				case 347:
				case 348:
				case 349:
				case 350:
					num2 = 1;
					break;
				case 305:
				case 306:
				case 307:
				case 308:
				case 309:
				case 310:
				case 311:
				case 312:
				case 313:
				case 314:
				case 315:
				case 325:
				case 326:
				case 327:
				case 329:
				case 330:
					num2 = 2;
					break;
				case 26:
				case 27:
				case 28:
				case 29:
				case 111:
					num2 = 3;
					break;
				case 143:
				case 144:
				case 145:
					num2 = 4;
					break;
				case 212:
				case 213:
				case 214:
				case 215:
				case 216:
				case 491:
					num2 = 5;
					break;
				case 381:
				case 382:
				case 383:
				case 385:
				case 386:
				case 388:
				case 389:
				case 390:
				case 391:
				case 395:
					num2 = 6;
					break;
				}
				if (num2 != 0 && (num2 != 1 || (!((double)player.position.Y > worldSurface * 16.0) && !dayTime && snowMoon)) && (num2 != 2 || (!((double)player.position.Y > worldSurface * 16.0) && !dayTime && pumpkinMoon)) && (num2 <= 2 || (!((double)player.position.Y > worldSurface * 16.0) && invasionType == num2 - 2)))
				{
					Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle((int)(npc[i].position.X + (float)(npc[i].width / 2)) - num, (int)(npc[i].position.Y + (float)(npc[i].height / 2)) - num, num * 2, num * 2);
					if (rectangle.Intersects(value))
					{
						flag = true;
						break;
					}
				}
			}
			invasionProgressNearInvasion = flag;
			if (!flag || invasionProgressIcon != 0)
			{
				return;
			}
			if (snowMoon)
			{
				int[] array = new int[21]
				{
					0,
					25,
					15,
					10,
					30,
					100,
					160,
					180,
					200,
					250,
					300,
					375,
					450,
					525,
					675,
					850,
					1025,
					1325,
					1550,
					2000,
					0
				};
				int progressMax = array[NPC.waveCount];
				ReportInvasionProgress((int)NPC.waveKills, progressMax, 1, NPC.waveCount);
				return;
			}
			if (pumpkinMoon)
			{
				int[] array2 = new int[16]
				{
					0,
					25,
					40,
					50,
					80,
					100,
					160,
					180,
					200,
					250,
					300,
					375,
					450,
					525,
					675,
					0
				};
				int progressMax2 = array2[NPC.waveCount];
				ReportInvasionProgress((int)NPC.waveKills, progressMax2, 2, NPC.waveCount);
				return;
			}
			int progressMax3 = 1;
			if (invasionType != 0 && invasionSizeStart != 0)
			{
				progressMax3 = invasionSizeStart;
			}
			ReportInvasionProgress(invasionSizeStart - invasionSize, progressMax3, num2, 0);
		}

		public static void SyncAnInvasion(int toWho)
		{
			if (snowMoon)
			{
				int[] array = new int[21]
				{
					0,
					25,
					15,
					10,
					30,
					100,
					160,
					180,
					200,
					250,
					300,
					375,
					450,
					525,
					675,
					850,
					1025,
					1325,
					1550,
					2000,
					0
				};
				int num = array[NPC.waveCount];
				NetMessage.SendData(78, toWho, -1, "", (int)NPC.waveKills, num, 1f, NPC.waveCount);
			}
			else if (pumpkinMoon)
			{
				int[] array2 = new int[16]
				{
					0,
					25,
					40,
					50,
					80,
					100,
					160,
					180,
					200,
					250,
					300,
					375,
					450,
					525,
					675,
					0
				};
				int num2 = array2[NPC.waveCount];
				NetMessage.SendData(78, toWho, -1, "", (int)NPC.waveKills, num2, 2f, NPC.waveCount);
			}
			else if (invasionType > 0)
			{
				int num3 = 1;
				if (invasionType != 0 && invasionSizeStart != 0)
				{
					num3 = invasionSizeStart;
				}
				NetMessage.SendData(78, toWho, -1, "", invasionSizeStart - invasionSize, num3, invasionType + 2);
			}
		}

		public static void ReportInvasionProgress(int progress, int progressMax, int icon, int progressWave)
		{
			invasionProgress = progress;
			invasionProgressMax = progressMax;
			invasionProgressIcon = icon;
			invasionProgressWave = progressWave;
			invasionProgressDisplayLeft = 160;
		}

		public static void DrawInvasionProgress()
		{
			if (invasionProgress == -1)
			{
				return;
			}
			if (invasionProgressMode == 2 && invasionProgressNearInvasion && invasionProgressDisplayLeft < 160)
			{
				invasionProgressDisplayLeft = 160;
			}
			if (!gamePaused && invasionProgressDisplayLeft > 0)
			{
				invasionProgressDisplayLeft--;
			}
			if (invasionProgressDisplayLeft > 0)
			{
				invasionProgressAlpha += 0.05f;
			}
			else
			{
				invasionProgressAlpha -= 0.05f;
			}
			if (invasionProgressAlpha < 0f)
			{
				invasionProgressAlpha = 0f;
			}
			if (invasionProgressAlpha > 1f)
			{
				invasionProgressAlpha = 1f;
			}
			if (invasionProgressAlpha <= 0f)
			{
				return;
			}
			float num = 0.5f + invasionProgressAlpha * 0.5f;
			Texture2D texture2D = extraTexture[9];
			string text = "";
			Microsoft.Xna.Framework.Color c = Microsoft.Xna.Framework.Color.White;
			if (invasionProgressIcon == 1)
			{
				texture2D = extraTexture[8];
				text = Lang.inter[83].Value;
				c = new Microsoft.Xna.Framework.Color(64, 109, 164) * 0.5f;
			}
			else if (invasionProgressIcon == 2)
			{
				texture2D = extraTexture[12];
				text = Lang.inter[84].Value;
				c = new Microsoft.Xna.Framework.Color(112, 86, 114) * 0.5f;
			}
			else if (invasionProgressIcon == 6)
			{
				texture2D = extraTexture[10];
				text = Lang.inter[85].Value;
				c = new Microsoft.Xna.Framework.Color(165, 160, 155) * 0.5f;
			}
			else if (invasionProgressIcon == 5)
			{
				texture2D = extraTexture[11];
				text = Lang.inter[86].Value;
				c = new Microsoft.Xna.Framework.Color(148, 122, 72) * 0.5f;
			}
			else if (invasionProgressIcon == 4)
			{
				texture2D = extraTexture[7];
				text = Lang.inter[87].Value;
				c = new Microsoft.Xna.Framework.Color(173, 135, 140) * 0.5f;
			}
			else if (invasionProgressIcon == 3)
			{
				texture2D = extraTexture[9];
				text = Lang.inter[88].Value;
				c = new Microsoft.Xna.Framework.Color(94, 72, 131) * 0.5f;
			}
			if (invasionProgressWave > 0)
			{
				int num2 = (int)(200f * num);
				int num3 = (int)(45f * num);
				Vector2 vector = new Vector2(screenWidth - 120, screenHeight - 40);
				Utils.DrawInvBG(R: new Microsoft.Xna.Framework.Rectangle((int)vector.X - num2 / 2, (int)vector.Y - num3 / 2, num2, num3), sb: spriteBatch, c: new Microsoft.Xna.Framework.Color(63, 65, 151, 255) * 0.785f);
				string text2 = "";
				text2 = Language.GetTextValue(arg1: (invasionProgressMax != 0) ? ((int)((float)invasionProgress * 100f / (float)invasionProgressMax) + "%") : Language.GetTextValue("Game.InvasionPoints", invasionProgress), key: "Game.WaveMessage", arg0: invasionProgressWave);
				Texture2D texture2D2 = colorBarTexture;
				Texture2D colorBlipTexture2 = colorBlipTexture;
				float num4 = MathHelper.Clamp((float)invasionProgress / (float)invasionProgressMax, 0f, 1f);
				if (invasionProgressMax == 0)
				{
					num4 = 1f;
				}
				float num5 = 169f * num;
				float num6 = 8f * num;
				Vector2 vector2 = vector + Vector2.UnitY * num6 + Vector2.UnitX * 1f;
				Utils.DrawBorderString(spriteBatch, text2, vector2, Microsoft.Xna.Framework.Color.White * invasionProgressAlpha, num, 0.5f, 1f);
				spriteBatch.Draw(texture2D2, vector, null, Microsoft.Xna.Framework.Color.White * invasionProgressAlpha, 0f, new Vector2(texture2D2.Width / 2, 0f), num, SpriteEffects.None, 0f);
				vector2 += Vector2.UnitX * (num4 - 0.5f) * num5;
				spriteBatch.Draw(magicPixel, vector2, new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1), new Microsoft.Xna.Framework.Color(255, 241, 51) * invasionProgressAlpha, 0f, new Vector2(1f, 0.5f), new Vector2(num5 * num4, num6), SpriteEffects.None, 0f);
				spriteBatch.Draw(magicPixel, vector2, new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1), new Microsoft.Xna.Framework.Color(255, 165, 0, 127) * invasionProgressAlpha, 0f, new Vector2(1f, 0.5f), new Vector2(2f, num6), SpriteEffects.None, 0f);
				spriteBatch.Draw(magicPixel, vector2, new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1), Microsoft.Xna.Framework.Color.Black * invasionProgressAlpha, 0f, new Vector2(0f, 0.5f), new Vector2(num5 * (1f - num4), num6), SpriteEffects.None, 0f);
			}
			else
			{
				int num7 = (int)(200f * num);
				int num8 = (int)(45f * num);
				Vector2 vector3 = new Vector2(screenWidth - 120, screenHeight - 40);
				Utils.DrawInvBG(R: new Microsoft.Xna.Framework.Rectangle((int)vector3.X - num7 / 2, (int)vector3.Y - num8 / 2, num7, num8), sb: spriteBatch, c: new Microsoft.Xna.Framework.Color(63, 65, 151, 255) * 0.785f);
				string text3 = "";
				text3 = ((invasionProgressMax != 0) ? ((int)((float)invasionProgress * 100f / (float)invasionProgressMax) + "%") : invasionProgress.ToString());
				text3 = Language.GetTextValue("Game.WaveCleared", text3);
				Texture2D texture2D3 = colorBarTexture;
				Texture2D colorBlipTexture3 = colorBlipTexture;
				if (invasionProgressMax != 0)
				{
					spriteBatch.Draw(texture2D3, vector3, null, Microsoft.Xna.Framework.Color.White * invasionProgressAlpha, 0f, new Vector2(texture2D3.Width / 2, 0f), num, SpriteEffects.None, 0f);
					float num9 = MathHelper.Clamp((float)invasionProgress / (float)invasionProgressMax, 0f, 1f);
					float num10 = 169f * num;
					float num11 = 8f * num;
					Vector2 vector4 = vector3 + Vector2.UnitY * num11 + Vector2.UnitX * 1f;
					Utils.DrawBorderString(spriteBatch, text3, vector4, Microsoft.Xna.Framework.Color.White * invasionProgressAlpha, num, 0.5f, 1f);
					vector4 += Vector2.UnitX * (num9 - 0.5f) * num10;
					spriteBatch.Draw(magicPixel, vector4, new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1), new Microsoft.Xna.Framework.Color(255, 241, 51) * invasionProgressAlpha, 0f, new Vector2(1f, 0.5f), new Vector2(num10 * num9, num11), SpriteEffects.None, 0f);
					spriteBatch.Draw(magicPixel, vector4, new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1), new Microsoft.Xna.Framework.Color(255, 165, 0, 127) * invasionProgressAlpha, 0f, new Vector2(1f, 0.5f), new Vector2(2f, num11), SpriteEffects.None, 0f);
					spriteBatch.Draw(magicPixel, vector4, new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1), Microsoft.Xna.Framework.Color.Black * invasionProgressAlpha, 0f, new Vector2(0f, 0.5f), new Vector2(num10 * (1f - num9), num11), SpriteEffects.None, 0f);
				}
			}
			Vector2 center = new Vector2(screenWidth - 120, screenHeight - 80);
			Vector2 value = fontItemStack.MeasureString(text);
			Microsoft.Xna.Framework.Rectangle r3 = Utils.CenteredRectangle(center, (value + new Vector2(texture2D.Width + 20, 10f)) * num);
			Utils.DrawInvBG(spriteBatch, r3, c);
			spriteBatch.Draw(texture2D, r3.Left() + Vector2.UnitX * num * 8f, null, Microsoft.Xna.Framework.Color.White * invasionProgressAlpha, 0f, new Vector2(0f, texture2D.Height / 2), num * 0.8f, SpriteEffects.None, 0f);
			Utils.DrawBorderString(spriteBatch, text, r3.Right() + Vector2.UnitX * num * -8f, Microsoft.Xna.Framework.Color.White * invasionProgressAlpha, num * 0.9f, 1f, 0.4f);
		}

		protected void QuitGame()
		{
			SaveSettings();
			Exit();
		}

		protected Microsoft.Xna.Framework.Color randColor()
		{
			int num = 0;
			int num2 = 0;
			int num3 = 0;
			while (num + num3 + num2 <= 150)
			{
				num = rand.Next(256);
				num2 = rand.Next(256);
				num3 = rand.Next(256);
			}
			return new Microsoft.Xna.Framework.Color(num, num2, num3, 255);
		}

		public static Microsoft.Xna.Framework.Color hslToRgb(float Hue, float Saturation, float Luminosity)
		{
			byte r;
			byte g;
			byte b;
			if (Saturation == 0f)
			{
				r = (byte)Math.Round((double)Luminosity * 255.0);
				g = (byte)Math.Round((double)Luminosity * 255.0);
				b = (byte)Math.Round((double)Luminosity * 255.0);
			}
			else
			{
				double num = Hue;
				double num2 = (!((double)Luminosity < 0.5)) ? ((double)(Luminosity + Saturation - Luminosity * Saturation)) : ((double)Luminosity * (1.0 + (double)Saturation));
				double t = 2.0 * (double)Luminosity - num2;
				double c = num + 0.33333333333333331;
				double c2 = num;
				double c3 = num - 0.33333333333333331;
				c = hue2rgb(c, t, num2);
				c2 = hue2rgb(c2, t, num2);
				c3 = hue2rgb(c3, t, num2);
				r = (byte)Math.Round(c * 255.0);
				g = (byte)Math.Round(c2 * 255.0);
				b = (byte)Math.Round(c3 * 255.0);
			}
			return new Microsoft.Xna.Framework.Color(r, g, b);
		}

		public static double hue2rgb(double c, double t1, double t2)
		{
			if (c < 0.0)
			{
				c += 1.0;
			}
			if (c > 1.0)
			{
				c -= 1.0;
			}
			if (6.0 * c < 1.0)
			{
				return t1 + (t2 - t1) * 6.0 * c;
			}
			if (2.0 * c < 1.0)
			{
				return t2;
			}
			if (3.0 * c < 2.0)
			{
				return t1 + (t2 - t1) * (2.0 / 3.0 - c) * 6.0;
			}
			return t1;
		}

		public static Vector3 rgbToHsl(Microsoft.Xna.Framework.Color newColor)
		{
			float num = (int)newColor.R;
			float num2 = (int)newColor.G;
			float num3 = (int)newColor.B;
			num /= 255f;
			num2 /= 255f;
			num3 /= 255f;
			float val = Math.Max(num, num2);
			val = Math.Max(val, num3);
			float val2 = Math.Min(num, num2);
			val2 = Math.Min(val2, num3);
			float num4 = 0f;
			float num5 = (val + val2) / 2f;
			float y;
			if (val == val2)
			{
				num4 = (y = 0f);
			}
			else
			{
				float num6 = val - val2;
				y = (((double)num5 > 0.5) ? (num6 / (2f - val - val2)) : (num6 / (val + val2)));
				if (val == num)
				{
					num4 = (num2 - num3) / num6 + (float)((num2 < num3) ? 6 : 0);
				}
				if (val == num2)
				{
					num4 = (num3 - num) / num6 + 2f;
				}
				if (val == num3)
				{
					num4 = (num - num2) / num6 + 4f;
				}
				num4 /= 6f;
			}
			return new Vector3(num4, y, num5);
		}

		public static Vector2 DrawThickCursor(bool smart = false)
		{
			if (ThickMouse)
			{
				Microsoft.Xna.Framework.Color black = Microsoft.Xna.Framework.Color.Black;
				black.PackedValue = ThickMousePackedColor;
				Texture2D texture = cursorTextures[11];
				if (smart)
				{
					texture = cursorTextures[12];
				}
				for (int i = 0; i < 4; i++)
				{
					Vector2 value = Vector2.Zero;
					switch (i)
					{
					case 0:
						value = new Vector2(0f, 1f);
						break;
					case 1:
						value = new Vector2(1f, 0f);
						break;
					case 2:
						value = new Vector2(0f, -1f);
						break;
					case 3:
						value = new Vector2(-1f, 0f);
						break;
					}
					value *= 1f;
					value += Vector2.One * 2f;
					spriteBatch.Draw(texture, new Vector2(mouseX, mouseY) + value, null, black, 0f, new Vector2(2f), cursorScale * 1.1f, SpriteEffects.None, 0f);
				}
				return new Vector2(2f);
			}
			return Vector2.Zero;
		}

		protected void DrawMenu(GameTime gameTime)
		{
			if (!IsEngineLoaded)
			{
				IsEngineLoaded = true;
				if (Main.OnEngineLoad != null)
				{
					Main.OnEngineLoad();
				}
			}
			if (menuMode <= 1 && slimeRain)
			{
				StopSlimeRain();
			}
			render = false;
			Star.UpdateStars();
			Cloud.UpdateClouds();
			holyTiles = 0;
			evilTiles = 0;
			shroomTiles = 0;
			bloodTiles = 0;
			bloodTiles = 0;
			jungleTiles = 0;
			chatMode = false;
			for (int i = 0; i < numChatLines; i++)
			{
				chatLine[i] = new ChatLine();
			}
			DrawFPS();
			screenLastPosition = screenPosition;
			screenPosition.Y = (float)(worldSurface * 16.0 - (double)screenHeight);
			if (grabSky)
			{
				screenPosition.X += (float)(mouseX - screenWidth / 2) * 0.02f;
			}
			else
			{
				screenPosition.X += 2f;
			}
			if (screenPosition.X > 2.14748352E+09f)
			{
				screenPosition.X = 0f;
			}
			if (screenPosition.X < -2.14748352E+09f)
			{
				screenPosition.X = 0f;
			}
			background = 0;
			byte b = (byte)((255 + tileColor.R * 2) / 3);
			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(b, b, b, 255);
			logoRotation += logoRotationSpeed * 3E-05f;
			if ((double)logoRotation > 0.1)
			{
				logoRotationDirection = -1f;
			}
			else if ((double)logoRotation < -0.1)
			{
				logoRotationDirection = 1f;
			}
			if ((logoRotationSpeed < 20f) & (logoRotationDirection == 1f))
			{
				logoRotationSpeed += 1f;
			}
			else if ((logoRotationSpeed > -20f) & (logoRotationDirection == -1f))
			{
				logoRotationSpeed -= 1f;
			}
			logoScale += logoScaleSpeed * 1E-05f;
			if ((double)logoScale > 1.1)
			{
				logoScaleDirection = -1f;
			}
			else if ((double)logoScale < 0.9)
			{
				logoScaleDirection = 1f;
			}
			if ((logoScaleSpeed < 50f) & (logoScaleDirection == 1f))
			{
				logoScaleSpeed += 1f;
			}
			else if ((logoScaleSpeed > -50f) & (logoScaleDirection == -1f))
			{
				logoScaleSpeed -= 1f;
			}
			Microsoft.Xna.Framework.Color color2 = new Microsoft.Xna.Framework.Color((byte)((float)(int)color.R * ((float)LogoA / 255f)), (byte)((float)(int)color.G * ((float)LogoA / 255f)), (byte)((float)(int)color.B * ((float)LogoA / 255f)), (byte)((float)(int)color.A * ((float)LogoA / 255f)));
			Microsoft.Xna.Framework.Color color3 = new Microsoft.Xna.Framework.Color((byte)((float)(int)color.R * ((float)LogoB / 255f)), (byte)((float)(int)color.G * ((float)LogoB / 255f)), (byte)((float)(int)color.B * ((float)LogoB / 255f)), (byte)((float)(int)color.A * ((float)LogoB / 255f)));
			spriteBatch.Draw(logoTexture, new Vector2(screenWidth / 2, 100f), new Microsoft.Xna.Framework.Rectangle(0, 0, logoTexture.Width, logoTexture.Height), color2, logoRotation, new Vector2(logoTexture.Width / 2, logoTexture.Height / 2), logoScale, SpriteEffects.None, 0f);
			spriteBatch.Draw(logo2Texture, new Vector2(screenWidth / 2, 100f), new Microsoft.Xna.Framework.Rectangle(0, 0, logoTexture.Width, logoTexture.Height), color3, logoRotation, new Vector2(logoTexture.Width / 2, logoTexture.Height / 2), logoScale, SpriteEffects.None, 0f);
			if (dayTime)
			{
				LogoA += 2;
				if (LogoA > 255)
				{
					LogoA = 255;
				}
				LogoB--;
				if (LogoB < 0)
				{
					LogoB = 0;
				}
			}
			else
			{
				LogoB += 2;
				if (LogoB > 255)
				{
					LogoB = 255;
				}
				LogoA--;
				if (LogoA < 0)
				{
					LogoA = 0;
					LogoT = true;
				}
			}
			int num = 250;
			int num2 = screenWidth / 2;
			int num3 = 80;
			int num4 = 0;
			int num5 = menuMode;
			int num6 = 0;
			int num7 = 0;
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			int num8 = 0;
			bool[] array = new bool[maxMenuItems];
			bool[] array2 = new bool[maxMenuItems];
			bool[] array3 = new bool[maxMenuItems];
			int[] array4 = new int[maxMenuItems];
			int[] array5 = new int[maxMenuItems];
			byte[] array6 = new byte[maxMenuItems];
			float[] array7 = new float[maxMenuItems];
			bool[] array8 = new bool[maxMenuItems];
			bool flag4 = false;
			for (int j = 0; j < maxMenuItems; j++)
			{
				array[j] = false;
				array2[j] = false;
				array4[j] = 0;
				array5[j] = 0;
				array7[j] = 1f;
			}
			string[] array9 = new string[maxMenuItems];
			if (menuMode == -1)
			{
				menuMode = 0;
			}
			if (menuMode == 1212)
			{
				if (focusMenu == 2)
				{
					array9[0] = "Wählen Sie die Sprache";
				}
				else if (focusMenu == 3)
				{
					array9[0] = "Selezionare la lingua";
				}
				else if (focusMenu == 4)
				{
					array9[0] = "Sélectionnez la langue";
				}
				else if (focusMenu == 5)
				{
					array9[0] = "Seleccione el idioma";
				}
				else
				{
					array9[0] = "Select language";
				}
				num3 = 50;
				num = 200;
				array4[1] = 25;
				array4[2] = 25;
				array4[3] = 25;
				array4[4] = 25;
				array4[5] = 25;
				array[0] = true;
				array9[1] = "English";
				array9[2] = "Deutsch";
				array9[3] = "Italiano";
				array9[4] = "Française";
				array9[5] = "Español";
				num4 = 6;
				if (selectedMenu >= 1)
				{
					Lang.lang = selectedMenu;
					Lang.setLang();
					menuMode = 0;
					PlaySound(10);
					SaveSettings();
				}
			}
			else if (menuMode == 1213)
			{
				if (focusMenu == 1)
				{
					array9[0] = "Select language";
				}
				else if (focusMenu == 2)
				{
					array9[0] = "Wählen Sie die Sprache";
				}
				else if (focusMenu == 3)
				{
					array9[0] = "Selezionare la lingua";
				}
				else if (focusMenu == 4)
				{
					array9[0] = "Sélectionnez la langue";
				}
				else if (focusMenu == 5)
				{
					array9[0] = "Seleccione el idioma";
				}
				else
				{
					array9[0] = Lang.menu[102].Value;
				}
				num3 = 48;
				num = 180;
				array4[1] = 25;
				array4[2] = 25;
				array4[3] = 25;
				array4[4] = 25;
				array4[5] = 25;
				array4[6] = 50;
				array[0] = true;
				array9[1] = "English";
				array9[2] = "Deutsch";
				array9[3] = "Italiano";
				array9[4] = "Française";
				array9[5] = "Español";
				array9[6] = Lang.menu[5].Value;
				num4 = 7;
				if (selectedMenu == 6)
				{
					menuMode = 11;
					PlaySound(11);
				}
				else if (selectedMenu >= 1)
				{
					Lang.lang = selectedMenu;
					Lang.setLang();
					PlaySound(12);
					SaveSettings();
				}
			}
			else if (netMode == 2)
			{
				bool flag5 = true;
				for (int k = 0; k < 8; k++)
				{
					if (k < 16)
					{
						try
						{
							array9[k] = Netplay.Clients[k].StatusText;
							if (Netplay.Clients[k].IsActive && showSpam)
							{
								string[] array10;
								string[] array11 = array10 = array9;
								int num9 = k;
								IntPtr ıntPtr = (IntPtr)num9;
								object obj = array10[(long)ıntPtr];
								array11[num9] = string.Concat(obj, " (", NetMessage.buffer[k].spamCount, ")");
							}
						}
						catch
						{
							array9[k] = "";
						}
						array[k] = true;
						if (array9[k] != "" && array9[k] != null)
						{
							flag5 = false;
						}
					}
				}
				if (flag5)
				{
					array9[0] = Lang.menu[0].Value;
					array9[1] = Lang.menu[1].Value + Netplay.ListenPort + ".";
				}
				num4 = 11;
				array9[9] = statusText;
				array[9] = true;
				num = 170;
				num3 = 30;
				array4[10] = 20;
				array4[10] = 40;
				array9[10] = Lang.menu[2].Value;
				if (selectedMenu == 10)
				{
					Netplay.disconnect = true;
					PlaySound(11);
				}
			}
			else if (menuMode == 31)
			{
				string serverPassword = Netplay.ServerPassword;
				Netplay.ServerPassword = GetInputText(Netplay.ServerPassword);
				if (serverPassword != Netplay.ServerPassword)
				{
					PlaySound(12);
				}
				array9[0] = Lang.menu[3].Value;
				textBlinkerCount++;
				if (textBlinkerCount >= 20)
				{
					if (textBlinkerState == 0)
					{
						textBlinkerState = 1;
					}
					else
					{
						textBlinkerState = 0;
					}
					textBlinkerCount = 0;
				}
				array9[1] = Netplay.ServerPassword;
				if (HidePassword)
				{
					array9[1] = "";
					for (int l = 0; l < Netplay.ServerPassword.Length; l++)
					{
						string[] array10;
						(array10 = array9)[1] = array10[1] + "*";
					}
				}
				if (textBlinkerState == 1)
				{
					string[] array10;
					(array10 = array9)[1] = array10[1] + "|";
					array5[1] = 1;
				}
				else
				{
					string[] array10;
					(array10 = array9)[1] = array10[1] + " ";
				}
				array[0] = true;
				array[1] = true;
				array4[1] = -20;
				array4[2] = 20;
				array9[2] = Lang.menu[4].Value;
				array9[3] = Lang.menu[5].Value;
				num4 = 4;
				if (selectedMenu == 3)
				{
					PlaySound(11);
					menuMode = 0;
					Netplay.disconnect = true;
					Netplay.ServerPassword = "";
				}
				else if (selectedMenu == 2 || inputTextEnter)
				{
					NetMessage.SendData(38, -1, -1, Netplay.ServerPassword);
					menuMode = 14;
				}
			}
			else if (netMode == 1 || menuMode == 14)
			{
				num4 = 2;
				array9[0] = statusText;
				array[0] = true;
				num = 300;
				array9[1] = Lang.menu[6].Value;
				if (selectedMenu == 1)
				{
					Netplay.disconnect = true;
					Netplay.Connection.Socket.Close();
					PlaySound(11);
					menuMode = 0;
					netMode = 0;
					try
					{
						tServer.Kill();
					}
					catch
					{
					}
				}
			}
			else if (menuMode == 882)
			{
				num4 = 2;
				array[0] = true;
				num = 300;
				array9[0] = statusText;
				array9[1] = Lang.menu[6].Value;
				if (selectedMenu == 1)
				{
					PlaySound(11);
					menuMode = 0;
					netMode = 0;
					if (SocialAPI.Network != null)
					{
						SocialAPI.Network.CancelJoin();
					}
				}
			}
			else if (menuMode == 30)
			{
				string serverPassword2 = Netplay.ServerPassword;
				Netplay.ServerPassword = GetInputText(Netplay.ServerPassword);
				if (serverPassword2 != Netplay.ServerPassword)
				{
					PlaySound(12);
				}
				array9[0] = Lang.menu[7].Value;
				textBlinkerCount++;
				if (textBlinkerCount >= 20)
				{
					if (textBlinkerState == 0)
					{
						textBlinkerState = 1;
					}
					else
					{
						textBlinkerState = 0;
					}
					textBlinkerCount = 0;
				}
				array9[1] = Netplay.ServerPassword;
				if (HidePassword)
				{
					array9[1] = "";
					for (int m = 0; m < Netplay.ServerPassword.Length; m++)
					{
						string[] array10;
						(array10 = array9)[1] = array10[1] + "*";
					}
				}
				if (textBlinkerState == 1)
				{
					string[] array10;
					(array10 = array9)[1] = array10[1] + "|";
					array5[1] = 1;
				}
				else
				{
					string[] array10;
					(array10 = array9)[1] = array10[1] + " ";
				}
				array[0] = true;
				array[1] = true;
				array4[1] = -20;
				array4[2] = 20;
				array9[2] = Lang.menu[4].Value;
				array9[3] = Lang.menu[5].Value;
				num4 = 4;
				if (selectedMenu == 3)
				{
					if (SocialAPI.Network != null)
					{
						menuMode = 889;
					}
					else
					{
						menuMode = 6;
					}
					Netplay.ServerPassword = "";
				}
				else if (selectedMenu == 2 || inputTextEnter || autoPass)
				{
					string str = "-autoshutdown -password \"" + Netplay.ServerPassword + "\" -lang " + Lang.lang;
					str = ((!ActiveWorldFileData.IsCloudSave) ? (str + " -world \"" + worldPathName + "\"") : (str + " -cloudworld \"" + worldPathName + "\""));
					tServer.StartInfo.FileName = "TerrariaServer.exe";
					tServer.StartInfo.Arguments = str;
					if (libPath != "")
					{
						ProcessStartInfo startInfo = tServer.StartInfo;
						startInfo.Arguments = startInfo.Arguments + " -loadlib " + libPath;
					}
					tServer.StartInfo.UseShellExecute = false;
					tServer.StartInfo.CreateNoWindow = true;
					if (SocialAPI.Network != null)
					{
						SocialAPI.Network.LaunchLocalServer(tServer, MenuServerMode);
					}
					else
					{
						tServer.Start();
					}
					Netplay.SetRemoteIP("127.0.0.1");
					autoPass = true;
					statusText = Lang.menu[8].Value;
					Netplay.StartTcpClient();
					menuMode = 10;
				}
			}
			else if (menuMode == 889)
			{
				num = 200;
				num3 = 60;
				array4[1] = 30;
				array4[2] = 30;
				array4[3] = 30;
				array4[4] = 70;
				array4[5] = 70;
				num4 = 6;
				array9[0] = Lang.menu[135].Value;
				array9[4] = Lang.menu[144].Value;
				array9[5] = Lang.menu[5].Value;
				array[0] = true;
				if (!MenuServerMode.HasFlag(ServerMode.Lobby))
				{
					MenuServerMode = ServerMode.None;
					array[2] = true;
					array[3] = true;
					array9[1] = Lang.menu[136].Value;
					array9[2] = "";
					array9[3] = "";
				}
				else
				{
					array9[1] = Lang.menu[137].Value;
					if (MenuServerMode.HasFlag(ServerMode.FriendsCanJoin))
					{
						array9[2] = Lang.menu[139].Value;
						if (MenuServerMode.HasFlag(ServerMode.FriendsOfFriends))
						{
							array9[3] = Lang.menu[143].Value;
						}
						else
						{
							array9[3] = Lang.menu[142].Value;
						}
					}
					else
					{
						array9[2] = Lang.menu[138].Value;
						if (MenuServerMode.HasFlag(ServerMode.FriendsOfFriends))
						{
							array9[3] = Lang.menu[141].Value;
						}
						else
						{
							array9[3] = Lang.menu[140].Value;
						}
					}
				}
				switch (selectedMenu)
				{
				case 1:
					MenuServerMode ^= ServerMode.Lobby;
					PlaySound(12);
					break;
				case 2:
					MenuServerMode ^= ServerMode.FriendsCanJoin;
					PlaySound(12);
					break;
				case 3:
					MenuServerMode ^= ServerMode.FriendsOfFriends;
					PlaySound(12);
					break;
				case 4:
					clrInput();
					Netplay.ServerPassword = "";
					GetInputText("");
					autoPass = false;
					menuMode = 30;
					PlaySound(10);
					break;
				case 5:
					menuMode = 6;
					PlaySound(11);
					break;
				}
			}
			else if (menuMode == 15)
			{
				num4 = 2;
				array9[0] = statusText;
				array[0] = true;
				num = 80;
				num3 = 400;
				array9[1] = Lang.menu[5].Value;
				if (selectedMenu == 1)
				{
					Netplay.disconnect = true;
					PlaySound(11);
					menuMode = 0;
					netMode = 0;
				}
			}
			else if (menuMode == 200)
			{
				num4 = 3;
				array9[0] = Lang.menu[9].Value;
				array[0] = true;
				num -= 30;
				array4[1] = 70;
				array4[2] = 50;
				array9[1] = Lang.menu[10].Value;
				array9[2] = Lang.menu[6].Value;
				if (selectedMenu == 1)
				{
					if (FileUtilities.Exists(worldPathName + ".bak", ActiveWorldFileData.IsCloudSave))
					{
						FileUtilities.Move(worldPathName + ".bak", worldPathName, ActiveWorldFileData.IsCloudSave);
						PlaySound(10);
						WorldGen.playWorld();
						menuMode = 10;
					}
					else
					{
						PlaySound(11);
						menuMode = 0;
						netMode = 0;
					}
				}
				if (selectedMenu == 2)
				{
					PlaySound(11);
					menuMode = 0;
					netMode = 0;
				}
			}
			else if (menuMode == 201)
			{
				num4 = 3;
				array9[0] = Lang.menu[9].Value;
				array[0] = true;
				array[1] = true;
				num -= 30;
				array4[1] = -30;
				array4[2] = 50;
				array9[1] = Lang.menu[11].Value;
				array9[2] = Lang.menu[5].Value;
				if (selectedMenu == 2)
				{
					PlaySound(11);
					menuMode = 0;
					netMode = 0;
				}
			}
			else if (menuMode == 10)
			{
				num4 = 1;
				array9[0] = statusText;
				array[0] = true;
				num = 300;
			}
			else if (menuMode == 100)
			{
				num4 = 1;
				array9[0] = statusText;
				array[0] = true;
				num = 300;
			}
			else if (menuMode == 0)
			{
				eclipse = false;
				pumpkinMoon = false;
				snowMoon = false;
				ServerSideCharacter = false;
				menuMultiplayer = false;
				menuServer = false;
				netMode = 0;
				for (int n = 0; n < 9; n++)
				{
					string text = "";
					switch (n)
					{
					case 0:
						text = "Solar";
						break;
					case 1:
						text = "Vortex";
						break;
					case 2:
						text = "Nebula";
						break;
					case 3:
						text = "Stardust";
						break;
					case 4:
						text = "MoonLord";
						break;
					case 5:
						text = "MonolithSolar";
						break;
					case 6:
						text = "MonolithVortex";
						break;
					case 7:
						text = "MonolithNebula";
						break;
					case 8:
						text = "MonolithStardust";
						break;
					}
					if (SkyManager.Instance[text].IsActive())
					{
						SkyManager.Instance.Deactivate(text);
					}
					if (Filters.Scene[text].IsActive())
					{
						Filters.Scene[text].Deactivate();
					}
				}
				if (Filters.Scene["BloodMoon"].IsActive())
				{
					Filters.Scene["BloodMoon"].Deactivate();
				}
				if (SkyManager.Instance["Martian"].IsActive())
				{
					SkyManager.Instance["Martian"].Deactivate();
				}
				if (SkyManager.Instance["Slime"].IsActive())
				{
					SkyManager.Instance["Slime"].Deactivate();
				}
				int num10 = 0;
				num4 = 5;
				num3 = 60;
				array9[num10] = Lang.menu[12].Value;
				if (selectedMenu == num10)
				{
					PlaySound(10);
					menuMode = 1;
				}
				num10++;
				array9[num10] = Lang.menu[13].Value;
				if (selectedMenu == num10)
				{
					PlaySound(10);
					menuMode = 12;
				}
				num10++;
				array9[num10] = Lang.menu[131].Value;
				if (selectedMenu == num10)
				{
					PlaySound(10);
					MenuUI.SetState(AchievementsMenu);
					menuMode = 888;
				}
				num10++;
				array9[num10] = Lang.menu[14].Value;
				if (selectedMenu == num10)
				{
					PlaySound(10);
					menuMode = 11;
				}
				num10++;
				array9[num10] = Lang.menu[15].Value;
				if (selectedMenu == num10)
				{
					QuitGame();
				}
				num10++;
			}
			else if (menuMode == 1)
			{
				MenuUI.SetState(_characterSelectMenu);
				menuMode = 888;
			}
			else if (menuMode == 2)
			{
				flag4 = true;
				if (selectedMenu == 0)
				{
					menuMode = 17;
					PlaySound(10);
					selColor = PendingPlayer.hairColor;
				}
				if (selectedMenu == 1)
				{
					menuMode = 18;
					PlaySound(10);
					selColor = PendingPlayer.eyeColor;
				}
				if (selectedMenu == 2)
				{
					menuMode = 19;
					PlaySound(10);
					selColor = PendingPlayer.skinColor;
				}
				if (selectedMenu == 3)
				{
					menuMode = 20;
					PlaySound(10);
				}
				array9[0] = Lang.menu[18].Value;
				array9[1] = Lang.menu[19].Value;
				array9[2] = Lang.menu[20].Value;
				array9[3] = Lang.menu[21].Value;
				num = 220;
				for (int num11 = 0; num11 < 9; num11++)
				{
					if (num11 < 6)
					{
						array7[num11] = 0.75f;
					}
					else
					{
						array7[num11] = 0.9f;
					}
				}
				num3 = 38;
				array4[6] = 6;
				array4[7] = 12;
				array4[8] = 18;
				num6 = screenWidth / 2 - 16;
				num7 = 176;
				if (PendingPlayer.Male)
				{
					array9[4] = Lang.menu[22].Value;
				}
				else
				{
					array9[4] = Lang.menu[23].Value;
				}
				if (selectedMenu == 4)
				{
					if (PendingPlayer.Male)
					{
						PlaySound(20);
						PendingPlayer.Male = false;
					}
					else
					{
						PlaySound(1);
						PendingPlayer.Male = true;
					}
				}
				if (PendingPlayer.difficulty == 2)
				{
					array9[5] = Lang.menu[24].Value;
					array6[5] = PendingPlayer.difficulty;
				}
				else if (PendingPlayer.difficulty == 1)
				{
					array9[5] = Lang.menu[25].Value;
					array6[5] = PendingPlayer.difficulty;
				}
				else
				{
					array9[5] = Lang.menu[26].Value;
				}
				if (selectedMenu == 5)
				{
					PlaySound(10);
					menuMode = 222;
				}
				if (selectedMenu == 7)
				{
					PlaySound(12);
					PendingPlayer.hair = rand.Next(51);
					PendingPlayer.eyeColor = randColor();
					while (PendingPlayer.eyeColor.R + PendingPlayer.eyeColor.G + PendingPlayer.eyeColor.B > 300)
					{
						PendingPlayer.eyeColor = randColor();
					}
					PendingPlayer.hairColor = randColor();
					PendingPlayer.pantsColor = randColor();
					PendingPlayer.shirtColor = randColor();
					PendingPlayer.shoeColor = randColor();
					PendingPlayer.skinColor = randColor();
					float num12 = (float)rand.Next(60, 120) * 0.01f;
					if (num12 > 1f)
					{
						num12 = 1f;
					}
					PendingPlayer.skinColor.R = (byte)((float)rand.Next(240, 255) * num12);
					PendingPlayer.skinColor.G = (byte)((float)rand.Next(110, 140) * num12);
					PendingPlayer.skinColor.B = (byte)((float)rand.Next(75, 110) * num12);
					PendingPlayer.underShirtColor = randColor();
					int num13 = PendingPlayer.hair + 1;
					if (num13 == 5 || num13 == 6 || num13 == 7 || num13 == 10 || num13 == 12 || num13 == 19 || num13 == 22 || num13 == 23 || num13 == 26 || num13 == 27 || num13 == 30 || num13 == 33)
					{
						PendingPlayer.Male = false;
					}
					else
					{
						PendingPlayer.Male = true;
					}
					PendingPlayer.skinVariant = rand.Next(8);
				}
				array9[7] = Lang.menu[27].Value;
				array9[6] = Lang.menu[28].Value;
				array9[8] = Lang.menu[5].Value;
				num4 = 9;
				if (selectedMenu == 8)
				{
					PlaySound(11);
					menuMode = 1;
				}
				else if (selectedMenu == 6)
				{
					PlaySound(10);
					PendingPlayer.name = "";
					menuMode = 3;
					clrInput();
				}
			}
			else if (menuMode == 222)
			{
				if (focusMenu == 3)
				{
					array9[0] = Lang.menu[29].Value;
				}
				else if (focusMenu == 2)
				{
					array9[0] = Lang.menu[30].Value;
				}
				else if (focusMenu == 1)
				{
					array9[0] = Lang.menu[31].Value;
				}
				else
				{
					array9[0] = Lang.menu[32].Value;
				}
				num3 = 50;
				array4[1] = 25;
				array4[2] = 25;
				array4[3] = 25;
				array[0] = true;
				array9[1] = Lang.menu[26].Value;
				array9[2] = Lang.menu[25].Value;
				array6[2] = 1;
				array9[3] = Lang.menu[24].Value;
				array6[3] = 2;
				num4 = 4;
				if (selectedMenu == 1)
				{
					PendingPlayer.difficulty = 0;
					menuMode = 2;
				}
				else if (selectedMenu == 2)
				{
					menuMode = 2;
					PendingPlayer.difficulty = 1;
				}
				else if (selectedMenu == 3)
				{
					PendingPlayer.difficulty = 2;
					menuMode = 2;
				}
			}
			else if (menuMode == 20)
			{
				flag4 = true;
				if (selectedMenu == 0)
				{
					menuMode = 21;
					PlaySound(10);
					selColor = PendingPlayer.shirtColor;
				}
				if (selectedMenu == 1)
				{
					menuMode = 22;
					PlaySound(10);
					selColor = PendingPlayer.underShirtColor;
				}
				if (selectedMenu == 2)
				{
					menuMode = 23;
					PlaySound(10);
					selColor = PendingPlayer.pantsColor;
				}
				if (selectedMenu == 3)
				{
					selColor = PendingPlayer.shoeColor;
					menuMode = 24;
					PlaySound(10);
				}
				if (selectedMenu == 5)
				{
					PlaySound(11);
					menuMode = 2;
				}
				if (selectedMenu == 4)
				{
					PlaySound(12);
					if (PendingPlayer.skinVariant < 4)
					{
						PendingPlayer.skinVariant++;
						if (PendingPlayer.skinVariant == 4)
						{
							PendingPlayer.skinVariant = 0;
						}
					}
					else
					{
						PendingPlayer.skinVariant++;
						if (PendingPlayer.skinVariant == 8)
						{
							PendingPlayer.skinVariant = 4;
						}
					}
				}
				num6 = screenWidth / 2 - 16;
				num7 = 210;
				num = 260;
				num3 = 50;
				num4 = 6;
				array9[0] = Lang.menu[33].Value;
				array9[1] = Lang.menu[34].Value;
				array9[2] = Lang.menu[35].Value;
				array9[3] = Lang.menu[36].Value;
				array9[4] = Lang.menu[127].Value;
				array9[5] = Lang.menu[5].Value;
				array4[5] = 20;
			}
			else if (menuMode == 17)
			{
				flag4 = true;
				num6 = screenWidth / 2 - 16;
				num7 = 210;
				flag = true;
				num8 = 390;
				num = 260;
				num3 = 60;
				PendingPlayer.hairColor = selColor;
				num4 = 3;
				array9[0] = string.Concat(Lang.menu[37], " ", PendingPlayer.hair + 1);
				array9[1] = Lang.menu[38].Value;
				array[1] = true;
				array4[2] = 150;
				array4[1] = 10;
				array9[2] = Lang.menu[5].Value;
				int num14 = 51;
				if (selectedMenu == 0)
				{
					PlaySound(12);
					PendingPlayer.hair++;
					if (PendingPlayer.hair >= num14)
					{
						PendingPlayer.hair = 0;
					}
				}
				else if (selectedMenu2 == 0)
				{
					PlaySound(12);
					PendingPlayer.hair--;
					if (PendingPlayer.hair < 0)
					{
						PendingPlayer.hair = num14 - 1;
					}
				}
				if (selectedMenu == 2)
				{
					menuMode = 2;
					PlaySound(11);
				}
			}
			else if (menuMode == 18)
			{
				flag4 = true;
				num6 = screenWidth / 2 - 16;
				num7 = 210;
				flag = true;
				num8 = 370;
				num = 240;
				num3 = 60;
				PendingPlayer.eyeColor = selColor;
				num4 = 3;
				array9[0] = "";
				array9[1] = Lang.menu[39].Value;
				array[1] = true;
				array4[2] = 170;
				array4[1] = 10;
				array9[2] = Lang.menu[5].Value;
				if (selectedMenu == 2)
				{
					menuMode = 2;
					PlaySound(11);
				}
			}
			else if (menuMode == 19)
			{
				flag4 = true;
				num6 = screenWidth / 2 - 16;
				num7 = 210;
				flag = true;
				num8 = 370;
				num = 240;
				num3 = 60;
				PendingPlayer.skinColor = selColor;
				num4 = 3;
				array9[0] = "";
				array9[1] = Lang.menu[40].Value;
				array[1] = true;
				array4[2] = 170;
				array4[1] = 10;
				array9[2] = Lang.menu[5].Value;
				if (selectedMenu == 2)
				{
					menuMode = 2;
					PlaySound(11);
				}
			}
			else if (menuMode == 21)
			{
				flag4 = true;
				num6 = screenWidth / 2 - 16;
				num7 = 210;
				flag = true;
				num8 = 370;
				num = 240;
				num3 = 60;
				PendingPlayer.shirtColor = selColor;
				num4 = 3;
				array9[0] = "";
				array9[1] = Lang.menu[41].Value;
				array[1] = true;
				array4[2] = 170;
				array4[1] = 10;
				array9[2] = Lang.menu[5].Value;
				if (selectedMenu == 2)
				{
					menuMode = 20;
					PlaySound(11);
				}
			}
			else if (menuMode == 22)
			{
				flag4 = true;
				num6 = screenWidth / 2 - 16;
				num7 = 210;
				flag = true;
				num8 = 370;
				num = 240;
				num3 = 60;
				PendingPlayer.underShirtColor = selColor;
				num4 = 3;
				array9[0] = "";
				array9[1] = Lang.menu[42].Value;
				array[1] = true;
				array4[2] = 170;
				array4[1] = 10;
				array9[2] = Lang.menu[5].Value;
				if (selectedMenu == 2)
				{
					menuMode = 20;
					PlaySound(11);
				}
			}
			else if (menuMode == 23)
			{
				flag4 = true;
				num6 = screenWidth / 2 - 16;
				num7 = 210;
				flag = true;
				num8 = 370;
				num = 240;
				num3 = 60;
				PendingPlayer.pantsColor = selColor;
				num4 = 3;
				array9[0] = "";
				array9[1] = Lang.menu[43].Value;
				array[1] = true;
				array4[2] = 170;
				array4[1] = 10;
				array9[2] = Lang.menu[5].Value;
				if (selectedMenu == 2)
				{
					menuMode = 20;
					PlaySound(11);
				}
			}
			else if (menuMode == 24)
			{
				flag4 = true;
				num6 = screenWidth / 2 - 16;
				num7 = 210;
				flag = true;
				num8 = 370;
				num = 240;
				num3 = 60;
				PendingPlayer.shoeColor = selColor;
				num4 = 3;
				array9[0] = "";
				array9[1] = Lang.menu[44].Value;
				array[1] = true;
				array4[2] = 170;
				array4[1] = 10;
				array9[2] = Lang.menu[5].Value;
				if (selectedMenu == 2)
				{
					menuMode = 20;
					PlaySound(11);
				}
			}
			else if (menuMode == 3)
			{
				string name = PendingPlayer.name;
				PendingPlayer.name = GetInputText(PendingPlayer.name);
				if (PendingPlayer.name.Length > Player.nameLen)
				{
					PendingPlayer.name = PendingPlayer.name.Substring(0, Player.nameLen);
				}
				if (name != PendingPlayer.name)
				{
					PlaySound(12);
				}
				array9[0] = Lang.menu[45].Value;
				array2[2] = true;
				if (PendingPlayer.name != "")
				{
					if (PendingPlayer.name.Substring(0, 1) == " ")
					{
						PendingPlayer.name = "";
					}
					for (int num15 = 0; num15 < PendingPlayer.name.Length; num15++)
					{
						if (PendingPlayer.name.Substring(num15, 1) != " ")
						{
							array2[2] = false;
						}
					}
				}
				textBlinkerCount++;
				if (textBlinkerCount >= 20)
				{
					if (textBlinkerState == 0)
					{
						textBlinkerState = 1;
					}
					else
					{
						textBlinkerState = 0;
					}
					textBlinkerCount = 0;
				}
				array9[1] = PendingPlayer.name;
				if (textBlinkerState == 1)
				{
					string[] array10;
					(array10 = array9)[1] = array10[1] + "|";
					array5[1] = 1;
				}
				else
				{
					string[] array10;
					(array10 = array9)[1] = array10[1] + " ";
				}
				array[0] = true;
				array[1] = true;
				array4[1] = -20;
				array4[2] = 20;
				array9[2] = Lang.menu[4].Value;
				array9[3] = Lang.menu[5].Value;
				num4 = 4;
				if (selectedMenu == 3)
				{
					PlaySound(11);
					menuMode = 2;
				}
				if (selectedMenu == 2 || (!array2[2] && inputTextEnter))
				{
					PendingPlayer.name.Trim();
					PlayerFileData.CreateAndSave(PendingPlayer);
					LoadPlayers();
					PlaySound(10);
					menuMode = 1;
				}
			}
			else if (menuMode != 4)
			{
				if (menuMode == 5)
				{
					array9[0] = string.Concat(Lang.menu[46], " ", PlayerList[selectedPlayer].Player.name, "?");
					array[0] = true;
					array9[1] = Lang.menu[104].Value;
					array9[2] = Lang.menu[105].Value;
					num4 = 3;
					if (selectedMenu == 1)
					{
						ErasePlayer(selectedPlayer);
						PlaySound(10);
						menuMode = 1;
					}
					else if (selectedMenu == 2)
					{
						PlaySound(11);
						menuMode = 1;
					}
				}
				else if (menuMode == 6)
				{
					MenuUI.SetState(_worldSelectMenu);
					menuMode = 888;
				}
				else if (menuMode == -7)
				{
					num = 200;
					num3 = 60;
					array4[2] = 30;
					array4[3] = 30;
					array6[3] = 2;
					array4[4] = 70;
					if (focusMenu == 2)
					{
						array9[0] = "Your Journey Begins...";
						array9[1] = "(The standard Terraria Experience)";
					}
					else if (focusMenu == 3)
					{
						array9[0] = "Fortune & Glory, Kid.";
						array9[1] = "(Far Greater Difficulty & Loot)";
					}
					else
					{
						array9[0] = Lang.menu[32].Value;
					}
					array[0] = true;
					array[1] = true;
					array9[2] = "Normal";
					array9[3] = "Expert";
					array9[4] = "Back";
					num4 = 5;
					if (selectedMenu == 2)
					{
						expertMode = false;
						PlaySound(10);
						menuMode = 7;
					}
					else if (selectedMenu == 3)
					{
						expertMode = true;
						PlaySound(10);
						menuMode = 7;
					}
					else if (selectedMenu == 4)
					{
						PlaySound(11);
						menuMode = 16;
					}
					clrInput();
				}
				else if (menuMode == 7)
				{
					string a = newWorldName;
					newWorldName = GetInputText(newWorldName);
					if (newWorldName.Length > 20)
					{
						newWorldName = newWorldName.Substring(0, 20);
					}
					if (a != newWorldName)
					{
						PlaySound(12);
					}
					array9[0] = Lang.menu[48].Value;
					array2[2] = true;
					if (newWorldName != "")
					{
						if (newWorldName.Substring(0, 1) == " ")
						{
							newWorldName = "";
						}
						for (int num16 = 0; num16 < newWorldName.Length; num16++)
						{
							if (newWorldName != " ")
							{
								array2[2] = false;
							}
						}
					}
					textBlinkerCount++;
					if (textBlinkerCount >= 20)
					{
						if (textBlinkerState == 0)
						{
							textBlinkerState = 1;
						}
						else
						{
							textBlinkerState = 0;
						}
						textBlinkerCount = 0;
					}
					array9[1] = newWorldName;
					if (textBlinkerState == 1)
					{
						string[] array10;
						(array10 = array9)[1] = array10[1] + "|";
						array5[1] = 1;
					}
					else
					{
						string[] array10;
						(array10 = array9)[1] = array10[1] + " ";
					}
					array[0] = true;
					array[1] = true;
					array4[1] = -20;
					array4[2] = 20;
					array9[2] = Lang.menu[4].Value;
					array9[3] = Lang.menu[5].Value;
					num4 = 4;
					if (selectedMenu == 3)
					{
						PlaySound(11);
						menuMode = -7;
					}
					if (selectedMenu == 2 || (!array2[2] && inputTextEnter))
					{
						menuMode = 10;
						worldName = newWorldName;
						ActiveWorldFileData = WorldFile.CreateMetadata(worldName, SocialAPI.Cloud != null && SocialAPI.Cloud.EnabledByDefault, expertMode);
						WorldGen.CreateNewWorld();
					}
				}
				else if (menuMode == 8)
				{
					num = 180;
					num3 = 40;
					num4 = 8;
					array4[7] += 30;
					for (int num17 = 0; num17 < num4; num17++)
					{
						array7[num17] = 0.8f;
					}
					array9[7] = Lang.menu[5].Value;
					for (int num18 = 0; num18 < 7; num18++)
					{
						if (num18 < WorldList.Count)
						{
							array9[num18] = WorldList[num18 + menuSkip].Name;
							if (WorldList[num18 + menuSkip].IsExpertMode)
							{
								array6[num18] = 2;
							}
						}
						else
						{
							array9[num18] = null;
						}
					}
					if (WorldList.Count > 7 + menuSkip)
					{
						array9[6] = "more";
						array9[6] = "▼";
						array7[6] = 0.6f;
						array4[6] += 8;
						menuWide[6] = true;
					}
					if (menuSkip > 0)
					{
						array9[0] = "▲";
						array7[0] = 0.6f;
						array4[0] += 8;
						menuWide[0] = true;
					}
					if (selectedMenu == 0 && menuSkip > 0)
					{
						PlaySound(12);
						menuSkip -= 5;
						if (menuSkip < 0)
						{
							menuSkip = 0;
						}
					}
					else if (selectedMenu == 6 && menuSkip < WorldList.Count - 7)
					{
						PlaySound(12);
						menuSkip += 5;
						if (menuSkip >= PlayerList.Count - 7)
						{
							menuSkip = WorldList.Count - 7;
						}
					}
					else if (selectedMenu == 7)
					{
						PlaySound(11);
						menuMode = 6;
					}
					else if (selectedMenu >= 0)
					{
						selectedWorld = selectedMenu + menuSkip;
						PlaySound(10);
						menuMode = 9;
					}
				}
				else if (menuMode == 9)
				{
					array9[0] = string.Concat(Lang.menu[46], " ", WorldList[selectedWorld].Name, "?");
					array[0] = true;
					array9[1] = Lang.menu[104].Value;
					array9[2] = Lang.menu[105].Value;
					num4 = 3;
					if (selectedMenu == 1)
					{
						EraseWorld(selectedWorld);
						PlaySound(10);
						menuMode = 6;
					}
					else if (selectedMenu == 2)
					{
						PlaySound(11);
						menuMode = 6;
					}
				}
				else if (menuMode == 1111)
				{
					num = 210;
					num3 = 40;
					for (int num19 = 0; num19 < 8; num19++)
					{
						array7[num19] = 0.8f;
					}
					array4[8] = 10;
					num4 = 9;
					if (graphics.IsFullScreen)
					{
						array9[0] = Lang.menu[49].Value;
					}
					else
					{
						array9[0] = Lang.menu[50].Value;
					}
					bgScroll = (int)Math.Round((1f - caveParallax) * 500f);
					array9[1] = Lang.menu[51].Value;
					array9[2] = Lang.menu[52].Value;
					if (terrariasFixedTiming)
					{
						array9[3] = Lang.menu[53].Value;
					}
					else
					{
						array9[3] = Lang.menu[54].Value;
					}
					if (Lighting.lightMode == 0)
					{
						array9[4] = Lang.menu[55].Value;
					}
					else if (Lighting.lightMode == 1)
					{
						array9[4] = Lang.menu[56].Value;
					}
					else if (Lighting.lightMode == 2)
					{
						array9[4] = Lang.menu[57].Value;
					}
					else if (Lighting.lightMode == 3)
					{
						array9[4] = Lang.menu[58].Value;
					}
					if (Lighting.LightingThreads == 0)
					{
						array9[5] = string.Concat(Lang.menu[116], " ", Lang.menu[117]);
					}
					else
					{
						array9[5] = string.Concat(Lang.menu[116], " ", Lighting.LightingThreads + 1);
					}
					if (qaStyle == 0)
					{
						array9[6] = Lang.menu[59].Value;
					}
					else if (qaStyle == 1)
					{
						array9[6] = Lang.menu[60].Value;
					}
					else if (qaStyle == 2)
					{
						array9[6] = Lang.menu[61].Value;
					}
					else
					{
						array9[6] = Lang.menu[62].Value;
					}
					if (owBack)
					{
						array9[7] = Lang.menu[100].Value;
					}
					else
					{
						array9[7] = Lang.menu[101].Value;
					}
					if (selectedMenu == 7)
					{
						PlaySound(12);
						if (owBack)
						{
							owBack = false;
						}
						else
						{
							owBack = true;
						}
					}
					array9[8] = Lang.menu[5].Value;
					if (selectedMenu == 8)
					{
						PlaySound(11);
						SaveSettings();
						menuMode = 11;
					}
					if (selectedMenu == 6)
					{
						PlaySound(12);
						qaStyle++;
						if (qaStyle > 3)
						{
							qaStyle = 0;
						}
					}
					if (selectedMenu == 5)
					{
						PlaySound(12);
						Lighting.LightingThreads++;
						if (Lighting.LightingThreads > Environment.ProcessorCount - 1)
						{
							Lighting.LightingThreads = 0;
						}
					}
					if (selectedMenu == 4)
					{
						PlaySound(12);
						Lighting.lightMode++;
						if (Lighting.lightMode >= 4)
						{
							Lighting.lightMode = 0;
						}
					}
					if (selectedMenu == 3)
					{
						PlaySound(12);
						if (terrariasFixedTiming)
						{
							terrariasFixedTiming = false;
						}
						else
						{
							terrariasFixedTiming = true;
						}
					}
					if (selectedMenu == 2)
					{
						PlaySound(11);
						menuMode = 28;
					}
					if (selectedMenu == 1)
					{
						PlaySound(10);
						menuMode = 111;
					}
					if (selectedMenu == 0)
					{
						ToggleFullScreen();
					}
				}
				else if (menuMode == 11)
				{
					num = 240;
					num3 = 37;
					num4 = 8;
					array4[num4 - 1] = 8;
					for (int num20 = 0; num20 < num4; num20++)
					{
						array7[num20] = 0.73f;
					}
					int num21 = 0;
					array9[num21] = Lang.menu[114].Value;
					if (selectedMenu == num21)
					{
						PlaySound(10);
						menuMode = 112;
					}
					num21++;
					array9[num21] = Lang.menu[63].Value;
					if (selectedMenu == num21)
					{
						PlaySound(10);
						menuMode = 1111;
					}
					num21++;
					array9[num21] = Lang.menu[64].Value;
					if (selectedMenu == num21)
					{
						PlaySound(10);
						selColor = mouseColor;
						menuMode = 25;
					}
					num21++;
					array9[num21] = Lang.menu[65].Value;
					if (selectedMenu == num21)
					{
						PlaySound(11);
						menuMode = 26;
					}
					num21++;
					array9[num21] = Lang.menu[66].Value;
					if (selectedMenu == num21)
					{
						PlaySound(11);
						menuMode = 27;
					}
					num21++;
					array9[num21] = Lang.menu[115].Value;
					if (selectedMenu == num21)
					{
						PlaySound(11);
						menuMode = 272727;
					}
					num21++;
					array9[num21] = Lang.menu[103].Value;
					if (selectedMenu == num21)
					{
						PlaySound(10);
						menuMode = 1213;
					}
					num21++;
					array9[num21] = Lang.menu[5].Value;
					if (selectedMenu == num21)
					{
						PlaySound(11);
						menuMode = 0;
						SaveSettings();
					}
				}
				else if (menuMode == 112)
				{
					num = 220;
					num3 = 34;
					num4 = 10;
					array4[num4 - 1] = 18;
					for (int num22 = 0; num22 < num4; num22++)
					{
						array7[num22] = 0.73f;
					}
					int num23 = 0;
					if (autoSave)
					{
						array9[num23] = Lang.menu[67].Value;
					}
					else
					{
						array9[num23] = Lang.menu[68].Value;
					}
					if (selectedMenu == num23)
					{
						PlaySound(12);
						if (autoSave)
						{
							autoSave = false;
						}
						else
						{
							autoSave = true;
						}
					}
					num23++;
					if (autoPause)
					{
						array9[num23] = Lang.menu[69].Value;
					}
					else
					{
						array9[num23] = Lang.menu[70].Value;
					}
					if (selectedMenu == num23)
					{
						PlaySound(12);
						if (autoPause)
						{
							autoPause = false;
						}
						else
						{
							autoPause = true;
						}
					}
					num23++;
					if (showItemText)
					{
						array9[num23] = Lang.menu[71].Value;
					}
					else
					{
						array9[num23] = Lang.menu[72].Value;
					}
					if (selectedMenu == num23)
					{
						PlaySound(12);
						if (showItemText)
						{
							showItemText = false;
						}
						else
						{
							showItemText = true;
						}
					}
					num23++;
					if (mapEnabled)
					{
						array9[num23] = Lang.menu[112].Value;
					}
					else
					{
						array9[num23] = Lang.menu[113].Value;
					}
					if (selectedMenu == num23)
					{
						PlaySound(12);
						if (mapEnabled)
						{
							mapEnabled = false;
						}
						else
						{
							mapEnabled = true;
						}
					}
					num23++;
					array9[num23] = (cSmartToggle ? Lang.menu[121].Value : Lang.menu[122].Value);
					if (selectedMenu == num23)
					{
						PlaySound(12);
						cSmartToggle = !cSmartToggle;
					}
					num23++;
					array9[num23] = string.Concat(Lang.menu[123], " ", Lang.menu[124 + invasionProgressMode]);
					if (selectedMenu == num23)
					{
						PlaySound(12);
						invasionProgressMode++;
						if (invasionProgressMode >= 3)
						{
							invasionProgressMode = 0;
						}
					}
					num23++;
					array9[num23] = (placementPreview ? Lang.menu[128].Value : Lang.menu[129].Value);
					if (selectedMenu == num23)
					{
						PlaySound(12);
						placementPreview = !placementPreview;
					}
					num23++;
					array9[num23] = (ChildSafety.Disabled ? Lang.menu[132].Value : Lang.menu[133].Value);
					if (selectedMenu == num23)
					{
						PlaySound(12);
						ChildSafety.Disabled = !ChildSafety.Disabled;
					}
					num23++;
					array9[num23] = (ItemSlot.Options.HighlightNewItems ? Lang.inter[117].Value : Lang.inter[116].Value);
					if (selectedMenu == num23)
					{
						PlaySound(12);
						ItemSlot.Options.HighlightNewItems = !ItemSlot.Options.HighlightNewItems;
					}
					num23++;
					array9[num23] = Lang.menu[5].Value;
					if (selectedMenu == num23)
					{
						menuMode = 11;
						PlaySound(11);
					}
				}
				else if (menuMode == 111)
				{
					num = 240;
					num3 = 60;
					num4 = 4;
					array9[0] = Lang.menu[73].Value;
					array9[1] = PendingResolutionWidth + "x" + PendingResolutionHeight;
					array9[2] = Lang.menu[134].Value;
					array9[3] = Lang.menu[5].Value;
					array[0] = true;
					array4[1] = 10;
					array4[2] = 140;
					array4[3] = 140;
					if (selectedMenu == 1)
					{
						PlaySound(12);
						int num24 = 0;
						for (int num25 = 0; num25 < numDisplayModes; num25++)
						{
							if (displayWidth[num25] == PendingResolutionWidth && displayHeight[num25] == PendingResolutionHeight)
							{
								num24 = num25;
								break;
							}
						}
						num24 = (num24 + 1) % numDisplayModes;
						PendingResolutionWidth = displayWidth[num24];
						PendingResolutionHeight = displayHeight[num24];
					}
					if (selectedMenu == 2)
					{
						if (graphics.IsFullScreen)
						{
							SetResolution(PendingResolutionWidth, PendingResolutionHeight);
						}
						PlaySound(11);
						menuMode = 1111;
					}
					if (selectedMenu == 3)
					{
						PendingResolutionWidth = graphics.PreferredBackBufferWidth;
						PendingResolutionHeight = graphics.PreferredBackBufferHeight;
						menuMode = 1111;
						PlaySound(11);
					}
				}
				else if (menuMode == 25)
				{
					flag = true;
					num8 = 370;
					num = 240;
					num3 = 60;
					mouseColor = selColor;
					num4 = 3;
					array9[0] = "";
					array9[1] = Lang.menu[64].Value;
					array[1] = true;
					array4[2] = 170;
					array4[1] = 10;
					array9[2] = Lang.menu[5].Value;
					if (selectedMenu == 2)
					{
						menuMode = 11;
						PlaySound(11);
					}
				}
				else if (menuMode == 26)
				{
					flag2 = true;
					num = 240;
					num3 = 60;
					num4 = 3;
					array9[0] = "";
					array9[1] = Lang.menu[65].Value;
					array[1] = true;
					array4[2] = 170;
					array4[1] = 10;
					array9[2] = Lang.menu[5].Value;
					if (selectedMenu == 2)
					{
						menuMode = 11;
						PlaySound(11);
					}
				}
				else if (menuMode == 28)
				{
					caveParallax = 1f - (float)bgScroll / 500f;
					flag3 = true;
					num = 240;
					num3 = 60;
					num4 = 3;
					array9[0] = "";
					array9[1] = Lang.menu[52].Value;
					array[1] = true;
					array4[2] = 170;
					array4[1] = 10;
					array9[2] = Lang.menu[5].Value;
					if (selectedMenu == 2)
					{
						menuMode = 1111;
						PlaySound(11);
					}
				}
				else if (menuMode == 272727)
				{
					num = 200;
					num3 = 30;
					num4 = 14;
					string[] array12 = new string[12]
					{
						cMapStyle,
						cMapFull,
						cMapZoomIn,
						cMapZoomOut,
						cMapAlphaUp,
						cMapAlphaDown,
						null,
						null,
						null,
						null,
						null,
						null
					};
					if (setKey >= 0)
					{
						array12[setKey] = "_";
					}
					array9[0] = string.Concat(Lang.menu[106], array12[0]);
					array9[1] = string.Concat(Lang.menu[107], array12[1]);
					array9[2] = string.Concat(Lang.menu[108], array12[2]);
					array9[3] = string.Concat(Lang.menu[109], array12[3]);
					array9[4] = string.Concat(Lang.menu[110], array12[4]);
					array9[5] = string.Concat(Lang.menu[111], array12[5]);
					for (int num26 = 0; num26 < 6; num26++)
					{
						array8[num26] = true;
						array7[num26] = 0.55f;
						array5[num26] = -140;
					}
					array7[6] = 0.8f;
					array7[6] = 0.8f;
					array4[6] = 6;
					array9[6] = Lang.menu[86].Value;
					array4[7] = 16;
					array9[7] = Lang.menu[5].Value;
					if (selectedMenu == 7)
					{
						menuMode = 11;
						PlaySound(11);
					}
					else if (selectedMenu == 6)
					{
						cMapStyle = "Tab";
						cMapFull = "M";
						cMapZoomIn = "Add";
						cMapZoomOut = "Subtract";
						cMapAlphaUp = "PageUp";
						cMapAlphaDown = "PageDown";
						setKey = -1;
						PlaySound(11);
					}
					else if (selectedMenu >= 0)
					{
						setKey = selectedMenu;
					}
					if (setKey >= 0)
					{
						Microsoft.Xna.Framework.Input.Keys[] pressedKeys = keyState.GetPressedKeys();
						if (pressedKeys.Length > 0)
						{
							string a2 = string.Concat(pressedKeys[0]);
							if (a2 != "None")
							{
								if (setKey == 0)
								{
									cMapStyle = a2;
								}
								if (setKey == 1)
								{
									cMapFull = a2;
								}
								if (setKey == 2)
								{
									cMapZoomIn = a2;
								}
								if (setKey == 3)
								{
									cMapZoomOut = a2;
								}
								if (setKey == 4)
								{
									cMapAlphaUp = a2;
								}
								if (setKey == 5)
								{
									cMapAlphaDown = a2;
								}
								setKey = -1;
							}
						}
					}
				}
				else if (menuMode == 27)
				{
					num = 176;
					num3 = 22;
					num4 = 16;
					string[] array13 = new string[14]
					{
						cUp,
						cDown,
						cLeft,
						cRight,
						cJump,
						cThrowItem,
						cInv,
						cHeal,
						cMana,
						cBuff,
						cHook,
						cTorch,
						cSmart,
						cMount
					};
					if (setKey >= 0)
					{
						array13[setKey] = "_";
					}
					array9[0] = string.Concat(Lang.menu[74], array13[0]);
					array9[1] = string.Concat(Lang.menu[75], array13[1]);
					array9[2] = string.Concat(Lang.menu[76], array13[2]);
					array9[3] = string.Concat(Lang.menu[77], array13[3]);
					array9[4] = string.Concat(Lang.menu[78], array13[4]);
					array9[5] = string.Concat(Lang.menu[79], array13[5]);
					array9[6] = string.Concat(Lang.menu[80], array13[6]);
					array9[7] = string.Concat(Lang.menu[81], array13[7]);
					array9[8] = string.Concat(Lang.menu[82], array13[8]);
					array9[9] = string.Concat(Lang.menu[83], array13[9]);
					array9[10] = string.Concat(Lang.menu[84], array13[10]);
					array9[11] = string.Concat(Lang.menu[85], array13[11]);
					array9[12] = string.Concat(Lang.menu[120], array13[12]);
					array9[13] = string.Concat(Lang.menu[130], array13[13]);
					for (int num27 = 0; num27 < 14; num27++)
					{
						array8[num27] = true;
						array7[num27] = 0.45f;
						array5[num27] = -80;
					}
					array7[14] = 0.8f;
					array4[14] = 6;
					array9[14] = Lang.menu[86].Value;
					array7[15] = 0.8f;
					array4[15] = 16;
					array9[15] = Lang.menu[5].Value;
					if (selectedMenu == 15)
					{
						menuMode = 11;
						PlaySound(11);
					}
					else if (selectedMenu == 14)
					{
						ResetKeyBindings();
						setKey = -1;
						PlaySound(11);
					}
					else if (selectedMenu >= 0)
					{
						setKey = selectedMenu;
					}
					if (setKey >= 0)
					{
						Microsoft.Xna.Framework.Input.Keys[] pressedKeys2 = keyState.GetPressedKeys();
						if (pressedKeys2.Length > 0)
						{
							string a3 = string.Concat(pressedKeys2[0]);
							if (a3 != "None")
							{
								if (setKey == 0)
								{
									cUp = a3;
								}
								if (setKey == 1)
								{
									cDown = a3;
								}
								if (setKey == 2)
								{
									cLeft = a3;
								}
								if (setKey == 3)
								{
									cRight = a3;
								}
								if (setKey == 4)
								{
									cJump = a3;
								}
								if (setKey == 5)
								{
									cThrowItem = a3;
								}
								if (setKey == 6)
								{
									cInv = a3;
								}
								if (setKey == 7)
								{
									cHeal = a3;
								}
								if (setKey == 8)
								{
									cMana = a3;
								}
								if (setKey == 9)
								{
									cBuff = a3;
								}
								if (setKey == 10)
								{
									cHook = a3;
								}
								if (setKey == 11)
								{
									cTorch = a3;
								}
								if (setKey == 12)
								{
									cSmart = a3;
								}
								if (setKey == 13)
								{
									cMount = a3;
								}
								setKey = -1;
							}
						}
					}
				}
				else if (menuMode == 12)
				{
					int num28 = (SocialAPI.Network != null) ? 1 : 0;
					menuServer = false;
					array9[0] = Lang.menu[(SocialAPI.Network != null) ? 146 : 87].Value;
					array9[1] = Lang.menu[145].Value;
					array9[1 + num28] = Lang.menu[88].Value;
					array9[2 + num28] = Lang.menu[5].Value;
					if (selectedMenu == 0)
					{
						LoadPlayers();
						menuMultiplayer = true;
						PlaySound(10);
						menuMode = 1;
					}
					else if (selectedMenu == 1 + num28)
					{
						LoadPlayers();
						PlaySound(10);
						menuMode = 1;
						menuMultiplayer = true;
						menuServer = true;
					}
					else if (selectedMenu == 1)
					{
						PlaySound(10);
						SocialAPI.Friends.OpenJoinInterface();
					}
					else if (selectedMenu == 2 + num28)
					{
						PlaySound(11);
						menuMode = 0;
					}
					num4 = 3 + num28;
				}
				else if (menuMode == 13)
				{
					string a4 = getIP;
					getIP = GetInputText(getIP);
					if (a4 != getIP)
					{
						PlaySound(12);
					}
					array9[0] = Lang.menu[89].Value;
					array2[9] = true;
					if (getIP != "")
					{
						if (getIP.Substring(0, 1) == " ")
						{
							getIP = "";
						}
						for (int num29 = 0; num29 < getIP.Length; num29++)
						{
							if (getIP != " ")
							{
								array2[9] = false;
							}
						}
					}
					textBlinkerCount++;
					if (textBlinkerCount >= 20)
					{
						if (textBlinkerState == 0)
						{
							textBlinkerState = 1;
						}
						else
						{
							textBlinkerState = 0;
						}
						textBlinkerCount = 0;
					}
					array9[1] = getIP;
					if (textBlinkerState == 1)
					{
						string[] array10;
						(array10 = array9)[1] = array10[1] + "|";
						array5[1] = 1;
					}
					else
					{
						string[] array10;
						(array10 = array9)[1] = array10[1] + " ";
					}
					array[0] = true;
					array[1] = true;
					array4[9] = 44;
					array4[10] = 64;
					array9[9] = Lang.menu[4].Value;
					array9[10] = Lang.menu[5].Value;
					num4 = 11;
					num = 180;
					num3 = 30;
					array4[1] = 19;
					for (int num30 = 2; num30 < 9; num30++)
					{
						int num31 = num30 - 2;
						if (recentWorld[num31] != null && recentWorld[num31] != "")
						{
							array9[num30] = recentWorld[num31] + " (" + recentIP[num31] + ":" + recentPort[num31] + ")";
						}
						else
						{
							array9[num30] = "";
							array[num30] = true;
						}
						array7[num30] = 0.6f;
						array4[num30] = 40;
					}
					if (selectedMenu >= 2 && selectedMenu < 9)
					{
						autoPass = false;
						int num32 = selectedMenu - 2;
						Netplay.ListenPort = recentPort[num32];
						getIP = recentIP[num32];
						if (Netplay.SetRemoteIP(getIP))
						{
							menuMode = 10;
							Netplay.StartTcpClient();
						}
					}
					if (selectedMenu == 10)
					{
						PlaySound(11);
						menuMode = 1;
					}
					if (selectedMenu == 9 || (!array2[2] && inputTextEnter))
					{
						PlaySound(12);
						menuMode = 131;
						clrInput();
					}
				}
				else if (menuMode == 131)
				{
					int num33 = 7777;
					string a5 = getPort;
					getPort = GetInputText(getPort);
					if (a5 != getPort)
					{
						PlaySound(12);
					}
					array9[0] = Lang.menu[90].Value;
					array2[2] = true;
					if (getPort != "")
					{
						bool flag6 = false;
						try
						{
							num33 = Convert.ToInt32(getPort);
							if (num33 > 0 && num33 <= 65535)
							{
								flag6 = true;
							}
						}
						catch
						{
						}
						if (flag6)
						{
							array2[2] = false;
						}
					}
					textBlinkerCount++;
					if (textBlinkerCount >= 20)
					{
						if (textBlinkerState == 0)
						{
							textBlinkerState = 1;
						}
						else
						{
							textBlinkerState = 0;
						}
						textBlinkerCount = 0;
					}
					array9[1] = getPort;
					if (textBlinkerState == 1)
					{
						string[] array10;
						(array10 = array9)[1] = array10[1] + "|";
						array5[1] = 1;
					}
					else
					{
						string[] array10;
						(array10 = array9)[1] = array10[1] + " ";
					}
					array[0] = true;
					array[1] = true;
					array4[1] = -20;
					array4[2] = 20;
					array9[2] = Lang.menu[4].Value;
					array9[3] = Lang.menu[5].Value;
					num4 = 4;
					if (selectedMenu == 3)
					{
						PlaySound(11);
						menuMode = 1;
					}
					if (selectedMenu == 2 || (!array2[2] && inputTextEnter))
					{
						Netplay.ListenPort = num33;
						autoPass = false;
						if (Netplay.SetRemoteIP(getIP))
						{
							menuMode = 10;
							Netplay.StartTcpClient();
						}
					}
				}
				else if (menuMode == 16)
				{
					num = 200;
					num3 = 60;
					array4[1] = 30;
					array4[2] = 30;
					array4[3] = 30;
					array4[4] = 70;
					array9[0] = Lang.menu[91].Value;
					array[0] = true;
					array9[1] = Lang.menu[92].Value;
					array9[2] = Lang.menu[93].Value;
					array9[3] = Lang.menu[94].Value;
					array9[4] = Lang.menu[5].Value;
					num4 = 5;
					if (selectedMenu == 4)
					{
						menuMode = 6;
						PlaySound(11);
					}
					else if (selectedMenu > 0)
					{
						if (selectedMenu == 1)
						{
							maxTilesX = 4200;
							maxTilesY = 1200;
						}
						else if (selectedMenu == 2)
						{
							maxTilesX = 6400;
							maxTilesY = 1800;
						}
						else
						{
							maxTilesX = 8400;
							maxTilesY = 2400;
						}
						clrInput();
						menuMode = -7;
						PlaySound(10);
						WorldGen.setWorldSize();
					}
				}
			}
			if (menuMode == 888)
			{
				MenuUI.Draw(spriteBatch, gameTime);
			}
			if (menuMode != num5)
			{
				blockMouse = true;
				menuSkip = 0;
				num4 = 0;
				for (int num34 = 0; num34 < maxMenuItems; num34++)
				{
					menuItemScale[num34] = 0.8f;
				}
			}
			if (!mouseLeft)
			{
				blockMouse = true;
			}
			int num35 = focusMenu;
			selectedMenu = -1;
			selectedMenu2 = -1;
			focusMenu = -1;
			for (int num36 = 0; num36 < num4; num36++)
			{
				if (array9[num36] == null)
				{
					continue;
				}
				if (!flag)
				{
					grabColorSlider = 0;
					hBar = -1f;
					sBar = -1f;
					lBar = -1f;
				}
				if (flag)
				{
					if (!mouseLeft)
					{
						grabColorSlider = 0;
						blockMouse = false;
					}
					int num37 = num8;
					int num38 = screenWidth / 2 - hueTexture.Width / 2;
					int num39 = 167;
					Vector3 vector = rgbToHsl(selColor);
					float num40 = vector.X;
					float num41 = vector.Y;
					float z = vector.Z;
					if (hBar == -1f || sBar == -1f || lBar == -1f)
					{
						hBar = num40;
						sBar = num41;
						lBar = z;
					}
					else
					{
						num40 = hBar;
						num41 = sBar;
						z = lBar;
					}
					spriteBatch.Draw(hueTexture, new Vector2(num38, num37), Microsoft.Xna.Framework.Color.White);
					spriteBatch.Draw(colorSliderTexture, new Vector2((float)num38 + (float)(hueTexture.Width - 2) * hBar - (float)(colorSliderTexture.Width / 2), num37 - colorSliderTexture.Height / 2 + hueTexture.Height / 2), Microsoft.Xna.Framework.Color.White);
					if (((mouseX > num38 - 4 && mouseX < num38 + hueTexture.Width + 4 && mouseY > num37 - 4 && mouseY < num37 + hueTexture.Height + 4) || grabColorSlider == 1) && mouseLeft && !blockMouse)
					{
						grabColorSlider = 1;
						num40 = mouseX - num38;
						num40 /= (float)hueTexture.Width;
						if (num40 < 0f)
						{
							num40 = 0f;
						}
						if (num40 > 1f)
						{
							num40 = 1f;
						}
						hBar = num40;
					}
					num37 += 26;
					spriteBatch.Draw(colorBarTexture, new Vector2(num38, num37), Microsoft.Xna.Framework.Color.White);
					for (int num42 = 0; num42 <= num39; num42++)
					{
						float saturation = (float)num42 / (float)num39;
						Microsoft.Xna.Framework.Color color4 = hslToRgb(num40, saturation, z);
						spriteBatch.Draw(colorBlipTexture, new Vector2(num38 + num42 + 5, num37 + 4), color4);
					}
					spriteBatch.Draw(colorSliderTexture, new Vector2((float)num38 + (float)(hueTexture.Width - 2) * sBar - (float)(colorSliderTexture.Width / 2), num37 - colorSliderTexture.Height / 2 + hueTexture.Height / 2), Microsoft.Xna.Framework.Color.White);
					if (((mouseX > num38 - 4 && mouseX < num38 + hueTexture.Width + 4 && mouseY > num37 - 4 && mouseY < num37 + hueTexture.Height + 4) || grabColorSlider == 2) && mouseLeft && !blockMouse)
					{
						grabColorSlider = 2;
						num41 = mouseX - num38;
						num41 /= (float)hueTexture.Width;
						if (num41 < 0f)
						{
							num41 = 0f;
						}
						if (num41 > 1f)
						{
							num41 = 1f;
						}
						sBar = num41;
					}
					num37 += 26;
					spriteBatch.Draw(colorBarTexture, new Vector2(num38, num37), Microsoft.Xna.Framework.Color.White);
					float num43 = 0.15f;
					for (int num44 = 0; num44 <= num39; num44++)
					{
						float luminosity = (float)num44 / (float)num39;
						Microsoft.Xna.Framework.Color color5 = hslToRgb(num40, num41, luminosity);
						spriteBatch.Draw(colorBlipTexture, new Vector2(num38 + num44 + 5, num37 + 4), color5);
					}
					spriteBatch.Draw(colorSliderTexture, new Vector2((float)num38 + (float)(hueTexture.Width - 2) * ((lBar - num43) / (1f - num43)) - (float)(colorSliderTexture.Width / 2), num37 - colorSliderTexture.Height / 2 + hueTexture.Height / 2), Microsoft.Xna.Framework.Color.White);
					if (((mouseX > num38 - 4 && mouseX < num38 + hueTexture.Width + 4 && mouseY > num37 - 4 && mouseY < num37 + hueTexture.Height + 4) || grabColorSlider == 3) && mouseLeft && !blockMouse)
					{
						grabColorSlider = 3;
						z = mouseX - num38;
						z /= (float)hueTexture.Width;
						if (z < 0f)
						{
							z = 0f;
						}
						if (z > 1f)
						{
							z = 1f;
						}
						z = (lBar = z * (1f - num43) + num43);
					}
					selColor = hslToRgb(hBar, sBar, lBar);
				}
				else if (flag)
				{
					string text2 = "";
					for (int num45 = 0; num45 < 6; num45++)
					{
						int num46 = num8;
						int num47 = 370 + screenWidth / 2 - 400;
						if (num45 == 0)
						{
							text2 = Lang.menu[95].Value;
						}
						if (num45 == 1)
						{
							text2 = Lang.menu[96].Value;
							num46 += 30;
						}
						if (num45 == 2)
						{
							text2 = Lang.menu[97].Value;
							num46 += 60;
						}
						if (num45 == 3)
						{
							text2 = string.Concat(selColor.R);
							num47 += 90;
						}
						if (num45 == 4)
						{
							text2 = string.Concat(selColor.G);
							num47 += 90;
							num46 += 30;
						}
						if (num45 == 5)
						{
							text2 = string.Concat(selColor.B);
							num47 += 90;
							num46 += 60;
						}
						for (int num48 = 0; num48 < 5; num48++)
						{
							Microsoft.Xna.Framework.Color color6 = Microsoft.Xna.Framework.Color.Black;
							if (num48 == 4)
							{
								color6 = color;
								color6.R = (byte)((255 + color6.R) / 2);
								color6.G = (byte)((255 + color6.R) / 2);
								color6.B = (byte)((255 + color6.R) / 2);
							}
							int num49 = 255;
							int num50 = color6.R - (255 - num49);
							if (num50 < 0)
							{
								num50 = 0;
							}
							color6 = new Microsoft.Xna.Framework.Color((byte)num50, (byte)num50, (byte)num50, (byte)num49);
							int num51 = 0;
							int num52 = 0;
							if (num48 == 0)
							{
								num51 = -2;
							}
							if (num48 == 1)
							{
								num51 = 2;
							}
							if (num48 == 2)
							{
								num52 = -2;
							}
							if (num48 == 3)
							{
								num52 = 2;
							}
							spriteBatch.DrawString(fontDeathText, text2, new Vector2(num47 + num51, num46 + num52), color6, 0f, default(Vector2), 0.5f, SpriteEffects.None, 0f);
						}
					}
					bool flag7 = false;
					for (int num53 = 0; num53 < 2; num53++)
					{
						for (int num54 = 0; num54 < 3; num54++)
						{
							int num55 = num8 + num54 * 30 - 12;
							int num56 = 360 + screenWidth / 2 - 400;
							float scale = 0.9f;
							if (num53 == 0)
							{
								num56 -= 70;
								num55 += 2;
							}
							else
							{
								num56 -= 40;
							}
							text2 = "-";
							if (num53 == 1)
							{
								text2 = "+";
							}
							Vector2 vector2 = new Vector2(24f, 24f);
							int num57 = 142;
							if (mouseX > num56 && (float)mouseX < (float)num56 + vector2.X && mouseY > num55 + 13 && (float)mouseY < (float)(num55 + 13) + vector2.Y)
							{
								if (focusColor != (num53 + 1) * (num54 + 10))
								{
									PlaySound(12);
								}
								focusColor = (num53 + 1) * (num54 + 10);
								flag7 = true;
								num57 = 255;
								if (mouseLeft)
								{
									if (colorDelay <= 1)
									{
										if (colorDelay == 0)
										{
											colorDelay = 40;
										}
										else
										{
											colorDelay = 3;
										}
										int num58 = num53;
										if (num53 == 0)
										{
											num58 = -1;
											if (selColor.R + selColor.G + selColor.B <= 150)
											{
												num58 = 0;
											}
										}
										if (num54 == 0 && selColor.R + num58 >= 0 && selColor.R + num58 <= 255)
										{
											selColor.R = (byte)(selColor.R + num58);
										}
										if (num54 == 1 && selColor.G + num58 >= 0 && selColor.G + num58 <= 255)
										{
											selColor.G = (byte)(selColor.G + num58);
										}
										if (num54 == 2 && selColor.B + num58 >= 0 && selColor.B + num58 <= 255)
										{
											selColor.B = (byte)(selColor.B + num58);
										}
									}
									colorDelay--;
								}
								else
								{
									colorDelay = 0;
								}
							}
							for (int num59 = 0; num59 < 5; num59++)
							{
								Microsoft.Xna.Framework.Color color7 = Microsoft.Xna.Framework.Color.Black;
								if (num59 == 4)
								{
									color7 = color;
									color7.R = (byte)((255 + color7.R) / 2);
									color7.G = (byte)((255 + color7.R) / 2);
									color7.B = (byte)((255 + color7.R) / 2);
								}
								int num60 = color7.R - (255 - num57);
								if (num60 < 0)
								{
									num60 = 0;
								}
								color7 = new Microsoft.Xna.Framework.Color((byte)num60, (byte)num60, (byte)num60, (byte)num57);
								int num61 = 0;
								int num62 = 0;
								if (num59 == 0)
								{
									num61 = -2;
								}
								if (num59 == 1)
								{
									num61 = 2;
								}
								if (num59 == 2)
								{
									num62 = -2;
								}
								if (num59 == 3)
								{
									num62 = 2;
								}
								spriteBatch.DrawString(fontDeathText, text2, new Vector2(num56 + num61, num55 + num62), color7, 0f, default(Vector2), scale, SpriteEffects.None, 0f);
							}
						}
					}
					if (!flag7)
					{
						focusColor = 0;
						colorDelay = 0;
					}
				}
				if (flag3)
				{
					int num63 = 400;
					string text3 = "";
					for (int num64 = 0; num64 < 4; num64++)
					{
						int num65 = num63;
						int num66 = 370 + screenWidth / 2 - 400;
						if (num64 == 0)
						{
							text3 = string.Concat(Lang.menu[52], ": ", bgScroll);
						}
						for (int num67 = 0; num67 < 5; num67++)
						{
							Microsoft.Xna.Framework.Color color8 = Microsoft.Xna.Framework.Color.Black;
							if (num67 == 4)
							{
								color8 = color;
								color8.R = (byte)((255 + color8.R) / 2);
								color8.G = (byte)((255 + color8.R) / 2);
								color8.B = (byte)((255 + color8.R) / 2);
							}
							int num68 = 255;
							int num69 = color8.R - (255 - num68);
							if (num69 < 0)
							{
								num69 = 0;
							}
							color8 = new Microsoft.Xna.Framework.Color((byte)num69, (byte)num69, (byte)num69, (byte)num68);
							int num70 = 0;
							int num71 = 0;
							if (num67 == 0)
							{
								num70 = -2;
							}
							if (num67 == 1)
							{
								num70 = 2;
							}
							if (num67 == 2)
							{
								num71 = -2;
							}
							if (num67 == 3)
							{
								num71 = 2;
							}
							spriteBatch.DrawString(fontDeathText, text3, new Vector2(num66 + num70, num65 + num71), color8, 0f, default(Vector2), 0.5f, SpriteEffects.None, 0f);
						}
					}
					IngameOptions.rightHover = -1;
					if (!mouseLeft)
					{
						IngameOptions.rightLock = -1;
					}
					IngameOptions.valuePosition = new Vector2(screenWidth / 2 - 40, num63 + 12);
					float num72 = IngameOptions.DrawValueBar(spriteBatch, 1f, (float)bgScroll / 100f);
					if (IngameOptions.inBar || IngameOptions.rightLock == 2)
					{
						IngameOptions.rightHover = 2;
						if (mouseLeft && IngameOptions.rightLock == 2)
						{
							bgScroll = (int)(num72 * 100f);
							caveParallax = 1f - (float)bgScroll / 500f;
						}
					}
					if (IngameOptions.rightHover != -1)
					{
						IngameOptions.rightLock = IngameOptions.rightHover;
					}
				}
				if (flag2)
				{
					int num73 = 400;
					string text4 = "";
					for (int num74 = 0; num74 < 6; num74++)
					{
						int num75 = num73;
						int num76 = 370 + screenWidth / 2 - 400;
						switch (num74)
						{
						case 0:
							text4 = Lang.menu[98].Value;
							break;
						case 1:
							text4 = Lang.menu[99].Value;
							num75 += 30;
							break;
						case 2:
							text4 = Lang.menu[119].Value;
							num75 += 60;
							break;
						case 3:
							text4 = Math.Round(soundVolume * 100f) + "%";
							num76 += 90;
							break;
						case 4:
							text4 = Math.Round(musicVolume * 100f) + "%";
							num76 += 90;
							num75 += 30;
							break;
						case 5:
							text4 = Math.Round(ambientVolume * 100f) + "%";
							num76 += 90;
							num75 += 60;
							break;
						}
						Microsoft.Xna.Framework.Color color9 = color;
						color9.R = (byte)((255 + color9.R) / 2);
						color9.G = (byte)((255 + color9.R) / 2);
						color9.B = (byte)((255 + color9.R) / 2);
						int num77 = 255;
						int num78 = color9.R - (255 - num77);
						if (num78 < 0)
						{
							num78 = 0;
						}
						Utils.DrawBorderStringFourWay(textColor: new Microsoft.Xna.Framework.Color((byte)num78, (byte)num78, (byte)num78, (byte)num77), sb: spriteBatch, font: fontDeathText, text: text4, x: num76, y: num75, borderColor: Microsoft.Xna.Framework.Color.Black, origin: Vector2.Zero, scale: 0.5f);
					}
					IngameOptions.rightHover = -1;
					if (!mouseLeft)
					{
						IngameOptions.rightLock = -1;
					}
					IngameOptions.valuePosition = new Vector2(screenWidth / 2 - 40, num73 - 18 + 30);
					float num79 = IngameOptions.DrawValueBar(spriteBatch, 1f, soundVolume);
					if (IngameOptions.inBar || IngameOptions.rightLock == 2)
					{
						IngameOptions.rightHover = 2;
						if (mouseLeft && IngameOptions.rightLock == 2)
						{
							soundVolume = num79;
						}
					}
					IngameOptions.valuePosition = new Vector2(screenWidth / 2 - 40, num73 - 18 + 60);
					float num80 = IngameOptions.DrawValueBar(spriteBatch, 1f, musicVolume);
					if (IngameOptions.inBar || IngameOptions.rightLock == 3)
					{
						IngameOptions.rightHover = 3;
						if (mouseLeft && IngameOptions.rightLock == 3)
						{
							musicVolume = num80;
						}
					}
					IngameOptions.valuePosition = new Vector2(screenWidth / 2 - 40, num73 - 18 + 90);
					float num81 = IngameOptions.DrawValueBar(spriteBatch, 1f, ambientVolume);
					if (IngameOptions.inBar || IngameOptions.rightLock == 4)
					{
						IngameOptions.rightHover = 4;
						if (mouseLeft && IngameOptions.rightLock == 4)
						{
							ambientVolume = num81;
						}
					}
					if (IngameOptions.rightHover != -1)
					{
						IngameOptions.rightLock = IngameOptions.rightHover;
					}
				}
				for (int num82 = 0; num82 < 5; num82++)
				{
					Microsoft.Xna.Framework.Color color10 = Microsoft.Xna.Framework.Color.Black;
					if (num82 == 4)
					{
						switch (array6[num36])
						{
						case 0:
							color10 = color;
							break;
						case 1:
							color10 = mcColor;
							break;
						case 2:
							color10 = hcColor;
							break;
						case 3:
							color10 = highVersionColor;
							break;
						case 4:
						case 5:
						case 6:
							color10 = errorColor;
							break;
						default:
							color10 = color;
							break;
						}
						color10.R = (byte)((255 + color10.R) / 2);
						color10.G = (byte)((255 + color10.G) / 2);
						color10.B = (byte)((255 + color10.B) / 2);
					}
					int num83 = (int)(255f * (menuItemScale[num36] * 2f - 1f));
					if (array[num36])
					{
						num83 = 255;
					}
					int num84 = color10.R - (255 - num83);
					if (num84 < 0)
					{
						num84 = 0;
					}
					int num85 = color10.G - (255 - num83);
					if (num85 < 0)
					{
						num85 = 0;
					}
					int num86 = color10.B - (255 - num83);
					if (num86 < 0)
					{
						num86 = 0;
					}
					if (num35 == num36 && num82 == 4)
					{
						float num87 = (float)num83 / 255f;
						num84 = (int)((float)num84 * (1f - num87) + 255f * num87);
						num85 = (int)((float)num85 * (1f - num87) + 215f * num87);
						num86 = (int)((float)num86 * (1f - num87) + 0f * num87);
					}
					color10 = new Microsoft.Xna.Framework.Color((byte)num84, (byte)num85, (byte)num86, (byte)num83);
					if (array3[num36])
					{
						if (num82 == 4)
						{
							color10.R = (byte)(color10.R * mouseTextColor / 300);
							color10.G = (byte)(color10.G * mouseTextColor / 300);
							color10.B = (byte)(color10.B * mouseTextColor / 300);
							color10.A = (byte)(color10.A * mouseTextColor / 300);
						}
						else
						{
							color10.A -= (byte)((int)mouseTextColor / 5);
						}
					}
					int num88 = 0;
					int num89 = 0;
					if (num82 == 0)
					{
						num88 = -2;
					}
					if (num82 == 1)
					{
						num88 = 2;
					}
					if (num82 == 2)
					{
						num89 = -2;
					}
					if (num82 == 3)
					{
						num89 = 2;
					}
					Vector2 origin = fontDeathText.MeasureString(array9[num36]);
					origin.X *= 0.5f;
					origin.Y *= 0.5f;
					float num90 = menuItemScale[num36];
					if (menuMode == 15 && num36 == 0)
					{
						num90 *= 0.35f;
					}
					else if (netMode == 2)
					{
						num90 *= 0.5f;
					}
					num90 *= array7[num36];
					if (!array8[num36])
					{
						spriteBatch.DrawString(fontDeathText, array9[num36], new Vector2(num2 + num88 + array5[num36], (float)(num + num3 * num36 + num89) + origin.Y * array7[num36] + (float)array4[num36]), color10, 0f, origin, num90, SpriteEffects.None, 0f);
					}
					else
					{
						spriteBatch.DrawString(fontDeathText, array9[num36], new Vector2(num2 + num88 + array5[num36], (float)(num + num3 * num36 + num89) + origin.Y * array7[num36] + (float)array4[num36]), color10, 0f, new Vector2(0f, origin.Y), num90, SpriteEffects.None, 0f);
					}
				}
				if (!array8[num36])
				{
					int num91 = 0;
					if (menuWide[num36])
					{
						num91 = 14;
					}
					menuWide[num36] = false;
					if (!((float)mouseX > (float)num2 - (float)(array9[num36].Length * 10) * array7[num36] + (float)array5[num36] - (float)num91) || !((float)mouseX < (float)num2 + (float)(array9[num36].Length * 10) * array7[num36] + (float)array5[num36] + (float)num91) || mouseY <= num + num3 * num36 + array4[num36] || !((float)mouseY < (float)(num + num3 * num36 + array4[num36]) + 50f * array7[num36]) || !hasFocus)
					{
						continue;
					}
					focusMenu = num36;
					if (array[num36] || array2[num36])
					{
						focusMenu = -1;
						continue;
					}
					if (num35 != focusMenu)
					{
						PlaySound(12);
					}
					if (mouseLeftRelease && mouseLeft)
					{
						selectedMenu = num36;
					}
					if (mouseRightRelease && mouseRight)
					{
						selectedMenu2 = num36;
					}
				}
				else
				{
					if (mouseX <= num2 + array5[num36] || !((float)mouseX < (float)num2 + (float)(array9[num36].Length * 20) * array7[num36] + (float)array5[num36]) || mouseY <= num + num3 * num36 + array4[num36] || !((float)mouseY < (float)(num + num3 * num36 + array4[num36]) + 50f * array7[num36]) || !hasFocus)
					{
						continue;
					}
					focusMenu = num36;
					if (array[num36] || array2[num36])
					{
						focusMenu = -1;
						continue;
					}
					if (num35 != focusMenu)
					{
						PlaySound(12);
					}
					if (mouseLeftRelease && mouseLeft)
					{
						selectedMenu = num36;
					}
					if (mouseRightRelease && mouseRight)
					{
						selectedMenu2 = num36;
					}
				}
			}
			for (int num92 = 0; num92 < maxMenuItems; num92++)
			{
				if (num92 == focusMenu)
				{
					if (menuItemScale[num92] < 1f)
					{
						menuItemScale[num92] += 0.02f;
					}
					if (menuItemScale[num92] > 1f)
					{
						menuItemScale[num92] = 1f;
					}
				}
				else if ((double)menuItemScale[num92] > 0.8)
				{
					menuItemScale[num92] -= 0.02f;
				}
			}
			if (flag4)
			{
				spriteBatch.End();
				spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise);
				Player pendingPlayer = PendingPlayer;
				pendingPlayer.PlayerFrame();
				pendingPlayer.position.X = (float)num6 + screenPosition.X;
				pendingPlayer.position.Y = (float)num7 + screenPosition.Y;
				DrawPlayer(pendingPlayer, pendingPlayer.position, 0f, Vector2.Zero);
				spriteBatch.End();
				spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise);
			}
			for (int num93 = 0; num93 < 5; num93++)
			{
				Microsoft.Xna.Framework.Color color11 = Microsoft.Xna.Framework.Color.Black;
				if (num93 == 4)
				{
					color11 = color;
					color11.R = (byte)((255 + color11.R) / 2);
					color11.G = (byte)((255 + color11.R) / 2);
					color11.B = (byte)((255 + color11.R) / 2);
				}
				color11.A = (byte)((float)(int)color11.A * 0.3f);
				int num94 = 0;
				int num95 = 0;
				if (num93 == 0)
				{
					num94 = -2;
				}
				if (num93 == 1)
				{
					num94 = 2;
				}
				if (num93 == 2)
				{
					num95 = -2;
				}
				if (num93 == 3)
				{
					num95 = 2;
				}
				string text5 = "Copyright © 2015 Re-Logic";
				Vector2 origin2 = fontMouseText.MeasureString(text5);
				origin2.X *= 0.5f;
				origin2.Y *= 0.5f;
				spriteBatch.DrawString(fontMouseText, text5, new Vector2((float)screenWidth - origin2.X + (float)num94 - 10f, (float)screenHeight - origin2.Y + (float)num95 - 2f), color11, 0f, origin2, 1f, SpriteEffects.None, 0f);
			}
			for (int num96 = 0; num96 < 5; num96++)
			{
				Microsoft.Xna.Framework.Color color12 = Microsoft.Xna.Framework.Color.Black;
				if (num96 == 4)
				{
					color12 = color;
					color12.R = (byte)((255 + color12.R) / 2);
					color12.G = (byte)((255 + color12.R) / 2);
					color12.B = (byte)((255 + color12.R) / 2);
				}
				color12.A = (byte)((float)(int)color12.A * 0.3f);
				int num97 = 0;
				int num98 = 0;
				if (num96 == 0)
				{
					num97 = -2;
				}
				if (num96 == 1)
				{
					num97 = 2;
				}
				if (num96 == 2)
				{
					num98 = -2;
				}
				if (num96 == 3)
				{
					num98 = 2;
				}
				Vector2 origin3 = fontMouseText.MeasureString(versionNumber);
				origin3.X *= 0.5f;
				origin3.Y *= 0.5f;
				spriteBatch.DrawString(fontMouseText, versionNumber, new Vector2(origin3.X + (float)num97 + 10f, (float)screenHeight - origin3.Y + (float)num98 - 2f), color12, 0f, origin3, 1f, SpriteEffects.None, 0f);
			}
			Vector2 value = DrawThickCursor();
			spriteBatch.Draw(cursorTextures[0], new Vector2(mouseX, mouseY) + value + Vector2.One, null, new Microsoft.Xna.Framework.Color((int)((float)(int)cursorColor.R * 0.2f), (int)((float)(int)cursorColor.G * 0.2f), (int)((float)(int)cursorColor.B * 0.2f), (int)((float)(int)cursorColor.A * 0.5f)), 0f, default(Vector2), cursorScale * 1.1f, SpriteEffects.None, 0f);
			spriteBatch.Draw(cursorTextures[0], new Vector2(mouseX, mouseY) + value, null, cursorColor, 0f, default(Vector2), cursorScale, SpriteEffects.None, 0f);
			if (fadeCounter > 0)
			{
				Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
				byte b2 = 0;
				fadeCounter--;
				float num99 = (float)fadeCounter / 75f * 255f;
				b2 = (byte)num99;
				white = new Microsoft.Xna.Framework.Color(b2, b2, b2, b2);
				spriteBatch.Draw(fadeTexture, new Microsoft.Xna.Framework.Rectangle(0, 0, screenWidth, screenHeight), white);
			}
			spriteBatch.End();
			if (mouseLeft)
			{
				mouseLeftRelease = false;
			}
			else
			{
				mouseLeftRelease = true;
			}
			if (mouseRight)
			{
				mouseRightRelease = false;
			}
			else
			{
				mouseRightRelease = true;
			}
		}

		public static void ResetKeyBindings()
		{
			cUp = "W";
			cDown = "S";
			cLeft = "A";
			cRight = "D";
			cJump = "Space";
			cThrowItem = "T";
			cInv = "Escape";
			cHeal = "H";
			cMana = "J";
			cBuff = "B";
			cHook = "E";
			cTorch = "LeftShift";
			cSmart = "LeftControl";
			cMount = "R";
		}

		public static void CursorColor()
		{
			cursorAlpha += (float)cursorColorDirection * 0.015f;
			if (cursorAlpha >= 1f)
			{
				cursorAlpha = 1f;
				cursorColorDirection = -1;
			}
			if ((double)cursorAlpha <= 0.6)
			{
				cursorAlpha = 0.6f;
				cursorColorDirection = 1;
			}
			float num = cursorAlpha * 0.3f + 0.7f;
			byte r = (byte)((float)(int)mouseColor.R * cursorAlpha);
			byte g = (byte)((float)(int)mouseColor.G * cursorAlpha);
			byte b = (byte)((float)(int)mouseColor.B * cursorAlpha);
			byte a = (byte)(255f * num);
			cursorColor = new Microsoft.Xna.Framework.Color(r, g, b, a);
			cursorScale = cursorAlpha * 0.3f + 0.7f + 0.1f;
		}

		protected void DrawSplash(GameTime gameTime)
		{
			base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Black);
			base.Draw(gameTime);
			spriteBatch.Begin();
			splashCounter++;
			Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
			byte b = 0;
			if (splashCounter <= 75)
			{
				float num = (float)splashCounter / 75f * 255f;
				b = (byte)num;
			}
			else if (splashCounter <= 125)
			{
				b = byte.MaxValue;
			}
			else if (splashCounter <= 200)
			{
				int num2 = 125 - splashCounter;
				float num3 = (float)num2 / 75f * 255f;
				b = (byte)num3;
			}
			else
			{
				showSplash = false;
				fadeCounter = 75;
			}
			white = new Microsoft.Xna.Framework.Color(b, b, b, b);
			spriteBatch.Draw(loTexture, new Microsoft.Xna.Framework.Rectangle(0, 0, screenWidth, screenHeight), white);
			spriteBatch.End();
		}

		protected void DrawUnderworldBackground(bool flat)
		{
			if (screenPosition.Y + (float)screenHeight < (float)(maxTilesY - 220) * 16f)
			{
				return;
			}
			Vector2 value = screenPosition + new Vector2(screenWidth >> 1, screenHeight >> 1);
			for (int num = 4; num >= 0; num--)
			{
				Texture2D texture2D = underworldTexture[num];
				Vector2 value2 = new Vector2(texture2D.Width, texture2D.Height) * 0.5f;
				float num2 = flat ? 1f : ((float)(num * 2) + 3f);
				Vector2 value3 = new Vector2(1f / num2);
				Microsoft.Xna.Framework.Rectangle value4 = new Microsoft.Xna.Framework.Rectangle(0, 0, texture2D.Width, texture2D.Height);
				float num3 = 1.3f;
				Vector2 zero = Vector2.Zero;
				switch (num)
				{
				case 1:
				{
					int num4 = (int)(GlobalTime * 8f) % 4;
					value4 = new Microsoft.Xna.Framework.Rectangle((num4 >> 1) * (texture2D.Width >> 1), num4 % 2 * (texture2D.Height >> 1), texture2D.Width >> 1, texture2D.Height >> 1);
					value2 *= 0.5f;
					zero.Y += 75f;
					break;
				}
				case 2:
					zero.Y += 75f;
					break;
				case 3:
					zero.Y += 75f;
					break;
				case 4:
					num3 = 0.5f;
					zero.Y -= 25f;
					break;
				}
				if (flat)
				{
					num3 *= 1.5f;
				}
				value2 *= num3;
				if (flat)
				{
					zero.Y += (float)(underworldTexture[0].Height >> 1) * 1.3f - value2.Y;
				}
				float num5 = num3 * (float)value4.Width;
				float num6 = value.X * value3.X - value2.X + zero.X - (float)(screenWidth >> 1);
				int num7 = (int)(num6 / num5);
				for (int i = num7 - 2; i < num7 + 4 + (int)((float)screenWidth / num5); i++)
				{
					Vector2 value5 = new Vector2((float)i * num3 * ((float)value4.Width / value3.X), (float)(maxTilesY - 200) * 16f) + value2;
					Vector2 position = (value5 - value) * value3 + value - screenPosition - value2 + zero;
					spriteBatch.Draw(texture2D, position, value4, Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, num3, SpriteEffects.None, 0f);
					if (num == 0)
					{
						int num8 = (int)(position.Y + (float)value4.Height * num3);
						spriteBatch.Draw(blackTileTexture, new Microsoft.Xna.Framework.Rectangle((int)position.X, num8, (int)((float)value4.Width * num3), Math.Max(0, screenHeight - num8)), new Microsoft.Xna.Framework.Color(11, 3, 7));
					}
				}
			}
		}

		protected void DrawBackground()
		{
			if (!owBack)
			{
				OldDrawBackground();
				return;
			}
			Microsoft.Xna.Framework.Color[] slices = new Microsoft.Xna.Framework.Color[9];
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			double num = maxTilesY - 330;
			double num2 = (int)((num - worldSurface) / 6.0) * 6;
			num = worldSurface + num2 - 5.0;
			int num3 = (int)(255f * (1f - gfxQuality) + 140f * gfxQuality);
			int num4 = (int)(200f * (1f - gfxQuality) + 40f * gfxQuality);
			int num5 = 128;
			Vector2 value = drawToScreen ? Vector2.Zero : new Vector2(offScreenRange, offScreenRange);
			Vector3 vector = new Vector3(0.9f);
			float num6 = MathHelper.Clamp((screenPosition.Y - (float)worldSurface * 16f) / 300f, 0f, 1f);
			Lighting.brightness = Lighting.defBrightness * (1f - num6) + 1f * num6;
			float value2 = (float)((double)(screenPosition.Y - (float)(screenHeight / 2) + 200f) - rockLayer * 16.0) / 300f;
			value2 = MathHelper.Clamp(value2, 0f, 1f);
			int num7 = (int)((screenPosition.X + (float)(screenWidth / 2)) / 16f);
			int num8 = 3;
			num8 = ((num7 <= caveBackX[0]) ? caveBackStyle[0] : ((num7 <= treeX[1]) ? caveBackStyle[1] : ((num7 > treeX[2]) ? caveBackStyle[3] : caveBackStyle[2])));
			num8 += 3;
			if (snowTiles > 300 && (screenPosition.Y + (float)screenHeight) / 16f < (float)(maxTilesY - 250))
			{
				num8 = 1;
			}
			if (jungleTiles > 80)
			{
				if (num8 == 1)
				{
					if (jungleTiles > snowTiles)
					{
						num8 = 11;
					}
				}
				else
				{
					num8 = 11;
				}
			}
			if ((double)(screenPosition.Y / 16f) > rockLayer + 60.0 && (double)(screenPosition.Y / 16f) < num - 60.0)
			{
				if (player[myPlayer].ZoneSnow)
				{
					if (player[myPlayer].ZoneCorrupt)
					{
						num8 = 15;
					}
					else if (player[myPlayer].ZoneCrimson)
					{
						num8 = 16;
					}
					else if (player[myPlayer].ZoneHoly)
					{
						num8 = 17;
					}
				}
				else if (player[myPlayer].ZoneCorrupt)
				{
					num8 = 12;
				}
				else if (player[myPlayer].ZoneCrimson)
				{
					num8 = 13;
				}
				else if (player[myPlayer].ZoneHoly)
				{
					num8 = 14;
				}
			}
			if (shroomTiles > 200)
			{
				num8 = 2;
			}
			if (num8 != ugBack)
			{
				oldUgBack = ugBack;
				ugBack = num8;
				ugBackTransition = 1f;
			}
			if (ugBackTransition > 0f)
			{
				ugBackTransition -= 0.25f;
			}
			if (ugBackTransition < 0f)
			{
				ugBackTransition = 0f;
			}
			int[] array = new int[7];
			int[] array2 = new int[7];
			for (int i = 0; i < 2; i++)
			{
				int num9 = ugBack;
				if (i == 1)
				{
					num9 = oldUgBack;
				}
				int[] array3 = new int[7];
				switch (num9)
				{
				case 0:
					array3[0] = 1;
					array3[1] = 2;
					array3[2] = 4;
					array3[3] = 3;
					array3[4] = 6;
					array3[5] = 5;
					break;
				case 1:
					if (iceBackStyle == 0)
					{
						array3[1] = 33;
						array3[3] = 32;
						array3[0] = 40;
						array3[2] = 34;
					}
					else if (iceBackStyle == 1)
					{
						array3[1] = 118;
						array3[3] = 117;
						array3[0] = 160;
						array3[2] = 161;
					}
					else if (iceBackStyle == 2)
					{
						array3[1] = 165;
						array3[3] = 167;
						array3[0] = 164;
						array3[2] = 166;
					}
					else
					{
						array3[1] = 120;
						array3[3] = 119;
						array3[0] = 162;
						array3[2] = 163;
					}
					array3[4] = array3[3];
					break;
				case 2:
					array3[0] = 62;
					array3[1] = 63;
					array3[2] = 64;
					array3[3] = 65;
					array3[4] = 143 + hellBackStyle;
					break;
				case 3:
					array3[0] = 66;
					array3[1] = 67;
					array3[2] = 68;
					array3[3] = 69;
					array3[4] = 128 + hellBackStyle;
					break;
				case 4:
					array3[0] = 70;
					array3[1] = 71;
					array3[2] = 68;
					array3[3] = 72;
					array3[4] = 128 + hellBackStyle;
					break;
				case 5:
					array3[0] = 73;
					array3[1] = 74;
					array3[2] = 75;
					array3[3] = 76;
					array3[4] = 131 + hellBackStyle;
					break;
				case 6:
					array3[0] = 77;
					array3[1] = 78;
					array3[2] = 79;
					array3[3] = 80;
					array3[4] = 134 + hellBackStyle;
					break;
				case 7:
					array3[0] = 77;
					array3[1] = 81;
					array3[2] = 79;
					array3[3] = 82;
					array3[4] = 134 + hellBackStyle;
					break;
				case 8:
					array3[0] = 83;
					array3[1] = 84;
					array3[2] = 85;
					array3[3] = 86;
					array3[4] = 137 + hellBackStyle;
					break;
				case 9:
					array3[0] = 83;
					array3[1] = 87;
					array3[2] = 88;
					array3[3] = 89;
					array3[4] = 137 + hellBackStyle;
					break;
				case 10:
					array3[0] = 121;
					array3[1] = 122;
					array3[2] = 123;
					array3[3] = 124;
					array3[4] = 140 + hellBackStyle;
					break;
				case 11:
					if (jungleBackStyle == 0)
					{
						array3[0] = 153;
						array3[1] = 147;
						array3[2] = 148;
						array3[3] = 149;
						array3[4] = 150 + hellBackStyle;
					}
					else
					{
						array3[0] = 146;
						array3[1] = 154;
						array3[2] = 155;
						array3[3] = 156;
						array3[4] = 157 + hellBackStyle;
					}
					break;
				case 12:
				case 13:
				case 14:
					array3[0] = 66;
					array3[1] = 67;
					array3[2] = 68;
					array3[4] = 128 + hellBackStyle;
					switch (num9)
					{
					case 12:
						array3[3] = 193 + worldID % 4;
						break;
					case 13:
						array3[3] = 188 + worldID % 5;
						break;
					case 14:
						array3[3] = 197 + worldID % 3;
						break;
					}
					break;
				default:
					if (num9 >= 15 && num9 <= 17)
					{
						array3[0] = 40;
						array3[1] = 33;
						array3[2] = 34;
						array3[4] = 128 + hellBackStyle;
						switch (num9)
						{
						case 15:
							array3[3] = 200;
							break;
						case 16:
							array3[3] = 201 + worldID % 2;
							break;
						case 17:
							array3[3] = 203 + worldID % 4;
							break;
						}
					}
					break;
				}
				if (hellBackStyle == 0)
				{
					array3[5] = 125;
				}
				if (hellBackStyle == 1)
				{
					array3[5] = 126;
				}
				if (hellBackStyle == 2)
				{
					array3[5] = 127;
				}
				array3[6] = 185 + hellBackStyle;
				LoadBackground(array3[0]);
				LoadBackground(array3[1]);
				LoadBackground(array3[2]);
				LoadBackground(array3[3]);
				LoadBackground(array3[4]);
				LoadBackground(array3[5]);
				LoadBackground(array3[6]);
				if (i == 0)
				{
					for (int j = 0; j < 7; j++)
					{
						array[j] = array3[j];
					}
				}
				else
				{
					for (int k = 0; k < 7; k++)
					{
						array2[k] = array3[k];
					}
				}
			}
			Lighting.defBrightness = 1.2f - 0.2f * value2;
			float x = vector.X;
			float y = vector.Y;
			float z = vector.Z;
			bgParallax = caveParallax;
			bgStart = (int)(0.0 - Math.IEEERemainder((double)num5 + (double)screenPosition.X * bgParallax, num5) - (double)(num5 / 2)) - (int)value.X;
			bgLoops = screenWidth / num5 + 2;
			bgTop = (int)((float)((int)worldSurface * 16 - 16) - screenPosition.Y + 16f);
			for (int l = 0; l < bgLoops; l++)
			{
				for (int m = 0; m < num5 / 16; m++)
				{
					float num10 = (float)bgStart + screenPosition.X;
					num10 = 0f - (float)Math.IEEERemainder(num10, 16.0);
					num10 = (float)Math.Round(num10);
					int num11 = (int)num10;
					if (num11 == -8)
					{
						num11 = 8;
					}
					float num12 = bgStart + num5 * l + m * 16 + 8;
					float num13 = bgTop;
					Microsoft.Xna.Framework.Color color = Lighting.GetColor((int)((num12 + screenPosition.X) / 16f), (int)((screenPosition.Y + num13) / 16f));
					color.R = (byte)((float)(int)color.R * x);
					color.G = (byte)((float)(int)color.G * y);
					color.B = (byte)((float)(int)color.B * z);
					spriteBatch.Draw(backgroundTexture[array[0]], new Vector2(bgStart + num5 * l + 16 * m + num11, bgTop) + value, new Microsoft.Xna.Framework.Rectangle(16 * m + num11 + 16, 0, 16, 16), color);
					if (ugBackTransition > 0f)
					{
						Microsoft.Xna.Framework.Color color2 = color;
						color2.R = (byte)((float)(int)color2.R * ugBackTransition);
						color2.G = (byte)((float)(int)color2.G * ugBackTransition);
						color2.B = (byte)((float)(int)color2.B * ugBackTransition);
						color2.A = (byte)((float)(int)color2.A * ugBackTransition);
						spriteBatch.Draw(backgroundTexture[array2[0]], new Vector2(bgStart + num5 * l + 16 * m + num11, bgTop) + value, new Microsoft.Xna.Framework.Rectangle(16 * m + num11 + 16, 0, 16, 16), color2);
					}
				}
			}
			bool flag = false;
			bool flag2 = false;
			bgTop = (int)((float)((int)worldSurface * 16) - screenPosition.Y + 16f);
			if (worldSurface * 16.0 <= (double)(screenPosition.Y + (float)screenHeight + (float)offScreenRange))
			{
				bgParallax = caveParallax;
				bgStart = (int)(0.0 - Math.IEEERemainder((double)num5 + (double)screenPosition.X * bgParallax, num5) - (double)(num5 / 2)) - (int)value.X;
				bgLoops = (screenWidth + (int)value.X * 2) / num5 + 2;
				if (worldSurface * 16.0 < (double)(screenPosition.Y - 16f))
				{
					bgStartY = (int)(Math.IEEERemainder(bgTop, backgroundHeight[2]) - (double)backgroundHeight[2]);
					bgLoopsY = (screenHeight - bgStartY + (int)value.Y * 2) / backgroundHeight[2] + 1;
				}
				else
				{
					bgStartY = bgTop;
					bgLoopsY = (screenHeight - bgTop + (int)value.Y * 2) / backgroundHeight[2] + 1;
				}
				if (rockLayer * 16.0 < (double)(screenPosition.Y + 600f))
				{
					bgLoopsY = (int)(rockLayer * 16.0 - (double)screenPosition.Y + 600.0 - (double)bgStartY) / backgroundHeight[2];
					flag2 = true;
				}
				float num14 = (float)bgStart + screenPosition.X;
				num14 = 0f - (float)Math.IEEERemainder(num14, 16.0);
				num14 = (float)Math.Round(num14);
				int num15 = (int)num14;
				if (num15 == -8)
				{
					num15 = 8;
				}
				for (int n = 0; n < bgLoops; n++)
				{
					for (int num16 = 0; num16 < bgLoopsY; num16++)
					{
						for (int num17 = 0; num17 < num5 / 16; num17++)
						{
							for (int num18 = 0; num18 < 6; num18++)
							{
								float num19 = bgStartY + num16 * 96 + num18 * 16 + 8;
								float num20 = bgStart + num5 * n + num17 * 16 + 8;
								int num21 = (int)((num20 + screenPosition.X) / 16f);
								int num22 = (int)((num19 + screenPosition.Y) / 16f);
								Microsoft.Xna.Framework.Color color3 = Lighting.GetColor(num21, num22);
								if (tile[num21, num22] == null)
								{
									tile[num21, num22] = new Tile();
								}
								if (color3.R > 0 || color3.G > 0 || color3.B > 0)
								{
									if (!drawToScreen)
									{
										VertexColors vertices;
										Lighting.GetColor4Slice_New(num21, num22, out vertices);
										tileBatch.Draw(backgroundTexture[array[1]], new Vector2(bgStart + num5 * n + 16 * num17 + num15, bgStartY + backgroundHeight[array2[1]] * num16 + 16 * num18) + value, new Microsoft.Xna.Framework.Rectangle(16 * num17 + num15 + 16, 16 * num18, 16, 16), vertices, Vector2.Zero, 1f, SpriteEffects.None);
									}
									else if ((color3.R > num3 || (double)(int)color3.G > (double)num3 * 1.1 || (double)(int)color3.B > (double)num3 * 1.2) && !tile[num21, num22].active() && wallLight[tile[num21, num22].wall] && ugBackTransition == 0f)
									{
										Lighting.GetColor9Slice(num21, num22, ref slices);
										try
										{
											for (int num23 = 0; num23 < 9; num23++)
											{
												int num24 = 0;
												int num25 = 0;
												int width = 4;
												int height = 4;
												Microsoft.Xna.Framework.Color color4 = color3;
												Microsoft.Xna.Framework.Color color5 = color3;
												switch (num23)
												{
												case 0:
													if (!tile[num21 - 1, num22 - 1].active())
													{
														color5 = slices[num23];
													}
													break;
												case 1:
													width = 8;
													num24 = 4;
													if (!tile[num21, num22 - 1].active())
													{
														color5 = slices[num23];
													}
													break;
												case 2:
													num24 = 12;
													if (!tile[num21 + 1, num22 - 1].active())
													{
														color5 = slices[num23];
													}
													break;
												case 3:
													height = 8;
													num25 = 4;
													if (!tile[num21 - 1, num22].active())
													{
														color5 = slices[num23];
													}
													break;
												case 4:
													width = 8;
													height = 8;
													num24 = 4;
													num25 = 4;
													break;
												case 5:
													num24 = 12;
													num25 = 4;
													height = 8;
													if (!tile[num21 + 1, num22].active())
													{
														color5 = slices[num23];
													}
													break;
												case 6:
													num25 = 12;
													if (!tile[num21 - 1, num22 + 1].active())
													{
														color5 = slices[num23];
													}
													break;
												case 7:
													width = 8;
													height = 4;
													num24 = 4;
													num25 = 12;
													if (!tile[num21, num22 + 1].active())
													{
														color5 = slices[num23];
													}
													break;
												case 8:
													num24 = 12;
													num25 = 12;
													if (!tile[num21 + 1, num22 + 1].active())
													{
														color5 = slices[num23];
													}
													break;
												}
												color4.R = (byte)((color3.R + color5.R) / 2);
												color4.G = (byte)((color3.G + color5.G) / 2);
												color4.B = (byte)((color3.B + color5.B) / 2);
												color4.R = (byte)((float)(int)color4.R * x);
												color4.G = (byte)((float)(int)color4.G * y);
												color4.B = (byte)((float)(int)color4.B * z);
												spriteBatch.Draw(backgroundTexture[array[1]], new Vector2(bgStart + num5 * n + 16 * num17 + num24 + num15, bgStartY + backgroundHeight[array[1]] * num16 + 16 * num18 + num25) + value, new Microsoft.Xna.Framework.Rectangle(16 * num17 + num24 + num15 + 16, 16 * num18 + num25, width, height), color4);
												if (ugBackTransition > 0f)
												{
													Microsoft.Xna.Framework.Color color6 = color4;
													color6.R = (byte)((float)(int)color6.R * ugBackTransition);
													color6.G = (byte)((float)(int)color6.G * ugBackTransition);
													color6.B = (byte)((float)(int)color6.B * ugBackTransition);
													color6.A = (byte)((float)(int)color6.A * ugBackTransition);
													spriteBatch.Draw(backgroundTexture[array2[1]], new Vector2(bgStart + num5 * n + 16 * num17 + num24 + num15, bgStartY + backgroundHeight[array2[1]] * num16 + 16 * num18 + num25) + value, new Microsoft.Xna.Framework.Rectangle(16 * num17 + num24 + num15 + 16, 16 * num18 + num25, width, height), color6);
												}
											}
										}
										catch
										{
											color3.R = (byte)((float)(int)color3.R * x);
											color3.G = (byte)((float)(int)color3.G * y);
											color3.B = (byte)((float)(int)color3.B * z);
											spriteBatch.Draw(backgroundTexture[array[1]], new Vector2(bgStart + num5 * n + 16 * num17 + num15, bgStartY + backgroundHeight[array[1]] * num16 + 16 * num18) + value, new Microsoft.Xna.Framework.Rectangle(16 * num17 + num15 + 16, 16 * num18, 16, 16), color3);
										}
									}
									else if ((color3.R > num4 || (double)(int)color3.G > (double)num4 * 1.1 || (double)(int)color3.B > (double)num4 * 1.2) && ugBackTransition == 0f)
									{
										Lighting.GetColor4Slice(num21, num22, ref slices);
										for (int num26 = 0; num26 < 4; num26++)
										{
											int num27 = 0;
											int num28 = 0;
											Microsoft.Xna.Framework.Color color7 = color3;
											Microsoft.Xna.Framework.Color color8 = slices[num26];
											switch (num26)
											{
											case 1:
												num27 = 8;
												break;
											case 2:
												num28 = 8;
												break;
											case 3:
												num27 = 8;
												num28 = 8;
												break;
											}
											color7.R = (byte)((color3.R + color8.R) / 2);
											color7.G = (byte)((color3.G + color8.G) / 2);
											color7.B = (byte)((color3.B + color8.B) / 2);
											color7.R = (byte)((float)(int)color7.R * x);
											color7.G = (byte)((float)(int)color7.G * y);
											color7.B = (byte)((float)(int)color7.B * z);
											spriteBatch.Draw(backgroundTexture[array[1]], new Vector2(bgStart + num5 * n + 16 * num17 + num27 + num15, bgStartY + backgroundHeight[array[1]] * num16 + 16 * num18 + num28) + value, new Microsoft.Xna.Framework.Rectangle(16 * num17 + num27 + num15 + 16, 16 * num18 + num28, 8, 8), color7);
											if (ugBackTransition > 0f)
											{
												Microsoft.Xna.Framework.Color color9 = color7;
												color9.R = (byte)((float)(int)color9.R * ugBackTransition);
												color9.G = (byte)((float)(int)color9.G * ugBackTransition);
												color9.B = (byte)((float)(int)color9.B * ugBackTransition);
												color9.A = (byte)((float)(int)color9.A * ugBackTransition);
												spriteBatch.Draw(backgroundTexture[array2[1]], new Vector2(bgStart + num5 * n + 16 * num17 + num27 + num15, bgStartY + backgroundHeight[array2[1]] * num16 + 16 * num18 + num28) + value, new Microsoft.Xna.Framework.Rectangle(16 * num17 + num27 + num15 + 16, 16 * num18 + num28, 8, 8), color9);
											}
										}
									}
									else
									{
										color3.R = (byte)((float)(int)color3.R * x);
										color3.G = (byte)((float)(int)color3.G * y);
										color3.B = (byte)((float)(int)color3.B * z);
										spriteBatch.Draw(backgroundTexture[array[1]], new Vector2(bgStart + num5 * n + 16 * num17 + num15, bgStartY + backgroundHeight[array[1]] * num16 + 16 * num18) + value, new Microsoft.Xna.Framework.Rectangle(16 * num17 + num15 + 16, 16 * num18, 16, 16), color3);
										if (ugBackTransition > 0f)
										{
											Microsoft.Xna.Framework.Color color10 = color3;
											color10.R = (byte)((float)(int)color10.R * ugBackTransition);
											color10.G = (byte)((float)(int)color10.G * ugBackTransition);
											color10.B = (byte)((float)(int)color10.B * ugBackTransition);
											color10.A = (byte)((float)(int)color10.A * ugBackTransition);
											spriteBatch.Draw(backgroundTexture[array2[1]], new Vector2(bgStart + num5 * n + 16 * num17 + num15, bgStartY + backgroundHeight[array2[1]] * num16 + 16 * num18) + value, new Microsoft.Xna.Framework.Rectangle(16 * num17 + num15 + 16, 16 * num18, 16, 16), color10);
										}
									}
								}
								else
								{
									color3.R = (byte)((float)(int)color3.R * x);
									color3.G = (byte)((float)(int)color3.G * y);
									color3.B = (byte)((float)(int)color3.B * z);
									spriteBatch.Draw(backgroundTexture[array[1]], new Vector2(bgStart + num5 * n + 16 * num17 + num15, bgStartY + backgroundHeight[array[1]] * num16 + 16 * num18) + value, new Microsoft.Xna.Framework.Rectangle(16 * num17 + num15 + 16, 16 * num18, 16, 16), color3);
								}
							}
						}
					}
				}
				if (ugBackTransition > 0f)
				{
					for (int num29 = 0; num29 < bgLoops; num29++)
					{
						for (int num30 = 0; num30 < bgLoopsY; num30++)
						{
							for (int num31 = 0; num31 < num5 / 16; num31++)
							{
								for (int num32 = 0; num32 < 6; num32++)
								{
									float num33 = bgStartY + num30 * 96 + num32 * 16 + 8;
									float num34 = bgStart + num5 * num29 + num31 * 16 + 8;
									int num35 = (int)((num34 + screenPosition.X) / 16f);
									int num36 = (int)((num33 + screenPosition.Y) / 16f);
									Microsoft.Xna.Framework.Color color11 = Lighting.GetColor(num35, num36);
									if (tile[num35, num36] == null)
									{
										tile[num35, num36] = new Tile();
									}
									if (color11.R > 0 || color11.G > 0 || color11.B > 0)
									{
										VertexColors vertices2;
										Lighting.GetColor4Slice_New(num35, num36, out vertices2, ugBackTransition);
										byte a = (byte)(255f * ugBackTransition);
										vertices2.BottomLeftColor.A = a;
										vertices2.BottomRightColor.A = a;
										vertices2.TopLeftColor.A = a;
										vertices2.TopRightColor.A = a;
										tileBatch.Draw(backgroundTexture[array2[1]], new Vector2(bgStart + num5 * num29 + 16 * num31 + num15, bgStartY + backgroundHeight[array2[1]] * num30 + 16 * num32) + value, new Microsoft.Xna.Framework.Rectangle(16 * num31 + num15 + 16, 16 * num32, 16, 16), vertices2, Vector2.Zero, 1f, SpriteEffects.None);
									}
								}
							}
						}
					}
				}
				if (flag2)
				{
					bgParallax = caveParallax;
					bgStart = (int)(0.0 - Math.IEEERemainder((double)num5 + (double)screenPosition.X * bgParallax, num5) - (double)(num5 / 2)) - (int)value.X;
					bgLoops = (screenWidth + (int)value.X * 2) / num5 + 2;
					bgTop = bgStartY + bgLoopsY * backgroundHeight[2];
					if (bgTop > -32)
					{
						for (int num37 = 0; num37 < bgLoops; num37++)
						{
							for (int num38 = 0; num38 < num5 / 16; num38++)
							{
								float num39 = bgStart + num5 * num37 + num38 * 16 + 8;
								float num40 = bgTop;
								Microsoft.Xna.Framework.Color color12 = Lighting.GetColor((int)((num39 + screenPosition.X) / 16f), (int)((screenPosition.Y + num40) / 16f));
								color12.R = (byte)((float)(int)color12.R * x);
								color12.G = (byte)((float)(int)color12.G * y);
								color12.B = (byte)((float)(int)color12.B * z);
								spriteBatch.Draw(backgroundTexture[array[2]], new Vector2(bgStart + num5 * num37 + 16 * num38 + num15, bgTop) + value, new Microsoft.Xna.Framework.Rectangle(16 * num38 + num15 + 16, 0, 16, 16), color12);
								if (ugBackTransition > 0f)
								{
									Microsoft.Xna.Framework.Color color13 = color12;
									color13.R = (byte)((float)(int)color13.R * ugBackTransition);
									color13.G = (byte)((float)(int)color13.G * ugBackTransition);
									color13.B = (byte)((float)(int)color13.B * ugBackTransition);
									color13.A = (byte)((float)(int)color13.A * ugBackTransition);
									spriteBatch.Draw(backgroundTexture[array2[2]], new Vector2(bgStart + num5 * num37 + 16 * num38 + num15, bgTop) + value, new Microsoft.Xna.Framework.Rectangle(16 * num38 + num15 + 16, 0, 16, 16), color13);
								}
							}
						}
					}
				}
			}
			bgTop = (int)((float)((int)rockLayer * 16) - screenPosition.Y + 16f + 600f - 8f);
			if (rockLayer * 16.0 <= (double)(screenPosition.Y + 600f))
			{
				bgParallax = caveParallax;
				bgStart = (int)(0.0 - Math.IEEERemainder((double)num5 + (double)screenPosition.X * bgParallax, num5) - (double)(num5 / 2)) - (int)value.X;
				bgLoops = (screenWidth + (int)value.X * 2) / num5 + 2;
				if (rockLayer * 16.0 + (double)screenHeight < (double)(screenPosition.Y - 16f))
				{
					bgStartY = (int)(Math.IEEERemainder(bgTop, backgroundHeight[3]) - (double)backgroundHeight[3]);
					bgLoopsY = (screenHeight - bgStartY + (int)value.Y * 2) / backgroundHeight[2] + 1;
				}
				else
				{
					bgStartY = bgTop;
					bgLoopsY = (screenHeight - bgTop + (int)value.Y * 2) / backgroundHeight[2] + 1;
				}
				if (num * 16.0 < (double)(screenPosition.Y + 600f))
				{
					bgLoopsY = (int)(num * 16.0 - (double)screenPosition.Y + 600.0 - (double)bgStartY) / backgroundHeight[2];
					flag = true;
				}
				float num41 = (float)bgStart + screenPosition.X;
				num41 = 0f - (float)Math.IEEERemainder(num41, 16.0);
				num41 = (float)Math.Round(num41);
				int num42 = (int)num41;
				if (num42 == -8)
				{
					num42 = 8;
				}
				for (int num43 = 0; num43 < bgLoops; num43++)
				{
					for (int num44 = 0; num44 < bgLoopsY; num44++)
					{
						for (int num45 = 0; num45 < num5 / 16; num45++)
						{
							for (int num46 = 0; num46 < 6; num46++)
							{
								float num47 = bgStartY + num44 * 96 + num46 * 16 + 8;
								float num48 = bgStart + num5 * num43 + num45 * 16 + 8;
								int num49 = (int)((num48 + screenPosition.X) / 16f);
								int num50 = (int)((num47 + screenPosition.Y) / 16f);
								Microsoft.Xna.Framework.Color color14 = Lighting.GetColor(num49, num50);
								if (tile[num49, num50] == null)
								{
									tile[num49, num50] = new Tile();
								}
								bool flag3 = false;
								if (caveParallax != 0f)
								{
									if (tile[num49 - 1, num50] == null)
									{
										tile[num49 - 1, num50] = new Tile();
									}
									if (tile[num49 + 1, num50] == null)
									{
										tile[num49 + 1, num50] = new Tile();
									}
									if (wallLight[tile[num49, num50].wall] || wallLight[tile[num49 - 1, num50].wall] || wallLight[tile[num49 + 1, num50].wall])
									{
										flag3 = true;
									}
								}
								else if (wallLight[tile[num49, num50].wall])
								{
									flag3 = true;
								}
								if ((!flag3 && color14.R != 0 && color14.G != 0 && color14.B != 0) || (color14.R <= 0 && color14.G <= 0 && color14.B <= 0) || (!wallLight[tile[num49, num50].wall] && caveParallax == 0f))
								{
									continue;
								}
								if (Lighting.lightMode < 2 && color14.R < 230 && color14.G < 230 && color14.B < 230 && ugBackTransition == 0f)
								{
									if ((color14.R > num3 || (double)(int)color14.G > (double)num3 * 1.1 || (double)(int)color14.B > (double)num3 * 1.2) && !tile[num49, num50].active())
									{
										Lighting.GetColor9Slice(num49, num50, ref slices);
										for (int num51 = 0; num51 < 9; num51++)
										{
											int num52 = 0;
											int num53 = 0;
											int width2 = 4;
											int height2 = 4;
											Microsoft.Xna.Framework.Color color15 = color14;
											Microsoft.Xna.Framework.Color color16 = color14;
											switch (num51)
											{
											case 0:
												if (!tile[num49 - 1, num50 - 1].active())
												{
													color16 = slices[num51];
												}
												break;
											case 1:
												width2 = 8;
												num52 = 4;
												if (!tile[num49, num50 - 1].active())
												{
													color16 = slices[num51];
												}
												break;
											case 2:
												num52 = 12;
												if (!tile[num49 + 1, num50 - 1].active())
												{
													color16 = slices[num51];
												}
												break;
											case 3:
												height2 = 8;
												num53 = 4;
												if (!tile[num49 - 1, num50].active())
												{
													color16 = slices[num51];
												}
												break;
											case 4:
												width2 = 8;
												height2 = 8;
												num52 = 4;
												num53 = 4;
												break;
											case 5:
												num52 = 12;
												num53 = 4;
												height2 = 8;
												if (!tile[num49 + 1, num50].active())
												{
													color16 = slices[num51];
												}
												break;
											case 6:
												num53 = 12;
												if (!tile[num49 - 1, num50 + 1].active())
												{
													color16 = slices[num51];
												}
												break;
											case 7:
												width2 = 8;
												height2 = 4;
												num52 = 4;
												num53 = 12;
												if (!tile[num49, num50 + 1].active())
												{
													color16 = slices[num51];
												}
												break;
											case 8:
												num52 = 12;
												num53 = 12;
												if (!tile[num49 + 1, num50 + 1].active())
												{
													color16 = slices[num51];
												}
												break;
											}
											color15.R = (byte)((color14.R + color16.R) / 2);
											color15.G = (byte)((color14.G + color16.G) / 2);
											color15.B = (byte)((color14.B + color16.B) / 2);
											color15.R = (byte)((float)(int)color15.R * x);
											color15.G = (byte)((float)(int)color15.G * y);
											color15.B = (byte)((float)(int)color15.B * z);
											spriteBatch.Draw(backgroundTexture[array[3]], new Vector2(bgStart + num5 * num43 + 16 * num45 + num52 + num42, bgStartY + backgroundHeight[array[3]] * num44 + 16 * num46 + num53) + value, new Microsoft.Xna.Framework.Rectangle(16 * num45 + num52 + num42 + 16, 16 * num46 + num53, width2, height2), color15);
											if (ugBackTransition > 0f)
											{
												Microsoft.Xna.Framework.Color color17 = color15;
												color17.R = (byte)((float)(int)color17.R * ugBackTransition);
												color17.G = (byte)((float)(int)color17.G * ugBackTransition);
												color17.B = (byte)((float)(int)color17.B * ugBackTransition);
												color17.A = (byte)((float)(int)color17.A * ugBackTransition);
												spriteBatch.Draw(backgroundTexture[array2[3]], new Vector2(bgStart + num5 * num43 + 16 * num45 + num52 + num42, bgStartY + backgroundHeight[array2[3]] * num44 + 16 * num46 + num53) + value, new Microsoft.Xna.Framework.Rectangle(16 * num45 + num52 + num42 + 16, 16 * num46 + num53, width2, height2), color17);
											}
										}
									}
									else if (color14.R > num4 || (double)(int)color14.G > (double)num4 * 1.1 || (double)(int)color14.B > (double)num4 * 1.2)
									{
										Lighting.GetColor4Slice(num49, num50, ref slices);
										for (int num54 = 0; num54 < 4; num54++)
										{
											int num55 = 0;
											int num56 = 0;
											Microsoft.Xna.Framework.Color color18 = color14;
											Microsoft.Xna.Framework.Color color19 = slices[num54];
											switch (num54)
											{
											case 1:
												num55 = 8;
												break;
											case 2:
												num56 = 8;
												break;
											case 3:
												num55 = 8;
												num56 = 8;
												break;
											}
											color18.R = (byte)((color14.R + color19.R) / 2);
											color18.G = (byte)((color14.G + color19.G) / 2);
											color18.B = (byte)((color14.B + color19.B) / 2);
											color18.R = (byte)((float)(int)color18.R * x);
											color18.G = (byte)((float)(int)color18.G * y);
											color18.B = (byte)((float)(int)color18.B * z);
											spriteBatch.Draw(backgroundTexture[array[3]], new Vector2(bgStart + num5 * num43 + 16 * num45 + num55 + num42, bgStartY + backgroundHeight[array[3]] * num44 + 16 * num46 + num56) + value, new Microsoft.Xna.Framework.Rectangle(16 * num45 + num55 + num42 + 16, 16 * num46 + num56, 8, 8), color18);
											if (ugBackTransition > 0f)
											{
												Microsoft.Xna.Framework.Color color20 = color18;
												color20.R = (byte)((float)(int)color20.R * ugBackTransition);
												color20.G = (byte)((float)(int)color20.G * ugBackTransition);
												color20.B = (byte)((float)(int)color20.B * ugBackTransition);
												color20.A = (byte)((float)(int)color20.A * ugBackTransition);
												spriteBatch.Draw(backgroundTexture[array2[3]], new Vector2(bgStart + num5 * num43 + 16 * num45 + num55 + num42, bgStartY + backgroundHeight[array2[3]] * num44 + 16 * num46 + num56) + value, new Microsoft.Xna.Framework.Rectangle(16 * num45 + num55 + num42 + 16, 16 * num46 + num56, 8, 8), color20);
											}
										}
									}
									else
									{
										color14.R = (byte)((float)(int)color14.R * x);
										color14.G = (byte)((float)(int)color14.G * y);
										color14.B = (byte)((float)(int)color14.B * z);
										spriteBatch.Draw(backgroundTexture[array[3]], new Vector2(bgStart + num5 * num43 + 16 * num45 + num42, bgStartY + backgroundHeight[array[3]] * num44 + 16 * num46) + value, new Microsoft.Xna.Framework.Rectangle(16 * num45 + num42 + 16, 16 * num46, 16, 16), color14);
										if (ugBackTransition > 0f)
										{
											Microsoft.Xna.Framework.Color color21 = color14;
											color21.R = (byte)((float)(int)color21.R * ugBackTransition);
											color21.G = (byte)((float)(int)color21.G * ugBackTransition);
											color21.B = (byte)((float)(int)color21.B * ugBackTransition);
											color21.A = (byte)((float)(int)color21.A * ugBackTransition);
											spriteBatch.Draw(backgroundTexture[array2[3]], new Vector2(bgStart + num5 * num43 + 16 * num45 + num42, bgStartY + backgroundHeight[array2[3]] * num44 + 16 * num46) + value, new Microsoft.Xna.Framework.Rectangle(16 * num45 + num42 + 16, 16 * num46, 16, 16), color21);
										}
									}
								}
								else
								{
									color14.R = (byte)((float)(int)color14.R * x);
									color14.G = (byte)((float)(int)color14.G * y);
									color14.B = (byte)((float)(int)color14.B * z);
									spriteBatch.Draw(backgroundTexture[array[3]], new Vector2(bgStart + num5 * num43 + 16 * num45 + num42, bgStartY + backgroundHeight[array[3]] * num44 + 16 * num46) + value, new Microsoft.Xna.Framework.Rectangle(16 * num45 + num42 + 16, 16 * num46, 16, 16), color14);
									if (ugBackTransition > 0f)
									{
										Microsoft.Xna.Framework.Color color22 = color14;
										color22.R = (byte)((float)(int)color22.R * ugBackTransition);
										color22.G = (byte)((float)(int)color22.G * ugBackTransition);
										color22.B = (byte)((float)(int)color22.B * ugBackTransition);
										color22.A = (byte)((float)(int)color22.A * ugBackTransition);
										spriteBatch.Draw(backgroundTexture[array2[3]], new Vector2(bgStart + num5 * num43 + 16 * num45 + num42, bgStartY + backgroundHeight[array2[3]] * num44 + 16 * num46) + value, new Microsoft.Xna.Framework.Rectangle(16 * num45 + num42 + 16, 16 * num46, 16, 16), color22);
									}
								}
							}
						}
					}
				}
				num5 = 128;
				if (flag)
				{
					bgParallax = caveParallax;
					bgStart = (int)(0.0 - Math.IEEERemainder((double)num5 + (double)screenPosition.X * bgParallax, num5) - (double)(num5 / 2)) - (int)value.X;
					bgLoops = (screenWidth + (int)value.X * 2) / num5 + 2;
					bgTop = bgStartY + bgLoopsY * backgroundHeight[2];
					for (int num57 = 0; num57 < bgLoops; num57++)
					{
						for (int num58 = 0; num58 < num5 / 16; num58++)
						{
							float num59 = bgStart + num5 * num57 + num58 * 16 + 8;
							float num60 = bgTop;
							Microsoft.Xna.Framework.Color color23 = Lighting.GetColor((int)((num59 + screenPosition.X) / 16f), (int)((screenPosition.Y + num60) / 16f));
							color23.R = (byte)((float)(int)color23.R * x);
							color23.G = (byte)((float)(int)color23.G * y);
							color23.B = (byte)((float)(int)color23.B * z);
							spriteBatch.Draw(backgroundTexture[array[4]], new Vector2(bgStart + num5 * num57 + 16 * num58 + num42, bgTop) + value, new Microsoft.Xna.Framework.Rectangle(16 * num58 + num42 + 16, magmaBGFrame * 16, 16, 16), color23);
							if (ugBackTransition > 0f)
							{
								Microsoft.Xna.Framework.Color color24 = color23;
								color24.R = (byte)((float)(int)color24.R * ugBackTransition);
								color24.G = (byte)((float)(int)color24.G * ugBackTransition);
								color24.B = (byte)((float)(int)color24.B * ugBackTransition);
								color24.A = (byte)((float)(int)color24.A * ugBackTransition);
								spriteBatch.Draw(backgroundTexture[array2[4]], new Vector2(bgStart + num5 * num57 + 16 * num58 + num42, bgTop) + value, new Microsoft.Xna.Framework.Rectangle(16 * num58 + num42 + 16, magmaBGFrame * 16, 16, 16), color24);
							}
						}
					}
				}
			}
			bgTop = (int)((float)((int)num * 16) - screenPosition.Y + 16f + 600f) - 8;
			bool flag4 = false;
			if (num * 16.0 <= (double)(screenPosition.Y + 600f))
			{
				bgStart = (int)(0.0 - Math.IEEERemainder((double)num5 + (double)screenPosition.X * bgParallax, num5) - (double)(num5 / 2)) - (int)value.X;
				bgLoops = (screenWidth + (int)value.X * 2) / num5 + 2;
				if (num * 16.0 + (double)screenHeight < (double)(screenPosition.Y - 16f))
				{
					bgStartY = (int)(Math.IEEERemainder(bgTop, backgroundHeight[2]) - (double)backgroundHeight[2]);
					bgLoopsY = (screenHeight - bgStartY + (int)value.Y * 2) / backgroundHeight[2] + 1;
				}
				else
				{
					bgStartY = bgTop;
					bgLoopsY = (screenHeight - bgTop + (int)value.Y * 2) / backgroundHeight[2] + 1;
				}
				if ((float)(maxTilesY - 200) * 16f < screenPosition.Y + (float)screenHeight)
				{
					bgLoopsY = (int)Math.Ceiling(((float)(maxTilesY - 200) * 16f - screenPosition.Y - (float)bgStartY) / (float)backgroundHeight[2]);
					flag4 = true;
				}
				num3 = (int)((double)num3 * 1.5);
				num4 = (int)((double)num4 * 1.5);
				float num61 = (float)bgStart + screenPosition.X;
				num61 = 0f - (float)Math.IEEERemainder(num61, 16.0);
				num61 = (float)Math.Round(num61);
				int num62 = (int)num61;
				if (num62 == -8)
				{
					num62 = 8;
				}
				for (int num63 = 0; num63 < bgLoops; num63++)
				{
					for (int num64 = 0; num64 < bgLoopsY; num64++)
					{
						for (int num65 = 0; num65 < num5 / 16; num65++)
						{
							for (int num66 = 0; num66 < 6; num66++)
							{
								float num67 = bgStartY + num64 * 96 + num66 * 16 + 8;
								float num68 = bgStart + num5 * num63 + num65 * 16 + 8;
								int num69 = (int)((num68 + screenPosition.X) / 16f);
								int num70 = (int)((num67 + screenPosition.Y) / 16f);
								Microsoft.Xna.Framework.Color color25 = Lighting.GetColor(num69, num70);
								if (tile[num69, num70] == null)
								{
									tile[num69, num70] = new Tile();
								}
								bool flag5 = false;
								if (caveParallax != 0f)
								{
									if (tile[num69 - 1, num70] == null)
									{
										tile[num69 - 1, num70] = new Tile();
									}
									if (tile[num69 + 1, num70] == null)
									{
										tile[num69 + 1, num70] = new Tile();
									}
									if (wallLight[tile[num69, num70].wall] || wallLight[tile[num69 - 1, num70].wall] || wallLight[tile[num69 + 1, num70].wall])
									{
										flag5 = true;
									}
								}
								else if (wallLight[tile[num69, num70].wall])
								{
									flag5 = true;
								}
								if ((!flag5 && color25.R != 0 && color25.G != 0 && color25.B != 0) || (color25.R <= 0 && color25.G <= 0 && color25.B <= 0 && num70 <= maxTilesY - 300) || (!wallLight[tile[num69, num70].wall] && caveParallax == 0f))
								{
									continue;
								}
								if (Lighting.lightMode < 2 && color25.R < 230 && color25.G < 230 && color25.B < 230)
								{
									if ((color25.R > num3 || (double)(int)color25.G > (double)num3 * 1.1 || (double)(int)color25.B > (double)num3 * 1.2) && !tile[num69, num70].active())
									{
										Lighting.GetColor9Slice(num69, num70, ref slices);
										for (int num71 = 0; num71 < 9; num71++)
										{
											int num72 = 0;
											int num73 = 0;
											int width3 = 4;
											int height3 = 4;
											Microsoft.Xna.Framework.Color color26 = color25;
											Microsoft.Xna.Framework.Color color27 = color25;
											switch (num71)
											{
											case 0:
												if (!tile[num69 - 1, num70 - 1].active())
												{
													color27 = slices[num71];
												}
												break;
											case 1:
												width3 = 8;
												num72 = 4;
												if (!tile[num69, num70 - 1].active())
												{
													color27 = slices[num71];
												}
												break;
											case 2:
												num72 = 12;
												if (!tile[num69 + 1, num70 - 1].active())
												{
													color27 = slices[num71];
												}
												break;
											case 3:
												height3 = 8;
												num73 = 4;
												if (!tile[num69 - 1, num70].active())
												{
													color27 = slices[num71];
												}
												break;
											case 4:
												width3 = 8;
												height3 = 8;
												num72 = 4;
												num73 = 4;
												break;
											case 5:
												num72 = 12;
												num73 = 4;
												height3 = 8;
												if (!tile[num69 + 1, num70].active())
												{
													color27 = slices[num71];
												}
												break;
											case 6:
												num73 = 12;
												if (!tile[num69 - 1, num70 + 1].active())
												{
													color27 = slices[num71];
												}
												break;
											case 7:
												width3 = 8;
												height3 = 4;
												num72 = 4;
												num73 = 12;
												if (!tile[num69, num70 + 1].active())
												{
													color27 = slices[num71];
												}
												break;
											case 8:
												num72 = 12;
												num73 = 12;
												if (!tile[num69 + 1, num70 + 1].active())
												{
													color27 = slices[num71];
												}
												break;
											}
											color26.R = (byte)((color25.R + color27.R) / 2);
											color26.G = (byte)((color25.G + color27.G) / 2);
											color26.B = (byte)((color25.B + color27.B) / 2);
											color26.R = (byte)((float)(int)color26.R * x);
											color26.G = (byte)((float)(int)color26.G * y);
											color26.B = (byte)((float)(int)color26.B * z);
											spriteBatch.Draw(backgroundTexture[array[5]], new Vector2(bgStart + num5 * num63 + 16 * num65 + num72 + num62, bgStartY + backgroundHeight[2] * num64 + 16 * num66 + num73) + value, new Microsoft.Xna.Framework.Rectangle(16 * num65 + num72 + num62 + 16, 16 * num66 + backgroundHeight[2] * magmaBGFrame + num73, width3, height3), color26, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
										}
									}
									else if (color25.R > num4 || (double)(int)color25.G > (double)num4 * 1.1 || (double)(int)color25.B > (double)num4 * 1.2)
									{
										Lighting.GetColor4Slice(num69, num70, ref slices);
										for (int num74 = 0; num74 < 4; num74++)
										{
											int num75 = 0;
											int num76 = 0;
											Microsoft.Xna.Framework.Color color28 = color25;
											Microsoft.Xna.Framework.Color color29 = slices[num74];
											switch (num74)
											{
											case 1:
												num75 = 8;
												break;
											case 2:
												num76 = 8;
												break;
											case 3:
												num75 = 8;
												num76 = 8;
												break;
											}
											color28.R = (byte)((color25.R + color29.R) / 2);
											color28.G = (byte)((color25.G + color29.G) / 2);
											color28.B = (byte)((color25.B + color29.B) / 2);
											color28.R = (byte)((float)(int)color28.R * x);
											color28.G = (byte)((float)(int)color28.G * y);
											color28.B = (byte)((float)(int)color28.B * z);
											spriteBatch.Draw(backgroundTexture[array[5]], new Vector2(bgStart + num5 * num63 + 16 * num65 + num75 + num62, bgStartY + backgroundHeight[2] * num64 + 16 * num66 + num76) + value, new Microsoft.Xna.Framework.Rectangle(16 * num65 + num75 + num62 + 16, 16 * num66 + backgroundHeight[2] * magmaBGFrame + num76, 8, 8), color28, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
										}
									}
									else
									{
										color25.R = (byte)((float)(int)color25.R * x);
										color25.G = (byte)((float)(int)color25.G * y);
										color25.B = (byte)((float)(int)color25.B * z);
										spriteBatch.Draw(backgroundTexture[array[5]], new Vector2(bgStart + num5 * num63 + 16 * num65 + num62, bgStartY + backgroundHeight[2] * num64 + 16 * num66) + value, new Microsoft.Xna.Framework.Rectangle(16 * num65 + num62 + 16, 16 * num66 + backgroundHeight[2] * magmaBGFrame, 16, 16), color25, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
									}
								}
								else
								{
									color25.R = (byte)((float)(int)color25.R * x);
									color25.G = (byte)((float)(int)color25.G * y);
									color25.B = (byte)((float)(int)color25.B * z);
									spriteBatch.Draw(backgroundTexture[array[5]], new Vector2(bgStart + num5 * num63 + 16 * num65 + num62, bgStartY + backgroundHeight[2] * num64 + 16 * num66) + value, new Microsoft.Xna.Framework.Rectangle(16 * num65 + num62 + 16, 16 * num66 + backgroundHeight[2] * magmaBGFrame, 16, 16), color25, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
								}
							}
						}
					}
				}
				if (flag4)
				{
					bgParallax = caveParallax;
					bgStart = (int)(0.0 - Math.IEEERemainder((double)num5 + (double)screenPosition.X * bgParallax, num5) - (double)(num5 / 2)) - (int)value.X;
					bgLoops = (screenWidth + (int)value.X * 2) / num5 + 2;
					bgTop = bgStartY + bgLoopsY * backgroundHeight[2];
					for (int num77 = 0; num77 < bgLoops; num77++)
					{
						for (int num78 = 0; num78 < num5 / 16; num78++)
						{
							float num79 = bgStart + num5 * num77 + num78 * 16 + 8;
							float num80 = bgTop;
							Microsoft.Xna.Framework.Color color30 = Lighting.GetColor((int)((num79 + screenPosition.X) / 16f), (int)((screenPosition.Y + num80) / 16f));
							color30.R = (byte)((float)(int)color30.R * x);
							color30.G = (byte)((float)(int)color30.G * y);
							color30.B = (byte)((float)(int)color30.B * z);
							spriteBatch.Draw(backgroundTexture[array[6]], new Vector2(bgStart + num5 * num77 + 16 * num78 + num62, bgTop) + value, new Microsoft.Xna.Framework.Rectangle(16 * num78 + num62 + 16, magmaBGFrame * 16, 16, 16), color30);
							if (ugBackTransition > 0f)
							{
								Microsoft.Xna.Framework.Color color31 = color30;
								color31.R = (byte)((float)(int)color31.R * ugBackTransition);
								color31.G = (byte)((float)(int)color31.G * ugBackTransition);
								color31.B = (byte)((float)(int)color31.B * ugBackTransition);
								color31.A = (byte)((float)(int)color31.A * ugBackTransition);
								spriteBatch.Draw(backgroundTexture[array2[6]], new Vector2(bgStart + num5 * num77 + 16 * num78 + num62, bgTop) + value, new Microsoft.Xna.Framework.Rectangle(16 * num78 + num62 + 16, magmaBGFrame * 16, 16, 16), color31);
							}
						}
					}
				}
			}
			Lighting.brightness = Lighting.defBrightness;
			TimeLogger.DrawTime(3, stopwatch.Elapsed.TotalMilliseconds);
		}

		protected void OldDrawBackground()
		{
			Microsoft.Xna.Framework.Color[] slices = new Microsoft.Xna.Framework.Color[9];
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			int num = (int)(255f * (1f - gfxQuality) + 140f * gfxQuality);
			int num2 = (int)(200f * (1f - gfxQuality) + 40f * gfxQuality);
			int num3 = 128;
			Vector2 value = new Vector2(offScreenRange, offScreenRange);
			if (drawToScreen)
			{
				value = Vector2.Zero;
			}
			float num4 = 0.9f;
			float num5 = num4;
			float num6 = num4;
			float num7 = num4;
			float num8 = 0f;
			if (bloodTiles > evilTiles && bloodTiles > holyTiles)
			{
				num8 = bloodTiles;
			}
			else if (holyTiles > evilTiles)
			{
				num8 = holyTiles;
			}
			else if (evilTiles > holyTiles)
			{
				num8 = evilTiles;
			}
			num8 = MathHelper.Clamp(num8 / 800f, 0f, 1f);
			float num9 = (float)((double)screenPosition.Y - worldSurface * 16.0) / 300f;
			if (num9 < 0f)
			{
				num9 = 0f;
			}
			else if (num9 > 1f)
			{
				num9 = 1f;
			}
			float num10 = 1f * (1f - num9) + num5 * num9;
			Lighting.brightness = Lighting.defBrightness * (1f - num9) + 1f * num9;
			float value2 = (float)((double)(screenPosition.Y - (float)(screenHeight / 2) + 200f) - rockLayer * 16.0) / 300f;
			value2 = MathHelper.Clamp(value2, 0f, 1f);
			if (bloodTiles > evilTiles && bloodTiles > holyTiles)
			{
				num5 = 1f * num8 + num5 * (1f - num8);
				num6 = 0.55f * num8 + num6 * (1f - num8);
				num7 = 0.5f * num8 + num7 * (1f - num8);
			}
			else if (evilTiles > 0)
			{
				num5 = 0.8f * num8 + num5 * (1f - num8);
				num6 = 0.75f * num8 + num6 * (1f - num8);
				num7 = 1.1f * num8 + num7 * (1f - num8);
			}
			else if (holyTiles > 0)
			{
				num5 = 1f * num8 + num5 * (1f - num8);
				num6 = 0.7f * num8 + num6 * (1f - num8);
				num7 = 0.9f * num8 + num7 * (1f - num8);
			}
			num5 = 1f * (num10 - value2) + num5 * value2;
			num6 = 1f * (num10 - value2) + num6 * value2;
			num7 = 1f * (num10 - value2) + num7 * value2;
			int num11 = (int)((screenPosition.X + (float)(screenWidth / 2)) / 16f);
			int num12 = 3;
			num12 = ((num11 <= caveBackX[0]) ? caveBackStyle[0] : ((num11 <= treeX[1]) ? caveBackStyle[1] : ((num11 > treeX[2]) ? caveBackStyle[3] : caveBackStyle[2])));
			num12 += 3;
			if (snowTiles > 300 && (screenPosition.Y + (float)screenHeight) / 16f < (float)(maxTilesY - 250))
			{
				num12 = 1;
			}
			if (jungleTiles > 80)
			{
				if (num12 == 1)
				{
					if (jungleTiles > snowTiles)
					{
						num12 = 11;
					}
				}
				else
				{
					num12 = 11;
				}
			}
			if (shroomTiles > 200)
			{
				num12 = 2;
			}
			if (num12 != ugBack)
			{
				oldUgBack = ugBack;
				ugBack = num12;
				ugBackTransition = 1f;
			}
			if (ugBackTransition > 0f)
			{
				ugBackTransition -= 0.25f;
			}
			if (ugBackTransition < 0f)
			{
				ugBackTransition = 0f;
			}
			int[] array = new int[6];
			int[] array2 = new int[6];
			for (int i = 0; i < 2; i++)
			{
				int num13 = ugBack;
				if (i == 1)
				{
					num13 = oldUgBack;
				}
				int[] array3 = new int[6];
				switch (num13)
				{
				case 0:
					array3[0] = 1;
					array3[1] = 2;
					array3[2] = 4;
					array3[3] = 3;
					array3[4] = 6;
					array3[5] = 5;
					break;
				case 1:
					if (iceBackStyle == 0)
					{
						array3[1] = 33;
						array3[3] = 32;
						array3[0] = 40;
						array3[2] = 34;
					}
					else if (iceBackStyle == 1)
					{
						array3[1] = 118;
						array3[3] = 117;
						array3[0] = 160;
						array3[2] = 161;
					}
					else if (iceBackStyle == 2)
					{
						array3[1] = 165;
						array3[3] = 167;
						array3[0] = 164;
						array3[2] = 166;
					}
					else
					{
						array3[1] = 120;
						array3[3] = 119;
						array3[0] = 162;
						array3[2] = 163;
					}
					array3[4] = array3[3];
					break;
				case 2:
					array3[0] = 62;
					array3[1] = 63;
					array3[2] = 64;
					array3[3] = 65;
					array3[4] = 143 + hellBackStyle;
					break;
				case 3:
					array3[0] = 66;
					array3[1] = 67;
					array3[2] = 68;
					array3[3] = 69;
					array3[4] = 128 + hellBackStyle;
					break;
				case 4:
					array3[0] = 70;
					array3[1] = 71;
					array3[2] = 68;
					array3[3] = 72;
					array3[4] = 128 + hellBackStyle;
					break;
				case 5:
					array3[0] = 73;
					array3[1] = 74;
					array3[2] = 75;
					array3[3] = 76;
					array3[4] = 131 + hellBackStyle;
					break;
				case 6:
					array3[0] = 77;
					array3[1] = 78;
					array3[2] = 79;
					array3[3] = 80;
					array3[4] = 134 + hellBackStyle;
					break;
				case 7:
					array3[0] = 77;
					array3[1] = 81;
					array3[2] = 79;
					array3[3] = 82;
					array3[4] = 134 + hellBackStyle;
					break;
				case 8:
					array3[0] = 83;
					array3[1] = 84;
					array3[2] = 85;
					array3[3] = 86;
					array3[4] = 137 + hellBackStyle;
					break;
				case 9:
					array3[0] = 83;
					array3[1] = 87;
					array3[2] = 88;
					array3[3] = 89;
					array3[4] = 137 + hellBackStyle;
					break;
				case 10:
					array3[0] = 121;
					array3[1] = 122;
					array3[2] = 123;
					array3[3] = 124;
					array3[4] = 140 + hellBackStyle;
					break;
				case 11:
					if (jungleBackStyle == 0)
					{
						array3[0] = 153;
						array3[1] = 147;
						array3[2] = 148;
						array3[3] = 149;
						array3[4] = 150 + hellBackStyle;
					}
					else
					{
						array3[0] = 146;
						array3[1] = 154;
						array3[2] = 155;
						array3[3] = 156;
						array3[4] = 157 + hellBackStyle;
					}
					break;
				}
				if (hellBackStyle == 0)
				{
					array3[5] = 125;
				}
				if (hellBackStyle == 1)
				{
					array3[5] = 126;
				}
				if (hellBackStyle == 2)
				{
					array3[5] = 127;
				}
				LoadBackground(array3[0]);
				LoadBackground(array3[1]);
				LoadBackground(array3[2]);
				LoadBackground(array3[3]);
				LoadBackground(array3[4]);
				LoadBackground(array3[5]);
				if (i == 0)
				{
					for (int j = 0; j < 6; j++)
					{
						array[j] = array3[j];
					}
				}
				else
				{
					for (int k = 0; k < 6; k++)
					{
						array2[k] = array3[k];
					}
				}
			}
			Lighting.defBrightness = 1.2f * (1f - value2) + 1f * value2;
			bgParallax = caveParallax;
			bgStart = (int)(0.0 - Math.IEEERemainder((double)num3 + (double)screenPosition.X * bgParallax, num3) - (double)(num3 / 2)) - (int)value.X;
			bgLoops = screenWidth / num3 + 2;
			bgTop = (int)((float)((int)worldSurface * 16 - 16) - screenPosition.Y + 16f);
			for (int l = 0; l < bgLoops; l++)
			{
				for (int m = 0; m < num3 / 16; m++)
				{
					float num14 = (float)bgStart + screenPosition.X;
					num14 = 0f - (float)Math.IEEERemainder(num14, 16.0);
					num14 = (float)Math.Round(num14);
					int num15 = (int)num14;
					if (num15 == -8)
					{
						num15 = 8;
					}
					float num16 = bgStart + num3 * l + m * 16 + 8;
					float num17 = bgTop;
					Microsoft.Xna.Framework.Color color = Lighting.GetColor((int)((num16 + screenPosition.X) / 16f), (int)((screenPosition.Y + num17) / 16f));
					color.R = (byte)((float)(int)color.R * num5);
					color.G = (byte)((float)(int)color.G * num6);
					color.B = (byte)((float)(int)color.B * num7);
					spriteBatch.Draw(backgroundTexture[array[0]], new Vector2(bgStart + num3 * l + 16 * m + num15, bgTop) + value, new Microsoft.Xna.Framework.Rectangle(16 * m + num15 + 16, 0, 16, 16), color);
					if (ugBackTransition > 0f)
					{
						Microsoft.Xna.Framework.Color color2 = color;
						color2.R = (byte)((float)(int)color2.R * ugBackTransition);
						color2.G = (byte)((float)(int)color2.G * ugBackTransition);
						color2.B = (byte)((float)(int)color2.B * ugBackTransition);
						color2.A = (byte)((float)(int)color2.A * ugBackTransition);
						spriteBatch.Draw(backgroundTexture[array2[0]], new Vector2(bgStart + num3 * l + 16 * m + num15, bgTop) + value, new Microsoft.Xna.Framework.Rectangle(16 * m + num15 + 16, 0, 16, 16), color2);
					}
				}
			}
			double num18 = maxTilesY - 230;
			double num19 = (int)((num18 - worldSurface) / 6.0) * 6;
			num18 = worldSurface + num19 - 5.0;
			bool flag = false;
			bool flag2 = false;
			bgTop = (int)((float)((int)worldSurface * 16) - screenPosition.Y + 16f);
			if (worldSurface * 16.0 <= (double)(screenPosition.Y + (float)screenHeight + (float)offScreenRange))
			{
				bgParallax = caveParallax;
				bgStart = (int)(0.0 - Math.IEEERemainder((double)num3 + (double)screenPosition.X * bgParallax, num3) - (double)(num3 / 2)) - (int)value.X;
				bgLoops = (screenWidth + (int)value.X * 2) / num3 + 2;
				if (worldSurface * 16.0 < (double)(screenPosition.Y - 16f))
				{
					bgStartY = (int)(Math.IEEERemainder(bgTop, backgroundHeight[2]) - (double)backgroundHeight[2]);
					bgLoopsY = (screenHeight - bgStartY + (int)value.Y * 2) / backgroundHeight[2] + 1;
				}
				else
				{
					bgStartY = bgTop;
					bgLoopsY = (screenHeight - bgTop + (int)value.Y * 2) / backgroundHeight[2] + 1;
				}
				if (rockLayer * 16.0 < (double)(screenPosition.Y + 600f))
				{
					bgLoopsY = (int)(rockLayer * 16.0 - (double)screenPosition.Y + 600.0 - (double)bgStartY) / backgroundHeight[2];
					flag2 = true;
				}
				float num20 = (float)bgStart + screenPosition.X;
				num20 = 0f - (float)Math.IEEERemainder(num20, 16.0);
				num20 = (float)Math.Round(num20);
				int num21 = (int)num20;
				if (num21 == -8)
				{
					num21 = 8;
				}
				for (int n = 0; n < bgLoops; n++)
				{
					for (int num22 = 0; num22 < bgLoopsY; num22++)
					{
						for (int num23 = 0; num23 < num3 / 16; num23++)
						{
							for (int num24 = 0; num24 < 6; num24++)
							{
								float num25 = bgStartY + num22 * 96 + num24 * 16 + 8;
								float num26 = bgStart + num3 * n + num23 * 16 + 8;
								int num27 = (int)((num26 + screenPosition.X) / 16f);
								int num28 = (int)((num25 + screenPosition.Y) / 16f);
								Microsoft.Xna.Framework.Color color3 = Lighting.GetColor(num27, num28);
								if (tile[num27, num28] == null)
								{
									tile[num27, num28] = new Tile();
								}
								if (color3.R > 0 || color3.G > 0 || color3.B > 0)
								{
									if (!drawToScreen)
									{
										VertexColors vertices;
										Lighting.GetColor4Slice_New(num27, num28, out vertices);
										tileBatch.Draw(backgroundTexture[array[1]], new Vector2(bgStart + num3 * n + 16 * num23 + num21, bgStartY + backgroundHeight[array2[1]] * num22 + 16 * num24) + value, new Microsoft.Xna.Framework.Rectangle(16 * num23 + num21 + 16, 16 * num24, 16, 16), vertices, Vector2.Zero, 1f, SpriteEffects.None);
									}
									else if ((color3.R > num || (double)(int)color3.G > (double)num * 1.1 || (double)(int)color3.B > (double)num * 1.2) && !tile[num27, num28].active() && wallLight[tile[num27, num28].wall] && ugBackTransition == 0f)
									{
										Lighting.GetColor9Slice(num27, num28, ref slices);
										try
										{
											for (int num29 = 0; num29 < 9; num29++)
											{
												int num30 = 0;
												int num31 = 0;
												int width = 4;
												int height = 4;
												Microsoft.Xna.Framework.Color color4 = color3;
												Microsoft.Xna.Framework.Color color5 = color3;
												switch (num29)
												{
												case 0:
													if (!tile[num27 - 1, num28 - 1].active())
													{
														color5 = slices[num29];
													}
													break;
												case 1:
													width = 8;
													num30 = 4;
													if (!tile[num27, num28 - 1].active())
													{
														color5 = slices[num29];
													}
													break;
												case 2:
													num30 = 12;
													if (!tile[num27 + 1, num28 - 1].active())
													{
														color5 = slices[num29];
													}
													break;
												case 3:
													height = 8;
													num31 = 4;
													if (!tile[num27 - 1, num28].active())
													{
														color5 = slices[num29];
													}
													break;
												case 4:
													width = 8;
													height = 8;
													num30 = 4;
													num31 = 4;
													break;
												case 5:
													num30 = 12;
													num31 = 4;
													height = 8;
													if (!tile[num27 + 1, num28].active())
													{
														color5 = slices[num29];
													}
													break;
												case 6:
													num31 = 12;
													if (!tile[num27 - 1, num28 + 1].active())
													{
														color5 = slices[num29];
													}
													break;
												case 7:
													width = 8;
													height = 4;
													num30 = 4;
													num31 = 12;
													if (!tile[num27, num28 + 1].active())
													{
														color5 = slices[num29];
													}
													break;
												case 8:
													num30 = 12;
													num31 = 12;
													if (!tile[num27 + 1, num28 + 1].active())
													{
														color5 = slices[num29];
													}
													break;
												}
												color4.R = (byte)((color3.R + color5.R) / 2);
												color4.G = (byte)((color3.G + color5.G) / 2);
												color4.B = (byte)((color3.B + color5.B) / 2);
												color4.R = (byte)((float)(int)color4.R * num5);
												color4.G = (byte)((float)(int)color4.G * num6);
												color4.B = (byte)((float)(int)color4.B * num7);
												spriteBatch.Draw(backgroundTexture[array[1]], new Vector2(bgStart + num3 * n + 16 * num23 + num30 + num21, bgStartY + backgroundHeight[array[1]] * num22 + 16 * num24 + num31) + value, new Microsoft.Xna.Framework.Rectangle(16 * num23 + num30 + num21 + 16, 16 * num24 + num31, width, height), color4);
												if (ugBackTransition > 0f)
												{
													Microsoft.Xna.Framework.Color color6 = color4;
													color6.R = (byte)((float)(int)color6.R * ugBackTransition);
													color6.G = (byte)((float)(int)color6.G * ugBackTransition);
													color6.B = (byte)((float)(int)color6.B * ugBackTransition);
													color6.A = (byte)((float)(int)color6.A * ugBackTransition);
													spriteBatch.Draw(backgroundTexture[array2[1]], new Vector2(bgStart + num3 * n + 16 * num23 + num30 + num21, bgStartY + backgroundHeight[array2[1]] * num22 + 16 * num24 + num31) + value, new Microsoft.Xna.Framework.Rectangle(16 * num23 + num30 + num21 + 16, 16 * num24 + num31, width, height), color6);
												}
											}
										}
										catch
										{
											color3.R = (byte)((float)(int)color3.R * num5);
											color3.G = (byte)((float)(int)color3.G * num6);
											color3.B = (byte)((float)(int)color3.B * num7);
											spriteBatch.Draw(backgroundTexture[array[1]], new Vector2(bgStart + num3 * n + 16 * num23 + num21, bgStartY + backgroundHeight[array[1]] * num22 + 16 * num24) + value, new Microsoft.Xna.Framework.Rectangle(16 * num23 + num21 + 16, 16 * num24, 16, 16), color3);
										}
									}
									else if ((color3.R > num2 || (double)(int)color3.G > (double)num2 * 1.1 || (double)(int)color3.B > (double)num2 * 1.2) && ugBackTransition == 0f)
									{
										Lighting.GetColor4Slice(num27, num28, ref slices);
										for (int num32 = 0; num32 < 4; num32++)
										{
											int num33 = 0;
											int num34 = 0;
											Microsoft.Xna.Framework.Color color7 = color3;
											Microsoft.Xna.Framework.Color color8 = slices[num32];
											switch (num32)
											{
											case 1:
												num33 = 8;
												break;
											case 2:
												num34 = 8;
												break;
											case 3:
												num33 = 8;
												num34 = 8;
												break;
											}
											color7.R = (byte)((color3.R + color8.R) / 2);
											color7.G = (byte)((color3.G + color8.G) / 2);
											color7.B = (byte)((color3.B + color8.B) / 2);
											color7.R = (byte)((float)(int)color7.R * num5);
											color7.G = (byte)((float)(int)color7.G * num6);
											color7.B = (byte)((float)(int)color7.B * num7);
											spriteBatch.Draw(backgroundTexture[array[1]], new Vector2(bgStart + num3 * n + 16 * num23 + num33 + num21, bgStartY + backgroundHeight[array[1]] * num22 + 16 * num24 + num34) + value, new Microsoft.Xna.Framework.Rectangle(16 * num23 + num33 + num21 + 16, 16 * num24 + num34, 8, 8), color7);
											if (ugBackTransition > 0f)
											{
												Microsoft.Xna.Framework.Color color9 = color7;
												color9.R = (byte)((float)(int)color9.R * ugBackTransition);
												color9.G = (byte)((float)(int)color9.G * ugBackTransition);
												color9.B = (byte)((float)(int)color9.B * ugBackTransition);
												color9.A = (byte)((float)(int)color9.A * ugBackTransition);
												spriteBatch.Draw(backgroundTexture[array2[1]], new Vector2(bgStart + num3 * n + 16 * num23 + num33 + num21, bgStartY + backgroundHeight[array2[1]] * num22 + 16 * num24 + num34) + value, new Microsoft.Xna.Framework.Rectangle(16 * num23 + num33 + num21 + 16, 16 * num24 + num34, 8, 8), color9);
											}
										}
									}
									else
									{
										color3.R = (byte)((float)(int)color3.R * num5);
										color3.G = (byte)((float)(int)color3.G * num6);
										color3.B = (byte)((float)(int)color3.B * num7);
										spriteBatch.Draw(backgroundTexture[array[1]], new Vector2(bgStart + num3 * n + 16 * num23 + num21, bgStartY + backgroundHeight[array[1]] * num22 + 16 * num24) + value, new Microsoft.Xna.Framework.Rectangle(16 * num23 + num21 + 16, 16 * num24, 16, 16), color3);
										if (ugBackTransition > 0f)
										{
											Microsoft.Xna.Framework.Color color10 = color3;
											color10.R = (byte)((float)(int)color10.R * ugBackTransition);
											color10.G = (byte)((float)(int)color10.G * ugBackTransition);
											color10.B = (byte)((float)(int)color10.B * ugBackTransition);
											color10.A = (byte)((float)(int)color10.A * ugBackTransition);
											spriteBatch.Draw(backgroundTexture[array2[1]], new Vector2(bgStart + num3 * n + 16 * num23 + num21, bgStartY + backgroundHeight[array2[1]] * num22 + 16 * num24) + value, new Microsoft.Xna.Framework.Rectangle(16 * num23 + num21 + 16, 16 * num24, 16, 16), color10);
										}
									}
								}
								else
								{
									color3.R = (byte)((float)(int)color3.R * num5);
									color3.G = (byte)((float)(int)color3.G * num6);
									color3.B = (byte)((float)(int)color3.B * num7);
									spriteBatch.Draw(backgroundTexture[array[1]], new Vector2(bgStart + num3 * n + 16 * num23 + num21, bgStartY + backgroundHeight[array[1]] * num22 + 16 * num24) + value, new Microsoft.Xna.Framework.Rectangle(16 * num23 + num21 + 16, 16 * num24, 16, 16), color3);
								}
							}
						}
					}
				}
				if (ugBackTransition > 0f)
				{
					for (int num35 = 0; num35 < bgLoops; num35++)
					{
						for (int num36 = 0; num36 < bgLoopsY; num36++)
						{
							for (int num37 = 0; num37 < num3 / 16; num37++)
							{
								for (int num38 = 0; num38 < 6; num38++)
								{
									float num39 = bgStartY + num36 * 96 + num38 * 16 + 8;
									float num40 = bgStart + num3 * num35 + num37 * 16 + 8;
									int num41 = (int)((num40 + screenPosition.X) / 16f);
									int num42 = (int)((num39 + screenPosition.Y) / 16f);
									Microsoft.Xna.Framework.Color color11 = Lighting.GetColor(num41, num42);
									if (tile[num41, num42] == null)
									{
										tile[num41, num42] = new Tile();
									}
									if (color11.R > 0 || color11.G > 0 || color11.B > 0)
									{
										VertexColors vertices2;
										Lighting.GetColor4Slice_New(num41, num42, out vertices2, ugBackTransition);
										byte a = (byte)(255f * ugBackTransition);
										vertices2.BottomLeftColor.A = a;
										vertices2.BottomRightColor.A = a;
										vertices2.TopLeftColor.A = a;
										vertices2.TopRightColor.A = a;
										tileBatch.Draw(backgroundTexture[array2[1]], new Vector2(bgStart + num3 * num35 + 16 * num37 + num21, bgStartY + backgroundHeight[array2[1]] * num36 + 16 * num38) + value, new Microsoft.Xna.Framework.Rectangle(16 * num37 + num21 + 16, 16 * num38, 16, 16), vertices2, Vector2.Zero, 1f, SpriteEffects.None);
									}
								}
							}
						}
					}
				}
				if (flag2)
				{
					bgParallax = caveParallax;
					bgStart = (int)(0.0 - Math.IEEERemainder((double)num3 + (double)screenPosition.X * bgParallax, num3) - (double)(num3 / 2)) - (int)value.X;
					bgLoops = (screenWidth + (int)value.X * 2) / num3 + 2;
					bgTop = bgStartY + bgLoopsY * backgroundHeight[2];
					if (bgTop > -32)
					{
						for (int num43 = 0; num43 < bgLoops; num43++)
						{
							for (int num44 = 0; num44 < num3 / 16; num44++)
							{
								float num45 = bgStart + num3 * num43 + num44 * 16 + 8;
								float num46 = bgTop;
								Microsoft.Xna.Framework.Color color12 = Lighting.GetColor((int)((num45 + screenPosition.X) / 16f), (int)((screenPosition.Y + num46) / 16f));
								color12.R = (byte)((float)(int)color12.R * num5);
								color12.G = (byte)((float)(int)color12.G * num6);
								color12.B = (byte)((float)(int)color12.B * num7);
								spriteBatch.Draw(backgroundTexture[array[2]], new Vector2(bgStart + num3 * num43 + 16 * num44 + num21, bgTop) + value, new Microsoft.Xna.Framework.Rectangle(16 * num44 + num21 + 16, 0, 16, 16), color12);
								if (ugBackTransition > 0f)
								{
									Microsoft.Xna.Framework.Color color13 = color12;
									color13.R = (byte)((float)(int)color13.R * ugBackTransition);
									color13.G = (byte)((float)(int)color13.G * ugBackTransition);
									color13.B = (byte)((float)(int)color13.B * ugBackTransition);
									color13.A = (byte)((float)(int)color13.A * ugBackTransition);
									spriteBatch.Draw(backgroundTexture[array2[2]], new Vector2(bgStart + num3 * num43 + 16 * num44 + num21, bgTop) + value, new Microsoft.Xna.Framework.Rectangle(16 * num44 + num21 + 16, 0, 16, 16), color13);
								}
							}
						}
					}
				}
			}
			bgTop = (int)((float)((int)rockLayer * 16) - screenPosition.Y + 16f + 600f - 8f);
			if (rockLayer * 16.0 <= (double)(screenPosition.Y + 600f))
			{
				bgParallax = caveParallax;
				bgStart = (int)(0.0 - Math.IEEERemainder((double)num3 + (double)screenPosition.X * bgParallax, num3) - (double)(num3 / 2)) - (int)value.X;
				bgLoops = (screenWidth + (int)value.X * 2) / num3 + 2;
				if (rockLayer * 16.0 + (double)screenHeight < (double)(screenPosition.Y - 16f))
				{
					bgStartY = (int)(Math.IEEERemainder(bgTop, backgroundHeight[3]) - (double)backgroundHeight[3]);
					bgLoopsY = (screenHeight - bgStartY + (int)value.Y * 2) / backgroundHeight[2] + 1;
				}
				else
				{
					bgStartY = bgTop;
					bgLoopsY = (screenHeight - bgTop + (int)value.Y * 2) / backgroundHeight[2] + 1;
				}
				if (num18 * 16.0 < (double)(screenPosition.Y + 600f))
				{
					bgLoopsY = (int)(num18 * 16.0 - (double)screenPosition.Y + 600.0 - (double)bgStartY) / backgroundHeight[2];
					flag = true;
				}
				float num47 = (float)bgStart + screenPosition.X;
				num47 = 0f - (float)Math.IEEERemainder(num47, 16.0);
				num47 = (float)Math.Round(num47);
				int num48 = (int)num47;
				if (num48 == -8)
				{
					num48 = 8;
				}
				for (int num49 = 0; num49 < bgLoops; num49++)
				{
					for (int num50 = 0; num50 < bgLoopsY; num50++)
					{
						for (int num51 = 0; num51 < num3 / 16; num51++)
						{
							for (int num52 = 0; num52 < 6; num52++)
							{
								float num53 = bgStartY + num50 * 96 + num52 * 16 + 8;
								float num54 = bgStart + num3 * num49 + num51 * 16 + 8;
								int num55 = (int)((num54 + screenPosition.X) / 16f);
								int num56 = (int)((num53 + screenPosition.Y) / 16f);
								Microsoft.Xna.Framework.Color color14 = Lighting.GetColor(num55, num56);
								if (tile[num55, num56] == null)
								{
									tile[num55, num56] = new Tile();
								}
								bool flag3 = false;
								if (caveParallax != 0f)
								{
									if (tile[num55 - 1, num56] == null)
									{
										tile[num55 - 1, num56] = new Tile();
									}
									if (tile[num55 + 1, num56] == null)
									{
										tile[num55 + 1, num56] = new Tile();
									}
									if (wallLight[tile[num55, num56].wall] || wallLight[tile[num55 - 1, num56].wall] || wallLight[tile[num55 + 1, num56].wall])
									{
										flag3 = true;
									}
								}
								else if (wallLight[tile[num55, num56].wall])
								{
									flag3 = true;
								}
								if ((!flag3 && color14.R != 0 && color14.G != 0 && color14.B != 0) || (color14.R <= 0 && color14.G <= 0 && color14.B <= 0) || (!wallLight[tile[num55, num56].wall] && caveParallax == 0f))
								{
									continue;
								}
								if (Lighting.lightMode < 2 && color14.R < 230 && color14.G < 230 && color14.B < 230 && ugBackTransition == 0f)
								{
									if ((color14.R > num || (double)(int)color14.G > (double)num * 1.1 || (double)(int)color14.B > (double)num * 1.2) && !tile[num55, num56].active())
									{
										Lighting.GetColor9Slice(num55, num56, ref slices);
										for (int num57 = 0; num57 < 9; num57++)
										{
											int num58 = 0;
											int num59 = 0;
											int width2 = 4;
											int height2 = 4;
											Microsoft.Xna.Framework.Color color15 = color14;
											Microsoft.Xna.Framework.Color color16 = color14;
											switch (num57)
											{
											case 0:
												if (!tile[num55 - 1, num56 - 1].active())
												{
													color16 = slices[num57];
												}
												break;
											case 1:
												width2 = 8;
												num58 = 4;
												if (!tile[num55, num56 - 1].active())
												{
													color16 = slices[num57];
												}
												break;
											case 2:
												num58 = 12;
												if (!tile[num55 + 1, num56 - 1].active())
												{
													color16 = slices[num57];
												}
												break;
											case 3:
												height2 = 8;
												num59 = 4;
												if (!tile[num55 - 1, num56].active())
												{
													color16 = slices[num57];
												}
												break;
											case 4:
												width2 = 8;
												height2 = 8;
												num58 = 4;
												num59 = 4;
												break;
											case 5:
												num58 = 12;
												num59 = 4;
												height2 = 8;
												if (!tile[num55 + 1, num56].active())
												{
													color16 = slices[num57];
												}
												break;
											case 6:
												num59 = 12;
												if (!tile[num55 - 1, num56 + 1].active())
												{
													color16 = slices[num57];
												}
												break;
											case 7:
												width2 = 8;
												height2 = 4;
												num58 = 4;
												num59 = 12;
												if (!tile[num55, num56 + 1].active())
												{
													color16 = slices[num57];
												}
												break;
											case 8:
												num58 = 12;
												num59 = 12;
												if (!tile[num55 + 1, num56 + 1].active())
												{
													color16 = slices[num57];
												}
												break;
											}
											color15.R = (byte)((color14.R + color16.R) / 2);
											color15.G = (byte)((color14.G + color16.G) / 2);
											color15.B = (byte)((color14.B + color16.B) / 2);
											color15.R = (byte)((float)(int)color15.R * num5);
											color15.G = (byte)((float)(int)color15.G * num6);
											color15.B = (byte)((float)(int)color15.B * num7);
											spriteBatch.Draw(backgroundTexture[array[3]], new Vector2(bgStart + num3 * num49 + 16 * num51 + num58 + num48, bgStartY + backgroundHeight[array[3]] * num50 + 16 * num52 + num59) + value, new Microsoft.Xna.Framework.Rectangle(16 * num51 + num58 + num48 + 16, 16 * num52 + num59, width2, height2), color15);
											if (ugBackTransition > 0f)
											{
												Microsoft.Xna.Framework.Color color17 = color15;
												color17.R = (byte)((float)(int)color17.R * ugBackTransition);
												color17.G = (byte)((float)(int)color17.G * ugBackTransition);
												color17.B = (byte)((float)(int)color17.B * ugBackTransition);
												color17.A = (byte)((float)(int)color17.A * ugBackTransition);
												spriteBatch.Draw(backgroundTexture[array2[3]], new Vector2(bgStart + num3 * num49 + 16 * num51 + num58 + num48, bgStartY + backgroundHeight[array2[3]] * num50 + 16 * num52 + num59) + value, new Microsoft.Xna.Framework.Rectangle(16 * num51 + num58 + num48 + 16, 16 * num52 + num59, width2, height2), color17);
											}
										}
									}
									else if (color14.R > num2 || (double)(int)color14.G > (double)num2 * 1.1 || (double)(int)color14.B > (double)num2 * 1.2)
									{
										Lighting.GetColor4Slice(num55, num56, ref slices);
										for (int num60 = 0; num60 < 4; num60++)
										{
											int num61 = 0;
											int num62 = 0;
											Microsoft.Xna.Framework.Color color18 = color14;
											Microsoft.Xna.Framework.Color color19 = slices[num60];
											switch (num60)
											{
											case 1:
												num61 = 8;
												break;
											case 2:
												num62 = 8;
												break;
											case 3:
												num61 = 8;
												num62 = 8;
												break;
											}
											color18.R = (byte)((color14.R + color19.R) / 2);
											color18.G = (byte)((color14.G + color19.G) / 2);
											color18.B = (byte)((color14.B + color19.B) / 2);
											color18.R = (byte)((float)(int)color18.R * num5);
											color18.G = (byte)((float)(int)color18.G * num6);
											color18.B = (byte)((float)(int)color18.B * num7);
											spriteBatch.Draw(backgroundTexture[array[3]], new Vector2(bgStart + num3 * num49 + 16 * num51 + num61 + num48, bgStartY + backgroundHeight[array[3]] * num50 + 16 * num52 + num62) + value, new Microsoft.Xna.Framework.Rectangle(16 * num51 + num61 + num48 + 16, 16 * num52 + num62, 8, 8), color18);
											if (ugBackTransition > 0f)
											{
												Microsoft.Xna.Framework.Color color20 = color18;
												color20.R = (byte)((float)(int)color20.R * ugBackTransition);
												color20.G = (byte)((float)(int)color20.G * ugBackTransition);
												color20.B = (byte)((float)(int)color20.B * ugBackTransition);
												color20.A = (byte)((float)(int)color20.A * ugBackTransition);
												spriteBatch.Draw(backgroundTexture[array2[3]], new Vector2(bgStart + num3 * num49 + 16 * num51 + num61 + num48, bgStartY + backgroundHeight[array2[3]] * num50 + 16 * num52 + num62) + value, new Microsoft.Xna.Framework.Rectangle(16 * num51 + num61 + num48 + 16, 16 * num52 + num62, 8, 8), color20);
											}
										}
									}
									else
									{
										color14.R = (byte)((float)(int)color14.R * num5);
										color14.G = (byte)((float)(int)color14.G * num6);
										color14.B = (byte)((float)(int)color14.B * num7);
										spriteBatch.Draw(backgroundTexture[array[3]], new Vector2(bgStart + num3 * num49 + 16 * num51 + num48, bgStartY + backgroundHeight[array[3]] * num50 + 16 * num52) + value, new Microsoft.Xna.Framework.Rectangle(16 * num51 + num48 + 16, 16 * num52, 16, 16), color14);
										if (ugBackTransition > 0f)
										{
											Microsoft.Xna.Framework.Color color21 = color14;
											color21.R = (byte)((float)(int)color21.R * ugBackTransition);
											color21.G = (byte)((float)(int)color21.G * ugBackTransition);
											color21.B = (byte)((float)(int)color21.B * ugBackTransition);
											color21.A = (byte)((float)(int)color21.A * ugBackTransition);
											spriteBatch.Draw(backgroundTexture[array2[3]], new Vector2(bgStart + num3 * num49 + 16 * num51 + num48, bgStartY + backgroundHeight[array2[3]] * num50 + 16 * num52) + value, new Microsoft.Xna.Framework.Rectangle(16 * num51 + num48 + 16, 16 * num52, 16, 16), color21);
										}
									}
								}
								else
								{
									color14.R = (byte)((float)(int)color14.R * num5);
									color14.G = (byte)((float)(int)color14.G * num6);
									color14.B = (byte)((float)(int)color14.B * num7);
									spriteBatch.Draw(backgroundTexture[array[3]], new Vector2(bgStart + num3 * num49 + 16 * num51 + num48, bgStartY + backgroundHeight[array[3]] * num50 + 16 * num52) + value, new Microsoft.Xna.Framework.Rectangle(16 * num51 + num48 + 16, 16 * num52, 16, 16), color14);
									if (ugBackTransition > 0f)
									{
										Microsoft.Xna.Framework.Color color22 = color14;
										color22.R = (byte)((float)(int)color22.R * ugBackTransition);
										color22.G = (byte)((float)(int)color22.G * ugBackTransition);
										color22.B = (byte)((float)(int)color22.B * ugBackTransition);
										color22.A = (byte)((float)(int)color22.A * ugBackTransition);
										spriteBatch.Draw(backgroundTexture[array2[3]], new Vector2(bgStart + num3 * num49 + 16 * num51 + num48, bgStartY + backgroundHeight[array2[3]] * num50 + 16 * num52) + value, new Microsoft.Xna.Framework.Rectangle(16 * num51 + num48 + 16, 16 * num52, 16, 16), color22);
									}
								}
							}
						}
					}
				}
				num3 = 128;
				if (flag)
				{
					bgParallax = caveParallax;
					bgStart = (int)(0.0 - Math.IEEERemainder((double)num3 + (double)screenPosition.X * bgParallax, num3) - (double)(num3 / 2)) - (int)value.X;
					bgLoops = (screenWidth + (int)value.X * 2) / num3 + 2;
					bgTop = bgStartY + bgLoopsY * backgroundHeight[2];
					for (int num63 = 0; num63 < bgLoops; num63++)
					{
						for (int num64 = 0; num64 < num3 / 16; num64++)
						{
							float num65 = bgStart + num3 * num63 + num64 * 16 + 8;
							float num66 = bgTop;
							Microsoft.Xna.Framework.Color color23 = Lighting.GetColor((int)((num65 + screenPosition.X) / 16f), (int)((screenPosition.Y + num66) / 16f));
							color23.R = (byte)((float)(int)color23.R * num5);
							color23.G = (byte)((float)(int)color23.G * num6);
							color23.B = (byte)((float)(int)color23.B * num7);
							spriteBatch.Draw(backgroundTexture[array[4]], new Vector2(bgStart + num3 * num63 + 16 * num64 + num48, bgTop) + value, new Microsoft.Xna.Framework.Rectangle(16 * num64 + num48 + 16, magmaBGFrame * 16, 16, 16), color23);
							if (ugBackTransition > 0f)
							{
								Microsoft.Xna.Framework.Color color24 = color23;
								color24.R = (byte)((float)(int)color24.R * ugBackTransition);
								color24.G = (byte)((float)(int)color24.G * ugBackTransition);
								color24.B = (byte)((float)(int)color24.B * ugBackTransition);
								color24.A = (byte)((float)(int)color24.A * ugBackTransition);
								spriteBatch.Draw(backgroundTexture[array2[4]], new Vector2(bgStart + num3 * num63 + 16 * num64 + num48, bgTop) + value, new Microsoft.Xna.Framework.Rectangle(16 * num64 + num48 + 16, magmaBGFrame * 16, 16, 16), color24);
							}
						}
					}
				}
			}
			bgTop = (int)((float)((int)num18 * 16) - screenPosition.Y + 16f + 600f) - 8;
			if (num18 * 16.0 <= (double)(screenPosition.Y + 600f))
			{
				bgStart = (int)(0.0 - Math.IEEERemainder((double)num3 + (double)screenPosition.X * bgParallax, num3) - (double)(num3 / 2)) - (int)value.X;
				bgLoops = (screenWidth + (int)value.X * 2) / num3 + 2;
				if (num18 * 16.0 + (double)screenHeight < (double)(screenPosition.Y - 16f))
				{
					bgStartY = (int)(Math.IEEERemainder(bgTop, backgroundHeight[2]) - (double)backgroundHeight[2]);
					bgLoopsY = (screenHeight - bgStartY + (int)value.Y * 2) / backgroundHeight[2] + 1;
				}
				else
				{
					bgStartY = bgTop;
					bgLoopsY = (screenHeight - bgTop + (int)value.Y * 2) / backgroundHeight[2] + 1;
				}
				num = (int)((double)num * 1.5);
				num2 = (int)((double)num2 * 1.5);
				float num67 = (float)bgStart + screenPosition.X;
				num67 = 0f - (float)Math.IEEERemainder(num67, 16.0);
				num67 = (float)Math.Round(num67);
				int num68 = (int)num67;
				if (num68 == -8)
				{
					num68 = 8;
				}
				for (int num69 = 0; num69 < bgLoops; num69++)
				{
					for (int num70 = 0; num70 < bgLoopsY; num70++)
					{
						for (int num71 = 0; num71 < num3 / 16; num71++)
						{
							for (int num72 = 0; num72 < 6; num72++)
							{
								float num73 = bgStartY + num70 * 96 + num72 * 16 + 8;
								float num74 = bgStart + num3 * num69 + num71 * 16 + 8;
								int num75 = (int)((num74 + screenPosition.X) / 16f);
								int num76 = (int)((num73 + screenPosition.Y) / 16f);
								Microsoft.Xna.Framework.Color color25 = Lighting.GetColor(num75, num76);
								if (tile[num75, num76] == null)
								{
									tile[num75, num76] = new Tile();
								}
								bool flag4 = false;
								if (caveParallax != 0f)
								{
									if (tile[num75 - 1, num76] == null)
									{
										tile[num75 - 1, num76] = new Tile();
									}
									if (tile[num75 + 1, num76] == null)
									{
										tile[num75 + 1, num76] = new Tile();
									}
									if (wallLight[tile[num75, num76].wall] || wallLight[tile[num75 - 1, num76].wall] || wallLight[tile[num75 + 1, num76].wall])
									{
										flag4 = true;
									}
								}
								else if (wallLight[tile[num75, num76].wall])
								{
									flag4 = true;
								}
								if ((!flag4 && color25.R != 0 && color25.G != 0 && color25.B != 0) || (color25.R <= 0 && color25.G <= 0 && color25.B <= 0) || (!wallLight[tile[num75, num76].wall] && caveParallax == 0f))
								{
									continue;
								}
								if (Lighting.lightMode < 2 && color25.R < 230 && color25.G < 230 && color25.B < 230)
								{
									if ((color25.R > num || (double)(int)color25.G > (double)num * 1.1 || (double)(int)color25.B > (double)num * 1.2) && !tile[num75, num76].active())
									{
										Lighting.GetColor9Slice(num75, num76, ref slices);
										for (int num77 = 0; num77 < 9; num77++)
										{
											int num78 = 0;
											int num79 = 0;
											int width3 = 4;
											int height3 = 4;
											Microsoft.Xna.Framework.Color color26 = color25;
											Microsoft.Xna.Framework.Color color27 = color25;
											switch (num77)
											{
											case 0:
												if (!tile[num75 - 1, num76 - 1].active())
												{
													color27 = slices[num77];
												}
												break;
											case 1:
												width3 = 8;
												num78 = 4;
												if (!tile[num75, num76 - 1].active())
												{
													color27 = slices[num77];
												}
												break;
											case 2:
												num78 = 12;
												if (!tile[num75 + 1, num76 - 1].active())
												{
													color27 = slices[num77];
												}
												break;
											case 3:
												height3 = 8;
												num79 = 4;
												if (!tile[num75 - 1, num76].active())
												{
													color27 = slices[num77];
												}
												break;
											case 4:
												width3 = 8;
												height3 = 8;
												num78 = 4;
												num79 = 4;
												break;
											case 5:
												num78 = 12;
												num79 = 4;
												height3 = 8;
												if (!tile[num75 + 1, num76].active())
												{
													color27 = slices[num77];
												}
												break;
											case 6:
												num79 = 12;
												if (!tile[num75 - 1, num76 + 1].active())
												{
													color27 = slices[num77];
												}
												break;
											case 7:
												width3 = 8;
												height3 = 4;
												num78 = 4;
												num79 = 12;
												if (!tile[num75, num76 + 1].active())
												{
													color27 = slices[num77];
												}
												break;
											case 8:
												num78 = 12;
												num79 = 12;
												if (!tile[num75 + 1, num76 + 1].active())
												{
													color27 = slices[num77];
												}
												break;
											}
											color26.R = (byte)((color25.R + color27.R) / 2);
											color26.G = (byte)((color25.G + color27.G) / 2);
											color26.B = (byte)((color25.B + color27.B) / 2);
											color26.R = (byte)((float)(int)color26.R * num5);
											color26.G = (byte)((float)(int)color26.G * num6);
											color26.B = (byte)((float)(int)color26.B * num7);
											spriteBatch.Draw(backgroundTexture[array[5]], new Vector2(bgStart + num3 * num69 + 16 * num71 + num78 + num68, bgStartY + backgroundHeight[2] * num70 + 16 * num72 + num79) + value, new Microsoft.Xna.Framework.Rectangle(16 * num71 + num78 + num68 + 16, 16 * num72 + backgroundHeight[2] * magmaBGFrame + num79, width3, height3), color26, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
										}
									}
									else if (color25.R > num2 || (double)(int)color25.G > (double)num2 * 1.1 || (double)(int)color25.B > (double)num2 * 1.2)
									{
										Lighting.GetColor4Slice(num75, num76, ref slices);
										for (int num80 = 0; num80 < 4; num80++)
										{
											int num81 = 0;
											int num82 = 0;
											Microsoft.Xna.Framework.Color color28 = color25;
											Microsoft.Xna.Framework.Color color29 = slices[num80];
											switch (num80)
											{
											case 1:
												num81 = 8;
												break;
											case 2:
												num82 = 8;
												break;
											case 3:
												num81 = 8;
												num82 = 8;
												break;
											}
											color28.R = (byte)((color25.R + color29.R) / 2);
											color28.G = (byte)((color25.G + color29.G) / 2);
											color28.B = (byte)((color25.B + color29.B) / 2);
											color28.R = (byte)((float)(int)color28.R * num5);
											color28.G = (byte)((float)(int)color28.G * num6);
											color28.B = (byte)((float)(int)color28.B * num7);
											spriteBatch.Draw(backgroundTexture[array[5]], new Vector2(bgStart + num3 * num69 + 16 * num71 + num81 + num68, bgStartY + backgroundHeight[2] * num70 + 16 * num72 + num82) + value, new Microsoft.Xna.Framework.Rectangle(16 * num71 + num81 + num68 + 16, 16 * num72 + backgroundHeight[2] * magmaBGFrame + num82, 8, 8), color28, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
										}
									}
									else
									{
										color25.R = (byte)((float)(int)color25.R * num5);
										color25.G = (byte)((float)(int)color25.G * num6);
										color25.B = (byte)((float)(int)color25.B * num7);
										spriteBatch.Draw(backgroundTexture[array[5]], new Vector2(bgStart + num3 * num69 + 16 * num71 + num68, bgStartY + backgroundHeight[2] * num70 + 16 * num72) + value, new Microsoft.Xna.Framework.Rectangle(16 * num71 + num68 + 16, 16 * num72 + backgroundHeight[2] * magmaBGFrame, 16, 16), color25, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
									}
								}
								else
								{
									color25.R = (byte)((float)(int)color25.R * num5);
									color25.G = (byte)((float)(int)color25.G * num6);
									color25.B = (byte)((float)(int)color25.B * num7);
									spriteBatch.Draw(backgroundTexture[array[5]], new Vector2(bgStart + num3 * num69 + 16 * num71 + num68, bgStartY + backgroundHeight[2] * num70 + 16 * num72) + value, new Microsoft.Xna.Framework.Rectangle(16 * num71 + num68 + 16, 16 * num72 + backgroundHeight[2] * magmaBGFrame, 16, 16), color25, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
								}
							}
						}
					}
				}
			}
			Lighting.brightness = Lighting.defBrightness;
			TimeLogger.DrawTime(3, stopwatch.Elapsed.TotalMilliseconds);
		}

		protected void RenderBackground()
		{
			if (!drawToScreen)
			{
				base.GraphicsDevice.SetRenderTarget(backWaterTarget);
				base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
				spriteBatch.Begin();
				tileBatch.Begin();
				try
				{
					drawWaters(true);
				}
				catch
				{
				}
				tileBatch.End();
				spriteBatch.End();
				base.GraphicsDevice.SetRenderTarget(null);
				base.GraphicsDevice.SetRenderTarget(backgroundTarget);
				base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
				spriteBatch.Begin();
				tileBatch.Begin();
				if (ignoreErrors)
				{
					try
					{
						DrawBackground();
					}
					catch (Exception e)
					{
						TimeLogger.DrawException(e);
					}
				}
				else
				{
					DrawBackground();
				}
				TimeLogger.DetailedDrawReset();
				spriteBatch.End();
				tileBatch.End();
				TimeLogger.DetailedDrawTime(33);
				base.GraphicsDevice.SetRenderTarget(null);
			}
		}

		protected void DrawToMap()
		{
			if (!mapEnabled)
			{
				return;
			}
			int num = maxTilesX / textureMaxWidth;
			int num2 = maxTilesY / textureMaxHeight;
			for (int i = 0; i <= num; i++)
			{
				for (int j = 0; j <= num2; j++)
				{
					if (!checkMap(i, j))
					{
						return;
					}
				}
			}
			if (clearMap)
			{
				for (int k = 0; k <= num; k++)
				{
					for (int l = 0; l <= num2; l++)
					{
						base.GraphicsDevice.SetRenderTarget(mapTarget[k, l]);
						base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
						base.GraphicsDevice.SetRenderTarget(null);
					}
				}
				clearMap = false;
			}
			int num3 = -1;
			int num4 = -1;
			bool flag = false;
			int num5 = 0;
			int num6 = mapMinY;
			int num7 = mapMinY;
			int num8 = mapMaxY;
			int num9 = mapMaxY;
			int num10 = 1;
			if (mapMinY / textureMaxHeight != mapMaxY / textureMaxHeight)
			{
				num8 = textureMaxHeight;
				num7 = textureMaxHeight;
				num10 = 2;
			}
			for (int m = 0; m < num10; m++)
			{
				switch (m)
				{
				case 0:
					mapMinY = num6;
					mapMaxY = num8;
					break;
				case 1:
					mapMinY = num7;
					mapMaxY = num9;
					break;
				}
				for (int n = mapMinX; n < mapMaxX; n++)
				{
					for (int num11 = mapMinY; num11 < mapMaxY; num11++)
					{
						MapTile mapTile = Map[n, num11];
						if (!mapTile.IsChanged || mapTarget[n / textureMaxWidth, num11 / textureMaxHeight].IsContentLost)
						{
							continue;
						}
						num5++;
						if (num5 >= maxMapUpdates)
						{
							continue;
						}
						if (loadMap)
						{
							loadMapLastX = n;
						}
						Map.ConsumeUpdate(n, num11);
						int num12 = n / textureMaxWidth;
						int num13 = num11 / textureMaxHeight;
						if (num12 != num3 || num13 != num4)
						{
							num3 = num12;
							num4 = num13;
							if (flag)
							{
								spriteBatch.End();
								base.GraphicsDevice.SetRenderTarget(null);
							}
							flag = true;
							base.GraphicsDevice.SetRenderTarget(mapTarget[num12, num13]);
							spriteBatch.Begin();
						}
						int num14 = n - num12 * textureMaxWidth;
						int num15 = num11 - num13 * textureMaxHeight;
						Microsoft.Xna.Framework.Color mapTileXnaColor = MapHelper.GetMapTileXnaColor(ref mapTile);
						int num16 = 1;
						int num17 = 1;
						int num18 = num11 + 1;
						while (num18 < mapMaxY)
						{
							MapTile other;
							MapTile mapTile2 = other = Map[n, num18];
							if (!mapTile2.IsChanged || !mapTile.Equals(ref other) || num18 / textureMaxHeight != num13)
							{
								break;
							}
							Map.ConsumeUpdate(n, num18);
							num16++;
							num18++;
							num11++;
						}
						if (num16 == 1)
						{
							for (num18 = n + 1; num18 < mapMaxX; num18++)
							{
								MapTile other;
								MapTile mapTile3 = other = Map[num18, num11];
								if (!mapTile3.IsChanged || !mapTile.Equals(ref other) || num18 / textureMaxWidth != num12)
								{
									break;
								}
								Map.ConsumeUpdate(num18, num11);
								num17++;
							}
						}
						spriteBatch.Draw(magicPixel, new Vector2(num14, num15), new Microsoft.Xna.Framework.Rectangle(0, 0, num17, num16), mapTileXnaColor, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					}
				}
			}
			for (int num19 = 0; num19 < MapHelper.numUpdateTile; num19++)
			{
				int num20 = MapHelper.updateTileX[num19];
				int num21 = MapHelper.updateTileY[num19];
				MapTile mapTile4 = Map[num20, num21];
				if (!mapTile4.IsChanged)
				{
					continue;
				}
				Map.ConsumeUpdate(num20, num21);
				int num22 = num20 / textureMaxWidth;
				int num23 = num21 / textureMaxHeight;
				if (num22 != num3 || num23 != num4)
				{
					num3 = num22;
					num4 = num23;
					if (flag)
					{
						spriteBatch.End();
						base.GraphicsDevice.SetRenderTarget(null);
					}
					flag = true;
					base.GraphicsDevice.SetRenderTarget(mapTarget[num22, num23]);
					spriteBatch.Begin();
				}
				int num24 = num20 - num22 * textureMaxWidth;
				int num25 = num21 - num23 * textureMaxHeight;
				Microsoft.Xna.Framework.Color mapTileXnaColor2 = MapHelper.GetMapTileXnaColor(ref mapTile4);
				spriteBatch.Draw(magicPixel, new Vector2(num24, num25), new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1), mapTileXnaColor2, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			}
			MapHelper.numUpdateTile = 0;
			if (flag)
			{
				spriteBatch.End();
				base.GraphicsDevice.SetRenderTarget(null);
			}
			mapReady = true;
			loadMapLastX = 0;
			loadMap = false;
			loadMapLock = false;
		}

		protected void DrawToMap_Section(int secX, int secY)
		{
			Stopwatch stopwatch = Stopwatch.StartNew();
			Microsoft.Xna.Framework.Color[] array = new Microsoft.Xna.Framework.Color[30000];
			int num = secX * 200;
			int num2 = num + 200;
			int num3 = secY * 150;
			int num4 = num3 + 150;
			int num5 = num / textureMaxWidth;
			int num6 = num3 / textureMaxHeight;
			int num7 = num % textureMaxWidth;
			int num8 = num3 % textureMaxHeight;
			if (!checkMap(num5, num6))
			{
				return;
			}
			int num9 = 0;
			Microsoft.Xna.Framework.Color transparent = Microsoft.Xna.Framework.Color.Transparent;
			for (int i = num3; i < num4; i++)
			{
				for (int j = num; j < num2; j++)
				{
					MapTile mapTile = Map[j, i];
					array[num9] = MapHelper.GetMapTileXnaColor(ref mapTile);
					num9++;
				}
			}
			base.GraphicsDevice.SetRenderTarget(mapTarget[num5, num6]);
			spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
			double totalMilliseconds = stopwatch.Elapsed.TotalMilliseconds;
			mapSectionTexture.SetData(array, 0, array.Length);
			double totalMillisecond = stopwatch.Elapsed.TotalMilliseconds;
			totalMilliseconds = stopwatch.Elapsed.TotalMilliseconds;
			spriteBatch.Draw(mapSectionTexture, new Vector2(num7, num8), Microsoft.Xna.Framework.Color.White);
			spriteBatch.End();
			base.GraphicsDevice.SetRenderTarget(null);
			double totalMillisecond2 = stopwatch.Elapsed.TotalMilliseconds;
			stopwatch.Stop();
		}

		public static string ValueToCoins(int value)
		{
			int num = value;
			int num2 = 0;
			int num3 = 0;
			int num4 = 0;
			int num5 = 0;
			while (num >= 1000000)
			{
				num -= 1000000;
				num2++;
			}
			while (num >= 10000)
			{
				num -= 10000;
				num3++;
			}
			while (num >= 100)
			{
				num -= 100;
				num4++;
			}
			num5 = num;
			string text = "";
			if (num2 > 0)
			{
				text += string.Format("{0} {1} ", num2, Language.GetTextValue("Currency.Platinum").ToLower());
			}
			if (num3 > 0)
			{
				text += string.Format("{0} {1} ", num3, Language.GetTextValue("Currency.Gold").ToLower());
			}
			if (num4 > 0)
			{
				text += string.Format("{0} {1} ", num4, Language.GetTextValue("Currency.Silver").ToLower());
			}
			if (num5 > 0)
			{
				text += string.Format("{0} {1} ", num5, Language.GetTextValue("Currency.Copper").ToLower());
			}
			if (text.Length > 0)
			{
				text = text.Substring(0, text.Length - 1);
			}
			return text;
		}

		protected void DrawMap()
		{
			string text = "";
			if (!mapEnabled || !mapReady)
			{
				return;
			}
			float num = 0f;
			float num2 = 0f;
			float num3 = num;
			float num4 = num2;
			float num5 = 2f;
			byte b = byte.MaxValue;
			int num138 = maxTilesX / textureMaxWidth;
			int num6 = maxTilesY / textureMaxHeight;
			float num7 = Lighting.offScreenTiles;
			float num8 = Lighting.offScreenTiles;
			float num9 = maxTilesX - Lighting.offScreenTiles - 1;
			float num10 = maxTilesY - Lighting.offScreenTiles - 42;
			float num11 = 0f;
			float num12 = 0f;
			num7 = 10f;
			num8 = 10f;
			num9 = maxTilesX - 10;
			num10 = maxTilesY - 10;
			for (int i = 0; i < mapTarget.GetLength(0); i++)
			{
				for (int j = 0; j < mapTarget.GetLength(1); j++)
				{
					if (mapTarget[i, j] != null)
					{
						if (mapTarget[i, j].IsContentLost && !mapWasContentLost[i, j])
						{
							mapWasContentLost[i, j] = true;
							refreshMap = true;
							clearMap = true;
						}
						else if (!mapTarget[i, j].IsContentLost && mapWasContentLost[i, j])
						{
							mapWasContentLost[i, j] = false;
						}
					}
				}
			}
			num = 200f;
			num2 = 300f;
			float num13 = 0f;
			float num14 = 0f;
			float num15 = num9 - 1f;
			float num16 = num10 - 1f;
			num5 = (mapFullscreen ? mapFullscreenScale : ((mapStyle != 1) ? mapOverlayScale : mapMinimapScale));
			bool flag = false;
			if (!mapFullscreen && num5 > 1f)
			{
				spriteBatch.End();
				spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise);
				flag = true;
			}
			if (mapFullscreen)
			{
				if (mouseLeft && base.IsActive && !CaptureManager.Instance.UsingMap)
				{
					if (mouseLeftRelease)
					{
						grabMapX = mouseX;
						grabMapY = mouseY;
					}
					else
					{
						float num17 = (float)mouseX - grabMapX;
						float num18 = (float)mouseY - grabMapY;
						grabMapX = mouseX;
						grabMapY = mouseY;
						num17 *= 0.06255f;
						num18 *= 0.06255f;
						mapFullscreenPos.X -= num17 * (16f / mapFullscreenScale);
						mapFullscreenPos.Y -= num18 * (16f / mapFullscreenScale);
					}
				}
				player[myPlayer].mouseInterface = true;
				float num19 = (float)screenWidth / (float)maxTilesX * 0.8f;
				if (mapFullscreenScale < num19)
				{
					mapFullscreenScale = num19;
				}
				if (mapFullscreenScale > 16f)
				{
					mapFullscreenScale = 16f;
				}
				num5 = mapFullscreenScale;
				b = byte.MaxValue;
				if (mapFullscreenPos.X < num7)
				{
					mapFullscreenPos.X = num7;
				}
				if (mapFullscreenPos.X > num9)
				{
					mapFullscreenPos.X = num9;
				}
				if (mapFullscreenPos.Y < num8)
				{
					mapFullscreenPos.Y = num8;
				}
				if (mapFullscreenPos.Y > num10)
				{
					mapFullscreenPos.Y = num10;
				}
				float num20 = mapFullscreenPos.X;
				float num21 = mapFullscreenPos.Y;
				if (resetMapFull)
				{
					resetMapFull = false;
					num20 = (screenPosition.X + (float)(screenWidth / 2)) / 16f;
					num21 = (screenPosition.Y + (float)(screenHeight / 2)) / 16f;
					mapFullscreenPos.X = num20;
					mapFullscreenPos.Y = num21;
				}
				num20 *= num5;
				num21 *= num5;
				num = 0f - num20 + (float)(screenWidth / 2);
				num2 = 0f - num21 + (float)(screenHeight / 2);
				num += num7 * num5;
				num2 += num8 * num5;
				float num22 = maxTilesX / 840;
				num22 *= mapFullscreenScale;
				float num23 = num;
				float num24 = num2;
				float num25 = mapTexture.Width;
				float num26 = mapTexture.Height;
				if (maxTilesX == 8400)
				{
					num22 *= 0.999f;
					num23 -= 40.6f * num22;
					num24 = num2 - 5f * num22;
					num25 -= 8.045f;
					num25 *= num22;
					num26 += 0.12f;
					num26 *= num22;
					if ((double)num22 < 1.2)
					{
						num26 += 1f;
					}
				}
				else if (maxTilesX == 6400)
				{
					num22 *= 1.09f;
					num23 -= 38.8f * num22;
					num24 = num2 - 3.85f * num22;
					num25 -= 13.6f;
					num25 *= num22;
					num26 -= 6.92f;
					num26 *= num22;
					if ((double)num22 < 1.2)
					{
						num26 += 2f;
					}
				}
				else if (maxTilesX == 6300)
				{
					num22 *= 1.09f;
					num23 -= 39.8f * num22;
					num24 = num2 - 4.08f * num22;
					num25 -= 26.69f;
					num25 *= num22;
					num26 -= 6.92f;
					num26 *= num22;
					if ((double)num22 < 1.2)
					{
						num26 += 2f;
					}
				}
				else if (maxTilesX == 4200)
				{
					num22 *= 0.998f;
					num23 -= 37.3f * num22;
					num24 -= 1.7f * num22;
					num25 -= 16f;
					num25 *= num22;
					num26 -= 8.31f;
					num26 *= num22;
				}
				spriteBatch.End();
				spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise);
				flag = true;
				if (screenPosition.Y > (float)((maxTilesY - 232) * 16))
				{
					spriteBatch.Draw(mapBG3Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, screenWidth, screenHeight), Microsoft.Xna.Framework.Color.White);
				}
				else if (player[myPlayer].ZoneDungeon)
				{
					spriteBatch.Draw(mapBG5Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, screenWidth, screenHeight), Microsoft.Xna.Framework.Color.White);
				}
				else if (Main.tile[(int)(player[myPlayer].Center.X / 16f), (int)(player[myPlayer].Center.Y / 16f)].wall == 87)
				{
					spriteBatch.Draw(mapBG14Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, screenWidth, screenHeight), Microsoft.Xna.Framework.Color.White);
				}
				else if ((double)screenPosition.Y > worldSurface * 16.0)
				{
					if (player[myPlayer].ZoneSnow)
					{
						spriteBatch.Draw(mapBG4Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, screenWidth, screenHeight), Microsoft.Xna.Framework.Color.White);
					}
					else if (player[myPlayer].ZoneJungle)
					{
						spriteBatch.Draw(mapBG13Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, screenWidth, screenHeight), bgColor);
					}
					else if (sandTiles > 1000)
					{
						spriteBatch.Draw(mapBG15Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, screenWidth, screenHeight), bgColor);
					}
					else
					{
						spriteBatch.Draw(mapBG2Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, screenWidth, screenHeight), Microsoft.Xna.Framework.Color.White);
					}
				}
				else
				{
					int num27 = (int)((screenPosition.X + (float)(screenWidth / 2)) / 16f);
					if (player[myPlayer].ZoneCorrupt)
					{
						spriteBatch.Draw(mapBG6Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, screenWidth, screenHeight), bgColor);
					}
					else if (player[myPlayer].ZoneCrimson)
					{
						spriteBatch.Draw(mapBG7Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, screenWidth, screenHeight), bgColor);
					}
					else if (player[myPlayer].ZoneHoly)
					{
						spriteBatch.Draw(mapBG8Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, screenWidth, screenHeight), bgColor);
					}
					else if ((double)(screenPosition.Y / 16f) < worldSurface + 10.0 && (num27 < 380 || num27 > maxTilesX - 380))
					{
						spriteBatch.Draw(mapBG11Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, screenWidth, screenHeight), bgColor);
					}
					else if (player[myPlayer].ZoneSnow)
					{
						spriteBatch.Draw(mapBG12Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, screenWidth, screenHeight), bgColor);
					}
					else if (player[myPlayer].ZoneJungle)
					{
						spriteBatch.Draw(mapBG9Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, screenWidth, screenHeight), bgColor);
					}
					else if (sandTiles > 1000)
					{
						spriteBatch.Draw(mapBG10Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, screenWidth, screenHeight), bgColor);
					}
					else
					{
						spriteBatch.Draw(mapBG1Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, screenWidth, screenHeight), bgColor);
					}
				}
				Microsoft.Xna.Framework.Rectangle destinationRectangle = new Microsoft.Xna.Framework.Rectangle((int)num23, (int)num24, (int)num25, (int)num26);
				spriteBatch.Draw(mapTexture, destinationRectangle, Microsoft.Xna.Framework.Color.White);
				if (num5 < 1f)
				{
					spriteBatch.End();
					spriteBatch.Begin();
					flag = false;
				}
			}
			else if (mapStyle == 1)
			{
				miniMapWidth = 240;
				miniMapHeight = 240;
				miniMapX = screenWidth - miniMapWidth - 52;
				miniMapY = 90;
				float num139 = (float)miniMapHeight / (float)maxTilesY;
				if ((double)mapMinimapScale < 0.2)
				{
					mapMinimapScale = 0.2f;
				}
				if (mapMinimapScale > 3f)
				{
					mapMinimapScale = 3f;
				}
				if ((double)mapMinimapAlpha < 0.01)
				{
					mapMinimapAlpha = 0.01f;
				}
				if (mapMinimapAlpha > 1f)
				{
					mapMinimapAlpha = 1f;
				}
				num5 = mapMinimapScale;
				b = (byte)(255f * mapMinimapAlpha);
				num = miniMapX;
				num2 = miniMapY;
				num3 = num;
				num4 = num2;
				float num28 = (screenPosition.X + (float)(screenWidth / 2)) / 16f;
				float num29 = (screenPosition.Y + (float)(screenHeight / 2)) / 16f;
				num11 = (0f - (num28 - (float)(int)((screenPosition.X + (float)(screenWidth / 2)) / 16f))) * num5;
				num12 = (0f - (num29 - (float)(int)((screenPosition.Y + (float)(screenHeight / 2)) / 16f))) * num5;
				num15 = (float)miniMapWidth / num5;
				num16 = (float)miniMapHeight / num5;
				num13 = (float)(int)num28 - num15 / 2f;
				num14 = (float)(int)num29 - num16 / 2f;
				float num30 = (float)maxTilesY + num14;
				num30 *= num5;
				float x = num3 - 6f;
				float y = num4 - 6f;
				spriteBatch.Draw(miniMapFrame2Texture, new Vector2(x, y), new Microsoft.Xna.Framework.Rectangle(0, 0, miniMapFrame2Texture.Width, miniMapFrame2Texture.Height), new Microsoft.Xna.Framework.Color(b, b, b, b), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			}
			else if (mapStyle == 2)
			{
				float num31 = (float)screenWidth / (float)maxTilesX;
				if (mapOverlayScale < num31)
				{
					mapOverlayScale = num31;
				}
				if (mapOverlayScale > 16f)
				{
					mapOverlayScale = 16f;
				}
				if ((double)mapOverlayAlpha < 0.01)
				{
					mapOverlayAlpha = 0.01f;
				}
				if (mapOverlayAlpha > 1f)
				{
					mapOverlayAlpha = 1f;
				}
				num5 = mapOverlayScale;
				b = (byte)(255f * mapOverlayAlpha);
				int maxTilesX2 = maxTilesX;
				int maxTilesY2 = maxTilesY;
				float num32 = (screenPosition.X + (float)(screenWidth / 2)) / 16f;
				float num33 = (screenPosition.Y + (float)(screenHeight / 2)) / 16f;
				num32 *= num5;
				num33 *= num5;
				num = 0f - num32 + (float)(screenWidth / 2);
				num2 = 0f - num33 + (float)(screenHeight / 2);
				num += num7 * num5;
				num2 += num8 * num5;
			}
			if (mapStyle == 1 && !mapFullscreen)
			{
				if (num13 < num7)
				{
					num -= (num13 - num7) * num5;
				}
				if (num14 < num8)
				{
					num2 -= (num14 - num8) * num5;
				}
			}
			num15 = num13 + num15;
			num16 = num14 + num16;
			if (num13 > num7)
			{
				num7 = num13;
			}
			if (num14 > num8)
			{
				num8 = num14;
			}
			if (num15 < num9)
			{
				num9 = num15;
			}
			if (num16 < num10)
			{
				num10 = num16;
			}
			float num34 = (float)textureMaxWidth * num5;
			float num35 = (float)textureMaxHeight * num5;
			float num36 = num;
			float num37 = 0f;
			for (int k = 0; k <= 4; k++)
			{
				if (!((float)((k + 1) * textureMaxWidth) > num7) || !((float)(k * textureMaxWidth) < num7 + num9))
				{
					continue;
				}
				for (int l = 0; l <= num6; l++)
				{
					if ((float)((l + 1) * textureMaxHeight) > num8 && (float)(l * textureMaxHeight) < num8 + num10)
					{
						float num38 = num + (float)(int)((float)k * num34);
						float num39 = num2 + (float)(int)((float)l * num35);
						float num40 = k * textureMaxWidth;
						float num41 = l * textureMaxHeight;
						float num42 = 0f;
						float num43 = 0f;
						if (num40 < num7)
						{
							num42 = num7 - num40;
							num38 = num;
						}
						else
						{
							num38 -= num7 * num5;
						}
						if (num41 < num8)
						{
							num43 = num8 - num41;
							num39 = num2;
						}
						else
						{
							num39 -= num8 * num5;
						}
						num38 = num36;
						float num44 = textureMaxWidth;
						float num45 = textureMaxHeight;
						float num46 = (k + 1) * textureMaxWidth;
						float num47 = (l + 1) * textureMaxHeight;
						if (num46 >= num9)
						{
							num44 -= num46 - num9;
						}
						if (num47 >= num10)
						{
							num45 -= num47 - num10;
						}
						num38 += num11;
						num39 += num12;
						if (num44 > num42)
						{
							spriteBatch.Draw(mapTarget[k, l], new Vector2(num38, num39), new Microsoft.Xna.Framework.Rectangle((int)num42, (int)num43, (int)num44 - (int)num42, (int)num45 - (int)num43), new Microsoft.Xna.Framework.Color(b, b, b, b), 0f, default(Vector2), num5, SpriteEffects.None, 0f);
						}
						num37 = (float)((int)num44 - (int)num42) * num5;
					}
					if (l == num6)
					{
						num36 += num37;
					}
				}
			}
			if (flag)
			{
				spriteBatch.End();
				spriteBatch.Begin();
			}
			if (!mapFullscreen)
			{
				if (mapStyle == 2)
				{
					float num48 = (num5 * 0.2f * 2f + 1f) / 3f;
					if (num48 > 1f)
					{
						num48 = 1f;
					}
					if (num5 < 10f)
					{
						for (int m = 0; m < 200; m++)
						{
							if (npc[m].active && npc[m].townNPC)
							{
								int num49 = NPC.TypeToNum(npc[m].type);
								if (num49 > 0)
								{
									SpriteEffects effects = SpriteEffects.None;
									if (npc[m].direction > 0)
									{
										effects = SpriteEffects.FlipHorizontally;
									}
									float num50 = (npc[m].position.X + (float)(npc[m].width / 2)) / 16f * num5;
									float num51 = (npc[m].position.Y + (float)(npc[m].height / 2)) / 16f * num5;
									num50 += num;
									num51 += num2;
									num50 -= 10f * num5;
									num51 -= 10f * num5;
									spriteBatch.Draw(npcHeadTexture[num49], new Vector2(num50, num51), new Microsoft.Xna.Framework.Rectangle(0, 0, npcHeadTexture[num49].Width, npcHeadTexture[num49].Height), new Microsoft.Xna.Framework.Color(b, b, b, b), 0f, new Vector2(npcHeadTexture[num49].Width / 2, npcHeadTexture[num49].Height / 2), num48, effects, 0f);
								}
							}
							if (!npc[m].active || npc[m].GetBossHeadTextureIndex() == -1)
							{
								continue;
							}
							float bossHeadRotation = npc[m].GetBossHeadRotation();
							SpriteEffects bossHeadSpriteEffects = npc[m].GetBossHeadSpriteEffects();
							Vector2 vector = npc[m].Center + new Vector2(0f, npc[m].gfxOffY);
							if (npc[m].type == 134)
							{
								Vector2 center = npc[m].Center;
								int num52 = 1;
								int num53 = (int)npc[m].ai[0];
								while (num52 < 15 && npc[num53].active && npc[num53].type >= 134 && npc[num53].type <= 136)
								{
									num52++;
									center += npc[num53].Center;
									num53 = (int)npc[num53].ai[0];
								}
								center /= (float)num52;
								vector = center;
							}
							int bossHeadTextureIndex = npc[m].GetBossHeadTextureIndex();
							float num54 = vector.X / 16f * num5;
							float num55 = vector.Y / 16f * num5;
							num54 += num;
							num55 += num2;
							num54 -= 10f * num5;
							num55 -= 10f * num5;
							spriteBatch.Draw(npcHeadBossTexture[bossHeadTextureIndex], new Vector2(num54, num55), null, new Microsoft.Xna.Framework.Color(b, b, b, b), bossHeadRotation, npcHeadBossTexture[bossHeadTextureIndex].Size() / 2f, num48, bossHeadSpriteEffects, 0f);
						}
						spriteBatch.End();
						spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
						for (int n = 0; n < 16; n++)
						{
							if (player[n].active && !player[n].dead && n != myPlayer && ((!player[myPlayer].hostile && !player[n].hostile) || (player[myPlayer].team == player[n].team && player[n].team != 0) || n == myPlayer))
							{
								float num56 = (player[n].position.X + (float)(player[n].width / 2)) / 16f * num5;
								float num57 = player[n].position.Y / 16f * num5;
								num56 += num;
								num57 += num2;
								num56 -= 6f;
								num57 -= 2f;
								num57 -= 2f - num5 / 5f * 2f;
								num56 -= 10f * num5;
								num57 -= 10f * num5;
								DrawPlayerHead(player[n], num56, num57, (float)(int)b / 255f, num48);
							}
						}
						spriteBatch.End();
						spriteBatch.Begin();
					}
				}
				if (mapStyle == 1)
				{
					float num58 = num3 - 6f;
					float num59 = num4 - 6f;
					float num60 = (num5 * 0.25f * 2f + 1f) / 3f;
					if (num60 > 1f)
					{
						num60 = 1f;
					}
					for (int num61 = 0; num61 < 200; num61++)
					{
						if (npc[num61].active && npc[num61].townNPC)
						{
							int num62 = NPC.TypeToNum(npc[num61].type);
							if (num62 > 0)
							{
								SpriteEffects effects2 = SpriteEffects.None;
								if (npc[num61].direction > 0)
								{
									effects2 = SpriteEffects.FlipHorizontally;
								}
								float num63 = ((npc[num61].position.X + (float)(npc[num61].width / 2)) / 16f - num13) * num5;
								float num64 = ((npc[num61].position.Y + npc[num61].gfxOffY + (float)(npc[num61].height / 2)) / 16f - num14) * num5;
								num63 += num3;
								num64 += num4;
								num64 -= 2f * num5 / 5f;
								if (num63 > (float)(miniMapX + 12) && num63 < (float)(miniMapX + miniMapWidth - 16) && num64 > (float)(miniMapY + 10) && num64 < (float)(miniMapY + miniMapHeight - 14))
								{
									spriteBatch.Draw(npcHeadTexture[num62], new Vector2(num63 + num11, num64 + num12), new Microsoft.Xna.Framework.Rectangle(0, 0, npcHeadTexture[num62].Width, npcHeadTexture[num62].Height), new Microsoft.Xna.Framework.Color(b, b, b, b), 0f, new Vector2(npcHeadTexture[num62].Width / 2, npcHeadTexture[num62].Height / 2), num60, effects2, 0f);
									float num65 = num63 - (float)(npcHeadTexture[num62].Width / 2) * num60;
									float num66 = num64 - (float)(npcHeadTexture[num62].Height / 2) * num60;
									float num67 = num65 + (float)npcHeadTexture[num62].Width * num60;
									float num68 = num66 + (float)npcHeadTexture[num62].Height * num60;
									if ((float)mouseX >= num65 && (float)mouseX <= num67 && (float)mouseY >= num66 && (float)mouseY <= num68)
									{
										string fullName = npc[num61].FullName;
										text = fullName;
									}
								}
							}
						}
						if (!npc[num61].active || npc[num61].GetBossHeadTextureIndex() == -1)
						{
							continue;
						}
						float bossHeadRotation2 = npc[num61].GetBossHeadRotation();
						SpriteEffects bossHeadSpriteEffects2 = npc[num61].GetBossHeadSpriteEffects();
						Vector2 vector2 = npc[num61].Center + new Vector2(0f, npc[num61].gfxOffY);
						if (npc[num61].type == 134)
						{
							Vector2 center2 = npc[num61].Center;
							int num69 = 1;
							int num70 = (int)npc[num61].ai[0];
							while (num69 < 15 && npc[num70].active && npc[num70].type >= 134 && npc[num70].type <= 136)
							{
								num69++;
								center2 += npc[num70].Center;
								num70 = (int)npc[num70].ai[0];
							}
							center2 /= (float)num69;
							vector2 = center2;
						}
						int bossHeadTextureIndex2 = npc[num61].GetBossHeadTextureIndex();
						float num71 = (vector2.X / 16f - num13) * num5;
						float num72 = (vector2.Y / 16f - num14) * num5;
						num71 += num3;
						num72 += num4;
						num72 -= 2f * num5 / 5f;
						if (num71 > (float)(miniMapX + 12) && num71 < (float)(miniMapX + miniMapWidth - 16) && num72 > (float)(miniMapY + 10) && num72 < (float)(miniMapY + miniMapHeight - 14))
						{
							spriteBatch.Draw(npcHeadBossTexture[bossHeadTextureIndex2], new Vector2(num71 + num11, num72 + num12), null, new Microsoft.Xna.Framework.Color(b, b, b, b), bossHeadRotation2, npcHeadBossTexture[bossHeadTextureIndex2].Size() / 2f, num60, bossHeadSpriteEffects2, 0f);
							float num73 = num71 - (float)(npcHeadBossTexture[bossHeadTextureIndex2].Width / 2) * num60;
							float num74 = num72 - (float)(npcHeadBossTexture[bossHeadTextureIndex2].Height / 2) * num60;
							float num75 = num73 + (float)npcHeadBossTexture[bossHeadTextureIndex2].Width * num60;
							float num76 = num74 + (float)npcHeadBossTexture[bossHeadTextureIndex2].Height * num60;
							if ((float)mouseX >= num73 && (float)mouseX <= num75 && (float)mouseY >= num74 && (float)mouseY <= num76)
							{
								text = npc[num61].FullName;
							}
						}
					}
					spriteBatch.End();
					spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
					for (int num77 = 0; num77 < 16; num77++)
					{
						if (!player[num77].active || ((player[myPlayer].hostile || player[num77].hostile) && (player[myPlayer].team != player[num77].team || player[num77].team == 0) && num77 != myPlayer))
						{
							continue;
						}
						float num78 = ((player[num77].position.X + (float)(player[num77].width / 2)) / 16f - num13) * num5;
						float num79 = ((player[num77].position.Y + player[num77].gfxOffY + (float)(player[num77].height / 2)) / 16f - num14) * num5;
						num78 += num3;
						num79 += num4;
						num78 -= 6f;
						num79 -= 6f;
						num79 -= 2f - num5 / 5f * 2f;
						num78 += num11;
						num79 += num12;
						if (screenPosition.X != leftWorld + 640f + 16f && screenPosition.X + (float)screenWidth != rightWorld - 640f - 32f && screenPosition.Y != topWorld + 640f + 16f && !(screenPosition.Y + (float)screenHeight > bottomWorld - 640f - 32f) && num77 == myPlayer && zoomX == 0f && zoomY == 0f)
						{
							num78 = num3 + (float)(miniMapWidth / 2);
							num79 = num4 + (float)(miniMapHeight / 2);
							num79 -= 3f;
							num78 -= 4f;
						}
						if (!player[num77].dead && num78 > (float)(miniMapX + 6) && num78 < (float)(miniMapX + miniMapWidth - 16) && num79 > (float)(miniMapY + 6) && num79 < (float)(miniMapY + miniMapHeight - 14))
						{
							DrawPlayerHead(player[num77], num78, num79, (float)(int)b / 255f, num60);
							if (num77 != myPlayer)
							{
								float num80 = num78 + 4f - 14f * num60;
								float num81 = num79 + 2f - 14f * num60;
								float num82 = num80 + 28f * num60;
								float num83 = num81 + 28f * num60;
								if ((float)mouseX >= num80 && (float)mouseX <= num82 && (float)mouseY >= num81 && (float)mouseY <= num83)
								{
									text = player[num77].name;
								}
							}
						}
						if (!player[num77].showLastDeath)
						{
							continue;
						}
						num78 = (player[num77].lastDeathPostion.X / 16f - num13) * num5;
						num79 = (player[num77].lastDeathPostion.Y / 16f - num14) * num5;
						num78 += num3;
						num79 += num4;
						num79 -= 2f - num5 / 5f * 2f;
						num78 += num11;
						num79 += num12;
						if (num78 > (float)(miniMapX + 8) && num78 < (float)(miniMapX + miniMapWidth - 18) && num79 > (float)(miniMapY + 8) && num79 < (float)(miniMapY + miniMapHeight - 16))
						{
							spriteBatch.Draw(mapDeathTexture, new Vector2(num78, num79), new Microsoft.Xna.Framework.Rectangle(0, 0, mapDeathTexture.Width, mapDeathTexture.Height), Microsoft.Xna.Framework.Color.White, 0f, new Vector2((float)mapDeathTexture.Width * 0.5f, (float)mapDeathTexture.Height * 0.5f), num60, SpriteEffects.None, 0f);
							float num84 = num78 + 4f - 14f * num60;
							float num85 = num79 + 2f - 14f * num60;
							num84 -= 4f;
							num85 -= 4f;
							float num86 = num84 + 28f * num60;
							float num87 = num85 + 28f * num60;
							if ((float)mouseX >= num84 && (float)mouseX <= num86 && (float)mouseY >= num85 && (float)mouseY <= num87)
							{
								TimeSpan timeSpan = DateTime.Now - player[num77].lastDeathTime;
								string arg = player[num77].name + " died ";
								arg = ((timeSpan.Days == 1) ? (arg + timeSpan.Days + " day") : ((timeSpan.Days > 0) ? (arg + timeSpan.Days + " days") : ((timeSpan.Hours == 1) ? (arg + timeSpan.Hours + " hour") : ((timeSpan.Hours > 0) ? (arg + timeSpan.Hours + " hours") : ((timeSpan.Minutes == 1) ? (arg + timeSpan.Minutes + " minute") : ((timeSpan.Minutes > 0) ? (arg + timeSpan.Minutes + " minutes") : ((timeSpan.Seconds != 1) ? (arg + timeSpan.Seconds + " seconds") : (arg + timeSpan.Seconds + " second"))))))));
								text = arg + " ago";
							}
						}
					}
					spriteBatch.End();
					spriteBatch.Begin();
					spriteBatch.Draw(miniMapFrameTexture, new Vector2(num58, num59), new Microsoft.Xna.Framework.Rectangle(0, 0, miniMapFrameTexture.Width, miniMapFrameTexture.Height), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					for (int num88 = 0; num88 < 3; num88++)
					{
						float num89 = num58 + 148f + (float)(num88 * 26);
						float num90 = num59 + 234f;
						if (!((float)mouseX > num89) || !((float)mouseX < num89 + 22f) || !((float)mouseY > num90) || !((float)mouseY < num90 + 22f))
						{
							continue;
						}
						player[myPlayer].mouseInterface = true;
						spriteBatch.Draw(miniMapButtonTexture[num88], new Vector2(num89, num90), new Microsoft.Xna.Framework.Rectangle(0, 0, miniMapButtonTexture[num88].Width, miniMapButtonTexture[num88].Height), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						if (mouseLeft)
						{
							if (mouseLeftRelease)
							{
								PlaySound(12);
							}
							switch (num88)
							{
							case 0:
								mapMinimapScale = 1.25f;
								break;
							case 1:
								mapMinimapScale *= 0.975f;
								break;
							case 2:
								mapMinimapScale *= 1.025f;
								break;
							}
						}
					}
				}
			}
			if (mapFullscreen)
			{
				int num91 = (int)((0f - num + (float)mouseX) / num5 + num7);
				int num92 = (int)((0f - num2 + (float)mouseY) / num5 + num8);
				bool flag2 = false;
				if ((float)num91 < num7)
				{
					flag2 = true;
				}
				if ((float)num91 >= num9)
				{
					flag2 = true;
				}
				if ((float)num92 < num8)
				{
					flag2 = true;
				}
				if ((float)num92 >= num10)
				{
					flag2 = true;
				}
				if (!flag2 && Map[num91, num92].Light > 40)
				{
					int type = Map[num91, num92].Type;
					int num93 = MapHelper.tileLookup[21];
					int num94 = MapHelper.tileOptionCounts[21];
					int num95 = MapHelper.tileLookup[88];
					int num96 = MapHelper.tileOptionCounts[88];
					if (type >= num93 && type < num93 + num94)
					{
						Tile tile = Main.tile[num91, num92];
						if (tile == null)
						{
							tile = new Tile();
							Main.tile[num91, num92] = tile;
						}
						int num97 = num91;
						int num98 = num92;
						if (tile.frameX % 36 != 0)
						{
							num97--;
						}
						if (tile.frameY % 36 != 0)
						{
							num98--;
						}
						int num99 = Chest.FindChest(num97, num98);
						text = ((num99 < 0) ? Lang.chestType[0].Value : ((!(chest[num99].name != "")) ? Lang.chestType[tile.frameX / 36].Value : (Lang.chestType[tile.frameX / 36].Value + ": " + chest[num99].name)));
					}
					else if (type >= num95 && type < num95 + num96)
					{
						Tile tile2 = Main.tile[num91, num92];
						if (tile2 == null)
						{
							tile2 = new Tile();
							Main.tile[num91, num92] = tile2;
						}
						int num100 = num91;
						int num101 = num92;
						num100 -= tile2.frameX % 54 / 18;
						if (tile2.frameY % 36 != 0)
						{
							num101--;
						}
						int num102 = Chest.FindChest(num100, num101);
						text = ((num102 < 0) ? Lang.dresserType[0].Value : ((!(chest[num102].name != "")) ? Lang.dresserType[tile2.frameX / 54].Value : string.Concat(Lang.dresserType[tile2.frameX / 54], ": ", chest[num102].name)));
					}
					else
					{
						text = Lang.GetMapObjectName(type);
					}
				}
				float num103 = (num5 * 0.25f * 2f + 1f) / 3f;
				if (num103 > 1f)
				{
					num103 = 1f;
				}
				num103 = 1f;
				for (int num104 = 0; num104 < 200; num104++)
				{
					if (npc[num104].active && npc[num104].townNPC)
					{
						int num105 = NPC.TypeToNum(npc[num104].type);
						if (num105 > 0)
						{
							SpriteEffects effects3 = SpriteEffects.None;
							if (npc[num104].direction > 0)
							{
								effects3 = SpriteEffects.FlipHorizontally;
							}
							float num106 = (npc[num104].position.X + (float)(npc[num104].width / 2)) / 16f * num5;
							float num107 = (npc[num104].position.Y + npc[num104].gfxOffY + (float)(npc[num104].height / 2)) / 16f * num5;
							num106 += num;
							num107 += num2;
							num106 -= 10f * num5;
							num107 -= 10f * num5;
							spriteBatch.Draw(npcHeadTexture[num105], new Vector2(num106, num107), new Microsoft.Xna.Framework.Rectangle(0, 0, npcHeadTexture[num105].Width, npcHeadTexture[num105].Height), new Microsoft.Xna.Framework.Color(b, b, b, b), 0f, new Vector2(npcHeadTexture[num105].Width / 2, npcHeadTexture[num105].Height / 2), num103, effects3, 0f);
							float num108 = num106 - (float)(npcHeadTexture[num105].Width / 2) * num103;
							float num109 = num107 - (float)(npcHeadTexture[num105].Height / 2) * num103;
							float num110 = num108 + (float)npcHeadTexture[num105].Width * num103;
							float num111 = num109 + (float)npcHeadTexture[num105].Height * num103;
							if ((float)mouseX >= num108 && (float)mouseX <= num110 && (float)mouseY >= num109 && (float)mouseY <= num111)
							{
								string fullName2 = npc[num104].FullName;
								text = fullName2;
							}
						}
					}
					if (!npc[num104].active || npc[num104].GetBossHeadTextureIndex() == -1)
					{
						continue;
					}
					float bossHeadRotation3 = npc[num104].GetBossHeadRotation();
					SpriteEffects bossHeadSpriteEffects3 = npc[num104].GetBossHeadSpriteEffects();
					Vector2 vector3 = npc[num104].Center + new Vector2(0f, npc[num104].gfxOffY);
					if (npc[num104].type == 134)
					{
						Vector2 center3 = npc[num104].Center;
						int num112 = 1;
						int num113 = (int)npc[num104].ai[0];
						while (num112 < 15 && npc[num113].active && npc[num113].type >= 134 && npc[num113].type <= 136)
						{
							num112++;
							center3 += npc[num113].Center;
							num113 = (int)npc[num113].ai[0];
						}
						center3 /= (float)num112;
						vector3 = center3;
					}
					int bossHeadTextureIndex3 = npc[num104].GetBossHeadTextureIndex();
					float num114 = vector3.X / 16f * num5;
					float num115 = vector3.Y / 16f * num5;
					num114 += num;
					num115 += num2;
					num114 -= 10f * num5;
					num115 -= 10f * num5;
					spriteBatch.Draw(npcHeadBossTexture[bossHeadTextureIndex3], new Vector2(num114, num115), null, new Microsoft.Xna.Framework.Color(b, b, b, b), bossHeadRotation3, npcHeadBossTexture[bossHeadTextureIndex3].Size() / 2f, num103, bossHeadSpriteEffects3, 0f);
					float num116 = num114 - (float)(npcHeadBossTexture[bossHeadTextureIndex3].Width / 2) * num103;
					float num117 = num115 - (float)(npcHeadBossTexture[bossHeadTextureIndex3].Height / 2) * num103;
					float num118 = num116 + (float)npcHeadBossTexture[bossHeadTextureIndex3].Width * num103;
					float num119 = num117 + (float)npcHeadBossTexture[bossHeadTextureIndex3].Height * num103;
					if ((float)mouseX >= num116 && (float)mouseX <= num118 && (float)mouseY >= num117 && (float)mouseY <= num119)
					{
						text = npc[num104].TypeName;
					}
				}
				bool flag3 = false;
				spriteBatch.End();
				spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
				for (int num120 = 0; num120 < 16; num120++)
				{
					if (player[num120].active && ((!player[myPlayer].hostile && !player[num120].hostile) || (player[myPlayer].team == player[num120].team && player[num120].team != 0) || num120 == myPlayer) && player[num120].showLastDeath)
					{
						float num121 = (player[num120].lastDeathPostion.X / 16f - num13) * num5;
						float num122 = (player[num120].lastDeathPostion.Y / 16f - num14) * num5;
						num121 += num;
						num122 += num2;
						num122 -= 2f - num5 / 5f * 2f;
						num121 -= 10f * num5;
						num122 -= 10f * num5;
						spriteBatch.Draw(mapDeathTexture, new Vector2(num121, num122), new Microsoft.Xna.Framework.Rectangle(0, 0, mapDeathTexture.Width, mapDeathTexture.Height), Microsoft.Xna.Framework.Color.White, 0f, new Vector2((float)mapDeathTexture.Width * 0.5f, (float)mapDeathTexture.Height * 0.5f), num103, SpriteEffects.None, 0f);
						float num123 = num121 + 4f - 14f * num103;
						float num124 = num122 + 2f - 14f * num103;
						float num125 = num123 + 28f * num103;
						float num126 = num124 + 28f * num103;
						if ((float)mouseX >= num123 && (float)mouseX <= num125 && (float)mouseY >= num124 && (float)mouseY <= num126)
						{
							TimeSpan timeSpan2 = DateTime.Now - player[num120].lastDeathTime;
							string arg2 = player[num120].name + " died ";
							arg2 = ((timeSpan2.Days == 1) ? (arg2 + timeSpan2.Days + " day") : ((timeSpan2.Days > 0) ? (arg2 + timeSpan2.Days + " days") : ((timeSpan2.Hours == 1) ? (arg2 + timeSpan2.Hours + " hour") : ((timeSpan2.Hours > 0) ? (arg2 + timeSpan2.Hours + " hours") : ((timeSpan2.Minutes == 1) ? (arg2 + timeSpan2.Minutes + " minute") : ((timeSpan2.Minutes > 0) ? (arg2 + timeSpan2.Minutes + " minutes") : ((timeSpan2.Seconds != 1) ? (arg2 + timeSpan2.Seconds + " seconds") : (arg2 + timeSpan2.Seconds + " second"))))))));
							text = arg2 + " ago";
						}
					}
				}
				for (int num127 = 0; num127 < 16; num127++)
				{
					if (!player[num127].active || ((player[myPlayer].hostile || player[num127].hostile) && (player[myPlayer].team != player[num127].team || player[num127].team == 0) && num127 != myPlayer))
					{
						continue;
					}
					float num128 = ((player[num127].position.X + (float)(player[num127].width / 2)) / 16f - num13) * num5;
					float num129 = ((player[num127].position.Y + player[num127].gfxOffY + (float)(player[num127].height / 2)) / 16f - num14) * num5;
					num128 += num;
					num129 += num2;
					num128 -= 6f;
					num129 -= 2f;
					num129 -= 2f - num5 / 5f * 2f;
					num128 -= 10f * num5;
					num129 -= 10f * num5;
					float num130 = num128 + 4f - 14f * num103;
					float num131 = num129 + 2f - 14f * num103;
					float num132 = num130 + 28f * num103;
					float num133 = num131 + 28f * num103;
					if (player[num127].dead)
					{
						continue;
					}
					DrawPlayerHead(player[num127], num128, num129, (float)(int)b / 255f, num103);
					if (!((float)mouseX >= num130) || !((float)mouseX <= num132) || !((float)mouseY >= num131) || !((float)mouseY <= num133))
					{
						continue;
					}
					text = player[num127].name;
					if (num127 != myPlayer && player[myPlayer].team > 0 && player[myPlayer].team == player[num127].team && netMode == 1 && player[myPlayer].HasUnityPotion())
					{
						flag3 = true;
						if (!unityMouseOver)
						{
							PlaySound(12);
						}
						unityMouseOver = true;
						DrawPlayerHead(player[num127], num128, num129, 2f, num103 + 0.5f);
						text = "Teleport to " + player[num127].name;
						if (mouseLeft && mouseLeftRelease)
						{
							mouseLeftRelease = false;
							mapFullscreen = false;
							player[myPlayer].UnityTeleport(player[num127].position);
							player[myPlayer].TakeUnityPotion();
						}
					}
				}
				if (!flag3 && unityMouseOver)
				{
					unityMouseOver = false;
				}
				spriteBatch.End();
				spriteBatch.Begin();
				int num134 = 10;
				int num135 = screenHeight - 40;
				int num136 = 0;
				int num137 = 130;
				if (mouseX >= num134 && mouseX <= num134 + 32 && mouseY >= num135 && mouseY <= num135 + 30)
				{
					num137 = 255;
					num136 += 4;
					player[myPlayer].mouseInterface = true;
					if (mouseLeft && mouseLeftRelease)
					{
						PlaySound(10);
						mapFullscreen = false;
					}
				}
				spriteBatch.Draw(mapIconTexture[num136], new Vector2(num134, num135), new Microsoft.Xna.Framework.Rectangle(0, 0, mapIconTexture[num136].Width, mapIconTexture[num136].Height), new Microsoft.Xna.Framework.Color(num137, num137, num137, num137), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				Vector2 value = DrawThickCursor();
				spriteBatch.Draw(cursorTextures[0], new Vector2(mouseX, mouseY) + value + Vector2.One, null, new Microsoft.Xna.Framework.Color((int)((float)(int)cursorColor.R * 0.2f), (int)((float)(int)cursorColor.G * 0.2f), (int)((float)(int)cursorColor.B * 0.2f), (int)((float)(int)cursorColor.A * 0.5f)), 0f, default(Vector2), cursorScale * 1.1f, SpriteEffects.None, 0f);
				spriteBatch.Draw(cursorTextures[0], new Vector2(mouseX, mouseY) + value, null, cursorColor, 0f, default(Vector2), cursorScale, SpriteEffects.None, 0f);
			}
			if (text != "")
			{
				MouseText(text, 0, 0);
			}
			TimeLogger.DetailedDrawTime(9);
		}

		public void DrawItems()
		{
			for (int i = 0; i < 400; i++)
			{
				if (item[i].active && item[i].type > 0)
				{
					DrawItem(item[i], i);
				}
			}
		}

		public void DrawSimpleSurfaceBackground()
		{
			float num = (float)worldSurface * 16f;
			float num2 = Math.Min(screenPosition.Y + (float)screenHeight, num) - screenPosition.Y;
			float y = screenPosition.Y;
			float num3 = screenPosition.Y + num2;
			Vector4 value = bgColor.ToVector4();
			Vector4 value2 = new Microsoft.Xna.Framework.Color(53, 43, 243).ToVector4() * value;
			Vector4 value3 = new Microsoft.Xna.Framework.Color(132, 170, 248).ToVector4() * value;
			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(Vector4.Lerp(value2, value3, y / num));
			Microsoft.Xna.Framework.Color color2 = new Microsoft.Xna.Framework.Color(Vector4.Lerp(value2, value3, num3 / num));
			VertexColors colors = default(VertexColors);
			colors.TopLeftColor = color;
			colors.TopRightColor = color;
			colors.BottomLeftColor = color2;
			colors.BottomRightColor = color2;
			tileBatch.Draw(blackTileTexture, new Vector4(0f, 0f, screenWidth, num2), colors);
			float num4 = (float)screenHeight - num2;
			if (num4 > 0f)
			{
				colors.TopLeftColor = Microsoft.Xna.Framework.Color.Black;
				colors.TopRightColor = Microsoft.Xna.Framework.Color.Black;
				colors.BottomLeftColor = Microsoft.Xna.Framework.Color.Black;
				colors.BottomRightColor = Microsoft.Xna.Framework.Color.Black;
				tileBatch.Draw(blackTileTexture, new Vector4(0f, num2, screenWidth, num4), colors);
			}
		}

		public void DrawCapture(Microsoft.Xna.Framework.Rectangle area, CaptureSettings settings)
		{
			float[] array = bgAlpha;
			bgAlpha = new float[array.Length];
			for (int i = 0; i < bgAlpha.Length; i++)
			{
				bgAlpha[i] = 0f;
			}
			bgAlpha[settings.Biome.BackgroundIndex] = 1f;
			float[] array2 = bgAlpha2;
			bgAlpha2 = new float[array2.Length];
			for (int j = 0; j < bgAlpha2.Length; j++)
			{
				bgAlpha2[j] = 0f;
			}
			bgAlpha2[settings.Biome.BackgroundIndex2] = 1f;
			if (settings.Biome.BackgroundIndex2 == 6)
			{
				bgAlpha2[0] = 1f;
			}
			int num = holyTiles;
			holyTiles = ((settings.Biome.BackgroundIndex == 6) ? 400 : 0);
			int num2 = offScreenRange;
			offScreenRange = 0;
			Transform = Matrix.CreateScale(1f, 1f, 1f) * Matrix.CreateRotationZ(0f) * Matrix.CreateTranslation(new Vector3(0f, 0f, 0f));
			Rasterizer = RasterizerState.CullCounterClockwise;
			bool captureEntities = settings.CaptureEntities;
			bool captureBackground = settings.CaptureBackground;
			CaptureBiome biome = settings.Biome;
			Vector2 vector = screenPosition;
			int num3 = screenWidth;
			int num4 = screenHeight;
			float num5 = cloudAlpha;
			bool captureMech = settings.CaptureMech;
			screenWidth = area.Width << 4;
			screenHeight = area.Height << 4;
			screenPosition = new Vector2(area.X * 16, area.Y * 16);
			cloudAlpha = 0f;
			int x = area.X;
			int y = area.Y;
			int num6 = area.X + screenWidth / 16;
			int num7 = area.Y + screenHeight / 16;
			bgColor = Microsoft.Xna.Framework.Color.White;
			double num23 = time / 54000.0;
			int screenWidth2 = screenWidth;
			int width = sunTexture.Width;
			int width2 = sunTexture.Width;
			Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
			double num24 = time / 54000.0;
			double num25 = time / 32400.0;
			int screenWidth3 = screenWidth;
			int width3 = moonTexture[moonType].Width;
			int width4 = moonTexture[moonType].Width;
			Microsoft.Xna.Framework.Color white2 = Microsoft.Xna.Framework.Color.White;
			double num26 = time / 32400.0;
			float num8 = 0f;
			if (dayTime)
			{
				if (time < 27000.0)
				{
					double num9 = Math.Pow(1.0 - time / 54000.0 * 2.0, 2.0);
				}
				else
				{
					double num9 = Math.Pow((time / 54000.0 - 0.5) * 2.0, 2.0);
				}
			}
			else if (time < 16200.0)
			{
				double num10 = Math.Pow(1.0 - time / 32400.0 * 2.0, 2.0);
			}
			else
			{
				double num10 = Math.Pow((time / 32400.0 - 0.5) * 2.0, 2.0);
			}
			if (dayTime)
			{
				if (time < 13500.0)
				{
					num8 = (float)(time / 13500.0);
					white.R = (byte)(num8 * 200f + 55f);
					white.G = (byte)(num8 * 180f + 75f);
					white.B = (byte)(num8 * 250f + 5f);
					bgColor.R = (byte)(num8 * 230f + 25f);
					bgColor.G = (byte)(num8 * 220f + 35f);
					bgColor.B = (byte)(num8 * 220f + 35f);
				}
				if (time > 45900.0)
				{
					num8 = (float)(1.0 - (time / 54000.0 - 0.85) * 6.666666666666667);
					white.R = (byte)(num8 * 120f + 55f);
					white.G = (byte)(num8 * 100f + 25f);
					white.B = (byte)(num8 * 120f + 55f);
					bgColor.R = (byte)(num8 * 200f + 35f);
					bgColor.G = (byte)(num8 * 85f + 35f);
					bgColor.B = (byte)(num8 * 135f + 35f);
				}
				else if (time > 37800.0)
				{
					num8 = (float)(1.0 - (time / 54000.0 - 0.7) * 6.666666666666667);
					white.R = (byte)(num8 * 80f + 175f);
					white.G = (byte)(num8 * 130f + 125f);
					white.B = (byte)(num8 * 100f + 155f);
					bgColor.R = (byte)(num8 * 20f + 235f);
					bgColor.G = (byte)(num8 * 135f + 120f);
					bgColor.B = (byte)(num8 * 85f + 170f);
				}
			}
			if (!dayTime)
			{
				if (bloodMoon)
				{
					if (time < 16200.0)
					{
						num8 = (float)(1.0 - time / 16200.0);
						white2.R = (byte)(num8 * 10f + 205f);
						white2.G = (byte)(num8 * 170f + 55f);
						white2.B = (byte)(num8 * 200f + 55f);
						bgColor.R = (byte)(40f - num8 * 40f + 35f);
						bgColor.G = (byte)(num8 * 20f + 15f);
						bgColor.B = (byte)(num8 * 20f + 15f);
					}
					else if (time >= 16200.0)
					{
						num8 = (float)((time / 32400.0 - 0.5) * 2.0);
						white2.R = (byte)(num8 * 50f + 205f);
						white2.G = (byte)(num8 * 100f + 155f);
						white2.B = (byte)(num8 * 100f + 155f);
						white2.R = (byte)(num8 * 10f + 205f);
						white2.G = (byte)(num8 * 170f + 55f);
						white2.B = (byte)(num8 * 200f + 55f);
						bgColor.R = (byte)(40f - num8 * 40f + 35f);
						bgColor.G = (byte)(num8 * 20f + 15f);
						bgColor.B = (byte)(num8 * 20f + 15f);
					}
				}
				else if (time < 16200.0)
				{
					num8 = (float)(1.0 - time / 16200.0);
					white2.R = (byte)(num8 * 10f + 205f);
					white2.G = (byte)(num8 * 70f + 155f);
					white2.B = (byte)(num8 * 100f + 155f);
					bgColor.R = (byte)(num8 * 30f + 5f);
					bgColor.G = (byte)(num8 * 30f + 5f);
					bgColor.B = (byte)(num8 * 30f + 5f);
				}
				else if (time >= 16200.0)
				{
					num8 = (float)((time / 32400.0 - 0.5) * 2.0);
					white2.R = (byte)(num8 * 50f + 205f);
					white2.G = (byte)(num8 * 100f + 155f);
					white2.B = (byte)(num8 * 100f + 155f);
					bgColor.R = (byte)(num8 * 20f + 5f);
					bgColor.G = (byte)(num8 * 30f + 5f);
					bgColor.B = (byte)(num8 * 30f + 5f);
				}
			}
			if (gameMenu)
			{
				bgDelay = 1000;
			}
			if (biome.TileColor == CaptureBiome.TileColorStyle.Corrupt)
			{
				float num11 = 1f;
				int r = bgColor.R;
				int g = bgColor.G;
				int b = bgColor.B;
				r -= (int)(100f * num11 * ((float)(int)bgColor.R / 255f));
				g -= (int)(140f * num11 * ((float)(int)bgColor.G / 255f));
				b -= (int)(80f * num11 * ((float)(int)bgColor.B / 255f));
				if (r < 15)
				{
					r = 15;
				}
				if (g < 15)
				{
					g = 15;
				}
				if (b < 15)
				{
					b = 15;
				}
				bgColor.R = (byte)r;
				bgColor.G = (byte)g;
				bgColor.B = (byte)b;
				r = white.R;
				g = white.G;
				b = white.B;
				r -= (int)(100f * num11 * ((float)(int)white.R / 255f));
				g -= (int)(100f * num11 * ((float)(int)white.G / 255f));
				b -= (int)(0f * num11 * ((float)(int)white.B / 255f));
				if (r < 15)
				{
					r = 15;
				}
				if (g < 15)
				{
					g = 15;
				}
				if (b < 15)
				{
					b = 15;
				}
				white.R = (byte)r;
				white.G = (byte)g;
				white.B = (byte)b;
				r = white2.R;
				g = white2.G;
				b = white2.B;
				r -= (int)(140f * num11 * ((float)(int)white2.R / 255f));
				g -= (int)(190f * num11 * ((float)(int)white2.G / 255f));
				b -= (int)(170f * num11 * ((float)(int)white2.B / 255f));
				if (r < 15)
				{
					r = 15;
				}
				if (g < 15)
				{
					g = 15;
				}
				if (b < 15)
				{
					b = 15;
				}
				white2.R = (byte)r;
				white2.G = (byte)g;
				white2.B = (byte)b;
			}
			if (biome.TileColor == CaptureBiome.TileColorStyle.Crimson)
			{
				float num12 = 1f;
				int r2 = bgColor.R;
				int g2 = bgColor.G;
				int b2 = bgColor.B;
				r2 -= (int)(70f * num12 * ((float)(int)bgColor.G / 255f));
				g2 -= (int)(110f * num12 * ((float)(int)bgColor.G / 255f));
				b2 -= (int)(150f * num12 * ((float)(int)bgColor.B / 255f));
				if (r2 < 15)
				{
					r2 = 15;
				}
				if (g2 < 15)
				{
					g2 = 15;
				}
				if (b2 < 15)
				{
					b2 = 15;
				}
				bgColor.R = (byte)r2;
				bgColor.G = (byte)g2;
				bgColor.B = (byte)b2;
				r2 = white.R;
				g2 = white.G;
				b2 = white.B;
				g2 -= (int)(90f * num12 * ((float)(int)white.G / 255f));
				b2 -= (int)(110f * num12 * ((float)(int)white.B / 255f));
				if (r2 < 15)
				{
					r2 = 15;
				}
				if (g2 < 15)
				{
					g2 = 15;
				}
				if (b2 < 15)
				{
					b2 = 15;
				}
				white.R = (byte)r2;
				white.G = (byte)g2;
				white.B = (byte)b2;
				r2 = white2.R;
				g2 = white2.G;
				b2 = white2.B;
				r2 -= (int)(100f * num12 * ((float)(int)white2.R / 255f));
				g2 -= (int)(120f * num12 * ((float)(int)white2.G / 255f));
				b2 -= (int)(180f * num12 * ((float)(int)white2.B / 255f));
				if (r2 < 15)
				{
					r2 = 15;
				}
				if (g2 < 15)
				{
					g2 = 15;
				}
				if (b2 < 15)
				{
					b2 = 15;
				}
				white2.R = (byte)r2;
				white2.G = (byte)g2;
				white2.B = (byte)b2;
			}
			if (biome.TileColor == CaptureBiome.TileColorStyle.Jungle)
			{
				float num13 = 1f;
				int r3 = bgColor.R;
				int num14 = bgColor.G;
				int b3 = bgColor.B;
				r3 -= (int)(40f * num13 * ((float)(int)bgColor.R / 255f));
				b3 -= (int)(70f * num13 * ((float)(int)bgColor.B / 255f));
				if (num14 > 255)
				{
					num14 = 255;
				}
				if (num14 < 15)
				{
					num14 = 15;
				}
				if (r3 > 255)
				{
					r3 = 255;
				}
				if (r3 < 15)
				{
					r3 = 15;
				}
				if (b3 < 15)
				{
					b3 = 15;
				}
				bgColor.R = (byte)r3;
				bgColor.G = (byte)num14;
				bgColor.B = (byte)b3;
				r3 = white.R;
				num14 = white.G;
				b3 = white.B;
				r3 -= (int)(30f * num13 * ((float)(int)white.R / 255f));
				b3 -= (int)(10f * num13 * ((float)(int)white.B / 255f));
				if (r3 < 15)
				{
					r3 = 15;
				}
				if (num14 < 15)
				{
					num14 = 15;
				}
				if (b3 < 15)
				{
					b3 = 15;
				}
				white.R = (byte)r3;
				white.G = (byte)num14;
				white.B = (byte)b3;
				r3 = white2.R;
				num14 = white2.G;
				b3 = white2.B;
				num14 -= (int)(140f * num13 * ((float)(int)white2.R / 255f));
				r3 -= (int)(170f * num13 * ((float)(int)white2.G / 255f));
				b3 -= (int)(190f * num13 * ((float)(int)white2.B / 255f));
				if (r3 < 15)
				{
					r3 = 15;
				}
				if (num14 < 15)
				{
					num14 = 15;
				}
				if (b3 < 15)
				{
					b3 = 15;
				}
				white2.R = (byte)r3;
				white2.G = (byte)num14;
				white2.B = (byte)b3;
			}
			if (biome.TileColor == CaptureBiome.TileColorStyle.Mushroom)
			{
				float num15 = 1f;
				int r4 = bgColor.R;
				int g3 = bgColor.G;
				int b4 = bgColor.B;
				g3 -= (int)(250f * num15 * ((float)(int)bgColor.G / 255f));
				r4 -= (int)(250f * num15 * ((float)(int)bgColor.R / 255f));
				b4 -= (int)(250f * num15 * ((float)(int)bgColor.B / 255f));
				if (g3 < 15)
				{
					g3 = 15;
				}
				if (r4 < 15)
				{
					r4 = 15;
				}
				if (b4 < 15)
				{
					b4 = 15;
				}
				bgColor.R = (byte)r4;
				bgColor.G = (byte)g3;
				bgColor.B = (byte)b4;
				r4 = white.R;
				g3 = white.G;
				b4 = white.B;
				g3 -= (int)(10f * num15 * ((float)(int)white.G / 255f));
				r4 -= (int)(30f * num15 * ((float)(int)white.R / 255f));
				b4 -= (int)(10f * num15 * ((float)(int)white.B / 255f));
				if (r4 < 15)
				{
					r4 = 15;
				}
				if (g3 < 15)
				{
					g3 = 15;
				}
				if (b4 < 15)
				{
					b4 = 15;
				}
				white.R = (byte)r4;
				white.G = (byte)g3;
				white.B = (byte)b4;
				r4 = white2.R;
				g3 = white2.G;
				b4 = white2.B;
				g3 -= (int)(140f * num15 * ((float)(int)white2.R / 255f));
				r4 -= (int)(170f * num15 * ((float)(int)white2.G / 255f));
				b4 -= (int)(190f * num15 * ((float)(int)white2.B / 255f));
				if (r4 < 15)
				{
					r4 = 15;
				}
				if (g3 < 15)
				{
					g3 = 15;
				}
				if (b4 < 15)
				{
					b4 = 15;
				}
				white2.R = (byte)r4;
				white2.G = (byte)g3;
				white2.B = (byte)b4;
			}
			if (Lighting.lightMode < 2)
			{
				if (bgColor.R < 10)
				{
					bgColor.R = 10;
				}
				if (bgColor.G < 10)
				{
					bgColor.G = 10;
				}
				if (bgColor.B < 10)
				{
					bgColor.B = 10;
				}
			}
			else
			{
				if (bgColor.R < 15)
				{
					bgColor.R = 15;
				}
				if (bgColor.G < 15)
				{
					bgColor.G = 15;
				}
				if (bgColor.B < 15)
				{
					bgColor.B = 15;
				}
			}
			tileColor.A = byte.MaxValue;
			tileColor.R = (byte)((bgColor.R + bgColor.G + bgColor.B + bgColor.R * 7) / 10);
			tileColor.G = (byte)((bgColor.R + bgColor.G + bgColor.B + bgColor.G * 7) / 10);
			tileColor.B = (byte)((bgColor.R + bgColor.G + bgColor.B + bgColor.B * 7) / 10);
			backColor = bgColor;
			trueBackColor = backColor;
			Lighting.Initialize(true);
			renderCount = 99;
			for (int k = 0; k < 3; k++)
			{
				Lighting.LightTiles(x, num6, y, num7);
			}
			if (!((float)(settings.Area.X * 16) > vector.X - 16f) || !((float)(settings.Area.Y * 16) > vector.Y - 16f) || !((float)((settings.Area.X + settings.Area.Width) * 16) < vector.X + (float)num3 + 16f) || !((float)((settings.Area.Y + settings.Area.Height) * 16) < vector.Y + (float)num4 + 16f))
			{
				for (int l = 0; l < dust.Length; l++)
				{
					if (dust[l].active && dust[l].type == 76)
					{
						dust[l].active = false;
					}
				}
			}
			Vector2 vector2 = drawToScreen ? Vector2.Zero : new Vector2(offScreenRange, offScreenRange);
			int val = (int)((screenPosition.X - vector2.X) / 16f - 1f);
			int val2 = (int)((screenPosition.X + (float)screenWidth + vector2.X) / 16f) + 2;
			int val3 = (int)((screenPosition.Y - vector2.Y) / 16f - 1f);
			int val4 = (int)((screenPosition.Y + (float)screenHeight + vector2.Y) / 16f) + 5;
			vector2 -= screenPosition;
			val = Math.Max(val, 5) - 2;
			val3 = Math.Max(val3, 5);
			val2 = Math.Min(val2, maxTilesX - 5) + 2;
			val4 = Math.Min(val4, maxTilesY - 5) + 4;
			Microsoft.Xna.Framework.Rectangle drawArea = new Microsoft.Xna.Framework.Rectangle(val, val3, val2 - val, val4 - val3);
			LiquidRenderer.Instance.Update(drawArea);
			WorldGen.SectionTileFrameWithCheck(x, y, num6, num7);
			if (captureBackground)
			{
				Matrix transform = Transform;
				int num16 = screenHeight;
				int num17 = screenWidth;
				Vector2 vector3 = screenPosition;
				bool flag = mapFullscreen;
				mapFullscreen = false;
				float num18 = scAdj;
				Vector2 value = new Vector2(num3, num4);
				Vector2 value2 = new Vector2(settings.Area.Width * 16, settings.Area.Height * 16);
				Vector2 vector4 = value2 / value;
				vector4.X = Math.Max(1f, vector4.X);
				vector4.Y = Math.Max(1f, vector4.Y);
				Vector2[] array3 = new Vector2[numClouds];
				for (int m = 0; m < numClouds; m++)
				{
					array3[m] = cloud[m].position;
					cloud[m].position *= vector4;
				}
				if ((float)(settings.Area.Height * 16) >= 2000f || (float)(settings.Area.Width * 16) >= 2000f)
				{
					scAdj = 0f;
					float num19 = 2500f;
					float num20 = MathHelper.Clamp((float)settings.Area.Height * 16f / num19, 1f, 2f);
					screenWidth = settings.Area.Width * 16;
					screenHeight = Math.Min(2048, settings.Area.Height * 16);
					screenPosition.X = settings.Area.X * 16;
					screenPosition.Y = settings.Area.Y * 16;
					screenPosition.Y += Math.Max(0f, Math.Min(settings.Area.Height, (float)worldSurface) * 16f - num19 * num20);
					transform *= Matrix.CreateScale(num20);
					transform.Translation += new Vector3((settings.Area.X - area.X) * 16, (settings.Area.Y - area.Y) * 16, 0f);
					transform.Translation += new Vector3(0f, Math.Max(0f, Math.Min(settings.Area.Height, (float)worldSurface) * 16f - num19 * num20) / num20, 0f);
				}
				else if ((float)(settings.Area.X * 16) > vector.X - 16f && (float)(settings.Area.Y * 16) > vector.Y - 16f && (float)((settings.Area.X + settings.Area.Width) * 16) < vector.X + (float)num3 + 16f && (float)((settings.Area.Y + settings.Area.Height) * 16) < vector.Y + (float)num4 + 16f)
				{
					screenPosition = vector;
					screenWidth = num3;
					screenHeight = num4;
					transform.Translation += new Vector3(vector.X - (float)area.X * 16f, vector.Y - (float)area.Y * 16f, 0f);
				}
				tileBatch.Begin();
				DrawSimpleSurfaceBackground();
				tileBatch.End();
				spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.AnisotropicClamp, DepthStencilState.Default, RasterizerState.CullNone, null, transform);
				DrawSurfaceBG();
				spriteBatch.End();
				for (int n = 0; n < numClouds; n++)
				{
					cloud[n].position = array3[n];
				}
				scAdj = num18;
				mapFullscreen = flag;
				screenWidth = num17;
				screenHeight = num16;
				screenPosition = vector3;
			}
			if (captureBackground)
			{
				spriteBatch.Begin();
				DrawUnderworldBackground(true);
				spriteBatch.End();
			}
			if (captureEntities)
			{
				spriteBatch.Begin();
				CacheNPCDraws();
				CacheProjDraws();
				DrawCachedNPCs(DrawCacheNPCsMoonMoon, true);
				spriteBatch.End();
			}
			tileBatch.Begin();
			spriteBatch.Begin();
			DrawBlack(true);
			tileBatch.End();
			spriteBatch.End();
			tileBatch.Begin();
			spriteBatch.Begin();
			if (biome == null)
			{
				drawWaters(true);
			}
			else
			{
				drawWaters(true, bloodMoon ? 9 : biome.WaterStyle, false);
			}
			tileBatch.End();
			spriteBatch.End();
			if (captureBackground)
			{
				tileBatch.Begin();
				spriteBatch.Begin();
				DrawBackground();
				tileBatch.End();
				spriteBatch.End();
			}
			tileBatch.Begin();
			spriteBatch.Begin();
			DrawWalls();
			tileBatch.End();
			spriteBatch.End();
			if (captureEntities)
			{
				spriteBatch.Begin();
				DrawWoF();
				spriteBatch.End();
			}
			if (captureEntities)
			{
				spriteBatch.Begin();
				DrawRain();
				spriteBatch.End();
			}
			if (drawBackGore && captureEntities)
			{
				spriteBatch.Begin();
				DrawGoreBehind();
				spriteBatch.End();
				drawBackGore = true;
			}
			if (captureEntities)
			{
				spriteBatch.Begin();
				MoonlordDeathDrama.DrawPieces(spriteBatch);
				MoonlordDeathDrama.DrawExplosions(spriteBatch);
				spriteBatch.End();
			}
			tileBatch.Begin();
			spriteBatch.Begin();
			if (biome == null)
			{
				DrawTiles();
			}
			else
			{
				DrawTiles(true, biome.WaterStyle);
			}
			tileBatch.End();
			spriteBatch.End();
			tileBatch.Begin();
			spriteBatch.Begin();
			if (biome == null)
			{
				DrawTiles(false);
			}
			else
			{
				DrawTiles(false, bloodMoon ? 9 : biome.WaterStyle);
			}
			tileBatch.End();
			spriteBatch.End();
			if (captureEntities)
			{
				spriteBatch.Begin();
				waterfallManager.FindWaterfalls();
				waterfallManager.Draw(spriteBatch);
				spriteBatch.End();
				DrawPlayers();
				DrawCachedProjs(DrawCacheProjsBehindNPCsAndTiles);
				spriteBatch.Begin();
				DrawNPCs(true);
				spriteBatch.End();
				DrawCachedProjs(DrawCacheProjsBehindNPCs);
				spriteBatch.Begin();
				DrawNPCs();
				spriteBatch.End();
				spriteBatch.Begin();
				DrawCachedNPCs(DrawCacheNPCProjectiles, false);
				spriteBatch.End();
				spriteBatch.Begin();
				DrawItems();
				spriteBatch.End();
				DrawProjectiles();
				DrawDust();
				spriteBatch.Begin();
				DrawGore();
				spriteBatch.End();
			}
			tileBatch.Begin();
			spriteBatch.Begin();
			if (biome == null)
			{
				drawWaters();
			}
			else
			{
				drawWaters(false, biome.WaterStyle, false);
			}
			if (captureMech)
			{
				DrawWires();
			}
			tileBatch.End();
			spriteBatch.End();
			if (mapEnabled)
			{
				spriteBatch.Begin();
				for (int num21 = area.X; num21 < area.X + area.Width; num21++)
				{
					for (int num22 = area.Y; num22 < area.Y + area.Height; num22++)
					{
						if (!Map.IsRevealed(num21, num22))
						{
							spriteBatch.Draw(blackTileTexture, new Vector2((float)num21 * 16f, (float)num22 * 16f) - screenPosition, Microsoft.Xna.Framework.Color.Black);
						}
					}
				}
				spriteBatch.End();
			}
			renderCount = 99;
			screenWidth = num3;
			screenHeight = num4;
			screenPosition = vector;
			Lighting.Initialize(true);
			offScreenRange = num2;
			cloudAlpha = num5;
			bgAlpha = array;
			bgAlpha2 = array2;
			holyTiles = num;
		}

		public void RenderFrameBuffers()
		{
			spriteBatch.Begin();
			spriteBatch.Draw(blackTarget, Vector2.Zero, Microsoft.Xna.Framework.Color.White);
			spriteBatch.Draw(backWaterTarget, Vector2.Zero, Microsoft.Xna.Framework.Color.White);
			spriteBatch.Draw(wallTarget, Vector2.Zero, Microsoft.Xna.Framework.Color.White);
			spriteBatch.Draw(tileTarget, Vector2.Zero, Microsoft.Xna.Framework.Color.White);
			spriteBatch.Draw(tile2Target, Vector2.Zero, Microsoft.Xna.Framework.Color.White);
			spriteBatch.Draw(waterTarget, Vector2.Zero, Microsoft.Xna.Framework.Color.White);
			spriteBatch.End();
		}

		protected void RenderTiles()
		{
			if (!drawToScreen)
			{
				RenderBlack();
				base.GraphicsDevice.SetRenderTarget(tileTarget);
				base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
				spriteBatch.Begin();
				if (ignoreErrors)
				{
					try
					{
						DrawTiles();
					}
					catch (Exception e)
					{
						TimeLogger.DrawException(e);
					}
				}
				else
				{
					DrawTiles();
				}
				TimeLogger.DetailedDrawReset();
				spriteBatch.End();
				TimeLogger.DetailedDrawTime(28);
				base.GraphicsDevice.SetRenderTarget(null);
			}
		}

		protected void RenderTiles2()
		{
			if (!drawToScreen)
			{
				base.GraphicsDevice.SetRenderTarget(tile2Target);
				base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
				spriteBatch.Begin();
				if (ignoreErrors)
				{
					try
					{
						DrawTiles(false);
					}
					catch (Exception e)
					{
						TimeLogger.DrawException(e);
					}
				}
				else
				{
					DrawTiles(false);
				}
				TimeLogger.DetailedDrawReset();
				spriteBatch.End();
				TimeLogger.DetailedDrawTime(29);
				base.GraphicsDevice.SetRenderTarget(null);
			}
		}

		protected void RenderWater()
		{
			if (!drawToScreen)
			{
				base.GraphicsDevice.SetRenderTarget(waterTarget);
				base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
				spriteBatch.Begin();
				tileBatch.Begin();
				try
				{
					drawWaters();
					if (player[myPlayer].inventory[player[myPlayer].selectedItem].mech)
					{
						DrawWires();
					}
				}
				catch
				{
				}
				TimeLogger.DetailedDrawReset();
				tileBatch.End();
				spriteBatch.End();
				TimeLogger.DetailedDrawTime(31);
				base.GraphicsDevice.SetRenderTarget(null);
			}
		}

		protected void drawWaters(bool bg = false, int styleOverride = -1, bool allowUpdate = true)
		{
			if (!bg)
			{
				if (bgStyle == 1)
				{
					waterStyle = 2;
				}
				else if (bgStyle == 5)
				{
					if (evilTiles > holyTiles)
					{
						if (bloodTiles > evilTiles)
						{
							waterStyle = 10;
						}
						else
						{
							waterStyle = 2;
						}
					}
					else if (bloodTiles > holyTiles)
					{
						waterStyle = 10;
					}
					else
					{
						waterStyle = 4;
					}
				}
				else if (bgStyle == 5 && bloodTiles > holyTiles)
				{
					waterStyle = 10;
				}
				else if (bgStyle == 3)
				{
					waterStyle = 3;
				}
				else if (bgStyle == 8)
				{
					waterStyle = 10;
				}
				else if (bgStyle == 6)
				{
					waterStyle = 4;
				}
				else if (bgStyle == 7)
				{
					waterStyle = 5;
				}
				else if (bgStyle == 2)
				{
					waterStyle = 6;
				}
				else if ((double)(screenPosition.Y / 16f) > rockLayer + 40.0)
				{
					if (shroomTiles > 300)
					{
						waterStyle = 7;
					}
					else
					{
						waterStyle = 8;
					}
				}
				else if ((double)(screenPosition.Y / 16f) > worldSurface)
				{
					waterStyle = 7;
				}
				else
				{
					waterStyle = 0;
				}
				if (bgStyle != 4 && bloodMoon && !dayTime)
				{
					waterStyle = 9;
				}
				if (fountainColor >= 0)
				{
					waterStyle = fountainColor;
				}
				if (waterStyle == 0)
				{
					liquidAlpha[2] -= 0.2f;
					if (liquidAlpha[2] < 0f)
					{
						liquidAlpha[2] = 0f;
					}
					liquidAlpha[3] -= 0.2f;
					if (liquidAlpha[3] < 0f)
					{
						liquidAlpha[3] = 0f;
					}
					liquidAlpha[4] -= 0.2f;
					if (liquidAlpha[4] < 0f)
					{
						liquidAlpha[4] = 0f;
					}
					liquidAlpha[5] -= 0.2f;
					if (liquidAlpha[5] < 0f)
					{
						liquidAlpha[5] = 0f;
					}
					liquidAlpha[6] -= 0.2f;
					if (liquidAlpha[6] < 0f)
					{
						liquidAlpha[6] = 0f;
					}
					liquidAlpha[7] -= 0.2f;
					if (liquidAlpha[7] < 0f)
					{
						liquidAlpha[7] = 0f;
					}
					liquidAlpha[8] -= 0.2f;
					if (liquidAlpha[8] < 0f)
					{
						liquidAlpha[8] = 0f;
					}
					liquidAlpha[9] -= 0.2f;
					if (liquidAlpha[9] < 0f)
					{
						liquidAlpha[9] = 0f;
					}
					liquidAlpha[10] -= 0.2f;
					if (liquidAlpha[10] < 0f)
					{
						liquidAlpha[10] = 0f;
					}
					liquidAlpha[0] += 0.2f;
					if (liquidAlpha[0] > 1f)
					{
						liquidAlpha[0] = 1f;
					}
				}
				if (waterStyle == 2)
				{
					liquidAlpha[0] -= 0.2f;
					if (liquidAlpha[0] < 0f)
					{
						liquidAlpha[0] = 0f;
					}
					liquidAlpha[3] -= 0.2f;
					if (liquidAlpha[3] < 0f)
					{
						liquidAlpha[3] = 0f;
					}
					liquidAlpha[4] -= 0.2f;
					if (liquidAlpha[4] < 0f)
					{
						liquidAlpha[4] = 0f;
					}
					liquidAlpha[5] -= 0.2f;
					if (liquidAlpha[5] < 0f)
					{
						liquidAlpha[5] = 0f;
					}
					liquidAlpha[6] -= 0.2f;
					if (liquidAlpha[6] < 0f)
					{
						liquidAlpha[6] = 0f;
					}
					liquidAlpha[7] -= 0.2f;
					if (liquidAlpha[7] < 0f)
					{
						liquidAlpha[7] = 0f;
					}
					liquidAlpha[8] -= 0.2f;
					if (liquidAlpha[8] < 0f)
					{
						liquidAlpha[8] = 0f;
					}
					liquidAlpha[9] -= 0.2f;
					if (liquidAlpha[9] < 0f)
					{
						liquidAlpha[9] = 0f;
					}
					liquidAlpha[10] -= 0.2f;
					if (liquidAlpha[10] < 0f)
					{
						liquidAlpha[10] = 0f;
					}
					liquidAlpha[2] += 0.2f;
					if (liquidAlpha[2] > 1f)
					{
						liquidAlpha[2] = 1f;
					}
				}
				if (waterStyle == 3)
				{
					liquidAlpha[0] -= 0.2f;
					if (liquidAlpha[0] < 0f)
					{
						liquidAlpha[0] = 0f;
					}
					liquidAlpha[2] -= 0.2f;
					if (liquidAlpha[2] < 0f)
					{
						liquidAlpha[2] = 0f;
					}
					liquidAlpha[4] -= 0.2f;
					if (liquidAlpha[4] < 0f)
					{
						liquidAlpha[4] = 0f;
					}
					liquidAlpha[5] -= 0.2f;
					if (liquidAlpha[5] < 0f)
					{
						liquidAlpha[5] = 0f;
					}
					liquidAlpha[6] -= 0.2f;
					if (liquidAlpha[6] < 0f)
					{
						liquidAlpha[6] = 0f;
					}
					liquidAlpha[7] -= 0.2f;
					if (liquidAlpha[7] < 0f)
					{
						liquidAlpha[7] = 0f;
					}
					liquidAlpha[8] -= 0.2f;
					if (liquidAlpha[8] < 0f)
					{
						liquidAlpha[8] = 0f;
					}
					liquidAlpha[9] -= 0.2f;
					if (liquidAlpha[9] < 0f)
					{
						liquidAlpha[9] = 0f;
					}
					liquidAlpha[10] -= 0.2f;
					if (liquidAlpha[10] < 0f)
					{
						liquidAlpha[10] = 0f;
					}
					liquidAlpha[3] += 0.2f;
					if (liquidAlpha[3] > 1f)
					{
						liquidAlpha[3] = 1f;
					}
				}
				if (waterStyle == 4)
				{
					liquidAlpha[0] -= 0.2f;
					if (liquidAlpha[0] < 0f)
					{
						liquidAlpha[0] = 0f;
					}
					liquidAlpha[2] -= 0.2f;
					if (liquidAlpha[2] < 0f)
					{
						liquidAlpha[2] = 0f;
					}
					liquidAlpha[3] -= 0.2f;
					if (liquidAlpha[3] < 0f)
					{
						liquidAlpha[3] = 0f;
					}
					liquidAlpha[5] -= 0.2f;
					if (liquidAlpha[5] < 0f)
					{
						liquidAlpha[5] = 0f;
					}
					liquidAlpha[6] -= 0.2f;
					if (liquidAlpha[6] < 0f)
					{
						liquidAlpha[6] = 0f;
					}
					liquidAlpha[7] -= 0.2f;
					if (liquidAlpha[7] < 0f)
					{
						liquidAlpha[7] = 0f;
					}
					liquidAlpha[8] -= 0.2f;
					if (liquidAlpha[8] < 0f)
					{
						liquidAlpha[8] = 0f;
					}
					liquidAlpha[9] -= 0.2f;
					if (liquidAlpha[9] < 0f)
					{
						liquidAlpha[9] = 0f;
					}
					liquidAlpha[10] -= 0.2f;
					if (liquidAlpha[10] < 0f)
					{
						liquidAlpha[10] = 0f;
					}
					liquidAlpha[4] += 0.2f;
					if (liquidAlpha[4] > 1f)
					{
						liquidAlpha[4] = 1f;
					}
				}
				if (waterStyle == 5)
				{
					liquidAlpha[0] -= 0.2f;
					if (liquidAlpha[0] < 0f)
					{
						liquidAlpha[0] = 0f;
					}
					liquidAlpha[2] -= 0.2f;
					if (liquidAlpha[2] < 0f)
					{
						liquidAlpha[2] = 0f;
					}
					liquidAlpha[3] -= 0.2f;
					if (liquidAlpha[3] < 0f)
					{
						liquidAlpha[3] = 0f;
					}
					liquidAlpha[4] -= 0.2f;
					if (liquidAlpha[4] < 0f)
					{
						liquidAlpha[4] = 0f;
					}
					liquidAlpha[6] -= 0.2f;
					if (liquidAlpha[6] < 0f)
					{
						liquidAlpha[6] = 0f;
					}
					liquidAlpha[7] -= 0.2f;
					if (liquidAlpha[7] < 0f)
					{
						liquidAlpha[7] = 0f;
					}
					liquidAlpha[8] -= 0.2f;
					if (liquidAlpha[8] < 0f)
					{
						liquidAlpha[8] = 0f;
					}
					liquidAlpha[9] -= 0.2f;
					if (liquidAlpha[9] < 0f)
					{
						liquidAlpha[9] = 0f;
					}
					liquidAlpha[10] -= 0.2f;
					if (liquidAlpha[10] < 0f)
					{
						liquidAlpha[10] = 0f;
					}
					liquidAlpha[5] += 0.2f;
					if (liquidAlpha[5] > 1f)
					{
						liquidAlpha[5] = 1f;
					}
				}
				if (waterStyle == 6)
				{
					liquidAlpha[0] -= 0.2f;
					if (liquidAlpha[0] < 0f)
					{
						liquidAlpha[0] = 0f;
					}
					liquidAlpha[2] -= 0.2f;
					if (liquidAlpha[2] < 0f)
					{
						liquidAlpha[2] = 0f;
					}
					liquidAlpha[3] -= 0.2f;
					if (liquidAlpha[3] < 0f)
					{
						liquidAlpha[3] = 0f;
					}
					liquidAlpha[4] -= 0.2f;
					if (liquidAlpha[4] < 0f)
					{
						liquidAlpha[4] = 0f;
					}
					liquidAlpha[5] -= 0.2f;
					if (liquidAlpha[5] < 0f)
					{
						liquidAlpha[5] = 0f;
					}
					liquidAlpha[7] -= 0.2f;
					if (liquidAlpha[7] < 0f)
					{
						liquidAlpha[7] = 0f;
					}
					liquidAlpha[8] -= 0.2f;
					if (liquidAlpha[8] < 0f)
					{
						liquidAlpha[8] = 0f;
					}
					liquidAlpha[9] -= 0.2f;
					if (liquidAlpha[9] < 0f)
					{
						liquidAlpha[9] = 0f;
					}
					liquidAlpha[10] -= 0.2f;
					if (liquidAlpha[10] < 0f)
					{
						liquidAlpha[10] = 0f;
					}
					liquidAlpha[6] += 0.2f;
					if (liquidAlpha[6] > 1f)
					{
						liquidAlpha[6] = 1f;
					}
				}
				if (waterStyle == 7)
				{
					liquidAlpha[0] -= 0.2f;
					if (liquidAlpha[0] < 0f)
					{
						liquidAlpha[0] = 0f;
					}
					liquidAlpha[2] -= 0.2f;
					if (liquidAlpha[2] < 0f)
					{
						liquidAlpha[2] = 0f;
					}
					liquidAlpha[3] -= 0.2f;
					if (liquidAlpha[3] < 0f)
					{
						liquidAlpha[3] = 0f;
					}
					liquidAlpha[4] -= 0.2f;
					if (liquidAlpha[4] < 0f)
					{
						liquidAlpha[4] = 0f;
					}
					liquidAlpha[5] -= 0.2f;
					if (liquidAlpha[5] < 0f)
					{
						liquidAlpha[5] = 0f;
					}
					liquidAlpha[6] -= 0.2f;
					if (liquidAlpha[6] < 0f)
					{
						liquidAlpha[6] = 0f;
					}
					liquidAlpha[8] -= 0.2f;
					if (liquidAlpha[8] < 0f)
					{
						liquidAlpha[8] = 0f;
					}
					liquidAlpha[9] -= 0.2f;
					if (liquidAlpha[9] < 0f)
					{
						liquidAlpha[9] = 0f;
					}
					liquidAlpha[10] -= 0.2f;
					if (liquidAlpha[10] < 0f)
					{
						liquidAlpha[10] = 0f;
					}
					liquidAlpha[7] += 0.2f;
					if (liquidAlpha[7] > 1f)
					{
						liquidAlpha[7] = 1f;
					}
				}
				if (waterStyle == 8)
				{
					liquidAlpha[0] -= 0.2f;
					if (liquidAlpha[0] < 0f)
					{
						liquidAlpha[0] = 0f;
					}
					liquidAlpha[2] -= 0.2f;
					if (liquidAlpha[2] < 0f)
					{
						liquidAlpha[2] = 0f;
					}
					liquidAlpha[3] -= 0.2f;
					if (liquidAlpha[3] < 0f)
					{
						liquidAlpha[3] = 0f;
					}
					liquidAlpha[4] -= 0.2f;
					if (liquidAlpha[4] < 0f)
					{
						liquidAlpha[4] = 0f;
					}
					liquidAlpha[5] -= 0.2f;
					if (liquidAlpha[5] < 0f)
					{
						liquidAlpha[5] = 0f;
					}
					liquidAlpha[6] -= 0.2f;
					if (liquidAlpha[6] < 0f)
					{
						liquidAlpha[6] = 0f;
					}
					liquidAlpha[7] -= 0.2f;
					if (liquidAlpha[7] < 0f)
					{
						liquidAlpha[7] = 0f;
					}
					liquidAlpha[9] -= 0.2f;
					if (liquidAlpha[9] < 0f)
					{
						liquidAlpha[9] = 0f;
					}
					liquidAlpha[10] -= 0.2f;
					if (liquidAlpha[10] < 0f)
					{
						liquidAlpha[10] = 0f;
					}
					liquidAlpha[8] += 0.2f;
					if (liquidAlpha[8] > 1f)
					{
						liquidAlpha[8] = 1f;
					}
				}
				if (waterStyle == 9)
				{
					liquidAlpha[0] -= 0.2f;
					if (liquidAlpha[0] < 0f)
					{
						liquidAlpha[0] = 0f;
					}
					liquidAlpha[2] -= 0.2f;
					if (liquidAlpha[2] < 0f)
					{
						liquidAlpha[2] = 0f;
					}
					liquidAlpha[3] -= 0.2f;
					if (liquidAlpha[3] < 0f)
					{
						liquidAlpha[3] = 0f;
					}
					liquidAlpha[4] -= 0.2f;
					if (liquidAlpha[4] < 0f)
					{
						liquidAlpha[4] = 0f;
					}
					liquidAlpha[5] -= 0.2f;
					if (liquidAlpha[5] < 0f)
					{
						liquidAlpha[5] = 0f;
					}
					liquidAlpha[6] -= 0.2f;
					if (liquidAlpha[6] < 0f)
					{
						liquidAlpha[6] = 0f;
					}
					liquidAlpha[7] -= 0.2f;
					if (liquidAlpha[7] < 0f)
					{
						liquidAlpha[7] = 0f;
					}
					liquidAlpha[8] -= 0.2f;
					if (liquidAlpha[8] < 0f)
					{
						liquidAlpha[8] = 0f;
					}
					liquidAlpha[10] -= 0.2f;
					if (liquidAlpha[10] < 0f)
					{
						liquidAlpha[10] = 0f;
					}
					liquidAlpha[9] += 0.2f;
					if (liquidAlpha[9] > 1f)
					{
						liquidAlpha[9] = 1f;
					}
				}
				if (waterStyle == 10)
				{
					liquidAlpha[0] -= 0.2f;
					if (liquidAlpha[0] < 0f)
					{
						liquidAlpha[0] = 0f;
					}
					liquidAlpha[2] -= 0.2f;
					if (liquidAlpha[2] < 0f)
					{
						liquidAlpha[2] = 0f;
					}
					liquidAlpha[3] -= 0.2f;
					if (liquidAlpha[3] < 0f)
					{
						liquidAlpha[3] = 0f;
					}
					liquidAlpha[4] -= 0.2f;
					if (liquidAlpha[4] < 0f)
					{
						liquidAlpha[4] = 0f;
					}
					liquidAlpha[5] -= 0.2f;
					if (liquidAlpha[5] < 0f)
					{
						liquidAlpha[5] = 0f;
					}
					liquidAlpha[6] -= 0.2f;
					if (liquidAlpha[6] < 0f)
					{
						liquidAlpha[6] = 0f;
					}
					liquidAlpha[7] -= 0.2f;
					if (liquidAlpha[7] < 0f)
					{
						liquidAlpha[7] = 0f;
					}
					liquidAlpha[8] -= 0.2f;
					if (liquidAlpha[8] < 0f)
					{
						liquidAlpha[8] = 0f;
					}
					liquidAlpha[9] -= 0.2f;
					if (liquidAlpha[9] < 0f)
					{
						liquidAlpha[9] = 0f;
					}
					liquidAlpha[10] += 0.2f;
					if (liquidAlpha[10] > 1f)
					{
						liquidAlpha[10] = 1f;
					}
				}
			}
			drewLava = false;
			if (!drawToScreen)
			{
				if ((!bg ^ (styleOverride != -1)) && allowUpdate)
				{
					Vector2 vector = drawToScreen ? Vector2.Zero : new Vector2(offScreenRange, offScreenRange);
					int val = (int)((screenPosition.X - vector.X) / 16f - 1f);
					int val2 = (int)((screenPosition.X + (float)screenWidth + vector.X) / 16f) + 2;
					int val3 = (int)((screenPosition.Y - vector.Y) / 16f - 1f);
					int val4 = (int)((screenPosition.Y + (float)screenHeight + vector.Y) / 16f) + 5;
					vector -= screenPosition;
					val = Math.Max(val, 5) - 2;
					val3 = Math.Max(val3, 5);
					val2 = Math.Min(val2, maxTilesX - 5) + 2;
					val4 = Math.Min(val4, maxTilesY - 5) + 4;
					Microsoft.Xna.Framework.Rectangle drawArea = new Microsoft.Xna.Framework.Rectangle(val, val3, val2 - val, val4 - val3);
					LiquidRenderer.Instance.Update(drawArea);
				}
				if (styleOverride != -1)
				{
					DrawWater(bg, styleOverride);
					return;
				}
				for (int i = 0; i < 11; i++)
				{
					if (i != 1 && liquidAlpha[i] > 0f)
					{
						DrawWater(bg, i, liquidAlpha[i]);
					}
				}
				return;
			}
			if (styleOverride != -1)
			{
				DrawWater(bg, styleOverride);
				return;
			}
			if (liquidAlpha[0] > 0f)
			{
				if (bg)
				{
					DrawWater(bg);
				}
				else
				{
					DrawWater(bg, 0, liquidAlpha[0]);
				}
			}
			if (liquidAlpha[2] > 0f)
			{
				if (bg)
				{
					if (waterStyle < 2)
					{
						DrawWater(bg, 2, liquidAlpha[2]);
					}
					else
					{
						DrawWater(bg, 2);
					}
				}
				else
				{
					DrawWater(bg, 2, liquidAlpha[2]);
				}
			}
			if (liquidAlpha[3] > 0f)
			{
				if (bg)
				{
					if (waterStyle < 3)
					{
						DrawWater(bg, 3, liquidAlpha[3]);
					}
					else
					{
						DrawWater(bg, 3);
					}
				}
				else
				{
					DrawWater(bg, 3, liquidAlpha[3]);
				}
			}
			if (liquidAlpha[4] > 0f)
			{
				if (bg)
				{
					if (waterStyle < 4)
					{
						DrawWater(bg, 4, liquidAlpha[4]);
					}
					else
					{
						DrawWater(bg, 4);
					}
				}
				else
				{
					DrawWater(bg, 4, liquidAlpha[4]);
				}
			}
			if (liquidAlpha[5] > 0f)
			{
				if (bg)
				{
					if (waterStyle < 5)
					{
						DrawWater(bg, 5, liquidAlpha[5]);
					}
					else
					{
						DrawWater(bg, 5);
					}
				}
				else
				{
					DrawWater(bg, 5, liquidAlpha[5]);
				}
			}
			if (liquidAlpha[6] > 0f)
			{
				if (bg)
				{
					if (waterStyle < 6)
					{
						DrawWater(bg, 6, liquidAlpha[6]);
					}
					else
					{
						DrawWater(bg, 6);
					}
				}
				else
				{
					DrawWater(bg, 6, liquidAlpha[6]);
				}
			}
			if (liquidAlpha[7] > 0f)
			{
				if (bg)
				{
					if (waterStyle < 7)
					{
						DrawWater(bg, 7, liquidAlpha[7]);
					}
					else
					{
						DrawWater(bg, 7);
					}
				}
				else
				{
					DrawWater(bg, 7, liquidAlpha[7]);
				}
			}
			if (liquidAlpha[8] > 0f)
			{
				if (bg)
				{
					if (waterStyle < 8)
					{
						DrawWater(bg, 8, liquidAlpha[8]);
					}
					else
					{
						DrawWater(bg, 8);
					}
				}
				else
				{
					DrawWater(bg, 8, liquidAlpha[8]);
				}
			}
			if (liquidAlpha[9] > 0f)
			{
				if (bg)
				{
					if (waterStyle < 9)
					{
						DrawWater(bg, 9, liquidAlpha[9]);
					}
					else
					{
						DrawWater(bg, 9);
					}
				}
				else
				{
					DrawWater(bg, 9, liquidAlpha[9]);
				}
			}
			if (!(liquidAlpha[10] > 0f))
			{
				return;
			}
			if (bg)
			{
				if (waterStyle < 10)
				{
					DrawWater(bg, 10, liquidAlpha[10]);
				}
				else
				{
					DrawWater(bg, 10);
				}
			}
			else
			{
				DrawWater(bg, 10, liquidAlpha[10]);
			}
		}

		protected void DrawWater(bool bg = false, int Style = 0, float Alpha = 1f)
		{
			if (drawToScreen)
			{
				oldDrawWater(bg, Style, Alpha);
				return;
			}
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			Vector2 drawOffset = (drawToScreen ? Vector2.Zero : new Vector2(offScreenRange, offScreenRange)) - screenPosition;
			LiquidRenderer.Instance.Draw(spriteBatch, drawOffset, Style, Alpha, bg);
			if (!bg)
			{
				TimeLogger.DrawTime(4, stopwatch.Elapsed.TotalMilliseconds);
			}
		}

		public void oldDrawWater(bool bg = false, int Style = 0, float Alpha = 1f)
		{
			float num = 0f;
			float num2 = 99999f;
			float num3 = 99999f;
			int num4 = -1;
			int num5 = -1;
			Vector2 value = new Vector2(offScreenRange, offScreenRange);
			if (drawToScreen)
			{
				value = Vector2.Zero;
			}
			int num6 = (int)(255f * (1f - gfxQuality) + 40f * gfxQuality);
			float gfxQuality2 = gfxQuality;
			float gfxQuality3 = gfxQuality;
			int num7 = (int)((screenPosition.X - value.X) / 16f - 1f);
			int num8 = (int)((screenPosition.X + (float)screenWidth + value.X) / 16f) + 2;
			int num9 = (int)((screenPosition.Y - value.Y) / 16f - 1f);
			int num10 = (int)((screenPosition.Y + (float)screenHeight + value.Y) / 16f) + 5;
			if (num7 < 5)
			{
				num7 = 5;
			}
			if (num8 > maxTilesX - 5)
			{
				num8 = maxTilesX - 5;
			}
			if (num9 < 5)
			{
				num9 = 5;
			}
			if (num10 > maxTilesY - 5)
			{
				num10 = maxTilesY - 5;
			}
			for (int i = num9; i < num10 + 4; i++)
			{
				for (int j = num7 - 2; j < num8 + 2; j++)
				{
					if (tile[j, i] == null)
					{
						tile[j, i] = new Tile();
					}
					if (tile[j, i].liquid <= 0 || (tile[j, i].nactive() && tileSolid[tile[j, i].type] && !tileSolidTop[tile[j, i].type]) || (!(Lighting.Brightness(j, i) > 0f) && !bg))
					{
						continue;
					}
					Microsoft.Xna.Framework.Color color = Lighting.GetColor(j, i);
					float num11 = 256 - tile[j, i].liquid;
					num11 /= 32f;
					int num12 = 0;
					if (tile[j, i].lava())
					{
						if (drewLava)
						{
							continue;
						}
						float num13 = Math.Abs((float)(j * 16 + 8) - (screenPosition.X + (float)(screenWidth / 2)));
						float num14 = Math.Abs((float)(i * 16 + 8) - (screenPosition.Y + (float)(screenHeight / 2)));
						if (num13 < (float)(screenWidth * 2) && num14 < (float)(screenHeight * 2))
						{
							float num15 = (float)Math.Sqrt(num13 * num13 + num14 * num14);
							float num16 = 1f - num15 / ((float)screenWidth * 0.75f);
							if (num16 > 0f)
							{
								num += num16;
							}
						}
						if (num13 < num2)
						{
							num2 = num13;
							num4 = j * 16 + 8;
						}
						if (num14 < num3)
						{
							num3 = num13;
							num5 = i * 16 + 8;
						}
						num12 = 1;
					}
					else if (tile[j, i].honey())
					{
						num12 = 11;
					}
					if (num12 == 0)
					{
						num12 = Style;
					}
					if ((num12 == 1 || num12 == 11) && drewLava)
					{
						continue;
					}
					float num17 = 0.5f;
					if (bg)
					{
						num17 = 1f;
					}
					if (num12 != 1 && num12 != 11)
					{
						num17 *= Alpha;
					}
					Vector2 value2 = new Vector2(j * 16, i * 16 + (int)num11 * 2);
					Microsoft.Xna.Framework.Rectangle value3 = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16 - (int)num11 * 2);
					if (tile[j, i + 1].liquid < 245 && (!tile[j, i + 1].nactive() || !tileSolid[tile[j, i + 1].type] || tileSolidTop[tile[j, i + 1].type]))
					{
						float num18 = 256 - tile[j, i + 1].liquid;
						num18 /= 32f;
						num17 = 0.5f * (8f - num11) / 4f;
						if ((double)num17 > 0.55)
						{
							num17 = 0.55f;
						}
						if ((double)num17 < 0.35)
						{
							num17 = 0.35f;
						}
						float num19 = num11 / 2f;
						if (tile[j, i + 1].liquid < 200)
						{
							if (bg)
							{
								continue;
							}
							if (tile[j, i - 1].liquid > 0 && tile[j, i - 1].liquid > 0)
							{
								value3 = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 16);
								num17 = 0.5f;
							}
							else if (tile[j, i - 1].liquid > 0)
							{
								value2 = new Vector2(j * 16, i * 16 + 4);
								value3 = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 12);
								num17 = 0.5f;
							}
							else if (tile[j, i + 1].liquid <= 0)
							{
								value2 = new Vector2(j * 16 + (int)num19, i * 16 + (int)num19 * 2 + (int)num18 * 2);
								value3 = new Microsoft.Xna.Framework.Rectangle(0, 4, 16 - (int)num19 * 2, 16 - (int)num19 * 2);
							}
							else
							{
								value2 = new Vector2(j * 16, i * 16 + (int)num11 * 2 + (int)num18 * 2);
								value3 = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 16 - (int)num11 * 2);
							}
						}
						else
						{
							num17 = 0.5f;
							value3 = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 16 - (int)num11 * 2 + (int)num18 * 2);
						}
					}
					else if (tile[j, i - 1].liquid > 32)
					{
						value3 = new Microsoft.Xna.Framework.Rectangle(0, 4, value3.Width, value3.Height);
					}
					else if (num11 < 1f && tile[j, i - 1].nactive() && tileSolid[tile[j, i - 1].type] && !tileSolidTop[tile[j, i - 1].type])
					{
						value2 = new Vector2(j * 16, i * 16);
						value3 = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 16);
					}
					else
					{
						bool flag = true;
						for (int k = i + 1; k < i + 6 && (!tile[j, k].nactive() || !tileSolid[tile[j, k].type] || tileSolidTop[tile[j, k].type]); k++)
						{
							if (tile[j, k].liquid < 200)
							{
								flag = false;
								break;
							}
						}
						if (!flag)
						{
							num17 = 0.5f;
							value3 = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 16);
						}
						else if (tile[j, i - 1].liquid > 0)
						{
							value3 = new Microsoft.Xna.Framework.Rectangle(0, 2, value3.Width, value3.Height);
						}
					}
					if ((color.R > 20 || color.B > 20 || color.G > 20) && value3.Y < 4)
					{
						int num20 = color.R;
						if (color.G > num20)
						{
							num20 = color.G;
						}
						if (color.B > num20)
						{
							num20 = color.B;
						}
						num20 /= 30;
						if (rand.Next(20000) < num20)
						{
							Microsoft.Xna.Framework.Color newColor = new Microsoft.Xna.Framework.Color(255, 255, 255);
							if (tile[j, i].honey())
							{
								newColor = new Microsoft.Xna.Framework.Color(255, 255, 50);
							}
							int num21 = Dust.NewDust(new Vector2(j * 16, value2.Y - 2f), 16, 8, 43, 0f, 0f, 254, newColor, 0.75f);
							dust[num21].velocity *= 0f;
						}
					}
					if (tile[j, i].honey())
					{
						num17 *= 1.6f;
						if (num17 > 1f)
						{
							num17 = 1f;
						}
					}
					if (tile[j, i].lava())
					{
						num17 *= 1.8f;
						if (num17 > 1f)
						{
							num17 = 1f;
						}
						if (base.IsActive && !gamePaused && Dust.lavaBubbles < 200)
						{
							if (tile[j, i].liquid > 200 && rand.Next(700) == 0)
							{
								Dust.NewDust(new Vector2(j * 16, i * 16), 16, 16, 35);
							}
							if (value3.Y == 0 && rand.Next(350) == 0)
							{
								int num22 = Dust.NewDust(new Vector2(j * 16, (float)(i * 16) + num11 * 2f - 8f), 16, 8, 35, 0f, 0f, 50, default(Microsoft.Xna.Framework.Color), 1.5f);
								dust[num22].velocity *= 0.8f;
								dust[num22].velocity.X *= 2f;
								dust[num22].velocity.Y -= (float)rand.Next(1, 7) * 0.1f;
								if (rand.Next(10) == 0)
								{
									dust[num22].velocity.Y *= rand.Next(2, 5);
								}
								dust[num22].noGravity = true;
							}
						}
					}
					float num23 = (float)(int)color.R * num17;
					float num24 = (float)(int)color.G * num17;
					float num25 = (float)(int)color.B * num17;
					float num26 = (float)(int)color.A * num17;
					color = new Microsoft.Xna.Framework.Color((byte)num23, (byte)num24, (byte)num25, (byte)num26);
					if (Lighting.lightMode < 2 && !bg)
					{
						Microsoft.Xna.Framework.Color color2 = color;
						if (num12 != 1 && ((double)(int)color2.R > (double)num6 * 0.6 || (double)(int)color2.G > (double)num6 * 0.65 || (double)(int)color2.B > (double)num6 * 0.7))
						{
							for (int l = 0; l < 4; l++)
							{
								int num27 = 0;
								int num28 = 0;
								int width = 8;
								int height = 8;
								Microsoft.Xna.Framework.Color color3 = color2;
								Microsoft.Xna.Framework.Color color4 = Lighting.GetColor(j, i);
								if (l == 0)
								{
									color4 = Lighting.GetColor(j - 1, i - 1);
									if (value3.Height < 8)
									{
										height = value3.Height;
									}
								}
								if (l == 1)
								{
									color4 = Lighting.GetColor(j + 1, i - 1);
									num27 = 8;
									if (value3.Height < 8)
									{
										height = value3.Height;
									}
								}
								if (l == 2)
								{
									color4 = Lighting.GetColor(j - 1, i + 1);
									num28 = 8;
									height = 8 - (16 - value3.Height);
								}
								if (l == 3)
								{
									color4 = Lighting.GetColor(j + 1, i + 1);
									num27 = 8;
									num28 = 8;
									height = 8 - (16 - value3.Height);
								}
								num23 = (float)(int)color4.R * num17;
								num24 = (float)(int)color4.G * num17;
								num25 = (float)(int)color4.B * num17;
								num26 = (float)(int)color4.A * num17;
								color4 = new Microsoft.Xna.Framework.Color((byte)num23, (byte)num24, (byte)num25, (byte)num26);
								color3.R = (byte)((color2.R * 3 + color4.R * 2) / 5);
								color3.G = (byte)((color2.G * 3 + color4.G * 2) / 5);
								color3.B = (byte)((color2.B * 3 + color4.B * 2) / 5);
								color3.A = (byte)((color2.A * 3 + color4.A * 2) / 5);
								spriteBatch.Draw(liquidTexture[num12], value2 - screenPosition + new Vector2(num27, num28) + value, new Microsoft.Xna.Framework.Rectangle(value3.X + num27, value3.Y + num28, width, height), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							}
						}
						else
						{
							spriteBatch.Draw(liquidTexture[num12], value2 - screenPosition + value, value3, color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						}
					}
					else
					{
						if (value3.Y < 4)
						{
							value3.X += (int)(wFrame * 18f);
						}
						spriteBatch.Draw(liquidTexture[num12], value2 - screenPosition + value, value3, color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					}
					if (tile[j, i + 1].halfBrick())
					{
						color = Lighting.GetColor(j, i + 1);
						num23 = (float)(int)color.R * num17;
						num24 = (float)(int)color.G * num17;
						num25 = (float)(int)color.B * num17;
						num26 = (float)(int)color.A * num17;
						color = new Microsoft.Xna.Framework.Color((byte)num23, (byte)num24, (byte)num25, (byte)num26);
						value2 = new Vector2(j * 16, i * 16 + 16);
						spriteBatch.Draw(liquidTexture[num12], value2 - screenPosition + value, new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 8), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					}
				}
			}
			if (!drewLava)
			{
				ambientLavaX = num4;
				ambientLavaY = num5;
				ambientLavaStrength = num;
			}
			drewLava = true;
		}

		protected bool FullTile(int x, int y)
		{
			if (Main.tile[x - 1, y] == null || Main.tile[x - 1, y].blockType() != 0 || Main.tile[x + 1, y] == null || Main.tile[x + 1, y].blockType() != 0)
			{
				return false;
			}
			Tile tile = Main.tile[x, y];
			if (tile == null)
			{
				return false;
			}
			if (tile.active())
			{
				switch (tile.type)
				{
				case 10:
				case 48:
				case 54:
				case 137:
				case 138:
				case 162:
				case 191:
				case 232:
				case 328:
				case 387:
				case 388:
					return false;
				}
				if (tileSolid[tile.type] && !tileSolidTop[tile.type])
				{
					int frameX = tile.frameX;
					int frameY = tile.frameY;
					if (tileLargeFrames[tile.type] == 1)
					{
						if (frameY == 18 || frameY == 108)
						{
							if (frameX >= 18 && frameX <= 54)
							{
								return true;
							}
							if (frameX >= 108 && frameX <= 144)
							{
								return true;
							}
						}
					}
					else if (frameY == 18)
					{
						if (frameX >= 18 && frameX <= 54)
						{
							return true;
						}
						if (frameX >= 108 && frameX <= 144)
						{
							return true;
						}
					}
					else if (frameY >= 90 && frameY <= 196)
					{
						if (frameX <= 70)
						{
							return true;
						}
						if (frameX >= 144 && frameX <= 232)
						{
							return true;
						}
					}
				}
			}
			return false;
		}

		protected void DrawBlack(bool force = false)
		{
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			Vector2 value = drawToScreen ? Vector2.Zero : new Vector2(offScreenRange, offScreenRange);
			int num = (tileColor.R + tileColor.G + tileColor.B) / 3;
			float num2 = (float)((double)num * 0.4) / 255f;
			if (Lighting.lightMode == 2)
			{
				num2 = (float)(tileColor.R - 55) / 255f;
				if (num2 < 0f)
				{
					num2 = 0f;
				}
			}
			else if (Lighting.lightMode == 3)
			{
				num2 = (float)(num - 55) / 255f;
				if (num2 < 0f)
				{
					num2 = 0f;
				}
			}
			int num3 = offScreenRange / 16;
			int num4 = (int)((screenPosition.X - value.X) / 16f - 1f) - num3;
			int num5 = (int)((screenPosition.X + (float)screenWidth + value.X) / 16f) + 2 + num3;
			int num6 = (int)((screenPosition.Y - value.Y) / 16f - 1f) - num3;
			int num7 = (int)((screenPosition.Y + (float)screenHeight + value.Y) / 16f) + 5 + num3;
			if (num4 < 0)
			{
				num4 = num3;
			}
			if (num5 > maxTilesX)
			{
				num5 = maxTilesX - num3;
			}
			if (num6 < 0)
			{
				num6 = num3;
			}
			if (num7 > maxTilesY)
			{
				num7 = maxTilesY - num3;
			}
			if (!force)
			{
				if (num6 < maxTilesY / 2)
				{
					num7 = Math.Min(num7, (int)worldSurface + 1);
					num6 = Math.Min(num6, (int)worldSurface + 1);
				}
				else
				{
					num7 = Math.Max(num7, maxTilesY - 200);
					num6 = Math.Max(num6, maxTilesY - 200);
				}
			}
			for (int i = num6; i < num7; i++)
			{
				bool flag = i >= maxTilesY - 200;
				if (flag)
				{
					num2 = 0.2f;
				}
				for (int j = num4; j < num5; j++)
				{
					int num8 = j;
					for (; j < num5; j++)
					{
						if (Main.tile[j, i] == null)
						{
							Main.tile[j, i] = new Tile();
						}
						Tile tile = Main.tile[j, i];
						float num9 = Lighting.Brightness(j, i);
						num9 = (float)Math.Floor(num9 * 255f) / 255f;
						byte b = tile.liquid;
						if (!(num9 <= num2) || ((flag || b >= 250) && !WorldGen.SolidTile(tile) && (b < 250 || num9 != 0f)) || (WallID.Sets.Transparent[tile.wall] && (!Main.tile[j, i].active() || !tileBlockLight[tile.type])) || (!drawToScreen && LiquidRenderer.Instance.HasFullWater(j, i) && tile.wall == 0 && !tile.halfBrick()))
						{
							break;
						}
					}
					if (j - num8 > 0)
					{
						spriteBatch.Draw(blackTileTexture, new Vector2(num8 << 4, i << 4) - screenPosition + value, new Microsoft.Xna.Framework.Rectangle(0, 0, j - num8 << 4, 16), Microsoft.Xna.Framework.Color.Black);
					}
				}
			}
			TimeLogger.DrawTime(5, stopwatch.Elapsed.TotalMilliseconds);
		}

		protected void RenderBlack()
		{
			if (!drawToScreen)
			{
				base.GraphicsDevice.SetRenderTarget(blackTarget);
				base.GraphicsDevice.DepthStencilState = new DepthStencilState
				{
					DepthBufferEnable = true
				};
				base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
				spriteBatch.Begin();
				DrawBlack();
				TimeLogger.DetailedDrawReset();
				spriteBatch.End();
				TimeLogger.DetailedDrawTime(30);
				base.GraphicsDevice.SetRenderTarget(null);
			}
		}

		protected void DrawWalls()
		{
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			float gfxQuality2 = gfxQuality;
			float gfxQuality3 = gfxQuality;
			int num = (int)(120f * (1f - gfxQuality) + 40f * gfxQuality);
			Vector2 value = new Vector2(offScreenRange, offScreenRange);
			if (drawToScreen)
			{
				value = Vector2.Zero;
			}
			int num2 = (tileColor.R + tileColor.G + tileColor.B) / 3;
			float num10 = (float)((double)num2 * 0.53) / 255f;
			if (Lighting.lightMode == 2)
			{
				float num11 = (float)(num2 - 12) / 255f;
			}
			if (Lighting.lightMode == 3)
			{
				float num12 = (float)(num2 - 12) / 255f;
			}
			int num3 = (int)((screenPosition.X - value.X) / 16f - 1f);
			int num4 = (int)((screenPosition.X + (float)screenWidth + value.X) / 16f) + 2;
			int num5 = (int)((screenPosition.Y - value.Y) / 16f - 1f);
			int num6 = (int)((screenPosition.Y + (float)screenHeight + value.Y) / 16f) + 5;
			int num7 = offScreenRange / 16;
			int num8 = offScreenRange / 16;
			if (num3 - num7 < 0)
			{
				num3 = num7;
			}
			if (num4 + num7 > maxTilesX)
			{
				num4 = maxTilesX - num7;
			}
			if (num5 - num8 < 0)
			{
				num5 = num8;
			}
			if (num6 + num8 > maxTilesY)
			{
				num6 = maxTilesY - num8;
			}
			VertexColors vertices = default(VertexColors);
			for (int i = num5 - num8; i < num6 + num8; i++)
			{
				for (int j = num3 - num7; j < num4 + num7; j++)
				{
					Tile tile = Main.tile[j, i];
					if (tile == null)
					{
						tile = new Tile();
						Main.tile[j, i] = tile;
					}
					byte wall = tile.wall;
					if (tile.wall <= 0 || FullTile(j, i))
					{
						continue;
					}
					LoadWall(tile.wall);
					Microsoft.Xna.Framework.Color color = Lighting.GetColor(j, i);
					int num9 = wallFrame[wall] * 180;
					if (Lighting.lightMode < 2 && !wallLight[tile.wall] && (tile.wall < 88 || tile.wall > 93) && !WorldGen.SolidTile(tile))
					{
						Texture2D texture = (!canDrawColorWall(j, i)) ? wallTexture[tile.wall] : wallAltTexture[tile.wall, tile.wallColor()];
						if (tile.wall == 44)
						{
							vertices.TopRightColor = (vertices.TopLeftColor = (vertices.BottomRightColor = (vertices.BottomLeftColor = new Microsoft.Xna.Framework.Color((byte)DiscoR, (byte)DiscoG, (byte)DiscoB))));
						}
						else
						{
							Lighting.GetColor4Slice_New(j, i, out vertices);
						}
						tileBatch.Draw(texture, new Vector2(j * 16 - (int)screenPosition.X - 8, i * 16 - (int)screenPosition.Y - 8) + value, new Microsoft.Xna.Framework.Rectangle(tile.wallFrameX(), tile.wallFrameY() + num9, 32, 32), vertices, Vector2.Zero, 1f, SpriteEffects.None);
					}
					else if (tile.wall == 44)
					{
						Microsoft.Xna.Framework.Color color2 = default(Microsoft.Xna.Framework.Color);
						color2.R = (byte)DiscoR;
						color2.G = (byte)DiscoG;
						color2.B = (byte)DiscoB;
						color2.A = byte.MaxValue;
						Microsoft.Xna.Framework.Rectangle value2 = new Microsoft.Xna.Framework.Rectangle(tile.wallFrameX(), tile.wallFrameY() + num9, 32, 32);
						spriteBatch.Draw(wallTexture[tile.wall], new Vector2(j * 16 - (int)screenPosition.X - 8, i * 16 - (int)screenPosition.Y - 8) + value, value2, color2, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					}
					else
					{
						Microsoft.Xna.Framework.Rectangle value2 = new Microsoft.Xna.Framework.Rectangle(tile.wallFrameX(), tile.wallFrameY() + num9, 32, 32);
						if (canDrawColorWall(j, i))
						{
							spriteBatch.Draw(wallAltTexture[tile.wall, tile.wallColor()], new Vector2(j * 16 - (int)screenPosition.X - 8, i * 16 - (int)screenPosition.Y - 8) + value, value2, Lighting.GetColor(j, i), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						}
						else
						{
							spriteBatch.Draw(wallTexture[tile.wall], new Vector2(j * 16 - (int)screenPosition.X - 8, i * 16 - (int)screenPosition.Y - 8) + value, value2, Lighting.GetColor(j, i), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						}
					}
					if ((double)(int)color.R > (double)num * 0.4 || (double)(int)color.G > (double)num * 0.35 || (double)(int)color.B > (double)num * 0.3)
					{
						bool flag = false;
						if (Main.tile[j - 1, i].wall > 0 && wallBlend[Main.tile[j - 1, i].wall] != wallBlend[tile.wall])
						{
							flag = true;
						}
						bool flag2 = false;
						if (Main.tile[j + 1, i].wall > 0 && wallBlend[Main.tile[j + 1, i].wall] != wallBlend[tile.wall])
						{
							flag2 = true;
						}
						bool flag3 = false;
						if (Main.tile[j, i - 1].wall > 0 && wallBlend[Main.tile[j, i - 1].wall] != wallBlend[tile.wall])
						{
							flag3 = true;
						}
						bool flag4 = false;
						if (Main.tile[j, i + 1].wall > 0 && wallBlend[Main.tile[j, i + 1].wall] != wallBlend[tile.wall])
						{
							flag4 = true;
						}
						if (flag)
						{
							spriteBatch.Draw(wallOutlineTexture, new Vector2(j * 16 - (int)screenPosition.X, i * 16 - (int)screenPosition.Y) + value, new Microsoft.Xna.Framework.Rectangle(0, 0, 2, 16), Lighting.GetColor(j, i), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						}
						if (flag2)
						{
							spriteBatch.Draw(wallOutlineTexture, new Vector2(j * 16 - (int)screenPosition.X + 14, i * 16 - (int)screenPosition.Y) + value, new Microsoft.Xna.Framework.Rectangle(14, 0, 2, 16), Lighting.GetColor(j, i), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						}
						if (flag3)
						{
							spriteBatch.Draw(wallOutlineTexture, new Vector2(j * 16 - (int)screenPosition.X, i * 16 - (int)screenPosition.Y) + value, new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 2), Lighting.GetColor(j, i), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						}
						if (flag4)
						{
							spriteBatch.Draw(wallOutlineTexture, new Vector2(j * 16 - (int)screenPosition.X, i * 16 - (int)screenPosition.Y + 14) + value, new Microsoft.Xna.Framework.Rectangle(0, 14, 16, 2), Lighting.GetColor(j, i), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						}
					}
				}
			}
			DrawTileCracks(2);
			TimeLogger.DrawTime(2, stopwatch.Elapsed.TotalMilliseconds);
		}

		protected void RenderWalls()
		{
			if (!drawToScreen)
			{
				base.GraphicsDevice.SetRenderTarget(wallTarget);
				base.GraphicsDevice.DepthStencilState = new DepthStencilState
				{
					DepthBufferEnable = true
				};
				base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
				spriteBatch.Begin();
				tileBatch.Begin();
				if (ignoreErrors)
				{
					try
					{
						DrawWalls();
					}
					catch (Exception e)
					{
						TimeLogger.DrawException(e);
					}
				}
				else
				{
					DrawWalls();
				}
				TimeLogger.DetailedDrawReset();
				tileBatch.End();
				spriteBatch.End();
				TimeLogger.DetailedDrawTime(32);
				base.GraphicsDevice.SetRenderTarget(null);
			}
		}

		protected void ReleaseTargets()
		{
			try
			{
				if (!dedServ)
				{
					offScreenRange = 0;
					targetSet = false;
					if (waterTarget != null)
					{
						waterTarget.Dispose();
					}
					if (backWaterTarget != null)
					{
						backWaterTarget.Dispose();
					}
					if (blackTarget != null)
					{
						blackTarget.Dispose();
					}
					if (tileTarget != null)
					{
						tileTarget.Dispose();
					}
					if (tile2Target != null)
					{
						tile2Target.Dispose();
					}
					if (wallTarget != null)
					{
						wallTarget.Dispose();
					}
					if (screenTarget != null)
					{
						screenTarget.Dispose();
					}
					if (backgroundTarget != null)
					{
						backgroundTarget.Dispose();
					}
				}
			}
			catch
			{
			}
		}

		protected bool checkMap(int i, int j)
		{
			if (!initMap[i, j])
			{
				try
				{
					int width = textureMaxWidth;
					int height = textureMaxHeight;
					if (i == mapTargetX - 1)
					{
						width = 400;
					}
					if (j == mapTargetY - 1)
					{
						height = 600;
					}
					mapTarget[i, j] = new RenderTarget2D(base.GraphicsDevice, width, height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth16, 0, RenderTargetUsage.PreserveContents);
				}
				catch
				{
					mapEnabled = false;
					for (int k = 0; k < mapTargetX; k++)
					{
						for (int l = 0; l < mapTargetY; l++)
						{
							try
							{
								initMap[k, l] = false;
								mapTarget[k, l].Dispose();
							}
							catch
							{
							}
						}
					}
					return false;
				}
				initMap[i, j] = true;
			}
			return true;
		}

		protected void InitMap()
		{
			int num = mapTargetX;
			int num2 = mapTargetY;
			if (mapEnabled)
			{
				try
				{
					for (int i = 0; i < num; i++)
					{
						for (int j = 0; j < num2; j++)
						{
							mapTarget[i, j] = new RenderTarget2D(base.GraphicsDevice, textureMaxWidth, textureMaxHeight, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24, 0, RenderTargetUsage.PreserveContents);
						}
					}
					mapInit = true;
				}
				catch
				{
					mapEnabled = false;
					for (int k = 0; k < num; k++)
					{
						for (int l = 0; l < num2; l++)
						{
							try
							{
								if (mapTarget[k, l] != null)
								{
									mapTarget[k, l].Dispose();
								}
							}
							catch
							{
							}
						}
					}
				}
			}
		}

		protected void InitTargets()
		{
			UpdateDisplaySettings();
			InitTargets(base.GraphicsDevice.PresentationParameters.BackBufferWidth, base.GraphicsDevice.PresentationParameters.BackBufferHeight);
		}

		protected void EnsureRenderTargetContent()
		{
			if (waterTarget == null || waterTarget.IsContentLost || backWaterTarget == null || backWaterTarget.IsContentLost || blackTarget == null || blackTarget.IsContentLost || tileTarget == null || tileTarget.IsContentLost || tile2Target == null || tile2Target.IsContentLost || wallTarget == null || wallTarget.IsContentLost || backgroundTarget == null || backgroundTarget.IsContentLost || screenTarget == null || screenTarget.IsContentLost)
			{
				InitTargets();
			}
		}

		protected void InitTargets(int width, int height)
		{
			ReleaseTargets();
			offScreenRange = 192;
			if (width + offScreenRange * 2 > 2048)
			{
				offScreenRange = (2048 - width) / 2;
			}
			width += offScreenRange * 2;
			height += offScreenRange * 2;
			try
			{
				if (!dedServ)
				{
					targetSet = true;
					waterTarget = new RenderTarget2D(base.GraphicsDevice, width, height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
					backWaterTarget = new RenderTarget2D(base.GraphicsDevice, width, height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
					blackTarget = new RenderTarget2D(base.GraphicsDevice, width, height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
					tileTarget = new RenderTarget2D(base.GraphicsDevice, width, height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
					tile2Target = new RenderTarget2D(base.GraphicsDevice, width, height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
					wallTarget = new RenderTarget2D(base.GraphicsDevice, width, height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
					backgroundTarget = new RenderTarget2D(base.GraphicsDevice, width, height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
					screenTarget = new RenderTarget2D(base.GraphicsDevice, base.GraphicsDevice.PresentationParameters.BackBufferWidth, base.GraphicsDevice.PresentationParameters.BackBufferHeight, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
				}
			}
			catch
			{
				Lighting.lightMode = 2;
				mapEnabled = false;
				SaveSettings();
				try
				{
					ReleaseTargets();
				}
				catch
				{
				}
			}
		}

		protected void DrawWires()
		{
			float gfxQuality2 = gfxQuality;
			float gfxQuality3 = gfxQuality;
			Vector2 value = new Vector2(offScreenRange, offScreenRange);
			if (drawToScreen)
			{
				value = Vector2.Zero;
			}
			int num = (int)((screenPosition.X - value.X) / 16f - 1f);
			int num2 = (int)((screenPosition.X + (float)screenWidth + value.X) / 16f) + 2;
			int num3 = (int)((screenPosition.Y - value.Y) / 16f - 1f);
			int num4 = (int)((screenPosition.Y + (float)screenHeight + value.Y) / 16f) + 5;
			if (num < 0)
			{
				num = 0;
			}
			if (num2 > maxTilesX)
			{
				num2 = maxTilesX;
			}
			if (num3 < 0)
			{
				num3 = 0;
			}
			if (num4 > maxTilesY)
			{
				num4 = maxTilesY;
			}
			for (int i = num3; i < num4; i++)
			{
				for (int j = num; j < num2; j++)
				{
					if (tile[j, i].wire() && Lighting.Brightness(j, i) > 0f)
					{
						Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16);
						bool flag = tile[j, i - 1].wire();
						bool flag2 = tile[j, i + 1].wire();
						bool flag3 = tile[j - 1, i].wire();
						bool flag4 = tile[j + 1, i].wire();
						rectangle = (flag ? (flag2 ? (flag3 ? (flag4 ? new Microsoft.Xna.Framework.Rectangle(18, 18, 16, 16) : new Microsoft.Xna.Framework.Rectangle(54, 0, 16, 16)) : (flag4 ? new Microsoft.Xna.Framework.Rectangle(36, 0, 16, 16) : new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16))) : (flag3 ? (flag4 ? new Microsoft.Xna.Framework.Rectangle(0, 18, 16, 16) : new Microsoft.Xna.Framework.Rectangle(54, 18, 16, 16)) : (flag4 ? new Microsoft.Xna.Framework.Rectangle(36, 18, 16, 16) : new Microsoft.Xna.Framework.Rectangle(36, 36, 16, 16)))) : (flag2 ? (flag3 ? (flag4 ? new Microsoft.Xna.Framework.Rectangle(72, 0, 16, 16) : new Microsoft.Xna.Framework.Rectangle(72, 18, 16, 16)) : (flag4 ? new Microsoft.Xna.Framework.Rectangle(0, 36, 16, 16) : new Microsoft.Xna.Framework.Rectangle(18, 36, 16, 16))) : (flag3 ? (flag4 ? new Microsoft.Xna.Framework.Rectangle(18, 0, 16, 16) : new Microsoft.Xna.Framework.Rectangle(54, 36, 16, 16)) : (flag4 ? new Microsoft.Xna.Framework.Rectangle(72, 36, 16, 16) : new Microsoft.Xna.Framework.Rectangle(0, 54, 16, 16)))));
						Microsoft.Xna.Framework.Color color = Lighting.GetColor(j, i);
						spriteBatch.Draw(wireTexture, new Vector2(j * 16 - (int)screenPosition.X, i * 16 - (int)screenPosition.Y) + value, rectangle, color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					}
					if (tile[j, i].wire2() && Lighting.Brightness(j, i) > 0f)
					{
						Microsoft.Xna.Framework.Rectangle rectangle2 = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16);
						bool flag5 = tile[j, i - 1].wire2();
						bool flag6 = tile[j, i + 1].wire2();
						bool flag7 = tile[j - 1, i].wire2();
						bool flag8 = tile[j + 1, i].wire2();
						rectangle2 = (flag5 ? (flag6 ? (flag7 ? (flag8 ? new Microsoft.Xna.Framework.Rectangle(18, 18, 16, 16) : new Microsoft.Xna.Framework.Rectangle(54, 0, 16, 16)) : (flag8 ? new Microsoft.Xna.Framework.Rectangle(36, 0, 16, 16) : new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16))) : (flag7 ? (flag8 ? new Microsoft.Xna.Framework.Rectangle(0, 18, 16, 16) : new Microsoft.Xna.Framework.Rectangle(54, 18, 16, 16)) : (flag8 ? new Microsoft.Xna.Framework.Rectangle(36, 18, 16, 16) : new Microsoft.Xna.Framework.Rectangle(36, 36, 16, 16)))) : (flag6 ? (flag7 ? (flag8 ? new Microsoft.Xna.Framework.Rectangle(72, 0, 16, 16) : new Microsoft.Xna.Framework.Rectangle(72, 18, 16, 16)) : (flag8 ? new Microsoft.Xna.Framework.Rectangle(0, 36, 16, 16) : new Microsoft.Xna.Framework.Rectangle(18, 36, 16, 16))) : (flag7 ? (flag8 ? new Microsoft.Xna.Framework.Rectangle(18, 0, 16, 16) : new Microsoft.Xna.Framework.Rectangle(54, 36, 16, 16)) : (flag8 ? new Microsoft.Xna.Framework.Rectangle(72, 36, 16, 16) : new Microsoft.Xna.Framework.Rectangle(0, 54, 16, 16)))));
						Microsoft.Xna.Framework.Color color2 = Lighting.GetColor(j, i);
						int num5 = 1;
						float num6 = 1f;
						if (tile[j, i].wire())
						{
							num5++;
						}
						num6 = 1f / (float)num5;
						byte r = (byte)((float)(int)color2.R * num6);
						byte g = (byte)((float)(int)color2.G * num6);
						byte b = (byte)((float)(int)color2.B * num6);
						byte a = (byte)((float)(int)color2.A * num6);
						color2 = new Microsoft.Xna.Framework.Color(r, g, b, a);
						spriteBatch.Draw(wire2Texture, new Vector2(j * 16 - (int)screenPosition.X, i * 16 - (int)screenPosition.Y) + value, rectangle2, color2, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					}
					if (tile[j, i].wire3() && Lighting.Brightness(j, i) > 0f)
					{
						Microsoft.Xna.Framework.Rectangle rectangle3 = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16);
						bool flag9 = tile[j, i - 1].wire3();
						bool flag10 = tile[j, i + 1].wire3();
						bool flag11 = tile[j - 1, i].wire3();
						bool flag12 = tile[j + 1, i].wire3();
						rectangle3 = (flag9 ? (flag10 ? (flag11 ? (flag12 ? new Microsoft.Xna.Framework.Rectangle(18, 18, 16, 16) : new Microsoft.Xna.Framework.Rectangle(54, 0, 16, 16)) : (flag12 ? new Microsoft.Xna.Framework.Rectangle(36, 0, 16, 16) : new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16))) : (flag11 ? (flag12 ? new Microsoft.Xna.Framework.Rectangle(0, 18, 16, 16) : new Microsoft.Xna.Framework.Rectangle(54, 18, 16, 16)) : (flag12 ? new Microsoft.Xna.Framework.Rectangle(36, 18, 16, 16) : new Microsoft.Xna.Framework.Rectangle(36, 36, 16, 16)))) : (flag10 ? (flag11 ? (flag12 ? new Microsoft.Xna.Framework.Rectangle(72, 0, 16, 16) : new Microsoft.Xna.Framework.Rectangle(72, 18, 16, 16)) : (flag12 ? new Microsoft.Xna.Framework.Rectangle(0, 36, 16, 16) : new Microsoft.Xna.Framework.Rectangle(18, 36, 16, 16))) : (flag11 ? (flag12 ? new Microsoft.Xna.Framework.Rectangle(18, 0, 16, 16) : new Microsoft.Xna.Framework.Rectangle(54, 36, 16, 16)) : (flag12 ? new Microsoft.Xna.Framework.Rectangle(72, 36, 16, 16) : new Microsoft.Xna.Framework.Rectangle(0, 54, 16, 16)))));
						Microsoft.Xna.Framework.Color color3 = Lighting.GetColor(j, i);
						int num7 = 1;
						float num8 = 1f;
						if (tile[j, i].wire())
						{
							num7++;
						}
						if (tile[j, i].wire2())
						{
							num7++;
						}
						num8 = 1f / (float)num7;
						byte r2 = (byte)((float)(int)color3.R * num8);
						byte g2 = (byte)((float)(int)color3.G * num8);
						byte b2 = (byte)((float)(int)color3.B * num8);
						byte a2 = (byte)((float)(int)color3.A * num8);
						color3 = new Microsoft.Xna.Framework.Color(r2, g2, b2, a2);
						spriteBatch.Draw(wire3Texture, new Vector2(j * 16 - (int)screenPosition.X, i * 16 - (int)screenPosition.Y) + value, rectangle3, color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					}
					if (tile[j, i].actuator() && Lighting.Brightness(j, i) > 0f)
					{
						Microsoft.Xna.Framework.Color color4 = Lighting.GetColor(j, i);
						spriteBatch.Draw(actuatorTexture, new Vector2(j * 16 - (int)screenPosition.X, i * 16 - (int)screenPosition.Y) + value, new Microsoft.Xna.Framework.Rectangle(0, 0, actuatorTexture.Width, actuatorTexture.Height), color4, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					}
				}
			}
			TimeLogger.DetailedDrawTime(34);
		}

		public static int GetTreeStyle(int X)
		{
			int num = 0;
			num = ((X <= treeX[0]) ? treeStyle[0] : ((X <= treeX[1]) ? treeStyle[1] : ((X > treeX[2]) ? treeStyle[3] : treeStyle[2])));
			switch (num)
			{
			case 0:
				return 0;
			case 5:
				return 10;
			default:
				return 5 + num;
			}
		}

		protected void lookForColorTiles()
		{
			int num = (int)(screenPosition.X / 16f - 2f);
			int num2 = (int)((screenPosition.X + (float)screenWidth) / 16f) + 3;
			int num3 = (int)(screenPosition.Y / 16f - 2f);
			int num4 = (int)((screenPosition.Y + (float)screenHeight) / 16f) + 3;
			if (num < 1)
			{
				num = 1;
			}
			if (num2 > maxTilesX - 2)
			{
				num2 = maxTilesX - 2;
			}
			if (num3 < 1)
			{
				num3 = 1;
			}
			if (num4 > maxTilesY - 2)
			{
				num4 = maxTilesY - 2;
			}
			for (int i = num; i < num2; i++)
			{
				if (i <= 0)
				{
					continue;
				}
				for (int j = num3; j < num4; j++)
				{
					if (tile[i, j] != null)
					{
						int treeVariant = GetTreeVariant(i, j);
						if (treeVariant != -1)
						{
							woodColorCheck(treeVariant, tile[i, j].color());
						}
						if (tile[i, j].active() && tile[i, j].color() > 0)
						{
							tileColorCheck(tile[i, j].type, tile[i, j].color());
						}
						if (tile[i, j].wall > 0 && tile[i, j].wallColor() > 0)
						{
							wallColorCheck(tile[i, j].wall, tile[i, j].wallColor());
						}
					}
				}
			}
			for (int k = 0; k < numTreeStyles; k++)
			{
				for (int l = 0; l < numTileColors; l++)
				{
					if (checkTreeAlt[k, l])
					{
						treeColorCheck(k, l);
						checkTreeAlt[k, l] = false;
					}
				}
			}
		}

		protected static int GetTreeVariant(int x, int y)
		{
			if (tile[x, y] == null || !tile[x, y].active())
			{
				return -1;
			}
			switch (tile[x, y].type)
			{
			case 23:
				return 0;
			case 60:
				if (!((double)y > worldSurface))
				{
					return 1;
				}
				return 5;
			case 70:
				return 6;
			case 109:
				return 2;
			case 147:
				return 3;
			case 199:
				return 4;
			default:
				return -1;
			}
		}

		protected void woodColorCheck(int t, int c)
		{
			LoadTiles(5);
			if (c >= numTileColors)
			{
				return;
			}
			bool flag = false;
			if (woodAltTexture[t, c] == null)
			{
				woodAltTexture[t, c] = new RenderTarget2D(base.GraphicsDevice, woodTexture[t].Width, woodTexture[t].Height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24, 0, RenderTargetUsage.PreserveContents);
				flag = true;
			}
			if (woodAltTexture[t, c].IsContentLost)
			{
				flag = true;
			}
			if (flag)
			{
				base.GraphicsDevice.SetRenderTarget(woodAltTexture[t, c]);
				base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
				spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
				if (c >= 28)
				{
					int index = 40 + c - 28;
					tileShader.CurrentTechnique.Passes[index].Apply();
				}
				else if (c > 0 && c < 13)
				{
					int index2 = c + 27;
					tileShader.CurrentTechnique.Passes[index2].Apply();
				}
				else
				{
					tileShader.CurrentTechnique.Passes[c].Apply();
				}
				spriteBatch.Draw(woodTexture[t], new Microsoft.Xna.Framework.Rectangle(0, 0, woodTexture[t].Width, woodTexture[t].Height), Microsoft.Xna.Framework.Color.White);
				spriteBatch.End();
				base.GraphicsDevice.SetRenderTarget(null);
			}
		}

		protected void tileColorCheck(int t, int c)
		{
			LoadTiles(t);
			if (c >= numTileColors)
			{
				return;
			}
			if (!tileAltTextureInit[t, c])
			{
				tileAltTexture[t, c] = new RenderTarget2D(base.GraphicsDevice, tileTexture[t].Width, tileTexture[t].Height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24, 0, RenderTargetUsage.PreserveContents);
				tileAltTextureInit[t, c] = true;
			}
			if (tileAltTexture[t, c].IsContentLost)
			{
				tileAltTextureDrawn[t, c] = false;
			}
			if (!tileAltTextureDrawn[t, c])
			{
				base.GraphicsDevice.SetRenderTarget(tileAltTexture[t, c]);
				base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
				spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
				if (c >= 28)
				{
					int index = 40 + c - 28;
					tileShader.CurrentTechnique.Passes[index].Apply();
				}
				else if (c > 0 && c < 13 && (t == 0 || t == 2 || t == 5 || t == 23 || t == 59 || t == 60 || t == 70 || t == 109 || t == 199))
				{
					int index2 = c + 27;
					tileShader.CurrentTechnique.Passes[index2].Apply();
				}
				else
				{
					tileShader.CurrentTechnique.Passes[c].Apply();
				}
				spriteBatch.Draw(tileTexture[t], new Microsoft.Xna.Framework.Rectangle(0, 0, tileTexture[t].Width, tileTexture[t].Height), Microsoft.Xna.Framework.Color.White);
				spriteBatch.End();
				base.GraphicsDevice.SetRenderTarget(null);
				tileAltTextureDrawn[t, c] = true;
			}
		}

		protected void treeColorCheck(int t, int c)
		{
			if (!treeAltTextureInit[t, c])
			{
				treeTopAltTexture[t, c] = new RenderTarget2D(base.GraphicsDevice, treeTopTexture[t].Width, treeTopTexture[t].Height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24, 0, RenderTargetUsage.PreserveContents);
				treeBranchAltTexture[t, c] = new RenderTarget2D(base.GraphicsDevice, treeBranchTexture[t].Width, treeBranchTexture[t].Height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24, 0, RenderTargetUsage.PreserveContents);
				treeAltTextureInit[t, c] = true;
			}
			if (treeTopAltTexture[t, c].IsContentLost || treeBranchAltTexture[t, c].IsContentLost)
			{
				treeAltTextureDrawn[t, c] = false;
			}
			if (!treeAltTextureDrawn[t, c])
			{
				base.GraphicsDevice.SetRenderTarget(treeTopAltTexture[t, c]);
				base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
				spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
				if (c >= 28)
				{
					int index = 40 + c - 28;
					tileShader.CurrentTechnique.Passes[index].Apply();
				}
				else if (c > 0 && c < 13)
				{
					int index2 = c + 27;
					tileShader.CurrentTechnique.Passes[index2].Apply();
				}
				else
				{
					tileShader.CurrentTechnique.Passes[c].Apply();
				}
				spriteBatch.Draw(treeTopTexture[t], new Microsoft.Xna.Framework.Rectangle(0, 0, treeTopTexture[t].Width, treeTopTexture[t].Height), Microsoft.Xna.Framework.Color.White);
				spriteBatch.End();
				base.GraphicsDevice.SetRenderTarget(null);
				base.GraphicsDevice.SetRenderTarget(treeBranchAltTexture[t, c]);
				base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
				spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
				if (c >= 28)
				{
					int index3 = 40 + c - 28;
					tileShader.CurrentTechnique.Passes[index3].Apply();
				}
				else if (c > 0 && c < 13)
				{
					int index4 = c + 27;
					tileShader.CurrentTechnique.Passes[index4].Apply();
				}
				else
				{
					tileShader.CurrentTechnique.Passes[c].Apply();
				}
				spriteBatch.Draw(treeBranchTexture[t], new Microsoft.Xna.Framework.Rectangle(0, 0, treeBranchTexture[t].Width, treeBranchTexture[t].Height), Microsoft.Xna.Framework.Color.White);
				spriteBatch.End();
				base.GraphicsDevice.SetRenderTarget(null);
				treeAltTextureDrawn[t, c] = true;
			}
		}

		protected void wallColorCheck(int t, int c)
		{
			LoadWall(t);
			if (!wallAltTextureInit[t, c])
			{
				wallAltTexture[t, c] = new RenderTarget2D(base.GraphicsDevice, wallTexture[t].Width, wallTexture[t].Height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24, 0, RenderTargetUsage.PreserveContents);
				wallAltTextureInit[t, c] = true;
			}
			if (wallAltTexture[t, c].IsContentLost)
			{
				wallAltTextureDrawn[t, c] = false;
			}
			if (!wallAltTextureDrawn[t, c])
			{
				base.GraphicsDevice.SetRenderTarget(wallAltTexture[t, c]);
				base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
				spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
				if (c == 30)
				{
					tileShader.CurrentTechnique.Passes[43].Apply();
				}
				else if (c >= 28)
				{
					int index = 40 + c - 28;
					tileShader.CurrentTechnique.Passes[index].Apply();
				}
				else
				{
					tileShader.CurrentTechnique.Passes[c].Apply();
				}
				spriteBatch.Draw(wallTexture[t], new Microsoft.Xna.Framework.Rectangle(0, 0, wallTexture[t].Width, wallTexture[t].Height), Microsoft.Xna.Framework.Color.White);
				spriteBatch.End();
				base.GraphicsDevice.SetRenderTarget(null);
				wallAltTextureDrawn[t, c] = true;
			}
		}

		public void UpdateWeather()
		{
			if (SkyManager.Instance != null)
			{
				SkyManager.Instance.Update();
			}
			cloudLimit = 200;
			if (windSpeed < windSpeedSet)
			{
				windSpeed += 0.001f * (float)dayRate;
				if (windSpeed > windSpeedSet)
				{
					windSpeed = windSpeedSet;
				}
			}
			else if (windSpeed > windSpeedSet)
			{
				windSpeed -= 0.001f * (float)dayRate;
				if (windSpeed < windSpeedSet)
				{
					windSpeed = windSpeedSet;
				}
			}
			if (netMode == 1 || (netMode != 2 && gameMenu))
			{
				return;
			}
			windSpeedSpeed += (float)rand.Next(-10, 11) * 0.0001f;
			if (!dayTime)
			{
				windSpeedSpeed += (float)rand.Next(-10, 11) * 0.0002f;
			}
			if ((double)windSpeedSpeed < -0.002)
			{
				windSpeedSpeed = -0.002f;
			}
			if ((double)windSpeedSpeed > 0.002)
			{
				windSpeedSpeed = 0.002f;
			}
			windSpeedTemp += windSpeedSpeed;
			if (raining)
			{
				windSpeedTemp += windSpeedSpeed * 2f;
			}
			float num = 0.3f + 0.5f * cloudAlpha;
			if (windSpeedTemp < 0f - num)
			{
				windSpeedTemp = 0f - num;
			}
			if (windSpeedTemp > num)
			{
				windSpeedTemp = num;
			}
			if (rand.Next(60) == 0)
			{
				numCloudsTemp += rand.Next(-1, 2);
			}
			if ((float)rand.Next(1000) < 50f * cloudBGAlpha)
			{
				numCloudsTemp++;
			}
			if ((float)rand.Next(1000) < 25f * (1f - cloudBGAlpha))
			{
				numCloudsTemp--;
			}
			if ((float)rand.Next(1000) < 200f * cloudAlpha && numCloudsTemp < cloudLimit / 2)
			{
				numCloudsTemp++;
			}
			if ((float)rand.Next(1000) < 50f * cloudAlpha)
			{
				numCloudsTemp++;
			}
			if (numCloudsTemp > cloudLimit / 4 && rand.Next(100) == 0)
			{
				numCloudsTemp -= rand.Next(1, 3);
			}
			if (numCloudsTemp < cloudLimit / 4 && rand.Next(100) == 0)
			{
				numCloudsTemp += rand.Next(1, 3);
			}
			if (cloudBGActive <= 0f && numCloudsTemp > cloudLimit / 2 && cloudAlpha == 0f)
			{
				numCloudsTemp = cloudLimit / 2;
			}
			if (numCloudsTemp < 0)
			{
				numCloudsTemp = 0;
			}
			if (numCloudsTemp > cloudLimit)
			{
				numCloudsTemp = cloudLimit;
			}
			weatherCounter -= dayRate;
			if (weatherCounter <= 0)
			{
				numClouds = numCloudsTemp;
				windSpeedSet = windSpeedTemp;
				weatherCounter = rand.Next(3600, 18000);
				if (netMode == 2)
				{
					NetMessage.SendData(7);
				}
			}
		}

		public void LoadBackground(int i)
		{
			if (i >= 0 && !backgroundLoaded[i])
			{
				backgroundTexture[i] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Background_" + i);
				backgroundWidth[i] = backgroundTexture[i].Width;
				backgroundHeight[i] = backgroundTexture[i].Height;
				backgroundLoaded[i] = true;
			}
		}

		protected void LoadNPC(int i)
		{
			if (!NPCLoaded[i] || npcTexture[i] == null)
			{
				npcTexture[i] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "NPC_" + i);
				NPCLoaded[i] = true;
			}
		}

		protected void LoadProjectile(int i)
		{
			if (!projectileLoaded[i])
			{
				projectileTexture[i] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Projectile_" + i);
				projectileLoaded[i] = true;
			}
		}

		protected void LoadGore(int i)
		{
			if (!goreLoaded[i])
			{
				goreTexture[i] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Gore_" + i);
				goreLoaded[i] = true;
			}
		}

		protected void LoadWall(int i)
		{
			if (!wallLoaded[i])
			{
				wallTexture[i] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Wall_" + i);
				wallLoaded[i] = true;
			}
		}

		protected void LoadTiles(int i)
		{
			if (!tileSetsLoaded[i])
			{
				tileTexture[i] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Tiles_" + i);
				tileSetsLoaded[i] = true;
			}
		}

		protected void LoadItemFlames(int i)
		{
			if (!itemFlameLoaded[i])
			{
				try
				{
					itemFlameTexture[i] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "ItemFlame_" + i);
				}
				catch
				{
				}
				itemFlameLoaded[i] = true;
			}
		}

		protected void LoadWings(int i)
		{
			if (!wingsLoaded[i])
			{
				wingsTexture[i] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Wings_" + i);
				wingsLoaded[i] = true;
			}
		}

		protected void LoadHair(int i)
		{
			if (!hairLoaded[i])
			{
				playerHairTexture[i] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Player_Hair_" + (i + 1));
				playerHairAltTexture[i] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Player_HairAlt_" + (i + 1));
				hairLoaded[i] = true;
			}
		}

		protected void LoadArmorHead(int i)
		{
			if (!armorHeadLoaded[i])
			{
				armorHeadTexture[i] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Armor_Head_" + i);
				armorHeadLoaded[i] = true;
			}
		}

		protected void LoadArmorBody(int i)
		{
			if (!armorBodyLoaded[i])
			{
				femaleBodyTexture[i] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Female_Body_" + i);
				armorBodyTexture[i] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Armor_Body_" + i);
				armorArmTexture[i] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Armor_Arm_" + i);
				armorBodyLoaded[i] = true;
			}
		}

		protected void LoadArmorLegs(int i)
		{
			if (!armorLegsLoaded[i])
			{
				armorLegTexture[i] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Armor_Legs_" + i);
				armorLegsLoaded[i] = true;
			}
		}

		protected void LoadAccHandsOn(int i)
		{
			if (!accHandsOnLoaded[i])
			{
				accHandsOnTexture[i] = base.Content.Load<Texture2D>("Images/Acc_HandsOn_" + i);
				accHandsOnLoaded[i] = true;
			}
		}

		protected void LoadAccHandsOff(int i)
		{
			if (!accHandsOffLoaded[i])
			{
				accHandsOffTexture[i] = base.Content.Load<Texture2D>("Images/Acc_HandsOff_" + i);
				accHandsOffLoaded[i] = true;
			}
		}

		protected void LoadAccBack(int i)
		{
			if (!accBackLoaded[i])
			{
				accBackTexture[i] = base.Content.Load<Texture2D>("Images/Acc_Back_" + i);
				accBackLoaded[i] = true;
			}
		}

		protected void LoadAccFront(int i)
		{
			if (!accFrontLoaded[i])
			{
				accFrontTexture[i] = base.Content.Load<Texture2D>("Images/Acc_Front_" + i);
				accFrontLoaded[i] = true;
			}
		}

		protected void LoadAccShoes(int i)
		{
			if (!accShoesLoaded[i])
			{
				accShoesTexture[i] = base.Content.Load<Texture2D>("Images/Acc_Shoes_" + i);
				accShoesLoaded[i] = true;
			}
		}

		protected void LoadAccWaist(int i)
		{
			if (!accWaistLoaded[i])
			{
				accWaistTexture[i] = base.Content.Load<Texture2D>("Images/Acc_Waist_" + i);
				accWaistLoaded[i] = true;
			}
		}

		protected void LoadAccShield(int i)
		{
			if (!accShieldLoaded[i])
			{
				accShieldTexture[i] = base.Content.Load<Texture2D>("Images/Acc_Shield_" + i);
				accShieldLoaded[i] = true;
			}
		}

		protected void LoadAccNeck(int i)
		{
			if (!accNeckLoaded[i])
			{
				accNeckTexture[i] = base.Content.Load<Texture2D>("Images/Acc_Neck_" + i);
				accNeckLoaded[i] = true;
			}
		}

		protected void LoadAccFace(int i)
		{
			if (!accFaceLoaded[i])
			{
				accFaceTexture[i] = base.Content.Load<Texture2D>("Images/Acc_Face_" + i);
				accFaceLoaded[i] = true;
			}
		}

		protected void LoadAccBalloon(int i)
		{
			if (!accballoonLoaded[i])
			{
				accBalloonTexture[i] = base.Content.Load<Texture2D>("Images/Acc_Balloon_" + i);
				accballoonLoaded[i] = true;
			}
		}

		protected void LoadFlameRing()
		{
			if (!flameRingLoaded)
			{
				flameRingTexture = base.Content.Load<Texture2D>("Images/FlameRing");
				flameRingLoaded = true;
			}
		}

		protected void DrawSurfaceBG()
		{
			float scale = SkyManager.Instance.ProcessCloudAlpha();
			if (!mapFullscreen && (double)screenPosition.Y < worldSurface * 16.0 + 16.0)
			{
				for (int i = 0; i < 200; i++)
				{
					if (cloud[i].active && cloud[i].scale < 1f)
					{
						Microsoft.Xna.Framework.Color value = cloud[i].cloudColor(bgColor);
						float num = cloud[i].scale * 0.8f;
						float num2 = (cloud[i].scale + 1f) / 2f * 0.9f;
						value.R = (byte)((float)(int)value.R * num);
						value.G = (byte)((float)(int)value.G * num2);
						atmo = 1f;
						float num3 = cloud[i].position.Y * ((float)screenHeight / 600f);
						num3 = cloud[i].position.Y + (float)(int)((double)(0f - screenPosition.Y + screenOff / 2f) / (worldSurface * 16.0) * 750.0 + 830.0) + (float)(int)scAdj;
						spriteBatch.Draw(cloudTexture[cloud[i].type], new Vector2(cloud[i].position.X + (float)cloudTexture[cloud[i].type].Width * 0.5f, num3 + (float)cloudTexture[cloud[i].type].Height * 0.5f), new Microsoft.Xna.Framework.Rectangle(0, 0, cloudTexture[cloud[i].type].Width, cloudTexture[cloud[i].type].Height), value * scale, cloud[i].rotation, new Vector2((float)cloudTexture[cloud[i].type].Width * 0.5f, (float)cloudTexture[cloud[i].type].Height * 0.5f), cloud[i].scale, cloud[i].spriteDir, 0f);
					}
				}
			}
			if (invasionType == 4 && !SkyManager.Instance["Martian"].IsActive())
			{
				SkyManager.Instance.Activate("Martian", default(Vector2));
			}
			else if (invasionType != 4 && SkyManager.Instance["Martian"].IsActive())
			{
				SkyManager.Instance.Deactivate("Martian");
			}
			SkyManager.Instance.ResetDepthTracker();
			atmo = 1f;
			bgScale *= 2f;
			bgParallax = 0.15;
			if (atmo < 1f)
			{
				backColor.R = (byte)((float)(int)backColor.R * atmo);
				backColor.G = (byte)((float)(int)backColor.G * atmo);
				backColor.B = (byte)((float)(int)backColor.B * atmo);
				backColor.A = (byte)((float)(int)backColor.A * atmo);
			}
			if (!mapFullscreen && (double)(screenPosition.Y / 16f) <= worldSurface + 10.0)
			{
				if (owBack)
				{
					if (cloudBGActive > 0f)
					{
						cloudBGAlpha += 0.0005f * (float)dayRate;
						if (cloudBGAlpha > 1f)
						{
							cloudBGAlpha = 1f;
						}
					}
					else
					{
						cloudBGAlpha -= 0.0005f * (float)dayRate;
						if (cloudBGAlpha < 0f)
						{
							cloudBGAlpha = 0f;
						}
					}
					if (cloudBGAlpha > 0f)
					{
						LoadBackground(cloudBG[0]);
						LoadBackground(cloudBG[1]);
						bgScale *= 2f;
						bgParallax = 0.15;
						float num4 = cloudBGAlpha;
						if (num4 > 1f)
						{
							num4 = 1f;
						}
						bgScale = 1.65f;
						bgParallax = 0.090000003576278687;
						if (base.IsActive)
						{
							cloudBGX[0] += windSpeed * (float)bgParallax * 5f * (float)dayRate;
						}
						if (cloudBGX[0] > (float)backgroundWidth[cloudBG[0]] * bgScale)
						{
							cloudBGX[0] -= (float)backgroundWidth[cloudBG[0]] * bgScale;
						}
						if (cloudBGX[0] < (float)(-backgroundWidth[cloudBG[0]]) * bgScale)
						{
							cloudBGX[0] += (float)backgroundWidth[cloudBG[0]] * bgScale;
						}
						bgW = (int)((float)backgroundWidth[cloudBG[0]] * bgScale);
						bgTop = (int)((double)(0f - screenPosition.Y + screenOff / 2f) / (worldSurface * 16.0) * 900.0 + 600.0) + (int)scAdj;
						if (gameMenu)
						{
							bgTop = -150;
						}
						bgStart = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgW) - (double)(bgW / 2) - (double)bgW);
						bgStart += (int)cloudBGX[0];
						bgLoops = screenWidth / bgW + 2 + 2;
						backColor = trueBackColor;
						backColor.R = (byte)((float)(int)backColor.R * num4);
						backColor.G = (byte)((float)(int)backColor.G * num4);
						backColor.B = (byte)((float)(int)backColor.B * num4);
						backColor.A = (byte)((float)(int)backColor.A * num4);
						SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
						for (int j = 0; j < bgLoops; j++)
						{
							spriteBatch.Draw(backgroundTexture[cloudBG[0]], new Vector2(bgStart + bgW * j, bgTop), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[cloudBG[0]], backgroundHeight[cloudBG[0]]), backColor * scale, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
						}
						num4 = cloudBGAlpha * 1.5f;
						if (num4 > 1f)
						{
							num4 = 1f;
						}
						backColor = trueBackColor;
						backColor.R = (byte)((float)(int)backColor.R * num4);
						backColor.G = (byte)((float)(int)backColor.G * num4);
						backColor.B = (byte)((float)(int)backColor.B * num4);
						backColor.A = (byte)((float)(int)backColor.A * num4);
						bgScale = 1.85f;
						bgParallax = 0.12;
						if (base.IsActive)
						{
							cloudBGX[1] += windSpeed * (float)bgParallax * 5f * (float)dayRate;
						}
						if (cloudBGX[1] > (float)backgroundWidth[cloudBG[1]] * bgScale)
						{
							cloudBGX[1] -= (float)backgroundWidth[cloudBG[1]] * bgScale;
						}
						if (cloudBGX[1] < (float)(-backgroundWidth[cloudBG[1]]) * bgScale)
						{
							cloudBGX[1] += (float)backgroundWidth[cloudBG[1]] * bgScale;
						}
						bgW = (int)((float)backgroundWidth[cloudBG[1]] * bgScale);
						bgTop = (int)((double)(0f - screenPosition.Y + screenOff / 2f) / (worldSurface * 16.0) * 1100.0 + 750.0) + (int)scAdj;
						if (gameMenu)
						{
							bgTop = -50;
						}
						bgStart = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgW) - (double)(bgW / 2) - (double)bgW);
						bgStart += (int)cloudBGX[1];
						bgLoops = screenWidth / bgW + 2 + 2;
						SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
						for (int k = 0; k < bgLoops; k++)
						{
							spriteBatch.Draw(backgroundTexture[cloudBG[1]], new Vector2(bgStart + bgW * k, bgTop), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[cloudBG[1]], backgroundHeight[cloudBG[1]]), backColor * scale, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
						}
					}
					LoadBackground(treeMntBG[0]);
					LoadBackground(treeMntBG[1]);
					bgScale = 1f;
					bgTop = (int)((double)(0f - screenPosition.Y + screenOff / 2f) / (worldSurface * 16.0) * 1300.0 + 1090.0) + (int)scAdj;
					bgScale *= 2f;
					bgParallax = 0.15;
					bgW = (int)((float)backgroundWidth[treeMntBG[0]] * bgScale);
					SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
					bgStart = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgW) - (double)(bgW / 2));
					if (bgW == 0)
					{
						bgW = 1024;
					}
					bgLoops = screenWidth / bgW + 2;
					if (gameMenu)
					{
						bgTop = 100;
					}
					if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
					{
						backColor = trueBackColor;
						backColor.R = (byte)((float)(int)backColor.R * bgAlpha2[0]);
						backColor.G = (byte)((float)(int)backColor.G * bgAlpha2[0]);
						backColor.B = (byte)((float)(int)backColor.B * bgAlpha2[0]);
						backColor.A = (byte)((float)(int)backColor.A * bgAlpha2[0]);
						if (bgAlpha2[0] > 0f)
						{
							if (treeMntBG[0] == 93 || (treeMntBG[0] >= 168 && treeMntBG[0] <= 170))
							{
								bgTop -= 50;
							}
							if (treeMntBG[0] == 171)
							{
								bgTop -= 100;
							}
							if (treeMntBG[0] == 176)
							{
								bgTop += 250;
							}
							if (treeMntBG[0] == 179)
							{
								bgTop -= 100;
							}
							for (int l = 0; l < bgLoops; l++)
							{
								spriteBatch.Draw(backgroundTexture[treeMntBG[0]], new Vector2(bgStart + bgW * l, bgTop), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[treeMntBG[0]], backgroundHeight[treeMntBG[0]]), backColor, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
							}
							if (treeMntBG[0] == 93 || (treeMntBG[0] >= 168 && treeMntBG[0] <= 170))
							{
								bgTop += 50;
							}
							if (treeMntBG[0] == 171)
							{
								bgTop += 100;
							}
							if (treeMntBG[0] == 176)
							{
								bgTop -= 250;
							}
							if (treeMntBG[0] == 179)
							{
								bgTop += 100;
							}
						}
						backColor = trueBackColor;
						backColor.R = (byte)((float)(int)backColor.R * bgAlpha2[1]);
						backColor.G = (byte)((float)(int)backColor.G * bgAlpha2[1]);
						backColor.B = (byte)((float)(int)backColor.B * bgAlpha2[1]);
						backColor.A = (byte)((float)(int)backColor.A * bgAlpha2[1]);
						if (bgAlpha2[1] > 0f)
						{
							LoadBackground(23);
							for (int m = 0; m < bgLoops; m++)
							{
								spriteBatch.Draw(backgroundTexture[23], new Vector2(bgStart + bgW * m, bgTop), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[23], backgroundHeight[23]), backColor, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
							}
						}
						backColor = trueBackColor;
						backColor.R = (byte)((float)(int)backColor.R * bgAlpha2[2]);
						backColor.G = (byte)((float)(int)backColor.G * bgAlpha2[2]);
						backColor.B = (byte)((float)(int)backColor.B * bgAlpha2[2]);
						backColor.A = (byte)((float)(int)backColor.A * bgAlpha2[2]);
						if (bgAlpha2[2] > 0f)
						{
							LoadBackground(24);
							for (int n = 0; n < bgLoops; n++)
							{
								spriteBatch.Draw(backgroundTexture[24], new Vector2(bgStart + bgW * n, bgTop), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[24], backgroundHeight[24]), backColor, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
							}
						}
						backColor = trueBackColor;
						backColor.R = (byte)((float)(int)backColor.R * bgAlpha2[4]);
						backColor.G = (byte)((float)(int)backColor.G * bgAlpha2[4]);
						backColor.B = (byte)((float)(int)backColor.B * bgAlpha2[4]);
						backColor.A = (byte)((float)(int)backColor.A * bgAlpha2[4]);
						if (bgAlpha2[4] > 0f)
						{
							LoadBackground(snowMntBG[0]);
							for (int num5 = 0; num5 < bgLoops; num5++)
							{
								spriteBatch.Draw(backgroundTexture[snowMntBG[0]], new Vector2(bgStart + bgW * num5, bgTop), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[snowMntBG[0]], backgroundHeight[snowMntBG[0]]), backColor, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
							}
						}
						backColor = trueBackColor;
						backColor.R = (byte)((float)(int)backColor.R * bgAlpha2[5]);
						backColor.G = (byte)((float)(int)backColor.G * bgAlpha2[5]);
						backColor.B = (byte)((float)(int)backColor.B * bgAlpha2[5]);
						backColor.A = (byte)((float)(int)backColor.A * bgAlpha2[5]);
						if (bgAlpha2[5] > 0f)
						{
							LoadBackground(24);
							for (int num6 = 0; num6 < bgLoops; num6++)
							{
								spriteBatch.Draw(backgroundTexture[24], new Vector2(bgStart + bgW * num6, bgTop), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[24], backgroundHeight[24]), backColor, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
							}
						}
						SkyManager.Instance.DrawToDepth(spriteBatch, 5f);
					}
				}
				cTop = bgTop - 50;
				if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
				{
					for (int num7 = 0; num7 < 200; num7++)
					{
						if (cloud[num7].active && (double)cloud[num7].scale < 1.15 && cloud[num7].scale >= 1f)
						{
							Microsoft.Xna.Framework.Color value2 = cloud[num7].cloudColor(bgColor);
							if (atmo < 1f)
							{
								value2.R = (byte)((float)(int)value2.R * atmo);
								value2.G = (byte)((float)(int)value2.G * atmo);
								value2.B = (byte)((float)(int)value2.B * atmo);
								value2.A = (byte)((float)(int)value2.A * atmo);
							}
							float num8 = cloud[num7].position.Y * ((float)screenHeight / 600f);
							float num9 = (float)((double)(screenPosition.Y / 16f - 24f) / worldSurface);
							if (num9 < 0f)
							{
								num9 = 0f;
							}
							if (num9 > 1f)
							{
								num9 = 1f;
							}
							if (gameMenu)
							{
								num9 = 1f;
							}
							spriteBatch.Draw(cloudTexture[cloud[num7].type], new Vector2(cloud[num7].position.X + (float)cloudTexture[cloud[num7].type].Width * 0.5f, num8 + (float)cloudTexture[cloud[num7].type].Height * 0.5f + cTop + 200f), new Microsoft.Xna.Framework.Rectangle(0, 0, cloudTexture[cloud[num7].type].Width, cloudTexture[cloud[num7].type].Height), value2 * scale, cloud[num7].rotation, new Vector2((float)cloudTexture[cloud[num7].type].Width * 0.5f, (float)cloudTexture[cloud[num7].type].Height * 0.5f), cloud[num7].scale, cloud[num7].spriteDir, 0f);
						}
					}
				}
				if (holyTiles > 0 && owBack)
				{
					bgParallax = 0.17;
					bgScale = 1.1f;
					bgScale *= 2f;
					bgW = (int)((double)(3500f * bgScale) * 1.05);
					bgStart = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgW) - (double)(bgW / 2));
					bgLoops = screenWidth / bgW + 2;
					bgTop = (int)((double)(0f - screenPosition.Y + screenOff / 2f) / (worldSurface * 16.0) * 1400.0 + 900.0) + (int)scAdj;
					if (gameMenu)
					{
						bgTop = 230;
						bgStart -= 500;
					}
					SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
					Microsoft.Xna.Framework.Color color = trueBackColor;
					float num10 = (float)holyTiles / 400f;
					if (num10 > 0.5f)
					{
						num10 = 0.5f;
					}
					color.R = (byte)((float)(int)color.R * num10);
					color.G = (byte)((float)(int)color.G * num10);
					color.B = (byte)((float)(int)color.B * num10);
					color.A = (byte)((float)(int)color.A * num10 * 0.8f);
					if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
					{
						LoadBackground(18);
						LoadBackground(19);
						for (int num11 = 0; num11 < bgLoops; num11++)
						{
							spriteBatch.Draw(backgroundTexture[18], new Vector2(bgStart + bgW * num11, bgTop), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[18], backgroundHeight[18]), color, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
							spriteBatch.Draw(backgroundTexture[19], new Vector2(bgStart + bgW * num11 + 1700, bgTop + 100), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[19], backgroundHeight[19]), color, 0f, default(Vector2), bgScale * 0.9f, SpriteEffects.None, 0f);
						}
					}
				}
				if (treeMntBG[1] > -1)
				{
					LoadBackground(treeMntBG[1]);
					bgParallax = 0.2;
					bgScale = 1.15f;
					bgScale *= 2f;
					bgW = (int)((float)backgroundWidth[treeMntBG[1]] * bgScale);
					bgStart = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgW) - (double)(bgW / 2));
					bgLoops = screenWidth / bgW + 2;
					bgTop = (int)((double)(0f - screenPosition.Y + screenOff / 2f) / (worldSurface * 16.0) * 1400.0 + 1260.0) + (int)scAdj;
				}
				if (owBack)
				{
					if (gameMenu)
					{
						bgTop = 230;
						bgStart -= 500;
					}
					SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
					if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
					{
						backColor = trueBackColor;
						backColor.R = (byte)((float)(int)backColor.R * bgAlpha2[0]);
						backColor.G = (byte)((float)(int)backColor.G * bgAlpha2[0]);
						backColor.B = (byte)((float)(int)backColor.B * bgAlpha2[0]);
						backColor.A = (byte)((float)(int)backColor.A * bgAlpha2[0]);
						if (bgAlpha2[0] > 0f && treeMntBG[1] > -1)
						{
							if (treeMntBG[1] == 172)
							{
								bgTop += 130;
							}
							if (treeMntBG[1] == 177)
							{
								bgTop += 200;
							}
							if (treeMntBG[1] >= 180 && treeMntBG[1] <= 183)
							{
								bgTop -= 350;
							}
							for (int num12 = 0; num12 < bgLoops; num12++)
							{
								spriteBatch.Draw(backgroundTexture[treeMntBG[1]], new Vector2(bgStart + bgW * num12, bgTop), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[treeMntBG[1]], backgroundHeight[treeMntBG[1]]), backColor, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
							}
							if (treeMntBG[1] == 172)
							{
								bgTop -= 130;
							}
							if (treeMntBG[1] == 177)
							{
								bgTop -= 200;
							}
							if (treeMntBG[1] >= 180 && treeMntBG[1] <= 183)
							{
								bgTop += 350;
							}
						}
						backColor = trueBackColor;
						backColor.R = (byte)((float)(int)backColor.R * bgAlpha2[1]);
						backColor.G = (byte)((float)(int)backColor.G * bgAlpha2[1]);
						backColor.B = (byte)((float)(int)backColor.B * bgAlpha2[1]);
						backColor.A = (byte)((float)(int)backColor.A * bgAlpha2[1]);
						if (bgAlpha2[1] > 0f)
						{
							LoadBackground(22);
							for (int num13 = 0; num13 < bgLoops; num13++)
							{
								spriteBatch.Draw(backgroundTexture[22], new Vector2(bgStart + bgW * num13, bgTop), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[22], backgroundHeight[22]), backColor, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
							}
						}
						backColor = trueBackColor;
						backColor.R = (byte)((float)(int)backColor.R * bgAlpha2[2]);
						backColor.G = (byte)((float)(int)backColor.G * bgAlpha2[2]);
						backColor.B = (byte)((float)(int)backColor.B * bgAlpha2[2]);
						backColor.A = (byte)((float)(int)backColor.A * bgAlpha2[2]);
						if (bgAlpha2[2] > 0f)
						{
							LoadBackground(25);
							for (int num14 = 0; num14 < bgLoops; num14++)
							{
								spriteBatch.Draw(backgroundTexture[25], new Vector2(bgStart + bgW * num14, bgTop), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[25], backgroundHeight[25]), backColor, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
							}
						}
						backColor = trueBackColor;
						backColor.R = (byte)((float)(int)backColor.R * bgAlpha2[3]);
						backColor.G = (byte)((float)(int)backColor.G * bgAlpha2[3]);
						backColor.B = (byte)((float)(int)backColor.B * bgAlpha2[3]);
						backColor.A = (byte)((float)(int)backColor.A * bgAlpha2[3]);
						if (bgAlpha2[3] > 0f)
						{
							LoadBackground(oceanBG);
							for (int num15 = 0; num15 < bgLoops; num15++)
							{
								spriteBatch.Draw(backgroundTexture[oceanBG], new Vector2(bgStart + bgW * num15, bgTop), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[oceanBG], backgroundHeight[oceanBG]), backColor, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
							}
						}
						backColor = trueBackColor;
						backColor.R = (byte)((float)(int)backColor.R * bgAlpha2[4]);
						backColor.G = (byte)((float)(int)backColor.G * bgAlpha2[4]);
						backColor.B = (byte)((float)(int)backColor.B * bgAlpha2[4]);
						backColor.A = (byte)((float)(int)backColor.A * bgAlpha2[4]);
						if (bgAlpha2[4] > 0f)
						{
							LoadBackground(snowMntBG[1]);
							for (int num16 = 0; num16 < bgLoops; num16++)
							{
								spriteBatch.Draw(backgroundTexture[snowMntBG[1]], new Vector2(bgStart + bgW * num16, bgTop), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[snowMntBG[1]], backgroundHeight[snowMntBG[1]]), backColor, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
							}
						}
						backColor = trueBackColor;
						backColor.R = (byte)((float)(int)backColor.R * bgAlpha2[5]);
						backColor.G = (byte)((float)(int)backColor.G * bgAlpha2[5]);
						backColor.B = (byte)((float)(int)backColor.B * bgAlpha2[5]);
						backColor.A = (byte)((float)(int)backColor.A * bgAlpha2[5]);
						if (bgAlpha2[5] > 0f)
						{
							LoadBackground(42);
							for (int num17 = 0; num17 < bgLoops; num17++)
							{
								spriteBatch.Draw(backgroundTexture[42], new Vector2(bgStart + bgW * num17, bgTop), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[42], backgroundHeight[42]), backColor, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
							}
						}
					}
				}
				cTop = (float)bgTop * 1.01f - 150f;
				if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
				{
					for (int num18 = 0; num18 < 200; num18++)
					{
						if (cloud[num18].active && cloud[num18].scale >= 1.15f)
						{
							Microsoft.Xna.Framework.Color value3 = cloud[num18].cloudColor(bgColor);
							if (atmo < 1f)
							{
								value3.R = (byte)((float)(int)value3.R * atmo);
								value3.G = (byte)((float)(int)value3.G * atmo);
								value3.B = (byte)((float)(int)value3.B * atmo);
								value3.A = (byte)((float)(int)value3.A * atmo);
							}
							float num19 = cloud[num18].position.Y * ((float)screenHeight / 600f) - 100f;
							float num20 = (float)((double)(screenPosition.Y / 16f - 24f) / worldSurface);
							if (num20 < 0f)
							{
								num20 = 0f;
							}
							if (num20 > 1f)
							{
								num20 = 1f;
							}
							if (gameMenu)
							{
								num20 = 1f;
							}
							spriteBatch.Draw(cloudTexture[cloud[num18].type], new Vector2(cloud[num18].position.X + (float)cloudTexture[cloud[num18].type].Width * 0.5f, num19 + (float)cloudTexture[cloud[num18].type].Height * 0.5f + cTop), new Microsoft.Xna.Framework.Rectangle(0, 0, cloudTexture[cloud[num18].type].Width, cloudTexture[cloud[num18].type].Height), value3 * scale, cloud[num18].rotation, new Vector2((float)cloudTexture[cloud[num18].type].Width * 0.5f, (float)cloudTexture[cloud[num18].type].Height * 0.5f), cloud[num18].scale, cloud[num18].spriteDir, 0f);
						}
					}
				}
			}
			if (!mapFullscreen)
			{
				for (int num21 = 0; num21 < 10; num21++)
				{
					if (bgStyle == num21)
					{
						bgAlpha[num21] += tranSpeed;
						if (bgAlpha[num21] > 1f)
						{
							bgAlpha[num21] = 1f;
						}
					}
					else
					{
						bgAlpha[num21] -= tranSpeed;
						if (bgAlpha[num21] < 0f)
						{
							bgAlpha[num21] = 0f;
						}
					}
					if (!owBack)
					{
						continue;
					}
					backColor = trueBackColor;
					backColor.R = (byte)((float)(int)backColor.R * bgAlpha[num21]);
					backColor.G = (byte)((float)(int)backColor.G * bgAlpha[num21]);
					backColor.B = (byte)((float)(int)backColor.B * bgAlpha[num21]);
					backColor.A = (byte)((float)(int)backColor.A * bgAlpha[num21]);
					if (bgAlpha[num21] > 0f && num21 == 3)
					{
						LoadBackground(jungleBG[0]);
						bgScale = 1.25f;
						bgScale *= 2f;
						bgW = (int)((float)backgroundWidth[jungleBG[0]] * bgScale);
						bgParallax = 0.4;
						SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
						bgStart = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgW) - (double)(bgW / 2));
						bgTop = (int)((double)(0f - screenPosition.Y + screenOff / 2f) / (worldSurface * 16.0) * 1800.0 + 1660.0) + (int)scAdj;
						if (gameMenu)
						{
							bgTop = 320;
						}
						if (jungleBG[0] == 59)
						{
							bgTop -= 200;
						}
						bgLoops = screenWidth / bgW + 2;
						if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
						{
							for (int num22 = 0; num22 < bgLoops; num22++)
							{
								spriteBatch.Draw(backgroundTexture[jungleBG[0]], new Vector2(bgStart + bgW * num22, bgTop), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[jungleBG[0]], backgroundHeight[jungleBG[0]]), backColor, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
							}
						}
						LoadBackground(jungleBG[1]);
						bgScale = 1.31f;
						bgScale *= 2f;
						bgW = (int)((float)backgroundWidth[jungleBG[1]] * bgScale);
						bgParallax = 0.43;
						SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
						bgStart = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgW) - (double)(bgW / 2));
						bgTop = (int)((double)(0f - screenPosition.Y + screenOff / 2f) / (worldSurface * 16.0) * 1950.0 + 1840.0) + (int)scAdj;
						if (gameMenu)
						{
							bgTop = 400;
							bgStart -= 80;
						}
						if (jungleBG[1] == 60)
						{
							bgTop -= 175;
						}
						bgLoops = screenWidth / bgW + 2;
						if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
						{
							for (int num23 = 0; num23 < bgLoops; num23++)
							{
								spriteBatch.Draw(backgroundTexture[jungleBG[1]], new Vector2(bgStart + bgW * num23, bgTop), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[jungleBG[1]], backgroundHeight[jungleBG[1]]), backColor, 0f, default(Vector2), bgScale, SpriteEffects.FlipHorizontally, 0f);
							}
						}
						bgScale = 1.34f;
						bgScale *= 2f;
						LoadBackground(jungleBG[2]);
						bgW = (int)((float)backgroundWidth[jungleBG[2]] * bgScale);
						bgParallax = 0.49;
						SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
						bgStart = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgW) - (double)(bgW / 2));
						bgTop = (int)((double)(0f - screenPosition.Y + screenOff / 2f) / (worldSurface * 16.0) * 2100.0 + 2060.0) + (int)scAdj;
						if (gameMenu)
						{
							bgTop = 480;
							bgStart -= 120;
						}
						if (jungleBG[2] == 61)
						{
							bgTop -= 150;
						}
						bgLoops = screenWidth / bgW + 2;
						if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
						{
							for (int num24 = 0; num24 < bgLoops; num24++)
							{
								spriteBatch.Draw(backgroundTexture[jungleBG[2]], new Vector2(bgStart + bgW * num24, bgTop), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[jungleBG[2]], backgroundHeight[jungleBG[2]]), backColor, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
							}
						}
					}
					if (bgAlpha[num21] > 0f && num21 == 2)
					{
						LoadBackground(desertBG[0]);
						bgScale = 1.25f;
						bgScale *= 2f;
						bgW = (int)((float)backgroundWidth[desertBG[0]] * bgScale);
						bgParallax = 0.37;
						SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
						bgStart = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgW) - (double)(bgW / 2));
						bgTop = (int)((double)(0f - screenPosition.Y + screenOff / 2f) / (worldSurface * 16.0) * 1800.0 + 1750.0) + (int)scAdj;
						if (gameMenu)
						{
							bgTop = 320;
						}
						bgLoops = screenWidth / bgW + 2;
						if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
						{
							for (int num25 = 0; num25 < bgLoops; num25++)
							{
								spriteBatch.Draw(backgroundTexture[desertBG[0]], new Vector2(bgStart + bgW * num25, bgTop), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[desertBG[0]], backgroundHeight[desertBG[0]]), backColor, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
							}
						}
						bgScale = 1.34f;
						bgScale *= 2f;
						LoadBackground(desertBG[1]);
						bgW = (int)((float)backgroundWidth[desertBG[1]] * bgScale);
						bgParallax = 0.49;
						SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
						bgStart = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgW) - (double)(bgW / 2));
						bgTop = (int)((double)(0f - screenPosition.Y + screenOff / 2f) / (worldSurface * 16.0) * 2100.0 + 2150.0) + (int)scAdj;
						if (gameMenu)
						{
							bgTop = 480;
							bgStart -= 120;
						}
						bgLoops = screenWidth / bgW + 2;
						if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
						{
							for (int num26 = 0; num26 < bgLoops; num26++)
							{
								spriteBatch.Draw(backgroundTexture[desertBG[1]], new Vector2(bgStart + bgW * num26, bgTop), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[desertBG[1]], backgroundHeight[desertBG[1]]), backColor, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
							}
						}
					}
					if (bgAlpha[num21] > 0f && num21 == 5)
					{
						LoadBackground(26);
						bgScale = 1.25f;
						bgScale *= 2f;
						bgW = (int)((float)backgroundWidth[26] * bgScale);
						bgParallax = 0.37;
						SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
						bgStart = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgW) - (double)(bgW / 2));
						bgTop = (int)((double)(0f - screenPosition.Y + screenOff / 2f) / (worldSurface * 16.0) * 1800.0 + 1750.0) + (int)scAdj;
						if (gameMenu)
						{
							bgTop = 320;
						}
						bgLoops = screenWidth / bgW + 2;
						if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
						{
							for (int num27 = 0; num27 < bgLoops; num27++)
							{
								spriteBatch.Draw(backgroundTexture[26], new Vector2(bgStart + bgW * num27, bgTop), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[26], backgroundHeight[26]), backColor, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
							}
						}
						bgScale = 1.34f;
						bgScale *= 2f;
						LoadBackground(27);
						bgW = (int)((float)backgroundWidth[27] * bgScale);
						bgParallax = 0.49;
						SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
						bgStart = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgW) - (double)(bgW / 2));
						bgTop = (int)((double)(0f - screenPosition.Y + screenOff / 2f) / (worldSurface * 16.0) * 2100.0 + 2150.0) + (int)scAdj;
						if (gameMenu)
						{
							bgTop = 480;
							bgStart -= 120;
						}
						bgLoops = screenWidth / bgW + 2;
						if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
						{
							for (int num28 = 0; num28 < bgLoops; num28++)
							{
								spriteBatch.Draw(backgroundTexture[27], new Vector2(bgStart + bgW * num28, bgTop), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[27], backgroundHeight[27]), backColor, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
							}
						}
					}
					if (bgAlpha[num21] > 0f && num21 == 1)
					{
						bgScale = 1.25f;
						bgScale *= 2f;
						LoadBackground(corruptBG[0]);
						bgW = (int)((float)backgroundWidth[corruptBG[0]] * bgScale);
						bgParallax = 0.4;
						SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
						bgStart = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgW) - (double)(bgW / 2));
						bgTop = (int)((double)(0f - screenPosition.Y + screenOff / 2f) / (worldSurface * 16.0) * 1800.0 + 1500.0) + (int)scAdj;
						if (gameMenu)
						{
							bgTop = 320;
						}
						if (corruptBG[0] == 56)
						{
							bgTop -= 100;
						}
						bgLoops = screenWidth / bgW + 2;
						if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
						{
							for (int num29 = 0; num29 < bgLoops; num29++)
							{
								spriteBatch.Draw(backgroundTexture[corruptBG[0]], new Vector2(bgStart + bgW * num29, bgTop), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[corruptBG[0]], backgroundHeight[corruptBG[0]]), backColor, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
							}
						}
						bgScale = 1.31f;
						bgScale *= 2f;
						LoadBackground(corruptBG[1]);
						bgW = (int)((float)backgroundWidth[corruptBG[1]] * bgScale);
						bgParallax = 0.43;
						SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
						bgStart = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgW) - (double)(bgW / 2));
						bgTop = (int)((double)(0f - screenPosition.Y + screenOff / 2f) / (worldSurface * 16.0) * 1950.0 + 1750.0) + (int)scAdj;
						if (gameMenu)
						{
							bgTop = 400;
							bgStart -= 80;
						}
						if (corruptBG[0] == 56)
						{
							bgTop -= 100;
						}
						bgLoops = screenWidth / bgW + 2;
						if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
						{
							try
							{
								for (int num30 = 0; num30 < bgLoops; num30++)
								{
									spriteBatch.Draw(backgroundTexture[corruptBG[1]], new Vector2(bgStart + bgW * num30, bgTop), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[corruptBG[1]], backgroundHeight[corruptBG[1]]), backColor, 0f, default(Vector2), bgScale, SpriteEffects.FlipHorizontally, 0f);
								}
							}
							catch
							{
								LoadBackground(corruptBG[1]);
							}
						}
						bgScale = 1.34f;
						bgScale *= 2f;
						LoadBackground(corruptBG[2]);
						bgW = (int)((float)backgroundWidth[corruptBG[2]] * bgScale);
						bgParallax = 0.49;
						SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
						bgStart = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgW) - (double)(bgW / 2));
						bgTop = (int)((double)(0f - screenPosition.Y + screenOff / 2f) / (worldSurface * 16.0) * 2100.0 + 2000.0) + (int)scAdj;
						if (gameMenu)
						{
							bgTop = 480;
							bgStart -= 120;
						}
						if (corruptBG[0] == 56)
						{
							bgTop -= 100;
						}
						bgLoops = screenWidth / bgW + 2;
						if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
						{
							for (int num31 = 0; num31 < bgLoops; num31++)
							{
								spriteBatch.Draw(backgroundTexture[corruptBG[2]], new Vector2(bgStart + bgW * num31, bgTop), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[corruptBG[2]], backgroundHeight[corruptBG[2]]), backColor, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
							}
						}
					}
					if (bgAlpha[num21] > 0f && num21 == 6)
					{
						bgScale = 1.25f;
						bgScale *= 2f;
						LoadBackground(hallowBG[0]);
						bgW = (int)((float)backgroundWidth[hallowBG[0]] * bgScale);
						bgParallax = 0.4;
						SkyManager.Instance.DrawToDepth(spriteBatch, 1.2f / (float)bgParallax);
						bgStart = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgW) - (double)(bgW / 2));
						bgTop = (int)((double)(0f - screenPosition.Y + screenOff / 2f) / (worldSurface * 16.0) * 1800.0 + 1500.0) + (int)scAdj;
						if (gameMenu)
						{
							bgTop = 320;
						}
						bgLoops = screenWidth / bgW + 2;
						if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
						{
							for (int num32 = 0; num32 < bgLoops; num32++)
							{
								spriteBatch.Draw(backgroundTexture[hallowBG[0]], new Vector2(bgStart + bgW * num32, bgTop), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[hallowBG[0]], backgroundHeight[hallowBG[0]]), backColor, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
							}
						}
						bgScale = 1.31f;
						bgScale *= 2f;
						LoadBackground(hallowBG[1]);
						bgW = (int)((float)backgroundWidth[hallowBG[1]] * bgScale);
						bgParallax = 0.43;
						SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
						bgStart = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgW) - (double)(bgW / 2));
						bgTop = (int)((double)(0f - screenPosition.Y + screenOff / 2f) / (worldSurface * 16.0) * 1950.0 + 1750.0) + (int)scAdj;
						if (gameMenu)
						{
							bgTop = 400;
							bgStart -= 80;
						}
						bgLoops = screenWidth / bgW + 2;
						if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
						{
							for (int num33 = 0; num33 < bgLoops; num33++)
							{
								spriteBatch.Draw(backgroundTexture[hallowBG[1]], new Vector2(bgStart + bgW * num33, bgTop), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[hallowBG[1]], backgroundHeight[hallowBG[1]]), backColor, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
							}
						}
						bgScale = 1.34f;
						bgScale *= 2f;
						LoadBackground(hallowBG[2]);
						bgW = (int)((float)backgroundWidth[hallowBG[2]] * bgScale);
						bgParallax = 0.49;
						SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
						bgStart = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgW) - (double)(bgW / 2));
						bgTop = (int)((double)(0f - screenPosition.Y + screenOff / 2f) / (worldSurface * 16.0) * 2100.0 + 2000.0) + (int)scAdj;
						if (gameMenu)
						{
							bgTop = 480;
							bgStart -= 120;
						}
						bgLoops = screenWidth / bgW + 2;
						if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
						{
							for (int num34 = 0; num34 < bgLoops; num34++)
							{
								spriteBatch.Draw(backgroundTexture[hallowBG[2]], new Vector2(bgStart + bgW * num34, bgTop), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[hallowBG[2]], backgroundHeight[hallowBG[2]]), backColor, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
							}
						}
					}
					if (bgAlpha[num21] > 0f && num21 == 0)
					{
						bgScale = 1.25f;
						bgScale *= 2f;
						bgParallax = 0.4;
						if (treeBG[0] == 91)
						{
							bgParallax = 0.27000001072883606;
							bgScale = 1.2f;
							bgScale *= 2f;
						}
						if (treeBG[0] == 173)
						{
							bgParallax = 0.25;
							bgScale = 1.3f;
							bgScale *= 2f;
						}
						if (treeBG[0] == 178)
						{
							bgParallax = 0.30000001192092896;
							bgScale = 1.2f;
							bgScale *= 2f;
						}
						if (treeBG[0] == 184)
						{
							bgParallax = 0.25;
							bgScale = 1.2f;
							bgScale *= 2f;
						}
						SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
						if (treeBG[0] >= 0)
						{
							LoadBackground(treeBG[0]);
							bgW = (int)((float)backgroundWidth[treeBG[0]] * bgScale);
							bgStart = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgW) - (double)(bgW / 2));
							bgTop = (int)((double)(0f - screenPosition.Y + screenOff / 2f) / (worldSurface * 16.0) * 1800.0 + 1500.0) + (int)scAdj;
							if (treeBG[0] == 91)
							{
								bgTop = (int)((double)(0f - screenPosition.Y + screenOff / 2f) / (worldSurface * 16.0) * 1600.0 + 1400.0) + (int)scAdj;
							}
							if (treeBG[0] == 173)
							{
								bgTop = (int)((double)(0f - screenPosition.Y + screenOff / 2f) / (worldSurface * 16.0) * 1600.0 + 1400.0) + (int)scAdj;
							}
							if (treeBG[0] == 184)
							{
								bgTop = (int)((double)(0f - screenPosition.Y + screenOff / 2f) / (worldSurface * 16.0) * 1600.0 + 1400.0) + (int)scAdj;
							}
							if (gameMenu)
							{
								bgTop = 320;
							}
							if (treeBG[0] == 50)
							{
								bgTop -= 50;
							}
							if (treeBG[0] == 53)
							{
								bgTop -= 100;
							}
							if (treeBG[0] == 91)
							{
								bgTop += 200;
							}
							if (treeBG[0] == 173)
							{
								bgTop += 200;
							}
							if (treeBG[0] == 178)
							{
								bgTop += 75;
							}
							bgLoops = screenWidth / bgW + 2;
							if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
							{
								for (int num35 = 0; num35 < bgLoops; num35++)
								{
									spriteBatch.Draw(backgroundTexture[treeBG[0]], new Vector2(bgStart + bgW * num35, bgTop), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[treeBG[0]], backgroundHeight[treeBG[0]]), backColor, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
								}
							}
						}
						if (treeBG[1] >= 0)
						{
							LoadBackground(treeBG[1]);
							bgScale = 1.31f;
							bgScale *= 2f;
							bgW = (int)((float)backgroundWidth[treeBG[1]] * bgScale);
							bgParallax = 0.43;
							SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
							bgStart = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgW) - (double)(bgW / 2));
							bgTop = (int)((double)(0f - screenPosition.Y + screenOff / 2f) / (worldSurface * 16.0) * 1950.0 + 1750.0) + (int)scAdj;
							if (gameMenu)
							{
								bgTop = 400;
								bgStart -= 80;
							}
							if (treeBG[1] == 51)
							{
								bgTop -= 50;
							}
							if (treeBG[1] == 54)
							{
								bgTop -= 100;
							}
							bgLoops = screenWidth / bgW + 2;
							if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
							{
								for (int num36 = 0; num36 < bgLoops; num36++)
								{
									spriteBatch.Draw(backgroundTexture[treeBG[1]], new Vector2(bgStart + bgW * num36, bgTop), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[treeBG[1]], backgroundHeight[treeBG[1]]), backColor, 0f, default(Vector2), bgScale, SpriteEffects.FlipHorizontally, 0f);
								}
							}
						}
						if (treeBG[2] >= 0)
						{
							LoadBackground(treeBG[2]);
							bgScale = 1.34f;
							bgScale *= 2f;
							bgParallax = 0.49;
							SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
							if (treeBG[0] == 91)
							{
								bgScale = 1.3f;
								bgScale *= 2f;
								bgParallax = 0.42;
							}
							bgW = (int)((float)backgroundWidth[treeBG[2]] * bgScale);
							bgStart = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgW) - (double)(bgW / 2));
							bgTop = (int)((double)(0f - screenPosition.Y + screenOff / 2f) / (worldSurface * 16.0) * 2100.0 + 2000.0) + (int)scAdj;
							if (gameMenu)
							{
								bgTop = 480;
								bgStart -= 120;
							}
							if (treeBG[2] == 52)
							{
								bgTop -= 50;
							}
							if (treeBG[2] == 55)
							{
								bgTop -= 100;
							}
							if (treeBG[2] == 92)
							{
								bgTop += 150;
							}
							bgLoops = screenWidth / bgW + 2;
							if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
							{
								for (int num37 = 0; num37 < bgLoops; num37++)
								{
									spriteBatch.Draw(backgroundTexture[treeBG[2]], new Vector2(bgStart + bgW * num37, bgTop), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[treeBG[2]], backgroundHeight[treeBG[2]]), backColor, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
								}
							}
						}
					}
					if (bgAlpha[num21] > 0f && num21 == 7)
					{
						if (snowBG[0] >= 0)
						{
							bgScale = 1.25f;
							bgScale *= 2f;
							LoadBackground(snowBG[0]);
							bgW = (int)((float)backgroundWidth[snowBG[0]] * bgScale);
							bgParallax = 0.4;
							SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
							bgStart = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgW) - (double)(bgW / 2));
							bgTop = (int)((double)(0f - screenPosition.Y + screenOff / 2f) / (worldSurface * 16.0) * 1800.0 + 1500.0) + (int)scAdj;
							if (gameMenu)
							{
								bgTop = 320;
							}
							bgLoops = screenWidth / bgW + 2;
							if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
							{
								for (int num38 = 0; num38 < bgLoops; num38++)
								{
									spriteBatch.Draw(backgroundTexture[snowBG[0]], new Vector2(bgStart + bgW * num38, bgTop), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[snowBG[0]], backgroundHeight[snowBG[0]]), backColor, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
								}
							}
						}
						if (snowBG[1] >= 0)
						{
							bgScale = 1.31f;
							bgScale *= 2f;
							LoadBackground(snowBG[1]);
							bgW = (int)((float)backgroundWidth[snowBG[1]] * bgScale);
							bgParallax = 0.43;
							SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
							bgStart = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgW) - (double)(bgW / 2));
							bgTop = (int)((double)(0f - screenPosition.Y + screenOff / 2f) / (worldSurface * 16.0) * 1950.0 + 1750.0) + (int)scAdj;
							if (gameMenu)
							{
								bgTop = 400;
								bgStart -= 80;
							}
							bgLoops = screenWidth / bgW + 2;
							if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
							{
								for (int num39 = 0; num39 < bgLoops; num39++)
								{
									spriteBatch.Draw(backgroundTexture[snowBG[1]], new Vector2(bgStart + bgW * num39, bgTop), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[snowBG[1]], backgroundHeight[snowBG[1]]), backColor, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
								}
							}
						}
						if (snowBG[2] >= 0)
						{
							bgScale = 1.34f;
							bgScale *= 2f;
							LoadBackground(snowBG[2]);
							bgW = (int)((float)backgroundWidth[snowBG[2]] * bgScale);
							bgParallax = 0.49;
							SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
							bgStart = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgW) - (double)(bgW / 2));
							bgTop = (int)((double)(0f - screenPosition.Y + screenOff / 2f) / (worldSurface * 16.0) * 2100.0 + 2000.0) + (int)scAdj;
							if (gameMenu)
							{
								bgTop = 480;
								bgStart -= 120;
							}
							bgLoops = screenWidth / bgW + 2;
							if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
							{
								for (int num40 = 0; num40 < bgLoops; num40++)
								{
									spriteBatch.Draw(backgroundTexture[snowBG[2]], new Vector2(bgStart + bgW * num40, bgTop), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[snowBG[2]], backgroundHeight[snowBG[2]]), backColor, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
								}
							}
						}
					}
					if (bgAlpha[num21] > 0f && num21 == 8)
					{
						bgScale = 1.25f;
						bgScale *= 2f;
						LoadBackground(crimsonBG[0]);
						bgW = (int)((float)backgroundWidth[crimsonBG[0]] * bgScale);
						bgParallax = 0.4;
						SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
						bgStart = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgW) - (double)(bgW / 2));
						bgTop = (int)((double)(0f - screenPosition.Y + screenOff / 2f) / (worldSurface * 16.0) * 1800.0 + 1500.0) + (int)scAdj;
						if (crimsonBG[0] == 105)
						{
							bgTop += 50;
						}
						if (crimsonBG[0] == 174)
						{
							bgTop -= 350;
						}
						if (gameMenu)
						{
							bgTop = 320;
						}
						bgLoops = screenWidth / bgW + 2;
						if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
						{
							for (int num41 = 0; num41 < bgLoops; num41++)
							{
								spriteBatch.Draw(backgroundTexture[crimsonBG[0]], new Vector2(bgStart + bgW * num41, bgTop), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[crimsonBG[0]], backgroundHeight[crimsonBG[0]]), backColor, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
							}
						}
						bgScale = 1.31f;
						bgScale *= 2f;
						if (crimsonBG[1] > -1)
						{
							LoadBackground(crimsonBG[1]);
							bgW = (int)((float)backgroundWidth[crimsonBG[1]] * bgScale);
							bgParallax = 0.43;
							SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
							bgStart = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgW) - (double)(bgW / 2));
							bgTop = (int)((double)(0f - screenPosition.Y + screenOff / 2f) / (worldSurface * 16.0) * 1950.0 + 1750.0) + (int)scAdj;
							if (gameMenu)
							{
								bgTop = 400;
								bgStart -= 80;
							}
							bgLoops = screenWidth / bgW + 2;
							if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
							{
								for (int num42 = 0; num42 < bgLoops; num42++)
								{
									spriteBatch.Draw(backgroundTexture[crimsonBG[1]], new Vector2(bgStart + bgW * num42, bgTop), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[crimsonBG[1]], backgroundHeight[crimsonBG[1]]), backColor, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
								}
							}
						}
						bgScale = 1.34f;
						bgScale *= 2f;
						LoadBackground(crimsonBG[2]);
						bgW = (int)((float)backgroundWidth[crimsonBG[2]] * bgScale);
						bgParallax = 0.49;
						SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
						bgStart = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgW) - (double)(bgW / 2));
						bgTop = (int)((double)(0f - screenPosition.Y + screenOff / 2f) / (worldSurface * 16.0) * 2100.0 + 2000.0) + (int)scAdj;
						if (gameMenu)
						{
							bgTop = 480;
							bgStart -= 120;
						}
						if (crimsonBG[2] == 175)
						{
							bgStart -= 1000;
							bgTop -= 400;
						}
						bgLoops = screenWidth / bgW + 2;
						if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
						{
							for (int num43 = 0; num43 < bgLoops; num43++)
							{
								spriteBatch.Draw(backgroundTexture[crimsonBG[2]], new Vector2(bgStart + bgW * num43, bgTop), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[crimsonBG[2]], backgroundHeight[crimsonBG[2]]), backColor, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
							}
						}
					}
					if (!(bgAlpha[num21] > 0f) || num21 != 9)
					{
						continue;
					}
					float num44 = (float)(int)backColor.A / 255f;
					Microsoft.Xna.Framework.Color color2 = backColor;
					float num45 = (float)rand.Next(28, 42) * 0.001f;
					num45 += (float)(270 - mouseTextColor) / 5000f;
					float num46 = 0.1f;
					float num47 = 0.15f + num45 / 2f;
					float num48 = 0.3f + num45;
					num46 *= 255f;
					num47 *= 255f;
					num48 *= 255f;
					num46 *= 0.33f * num44;
					num47 *= 0.33f * num44;
					num48 *= 0.33f * num44;
					if (num46 > 255f)
					{
						num46 = 255f;
					}
					if (num47 > 255f)
					{
						num47 = 255f;
					}
					if (num48 > 255f)
					{
						num48 = 255f;
					}
					if (num46 > (float)(int)color2.R)
					{
						color2.R = (byte)num46;
					}
					if (num47 > (float)(int)color2.G)
					{
						color2.G = (byte)num47;
					}
					if (num48 > (float)(int)color2.B)
					{
						color2.B = (byte)num48;
					}
					bgScale = 1.25f;
					bgScale *= 2f;
					LoadBackground(46);
					bgW = (int)((float)backgroundWidth[46] * bgScale);
					bgParallax = 0.4;
					SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
					bgStart = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgW) - (double)(bgW / 2));
					bgTop = (int)((double)(0f - screenPosition.Y + screenOff / 2f) / (worldSurface * 16.0) * 1800.0 + 1400.0) + (int)scAdj;
					if (gameMenu)
					{
						bgTop = 320;
					}
					bgLoops = screenWidth / bgW + 2;
					if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
					{
						for (int num49 = 0; num49 < bgLoops; num49++)
						{
							spriteBatch.Draw(backgroundTexture[46], new Vector2(bgStart + bgW * num49, bgTop), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[46], backgroundHeight[46]), color2, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
						}
					}
					color2 = backColor;
					num45 = (float)rand.Next(28, 42) * 0.001f;
					num45 += (float)(270 - mouseTextColor) / 5000f;
					num46 = 0.1f;
					num47 = 0.175f + num45 / 2f;
					num48 = 0.3f + num45;
					num46 *= 255f;
					num47 *= 255f;
					num48 *= 255f;
					num46 *= 0.5f * num44;
					num47 *= 0.5f * num44;
					num48 *= 0.5f * num44;
					if (num46 > 255f)
					{
						num46 = 255f;
					}
					if (num47 > 255f)
					{
						num47 = 255f;
					}
					if (num48 > 255f)
					{
						num48 = 255f;
					}
					if (num46 > (float)(int)color2.R)
					{
						color2.R = (byte)num46;
					}
					if (num47 > (float)(int)color2.G)
					{
						color2.G = (byte)num47;
					}
					if (num48 > (float)(int)color2.B)
					{
						color2.B = (byte)num48;
					}
					bgScale = 1.32f;
					bgScale *= 2f;
					LoadBackground(47);
					bgW = (int)((float)backgroundWidth[47] * bgScale);
					bgParallax = 0.43;
					SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
					bgStart = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgW) - (double)(bgW / 2));
					bgTop = (int)((double)(0f - screenPosition.Y + screenOff / 2f) / (worldSurface * 16.0) * 1950.0 + 1675.0) + (int)scAdj;
					if (gameMenu)
					{
						bgTop = 400;
						bgStart -= 80;
					}
					bgLoops = screenWidth / bgW + 2;
					if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
					{
						for (int num50 = 0; num50 < bgLoops; num50++)
						{
							spriteBatch.Draw(backgroundTexture[47], new Vector2(bgStart + bgW * num50, bgTop), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[47], backgroundHeight[47]), color2, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
						}
					}
					color2 = backColor;
					num45 = (float)rand.Next(28, 42) * 0.001f;
					num45 += (float)(270 - mouseTextColor) / 3000f;
					num46 = 0.125f;
					num47 = 0.2f + num45 / 2f;
					num48 = 0.3f + num45;
					num46 *= 255f * num44 * 0.75f;
					num47 *= 255f * num44 * 0.75f;
					num48 *= 255f * num44 * 0.75f;
					if (num46 > 255f)
					{
						num46 = 255f;
					}
					if (num47 > 255f)
					{
						num47 = 255f;
					}
					if (num48 > 255f)
					{
						num48 = 255f;
					}
					if (num46 > (float)(int)color2.R)
					{
						color2.R = (byte)num46;
					}
					if (num47 > (float)(int)color2.G)
					{
						color2.G = (byte)num47;
					}
					if (num48 > (float)(int)color2.B)
					{
						color2.B = (byte)num48;
					}
					bgScale = 1.36f;
					bgScale *= 2f;
					LoadBackground(48);
					bgW = (int)((float)backgroundWidth[48] * bgScale);
					bgParallax = 0.49;
					SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
					bgStart = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgW) - (double)(bgW / 2));
					bgTop = (int)((double)(0f - screenPosition.Y + screenOff / 2f) / (worldSurface * 16.0) * 2100.0 + 1950.0) + (int)scAdj;
					if (gameMenu)
					{
						bgTop = 480;
						bgStart -= 120;
					}
					bgLoops = screenWidth / bgW + 2;
					if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
					{
						for (int num51 = 0; num51 < bgLoops; num51++)
						{
							spriteBatch.Draw(backgroundTexture[48], new Vector2(bgStart + bgW * num51, bgTop), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[48], backgroundHeight[48]), color2, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
						}
					}
					SkyManager.Instance.DrawToDepth(spriteBatch, 1f);
				}
			}
			if (!mapFullscreen && cloudAlpha > 0f && (double)screenPosition.Y < worldSurface * 16.0 + 16.0)
			{
				bgParallax = 0.1;
				bgStart = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, backgroundWidth[background]) - (double)(backgroundWidth[background] / 2));
				bgLoops = screenWidth / backgroundWidth[background] + 2;
				bgStartY = 0;
				bgLoopsY = 0;
				bgTop = (int)((double)(0f - screenPosition.Y) / (worldSurface * 16.0 - 600.0) * 200.0);
				for (int num52 = 0; num52 < bgLoops; num52++)
				{
					Microsoft.Xna.Framework.Color color3 = bgColor;
					bgStart = 0;
					float num53 = cloudAlpha;
					color3.R = (byte)((float)(int)color3.R * num53);
					color3.G = (byte)((float)(int)color3.G * num53);
					color3.B = (byte)((float)(int)color3.B * num53);
					color3.A = (byte)((float)(int)color3.A * num53);
					spriteBatch.Draw(backgroundTexture[49], new Microsoft.Xna.Framework.Rectangle(bgStart + backgroundWidth[49] * num52, bgTop, backgroundWidth[49], backgroundHeight[49]), color3);
				}
			}
			if (!mapFullscreen)
			{
				SkyManager.Instance.DrawRemainingDepth(spriteBatch);
			}
			float value4 = (float)(worldSurface + 2.0) * 16f - screenPosition.Y;
			float value5 = (float)maxTilesY * 16f - (screenPosition.Y + (float)screenHeight);
			value4 = MathHelper.Clamp(value4, 0f, screenHeight);
			value5 = MathHelper.Clamp(value5, 0f, screenHeight);
			if (value5 - value4 > 0f)
			{
				spriteBatch.Draw(blackTileTexture, new Microsoft.Xna.Framework.Rectangle(0, (int)value4, screenWidth, (int)(value5 - value4)), Microsoft.Xna.Framework.Color.Black);
			}
		}

		private void DrawTileCracks(int crackType)
		{
			Vector2 value = new Vector2(offScreenRange, offScreenRange);
			if (drawToScreen)
			{
				value = Vector2.Zero;
			}
			for (int i = 0; i < player[myPlayer].hitTile.data.Length; i++)
			{
				if (player[myPlayer].hitTile.data[i].type != crackType)
				{
					continue;
				}
				int damage = player[myPlayer].hitTile.data[i].damage;
				if (damage < 20)
				{
					continue;
				}
				int x = player[myPlayer].hitTile.data[i].X;
				int y = player[myPlayer].hitTile.data[i].Y;
				if (!WorldGen.InWorld(x, y))
				{
					continue;
				}
				bool flag = tile[x, y] != null;
				if (flag && crackType == 1)
				{
					flag = (flag && tile[x, y].active());
				}
				if (flag && crackType == 2)
				{
					flag = (flag && tile[x, y].wall != 0);
				}
				if (!flag)
				{
					continue;
				}
				bool flag2 = false;
				bool flag3 = false;
				if (tile[x, y].type == 10)
				{
					flag2 = false;
				}
				else if (tileSolid[tile[x, y].type] && !tileSolidTop[tile[x, y].type])
				{
					flag2 = true;
				}
				else if (tile[x, y].type == 5)
				{
					flag3 = true;
					int num = tile[x, y].frameX / 22;
					int num2 = tile[x, y].frameY / 22;
					if (num2 < 9)
					{
						flag2 = (((num != 1 && num != 2) || num2 < 6 || num2 > 8) && (num != 3 || num2 > 2) && (num != 4 || num2 < 3 || num2 > 5) && ((num != 5 || num2 < 6 || num2 > 8) ? true : false));
					}
				}
				else if (tile[x, y].type == 72)
				{
					flag3 = true;
					if (tile[x, y].frameX <= 34)
					{
						flag2 = true;
					}
				}
				if (flag2 && tile[x, y].slope() == 0 && !tile[x, y].halfBrick())
				{
					int num3 = 0;
					if (damage >= 80)
					{
						num3 = 3;
					}
					else if (damage >= 60)
					{
						num3 = 2;
					}
					else if (damage >= 40)
					{
						num3 = 1;
					}
					else if (damage >= 20)
					{
						num3 = 0;
					}
					Microsoft.Xna.Framework.Rectangle value2 = new Microsoft.Xna.Framework.Rectangle(player[myPlayer].hitTile.data[i].crackStyle * 18, num3 * 18, 16, 16);
					if (flag3)
					{
						value2.X = (4 + player[myPlayer].hitTile.data[i].crackStyle / 2) * 18;
					}
					spriteBatch.Draw(tileCrackTexture, new Vector2(x * 16 - (int)screenPosition.X, y * 16 - (int)screenPosition.Y) + value, value2, Lighting.GetColor(x, y), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
			}
		}

		private static void CheckMonoliths()
		{
		}

		protected override void Draw(GameTime gameTime)
		{
			if (_drawCycleCounter == 0)
			{
				_tileFrameSeed = Utils.RandomNextSeed(_tileFrameSeed);
			}
			_drawCycleCounter = (_drawCycleCounter + 1) % 5uL;
			MenuUI.IsVisible = (gameMenu && menuMode == 888);
			InGameUI.IsVisible = (!gameMenu && InGameUI.CurrentState != null);
			EnsureRenderTargetContent();
			CaptureManager.Instance.DrawTick();
			TimeLogger.NewDrawFrame();
			if (!gameMenu)
			{
				lookForColorTiles();
			}
			TimeLogger.DetailedDrawTime(0);
			if (loadMap)
			{
				refreshMap = false;
				DrawToMap();
				TimeLogger.DetailedDrawTime(1);
			}
			if (Lighting.lightMode >= 2)
			{
				drawToScreen = true;
			}
			else
			{
				drawToScreen = false;
			}
			if (drawToScreen && targetSet)
			{
				ReleaseTargets();
			}
			if (!drawToScreen && !targetSet)
			{
				InitTargets();
			}
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			fpsCount++;
			if (!base.IsActive)
			{
				maxQ = true;
			}
			drawTime++;
			screenLastPosition = screenPosition;
			if (stackSplit == 0)
			{
				stackCounter = 0;
				stackDelay = 7;
				superFastStack = 0;
			}
			else
			{
				stackCounter++;
				int num = 30;
				num = ((num == 7) ? 30 : ((stackDelay == 6) ? 25 : ((stackDelay == 5) ? 20 : ((stackDelay == 4) ? 15 : ((stackDelay != 3) ? 5 : 10)))));
				if (stackCounter >= num)
				{
					stackDelay--;
					if (stackDelay < 2)
					{
						stackDelay = 2;
						superFastStack++;
					}
					stackCounter = 0;
				}
			}
			if (myPlayer >= 0)
			{
				player[myPlayer].lastMouseInterface = player[myPlayer].mouseInterface;
				player[myPlayer].mouseInterface = false;
			}
			if (mapTime > 0)
			{
				mapTime--;
			}
			if (gameMenu)
			{
				mapTime = mapTimeMax;
			}
			toolTip = new Item();
			if (!gameMenu && netMode != 2)
			{
				int num2 = 21;
				if (cameraX != 0f && !player[myPlayer].pulley)
				{
					cameraX = 0f;
				}
				if (cameraX > 0f)
				{
					cameraX -= 1f;
					if (cameraX < 0f)
					{
						cameraX = 0f;
					}
				}
				if (cameraX < 0f)
				{
					cameraX += 1f;
					if (cameraX > 0f)
					{
						cameraX = 0f;
					}
				}
				Vector2 value = screenPosition;
				screenPosition.X = player[myPlayer].position.X + (float)player[myPlayer].width * 0.5f - (float)screenWidth * 0.5f + cameraX;
				screenPosition.Y = player[myPlayer].position.Y + (float)player[myPlayer].height - (float)num2 - (float)screenHeight * 0.5f + player[myPlayer].gfxOffY;
				float num3 = 0f;
				float num4 = 0f;
				if ((player[myPlayer].noThrow <= 0 && !player[myPlayer].lastMouseInterface) || zoomX != 0f || zoomY != 0f)
				{
					if (player[myPlayer].inventory[player[myPlayer].selectedItem].type == 1254 && player[myPlayer].scope && mouseRight)
					{
						int num5 = mouseX;
						int num6 = mouseY;
						if (num5 > screenWidth)
						{
							num5 = screenWidth;
						}
						if (num5 < 0)
						{
							num5 = 0;
						}
						if (num6 > screenHeight)
						{
							num6 = screenHeight;
						}
						if (num6 < 0)
						{
							num6 = 0;
						}
						num3 = (float)(num5 - screenWidth / 2) / 1.25f;
						num4 += (float)(num6 - screenHeight / 2) / 1.25f;
					}
					else if (player[myPlayer].inventory[player[myPlayer].selectedItem].type == 1254 && mouseRight)
					{
						int num7 = mouseX;
						int num8 = mouseY;
						if (num7 > screenWidth)
						{
							num7 = screenWidth;
						}
						if (num7 < 0)
						{
							num7 = 0;
						}
						if (num8 > screenHeight)
						{
							num8 = screenHeight;
						}
						if (num8 < 0)
						{
							num8 = 0;
						}
						num3 = (float)(num7 - screenWidth / 2) / 1.5f;
						num4 += (float)(num8 - screenHeight / 2) / 1.5f;
					}
					else if (player[myPlayer].inventory[player[myPlayer].selectedItem].type == 1299 && player[myPlayer].selectedItem != 58)
					{
						int num9 = mouseX;
						int num10 = mouseY;
						if (num9 > screenWidth)
						{
							num9 = screenWidth;
						}
						if (num9 < 0)
						{
							num9 = 0;
						}
						if (num10 > screenHeight)
						{
							num10 = screenHeight;
						}
						if (num10 < 0)
						{
							num10 = 0;
						}
						num3 = (float)(num9 - screenWidth / 2) / 1.5f;
						num4 += (float)(num10 - screenHeight / 2) / 1.5f;
					}
					else if (player[myPlayer].scope && mouseRight)
					{
						int num11 = mouseX;
						int num12 = mouseY;
						if (num11 > screenWidth)
						{
							num11 = screenWidth;
						}
						if (num11 < 0)
						{
							num11 = 0;
						}
						if (num12 > screenHeight)
						{
							num12 = screenHeight;
						}
						if (num12 < 0)
						{
							num12 = 0;
						}
						num3 = (float)(num11 - screenWidth / 2) / 2f;
						num4 += (float)(num12 - screenHeight / 2) / 2f;
					}
				}
				float num13 = 24f;
				float num14 = num3 - zoomX;
				float num15 = num4 - zoomY;
				float num16 = (float)Math.Sqrt(num14 * num14 + num15 * num15);
				num16 = (float)Math.Sqrt(num14 * num14 + num15 * num15);
				if (num16 < num13)
				{
					zoomX = num3;
					zoomY = num4;
				}
				else
				{
					num16 = num13 / num16;
					num14 *= num16;
					num15 *= num16;
					zoomX += num14;
					zoomY += num15;
				}
				screenPosition.X += zoomX;
				screenPosition.Y += zoomY * player[myPlayer].gravDir;
				if (cameraLerp > 0f)
				{
					float num17 = Vector2.Distance(value, screenPosition) - player[myPlayer].velocity.Length();
					if (num17 < 0.25f)
					{
						cameraLerp = 0f;
					}
					else
					{
						screenPosition = Vector2.Lerp(value, screenPosition, cameraLerp);
					}
				}
				screenPosition.X = (int)screenPosition.X;
				screenPosition.Y = (int)screenPosition.Y;
			}
			if (!gameMenu && netMode != 2)
			{
				if (screenPosition.X < leftWorld + 640f + 16f)
				{
					screenPosition.X = leftWorld + 640f + 16f;
				}
				else if (screenPosition.X + (float)screenWidth > rightWorld - 640f - 32f)
				{
					screenPosition.X = rightWorld - (float)screenWidth - 640f - 32f;
				}
				if (screenPosition.Y < topWorld + 640f + 16f)
				{
					screenPosition.Y = topWorld + 640f + 16f;
				}
				else if (screenPosition.Y + (float)screenHeight > bottomWorld - 640f - 32f)
				{
					screenPosition.Y = bottomWorld - (float)screenHeight - 640f - 32f;
				}
			}
			CheckMonoliths();
			if (showSplash)
			{
				DrawSplash(gameTime);
				TimeLogger.SplashDrawTime(stopwatch.Elapsed.TotalMilliseconds);
				TimeLogger.EndDrawFrame();
				return;
			}
			sunCircle += 0.01f;
			if ((double)sunCircle > 6.285)
			{
				sunCircle -= 6.285f;
			}
			TimeLogger.DetailedDrawReset();
			if (!gameMenu)
			{
				waterfallManager.FindWaterfalls();
				TimeLogger.DetailedDrawTime(2);
				if (renderNow)
				{
					screenLastPosition = screenPosition;
					renderNow = false;
					renderCount = 99;
					Draw(gameTime);
					Lighting.LightTiles(firstTileX, lastTileX, firstTileY, lastTileY);
					Lighting.LightTiles(firstTileX, lastTileX, firstTileY, lastTileY);
					RenderTiles();
					sceneTilePos.X = screenPosition.X - (float)offScreenRange;
					sceneTilePos.Y = screenPosition.Y - (float)offScreenRange;
					RenderBackground();
					sceneBackgroundPos.X = screenPosition.X - (float)offScreenRange;
					sceneBackgroundPos.Y = screenPosition.Y - (float)offScreenRange;
					RenderWalls();
					sceneWallPos.X = screenPosition.X - (float)offScreenRange;
					sceneWallPos.Y = screenPosition.Y - (float)offScreenRange;
					RenderTiles2();
					sceneTile2Pos.X = screenPosition.X - (float)offScreenRange;
					sceneTile2Pos.Y = screenPosition.Y - (float)offScreenRange;
					RenderWater();
					sceneWaterPos.X = screenPosition.X - (float)offScreenRange;
					sceneWaterPos.Y = screenPosition.Y - (float)offScreenRange;
					renderCount = 99;
				}
				else
				{
					if (renderCount == 3)
					{
						RenderTiles();
						sceneTilePos.X = screenPosition.X - (float)offScreenRange;
						sceneTilePos.Y = screenPosition.Y - (float)offScreenRange;
					}
					if (renderCount == 2)
					{
						RenderBackground();
						sceneBackgroundPos.X = screenPosition.X - (float)offScreenRange;
						sceneBackgroundPos.Y = screenPosition.Y - (float)offScreenRange;
					}
					if (renderCount == 2)
					{
						RenderWalls();
						sceneWallPos.X = screenPosition.X - (float)offScreenRange;
						sceneWallPos.Y = screenPosition.Y - (float)offScreenRange;
					}
					if (renderCount == 3)
					{
						RenderTiles2();
						sceneTile2Pos.X = screenPosition.X - (float)offScreenRange;
						sceneTile2Pos.Y = screenPosition.Y - (float)offScreenRange;
					}
					if (renderCount == 1)
					{
						RenderWater();
						sceneWaterPos.X = screenPosition.X - (float)offScreenRange;
						sceneWaterPos.Y = screenPosition.Y - (float)offScreenRange;
					}
				}
				if (render && !gameMenu)
				{
					if (Math.Abs(sceneTilePos.X - (screenPosition.X - (float)offScreenRange)) > (float)offScreenRange || Math.Abs(sceneTilePos.Y - (screenPosition.Y - (float)offScreenRange)) > (float)offScreenRange)
					{
						RenderTiles();
						sceneTilePos.X = screenPosition.X - (float)offScreenRange;
						sceneTilePos.Y = screenPosition.Y - (float)offScreenRange;
					}
					if (Math.Abs(sceneTile2Pos.X - (screenPosition.X - (float)offScreenRange)) > (float)offScreenRange || Math.Abs(sceneTile2Pos.Y - (screenPosition.Y - (float)offScreenRange)) > (float)offScreenRange)
					{
						RenderTiles2();
						sceneTile2Pos.X = screenPosition.X - (float)offScreenRange;
						sceneTile2Pos.Y = screenPosition.Y - (float)offScreenRange;
					}
					if (Math.Abs(sceneBackgroundPos.X - (screenPosition.X - (float)offScreenRange)) > (float)offScreenRange || Math.Abs(sceneBackgroundPos.Y - (screenPosition.Y - (float)offScreenRange)) > (float)offScreenRange)
					{
						RenderBackground();
						sceneBackgroundPos.X = screenPosition.X - (float)offScreenRange;
						sceneBackgroundPos.Y = screenPosition.Y - (float)offScreenRange;
					}
					if (Math.Abs(sceneWallPos.X - (screenPosition.X - (float)offScreenRange)) > (float)offScreenRange || Math.Abs(sceneWallPos.Y - (screenPosition.Y - (float)offScreenRange)) > (float)offScreenRange)
					{
						RenderWalls();
						sceneWallPos.X = screenPosition.X - (float)offScreenRange;
						sceneWallPos.Y = screenPosition.Y - (float)offScreenRange;
					}
					if (Math.Abs(sceneWaterPos.X - (screenPosition.X - (float)offScreenRange)) > (float)offScreenRange || Math.Abs(sceneWaterPos.Y - (screenPosition.Y - (float)offScreenRange)) > (float)offScreenRange)
					{
						RenderWater();
						sceneWaterPos.X = screenPosition.X - (float)offScreenRange;
						sceneWaterPos.Y = screenPosition.Y - (float)offScreenRange;
					}
				}
			}
			if (!loadMap)
			{
				if (!gameMenu)
				{
					TimeLogger.DetailedDrawReset();
					Stopwatch stopwatch2 = new Stopwatch();
					stopwatch2.Start();
					int num18 = 0;
					int x;
					int y;
					while (stopwatch2.ElapsedMilliseconds < 5 && sectionManager.GetNextMapDraw(player[myPlayer].position, out x, out y))
					{
						DrawToMap_Section(x, y);
						num18++;
					}
					TimeLogger.DetailedDrawTime(3);
				}
				if (updateMap)
				{
					if (base.IsActive || netMode == 1)
					{
						if (refreshMap)
						{
							refreshMap = false;
							sectionManager.ClearMapDraw();
						}
						DrawToMap();
						updateMap = false;
					}
					else if (MapHelper.numUpdateTile > 0)
					{
						DrawToMap();
					}
					TimeLogger.DetailedDrawTime(4);
				}
			}
			bgParallax = 0.1;
			bgStart = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, backgroundWidth[background]) - (double)(backgroundWidth[background] / 2));
			bgLoops = screenWidth / backgroundWidth[background] + 2;
			bgStartY = 0;
			bgLoopsY = 0;
			bgTop = (int)((double)(0f - screenPosition.Y) / (worldSurface * 16.0 - 600.0) * 200.0);
			bgColor = Microsoft.Xna.Framework.Color.White;
			if (gameMenu || netMode == 2)
			{
				bgTop = -200;
			}
			int num19 = (int)(time / 54000.0 * (double)(screenWidth + sunTexture.Width * 2)) - sunTexture.Width;
			int num20 = 0;
			Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
			float num21 = 1f;
			float rotation = (float)(time / 54000.0) * 2f - 7.3f;
			int num22 = (int)(time / 32400.0 * (double)(screenWidth + moonTexture[moonType].Width * 2)) - moonTexture[moonType].Width;
			int num23 = 0;
			Microsoft.Xna.Framework.Color white2 = Microsoft.Xna.Framework.Color.White;
			float num24 = 1f;
			float rotation2 = (float)(time / 32400.0) * 2f - 7.3f;
			float num25 = 0f;
			if (dayTime)
			{
				double num26;
				if (time < 27000.0)
				{
					num26 = Math.Pow(1.0 - time / 54000.0 * 2.0, 2.0);
					num20 = (int)((double)bgTop + num26 * 250.0 + 180.0);
				}
				else
				{
					num26 = Math.Pow((time / 54000.0 - 0.5) * 2.0, 2.0);
					num20 = (int)((double)bgTop + num26 * 250.0 + 180.0);
				}
				num21 = (float)(1.2 - num26 * 0.4);
			}
			else
			{
				double num27;
				if (time < 16200.0)
				{
					num27 = Math.Pow(1.0 - time / 32400.0 * 2.0, 2.0);
					num23 = (int)((double)bgTop + num27 * 250.0 + 180.0);
				}
				else
				{
					num27 = Math.Pow((time / 32400.0 - 0.5) * 2.0, 2.0);
					num23 = (int)((double)bgTop + num27 * 250.0 + 180.0);
				}
				num24 = (float)(1.2 - num27 * 0.4);
			}
			if (dayTime)
			{
				if (time < 13500.0)
				{
					num25 = (float)(time / 13500.0);
					white.R = (byte)(num25 * 200f + 55f);
					white.G = (byte)(num25 * 180f + 75f);
					white.B = (byte)(num25 * 250f + 5f);
					bgColor.R = (byte)(num25 * 230f + 25f);
					bgColor.G = (byte)(num25 * 220f + 35f);
					bgColor.B = (byte)(num25 * 220f + 35f);
				}
				if (time > 45900.0)
				{
					num25 = (float)(1.0 - (time / 54000.0 - 0.85) * 6.666666666666667);
					white.R = (byte)(num25 * 120f + 55f);
					white.G = (byte)(num25 * 100f + 25f);
					white.B = (byte)(num25 * 120f + 55f);
					bgColor.R = (byte)(num25 * 200f + 35f);
					bgColor.G = (byte)(num25 * 85f + 35f);
					bgColor.B = (byte)(num25 * 135f + 35f);
				}
				else if (time > 37800.0)
				{
					num25 = (float)(1.0 - (time / 54000.0 - 0.7) * 6.666666666666667);
					white.R = (byte)(num25 * 80f + 175f);
					white.G = (byte)(num25 * 130f + 125f);
					white.B = (byte)(num25 * 100f + 155f);
					bgColor.R = (byte)(num25 * 20f + 235f);
					bgColor.G = (byte)(num25 * 135f + 120f);
					bgColor.B = (byte)(num25 * 85f + 170f);
				}
			}
			if (!dayTime)
			{
				if (bloodMoon)
				{
					if (time < 16200.0)
					{
						num25 = (float)(1.0 - time / 16200.0);
						white2.R = (byte)(num25 * 10f + 205f);
						white2.G = (byte)(num25 * 170f + 55f);
						white2.B = (byte)(num25 * 200f + 55f);
						bgColor.R = (byte)(40f - num25 * 40f + 35f);
						bgColor.G = (byte)(num25 * 20f + 15f);
						bgColor.B = (byte)(num25 * 20f + 15f);
					}
					else if (time >= 16200.0)
					{
						num25 = (float)((time / 32400.0 - 0.5) * 2.0);
						white2.R = (byte)(num25 * 50f + 205f);
						white2.G = (byte)(num25 * 100f + 155f);
						white2.B = (byte)(num25 * 100f + 155f);
						white2.R = (byte)(num25 * 10f + 205f);
						white2.G = (byte)(num25 * 170f + 55f);
						white2.B = (byte)(num25 * 200f + 55f);
						bgColor.R = (byte)(40f - num25 * 40f + 35f);
						bgColor.G = (byte)(num25 * 20f + 15f);
						bgColor.B = (byte)(num25 * 20f + 15f);
					}
				}
				else if (time < 16200.0)
				{
					num25 = (float)(1.0 - time / 16200.0);
					white2.R = (byte)(num25 * 10f + 205f);
					white2.G = (byte)(num25 * 70f + 155f);
					white2.B = (byte)(num25 * 100f + 155f);
					bgColor.R = (byte)(num25 * 30f + 5f);
					bgColor.G = (byte)(num25 * 30f + 5f);
					bgColor.B = (byte)(num25 * 30f + 5f);
				}
				else if (time >= 16200.0)
				{
					num25 = (float)((time / 32400.0 - 0.5) * 2.0);
					white2.R = (byte)(num25 * 50f + 205f);
					white2.G = (byte)(num25 * 100f + 155f);
					white2.B = (byte)(num25 * 100f + 155f);
					bgColor.R = (byte)(num25 * 20f + 5f);
					bgColor.G = (byte)(num25 * 30f + 5f);
					bgColor.B = (byte)(num25 * 30f + 5f);
				}
			}
			float num28 = 0.0005f * (float)dayRate;
			if (gameMenu)
			{
				num28 *= 20f;
			}
			if (raining)
			{
				if (cloudAlpha > maxRaining)
				{
					cloudAlpha -= num28;
					if (cloudAlpha < maxRaining)
					{
						cloudAlpha = maxRaining;
					}
				}
				else if (cloudAlpha < maxRaining)
				{
					cloudAlpha += num28;
					if (cloudAlpha > maxRaining)
					{
						cloudAlpha = maxRaining;
					}
				}
			}
			else
			{
				cloudAlpha -= num28;
				if (cloudAlpha < 0f)
				{
					cloudAlpha = 0f;
				}
			}
			if (cloudAlpha > 0f)
			{
				float num29 = 1f - cloudAlpha * 0.9f;
				bgColor.R = (byte)((float)(int)bgColor.R * num29);
				bgColor.G = (byte)((float)(int)bgColor.G * num29);
				bgColor.B = (byte)((float)(int)bgColor.B * num29);
			}
			if (gameMenu || netMode == 2)
			{
				bgTop = 0;
				if (!dayTime)
				{
					bgColor.R = 35;
					bgColor.G = 35;
					bgColor.B = 35;
				}
			}
			if (gameMenu)
			{
				bgDelay = 1000;
				evilTiles = (int)(bgAlpha[1] * 500f);
			}
			if (evilTiles > 0)
			{
				float num30 = (float)evilTiles / 500f;
				if (num30 > 1f)
				{
					num30 = 1f;
				}
				int r = bgColor.R;
				int g = bgColor.G;
				int b = bgColor.B;
				r -= (int)(100f * num30 * ((float)(int)bgColor.R / 255f));
				g -= (int)(140f * num30 * ((float)(int)bgColor.G / 255f));
				b -= (int)(80f * num30 * ((float)(int)bgColor.B / 255f));
				if (r < 15)
				{
					r = 15;
				}
				if (g < 15)
				{
					g = 15;
				}
				if (b < 15)
				{
					b = 15;
				}
				bgColor.R = (byte)r;
				bgColor.G = (byte)g;
				bgColor.B = (byte)b;
				r = white.R;
				g = white.G;
				b = white.B;
				r -= (int)(100f * num30 * ((float)(int)white.R / 255f));
				g -= (int)(100f * num30 * ((float)(int)white.G / 255f));
				b -= (int)(0f * num30 * ((float)(int)white.B / 255f));
				if (r < 15)
				{
					r = 15;
				}
				if (g < 15)
				{
					g = 15;
				}
				if (b < 15)
				{
					b = 15;
				}
				white.R = (byte)r;
				white.G = (byte)g;
				white.B = (byte)b;
				r = white2.R;
				g = white2.G;
				b = white2.B;
				r -= (int)(140f * num30 * ((float)(int)white2.R / 255f));
				g -= (int)(190f * num30 * ((float)(int)white2.G / 255f));
				b -= (int)(170f * num30 * ((float)(int)white2.B / 255f));
				if (r < 15)
				{
					r = 15;
				}
				if (g < 15)
				{
					g = 15;
				}
				if (b < 15)
				{
					b = 15;
				}
				white2.R = (byte)r;
				white2.G = (byte)g;
				white2.B = (byte)b;
			}
			if (bloodTiles > 0)
			{
				float num31 = (float)bloodTiles / 400f;
				if (num31 > 1f)
				{
					num31 = 1f;
				}
				int r2 = bgColor.R;
				int g2 = bgColor.G;
				int b2 = bgColor.B;
				r2 -= (int)(70f * num31 * ((float)(int)bgColor.G / 255f));
				g2 -= (int)(110f * num31 * ((float)(int)bgColor.G / 255f));
				b2 -= (int)(150f * num31 * ((float)(int)bgColor.B / 255f));
				if (r2 < 15)
				{
					r2 = 15;
				}
				if (g2 < 15)
				{
					g2 = 15;
				}
				if (b2 < 15)
				{
					b2 = 15;
				}
				bgColor.R = (byte)r2;
				bgColor.G = (byte)g2;
				bgColor.B = (byte)b2;
				r2 = white.R;
				g2 = white.G;
				b2 = white.B;
				g2 -= (int)(90f * num31 * ((float)(int)white.G / 255f));
				b2 -= (int)(110f * num31 * ((float)(int)white.B / 255f));
				if (r2 < 15)
				{
					r2 = 15;
				}
				if (g2 < 15)
				{
					g2 = 15;
				}
				if (b2 < 15)
				{
					b2 = 15;
				}
				white.R = (byte)r2;
				white.G = (byte)g2;
				white.B = (byte)b2;
				r2 = white2.R;
				g2 = white2.G;
				b2 = white2.B;
				r2 -= (int)(100f * num31 * ((float)(int)white2.R / 255f));
				g2 -= (int)(120f * num31 * ((float)(int)white2.G / 255f));
				b2 -= (int)(180f * num31 * ((float)(int)white2.B / 255f));
				if (r2 < 15)
				{
					r2 = 15;
				}
				if (g2 < 15)
				{
					g2 = 15;
				}
				if (b2 < 15)
				{
					b2 = 15;
				}
				white2.R = (byte)r2;
				white2.G = (byte)g2;
				white2.B = (byte)b2;
			}
			if (jungleTiles > 0)
			{
				float num32 = (float)jungleTiles / 200f;
				if (num32 > 1f)
				{
					num32 = 1f;
				}
				int r3 = bgColor.R;
				int num33 = bgColor.G;
				int b3 = bgColor.B;
				r3 -= (int)(40f * num32 * ((float)(int)bgColor.R / 255f));
				b3 -= (int)(70f * num32 * ((float)(int)bgColor.B / 255f));
				if (num33 > 255)
				{
					num33 = 255;
				}
				if (num33 < 15)
				{
					num33 = 15;
				}
				if (r3 > 255)
				{
					r3 = 255;
				}
				if (r3 < 15)
				{
					r3 = 15;
				}
				if (b3 < 15)
				{
					b3 = 15;
				}
				bgColor.R = (byte)r3;
				bgColor.G = (byte)num33;
				bgColor.B = (byte)b3;
				r3 = white.R;
				num33 = white.G;
				b3 = white.B;
				r3 -= (int)(30f * num32 * ((float)(int)white.R / 255f));
				b3 -= (int)(10f * num32 * ((float)(int)white.B / 255f));
				if (r3 < 15)
				{
					r3 = 15;
				}
				if (num33 < 15)
				{
					num33 = 15;
				}
				if (b3 < 15)
				{
					b3 = 15;
				}
				white.R = (byte)r3;
				white.G = (byte)num33;
				white.B = (byte)b3;
				r3 = white2.R;
				num33 = white2.G;
				b3 = white2.B;
				num33 -= (int)(140f * num32 * ((float)(int)white2.R / 255f));
				r3 -= (int)(170f * num32 * ((float)(int)white2.G / 255f));
				b3 -= (int)(190f * num32 * ((float)(int)white2.B / 255f));
				if (r3 < 15)
				{
					r3 = 15;
				}
				if (num33 < 15)
				{
					num33 = 15;
				}
				if (b3 < 15)
				{
					b3 = 15;
				}
				white2.R = (byte)r3;
				white2.G = (byte)num33;
				white2.B = (byte)b3;
			}
			if (shroomTiles > 0)
			{
				float num34 = (float)shroomTiles / 160f;
				if (num34 > shroomLight)
				{
					shroomLight += 0.01f;
				}
				if (num34 < shroomLight)
				{
					shroomLight -= 0.01f;
				}
			}
			else
			{
				shroomLight -= 0.02f;
			}
			if (shroomLight < 0f)
			{
				shroomLight = 0f;
			}
			if (shroomLight > 1f)
			{
				shroomLight = 1f;
			}
			if (shroomLight > 0f)
			{
				float num35 = shroomLight;
				int r4 = bgColor.R;
				int g3 = bgColor.G;
				int b4 = bgColor.B;
				g3 -= (int)(250f * num35 * ((float)(int)bgColor.G / 255f));
				r4 -= (int)(250f * num35 * ((float)(int)bgColor.R / 255f));
				b4 -= (int)(250f * num35 * ((float)(int)bgColor.B / 255f));
				if (g3 < 15)
				{
					g3 = 15;
				}
				if (r4 < 15)
				{
					r4 = 15;
				}
				if (b4 < 15)
				{
					b4 = 15;
				}
				bgColor.R = (byte)r4;
				bgColor.G = (byte)g3;
				bgColor.B = (byte)b4;
				r4 = white.R;
				g3 = white.G;
				b4 = white.B;
				g3 -= (int)(10f * num35 * ((float)(int)white.G / 255f));
				r4 -= (int)(30f * num35 * ((float)(int)white.R / 255f));
				b4 -= (int)(10f * num35 * ((float)(int)white.B / 255f));
				if (r4 < 15)
				{
					r4 = 15;
				}
				if (g3 < 15)
				{
					g3 = 15;
				}
				if (b4 < 15)
				{
					b4 = 15;
				}
				white.R = (byte)r4;
				white.G = (byte)g3;
				white.B = (byte)b4;
				r4 = white2.R;
				g3 = white2.G;
				b4 = white2.B;
				g3 -= (int)(140f * num35 * ((float)(int)white2.R / 255f));
				r4 -= (int)(170f * num35 * ((float)(int)white2.G / 255f));
				b4 -= (int)(190f * num35 * ((float)(int)white2.B / 255f));
				if (r4 < 15)
				{
					r4 = 15;
				}
				if (g3 < 15)
				{
					g3 = 15;
				}
				if (b4 < 15)
				{
					b4 = 15;
				}
				white2.R = (byte)r4;
				white2.G = (byte)g3;
				white2.B = (byte)b4;
			}
			if (Lighting.lightMode < 2)
			{
				if (bgColor.R < 10)
				{
					bgColor.R = 10;
				}
				if (bgColor.G < 10)
				{
					bgColor.G = 10;
				}
				if (bgColor.B < 10)
				{
					bgColor.B = 10;
				}
			}
			else
			{
				if (bgColor.R < 15)
				{
					bgColor.R = 15;
				}
				if (bgColor.G < 15)
				{
					bgColor.G = 15;
				}
				if (bgColor.B < 15)
				{
					bgColor.B = 15;
				}
			}
			if (bloodMoon)
			{
				if (bgColor.R < 25)
				{
					bgColor.R = 25;
				}
				if (bgColor.G < 25)
				{
					bgColor.G = 25;
				}
				if (bgColor.B < 25)
				{
					bgColor.B = 25;
				}
			}
			if (eclipse && dayTime)
			{
				float num36 = 1242f;
				eclipseLight = (float)(time / (double)num36);
				if (eclipseLight > 1f)
				{
					eclipseLight = 1f;
				}
			}
			else if (eclipseLight > 0f)
			{
				eclipseLight -= 0.01f;
				if (eclipseLight < 0f)
				{
					eclipseLight = 0f;
				}
			}
			if (eclipseLight > 0f)
			{
				float num37 = 1f - 0.925f * eclipseLight;
				float num38 = 1f - 0.96f * eclipseLight;
				float num39 = 1f - 1f * eclipseLight;
				int num40 = (int)((float)(int)bgColor.R * num37);
				int num41 = (int)((float)(int)bgColor.G * num38);
				int num42 = (int)((float)(int)bgColor.B * num39);
				bgColor.R = (byte)num40;
				bgColor.G = (byte)num41;
				bgColor.B = (byte)num42;
				white.R = byte.MaxValue;
				white.G = 127;
				white.B = 67;
				if (bgColor.R < 20)
				{
					bgColor.R = 20;
				}
				if (bgColor.G < 10)
				{
					bgColor.G = 10;
				}
				if (Lighting.lightMode >= 2)
				{
					if (bgColor.R < 20)
					{
						bgColor.R = 20;
					}
					if (bgColor.G < 14)
					{
						bgColor.G = 14;
					}
					if (bgColor.B < 6)
					{
						bgColor.B = 6;
					}
				}
			}
			tileColor.A = byte.MaxValue;
			tileColor.R = (byte)((bgColor.R + bgColor.G + bgColor.B + bgColor.R * 7) / 10);
			tileColor.G = (byte)((bgColor.R + bgColor.G + bgColor.B + bgColor.G * 7) / 10);
			tileColor.B = (byte)((bgColor.R + bgColor.G + bgColor.B + bgColor.B * 7) / 10);
			tileColor = SkyManager.Instance.ProcessTileColor(tileColor);
			float num43 = maxTilesX / 4200;
			num43 *= num43;
			atmo = (float)((double)((screenPosition.Y + (float)(screenHeight / 2)) / 16f - (65f + 10f * num43)) / (worldSurface / 5.0));
			if (atmo < 0f)
			{
				atmo = 0f;
			}
			if (atmo > 1f)
			{
				atmo = 1f;
			}
			if (gameMenu)
			{
				atmo = 1f;
			}
			bgColor.R = (byte)((float)(int)bgColor.R * atmo);
			bgColor.G = (byte)((float)(int)bgColor.G * atmo);
			bgColor.B = (byte)((float)(int)bgColor.B * atmo);
			if ((double)atmo <= 0.05)
			{
				bgColor.R = 0;
				bgColor.G = 0;
				bgColor.B = 0;
				bgColor.A = 0;
			}
			base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Black);
			base.Draw(gameTime);
			if (gameMenu || player[myPlayer].gravDir == 1f)
			{
				Transform = Matrix.CreateScale(1f, 1f, 1f) * Matrix.CreateRotationZ(0f) * Matrix.CreateTranslation(new Vector3(0f, 0f, 0f));
				Rasterizer = RasterizerState.CullCounterClockwise;
			}
			else
			{
				Transform = Matrix.CreateScale(1f, -1f, 1f) * Matrix.CreateRotationZ(0f) * Matrix.CreateTranslation(new Vector3(0f, screenHeight, 0f));
				Rasterizer = RasterizerState.CullClockwise;
			}
			bool flag = !drawToScreen && netMode != 2 && !gameMenu && !mapFullscreen && Filters.Scene.HasActiveFilter();
			if (flag)
			{
				base.GraphicsDevice.SetRenderTarget(screenTarget);
				base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Black);
			}
			spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, Rasterizer, null, Transform);
			TimeLogger.DetailedDrawReset();
			if (!mapFullscreen)
			{
				unityMouseOver = false;
				if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
				{
					for (int i = 0; i < bgLoops; i++)
					{
						spriteBatch.Draw(backgroundTexture[background], new Microsoft.Xna.Framework.Rectangle(bgStart + backgroundWidth[background] * i, bgTop, backgroundWidth[background], backgroundHeight[background]), bgColor);
					}
					TimeLogger.DetailedDrawTime(6);
				}
				if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0 && 255f * (1f - cloudAlpha) - (float)(int)bgColor.R - 25f > 0f && netMode != 2)
				{
					for (int j = 0; j < numStars; j++)
					{
						Microsoft.Xna.Framework.Color color = default(Microsoft.Xna.Framework.Color);
						float num44 = (float)evilTiles / 500f;
						if (num44 > 1f)
						{
							num44 = 1f;
						}
						num44 = 1f - num44 * 0.5f;
						if (evilTiles <= 0)
						{
							num44 = 1f;
						}
						int num45 = (int)((float)(255 - bgColor.R - 100) * star[j].twinkle * num44);
						int num46 = (int)((float)(255 - bgColor.G - 100) * star[j].twinkle * num44);
						int num47 = (int)((float)(255 - bgColor.B - 100) * star[j].twinkle * num44);
						if (num45 < 0)
						{
							num45 = 0;
						}
						if (num46 < 0)
						{
							num46 = 0;
						}
						if (num47 < 0)
						{
							num47 = 0;
						}
						color.R = (byte)num45;
						color.G = (byte)((float)num46 * num44);
						color.B = (byte)((float)num47 * num44);
						float num48 = star[j].position.X * ((float)screenWidth / 800f);
						float num49 = star[j].position.Y * ((float)screenHeight / 600f);
						spriteBatch.Draw(starTexture[star[j].type], new Vector2(num48 + (float)starTexture[star[j].type].Width * 0.5f, num49 + (float)starTexture[star[j].type].Height * 0.5f + (float)bgTop), new Microsoft.Xna.Framework.Rectangle(0, 0, starTexture[star[j].type].Width, starTexture[star[j].type].Height), color, star[j].rotation, new Vector2((float)starTexture[star[j].type].Width * 0.5f, (float)starTexture[star[j].type].Height * 0.5f), star[j].scale * star[j].twinkle, SpriteEffects.None, 0f);
					}
				}
				if ((double)(screenPosition.Y / 16f) < worldSurface + 2.0)
				{
					if (dayTime)
					{
						num21 *= 1.1f;
						if (eclipse)
						{
							float num50 = 1f - shroomLight;
							num50 -= cloudAlpha * 1.5f;
							if (num50 < 0f)
							{
								num50 = 0f;
							}
							Microsoft.Xna.Framework.Color color2 = new Microsoft.Xna.Framework.Color((byte)(255f * num50), (byte)((float)(int)white.G * num50), (byte)((float)(int)white.B * num50), (byte)(255f * num50));
							Microsoft.Xna.Framework.Color color3 = new Microsoft.Xna.Framework.Color((byte)((float)(int)white.R * num50), (byte)((float)(int)white.G * num50), (byte)((float)(int)white.B * num50), (byte)((float)(white.B - 60) * num50));
							spriteBatch.Draw(sun3Texture, new Vector2(num19, num20 + sunModY), new Microsoft.Xna.Framework.Rectangle(0, 0, sun3Texture.Width, sun3Texture.Height), color2, rotation, new Vector2(sun3Texture.Width / 2, sun3Texture.Height / 2), num21, SpriteEffects.None, 0f);
							spriteBatch.Draw(sun3Texture, new Vector2(num19, num20 + sunModY), new Microsoft.Xna.Framework.Rectangle(0, 0, sun3Texture.Width, sun3Texture.Height), color3, rotation, new Vector2(sun3Texture.Width / 2, sun3Texture.Height / 2), num21, SpriteEffects.None, 0f);
						}
						else if (!gameMenu && player[myPlayer].head == 12)
						{
							float num51 = 1f - shroomLight;
							num51 -= cloudAlpha * 1.5f;
							if (num51 < 0f)
							{
								num51 = 0f;
							}
							Microsoft.Xna.Framework.Color color4 = new Microsoft.Xna.Framework.Color((byte)(255f * num51), (byte)((float)(int)white.G * num51), (byte)((float)(int)white.B * num51), (byte)(255f * num51));
							Microsoft.Xna.Framework.Color color5 = new Microsoft.Xna.Framework.Color((byte)((float)(int)white.R * num51), (byte)((float)(int)white.G * num51), (byte)((float)(int)white.B * num51), (byte)((float)(white.B - 60) * num51));
							spriteBatch.Draw(sun2Texture, new Vector2(num19, num20 + sunModY), new Microsoft.Xna.Framework.Rectangle(0, 0, sun2Texture.Width, sun2Texture.Height), color4, rotation, new Vector2(sun2Texture.Width / 2, sun2Texture.Height / 2), num21, SpriteEffects.None, 0f);
							spriteBatch.Draw(sun2Texture, new Vector2(num19, num20 + sunModY), new Microsoft.Xna.Framework.Rectangle(0, 0, sun2Texture.Width, sun2Texture.Height), color5, rotation, new Vector2(sun2Texture.Width / 2, sun2Texture.Height / 2), num21, SpriteEffects.None, 0f);
						}
						else
						{
							float num52 = 1f - shroomLight;
							num52 -= cloudAlpha * 1.5f;
							if (num52 < 0f)
							{
								num52 = 0f;
							}
							Microsoft.Xna.Framework.Color color6 = new Microsoft.Xna.Framework.Color((byte)(255f * num52), (byte)((float)(int)white.G * num52), (byte)((float)(int)white.B * num52), (byte)(255f * num52));
							Microsoft.Xna.Framework.Color color7 = new Microsoft.Xna.Framework.Color((byte)((float)(int)white.R * num52), (byte)((float)(int)white.G * num52), (byte)((float)(int)white.B * num52), (byte)((float)(int)white.B * num52));
							spriteBatch.Draw(sunTexture, new Vector2(num19, num20 + sunModY), new Microsoft.Xna.Framework.Rectangle(0, 0, sunTexture.Width, sunTexture.Height), color6, rotation, new Vector2(sunTexture.Width / 2, sunTexture.Height / 2), num21, SpriteEffects.None, 0f);
							spriteBatch.Draw(sunTexture, new Vector2(num19, num20 + sunModY), new Microsoft.Xna.Framework.Rectangle(0, 0, sunTexture.Width, sunTexture.Height), color7, rotation, new Vector2(sunTexture.Width / 2, sunTexture.Height / 2), num21, SpriteEffects.None, 0f);
						}
					}
					if (!dayTime)
					{
						float num53 = 1f - cloudAlpha * 1.5f;
						if (num53 < 0f)
						{
							num53 = 0f;
						}
						white2.R = (byte)((float)(int)white2.R * num53);
						white2.G = (byte)((float)(int)white2.G * num53);
						white2.B = (byte)((float)(int)white2.B * num53);
						white2.A = (byte)((float)(int)white2.A * num53);
						if (pumpkinMoon)
						{
							spriteBatch.Draw(pumpkinMoonTexture, new Vector2(num22, num23 + moonModY), new Microsoft.Xna.Framework.Rectangle(0, pumpkinMoonTexture.Width * moonPhase, pumpkinMoonTexture.Width, pumpkinMoonTexture.Width), white2, rotation2, new Vector2(pumpkinMoonTexture.Width / 2, pumpkinMoonTexture.Width / 2), num24, SpriteEffects.None, 0f);
						}
						else if (snowMoon)
						{
							spriteBatch.Draw(snowMoonTexture, new Vector2(num22, num23 + moonModY), new Microsoft.Xna.Framework.Rectangle(0, snowMoonTexture.Width * moonPhase, snowMoonTexture.Width, snowMoonTexture.Width), white2, rotation2, new Vector2(snowMoonTexture.Width / 2, snowMoonTexture.Width / 2), num24, SpriteEffects.None, 0f);
						}
						else
						{
							spriteBatch.Draw(moonTexture[moonType], new Vector2(num22, num23 + moonModY), new Microsoft.Xna.Framework.Rectangle(0, moonTexture[moonType].Width * moonPhase, moonTexture[moonType].Width, moonTexture[moonType].Width), white2, rotation2, new Vector2(moonTexture[moonType].Width / 2, moonTexture[moonType].Width / 2), num24, SpriteEffects.None, 0f);
						}
					}
				}
				Microsoft.Xna.Framework.Rectangle value2 = dayTime ? new Microsoft.Xna.Framework.Rectangle((int)((double)num19 - (double)sunTexture.Width * 0.5 * (double)num21), (int)((double)num20 - (double)sunTexture.Height * 0.5 * (double)num21 + (double)sunModY), (int)((float)sunTexture.Width * num21), (int)((float)sunTexture.Width * num21)) : new Microsoft.Xna.Framework.Rectangle((int)((double)num22 - (double)moonTexture[moonType].Width * 0.5 * (double)num24), (int)((double)num23 - (double)moonTexture[moonType].Width * 0.5 * (double)num24 + (double)moonModY), (int)((float)moonTexture[moonType].Width * num24), (int)((float)moonTexture[moonType].Width * num24));
				Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(mouseX, mouseY, 1, 1);
				sunModY = (short)((double)sunModY * 0.999);
				moonModY = (short)((double)moonModY * 0.999);
				if (gameMenu && netMode != 1)
				{
					if (mouseLeft && hasFocus)
					{
						if (rectangle.Intersects(value2) || grabSky)
						{
							if (dayTime)
							{
								time = 54000.0 * (double)((float)(mouseX + sunTexture.Width) / ((float)screenWidth + (float)(sunTexture.Width * 2)));
								sunModY = (short)(mouseY - num20);
								if (time > 53990.0)
								{
									time = 53990.0;
								}
							}
							else
							{
								time = 32400.0 * (double)((float)(mouseX + moonTexture[moonType].Width) / ((float)screenWidth + (float)(moonTexture[moonType].Width * 2)));
								moonModY = (short)(mouseY - num23);
								if (time > 32390.0)
								{
									time = 32390.0;
								}
							}
							if (time < 10.0)
							{
								time = 10.0;
							}
							if (netMode != 0)
							{
								NetMessage.SendData(18);
							}
							grabSky = true;
						}
					}
					else
					{
						grabSky = false;
					}
				}
				TimeLogger.DetailedDrawTime(7);
			}
			scAdj = 1f - (float)((double)(screenPosition.Y + (float)screenHeight) / (worldSurface * 16.0));
			scAdj = (float)(worldSurface * 16.0) / (screenPosition.Y + (float)screenHeight);
			float num54 = (float)maxTilesY * 0.15f * 16f;
			num54 -= screenPosition.Y;
			if (num54 < 0f)
			{
				num54 = 0f;
			}
			num54 *= 0.00025f;
			float num55 = num54 * num54;
			scAdj *= 0.45f - num55;
			if ((double)maxTilesY <= 1200.0)
			{
				scAdj *= -500f;
			}
			else if ((double)maxTilesY <= 1800.0)
			{
				scAdj *= -300f;
			}
			else
			{
				scAdj *= -150f;
			}
			screenOff = screenHeight - 600;
			bgTop = (int)((double)(0f - screenPosition.Y + screenOff / 2f) / (worldSurface * 16.0) * 1200.0 + 1190.0) + (int)scAdj;
			cTop = bgTop - 50;
			if (resetClouds)
			{
				Cloud.resetClouds();
				resetClouds = false;
			}
			bgScale = 1f;
			bgW = (int)((float)backgroundWidth[treeMntBG[0]] * bgScale);
			backColor = bgColor;
			trueBackColor = backColor;
			int num56 = bgStyle;
			int num57 = (int)((screenPosition.X + (float)(screenWidth / 2)) / 16f);
			num56 = (((double)(screenPosition.Y / 16f) < worldSurface + 10.0 && (num57 < 380 || num57 > maxTilesX - 380)) ? 4 : ((shroomTiles > 100) ? 9 : ((sandTiles > 1000) ? (player[myPlayer].ZoneCorrupt ? 5 : (player[myPlayer].ZoneCrimson ? 5 : ((!player[myPlayer].ZoneHoly) ? 2 : 5))) : (player[myPlayer].ZoneHoly ? 6 : (player[myPlayer].ZoneCorrupt ? 1 : (player[myPlayer].ZoneCrimson ? 8 : (player[myPlayer].ZoneJungle ? 3 : (player[myPlayer].ZoneSnow ? 7 : 0))))))));
			int num58 = 30;
			tranSpeed = 0.05f;
			if (num56 == 0)
			{
				num58 = 60;
			}
			if (bgDelay < 0)
			{
				bgDelay++;
			}
			else if (num56 != bgStyle)
			{
				bgDelay++;
				if (bgDelay > num58)
				{
					bgDelay = -60;
					bgStyle = num56;
					if (num56 == 0)
					{
						bgDelay = 0;
					}
				}
			}
			else if (bgDelay > 0)
			{
				bgDelay--;
			}
			if (gameMenu)
			{
				tranSpeed = 0.02f;
				if (!dayTime)
				{
					bgStyle = 1;
				}
				else
				{
					bgStyle = 0;
				}
				num56 = bgStyle;
			}
			if (quickBG > 0)
			{
				quickBG--;
				bgStyle = num56;
				tranSpeed = 1f;
			}
			if (bgStyle == 2)
			{
				bgAlpha2[0] -= tranSpeed;
				if (bgAlpha2[0] < 0f)
				{
					bgAlpha2[0] = 0f;
				}
				bgAlpha2[1] += tranSpeed;
				if (bgAlpha2[1] > 1f)
				{
					bgAlpha2[1] = 1f;
				}
				bgAlpha2[2] -= tranSpeed;
				if (bgAlpha2[2] < 0f)
				{
					bgAlpha2[2] = 0f;
				}
				bgAlpha2[3] -= tranSpeed;
				if (bgAlpha2[3] < 0f)
				{
					bgAlpha2[3] = 0f;
				}
				bgAlpha2[4] -= tranSpeed;
				if (bgAlpha2[4] < 0f)
				{
					bgAlpha2[4] = 0f;
				}
				bgAlpha2[5] -= tranSpeed;
				if (bgAlpha2[5] < 0f)
				{
					bgAlpha2[5] = 0f;
				}
				bgAlpha2[6] -= tranSpeed;
				if (bgAlpha2[6] < 0f)
				{
					bgAlpha2[6] = 0f;
				}
			}
			else if (bgStyle == 5 || bgStyle == 1 || bgStyle == 6)
			{
				bgAlpha2[0] -= tranSpeed;
				if (bgAlpha2[0] < 0f)
				{
					bgAlpha2[0] = 0f;
				}
				bgAlpha2[1] -= tranSpeed;
				if (bgAlpha2[1] < 0f)
				{
					bgAlpha2[1] = 0f;
				}
				bgAlpha2[2] += tranSpeed;
				if (bgAlpha2[2] > 1f)
				{
					bgAlpha2[2] = 1f;
				}
				bgAlpha2[3] -= tranSpeed;
				if (bgAlpha2[3] < 0f)
				{
					bgAlpha2[3] = 0f;
				}
				bgAlpha2[4] -= tranSpeed;
				if (bgAlpha2[4] < 0f)
				{
					bgAlpha2[4] = 0f;
				}
				bgAlpha2[5] -= tranSpeed;
				if (bgAlpha2[5] < 0f)
				{
					bgAlpha2[5] = 0f;
				}
				bgAlpha2[6] -= tranSpeed;
				if (bgAlpha2[6] < 0f)
				{
					bgAlpha2[6] = 0f;
				}
			}
			else if (bgStyle == 4)
			{
				bgAlpha2[0] -= tranSpeed;
				if (bgAlpha2[0] < 0f)
				{
					bgAlpha2[0] = 0f;
				}
				bgAlpha2[1] -= tranSpeed;
				if (bgAlpha2[1] < 0f)
				{
					bgAlpha2[1] = 0f;
				}
				bgAlpha2[2] -= tranSpeed;
				if (bgAlpha2[2] < 0f)
				{
					bgAlpha2[2] = 0f;
				}
				bgAlpha2[3] += tranSpeed;
				if (bgAlpha2[3] > 1f)
				{
					bgAlpha2[3] = 1f;
				}
				bgAlpha2[4] -= tranSpeed;
				if (bgAlpha2[4] < 0f)
				{
					bgAlpha2[4] = 0f;
				}
				bgAlpha2[5] -= tranSpeed;
				if (bgAlpha2[5] < 0f)
				{
					bgAlpha2[5] = 0f;
				}
				bgAlpha2[6] -= tranSpeed;
				if (bgAlpha2[6] < 0f)
				{
					bgAlpha2[6] = 0f;
				}
			}
			else if (bgStyle == 7)
			{
				bgAlpha2[0] -= tranSpeed;
				if (bgAlpha2[0] < 0f)
				{
					bgAlpha2[0] = 0f;
				}
				bgAlpha2[1] -= tranSpeed;
				if (bgAlpha2[1] < 0f)
				{
					bgAlpha2[1] = 0f;
				}
				bgAlpha2[2] -= tranSpeed;
				if (bgAlpha2[2] < 0f)
				{
					bgAlpha2[2] = 0f;
				}
				bgAlpha2[3] -= tranSpeed;
				if (bgAlpha2[3] < 0f)
				{
					bgAlpha2[3] = 0f;
				}
				bgAlpha2[4] += tranSpeed;
				if (bgAlpha2[4] > 1f)
				{
					bgAlpha2[4] = 1f;
				}
				bgAlpha2[5] -= tranSpeed;
				if (bgAlpha2[5] < 0f)
				{
					bgAlpha2[5] = 0f;
				}
				bgAlpha2[6] -= tranSpeed;
				if (bgAlpha2[6] < 0f)
				{
					bgAlpha2[6] = 0f;
				}
			}
			else if (bgStyle == 8)
			{
				bgAlpha2[0] -= tranSpeed;
				if (bgAlpha2[0] < 0f)
				{
					bgAlpha2[0] = 0f;
				}
				bgAlpha2[1] -= tranSpeed;
				if (bgAlpha2[1] < 0f)
				{
					bgAlpha2[1] = 0f;
				}
				bgAlpha2[2] -= tranSpeed;
				if (bgAlpha2[2] < 0f)
				{
					bgAlpha2[2] = 0f;
				}
				bgAlpha2[3] -= tranSpeed;
				if (bgAlpha2[3] < 0f)
				{
					bgAlpha2[3] = 0f;
				}
				bgAlpha2[4] -= tranSpeed;
				if (bgAlpha2[4] < 0f)
				{
					bgAlpha2[4] = 0f;
				}
				bgAlpha2[5] += tranSpeed;
				if (bgAlpha2[5] > 1f)
				{
					bgAlpha2[5] = 1f;
				}
				bgAlpha2[6] -= tranSpeed;
				if (bgAlpha2[6] < 0f)
				{
					bgAlpha2[6] = 0f;
				}
			}
			else if (bgStyle == 9)
			{
				bgAlpha2[0] += tranSpeed;
				if (bgAlpha2[0] > 1f)
				{
					bgAlpha2[0] = 1f;
				}
				bgAlpha2[1] -= tranSpeed;
				if (bgAlpha2[1] < 0f)
				{
					bgAlpha2[1] = 0f;
				}
				bgAlpha2[2] -= tranSpeed;
				if (bgAlpha2[2] < 0f)
				{
					bgAlpha2[2] = 0f;
				}
				bgAlpha2[3] -= tranSpeed;
				if (bgAlpha2[3] < 0f)
				{
					bgAlpha2[3] = 0f;
				}
				bgAlpha2[4] -= tranSpeed;
				if (bgAlpha2[4] < 0f)
				{
					bgAlpha2[4] = 0f;
				}
				bgAlpha2[5] -= tranSpeed;
				if (bgAlpha2[5] < 0f)
				{
					bgAlpha2[5] = 0f;
				}
				bgAlpha2[6] += tranSpeed;
				if (bgAlpha2[6] > 1f)
				{
					bgAlpha2[6] = 1f;
				}
			}
			else
			{
				bgAlpha2[0] += tranSpeed;
				if (bgAlpha2[0] > 1f)
				{
					bgAlpha2[0] = 1f;
				}
				bgAlpha2[1] -= tranSpeed;
				if (bgAlpha2[1] < 0f)
				{
					bgAlpha2[1] = 0f;
				}
				bgAlpha2[2] -= tranSpeed;
				if (bgAlpha2[2] < 0f)
				{
					bgAlpha2[2] = 0f;
				}
				bgAlpha2[3] -= tranSpeed;
				if (bgAlpha2[3] < 0f)
				{
					bgAlpha2[3] = 0f;
				}
				bgAlpha2[4] -= tranSpeed;
				if (bgAlpha2[4] < 0f)
				{
					bgAlpha2[4] = 0f;
				}
				bgAlpha2[5] -= tranSpeed;
				if (bgAlpha2[5] < 0f)
				{
					bgAlpha2[5] = 0f;
				}
				bgAlpha2[6] -= tranSpeed;
				if (bgAlpha2[6] < 0f)
				{
					bgAlpha2[6] = 0f;
				}
			}
			if (ignoreErrors)
			{
				try
				{
					DrawSurfaceBG();
					if (owBack)
					{
						DrawUnderworldBackground(false);
					}
				}
				catch (Exception e)
				{
					TimeLogger.DrawException(e);
				}
			}
			else
			{
				DrawSurfaceBG();
				if (owBack)
				{
					DrawUnderworldBackground(false);
				}
			}
			TimeLogger.DetailedDrawTime(8);
			if (gameMenu || netMode == 2)
			{
				bool ısActive = base.IsActive;
				Microsoft.Xna.Framework.Rectangle[] array = new Microsoft.Xna.Framework.Rectangle[6];
				for (int k = 0; k < array.Length; k++)
				{
					array[k] = new Microsoft.Xna.Framework.Rectangle(k * 4, 0, 2, 40);
				}
				Microsoft.Xna.Framework.Color color8 = bgColor * 0.85f;
				for (int l = 0; l < maxRain; l++)
				{
					if (Main.rain[l].active)
					{
						Rain rain = Main.rain[l];
						spriteBatch.Draw(rainTexture, rain.position - screenPosition, array[rain.type], color8, rain.rotation, Vector2.Zero, rain.scale, SpriteEffects.None, 0f);
						if (ısActive)
						{
							rain.Update();
						}
					}
				}
				DrawMenu(gameTime);
				TimeLogger.MenuDrawTime(stopwatch.Elapsed.TotalMilliseconds);
				TimeLogger.EndDrawFrame();
				return;
			}
			firstTileX = (int)(screenPosition.X / 16f - 1f);
			lastTileX = (int)((screenPosition.X + (float)screenWidth) / 16f) + 2;
			firstTileY = (int)(screenPosition.Y / 16f - 1f);
			lastTileY = (int)((screenPosition.Y + (float)screenHeight) / 16f) + 2;
			if (firstTileX < 0)
			{
				firstTileX = 0;
			}
			if (lastTileX > maxTilesX)
			{
				lastTileX = maxTilesX;
			}
			if (firstTileY < 0)
			{
				firstTileY = 0;
			}
			if (lastTileY > maxTilesY)
			{
				lastTileY = maxTilesY;
			}
			if (!drawSkip)
			{
				Lighting.LightTiles(firstTileX, lastTileX, firstTileY, lastTileY);
			}
			TimeLogger.DetailedDrawReset();
			if (mapFullscreen)
			{
				if (player[myPlayer].talkNPC >= 0 || player[myPlayer].sign >= 0 || (playerInventory && !CaptureManager.Instance.Active))
				{
					player[myPlayer].ToggleInv();
				}
				DrawMap();
				DrawFPS();
				DrawPlayerChat();
				TimeLogger.MapDrawTime(stopwatch.Elapsed.TotalMilliseconds);
				TimeLogger.EndDrawFrame();
				CaptureManager.Instance.Update();
				if (CaptureManager.Instance.Active)
				{
					CaptureManager.Instance.Draw(spriteBatch);
				}
				spriteBatch.End();
				if (mouseLeft)
				{
					mouseLeftRelease = false;
				}
				else
				{
					mouseLeftRelease = true;
				}
				return;
			}
			Microsoft.Xna.Framework.Color white3 = Microsoft.Xna.Framework.Color.White;
			if (drawToScreen)
			{
				drawWaters(true);
			}
			else
			{
				spriteBatch.Draw(backWaterTarget, sceneBackgroundPos - screenPosition, Microsoft.Xna.Framework.Color.White);
				TimeLogger.DetailedDrawTime(11);
			}
			float x2 = (sceneBackgroundPos.X - screenPosition.X + (float)offScreenRange) * caveParallax - (float)offScreenRange;
			if (drawToScreen)
			{
				DrawBackground();
			}
			else
			{
				spriteBatch.Draw(backgroundTarget, new Vector2(x2, sceneBackgroundPos.Y - screenPosition.Y), Microsoft.Xna.Framework.Color.White);
				TimeLogger.DetailedDrawTime(12);
			}
			ScreenDarkness.DrawBack(spriteBatch);
			magmaBGFrameCounter++;
			if (magmaBGFrameCounter >= 8)
			{
				magmaBGFrameCounter = 0;
				magmaBGFrame++;
				if (magmaBGFrame >= 3)
				{
					magmaBGFrame = 0;
				}
			}
			try
			{
				CacheNPCDraws();
				CacheProjDraws();
				DrawCachedNPCs(DrawCacheNPCsMoonMoon, true);
				if (drawToScreen)
				{
					DrawBlack();
					DrawWalls();
				}
				else
				{
					spriteBatch.Draw(blackTarget, sceneTilePos - screenPosition, Microsoft.Xna.Framework.Color.White);
					TimeLogger.DetailedDrawTime(13);
					spriteBatch.Draw(wallTarget, sceneWallPos - screenPosition, Microsoft.Xna.Framework.Color.White);
					TimeLogger.DetailedDrawTime(14);
				}
				DrawWoF();
				if (drawBackGore)
				{
					drawBackGore = false;
					if (ignoreErrors)
					{
						try
						{
							DrawGoreBehind();
						}
						catch (Exception e2)
						{
							TimeLogger.DrawException(e2);
						}
					}
					else
					{
						DrawGoreBehind();
					}
				}
				MoonlordDeathDrama.DrawPieces(spriteBatch);
				MoonlordDeathDrama.DrawExplosions(spriteBatch);
				if (player[myPlayer].detectCreature)
				{
					if (drawToScreen)
					{
						DrawTiles(false);
						TimeLogger.DetailedDrawReset();
						waterfallManager.Draw(spriteBatch);
						TimeLogger.DetailedDrawTime(16);
						DrawTiles();
					}
					else
					{
						spriteBatch.Draw(tile2Target, sceneTile2Pos - screenPosition, Microsoft.Xna.Framework.Color.White);
						TimeLogger.DetailedDrawTime(15);
						waterfallManager.Draw(spriteBatch);
						TimeLogger.DetailedDrawTime(16);
						spriteBatch.Draw(tileTarget, sceneTilePos - screenPosition, Microsoft.Xna.Framework.Color.White);
						TimeLogger.DetailedDrawTime(17);
					}
					TimeLogger.DetailedDrawReset();
					spriteBatch.End();
					DrawCachedProjs(DrawCacheProjsBehindNPCsAndTiles);
					spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, Rasterizer, null, Transform);
					DrawNPCs(true);
					TimeLogger.DetailedDrawTime(18);
					spriteBatch.End();
					DrawCachedProjs(DrawCacheProjsBehindNPCs);
					spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, Rasterizer, null, Transform);
					DrawNPCs();
					DrawCachedNPCs(DrawCacheNPCProjectiles, false);
					TimeLogger.DetailedDrawTime(19);
				}
				else
				{
					if (drawToScreen)
					{
						DrawTiles(false);
						TimeLogger.DetailedDrawReset();
						waterfallManager.Draw(spriteBatch);
						TimeLogger.DetailedDrawTime(16);
						spriteBatch.End();
						DrawCachedProjs(DrawCacheProjsBehindNPCsAndTiles);
						spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, Rasterizer, null, Transform);
						DrawNPCs(true);
						TimeLogger.DetailedDrawTime(18);
						DrawTiles();
					}
					else
					{
						spriteBatch.Draw(tile2Target, sceneTile2Pos - screenPosition, Microsoft.Xna.Framework.Color.White);
						TimeLogger.DetailedDrawTime(15);
						waterfallManager.Draw(spriteBatch);
						TimeLogger.DetailedDrawTime(16);
						spriteBatch.End();
						DrawCachedProjs(DrawCacheProjsBehindNPCsAndTiles);
						spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, Rasterizer, null, Transform);
						DrawNPCs(true);
						TimeLogger.DetailedDrawTime(18);
						spriteBatch.Draw(tileTarget, sceneTilePos - screenPosition, Microsoft.Xna.Framework.Color.White);
						TimeLogger.DetailedDrawTime(17);
					}
					spriteBatch.End();
					DrawCachedProjs(DrawCacheProjsBehindNPCs);
					spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, Rasterizer, null, Transform);
					TimeLogger.DetailedDrawReset();
					DrawNPCs();
					DrawCachedNPCs(DrawCacheNPCProjectiles, false);
					TimeLogger.DetailedDrawTime(19);
				}
			}
			catch (Exception e3)
			{
				TimeLogger.DrawException(e3);
			}
			if (!mapFullscreen && mapStyle == 2)
			{
				if (ignoreErrors)
				{
					try
					{
						DrawMap();
					}
					catch (Exception e4)
					{
						TimeLogger.DrawException(e4);
					}
				}
				else
				{
					DrawMap();
				}
			}
			TimeLogger.DetailedDrawReset();
			spriteBatch.End();
			TimeLogger.DetailedDrawTime(35);
			SortDrawCacheWorms();
			DrawCachedProjs(DrawCacheProjsBehindProjectiles);
			DrawProjectiles();
			DrawPlayers();
			spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, Rasterizer, null, Transform);
			DrawCachedNPCs(DrawCacheNPCsOverPlayers, false);
			if (!gamePaused)
			{
				essScale += (float)essDir * 0.01f;
				if (essScale > 1f)
				{
					essDir = -1;
					essScale = 1f;
				}
				if ((double)essScale < 0.7)
				{
					essDir = 1;
					essScale = 0.7f;
				}
			}
			DrawItems();
			TimeLogger.DetailedDrawTime(22);
			DrawRain();
			if (ignoreErrors)
			{
				try
				{
					DrawGore();
				}
				catch (Exception e5)
				{
					TimeLogger.DrawException(e5);
				}
			}
			else
			{
				DrawGore();
			}
			spriteBatch.End();
			DrawDust();
			spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, Rasterizer, null, Transform);
			if (drawToScreen)
			{
				drawWaters();
				if (player[myPlayer].inventory[player[myPlayer].selectedItem].mech)
				{
					DrawWires();
				}
			}
			else
			{
				spriteBatch.Draw(waterTarget, sceneWaterPos - screenPosition, Microsoft.Xna.Framework.Color.White);
				TimeLogger.DetailedDrawTime(26);
			}
			DrawInfernoRings();
			ScreenDarkness.DrawFront(spriteBatch);
			MoonlordDeathDrama.DrawWhite(spriteBatch);
			ScreenObstruction.Draw(spriteBatch);
			TimeLogger.DetailedDrawReset();
			spriteBatch.End();
			spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
			Overlays.Scene.Draw(spriteBatch);
			spriteBatch.End();
			if (flag)
			{
				base.GraphicsDevice.SetRenderTarget(null);
				base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Black);
				spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.Additive);
				Filters.Scene.Apply();
				spriteBatch.Draw(screenTarget, Vector2.Zero, Microsoft.Xna.Framework.Color.White);
				spriteBatch.End();
			}
			TimeLogger.DetailedDrawTime(36);
			spriteBatch.Begin();
			if (!hideUI)
			{
				TimeLogger.DetailedDrawReset();
				Vector2 vector = default(Vector2);
				for (int m = 0; m < 16; m++)
				{
					if (player[m].active && player[m].chatOverhead.timeLeft > 0 && !player[m].dead)
					{
						Vector2 messageSize = player[m].chatOverhead.messageSize;
						vector.X = player[m].position.X + (float)(player[m].width / 2) - messageSize.X / 2f;
						vector.Y = player[m].position.Y - messageSize.Y - 2f;
						vector.Y += player[m].gfxOffY;
						vector = vector.Floor();
						if (player[myPlayer].gravDir == -1f)
						{
							vector.Y -= screenPosition.Y;
							vector.Y = screenPosition.Y + (float)screenHeight - vector.Y;
						}
						int hoveredSnippet = 0;
						ChatManager.DrawColorCodedStringWithShadow(spriteBatch, fontMouseText, player[m].chatOverhead.snippets, vector - screenPosition, 0f, Vector2.Zero, Vector2.One, out hoveredSnippet);
					}
				}
				for (int n = 0; n < 100; n++)
				{
					if (!combatText[n].active)
					{
						continue;
					}
					int num59 = 0;
					if (combatText[n].crit)
					{
						num59 = 1;
					}
					Vector2 vector2 = fontCombatText[num59].MeasureString(combatText[n].text);
					Vector2 origin = new Vector2(vector2.X * 0.5f, vector2.Y * 0.5f);
					float scale = combatText[n].scale;
					float num60 = (int)combatText[n].color.R;
					float num61 = (int)combatText[n].color.G;
					float num62 = (int)combatText[n].color.B;
					float num63 = (int)combatText[n].color.A;
					num60 *= combatText[n].scale * combatText[n].alpha * 0.3f;
					num62 *= combatText[n].scale * combatText[n].alpha * 0.3f;
					num61 *= combatText[n].scale * combatText[n].alpha * 0.3f;
					num63 *= combatText[n].scale * combatText[n].alpha;
					Microsoft.Xna.Framework.Color color9 = new Microsoft.Xna.Framework.Color((int)num60, (int)num61, (int)num62, (int)num63);
					for (int num64 = 0; num64 < 5; num64++)
					{
						int num65 = 0;
						int num66 = 0;
						switch (num64)
						{
						case 0:
							num65--;
							break;
						case 1:
							num65++;
							break;
						case 2:
							num66--;
							break;
						case 3:
							num66++;
							break;
						default:
							num60 = (float)(int)combatText[n].color.R * combatText[n].scale * combatText[n].alpha;
							num62 = (float)(int)combatText[n].color.B * combatText[n].scale * combatText[n].alpha;
							num61 = (float)(int)combatText[n].color.G * combatText[n].scale * combatText[n].alpha;
							num63 = (float)(int)combatText[n].color.A * combatText[n].scale * combatText[n].alpha;
							color9 = new Microsoft.Xna.Framework.Color((int)num60, (int)num61, (int)num62, (int)num63);
							break;
						}
						if (player[myPlayer].gravDir == -1f)
						{
							float num67 = combatText[n].position.Y - screenPosition.Y;
							num67 = (float)screenHeight - num67;
							spriteBatch.DrawString(fontCombatText[num59], combatText[n].text, new Vector2(combatText[n].position.X - screenPosition.X + (float)num65 + origin.X, num67 + (float)num66 + origin.Y), color9, combatText[n].rotation, origin, combatText[n].scale, SpriteEffects.None, 0f);
						}
						else
						{
							spriteBatch.DrawString(fontCombatText[num59], combatText[n].text, new Vector2(combatText[n].position.X - screenPosition.X + (float)num65 + origin.X, combatText[n].position.Y - screenPosition.Y + (float)num66 + origin.Y), color9, combatText[n].rotation, origin, combatText[n].scale, SpriteEffects.None, 0f);
						}
					}
				}
				for (int num68 = 0; num68 < 20; num68++)
				{
					if (!itemText[num68].active)
					{
						continue;
					}
					string text = itemText[num68].name;
					if (itemText[num68].stack > 1)
					{
						text = text + " (" + itemText[num68].stack + ")";
					}
					Vector2 vector3 = fontMouseText.MeasureString(text);
					Vector2 origin2 = new Vector2(vector3.X * 0.5f, vector3.Y * 0.5f);
					float scale2 = itemText[num68].scale;
					float num69 = (int)itemText[num68].color.R;
					float num70 = (int)itemText[num68].color.G;
					float num71 = (int)itemText[num68].color.B;
					float num72 = (int)itemText[num68].color.A;
					num69 *= itemText[num68].scale * itemText[num68].alpha * 0.3f;
					num71 *= itemText[num68].scale * itemText[num68].alpha * 0.3f;
					num70 *= itemText[num68].scale * itemText[num68].alpha * 0.3f;
					num72 *= itemText[num68].scale * itemText[num68].alpha;
					Microsoft.Xna.Framework.Color color10 = new Microsoft.Xna.Framework.Color((int)num69, (int)num70, (int)num71, (int)num72);
					for (int num73 = 0; num73 < 5; num73++)
					{
						int num74 = 0;
						int num75 = 0;
						switch (num73)
						{
						case 0:
							num74 -= 2;
							break;
						case 1:
							num74 += 2;
							break;
						case 2:
							num75 -= 2;
							break;
						case 3:
							num75 += 2;
							break;
						default:
							num69 = (float)(int)itemText[num68].color.R * itemText[num68].scale * itemText[num68].alpha;
							num71 = (float)(int)itemText[num68].color.B * itemText[num68].scale * itemText[num68].alpha;
							num70 = (float)(int)itemText[num68].color.G * itemText[num68].scale * itemText[num68].alpha;
							num72 = (float)(int)itemText[num68].color.A * itemText[num68].scale * itemText[num68].alpha;
							color10 = new Microsoft.Xna.Framework.Color((int)num69, (int)num70, (int)num71, (int)num72);
							break;
						}
						if (num73 < 4)
						{
							num72 = (float)(int)itemText[num68].color.A * itemText[num68].scale * itemText[num68].alpha;
							color10 = new Microsoft.Xna.Framework.Color(0, 0, 0, (int)num72);
						}
						float num76 = itemText[num68].position.Y - screenPosition.Y + (float)num75;
						if (player[myPlayer].gravDir == -1f)
						{
							num76 = (float)screenHeight - num76;
						}
						spriteBatch.DrawString(fontMouseText, text, new Vector2(itemText[num68].position.X - screenPosition.X + (float)num74 + origin2.X, num76 + origin2.Y), color10, itemText[num68].rotation, origin2, itemText[num68].scale, SpriteEffects.None, 0f);
					}
				}
				if (netMode == 1 && Netplay.Connection.StatusText != "" && Netplay.Connection.StatusText != null)
				{
					string text2 = Netplay.Connection.StatusText + ": " + (int)((float)Netplay.Connection.StatusCount / (float)Netplay.Connection.StatusMax * 100f) + "%";
					spriteBatch.DrawString(fontMouseText, text2, new Vector2(628f - fontMouseText.MeasureString(text2).X * 0.5f + (float)(screenWidth - 800), 84f), new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				if (BlackFadeIn > 0)
				{
					if (BlackFadeIn < 0)
					{
						BlackFadeIn = 0;
					}
					int num77 = BlackFadeIn;
					if (num77 > 255)
					{
						num77 = 255;
					}
					BlackFadeIn -= 25;
					spriteBatch.Draw(loTexture, new Microsoft.Xna.Framework.Rectangle(0, 0, screenWidth, screenHeight), new Microsoft.Xna.Framework.Color(0, 0, 0, num77));
				}
				DrawFPS();
				if (!mapFullscreen)
				{
					if (ignoreErrors)
					{
						try
						{
							DrawInterface(gameTime);
						}
						catch (Exception e6)
						{
							TimeLogger.DrawException(e6);
						}
					}
					else
					{
						DrawInterface(gameTime);
					}
				}
				TimeLogger.DetailedDrawTime(27);
			}
			else
			{
				maxQ = true;
			}
			spriteBatch.End();
			TimeLogger.DetailedDrawTime(37);
			if (mouseLeft)
			{
				mouseLeftRelease = false;
			}
			else
			{
				mouseLeftRelease = true;
			}
			if (mouseRight)
			{
				mouseRightRelease = false;
			}
			else
			{
				mouseRightRelease = true;
			}
			if (mouseState.RightButton != Microsoft.Xna.Framework.Input.ButtonState.Pressed)
			{
				stackSplit = 0;
			}
			if (stackSplit > 0)
			{
				stackSplit--;
			}
			TimeLogger.RenderTime(renderCount, stopwatch.Elapsed.TotalMilliseconds);
			TimeLogger.EndDrawFrame();
		}

		public void DrawInfernoRings()
		{
			for (int i = 0; i < 16; i++)
			{
				if (!player[i].active || player[i].outOfRange || !player[i].inferno || player[i].dead)
				{
					continue;
				}
				LoadFlameRing();
				float num = 1f;
				float num2 = 0.1f;
				float num3 = 0.9f;
				if (!gamePaused && base.IsActive)
				{
					player[i].flameRingScale += 0.004f;
				}
				if (player[i].flameRingScale < 1f)
				{
					num = player[i].flameRingScale;
				}
				else
				{
					player[i].flameRingScale = 0.8f;
					num = player[i].flameRingScale;
				}
				if (!gamePaused && base.IsActive)
				{
					player[i].flameRingRot += 0.05f;
				}
				if (player[i].flameRingRot > (float)Math.PI * 2f)
				{
					player[i].flameRingRot -= (float)Math.PI * 2f;
				}
				if (player[i].flameRingRot < (float)Math.PI * -2f)
				{
					player[i].flameRingRot += (float)Math.PI * 2f;
				}
				for (int j = 0; j < 3; j++)
				{
					float num4 = num + num2 * (float)j;
					if (num4 > 1f)
					{
						num4 -= num2 * 2f;
					}
					float num5 = MathHelper.Lerp(0.8f, 0f, Math.Abs(num4 - num3) * 10f);
					spriteBatch.Draw(flameRingTexture, player[i].Center - screenPosition, new Microsoft.Xna.Framework.Rectangle(0, 400 * j, 400, 400), new Microsoft.Xna.Framework.Color(num5, num5, num5, num5 / 2f), player[i].flameRingRot + (float)Math.PI / 3f * (float)j, new Vector2(200f, 200f), num4, SpriteEffects.None, 0f);
				}
			}
		}

		private static void UpdateInvasion()
		{
			if (invasionType <= 0)
			{
				return;
			}
			if (invasionSize <= 0)
			{
				if (invasionType == 1)
				{
					NPC.downedGoblins = true;
					if (netMode == 2)
					{
						NetMessage.SendData(7);
					}
					AchievementsHelper.NotifyProgressionEvent(10);
				}
				else if (invasionType == 2)
				{
					NPC.downedFrost = true;
					AchievementsHelper.NotifyProgressionEvent(12);
				}
				else if (invasionType == 3)
				{
					NPC.downedPirates = true;
					AchievementsHelper.NotifyProgressionEvent(11);
				}
				else if (invasionType == 4)
				{
					NPC.downedMartians = true;
					AchievementsHelper.NotifyProgressionEvent(13);
				}
				InvasionWarning();
				invasionType = 0;
				invasionDelay = 0;
			}
			if (invasionX == (double)spawnTileX)
			{
				return;
			}
			float num = dayRate;
			if (invasionX > (double)spawnTileX)
			{
				invasionX -= num;
				if (invasionX <= (double)spawnTileX)
				{
					invasionX = spawnTileX;
					InvasionWarning();
				}
				else
				{
					invasionWarn--;
				}
			}
			else if (invasionX < (double)spawnTileX)
			{
				invasionX += num;
				if (invasionX >= (double)spawnTileX)
				{
					invasionX = spawnTileX;
					InvasionWarning();
				}
				else
				{
					invasionWarn--;
				}
			}
			if (invasionWarn <= 0)
			{
				invasionWarn = 3600;
				InvasionWarning();
			}
		}

		private static void InvasionWarning()
		{
			string text = "";
			text = ((invasionSize <= 0) ? ((invasionType == 2) ? Lang.misc[4].Value : ((invasionType == 3) ? Lang.misc[24].Value : ((invasionType != 4) ? (text = Lang.misc[0].Value) : Lang.misc[42].Value))) : ((invasionX < (double)spawnTileX) ? ((invasionType == 2) ? Lang.misc[5].Value : ((invasionType == 3) ? Lang.misc[25].Value : ((invasionType != 4) ? (text = Lang.misc[1].Value) : ""))) : ((invasionX > (double)spawnTileX) ? ((invasionType == 2) ? Lang.misc[6].Value : ((invasionType == 3) ? Lang.misc[26].Value : ((invasionType != 4) ? (text = Lang.misc[2].Value) : ""))) : ((invasionType == 2) ? Lang.misc[7].Value : ((invasionType == 3) ? Lang.misc[27].Value : ((invasionType != 4) ? (text = Lang.misc[3].Value) : Lang.misc[41].Value))))));
			if (netMode == 0)
			{
				NewText(text, 175, 75);
			}
			else if (netMode == 2)
			{
				NetMessage.SendData(25, -1, -1, text, 16, 175f, 75f, 255f);
			}
		}

		public static bool CanStartInvasion(int type = 1, bool ignoreDelay = false)
		{
			if (invasionType != 0)
			{
				return false;
			}
			if (invasionDelay != 0 && !ignoreDelay)
			{
				return false;
			}
			int num = 0;
			for (int i = 0; i < 16; i++)
			{
				if (player[i].active && player[i].statLifeMax >= 200)
				{
					num++;
				}
			}
			return num > 0;
		}

		public static void StartInvasion(int type = 1)
		{
			if (invasionType != 0 && invasionSize == 0)
			{
				invasionType = 0;
			}
			if (invasionType != 0)
			{
				return;
			}
			int num = 0;
			for (int i = 0; i < 16; i++)
			{
				if (player[i].active && player[i].statLifeMax >= 200)
				{
					num++;
				}
			}
			if (num > 0)
			{
				invasionType = type;
				invasionSize = 80 + 40 * num;
				if (type == 3)
				{
					invasionSize += 40 + 20 * num;
				}
				if (type == 4)
				{
					invasionSize = 160 + 40 * num;
				}
				invasionSizeStart = invasionSize;
				invasionProgress = 0;
				invasionProgressIcon = type + 2;
				invasionProgressWave = 0;
				invasionProgressMax = invasionSizeStart;
				invasionWarn = 0;
				if (type == 4)
				{
					invasionX = spawnTileX - 1;
					invasionWarn = 2;
				}
				else if (rand.Next(2) == 0)
				{
					invasionX = 0.0;
				}
				else
				{
					invasionX = maxTilesX;
				}
			}
		}

		public static void FakeLoadInvasionStart()
		{
			int num = 0;
			int num2 = 0;
			switch (invasionType)
			{
			case 1:
			case 2:
				num = 80;
				num2 = 40;
				break;
			case 3:
				num = 120;
				num2 = 60;
				break;
			case 4:
				num = 160;
				num2 = 40;
				break;
			}
			int num3 = (int)Math.Ceiling((float)(invasionSize - num) / (float)num2);
			invasionSizeStart = num;
			if (num3 > 0)
			{
				invasionSizeStart += num3 * num2;
			}
		}

		private static void UpdateClient()
		{
			if (myPlayer == 16)
			{
				Netplay.disconnect = true;
			}
			netPlayCounter++;
			if (netPlayCounter > 3600)
			{
				netPlayCounter = 0;
			}
			if (netPlayCounter % 420 == 0)
			{
				NetMessage.SendData(13, -1, -1, "", myPlayer);
			}
			if (netPlayCounter % 900 == 0)
			{
				NetMessage.SendData(36, -1, -1, "", myPlayer);
				NetMessage.SendData(16, -1, -1, "", myPlayer);
				NetMessage.SendData(40, -1, -1, "", myPlayer);
			}
			if (Netplay.Connection.IsActive)
			{
				Netplay.Connection.TimeOutTimer++;
				if (!stopTimeOuts && Netplay.Connection.TimeOutTimer > 7200)
				{
					statusText = Lang.inter[43].Value;
					Netplay.disconnect = true;
				}
			}
			for (int i = 0; i < 400; i++)
			{
				if (item[i].active && item[i].owner == myPlayer)
				{
					item[i].FindOwner(i);
				}
			}
		}

		private static void UpdateServer()
		{
			netPlayCounter++;
			if (netPlayCounter % 3600 == 0)
			{
				NetMessage.SendData(7);
			}
			if (netPlayCounter >= 10800)
			{
				NetMessage.syncPlayers();
				netPlayCounter = 0;
			}
			for (int i = 0; i < maxNetPlayers; i++)
			{
				if (player[i].active && Netplay.Clients[i].IsActive)
				{
					Netplay.Clients[i].SpamUpdate();
				}
			}
			if (Math.IEEERemainder(netPlayCounter, 900.0) == 0.0)
			{
				bool flag = true;
				int num = lastItemUpdate;
				int num2 = 0;
				while (flag)
				{
					num++;
					if (num >= 400)
					{
						num = 0;
					}
					num2++;
					if (!item[num].active || item[num].owner == 16)
					{
						NetMessage.SendData(21, -1, -1, "", num);
					}
					if (num2 >= maxItemUpdates || num == lastItemUpdate)
					{
						flag = false;
					}
				}
				lastItemUpdate = num;
			}
			for (int j = 0; j < 400; j++)
			{
				if (item[j].active && (item[j].owner == 16 || !player[item[j].owner].active))
				{
					item[j].FindOwner(j);
				}
			}
			for (int k = 0; k < 16; k++)
			{
				if (Netplay.Clients[k].IsActive)
				{
					Netplay.Clients[k].TimeOutTimer++;
					if (!stopTimeOuts && Netplay.Clients[k].TimeOutTimer > 7200)
					{
						Netplay.Clients[k].PendingTermination = true;
					}
				}
				if (player[k].active)
				{
					RemoteClient.CheckSection(k, player[k].position);
				}
			}
		}

		public static void NewText(string newText, byte R = byte.MaxValue, byte G = byte.MaxValue, byte B = byte.MaxValue, bool force = false)
		{
			int num = 80;
			if (!force && newText.Length > num)
			{
				string text = newText;
				while (text.Length > num)
				{
					int num2 = num;
					int num3 = num2;
					while (text.Substring(num3, 1) != " ")
					{
						num3--;
						if (num3 < 1)
						{
							break;
						}
					}
					if (num3 == 0)
					{
						while (text.Substring(num2, 1) != " ")
						{
							num2++;
							if (num2 >= text.Length - 1)
							{
								break;
							}
						}
					}
					else
					{
						num2 = num3;
					}
					if (num2 >= text.Length - 1)
					{
						num2 = text.Length;
					}
					string newText2 = text.Substring(0, num2);
					NewText(newText2, R, G, B, true);
					text = text.Substring(num2);
					if (text.Length > 0)
					{
						while (text.Substring(0, 1) == " ")
						{
							text = text.Substring(1);
						}
					}
				}
				if (text.Length > 0)
				{
					NewText(text, R, G, B, true);
				}
			}
			else
			{
				for (int num4 = numChatLines - 1; num4 > 0; num4--)
				{
					chatLine[num4].text = chatLine[num4 - 1].text;
					chatLine[num4].parsedText = chatLine[num4 - 1].parsedText;
					chatLine[num4].showTime = chatLine[num4 - 1].showTime;
					chatLine[num4].color = chatLine[num4 - 1].color;
				}
				if (R == 0 && G == 0 && B == 0)
				{
					chatLine[0].color = Microsoft.Xna.Framework.Color.White;
				}
				else
				{
					chatLine[0].color = new Microsoft.Xna.Framework.Color(R, G, B);
				}
				chatLine[0].text = newText;
				chatLine[0].parsedText = ChatManager.ParseMessage(chatLine[0].text, chatLine[0].color);
				chatLine[0].showTime = chatLength;
				PlaySound(12);
			}
		}

		private static void StopRain()
		{
			rainTime = 0;
			raining = false;
			maxRaining = 0f;
		}

		private static void StartRain()
		{
			int num = 86400;
			int num2 = num / 24;
			rainTime = rand.Next(num2 * 8, num);
			if (rand.Next(3) == 0)
			{
				rainTime += rand.Next(0, num2);
			}
			if (rand.Next(4) == 0)
			{
				rainTime += rand.Next(0, num2 * 2);
			}
			if (rand.Next(5) == 0)
			{
				rainTime += rand.Next(0, num2 * 2);
			}
			if (rand.Next(6) == 0)
			{
				rainTime += rand.Next(0, num2 * 3);
			}
			if (rand.Next(7) == 0)
			{
				rainTime += rand.Next(0, num2 * 4);
			}
			if (rand.Next(8) == 0)
			{
				rainTime += rand.Next(0, num2 * 5);
			}
			float num3 = 1f;
			if (rand.Next(2) == 0)
			{
				num3 += 0.05f;
			}
			if (rand.Next(3) == 0)
			{
				num3 += 0.1f;
			}
			if (rand.Next(4) == 0)
			{
				num3 += 0.15f;
			}
			if (rand.Next(5) == 0)
			{
				num3 += 0.2f;
			}
			rainTime = (int)((float)rainTime * num3);
			ChangeRain();
			raining = true;
		}

		private static void ChangeRain()
		{
			if (cloudBGActive >= 1f || (double)numClouds > 150.0)
			{
				if (rand.Next(3) == 0)
				{
					maxRaining = (float)rand.Next(20, 90) * 0.01f;
				}
				else
				{
					maxRaining = (float)rand.Next(40, 90) * 0.01f;
				}
			}
			else if ((double)numClouds > 100.0)
			{
				if (rand.Next(3) == 0)
				{
					maxRaining = (float)rand.Next(10, 70) * 0.01f;
				}
				else
				{
					maxRaining = (float)rand.Next(20, 60) * 0.01f;
				}
			}
			else if (rand.Next(3) == 0)
			{
				maxRaining = (float)rand.Next(5, 40) * 0.01f;
			}
			else
			{
				maxRaining = (float)rand.Next(5, 30) * 0.01f;
			}
		}

		public static void StartSlimeRain(bool announce = true)
		{
			if (slimeRain)
			{
				return;
			}
			if (netMode == 1)
			{
				slimeRainTime = 54000.0;
				slimeRain = true;
				SkyManager.Instance.Activate("Slime", default(Vector2));
			}
			else
			{
				if (raining)
				{
					return;
				}
				slimeRainTime = rand.Next(32400, 54000);
				slimeRain = true;
				slimeRainKillCount = 0;
				if (netMode == 0)
				{
					SkyManager.Instance.Activate("Slime", default(Vector2));
					if (announce)
					{
						slimeWarningTime = slimeWarningDelay;
					}
				}
				else if (announce)
				{
					slimeWarningTime = slimeWarningDelay;
					NetMessage.SendData(7);
				}
			}
		}

		public static void StopSlimeRain(bool announce = true)
		{
			if (!slimeRain)
			{
				return;
			}
			if (netMode == 1)
			{
				slimeRainTime = 0.0;
				slimeRain = false;
				SkyManager.Instance.Deactivate("Slime");
				return;
			}
			int num = 86400;
			int num2 = num * 7;
			if (hardMode)
			{
				num2 *= 2;
			}
			slimeRainTime = -rand.Next(3024, 6048) * 100;
			slimeRain = false;
			if (netMode == 0)
			{
				if (announce)
				{
					slimeWarningTime = slimeWarningDelay;
				}
				SkyManager.Instance.Deactivate("Slime");
			}
			else if (announce)
			{
				slimeWarningTime = slimeWarningDelay;
				NetMessage.SendData(7);
			}
		}

		private static void UpdateTime()
		{
			if (pumpkinMoon)
			{
				bloodMoon = false;
				snowMoon = false;
			}
			if (snowMoon)
			{
				bloodMoon = false;
			}
			if ((netMode != 1 && !gameMenu) || netMode == 2)
			{
				if (slimeRainTime > 0.0)
				{
					slimeRainTime -= dayRate;
					if (slimeRainTime <= 0.0)
					{
						StopSlimeRain();
					}
				}
				else if (slimeRainTime < 0.0)
				{
					slimeRainTime += dayRate;
					if (slimeRainTime > 0.0)
					{
						slimeRainTime = 0.0;
					}
				}
				if (raining)
				{
					rainTime -= dayRate;
					if (dayRate > 0)
					{
						int num = 86400;
						num /= dayRate;
						int num2 = num / 24;
						if (rainTime <= 0)
						{
							StopRain();
						}
						else if (rand.Next(num2 * 2) == 0)
						{
							ChangeRain();
						}
					}
				}
				else if (!slimeRain)
				{
					int num3 = 86400;
					num3 /= ((dayRate == 0) ? 1 : dayRate);
					if (rand.Next((int)((double)num3 * 5.5)) == 0)
					{
						StartRain();
					}
					else if (cloudBGActive >= 1f && rand.Next(num3 * 4) == 0)
					{
						StartRain();
					}
					if (!raining && slimeRainTime == 0.0 && !bloodMoon && !eclipse && !snowMoon && !pumpkinMoon && invasionType == 0)
					{
						int num4 = (int)(1728000.0 / (double)dayRate);
						if (!NPC.downedSlimeKing)
						{
							num4 /= 2;
						}
						if (hardMode)
						{
							num4 = (int)((double)num4 * 1.5);
						}
						bool flag = false;
						for (int i = 0; i < 16; i++)
						{
							if (player[i].active && player[i].statLifeMax > 140 && player[i].statDefense > 8)
							{
								flag = true;
							}
						}
						if (!flag)
						{
							num4 *= 5;
						}
						if (dayRate > 0 && num4 > 0 && (flag || expertMode) && rand.Next(num4) == 0)
						{
							StartSlimeRain();
						}
					}
				}
			}
			if (maxRaining != oldMaxRaining)
			{
				if (netMode == 2)
				{
					NetMessage.SendData(7);
				}
				oldMaxRaining = maxRaining;
			}
			UpdateSundial();
			time += dayRate;
			CultistRitual.UpdateTime();
			if (NPC.MoonLordCountdown > 0)
			{
				NPC.MoonLordCountdown--;
				if (NPC.MoonLordCountdown <= 0 && netMode != 1)
				{
					NPC.SpawnOnPlayer(Player.FindClosest(new Vector2(maxTilesX / 2, (float)worldSurface / 2f) * 16f, 0, 0), 398);
				}
			}
			if (NPC.taxCollector && netMode != 2 && !gameMenu)
			{
				player[myPlayer].taxTimer += dayRate;
				if (player[myPlayer].taxTimer >= Player.taxRate)
				{
					player[myPlayer].taxTimer -= Player.taxRate;
					player[myPlayer].CollectTaxes();
				}
			}
			if (netMode != 1 && slimeWarningTime > 0)
			{
				slimeWarningTime--;
				if (slimeWarningTime <= 0)
				{
					if (netMode == 0)
					{
						if (slimeRainTime > 0.0)
						{
							NewText(Lang.gen[74].Value, 50, byte.MaxValue, 130);
						}
						else
						{
							NewText(Lang.gen[75].Value, 50, byte.MaxValue, 130);
						}
					}
					else if (slimeRainTime > 0.0)
					{
						NetMessage.SendData(25, -1, -1, Lang.gen[74].Value, 16, 50f, 255f, 130f);
					}
					else
					{
						NetMessage.SendData(25, -1, -1, Lang.gen[75].Value, 16, 50f, 255f, 130f);
					}
				}
			}
			if (netMode != 1)
			{
				if (NPC.travelNPC)
				{
					if (!dayTime || time > 48600.0)
					{
						WorldGen.UnspawnTravelNPC();
					}
				}
				else if (!fastForwardTime && dayTime && time < 27000.0)
				{
					int num5 = (int)(27000.0 / (double)dayRate);
					num5 *= 4;
					if (rand.Next(num5) == 0)
					{
						int num6 = 0;
						for (int j = 0; j < 200; j++)
						{
							if (npc[j].active && npc[j].townNPC && npc[j].type != 37 && npc[j].type != 453)
							{
								num6++;
							}
						}
						if (num6 >= 2)
						{
							WorldGen.SpawnTravelNPC();
						}
					}
				}
				NPC.travelNPC = false;
			}
			if (!dayTime)
			{
				eclipse = false;
				if (!fastForwardTime)
				{
					if (WorldGen.spawnEye && netMode != 1 && time > 4860.0)
					{
						for (int k = 0; k < 16; k++)
						{
							if (player[k].active && !player[k].dead && (double)player[k].position.Y < worldSurface * 16.0)
							{
								NPC.SpawnOnPlayer(k, 4);
								WorldGen.spawnEye = false;
								break;
							}
						}
					}
					if (WorldGen.spawnHardBoss > 0 && netMode != 1 && time > 4860.0)
					{
						bool flag2 = false;
						for (int l = 0; l < 200; l++)
						{
							if (npc[l].active && npc[l].boss)
							{
								flag2 = true;
							}
						}
						if (!flag2)
						{
							for (int m = 0; m < 16; m++)
							{
								if (player[m].active && !player[m].dead && (double)player[m].position.Y < worldSurface * 16.0)
								{
									if (WorldGen.spawnHardBoss == 1)
									{
										NPC.SpawnOnPlayer(m, 134);
									}
									else if (WorldGen.spawnHardBoss == 2)
									{
										NPC.SpawnOnPlayer(m, 125);
										NPC.SpawnOnPlayer(m, 126);
									}
									else if (WorldGen.spawnHardBoss == 3)
									{
										NPC.SpawnOnPlayer(m, 127);
									}
									break;
								}
							}
						}
						WorldGen.spawnHardBoss = 0;
					}
				}
				if (time > 32400.0)
				{
					if (fastForwardTime)
					{
						fastForwardTime = false;
						UpdateSundial();
					}
					checkXMas();
					checkHalloween();
					AnglerQuestSwap();
					if (invasionDelay > 0)
					{
						invasionDelay--;
					}
					WorldGen.spawnNPC = 0;
					checkForSpawns = 0;
					time = 0.0;
					if (bloodMoon && netMode != 1)
					{
						AchievementsHelper.NotifyProgressionEvent(5);
					}
					bloodMoon = false;
					stopMoonEvent();
					dayTime = true;
					if (sundialCooldown > 0)
					{
						sundialCooldown--;
					}
					moonPhase++;
					if (moonPhase >= 8)
					{
						moonPhase = 0;
					}
					if (netMode == 2)
					{
						NetMessage.SendData(7);
						WorldGen.saveAndPlay();
					}
					if (netMode != 1)
					{
						AchievementsHelper.NotifyProgressionEvent(1);
						if (hardMode && NPC.downedMechBossAny && rand.Next(20) == 0)
						{
							eclipse = true;
							AchievementsHelper.NotifyProgressionEvent(2);
							if (eclipse)
							{
								if (netMode == 0)
								{
									NewText(Lang.misc[20].Value, 50, byte.MaxValue, 130);
								}
								else if (netMode == 2)
								{
									NetMessage.SendData(25, -1, -1, Lang.misc[20].Value, 16, 50f, 255f, 130f);
								}
							}
							if (netMode == 2)
							{
								NetMessage.SendData(7);
							}
						}
						else if (!snowMoon && !pumpkinMoon)
						{
							if (WorldGen.shadowOrbSmashed)
							{
								if (!NPC.downedGoblins)
								{
									if (rand.Next(3) == 0)
									{
										StartInvasion();
									}
								}
								else if ((hardMode && rand.Next(60) == 0) || (!hardMode && rand.Next(30) == 0))
								{
									StartInvasion();
								}
							}
							if (invasionType == 0 && hardMode && WorldGen.altarCount > 0 && ((NPC.downedPirates && rand.Next(50) == 0) || (!NPC.downedPirates && rand.Next(30) == 0)))
							{
								StartInvasion(3);
							}
						}
					}
				}
				if (time > 16200.0 && WorldGen.spawnMeteor)
				{
					WorldGen.spawnMeteor = false;
					WorldGen.dropMeteor();
				}
				return;
			}
			bloodMoon = false;
			stopMoonEvent();
			if (time > 54000.0)
			{
				NPC.setFireFlyChance();
				WorldGen.spawnNPC = 0;
				checkForSpawns = 0;
				if (rand.Next(50) == 0 && netMode != 1 && WorldGen.shadowOrbSmashed)
				{
					WorldGen.spawnMeteor = true;
				}
				if (eclipse && netMode != 1)
				{
					AchievementsHelper.NotifyProgressionEvent(3);
				}
				eclipse = false;
				if (netMode != 1)
				{
					AchievementsHelper.NotifyProgressionEvent(0);
				}
				if (!fastForwardTime)
				{
					if (!NPC.downedBoss1 && netMode != 1)
					{
						bool flag3 = false;
						for (int n = 0; n < 16; n++)
						{
							if (player[n].active && player[n].statLifeMax >= 200 && player[n].statDefense > 10)
							{
								flag3 = true;
								break;
							}
						}
						if (flag3 && rand.Next(3) == 0)
						{
							int num7 = 0;
							for (int num8 = 0; num8 < 200; num8++)
							{
								if (npc[num8].active && npc[num8].townNPC)
								{
									num7++;
								}
							}
							if (num7 >= 4)
							{
								WorldGen.spawnEye = true;
								if (netMode == 0)
								{
									NewText(Lang.misc[9].Value, 50, byte.MaxValue, 130);
								}
								else if (netMode == 2)
								{
									NetMessage.SendData(25, -1, -1, Lang.misc[9].Value, 16, 50f, 255f, 130f);
								}
							}
						}
					}
					if (netMode != 1 && !pumpkinMoon && !snowMoon && WorldGen.altarCount > 0 && hardMode && !WorldGen.spawnEye && rand.Next(10) == 0)
					{
						bool flag4 = false;
						for (int num9 = 0; num9 < 200; num9++)
						{
							if (npc[num9].active && npc[num9].boss)
							{
								flag4 = true;
							}
						}
						if (!flag4 && (!NPC.downedMechBoss1 || !NPC.downedMechBoss2 || !NPC.downedMechBoss3))
						{
							for (int num10 = 0; num10 < 1000; num10++)
							{
								int num11 = rand.Next(3) + 1;
								if (num11 == 1 && !NPC.downedMechBoss1)
								{
									WorldGen.spawnHardBoss = num11;
									if (netMode == 0)
									{
										NewText(Lang.misc[28].Value, 50, byte.MaxValue, 130);
									}
									else if (netMode == 2)
									{
										NetMessage.SendData(25, -1, -1, Lang.misc[28].Value, 16, 50f, 255f, 130f);
									}
									break;
								}
								if (num11 == 2 && !NPC.downedMechBoss2)
								{
									WorldGen.spawnHardBoss = num11;
									if (netMode == 0)
									{
										NewText(Lang.misc[29].Value, 50, byte.MaxValue, 130);
									}
									else if (netMode == 2)
									{
										NetMessage.SendData(25, -1, -1, Lang.misc[29].Value, 16, 50f, 255f, 130f);
									}
									break;
								}
								if (num11 == 3 && !NPC.downedMechBoss3)
								{
									WorldGen.spawnHardBoss = num11;
									if (netMode == 0)
									{
										NewText(Lang.misc[30].Value, 50, byte.MaxValue, 130);
									}
									else if (netMode == 2)
									{
										NetMessage.SendData(25, -1, -1, Lang.misc[30].Value, 16, 50f, 255f, 130f);
									}
									break;
								}
							}
						}
					}
					if (!WorldGen.spawnEye && moonPhase != 4 && rand.Next(9) == 0 && netMode != 1)
					{
						for (int num12 = 0; num12 < 16; num12++)
						{
							if (player[num12].active && player[num12].statLifeMax > 120)
							{
								bloodMoon = true;
								break;
							}
						}
						if (bloodMoon)
						{
							AchievementsHelper.NotifyProgressionEvent(4);
							if (netMode == 0)
							{
								NewText(Lang.misc[8].Value, 50, byte.MaxValue, 130);
							}
							else if (netMode == 2)
							{
								NetMessage.SendData(25, -1, -1, Lang.misc[8].Value, 16, 50f, 255f, 130f);
							}
						}
					}
				}
				time = 0.0;
				dayTime = false;
				if (netMode == 2)
				{
					NetMessage.SendData(7);
				}
			}
			if (netMode == 1 || worldRate <= 0)
			{
				return;
			}
			checkForSpawns++;
			if (checkForSpawns < 7200 / worldRate)
			{
				return;
			}
			int num13 = 0;
			for (int num14 = 0; num14 < 16; num14++)
			{
				if (player[num14].active)
				{
					num13++;
				}
			}
			for (int num15 = 0; num15 < 540; num15++)
			{
				nextNPC[num15] = false;
			}
			checkForSpawns = 0;
			WorldGen.spawnNPC = 0;
			int num16 = 0;
			int num17 = 0;
			int num18 = 0;
			int num19 = 0;
			int num20 = 0;
			int num21 = 0;
			int num22 = 0;
			int num23 = 0;
			int num24 = 0;
			int num25 = 0;
			int num26 = 0;
			int num27 = 0;
			int num28 = 0;
			int num29 = 0;
			int num30 = 0;
			int num31 = 0;
			int num32 = 0;
			int num33 = 0;
			int num34 = 0;
			int num35 = 0;
			int num36 = 0;
			int num37 = 0;
			int num38 = 0;
			int num39 = 0;
			for (int num40 = 0; num40 < 200; num40++)
			{
				if (npc[num40].active && npc[num40].townNPC)
				{
					if (npc[num40].type != 368 && npc[num40].type != 37 && npc[num40].type != 453 && !npc[num40].homeless)
					{
						WorldGen.QuickFindHome(num40);
					}
					if (npc[num40].type == 37)
					{
						num21++;
					}
					if (npc[num40].type == 17)
					{
						num16++;
					}
					if (npc[num40].type == 18)
					{
						num17++;
					}
					if (npc[num40].type == 19)
					{
						num19++;
					}
					if (npc[num40].type == 20)
					{
						num18++;
					}
					if (npc[num40].type == 22)
					{
						num20++;
					}
					if (npc[num40].type == 38)
					{
						num22++;
					}
					if (npc[num40].type == 54)
					{
						num23++;
					}
					if (npc[num40].type == 107)
					{
						num25++;
					}
					if (npc[num40].type == 108)
					{
						num24++;
					}
					if (npc[num40].type == 124)
					{
						num26++;
					}
					if (npc[num40].type == 142)
					{
						num27++;
					}
					if (npc[num40].type == 160)
					{
						num28++;
					}
					if (npc[num40].type == 178)
					{
						num29++;
					}
					if (npc[num40].type == 207)
					{
						num30++;
					}
					if (npc[num40].type == 208)
					{
						num31++;
					}
					if (npc[num40].type == 209)
					{
						num32++;
					}
					if (npc[num40].type == 227)
					{
						num33++;
					}
					if (npc[num40].type == 228)
					{
						num34++;
					}
					if (npc[num40].type == 229)
					{
						num35++;
					}
					if (npc[num40].type == 353)
					{
						num36++;
					}
					if (npc[num40].type == 369)
					{
						num37++;
					}
					if (npc[num40].type == 441)
					{
						num38++;
					}
					num39++;
				}
			}
			if (WorldGen.spawnNPC != 0)
			{
				return;
			}
			int num41 = 0;
			bool flag5 = false;
			int num42 = 0;
			bool flag6 = false;
			bool flag7 = false;
			bool flag8 = false;
			bool flag9 = false;
			for (int num43 = 0; num43 < 16; num43++)
			{
				if (!player[num43].active)
				{
					continue;
				}
				for (int num44 = 0; num44 < 58; num44++)
				{
					if (!((player[num43].inventory[num44] != null) & (player[num43].inventory[num44].stack > 0)))
					{
						continue;
					}
					if (num41 < 2000000000)
					{
						if (player[num43].inventory[num44].type == 71)
						{
							num41 += player[num43].inventory[num44].stack;
						}
						if (player[num43].inventory[num44].type == 72)
						{
							num41 += player[num43].inventory[num44].stack * 100;
						}
						if (player[num43].inventory[num44].type == 73)
						{
							num41 += player[num43].inventory[num44].stack * 10000;
						}
						if (player[num43].inventory[num44].type == 74)
						{
							num41 += player[num43].inventory[num44].stack * 1000000;
						}
					}
					if (player[num43].inventory[num44].ammo == 14 || player[num43].inventory[num44].useAmmo == 14)
					{
						flag6 = true;
					}
					if (player[num43].inventory[num44].type == 166 || player[num43].inventory[num44].type == 167 || player[num43].inventory[num44].type == 168 || player[num43].inventory[num44].type == 235 || player[num43].inventory[num44].type == 2896 || player[num43].inventory[num44].type == 3547)
					{
						flag7 = true;
					}
					if (player[num43].inventory[num44].dye > 0 || (player[num43].inventory[num44].type >= 1107 && player[num43].inventory[num44].type <= 1120) || (player[num43].inventory[num44].type >= 3385 && player[num43].inventory[num44].type <= 3388))
					{
						if (player[num43].inventory[num44].type >= 3385 && player[num43].inventory[num44].type <= 3388)
						{
							flag9 = true;
						}
						flag8 = true;
					}
				}
				int num45 = player[num43].statLifeMax / 20;
				if (num45 > 5)
				{
					flag5 = true;
				}
				num42 += num45;
				if (flag8)
				{
					continue;
				}
				for (int num46 = 0; num46 < 3; num46++)
				{
					if (player[num43].dye[num46] != null && player[num43].dye[num46].stack > 0 && player[num43].dye[num46].dye > 0)
					{
						flag8 = true;
					}
				}
			}
			if (!NPC.downedBoss3 && num21 == 0)
			{
				int num47 = NPC.NewNPC(dungeonX * 16 + 8, dungeonY * 16, 37);
				npc[num47].homeless = false;
				npc[num47].homeTileX = dungeonX;
				npc[num47].homeTileY = dungeonY;
			}
			bool flag10 = false;
			if (rand.Next(40) == 0)
			{
				flag10 = true;
			}
			if (num20 < 1)
			{
				nextNPC[22] = true;
			}
			if ((double)num41 > 5000.0 && num16 < 1)
			{
				nextNPC[17] = true;
			}
			if (flag5 && num17 < 1 && num16 > 0)
			{
				nextNPC[18] = true;
			}
			if (flag6 && num19 < 1)
			{
				nextNPC[19] = true;
			}
			if ((NPC.downedBoss1 || NPC.downedBoss2 || NPC.downedBoss3) && num18 < 1)
			{
				nextNPC[20] = true;
			}
			if (flag7 && num16 > 0 && num22 < 1)
			{
				nextNPC[38] = true;
			}
			if (NPC.savedStylist && num36 < 1)
			{
				nextNPC[353] = true;
			}
			if (NPC.savedAngler && num37 < 1)
			{
				nextNPC[369] = true;
			}
			if (NPC.downedBoss3 && num23 < 1)
			{
				nextNPC[54] = true;
			}
			if (NPC.savedGoblin && num25 < 1)
			{
				nextNPC[107] = true;
			}
			if (NPC.savedTaxCollector && num38 < 1)
			{
				nextNPC[441] = true;
			}
			if (NPC.savedWizard && num24 < 1)
			{
				nextNPC[108] = true;
			}
			if (NPC.savedMech && num26 < 1)
			{
				nextNPC[124] = true;
			}
			if (NPC.downedFrost && num27 < 1 && xMas)
			{
				nextNPC[142] = true;
			}
			if (NPC.downedMechBossAny && num29 < 1)
			{
				nextNPC[178] = true;
			}
			if (flag8 && num30 < 1 && (NPC.downedBoss1 || NPC.downedBoss2 || NPC.downedBoss3 || flag9))
			{
				nextNPC[207] = true;
			}
			if (NPC.downedQueenBee && num34 < 1)
			{
				nextNPC[228] = true;
			}
			if (NPC.downedPirates && num35 < 1)
			{
				nextNPC[229] = true;
			}
			if (num28 < 1 && hardMode)
			{
				nextNPC[160] = true;
			}
			if (hardMode && NPC.downedPlantBoss && num32 < 1)
			{
				nextNPC[209] = true;
			}
			if (num39 >= 8 && num33 < 1)
			{
				nextNPC[227] = true;
			}
			if (flag10 && num31 < 1 && num39 >= 14)
			{
				nextNPC[208] = true;
			}
			if (WorldGen.spawnNPC == 0 && num20 < 1)
			{
				WorldGen.spawnNPC = 22;
			}
			if (WorldGen.spawnNPC == 0 && (double)num41 > 5000.0 && num16 < 1)
			{
				WorldGen.spawnNPC = 17;
			}
			if (WorldGen.spawnNPC == 0 && flag5 && num17 < 1 && num16 > 0)
			{
				WorldGen.spawnNPC = 18;
			}
			if (WorldGen.spawnNPC == 0 && flag6 && num19 < 1)
			{
				WorldGen.spawnNPC = 19;
			}
			if (WorldGen.spawnNPC == 0 && NPC.savedGoblin && num25 < 1)
			{
				WorldGen.spawnNPC = 107;
			}
			if (WorldGen.spawnNPC == 0 && NPC.savedTaxCollector && num38 < 1)
			{
				WorldGen.spawnNPC = 441;
			}
			if (WorldGen.spawnNPC == 0 && NPC.savedWizard && num24 < 1)
			{
				WorldGen.spawnNPC = 108;
			}
			if (WorldGen.spawnNPC == 0 && hardMode && num28 < 1)
			{
				WorldGen.spawnNPC = 160;
			}
			if (WorldGen.spawnNPC == 0 && (NPC.downedBoss1 || NPC.downedBoss2 || NPC.downedBoss3) && num18 < 1)
			{
				WorldGen.spawnNPC = 20;
			}
			if (WorldGen.spawnNPC == 0 && flag7 && num16 > 0 && num22 < 1)
			{
				WorldGen.spawnNPC = 38;
			}
			if (WorldGen.spawnNPC == 0 && NPC.downedQueenBee && num34 < 1)
			{
				WorldGen.spawnNPC = 228;
			}
			if (WorldGen.spawnNPC == 0 && NPC.downedMechBossAny && num29 < 1)
			{
				WorldGen.spawnNPC = 178;
			}
			if (WorldGen.spawnNPC == 0 && NPC.savedMech && num26 < 1)
			{
				WorldGen.spawnNPC = 124;
			}
			if (WorldGen.spawnNPC == 0 && NPC.savedAngler && num37 < 1)
			{
				WorldGen.spawnNPC = 369;
			}
			if (WorldGen.spawnNPC == 0 && hardMode && NPC.downedPlantBoss && num32 < 1)
			{
				WorldGen.spawnNPC = 209;
			}
			if (WorldGen.spawnNPC == 0 && NPC.downedPirates && num35 < 1)
			{
				WorldGen.spawnNPC = 229;
			}
			if (WorldGen.spawnNPC == 0 && NPC.downedBoss3 && num23 < 1)
			{
				WorldGen.spawnNPC = 54;
			}
			if (WorldGen.spawnNPC == 0 && NPC.savedStylist && num36 < 1)
			{
				WorldGen.spawnNPC = 353;
			}
			if (WorldGen.spawnNPC == 0 && flag8 && num30 < 1)
			{
				WorldGen.spawnNPC = 207;
			}
			if (WorldGen.spawnNPC == 0 && num39 >= 8 && num33 < 1)
			{
				WorldGen.spawnNPC = 227;
			}
			if (WorldGen.spawnNPC == 0 && flag10 && num39 >= 14 && num31 < 1)
			{
				WorldGen.spawnNPC = 208;
			}
			if (WorldGen.spawnNPC == 0 && NPC.downedFrost && num27 < 1 && xMas)
			{
				WorldGen.spawnNPC = 142;
			}
		}

		public static int DamageVar(float dmg)
		{
			float num = dmg * (1f + (float)rand.Next(-15, 16) * 0.01f);
			return (int)Math.Round(num);
		}

		public static double CalculateDamage(int Damage, int Defense)
		{
			double num = (double)Damage - (double)Defense * 0.5;
			if (num < 1.0)
			{
				num = 1.0;
			}
			return num;
		}

		public static double CalculatePlayerDamage(int Damage, int Defense)
		{
			double num = (double)Damage - (double)Defense * 0.5;
			if (expertMode)
			{
				num = (double)Damage - (double)Defense * 0.75;
			}
			if (num < 1.0)
			{
				num = 1.0;
			}
			return num;
		}

		public static void PlaySound(int type, Vector2 position, int Style = 1)
		{
			PlaySound(type, (int)position.X, (int)position.Y, Style);
		}

		public static void PlaySound(int type, int x = -1, int y = -1, int Style = 1)
		{
			int num = Style;
			try
			{
				bool flag;
				float num3;
				float num2;
				if (!dedServ && (soundVolume != 0f || (type >= 30 && type <= 35 && type != 39)))
				{
					flag = false;
					num2 = 1f;
					num3 = 0f;
					if (x == -1 || y == -1)
					{
						flag = true;
						goto IL_0155;
					}
					if (!WorldGen.gen && netMode != 2)
					{
						Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle((int)(screenPosition.X - (float)(screenWidth * 2)), (int)(screenPosition.Y - (float)(screenHeight * 2)), screenWidth * 5, screenHeight * 5);
						Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(x, y, 1, 1);
						Vector2 vector = new Vector2(screenPosition.X + (float)screenWidth * 0.5f, screenPosition.Y + (float)screenHeight * 0.5f);
						if (rectangle.Intersects(value))
						{
							flag = true;
						}
						if (flag)
						{
							num3 = ((float)x - vector.X) / ((float)screenWidth * 0.5f);
							float num4 = Math.Abs((float)x - vector.X);
							float num5 = Math.Abs((float)y - vector.Y);
							float num6 = (float)Math.Sqrt(num4 * num4 + num5 * num5);
							num2 = 1f - num6 / ((float)screenWidth * 1.5f);
						}
						goto IL_0155;
					}
				}
				goto end_IL_0002;
				IL_0155:
				if (num3 < -1f)
				{
					num3 = -1f;
				}
				if (num3 > 1f)
				{
					num3 = 1f;
				}
				if (num2 > 1f)
				{
					num2 = 1f;
				}
				if ((!(num2 <= 0f) || (type >= 34 && type <= 35 && type <= 39)) && flag)
				{
					num2 = (((type < 30 || type > 35) && type != 39) ? (num2 * soundVolume) : (num2 * (ambientVolume * (float)((!gameInactive) ? 1 : 0))));
					if (num2 > 1f)
					{
						num2 = 1f;
					}
					if (!(num2 <= 0f) || (type >= 30 && type <= 35) || type == 39)
					{
						switch (type)
						{
						case 0:
						{
							int num14 = rand.Next(3);
							soundInstanceDig[num14].Stop();
							soundInstanceDig[num14] = soundDig[num14].CreateInstance();
							soundInstanceDig[num14].Volume = num2;
							soundInstanceDig[num14].Pan = num3;
							soundInstanceDig[num14].Pitch = (float)rand.Next(-10, 11) * 0.01f;
							soundInstanceDig[num14].Play();
							break;
						}
						case 1:
						{
							int num13 = rand.Next(3);
							soundInstancePlayerHit[num13].Stop();
							soundInstancePlayerHit[num13] = soundPlayerHit[num13].CreateInstance();
							soundInstancePlayerHit[num13].Volume = num2;
							soundInstancePlayerHit[num13].Pan = num3;
							soundInstancePlayerHit[num13].Play();
							break;
						}
						case 2:
							if (num == 123)
							{
								num2 *= 0.5f;
							}
							if (num == 124 || num == 125)
							{
								num2 *= 0.65f;
							}
							switch (num)
							{
							case 1:
							{
								int num18 = rand.Next(3);
								if (num18 == 1)
								{
									num = 18;
								}
								if (num18 == 2)
								{
									num = 19;
								}
								break;
							}
							case 53:
							case 55:
								num2 *= 0.75f;
								if (num == 55)
								{
									num2 *= 0.75f;
								}
								if (soundInstanceItem[num].State == SoundState.Playing)
								{
									return;
								}
								break;
							case 37:
								num2 *= 0.5f;
								break;
							}
							if (num != 9 && num != 10 && num != 24 && num != 26 && num != 34 && num != 43 && num != 103)
							{
								soundInstanceItem[num].Stop();
							}
							soundInstanceItem[num] = soundItem[num].CreateInstance();
							soundInstanceItem[num].Volume = num2;
							soundInstanceItem[num].Pan = num3;
							switch (num)
							{
							case 47:
								soundInstanceItem[num].Pitch = (float)rand.Next(-5, 6) * 0.19f;
								break;
							case 53:
								soundInstanceItem[num].Pitch = (float)rand.Next(-20, -11) * 0.02f;
								break;
							case 55:
								soundInstanceItem[num].Pitch = (float)(-rand.Next(-20, -11)) * 0.02f;
								break;
							default:
								soundInstanceItem[num].Pitch = (float)rand.Next(-6, 7) * 0.01f;
								break;
							}
							if (num == 26 || num == 35)
							{
								soundInstanceItem[num].Volume = num2 * 0.75f;
								soundInstanceItem[num].Pitch = harpNote;
							}
							soundInstanceItem[num].Play();
							break;
						case 3:
							if (num >= 20 && num <= 54)
							{
								num2 *= 0.5f;
							}
							if (num != 57 || soundInstanceNPCHit[num].State != 0)
							{
								if (num == 57)
								{
									num2 *= 0.6f;
								}
								if (num == 55 || num == 56)
								{
									num2 *= 0.5f;
								}
								soundInstanceNPCHit[num].Stop();
								soundInstanceNPCHit[num] = soundNPCHit[num].CreateInstance();
								soundInstanceNPCHit[num].Volume = num2;
								soundInstanceNPCHit[num].Pan = num3;
								soundInstanceNPCHit[num].Pitch = (float)rand.Next(-10, 11) * 0.01f;
								soundInstanceNPCHit[num].Play();
							}
							break;
						case 4:
							if (num >= 23 && num <= 57)
							{
								num2 *= 0.5f;
							}
							if (num == 61)
							{
								num2 *= 0.6f;
							}
							if (num == 62)
							{
								num2 *= 0.6f;
							}
							if (num != 10 || soundInstanceNPCKilled[num].State != 0)
							{
								soundInstanceNPCKilled[num] = soundNPCKilled[num].CreateInstance();
								soundInstanceNPCKilled[num].Volume = num2;
								soundInstanceNPCKilled[num].Pan = num3;
								soundInstanceNPCKilled[num].Pitch = (float)rand.Next(-10, 11) * 0.01f;
								soundInstanceNPCKilled[num].Play();
							}
							break;
						case 5:
							soundInstancePlayerKilled.Stop();
							soundInstancePlayerKilled = soundPlayerKilled.CreateInstance();
							soundInstancePlayerKilled.Volume = num2;
							soundInstancePlayerKilled.Pan = num3;
							soundInstancePlayerKilled.Play();
							break;
						case 6:
							soundInstanceGrass.Stop();
							soundInstanceGrass = soundGrass.CreateInstance();
							soundInstanceGrass.Volume = num2;
							soundInstanceGrass.Pan = num3;
							soundInstanceGrass.Pitch = (float)rand.Next(-30, 31) * 0.01f;
							soundInstanceGrass.Play();
							break;
						case 7:
							soundInstanceGrab.Stop();
							soundInstanceGrab = soundGrab.CreateInstance();
							soundInstanceGrab.Volume = num2;
							soundInstanceGrab.Pan = num3;
							soundInstanceGrab.Pitch = (float)rand.Next(-10, 11) * 0.01f;
							soundInstanceGrab.Play();
							break;
						case 8:
							soundInstanceDoorOpen.Stop();
							soundInstanceDoorOpen = soundDoorOpen.CreateInstance();
							soundInstanceDoorOpen.Volume = num2;
							soundInstanceDoorOpen.Pan = num3;
							soundInstanceDoorOpen.Pitch = (float)rand.Next(-20, 21) * 0.01f;
							soundInstanceDoorOpen.Play();
							break;
						case 9:
							soundInstanceDoorClosed.Stop();
							soundInstanceDoorClosed = soundDoorClosed.CreateInstance();
							soundInstanceDoorClosed.Volume = num2;
							soundInstanceDoorClosed.Pan = num3;
							soundInstanceDoorOpen.Pitch = (float)rand.Next(-20, 21) * 0.01f;
							soundInstanceDoorClosed.Play();
							break;
						case 10:
							soundInstanceMenuOpen.Stop();
							soundInstanceMenuOpen = soundMenuOpen.CreateInstance();
							soundInstanceMenuOpen.Volume = num2;
							soundInstanceMenuOpen.Pan = num3;
							soundInstanceMenuOpen.Play();
							break;
						case 11:
							soundInstanceMenuClose.Stop();
							soundInstanceMenuClose = soundMenuClose.CreateInstance();
							soundInstanceMenuClose.Volume = num2;
							soundInstanceMenuClose.Pan = num3;
							soundInstanceMenuClose.Play();
							break;
						case 12:
							soundInstanceMenuTick.Stop();
							soundInstanceMenuTick = soundMenuTick.CreateInstance();
							soundInstanceMenuTick.Volume = num2;
							soundInstanceMenuTick.Pan = num3;
							soundInstanceMenuTick.Play();
							break;
						case 13:
							soundInstanceShatter.Stop();
							soundInstanceShatter = soundShatter.CreateInstance();
							soundInstanceShatter.Volume = num2;
							soundInstanceShatter.Pan = num3;
							soundInstanceShatter.Play();
							break;
						case 14:
							if (Style == 489)
							{
								int num15 = rand.Next(21, 24);
								soundInstanceZombie[num15] = soundZombie[num15].CreateInstance();
								soundInstanceZombie[num15].Volume = num2 * 0.4f;
								soundInstanceZombie[num15].Pan = num3;
								soundInstanceZombie[num15].Play();
							}
							else
							{
								int num16 = rand.Next(3);
								soundInstanceZombie[num16] = soundZombie[num16].CreateInstance();
								soundInstanceZombie[num16].Volume = num2 * 0.4f;
								soundInstanceZombie[num16].Pan = num3;
								soundInstanceZombie[num16].Play();
							}
							break;
						case 15:
							if (soundInstanceRoar[num].State == SoundState.Stopped)
							{
								soundInstanceRoar[num] = soundRoar[num].CreateInstance();
								soundInstanceRoar[num].Volume = num2;
								soundInstanceRoar[num].Pan = num3;
								soundInstanceRoar[num].Play();
							}
							break;
						case 16:
							soundInstanceDoubleJump.Stop();
							soundInstanceDoubleJump = soundDoubleJump.CreateInstance();
							soundInstanceDoubleJump.Volume = num2;
							soundInstanceDoubleJump.Pan = num3;
							soundInstanceDoubleJump.Pitch = (float)rand.Next(-10, 11) * 0.01f;
							soundInstanceDoubleJump.Play();
							break;
						case 17:
							soundInstanceRun.Stop();
							soundInstanceRun = soundRun.CreateInstance();
							soundInstanceRun.Volume = num2;
							soundInstanceRun.Pan = num3;
							soundInstanceRun.Pitch = (float)rand.Next(-10, 11) * 0.01f;
							soundInstanceRun.Play();
							break;
						case 18:
							soundInstanceCoins = soundCoins.CreateInstance();
							soundInstanceCoins.Volume = num2;
							soundInstanceCoins.Pan = num3;
							soundInstanceCoins.Play();
							break;
						case 19:
							if (soundInstanceSplash[num].State == SoundState.Stopped)
							{
								soundInstanceSplash[num] = soundSplash[num].CreateInstance();
								soundInstanceSplash[num].Volume = num2;
								soundInstanceSplash[num].Pan = num3;
								soundInstanceSplash[num].Pitch = (float)rand.Next(-10, 11) * 0.01f;
								soundInstanceSplash[num].Play();
							}
							break;
						case 20:
						{
							int num12 = rand.Next(3);
							soundInstanceFemaleHit[num12].Stop();
							soundInstanceFemaleHit[num12] = soundFemaleHit[num12].CreateInstance();
							soundInstanceFemaleHit[num12].Volume = num2;
							soundInstanceFemaleHit[num12].Pan = num3;
							soundInstanceFemaleHit[num12].Play();
							break;
						}
						case 21:
						{
							int num10 = rand.Next(3);
							soundInstanceTink[num10].Stop();
							soundInstanceTink[num10] = soundTink[num10].CreateInstance();
							soundInstanceTink[num10].Volume = num2;
							soundInstanceTink[num10].Pan = num3;
							soundInstanceTink[num10].Play();
							break;
						}
						case 22:
							soundInstanceUnlock.Stop();
							soundInstanceUnlock = soundUnlock.CreateInstance();
							soundInstanceUnlock.Volume = num2;
							soundInstanceUnlock.Pan = num3;
							soundInstanceUnlock.Play();
							break;
						case 23:
							soundInstanceDrown.Stop();
							soundInstanceDrown = soundDrown.CreateInstance();
							soundInstanceDrown.Volume = num2;
							soundInstanceDrown.Pan = num3;
							soundInstanceDrown.Play();
							break;
						case 24:
							soundInstanceChat = soundChat.CreateInstance();
							soundInstanceChat.Volume = num2;
							soundInstanceChat.Pan = num3;
							soundInstanceChat.Play();
							break;
						case 25:
							soundInstanceMaxMana = soundMaxMana.CreateInstance();
							soundInstanceMaxMana.Volume = num2;
							soundInstanceMaxMana.Pan = num3;
							soundInstanceMaxMana.Play();
							break;
						case 26:
						{
							int num19 = rand.Next(3, 5);
							soundInstanceZombie[num19] = soundZombie[num19].CreateInstance();
							soundInstanceZombie[num19].Volume = num2 * 0.9f;
							soundInstanceZombie[num19].Pan = num3;
							soundInstanceZombie[num19].Pitch = (float)rand.Next(-10, 11) * 0.01f;
							soundInstanceZombie[num19].Play();
							break;
						}
						case 27:
							if (soundInstancePixie.State == SoundState.Playing)
							{
								soundInstancePixie.Volume = num2;
								soundInstancePixie.Pan = num3;
								soundInstancePixie.Pitch = (float)rand.Next(-10, 11) * 0.01f;
							}
							else
							{
								soundInstancePixie.Stop();
								soundInstancePixie = soundPixie.CreateInstance();
								soundInstancePixie.Volume = num2;
								soundInstancePixie.Pan = num3;
								soundInstancePixie.Pitch = (float)rand.Next(-10, 11) * 0.01f;
								soundInstancePixie.Play();
							}
							break;
						case 28:
							if (soundInstanceMech[num].State != 0)
							{
								soundInstanceMech[num] = soundMech[num].CreateInstance();
								soundInstanceMech[num].Volume = num2;
								soundInstanceMech[num].Pan = num3;
								soundInstanceMech[num].Pitch = (float)rand.Next(-10, 11) * 0.01f;
								soundInstanceMech[num].Play();
							}
							break;
						case 29:
							if (num >= 24 && num <= 87)
							{
								num2 *= 0.5f;
							}
							if (num >= 88 && num <= 91)
							{
								num2 *= 0.7f;
							}
							if (num >= 93 && num <= 99)
							{
								num2 *= 0.4f;
							}
							if (num == 92)
							{
								num2 *= 0.5f;
							}
							if (num == 103)
							{
								num2 *= 0.4f;
							}
							if (num == 104)
							{
								num2 *= 0.55f;
							}
							if (num == 100 || num == 101)
							{
								num2 *= 0.25f;
							}
							if (num == 102)
							{
								num2 *= 0.4f;
							}
							if (soundInstanceZombie[num].State != 0)
							{
								soundInstanceZombie[num] = soundZombie[num].CreateInstance();
								soundInstanceZombie[num].Volume = num2;
								soundInstanceZombie[num].Pan = num3;
								soundInstanceZombie[num].Pitch = (float)rand.Next(-10, 11) * 0.01f;
								soundInstanceZombie[num].Play();
							}
							break;
						case 30:
							num = rand.Next(10, 12);
							if (rand.Next(300) == 0)
							{
								num = 12;
								if (soundInstanceZombie[num].State == SoundState.Playing)
								{
									break;
								}
							}
							soundInstanceZombie[num] = soundZombie[num].CreateInstance();
							soundInstanceZombie[num].Volume = num2 * 0.75f;
							soundInstanceZombie[num].Pan = num3;
							if (num != 12)
							{
								soundInstanceZombie[num].Pitch = (float)rand.Next(-70, 1) * 0.01f;
							}
							else
							{
								soundInstanceZombie[num].Pitch = (float)rand.Next(-40, 21) * 0.01f;
							}
							soundInstanceZombie[num].Play();
							break;
						case 31:
							num = 13;
							soundInstanceZombie[num] = soundZombie[num].CreateInstance();
							soundInstanceZombie[num].Volume = num2 * 0.35f;
							soundInstanceZombie[num].Pan = num3;
							soundInstanceZombie[num].Pitch = (float)rand.Next(-40, 21) * 0.01f;
							soundInstanceZombie[num].Play();
							break;
						case 32:
							if (soundInstanceZombie[num].State != 0)
							{
								soundInstanceZombie[num] = soundZombie[num].CreateInstance();
								soundInstanceZombie[num].Volume = num2 * 0.15f;
								soundInstanceZombie[num].Pan = num3;
								soundInstanceZombie[num].Pitch = (float)rand.Next(-70, 26) * 0.01f;
								soundInstanceZombie[num].Play();
							}
							break;
						case 33:
							num = 15;
							if (soundInstanceZombie[num].State != 0)
							{
								soundInstanceZombie[num] = soundZombie[num].CreateInstance();
								soundInstanceZombie[num].Volume = num2 * 0.2f;
								soundInstanceZombie[num].Pan = num3;
								soundInstanceZombie[num].Pitch = (float)rand.Next(-10, 31) * 0.01f;
								soundInstanceZombie[num].Play();
							}
							break;
						case 34:
						{
							float num17 = (float)num / 50f;
							if (num17 > 1f)
							{
								num17 = 1f;
							}
							num2 *= num17;
							num2 *= 0.2f;
							if (num2 <= 0f || x == -1 || y == -1)
							{
								if (soundInstanceLiquid[0].State == SoundState.Playing)
								{
									soundInstanceLiquid[0].Stop();
								}
							}
							else if (soundInstanceLiquid[0].State == SoundState.Playing)
							{
								soundInstanceLiquid[0].Volume = num2;
								soundInstanceLiquid[0].Pan = num3;
								soundInstanceLiquid[0].Pitch = -0.2f;
							}
							else
							{
								soundInstanceLiquid[0] = soundLiquid[0].CreateInstance();
								soundInstanceLiquid[0].Volume = num2;
								soundInstanceLiquid[0].Pan = num3;
								soundInstanceLiquid[0].Play();
							}
							break;
						}
						case 35:
						{
							float num11 = (float)num / 50f;
							if (num11 > 1f)
							{
								num11 = 1f;
							}
							num2 *= num11;
							num2 *= 0.65f;
							if (num2 <= 0f || x == -1 || y == -1)
							{
								if (soundInstanceLiquid[1].State == SoundState.Playing)
								{
									soundInstanceLiquid[1].Stop();
								}
							}
							else if (soundInstanceLiquid[1].State == SoundState.Playing)
							{
								soundInstanceLiquid[1].Volume = num2;
								soundInstanceLiquid[1].Pan = num3;
								soundInstanceLiquid[1].Pitch = -0f;
							}
							else
							{
								soundInstanceLiquid[1] = soundLiquid[1].CreateInstance();
								soundInstanceLiquid[1].Volume = num2;
								soundInstanceLiquid[1].Pan = num3;
								soundInstanceLiquid[1].Play();
							}
							break;
						}
						case 36:
						{
							int num9 = Style;
							if (Style == -1)
							{
								num9 = 0;
							}
							soundInstanceRoar[num9] = soundRoar[num9].CreateInstance();
							soundInstanceRoar[num9].Volume = num2;
							soundInstanceRoar[num9].Pan = num3;
							if (Style == -1)
							{
								soundInstanceRoar[num9].Pitch += 0.6f;
							}
							soundInstanceRoar[num9].Play();
							break;
						}
						case 37:
						{
							int num8 = rand.Next(57, 59);
							num2 *= (float)Style * 0.05f;
							soundInstanceItem[num8] = soundItem[num8].CreateInstance();
							soundInstanceItem[num8].Volume = num2;
							soundInstanceItem[num8].Pan = num3;
							soundInstanceItem[num8].Pitch = (float)rand.Next(-40, 41) * 0.01f;
							soundInstanceItem[num8].Play();
							break;
						}
						case 38:
						{
							int num7 = rand.Next(5);
							soundInstanceCoin[num7] = soundCoin[num7].CreateInstance();
							soundInstanceCoin[num7].Volume = num2;
							soundInstanceCoin[num7].Pan = num3;
							soundInstanceCoin[num7].Pitch = (float)rand.Next(-40, 41) * 0.002f;
							soundInstanceCoin[num7].Play();
							break;
						}
						case 39:
							num = Style;
							soundInstanceDrip[num] = soundDrip[num].CreateInstance();
							soundInstanceDrip[num].Volume = num2 * 0.5f;
							soundInstanceDrip[num].Pan = num3;
							soundInstanceDrip[num].Pitch = (float)rand.Next(-30, 31) * 0.01f;
							soundInstanceDrip[num].Play();
							break;
						case 40:
							soundInstanceCamera.Stop();
							soundInstanceCamera = soundCamera.CreateInstance();
							soundInstanceCamera.Volume = num2;
							soundInstanceCamera.Pan = num3;
							soundInstanceCamera.Play();
							break;
						case 41:
							soundInstanceMoonlordCry = soundNPCKilled[10].CreateInstance();
							soundInstanceMoonlordCry.Volume = 1f / (1f + (new Vector2(x, y) - player[myPlayer].position).Length());
							soundInstanceMoonlordCry.Pan = num3;
							soundInstanceMoonlordCry.Pitch = (float)rand.Next(-10, 11) * 0.01f;
							soundInstanceMoonlordCry.Play();
							break;
						}
					}
				}
				end_IL_0002:;
			}
			catch
			{
			}
		}

		public static void ClearPendingPlayerSelectCallbacks()
		{
			_pendingCharacterSelect = null;
		}

		public static void SelectPlayer(PlayerFileData data)
		{
			if (_pendingCharacterSelect != null)
			{
				_pendingCharacterSelect(data);
				_pendingCharacterSelect = null;
			}
			else if (menuMultiplayer)
			{
				ServerSideCharacter = false;
				data.SetAsActive();
				PlaySound(10);
				if (autoJoin)
				{
					if (Netplay.SetRemoteIP(getIP))
					{
						menuMode = 10;
						Netplay.StartTcpClient();
					}
					autoJoin = false;
				}
				else if (menuServer)
				{
					LoadWorlds();
					menuMode = 6;
				}
				else
				{
					menuMode = 13;
					clrInput();
				}
			}
			else
			{
				ServerSideCharacter = false;
				myPlayer = 0;
				data.SetAsActive();
				player[myPlayer].position = Vector2.Zero;
				LoadWorlds();
				PlaySound(10);
				menuMode = 6;
			}
		}

		public static void ToggleFullScreen()
		{
			SetFullScreen(!graphics.IsFullScreen);
		}

		public static void SetFullScreen(bool fullscreen)
		{
			SetDisplayMode(PendingResolutionWidth, PendingResolutionHeight, fullscreen);
		}

		public static void SetResolution(int width, int height)
		{
			SetDisplayMode(width, height, graphics.IsFullScreen);
		}

		public static void SetDisplayMode(int width, int height, bool fullscreen)
		{
			if (graphics.IsFullScreen != fullscreen)
			{
				graphics.ToggleFullScreen();
			}
			screenMaximized = (((Form)Control.FromHandle(instance.Window.Handle)).WindowState == FormWindowState.Maximized);
			Form form = (Form)Control.FromHandle(instance.Window.Handle);
			if (!instance.IsActive && (screenMaximized || graphics.IsFullScreen))
			{
				return;
			}
			bool flag = false;
			int num3;
			int num4;
			if (screenMaximized || graphics.IsFullScreen)
			{
				form.MinimumSize = new Size(0, 0);
				if (width > maxScreenW)
				{
					float num = (float)height / (float)width;
					width = maxScreenW;
					height = (int)(num * (float)width);
				}
				if (height > maxScreenH)
				{
					float num2 = (float)width / (float)height;
					height = maxScreenH;
					width = (int)(num2 * (float)height);
				}
				num3 = graphics.PreferredBackBufferWidth;
				num4 = graphics.PreferredBackBufferHeight;
			}
			else
			{
				form.MinimumSize = new Size(minScreenW, minScreenH);
				width = Math.Min(width, maxScreenW);
				height = Math.Min(height, maxScreenH);
				num3 = graphics.GraphicsDevice.Viewport.Width;
				num4 = graphics.GraphicsDevice.Viewport.Height;
				flag = (graphics.PreferredBackBufferWidth != graphics.GraphicsDevice.Viewport.Width || graphics.PreferredBackBufferHeight != graphics.GraphicsDevice.Viewport.Height);
			}
			if (!fullscreen && !flag)
			{
				if (form.ClientSize.Width < graphics.PreferredBackBufferWidth)
				{
					width = form.ClientSize.Width;
					flag = true;
				}
				if (form.ClientSize.Height < graphics.PreferredBackBufferHeight)
				{
					height = form.ClientSize.Height;
					flag = true;
				}
			}
			width &= 0x7FFFFFFE;
			height &= 0x7FFFFFFE;
			width = Math.Max(width, minScreenW);
			height = Math.Max(height, minScreenH);
			if (width != num3 || height != num4 || flag)
			{
				mapTime = 0;
				if (gamePaused)
				{
					renderNow = true;
				}
				screenWidth = width;
				screenHeight = height;
				graphics.PreferredBackBufferWidth = screenWidth;
				graphics.PreferredBackBufferHeight = screenHeight;
				graphics.ApplyChanges();
				PendingResolutionWidth = screenWidth;
				PendingResolutionHeight = screenHeight;
				if (!fullscreen)
				{
					form.SendToBack();
					form.BringToFront();
				}
				Lighting.Initialize(true);
				if (!drawToScreen)
				{
					instance.InitTargets();
				}
				UserInterface.ActiveInstance.Recalculate();
				Console.WriteLine("Resolution changed to: " + width + "x" + height + ".");
			}
			if (!graphics.SynchronizeWithVerticalRetrace)
			{
				graphics.SynchronizeWithVerticalRetrace = true;
				graphics.ApplyChanges();
			}
		}

		public void UpdateDisplaySettings()
		{
			SetResolution(base.GraphicsDevice.Viewport.Width, base.GraphicsDevice.Viewport.Height);
		}

		public static void OpenPlayerSelect(OnPlayerSelected method)
		{
			if (!gameMenu || (menuMode != 10 && menuMode != 14))
			{
				if (!gameMenu)
				{
					WorldGen.SaveAndQuit(delegate
					{
						LoadPlayers();
						MenuUI.SetState(_characterSelectMenu);
						menuMode = 888;
						_pendingCharacterSelect = method;
					});
					return;
				}
				LoadPlayers();
				MenuUI.SetState(_characterSelectMenu);
				menuMode = 888;
				_pendingCharacterSelect = method;
			}
		}

		public static void SwitchNetMode(int mode)
		{
			if (mode >= 0 && mode <= 2)
			{
				_targetNetMode = mode;
				_hasPendingNetmodeChange = true;
			}
		}
	}
}
